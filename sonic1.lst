00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ2-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ1:
0000755E 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007564 4E75                       		rts	
00007566                            
00007566                            Resize_SLZ2:
00007566 4E75                       		rts	
00007568                            ; ===========================================================================
00007568                            
00007568                            Resize_SLZ3:
00007568 7000                       		moveq	#0,d0
0000756A 1038 F742                  		move.b	($FFFFF742).w,d0
0000756E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007572 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007576                            ; ===========================================================================
00007576 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007578 0000                       		dc.w Resize_SLZ3boss-off_7118
0000757A 0000                       		dc.w Resize_SLZ3end-off_7118
0000757C                            ; ===========================================================================
0000757C                            
0000757C                            Resize_SLZ3main:
0000757C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007582 6500                       		bcs.s	locret_7130
00007584 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000758A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000758E                            
0000758E                            locret_7130:
0000758E 4E75                       		rts	
00007590                            ; ===========================================================================
00007590                            
00007590                            Resize_SLZ3boss:
00007590 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007596 6500                       		bcs.s	locret_715C
00007598 6100 0000                  		bsr.w	SingleObjLoad
0000759C 6600                       		bne.s	loc_7144
0000759E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000075A2                            
000075A2                            loc_7144:
000075A2 303C 008C                  		move.w	#$8C,d0
000075A6 6100 A00E                  		bsr.w	PlaySound	; play boss music
000075AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000075B4 7011                       		moveq	#$11,d0
000075B6 6000 A1E8                  		bra.w	LoadPLC		; load boss patterns
000075BA                            ; ===========================================================================
000075BA                            
000075BA                            locret_715C:
000075BA 4E75                       		rts	
000075BC                            ; ===========================================================================
000075BC                            
000075BC                            Resize_SLZ3end:
000075BC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075C2 4E75                       		rts
000075C4 4E75                       		rts
000075C6                            ; ===========================================================================
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            ; Spring Yard Zone dynamic screen resizing
000075C6                            ; ---------------------------------------------------------------------------
000075C6                            
000075C6                            Resize_SYZ:				; XREF: Resize_Index
000075C6 7000                       		moveq	#0,d0
000075C8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075CC D040                       		add.w	d0,d0
000075CE 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075D2 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075D6                            ; ===========================================================================
000075D6 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D8 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075DA 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            Resize_SYZ1:
000075DC 4E75                       		rts	
000075DE                            ; ===========================================================================
000075DE                            
000075DE                            Resize_SYZ2:
000075DE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075E4 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075EA 6500                       		bcs.s	locret_71A2
000075EC 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075F2 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F8 6500                       		bcs.s	locret_71A2
000075FA 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007600                            
00007600                            locret_71A2:
00007600 4E75                       		rts	
00007602                            ; ===========================================================================
00007602                            
00007602                            Resize_SYZ3:
00007602 7000                       		moveq	#0,d0
00007604 1038 F742                  		move.b	($FFFFF742).w,d0
00007608 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000760C 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007610                            ; ===========================================================================
00007610 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007612 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007614 0000                       		dc.w Resize_SYZ3end-off_71B2
00007616                            ; ===========================================================================
00007616                            
00007616                            Resize_SYZ3main:
00007616 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
0000761C 6500                       		bcs.s	locret_71CE
0000761E 6100 0000                  		bsr.w	SingleObjLoad
00007622 6600                       		bne.s	locret_71CE
00007624 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007628 5438 F742                  		addq.b	#2,($FFFFF742).w
0000762C                            
0000762C                            locret_71CE:
0000762C 4E75                       		rts	
0000762E                            ; ===========================================================================
0000762E                            
0000762E                            Resize_SYZ3boss:
0000762E 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007634 6500                       		bcs.s	locret_7200
00007636 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
0000763C 6100 0000                  		bsr.w	SingleObjLoad
00007640 6600                       		bne.s	loc_71EC
00007642 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007646 5438 F742                  		addq.b	#2,($FFFFF742).w
0000764A                            
0000764A                            loc_71EC:
0000764A 303C 008C                  		move.w	#$8C,d0
0000764E 6100 9F66                  		bsr.w	PlaySound	; play boss music
00007652 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007658 7011                       		moveq	#$11,d0
0000765A 6000 A144                  		bra.w	LoadPLC		; load boss patterns
0000765E                            ; ===========================================================================
0000765E                            
0000765E                            locret_7200:
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            
00007660                            Resize_SYZ3end:
00007660 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007666 4E75                       		rts	
00007668                            ; ===========================================================================
00007668                            ; ---------------------------------------------------------------------------
00007668                            ; Scrap	Brain Zone dynamic screen resizing
00007668                            ; ---------------------------------------------------------------------------
00007668                            
00007668                            Resize_SBZ:				; XREF: Resize_Index
00007668 7000                       		moveq	#0,d0
0000766A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000766E D040                       		add.w	d0,d0
00007670 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007674 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007678                            ; ===========================================================================
00007678 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000767A 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000767C 0000                       		dc.w Resize_FZ-Resize_SBZx
0000767E                            ; ===========================================================================
0000767E                            
0000767E                            Resize_SBZ1:
0000767E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007684 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000768A 6500                       		bcs.s	locret_7242
0000768C 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007692 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007698 6500                       		bcs.s	locret_7242
0000769A 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000076A0                            
000076A0                            locret_7242:
000076A0 4E75                       		rts	
000076A2                            ; ===========================================================================
000076A2                            
000076A2                            Resize_SBZ2:
000076A2 7000                       		moveq	#0,d0
000076A4 1038 F742                  		move.b	($FFFFF742).w,d0
000076A8 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076AC 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076B0                            ; ===========================================================================
000076B0 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076B2 0000                       		dc.w Resize_SBZ2boss-off_7252
000076B4 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076B6 0000                       		dc.w Resize_SBZ2end-off_7252
000076B8                            ; ===========================================================================
000076B8                            
000076B8                            Resize_SBZ2main:
000076B8 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076BE 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076C4 6500                       		bcs.s	locret_727A
000076C6 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076CC 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076D2 6500                       		bcs.s	locret_727A
000076D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D8                            
000076D8                            locret_727A:
000076D8 4E75                       		rts	
000076DA                            ; ===========================================================================
000076DA                            
000076DA                            Resize_SBZ2boss:
000076DA 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076E0 6500                       		bcs.s	locret_7298
000076E2 6100 0000                  		bsr.w	SingleObjLoad
000076E6 6600                       		bne.s	locret_7298
000076E8 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076F0 701E                       		moveq	#$1E,d0
000076F2 6000 A0AC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076F6                            ; ===========================================================================
000076F6                            
000076F6                            locret_7298:
000076F6 4E75                       		rts	
000076F8                            ; ===========================================================================
000076F8                            
000076F8                            Resize_SBZ2boss2:
000076F8 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076FE 6500                       		bcs.s	loc_72B6
00007700 6100 0000                  		bsr.w	SingleObjLoad
00007704 6600                       		bne.s	loc_72B0
00007706 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000770A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000770E                            
0000770E                            loc_72B0:
0000770E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007714                            
00007714                            loc_72B6:
00007714 6000                       		bra.s	loc_72C2
00007716                            ; ===========================================================================
00007716                            
00007716                            Resize_SBZ2end:
00007716 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
0000771C 6500                       		bcs.s	loc_72C2
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            loc_72C2:
00007720 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007726 4E75                       		rts	
00007728                            ; ===========================================================================
00007728                            
00007728                            Resize_FZ:
00007728 7000                       		moveq	#0,d0
0000772A 1038 F742                  		move.b	($FFFFF742).w,d0
0000772E 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007732 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007736                            ; ===========================================================================
00007736 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000773A 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
0000773E 0000                       		dc.w Resize_FZend2-off_72D8
00007740                            ; ===========================================================================
00007740                            
00007740                            Resize_FZmain:
00007740 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007746 6500                       		bcs.s	loc_72F4
00007748 5438 F742                  		addq.b	#2,($FFFFF742).w
0000774C 701F                       		moveq	#$1F,d0
0000774E 6100 A050                  		bsr.w	LoadPLC		; load FZ boss patterns
00007752                            
00007752                            loc_72F4:
00007752 60CC                       		bra.s	loc_72C2
00007754                            ; ===========================================================================
00007754                            
00007754                            Resize_FZboss:
00007754 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000775A 6500                       		bcs.s	loc_7312
0000775C 6100 0000                  		bsr.w	SingleObjLoad
00007760 6600                       		bne.s	loc_7312
00007762 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007766 5438 F742                  		addq.b	#2,($FFFFF742).w
0000776A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007770                            
00007770                            loc_7312:
00007770 60AE                       		bra.s	loc_72C2
00007772                            ; ===========================================================================
00007772                            
00007772                            Resize_FZend:
00007772 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007778 6500                       		bcs.s	loc_7320
0000777A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000777E                            
0000777E                            loc_7320:
0000777E 60A0                       		bra.s	loc_72C2
00007780                            ; ===========================================================================
00007780                            
00007780                            locret_7322:
00007780 4E75                       		rts	
00007782                            ; ===========================================================================
00007782                            
00007782                            Resize_FZend2:
00007782 609C                       		bra.s	loc_72C2
00007784                            ; ===========================================================================
00007784                            ; ---------------------------------------------------------------------------
00007784                            ; Ending sequence dynamic screen resizing (empty)
00007784                            ; ---------------------------------------------------------------------------
00007784                            
00007784                            Resize_Ending:				; XREF: Resize_Index
00007784 4E75                       		rts	
00007786                            ; ===========================================================================
00007786                            ; ---------------------------------------------------------------------------
00007786                            ; Object 11 - GHZ bridge
00007786                            ; ---------------------------------------------------------------------------
00007786                            
00007786                            Obj11:					; XREF: Obj_Index
00007786 7000                       		moveq	#0,d0
00007788 1028 0024                  		move.b	$24(a0),d0
0000778C 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007790 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007794                            ; ===========================================================================
00007794 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007798 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000779C 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000077A0                            ; ===========================================================================
000077A0                            
000077A0                            Obj11_Main:				; XREF: Obj11_Index
000077A0 5428 0024                  		addq.b	#2,$24(a0)
000077A4 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077AC 317C 438E 0002             		move.w	#$438E,2(a0)
000077B2 117C 0004 0001             		move.b	#4,1(a0)
000077B8 117C 0003 0018             		move.b	#3,$18(a0)
000077BE 117C 0080 0019             		move.b	#$80,$19(a0)
000077C4 3428 000C                  		move.w	$C(a0),d2
000077C8 3628 0008                  		move.w	8(a0),d3
000077CC 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077CE 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077D2 7200                       		moveq	#0,d1
000077D4 1212                       		move.b	(a2),d1		; copy a2 to d1
000077D6 14FC 0000                  		move.b	#0,(a2)+
000077DA 3001                       		move.w	d1,d0
000077DC E248                       		lsr.w	#1,d0
000077DE E948                       		lsl.w	#4,d0
000077E0 9640                       		sub.w	d0,d3
000077E2 5501                       		subq.b	#2,d1
000077E4 6500                       		bcs.s	Obj11_Action
000077E6                            
000077E6                            Obj11_MakeBdg:
000077E6 6100 0000                  		bsr.w	SingleObjLoad
000077EA 6600                       		bne.s	Obj11_Action
000077EC 5228 0028                  		addq.b	#1,$28(a0)
000077F0 B668 0008                  		cmp.w	8(a0),d3
000077F4 6600                       		bne.s	loc_73B8
000077F6 0643 0010                  		addi.w	#$10,d3
000077FA 3142 000C                  		move.w	d2,$C(a0)
000077FE 3142 003C                  		move.w	d2,$3C(a0)
00007802 3A08                       		move.w	a0,d5
00007804 0445 D000                  		subi.w	#-$3000,d5
00007808 EC4D                       		lsr.w	#6,d5
0000780A 0245 007F                  		andi.w	#$7F,d5
0000780E 14C5                       		move.b	d5,(a2)+
00007810 5228 0028                  		addq.b	#1,$28(a0)
00007814                            
00007814                            loc_73B8:				; XREF: ROM:00007398j
00007814 3A09                       		move.w	a1,d5
00007816 0445 D000                  		subi.w	#-$3000,d5
0000781A EC4D                       		lsr.w	#6,d5
0000781C 0245 007F                  		andi.w	#$7F,d5
00007820 14C5                       		move.b	d5,(a2)+
00007822 137C 000A 0024             		move.b	#$A,$24(a1)
00007828 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000782A 3342 000C                  		move.w	d2,$C(a1)
0000782E 3342 003C                  		move.w	d2,$3C(a1)
00007832 3343 0008                  		move.w	d3,8(a1)
00007836 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
0000783E 337C 438E 0002             		move.w	#$438E,2(a1)
00007844 137C 0004 0001             		move.b	#4,1(a1)
0000784A 137C 0003 0018             		move.b	#3,$18(a1)
00007850 137C 0008 0019             		move.b	#8,$19(a1)
00007856 0643 0010                  		addi.w	#$10,d3
0000785A 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000785E                            
0000785E                            Obj11_Action:				; XREF: Obj11_Index
0000785E 6100                       		bsr.s	Obj11_Solid
00007860 4A28 003E                  		tst.b	$3E(a0)
00007864 6700                       		beq.s	Obj11_Display
00007866 5928 003E                  		subq.b	#4,$3E(a0)
0000786A 6100 0000                  		bsr.w	Obj11_Bend
0000786E                            
0000786E                            Obj11_Display:
0000786E 6100 0000                  		bsr.w	DisplaySprite
00007872 6000 0000                  		bra.w	Obj11_ChkDel
00007876                            
00007876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007876                            
00007876                            
00007876                            Obj11_Solid:				; XREF: Obj11_Action
00007876 7200                       		moveq	#0,d1
00007878 1228 0028                  		move.b	$28(a0),d1
0000787C E749                       		lsl.w	#3,d1
0000787E 3401                       		move.w	d1,d2
00007880 5041                       		addq.w	#8,d1
00007882 D442                       		add.w	d2,d2
00007884 43F8 D000                  		lea	($FFFFD000).w,a1
00007888 4A69 0012                  		tst.w	$12(a1)
0000788C 6B00 0000                  		bmi.w	locret_751E
00007890 3029 0008                  		move.w	8(a1),d0
00007894 9068 0008                  		sub.w	8(a0),d0
00007898 D041                       		add.w	d1,d0
0000789A 6B00 0000                  		bmi.w	locret_751E
0000789E B042                       		cmp.w	d2,d0
000078A0 6400 0000                  		bcc.w	locret_751E
000078A4 6000                       		bra.s	Platform2
000078A6                            ; End of function Obj11_Solid
000078A6                            
000078A6                            ; ---------------------------------------------------------------------------
000078A6                            ; Platform subroutine
000078A6                            ; ---------------------------------------------------------------------------
000078A6                            
000078A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078A6                            
000078A6                            
000078A6                            PlatformObject:
000078A6 43F8 D000                  		lea	($FFFFD000).w,a1
000078AA 4A69 0012                  		tst.w	$12(a1)
000078AE 6B00 0000                  		bmi.w	locret_751E
000078B2 3029 0008                  		move.w	8(a1),d0
000078B6 9068 0008                  		sub.w	8(a0),d0
000078BA D041                       		add.w	d1,d0
000078BC 6B00 0000                  		bmi.w	locret_751E
000078C0 D241                       		add.w	d1,d1
000078C2 B041                       		cmp.w	d1,d0
000078C4 6400 0000                  		bcc.w	locret_751E
000078C8                            
000078C8                            Platform2:
000078C8 3028 000C                  		move.w	$C(a0),d0
000078CC 5140                       		subq.w	#8,d0
000078CE                            
000078CE                            Platform3:
000078CE 3429 000C                  		move.w	$C(a1),d2
000078D2 1229 0016                  		move.b	$16(a1),d1
000078D6 4881                       		ext.w	d1
000078D8 D242                       		add.w	d2,d1
000078DA 5841                       		addq.w	#4,d1
000078DC 9041                       		sub.w	d1,d0
000078DE 6200 0000                  		bhi.w	locret_751E
000078E2 0C40 FFF0                  		cmpi.w	#-$10,d0
000078E6 6500 0000                  		bcs.w	locret_751E
000078EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078EE 6B00 0000                  		bmi.w	locret_751E
000078F2 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F8 6400 0000                  		bcc.w	locret_751E
000078FC D440                       		add.w	d0,d2
000078FE 5642                       		addq.w	#3,d2
00007900 3342 000C                  		move.w	d2,$C(a1)
00007904 5428 0024                  		addq.b	#2,$24(a0)
00007908                            
00007908                            loc_74AE:
00007908 0829 0003 0022             		btst	#3,$22(a1)
0000790E 6700                       		beq.s	loc_74DC
00007910 7000                       		moveq	#0,d0
00007912 1029 003D                  		move.b	$3D(a1),d0
00007916 ED48                       		lsl.w	#6,d0
00007918 0680 00FF D000             		addi.l	#$FFD000,d0
0000791E 2440                       		movea.l	d0,a2
00007920 08AA 0003 0022             		bclr	#3,$22(a2)
00007926 422A 0025                  		clr.b	$25(a2)
0000792A 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007930 6600                       		bne.s	loc_74DC
00007932 552A 0024                  		subq.b	#2,$24(a2)
00007936                            
00007936                            loc_74DC:
00007936 3008                       		move.w	a0,d0
00007938 0440 D000                  		subi.w	#-$3000,d0
0000793C EC48                       		lsr.w	#6,d0
0000793E 0240 007F                  		andi.w	#$7F,d0
00007942 1340 003D                  		move.b	d0,$3D(a1)
00007946 137C 0000 0026             		move.b	#0,$26(a1)
0000794C 337C 0000 0012             		move.w	#0,$12(a1)
00007952 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007958 0829 0001 0022             		btst	#1,$22(a1)
0000795E 6700                       		beq.s	loc_7512
00007960 2F08                       		move.l	a0,-(sp)
00007962 2049                       		movea.l	a1,a0
00007964 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000796A 205F                       		movea.l	(sp)+,a0
0000796C                            
0000796C                            loc_7512:
0000796C 08E9 0003 0022             		bset	#3,$22(a1)
00007972 08E8 0003 0022             		bset	#3,$22(a0)
00007978                            
00007978                            locret_751E:
00007978 4E75                       		rts	
0000797A                            ; End of function PlatformObject
0000797A                            
0000797A                            ; ---------------------------------------------------------------------------
0000797A                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000797A                            ; ---------------------------------------------------------------------------
0000797A                            
0000797A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000797A                            
0000797A                            
0000797A                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000797A 43F8 D000                  		lea	($FFFFD000).w,a1
0000797E 4A69 0012                  		tst.w	$12(a1)
00007982 6B00 FFF4                  		bmi.w	locret_751E
00007986 3029 0008                  		move.w	8(a1),d0
0000798A 9068 0008                  		sub.w	8(a0),d0
0000798E D041                       		add.w	d1,d0
00007990 6BE6                       		bmi.s	locret_751E
00007992 D241                       		add.w	d1,d1
00007994 B041                       		cmp.w	d1,d0
00007996 64E0                       		bcc.s	locret_751E
00007998 0828 0000 0001             		btst	#0,1(a0)
0000799E 6700                       		beq.s	loc_754A
000079A0 4640                       		not.w	d0
000079A2 D041                       		add.w	d1,d0
000079A4                            
000079A4                            loc_754A:
000079A4 E248                       		lsr.w	#1,d0
000079A6 7600                       		moveq	#0,d3
000079A8 1632 0000                  		move.b	(a2,d0.w),d3
000079AC 3028 000C                  		move.w	$C(a0),d0
000079B0 9043                       		sub.w	d3,d0
000079B2 6000 FF1A                  		bra.w	Platform3
000079B6                            ; End of function SlopeObject
000079B6                            
000079B6                            
000079B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079B6                            
000079B6                            
000079B6                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079B6 43F8 D000                  		lea	($FFFFD000).w,a1
000079BA 4A69 0012                  		tst.w	$12(a1)
000079BE 6B00 FFB8                  		bmi.w	locret_751E
000079C2 3029 0008                  		move.w	8(a1),d0
000079C6 9068 0008                  		sub.w	8(a0),d0
000079CA D041                       		add.w	d1,d0
000079CC 6B00 FFAA                  		bmi.w	locret_751E
000079D0 D241                       		add.w	d1,d1
000079D2 B041                       		cmp.w	d1,d0
000079D4 6400 FFA2                  		bcc.w	locret_751E
000079D8 3028 000C                  		move.w	$C(a0),d0
000079DC 9043                       		sub.w	d3,d0
000079DE 6000 FEEE                  		bra.w	Platform3
000079E2                            ; End of function Obj15_Solid
000079E2                            
000079E2                            ; ===========================================================================
000079E2                            
000079E2                            Obj11_Action2:				; XREF: Obj11_Index
000079E2 6100                       		bsr.s	Obj11_WalkOff
000079E4 6100 0000                  		bsr.w	DisplaySprite
000079E8 6000 0000                  		bra.w	Obj11_ChkDel
000079EC                            
000079EC                            ; ---------------------------------------------------------------------------
000079EC                            ; Subroutine allowing Sonic to walk off a bridge
000079EC                            ; ---------------------------------------------------------------------------
000079EC                            
000079EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079EC                            
000079EC                            
000079EC                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079EC 7200                       		moveq	#0,d1
000079EE 1228 0028                  		move.b	$28(a0),d1
000079F2 E749                       		lsl.w	#3,d1
000079F4 3401                       		move.w	d1,d2
000079F6 5041                       		addq.w	#8,d1
000079F8 6100                       		bsr.s	ExitPlatform2
000079FA 6400                       		bcc.s	locret_75BE
000079FC E848                       		lsr.w	#4,d0
000079FE 1140 003F                  		move.b	d0,$3F(a0)
00007A02 1028 003E                  		move.b	$3E(a0),d0
00007A06 0C00 0040                  		cmpi.b	#$40,d0
00007A0A 6700                       		beq.s	loc_75B6
00007A0C 5828 003E                  		addq.b	#4,$3E(a0)
00007A10                            
00007A10                            loc_75B6:
00007A10 6100 0000                  		bsr.w	Obj11_Bend
00007A14 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A18                            
00007A18                            locret_75BE:
00007A18 4E75                       		rts	
00007A1A                            ; End of function Obj11_WalkOff
00007A1A                            
00007A1A                            ; ---------------------------------------------------------------------------
00007A1A                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A1A                            ; ---------------------------------------------------------------------------
00007A1A                            
00007A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A1A                            
00007A1A                            
00007A1A                            ExitPlatform:
00007A1A 3401                       		move.w	d1,d2
00007A1C                            
00007A1C                            ExitPlatform2:
00007A1C D442                       		add.w	d2,d2
00007A1E 43F8 D000                  		lea	($FFFFD000).w,a1
00007A22 0829 0001 0022             		btst	#1,$22(a1)
00007A28 6600                       		bne.s	loc_75E0
00007A2A 3029 0008                  		move.w	8(a1),d0
00007A2E 9068 0008                  		sub.w	8(a0),d0
00007A32 D041                       		add.w	d1,d0
00007A34 6B00                       		bmi.s	loc_75E0
00007A36 B042                       		cmp.w	d2,d0
00007A38 6500                       		bcs.s	locret_75F2
00007A3A                            
00007A3A                            loc_75E0:
00007A3A 08A9 0003 0022             		bclr	#3,$22(a1)
00007A40 117C 0002 0024             		move.b	#2,$24(a0)
00007A46 08A8 0003 0022             		bclr	#3,$22(a0)
00007A4C                            
00007A4C                            locret_75F2:
00007A4C 4E75                       		rts	
00007A4E                            ; End of function ExitPlatform
00007A4E                            
00007A4E                            
00007A4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A4E                            
00007A4E                            
00007A4E                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A4E 7000                       		moveq	#0,d0
00007A50 1028 003F                  		move.b	$3F(a0),d0
00007A54 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A58 ED48                       		lsl.w	#6,d0
00007A5A 0680 00FF D000             		addi.l	#$FFD000,d0
00007A60 2440                       		movea.l	d0,a2
00007A62 43F8 D000                  		lea	($FFFFD000).w,a1
00007A66 302A 000C                  		move.w	$C(a2),d0
00007A6A 5140                       		subq.w	#8,d0
00007A6C 7200                       		moveq	#0,d1
00007A6E 1229 0016                  		move.b	$16(a1),d1
00007A72 9041                       		sub.w	d1,d0
00007A74 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A78 4E75                       		rts	
00007A7A                            ; End of function Obj11_MoveSonic
00007A7A                            
00007A7A                            
00007A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A7A                            
00007A7A                            
00007A7A                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A7A 1028 003E                  		move.b	$3E(a0),d0
00007A7E 6100 B1A2                  		bsr.w	CalcSine
00007A82 3800                       		move.w	d0,d4
00007A84 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A8A 7000                       		moveq	#0,d0
00007A8C 1028 0028                  		move.b	$28(a0),d0
00007A90 E948                       		lsl.w	#4,d0
00007A92 7600                       		moveq	#0,d3
00007A94 1628 003F                  		move.b	$3F(a0),d3
00007A98 3403                       		move.w	d3,d2
00007A9A D640                       		add.w	d0,d3
00007A9C 7A00                       		moveq	#0,d5
00007A9E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007AA4 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA8 0243 000F                  		andi.w	#$F,d3
00007AAC E94B                       		lsl.w	#4,d3
00007AAE 47F4 3000                  		lea	(a4,d3.w),a3
00007AB2 45E8 0029                  		lea	$29(a0),a2
00007AB6                            
00007AB6                            loc_765C:
00007AB6 7000                       		moveq	#0,d0
00007AB8 101A                       		move.b	(a2)+,d0
00007ABA ED48                       		lsl.w	#6,d0
00007ABC 0680 00FF D000             		addi.l	#$FFD000,d0
00007AC2 2240                       		movea.l	d0,a1
00007AC4 7000                       		moveq	#0,d0
00007AC6 101B                       		move.b	(a3)+,d0
00007AC8 5240                       		addq.w	#1,d0
00007ACA C0C5                       		mulu.w	d5,d0
00007ACC C0C4                       		mulu.w	d4,d0
00007ACE 4840                       		swap	d0
00007AD0 D069 003C                  		add.w	$3C(a1),d0
00007AD4 3340 000C                  		move.w	d0,$C(a1)
00007AD8 51CA FFDC                  		dbf	d2,loc_765C
00007ADC 7000                       		moveq	#0,d0
00007ADE 1028 0028                  		move.b	$28(a0),d0
00007AE2 7600                       		moveq	#0,d3
00007AE4 1628 003F                  		move.b	$3F(a0),d3
00007AE8 5203                       		addq.b	#1,d3
00007AEA 9600                       		sub.b	d0,d3
00007AEC 4403                       		neg.b	d3
00007AEE 6B00                       		bmi.s	locret_76CA
00007AF0 3403                       		move.w	d3,d2
00007AF2 E94B                       		lsl.w	#4,d3
00007AF4 47F4 3000                  		lea	(a4,d3.w),a3
00007AF8 D6C2                       		adda.w	d2,a3
00007AFA 5342                       		subq.w	#1,d2
00007AFC 6500                       		bcs.s	locret_76CA
00007AFE                            
00007AFE                            loc_76A4:
00007AFE 7000                       		moveq	#0,d0
00007B00 101A                       		move.b	(a2)+,d0
00007B02 ED48                       		lsl.w	#6,d0
00007B04 0680 00FF D000             		addi.l	#$FFD000,d0
00007B0A 2240                       		movea.l	d0,a1
00007B0C 7000                       		moveq	#0,d0
00007B0E 1023                       		move.b	-(a3),d0
00007B10 5240                       		addq.w	#1,d0
00007B12 C0C5                       		mulu.w	d5,d0
00007B14 C0C4                       		mulu.w	d4,d0
00007B16 4840                       		swap	d0
00007B18 D069 003C                  		add.w	$3C(a1),d0
00007B1C 3340 000C                  		move.w	d0,$C(a1)
00007B20 51CA FFDC                  		dbf	d2,loc_76A4
00007B24                            
00007B24                            locret_76CA:
00007B24 4E75                       		rts	
00007B26                            ; End of function Obj11_Bend
00007B26                            
00007B26                            ; ===========================================================================
00007B26                            ; ---------------------------------------------------------------------------
00007B26                            ; GHZ bridge-bending data
00007B26                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B26                            ; ---------------------------------------------------------------------------
00007B26                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C36                            		even
00007C36                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D36                            		even
00007D36                            
00007D36                            ; ===========================================================================
00007D36                            
00007D36                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D36 3028 0008                  		move.w	8(a0),d0
00007D3A 0240 FF80                  		andi.w	#$FF80,d0
00007D3E 3238 F700                  		move.w	($FFFFF700).w,d1
00007D42 0441 0080                  		subi.w	#$80,d1
00007D46 0241 FF80                  		andi.w	#$FF80,d1
00007D4A 9041                       		sub.w	d1,d0
00007D4C 0C40 0280                  		cmpi.w	#$280,d0
00007D50 6200 0000                  		bhi.w	Obj11_DelAll
00007D54 4E75                       		rts	
00007D56                            ; ===========================================================================
00007D56                            
00007D56                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D56 7400                       		moveq	#0,d2
00007D58 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D5C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D5E 5302                       		subq.b	#1,d2		; subtract 1
00007D60 6500                       		bcs.s	Obj11_Delete
00007D62                            
00007D62                            Obj11_DelLoop:
00007D62 7000                       		moveq	#0,d0
00007D64 101A                       		move.b	(a2)+,d0
00007D66 ED48                       		lsl.w	#6,d0
00007D68 0680 00FF D000             		addi.l	#$FFD000,d0
00007D6E 2240                       		movea.l	d0,a1
00007D70 B048                       		cmp.w	a0,d0
00007D72 6700                       		beq.s	loc_791E
00007D74 6100 0000                  		bsr.w	DeleteObject2
00007D78                            
00007D78                            loc_791E:
00007D78 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D7C                            
00007D7C                            Obj11_Delete:
00007D7C 6100 0000                  		bsr.w	DeleteObject
00007D80 4E75                       		rts	
00007D82                            ; ===========================================================================
00007D82                            
00007D82                            Obj11_Delete2:				; XREF: Obj11_Index
00007D82 6100 0000                  		bsr.w	DeleteObject
00007D86 4E75                       		rts	
00007D88                            ; ===========================================================================
00007D88                            
00007D88                            Obj11_Display2:				; XREF: Obj11_Index
00007D88 6100 0000                  		bsr.w	DisplaySprite
00007D8C 4E75                       		rts	
00007D8E                            ; ===========================================================================
00007D8E                            ; ---------------------------------------------------------------------------
00007D8E                            ; Sprite mappings - GHZ	bridge
00007D8E                            ; ---------------------------------------------------------------------------
00007D8E                            Map_obj11:
00007D8E                            	include "_maps\obj11.asm"
00007D8E                            ; ---------------------------------------------------------------------------
00007D8E                            ; Sprite mappings - GHZ	bridge
00007D8E                            ; ---------------------------------------------------------------------------
00007D8E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D92 0000                       		dc.w byte_794B-Map_obj11
00007D94 01                         byte_793A:	dc.b 1
00007D95 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D9A 02                         byte_7940:	dc.b 2
00007D9B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007DA0 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007DA5 01                         byte_794B:	dc.b 1
00007DA6 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DAC 00                         		even
00007DAC 00                         		even
00007DAC                            
00007DAC                            ; ===========================================================================
00007DAC                            ; ---------------------------------------------------------------------------
00007DAC                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DAC                            ;	    - spiked ball on a chain (SBZ)
00007DAC                            ; ---------------------------------------------------------------------------
00007DAC                            
00007DAC                            Obj15:					; XREF: Obj_Index
00007DAC 7000                       		moveq	#0,d0
00007DAE 1028 0024                  		move.b	$24(a0),d0
00007DB2 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DB6 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DBA                            ; ===========================================================================
00007DBA 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DBE 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DC2 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DC6 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC8                            ; ===========================================================================
00007DC8                            
00007DC8                            Obj15_Main:				; XREF: Obj15_Index
00007DC8 5428 0024                  		addq.b	#2,$24(a0)
00007DCC 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DD4 317C 4380 0002             		move.w	#$4380,2(a0)
00007DDA 117C 0004 0001             		move.b	#4,1(a0)
00007DE0 117C 0003 0018             		move.b	#3,$18(a0)
00007DE6 117C 0018 0019             		move.b	#$18,$19(a0)
00007DEC 117C 0008 0016             		move.b	#8,$16(a0)
00007DF2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DFE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E04 6600                       		bne.s	Obj15_NotSLZ
00007E06 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E0E 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E14 117C 0020 0019             		move.b	#$20,$19(a0)
00007E1A 117C 0010 0016             		move.b	#$10,$16(a0)
00007E20 117C 0099 0020             		move.b	#$99,$20(a0)
00007E26                            
00007E26                            Obj15_NotSLZ:
00007E26 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E2C 6600                       		bne.s	Obj15_SetLength
00007E2E 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E36 317C 0391 0002             		move.w	#$391,2(a0)
00007E3C 117C 0018 0019             		move.b	#$18,$19(a0)
00007E42 117C 0018 0016             		move.b	#$18,$16(a0)
00007E48 117C 0086 0020             		move.b	#$86,$20(a0)
00007E4E 117C 000C 0024             		move.b	#$C,$24(a0)
00007E54                            
00007E54                            Obj15_SetLength:
00007E54 1810                       		move.b	0(a0),d4
00007E56 7200                       		moveq	#0,d1
00007E58 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E5C 1212                       		move.b	(a2),d1		; move a2 to d1
00007E5E 3F01                       		move.w	d1,-(sp)
00007E60 0241 000F                  		andi.w	#$F,d1
00007E64 14FC 0000                  		move.b	#0,(a2)+
00007E68 3601                       		move.w	d1,d3
00007E6A E94B                       		lsl.w	#4,d3
00007E6C 5003                       		addq.b	#8,d3
00007E6E 1143 003C                  		move.b	d3,$3C(a0)
00007E72 5103                       		subq.b	#8,d3
00007E74 4A28 001A                  		tst.b	$1A(a0)
00007E78 6700                       		beq.s	Obj15_MakeChain
00007E7A 5003                       		addq.b	#8,d3
00007E7C 5341                       		subq.w	#1,d1
00007E7E                            
00007E7E                            Obj15_MakeChain:
00007E7E 6100 0000                  		bsr.w	SingleObjLoad
00007E82 6600                       		bne.s	loc_7A92
00007E84 5228 0028                  		addq.b	#1,$28(a0)
00007E88 3A09                       		move.w	a1,d5
00007E8A 0445 D000                  		subi.w	#-$3000,d5
00007E8E EC4D                       		lsr.w	#6,d5
00007E90 0245 007F                  		andi.w	#$7F,d5
00007E94 14C5                       		move.b	d5,(a2)+
00007E96 137C 000A 0024             		move.b	#$A,$24(a1)
00007E9C 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E9E 2368 0004 0004             		move.l	4(a0),4(a1)
00007EA4 3368 0002 0002             		move.w	2(a0),2(a1)
00007EAA 08A9 0006 0002             		bclr	#6,2(a1)
00007EB0 137C 0004 0001             		move.b	#4,1(a1)
00007EB6 137C 0004 0018             		move.b	#4,$18(a1)
00007EBC 137C 0008 0019             		move.b	#8,$19(a1)
00007EC2 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC8 1343 003C                  		move.b	d3,$3C(a1)
00007ECC 0403 0010                  		subi.b	#$10,d3
00007ED0 6400                       		bcc.s	loc_7A8E
00007ED2 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED8 137C 0003 0018             		move.b	#3,$18(a1)
00007EDE 08E9 0006 0002             		bset	#6,2(a1)
00007EE4                            
00007EE4                            loc_7A8E:
00007EE4 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE8                            
00007EE8                            loc_7A92:
00007EE8 3A08                       		move.w	a0,d5
00007EEA 0445 D000                  		subi.w	#-$3000,d5
00007EEE EC4D                       		lsr.w	#6,d5
00007EF0 0245 007F                  		andi.w	#$7F,d5
00007EF4 14C5                       		move.b	d5,(a2)+
00007EF6 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EFC 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007F02 321F                       		move.w	(sp)+,d1
00007F04 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F08 6700                       		beq.s	loc_7AD4	; if not, branch
00007F0A 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F12 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F18 117C 0001 001A             		move.b	#1,$1A(a0)
00007F1E 117C 0002 0018             		move.b	#2,$18(a0)
00007F24 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F2A                            
00007F2A                            loc_7AD4:
00007F2A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F30 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F32                            
00007F32                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F32 7200                       		moveq	#0,d1
00007F34 1228 0019                  		move.b	$19(a0),d1
00007F38 7600                       		moveq	#0,d3
00007F3A 1628 0016                  		move.b	$16(a0),d3
00007F3E 6100 FA76                  		bsr.w	Obj15_Solid
00007F42                            
00007F42                            Obj15_Action:				; XREF: Obj15_Index
00007F42 6100 0000                  		bsr.w	Obj15_Move
00007F46 6100 0000                  		bsr.w	DisplaySprite
00007F4A 6000 0000                  		bra.w	Obj15_ChkDel
00007F4E                            ; ===========================================================================
00007F4E                            
00007F4E                            Obj15_Action2:				; XREF: Obj15_Index
00007F4E 7200                       		moveq	#0,d1
00007F50 1228 0019                  		move.b	$19(a0),d1
00007F54 6100 FAC4                  		bsr.w	ExitPlatform
00007F58 3F28 0008                  		move.w	8(a0),-(sp)
00007F5C 6100 0000                  		bsr.w	Obj15_Move
00007F60 341F                       		move.w	(sp)+,d2
00007F62 7600                       		moveq	#0,d3
00007F64 1628 0016                  		move.b	$16(a0),d3
00007F68 5203                       		addq.b	#1,d3
00007F6A 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F6E 6100 0000                  		bsr.w	DisplaySprite
00007F72 6000 0000                  		bra.w	Obj15_ChkDel
00007F76                            
00007F76 4E75                       		rts
00007F78                            
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            ; Subroutine to	change Sonic's position with a platform
00007F78                            ; ---------------------------------------------------------------------------
00007F78                            
00007F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F78                            
00007F78                            
00007F78                            MvSonicOnPtfm:
00007F78 43F8 D000                  		lea	($FFFFD000).w,a1
00007F7C 3028 000C                  		move.w	$C(a0),d0
00007F80 9043                       		sub.w	d3,d0
00007F82 6000                       		bra.s	MvSonic2
00007F84                            ; End of function MvSonicOnPtfm
00007F84                            
00007F84                            ; ---------------------------------------------------------------------------
00007F84                            ; Subroutine to	change Sonic's position with a platform
00007F84                            ; ---------------------------------------------------------------------------
00007F84                            
00007F84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F84                            
00007F84                            
00007F84                            MvSonicOnPtfm2:
00007F84 43F8 D000                  		lea	($FFFFD000).w,a1
00007F88 3028 000C                  		move.w	$C(a0),d0
00007F8C 0440 0009                  		subi.w	#9,d0
00007F90                            
00007F90                            MvSonic2:
00007F90 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F94 6B00                       		bmi.s	locret_7B62
00007F96 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F9C 6400                       		bcc.s	locret_7B62
00007F9E 4A78 FE08                  		tst.w	($FFFFFE08).w
00007FA2 6600                       		bne.s	locret_7B62
00007FA4 7200                       		moveq	#0,d1
00007FA6 1229 0016                  		move.b	$16(a1),d1
00007FAA 9041                       		sub.w	d1,d0
00007FAC 3340 000C                  		move.w	d0,$C(a1)
00007FB0 9468 0008                  		sub.w	8(a0),d2
00007FB4 9569 0008                  		sub.w	d2,8(a1)
00007FB8                            
00007FB8                            locret_7B62:
00007FB8 4E75                       		rts	
00007FBA                            ; End of function MvSonicOnPtfm2
00007FBA                            
00007FBA                            
00007FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FBA                            
00007FBA                            
00007FBA                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FBA 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FBE 323C 0080                  		move.w	#$80,d1
00007FC2 0828 0000 0022             		btst	#0,$22(a0)
00007FC8 6700                       		beq.s	loc_7B78
00007FCA 4440                       		neg.w	d0
00007FCC D041                       		add.w	d1,d0
00007FCE                            
00007FCE                            loc_7B78:
00007FCE 6000                       		bra.s	Obj15_Move2
00007FD0                            ; End of function Obj15_Move
00007FD0                            
00007FD0                            
00007FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD0                            
00007FD0                            
00007FD0                            Obj48_Move:				; XREF: Obj48_Display2
00007FD0 4A28 003D                  		tst.b	$3D(a0)
00007FD4 6600                       		bne.s	loc_7B9C
00007FD6 3028 003E                  		move.w	$3E(a0),d0
00007FDA 5040                       		addq.w	#8,d0
00007FDC 3140 003E                  		move.w	d0,$3E(a0)
00007FE0 D168 0026                  		add.w	d0,$26(a0)
00007FE4 0C40 0200                  		cmpi.w	#$200,d0
00007FE8 6600                       		bne.s	loc_7BB6
00007FEA 117C 0001 003D             		move.b	#1,$3D(a0)
00007FF0 6000                       		bra.s	loc_7BB6
00007FF2                            ; ===========================================================================
00007FF2                            
00007FF2                            loc_7B9C:
00007FF2 3028 003E                  		move.w	$3E(a0),d0
00007FF6 5140                       		subq.w	#8,d0
00007FF8 3140 003E                  		move.w	d0,$3E(a0)
00007FFC D168 0026                  		add.w	d0,$26(a0)
00008000 0C40 FE00                  		cmpi.w	#-$200,d0
00008004 6600                       		bne.s	loc_7BB6
00008006 117C 0000 003D             		move.b	#0,$3D(a0)
0000800C                            
0000800C                            loc_7BB6:
0000800C 1028 0026                  		move.b	$26(a0),d0
00008010                            ; End of function Obj48_Move
00008010                            
00008010                            
00008010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008010                            
00008010                            
00008010                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008010 6100 AC10                  		bsr.w	CalcSine
00008014 3428 0038                  		move.w	$38(a0),d2
00008018 3628 003A                  		move.w	$3A(a0),d3
0000801C 45E8 0028                  		lea	$28(a0),a2
00008020 7C00                       		moveq	#0,d6
00008022 1C1A                       		move.b	(a2)+,d6
00008024                            
00008024                            loc_7BCE:
00008024 7800                       		moveq	#0,d4
00008026 181A                       		move.b	(a2)+,d4
00008028 ED4C                       		lsl.w	#6,d4
0000802A 0684 00FF D000             		addi.l	#$FFD000,d4
00008030 2244                       		movea.l	d4,a1
00008032 7800                       		moveq	#0,d4
00008034 1829 003C                  		move.b	$3C(a1),d4
00008038 2A04                       		move.l	d4,d5
0000803A C9C0                       		muls.w	d0,d4
0000803C E084                       		asr.l	#8,d4
0000803E CBC1                       		muls.w	d1,d5
00008040 E085                       		asr.l	#8,d5
00008042 D842                       		add.w	d2,d4
00008044 DA43                       		add.w	d3,d5
00008046 3344 000C                  		move.w	d4,$C(a1)
0000804A 3345 0008                  		move.w	d5,8(a1)
0000804E 51CE FFD4                  		dbf	d6,loc_7BCE
00008052 4E75                       		rts	
00008054                            ; End of function Obj15_Move2
00008054                            
00008054                            ; ===========================================================================
00008054                            
00008054                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008054 3028 003A                  		move.w	$3A(a0),d0
00008058 0240 FF80                  		andi.w	#$FF80,d0
0000805C 3238 F700                  		move.w	($FFFFF700).w,d1
00008060 0441 0080                  		subi.w	#$80,d1
00008064 0241 FF80                  		andi.w	#$FF80,d1
00008068 9041                       		sub.w	d1,d0
0000806A 0C40 0280                  		cmpi.w	#$280,d0
0000806E 6200 0000                  		bhi.w	Obj15_DelAll
00008072 4E75                       		rts	
00008074                            ; ===========================================================================
00008074                            
00008074                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008074 7400                       		moveq	#0,d2
00008076 45E8 0028                  		lea	$28(a0),a2
0000807A 141A                       		move.b	(a2)+,d2
0000807C                            
0000807C                            Obj15_DelLoop:
0000807C 7000                       		moveq	#0,d0
0000807E 101A                       		move.b	(a2)+,d0
00008080 ED48                       		lsl.w	#6,d0
00008082 0680 00FF D000             		addi.l	#$FFD000,d0
00008088 2240                       		movea.l	d0,a1
0000808A 6100 0000                  		bsr.w	DeleteObject2
0000808E 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008092 4E75                       		rts	
00008094                            ; ===========================================================================
00008094                            
00008094                            Obj15_Delete:				; XREF: Obj15_Index
00008094 6100 0000                  		bsr.w	DeleteObject
00008098 4E75                       		rts	
0000809A                            ; ===========================================================================
0000809A                            
0000809A                            Obj15_Display:				; XREF: Obj15_Index
0000809A 6000 0000                  		bra.w	DisplaySprite
0000809E                            ; ===========================================================================
0000809E                            ; ---------------------------------------------------------------------------
0000809E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000809E                            ; ---------------------------------------------------------------------------
0000809E                            Map_obj15:
0000809E                            	include "_maps\obj15ghz.asm"
0000809E                            ; ---------------------------------------------------------------------------
0000809E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000809E                            ; ---------------------------------------------------------------------------
0000809E 0000                       		dc.w byte_7C4E-Map_obj15
000080A0 0000                       		dc.w byte_7C59-Map_obj15
000080A2 0000                       		dc.w byte_7C5F-Map_obj15
000080A4 02                         byte_7C4E:	dc.b 2
000080A5 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080AA F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080AF 01                         byte_7C59:	dc.b 1
000080B0 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080B5 01                         byte_7C5F:	dc.b 1
000080B6 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080BC 00                         		even
000080BC 00                         		even
000080BC                            
000080BC                            ; ---------------------------------------------------------------------------
000080BC                            ; Sprite mappings - SLZ	swinging platforms
000080BC                            ; ---------------------------------------------------------------------------
000080BC                            Map_obj15a:
000080BC                            	include "_maps\obj15slz.asm"
000080BC                            ; ---------------------------------------------------------------------------
000080BC                            ; Sprite mappings - SLZ	swinging platforms
000080BC                            ; ---------------------------------------------------------------------------
000080BC 0000                       		dc.w byte_7C6C-Map_obj15a
000080BE 0000                       		dc.w byte_7C95-Map_obj15a
000080C0 0000                       		dc.w byte_7C9B-Map_obj15a
000080C2 08                         byte_7C6C:	dc.b 8
000080C3 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C8 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080CD F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080D2 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080D7 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080DC 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080E1 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080E6 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080EB 01                         byte_7C95:	dc.b 1
000080EC F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080F1 01                         byte_7C9B:	dc.b 1
000080F2 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F8 00                         		even
000080F8 00                         		even
000080F8                            
000080F8                            ; ===========================================================================
000080F8                            ; ---------------------------------------------------------------------------
000080F8                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F8                            ; ---------------------------------------------------------------------------
000080F8                            
000080F8                            Obj17:					; XREF: Obj_Index
000080F8 7000                       		moveq	#0,d0
000080FA 1028 0024                  		move.b	$24(a0),d0
000080FE 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008102 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008106                            ; ===========================================================================
00008106 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008108 0000                       		dc.w Obj17_Action-Obj17_Index
0000810A 0000                       		dc.w Obj17_Action-Obj17_Index
0000810C 0000                       		dc.w Obj17_Delete-Obj17_Index
0000810E 0000                       		dc.w Obj17_Display-Obj17_Index
00008110                            ; ===========================================================================
00008110                            
00008110                            Obj17_Main:				; XREF: Obj17_Index
00008110 5428 0024                  		addq.b	#2,$24(a0)
00008114 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000811C 317C 4398 0002             		move.w	#$4398,2(a0)
00008122 117C 0007 0022             		move.b	#7,$22(a0)
00008128 117C 0004 0001             		move.b	#4,1(a0)
0000812E 117C 0003 0018             		move.b	#3,$18(a0)
00008134 117C 0008 0019             		move.b	#8,$19(a0)
0000813A 3428 000C                  		move.w	$C(a0),d2
0000813E 3628 0008                  		move.w	8(a0),d3
00008142 1810                       		move.b	0(a0),d4
00008144 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008148 7200                       		moveq	#0,d1
0000814A 1212                       		move.b	(a2),d1		; move a2 to d1
0000814C 14FC 0000                  		move.b	#0,(a2)+
00008150 3001                       		move.w	d1,d0
00008152 E248                       		lsr.w	#1,d0
00008154 E948                       		lsl.w	#4,d0
00008156 9640                       		sub.w	d0,d3
00008158 5501                       		subq.b	#2,d1
0000815A 6500                       		bcs.s	Obj17_Action
0000815C 7C00                       		moveq	#0,d6
0000815E                            
0000815E                            Obj17_MakeHelix:
0000815E 6100 0000                  		bsr.w	SingleObjLoad
00008162 6600                       		bne.s	Obj17_Action
00008164 5228 0028                  		addq.b	#1,$28(a0)
00008168 3A09                       		move.w	a1,d5
0000816A 0445 D000                  		subi.w	#$D000,d5
0000816E EC4D                       		lsr.w	#6,d5
00008170 0245 007F                  		andi.w	#$7F,d5
00008174 14C5                       		move.b	d5,(a2)+
00008176 137C 0008 0024             		move.b	#8,$24(a1)
0000817C 1284                       		move.b	d4,0(a1)
0000817E 3342 000C                  		move.w	d2,$C(a1)
00008182 3343 0008                  		move.w	d3,8(a1)
00008186 2368 0004 0004             		move.l	4(a0),4(a1)
0000818C 337C 4398 0002             		move.w	#$4398,2(a1)
00008192 137C 0004 0001             		move.b	#4,1(a1)
00008198 137C 0003 0018             		move.b	#3,$18(a1)
0000819E 137C 0008 0019             		move.b	#8,$19(a1)
000081A4 1346 003E                  		move.b	d6,$3E(a1)
000081A8 5206                       		addq.b	#1,d6
000081AA 0206 0007                  		andi.b	#7,d6
000081AE 0643 0010                  		addi.w	#$10,d3
000081B2 B668 0008                  		cmp.w	8(a0),d3
000081B6 6600                       		bne.s	loc_7D78
000081B8 1146 003E                  		move.b	d6,$3E(a0)
000081BC 5206                       		addq.b	#1,d6
000081BE 0206 0007                  		andi.b	#7,d6
000081C2 0643 0010                  		addi.w	#$10,d3
000081C6 5228 0028                  		addq.b	#1,$28(a0)
000081CA                            
000081CA                            loc_7D78:
000081CA 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081CE                            
000081CE                            Obj17_Action:				; XREF: Obj17_Index
000081CE 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081D2 6100 0000                  		bsr.w	DisplaySprite
000081D6 6000 0000                  		bra.w	Obj17_ChkDel
000081DA                            
000081DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081DA                            
000081DA                            
000081DA                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081DA 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081DE 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081E4 D028 003E                  		add.b	$3E(a0),d0
000081E8 0200 0007                  		andi.b	#7,d0
000081EC 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081F0 6600                       		bne.s	locret_7DA6
000081F2 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F8                            
000081F8                            locret_7DA6:
000081F8 4E75                       		rts	
000081FA                            ; End of function Obj17_RotateSpikes
000081FA                            
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            Obj17_ChkDel:				; XREF: Obj17_Action
000081FA 3028 0008                  		move.w	8(a0),d0
000081FE 0240 FF80                  		andi.w	#$FF80,d0
00008202 3238 F700                  		move.w	($FFFFF700).w,d1
00008206 0441 0080                  		subi.w	#$80,d1
0000820A 0241 FF80                  		andi.w	#$FF80,d1
0000820E 9041                       		sub.w	d1,d0
00008210 0C40 0280                  		cmpi.w	#$280,d0
00008214 6200 0000                  		bhi.w	Obj17_DelAll
00008218 4E75                       		rts	
0000821A                            ; ===========================================================================
0000821A                            
0000821A                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000821A 7400                       		moveq	#0,d2
0000821C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008220 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008222 5502                       		subq.b	#2,d2
00008224 6500                       		bcs.s	Obj17_Delete
00008226                            
00008226                            Obj17_DelLoop:
00008226 7000                       		moveq	#0,d0
00008228 101A                       		move.b	(a2)+,d0
0000822A ED48                       		lsl.w	#6,d0
0000822C 0680 00FF D000             		addi.l	#$FFD000,d0
00008232 2240                       		movea.l	d0,a1
00008234 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008238 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000823C                            
0000823C                            Obj17_Delete:				; XREF: Obj17_Index
0000823C 6100 0000                  		bsr.w	DeleteObject
00008240 4E75                       		rts	
00008242                            ; ===========================================================================
00008242                            
00008242                            Obj17_Display:				; XREF: Obj17_Index
00008242 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008246 6000 0000                  		bra.w	DisplaySprite
0000824A                            ; ===========================================================================
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            Map_obj17:
0000824A                            	include "_maps\obj17.asm"
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000824A                            ; ---------------------------------------------------------------------------
0000824A 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008252 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008256 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000825A 01                         byte_7E08:	dc.b 1
0000825B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008260 01                         byte_7E0E:	dc.b 1
00008261 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008266 01                         byte_7E14:	dc.b 1
00008267 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000826C 01                         byte_7E1A:	dc.b 1
0000826D FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008272 01                         byte_7E20:	dc.b 1
00008273 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008278 01                         byte_7E26:	dc.b 1
00008279 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000827E 01                         byte_7E2C:	dc.b 1
0000827F F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008284                            		even
00008284                            		even
00008284                            
00008284                            ; ===========================================================================
00008284                            ; ---------------------------------------------------------------------------
00008284                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008284                            ; ---------------------------------------------------------------------------
00008284                            
00008284                            Obj18:					; XREF: Obj_Index
00008284 7000                       		moveq	#0,d0
00008286 1028 0024                  		move.b	$24(a0),d0
0000828A 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000828E 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008292                            ; ===========================================================================
00008292 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008294 0000                       		dc.w Obj18_Solid-Obj18_Index
00008296 0000                       		dc.w Obj18_Action2-Obj18_Index
00008298 0000                       		dc.w Obj18_Delete-Obj18_Index
0000829A 0000                       		dc.w Obj18_Action-Obj18_Index
0000829C                            ; ===========================================================================
0000829C                            
0000829C                            Obj18_Main:				; XREF: Obj18_Index
0000829C 5428 0024                  		addq.b	#2,$24(a0)
000082A0 317C 4000 0002             		move.w	#$4000,2(a0)
000082A6 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082AE 117C 0020 0019             		move.b	#$20,$19(a0)
000082B4 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082BA 6600                       		bne.s	Obj18_NotSYZ
000082BC 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082C4 117C 0020 0019             		move.b	#$20,$19(a0)
000082CA                            
000082CA                            Obj18_NotSYZ:
000082CA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082D0 6600                       		bne.s	Obj18_NotSLZ
000082D2 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082DA 117C 0020 0019             		move.b	#$20,$19(a0)
000082E0 317C 4000 0002             		move.w	#$4000,2(a0)
000082E6 117C 0003 0028             		move.b	#3,$28(a0)
000082EC                            
000082EC                            Obj18_NotSLZ:
000082EC 117C 0004 0001             		move.b	#4,1(a0)
000082F2 117C 0004 0018             		move.b	#4,$18(a0)
000082F8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082FE 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008304 3168 0008 0032             		move.w	8(a0),$32(a0)
0000830A 317C 0080 0026             		move.w	#$80,$26(a0)
00008310 7200                       		moveq	#0,d1
00008312 1028 0028                  		move.b	$28(a0),d0
00008316 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000831A 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000831C 5201                       		addq.b	#1,d1		; use frame #1
0000831E 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008324                            
00008324                            Obj18_SetFrame:
00008324 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008328                            
00008328                            Obj18_Solid:				; XREF: Obj18_Index
00008328 4A28 0038                  		tst.b	$38(a0)
0000832C 6700                       		beq.s	loc_7EE0
0000832E 5928 0038                  		subq.b	#4,$38(a0)
00008332                            
00008332                            loc_7EE0:
00008332 7200                       		moveq	#0,d1
00008334 1228 0019                  		move.b	$19(a0),d1
00008338 6100 F56C                  		bsr.w	PlatformObject
0000833C                            
0000833C                            Obj18_Action:				; XREF: Obj18_Index
0000833C 6100 0000                  		bsr.w	Obj18_Move
00008340 6100 0000                  		bsr.w	Obj18_Nudge
00008344 6100 0000                  		bsr.w	DisplaySprite
00008348 6000 0000                  		bra.w	Obj18_ChkDel
0000834C                            ; ===========================================================================
0000834C                            
0000834C                            Obj18_Action2:				; XREF: Obj18_Index
0000834C 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008352 6700                       		beq.s	loc_7F06
00008354 5828 0038                  		addq.b	#4,$38(a0)
00008358                            
00008358                            loc_7F06:
00008358 7200                       		moveq	#0,d1
0000835A 1228 0019                  		move.b	$19(a0),d1
0000835E 6100 F6BA                  		bsr.w	ExitPlatform
00008362 3F28 0008                  		move.w	8(a0),-(sp)
00008366 6100 0000                  		bsr.w	Obj18_Move
0000836A 6100 0000                  		bsr.w	Obj18_Nudge
0000836E 341F                       		move.w	(sp)+,d2
00008370 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008374 6100 0000                  		bsr.w	DisplaySprite
00008378 6000 0000                  		bra.w	Obj18_ChkDel
0000837C                            
0000837C 4E75                       		rts
0000837E                            
0000837E                            ; ---------------------------------------------------------------------------
0000837E                            ; Subroutine to	move platform slightly when you	stand on it
0000837E                            ; ---------------------------------------------------------------------------
0000837E                            
0000837E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000837E                            
0000837E                            
0000837E                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000837E 1028 0038                  		move.b	$38(a0),d0
00008382 6100 A89E                  		bsr.w	CalcSine
00008386 323C 0400                  		move.w	#$400,d1
0000838A C1C1                       		muls.w	d1,d0
0000838C 4840                       		swap	d0
0000838E D068 002C                  		add.w	$2C(a0),d0
00008392 3140 000C                  		move.w	d0,$C(a0)
00008396 4E75                       		rts	
00008398                            ; End of function Obj18_Nudge
00008398                            
00008398                            ; ---------------------------------------------------------------------------
00008398                            ; Subroutine to	move platforms
00008398                            ; ---------------------------------------------------------------------------
00008398                            
00008398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008398                            
00008398                            
00008398                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008398 7000                       		moveq	#0,d0
0000839A 1028 0028                  		move.b	$28(a0),d0
0000839E 0240 000F                  		andi.w	#$F,d0
000083A2 D040                       		add.w	d0,d0
000083A4 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A8 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083AC                            ; End of function Obj18_Move
000083AC                            
000083AC                            ; ===========================================================================
000083AC 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083BC 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083C0 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083C4 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083C6                            ; ===========================================================================
000083C6                            
000083C6                            Obj18_Type00:
000083C6 4E75                       		rts			; platform 00 doesn't move
000083C8                            ; ===========================================================================
000083C8                            
000083C8                            Obj18_Type05:
000083C8 3028 0032                  		move.w	$32(a0),d0
000083CC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D0 4401                       		neg.b	d1		; reverse platform-motion
000083D2 0601 0040                  		addi.b	#$40,d1
000083D6 6000                       		bra.s	Obj18_01_Move
000083D8                            ; ===========================================================================
000083D8                            
000083D8                            Obj18_Type01:
000083D8 3028 0032                  		move.w	$32(a0),d0
000083DC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083E0 0401 0040                  		subi.b	#$40,d1
000083E4                            
000083E4                            Obj18_01_Move:
000083E4 4881                       		ext.w	d1
000083E6 D041                       		add.w	d1,d0
000083E8 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083EC 6000 0000                  		bra.w	Obj18_ChgMotion
000083F0                            ; ===========================================================================
000083F0                            
000083F0                            Obj18_Type0C:
000083F0 3028 0034                  		move.w	$34(a0),d0
000083F4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F8 4401                       		neg.b	d1		; reverse platform-motion
000083FA 0601 0030                  		addi.b	#$30,d1
000083FE 6000                       		bra.s	Obj18_02_Move
00008400                            ; ===========================================================================
00008400                            
00008400                            Obj18_Type0B:
00008400 3028 0034                  		move.w	$34(a0),d0
00008404 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008408 0401 0030                  		subi.b	#$30,d1
0000840C 6000                       		bra.s	Obj18_02_Move
0000840E                            ; ===========================================================================
0000840E                            
0000840E                            Obj18_Type06:
0000840E 3028 0034                  		move.w	$34(a0),d0
00008412 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008416 4401                       		neg.b	d1		; reverse platform-motion
00008418 0601 0040                  		addi.b	#$40,d1
0000841C 6000                       		bra.s	Obj18_02_Move
0000841E                            ; ===========================================================================
0000841E                            
0000841E                            Obj18_Type02:
0000841E 3028 0034                  		move.w	$34(a0),d0
00008422 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008426 0401 0040                  		subi.b	#$40,d1
0000842A                            
0000842A                            Obj18_02_Move:
0000842A 4881                       		ext.w	d1
0000842C D041                       		add.w	d1,d0
0000842E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008432 6000 0000                  		bra.w	Obj18_ChgMotion
00008436                            ; ===========================================================================
00008436                            
00008436                            Obj18_Type03:
00008436 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000843A 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
0000843C 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008442 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008444 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000844A                            
0000844A                            Obj18_03_NoMove:
0000844A 4E75                       		rts	
0000844C                            ; ===========================================================================
0000844C                            
0000844C                            Obj18_03_Wait:
0000844C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008450 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008452 317C 0020 003A             		move.w	#32,$3A(a0)
00008458 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000845C 4E75                       		rts	
0000845E                            ; ===========================================================================
0000845E                            
0000845E                            Obj18_Type04:
0000845E 4A68 003A                  		tst.w	$3A(a0)
00008462 6700                       		beq.s	loc_8048
00008464 5368 003A                  		subq.w	#1,$3A(a0)
00008468 6600                       		bne.s	loc_8048
0000846A 0828 0003 0022             		btst	#3,$22(a0)
00008470 6700                       		beq.s	loc_8042
00008472 08E9 0001 0022             		bset	#1,$22(a1)
00008478 08A9 0003 0022             		bclr	#3,$22(a1)
0000847E 137C 0002 0024             		move.b	#2,$24(a1)
00008484 08A8 0003 0022             		bclr	#3,$22(a0)
0000848A 4228 0025                  		clr.b	$25(a0)
0000848E 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008494                            
00008494                            loc_8042:
00008494 117C 0008 0024             		move.b	#8,$24(a0)
0000849A                            
0000849A                            loc_8048:
0000849A 2628 002C                  		move.l	$2C(a0),d3
0000849E 3028 0012                  		move.w	$12(a0),d0
000084A2 48C0                       		ext.l	d0
000084A4 E180                       		asl.l	#8,d0
000084A6 D680                       		add.l	d0,d3
000084A8 2143 002C                  		move.l	d3,$2C(a0)
000084AC 0668 0038 0012             		addi.w	#$38,$12(a0)
000084B2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084B6 0640 00E0                  		addi.w	#$E0,d0
000084BA B068 002C                  		cmp.w	$2C(a0),d0
000084BE 6400                       		bcc.s	locret_8074
000084C0 117C 0006 0024             		move.b	#6,$24(a0)
000084C6                            
000084C6                            locret_8074:
000084C6 4E75                       		rts	
000084C8                            ; ===========================================================================
000084C8                            
000084C8                            Obj18_Type07:
000084C8 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084CC 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084CE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084D2 7000                       		moveq	#0,d0
000084D4 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D8 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084DA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084DE 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084E0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084E6                            
000084E6                            Obj18_07_NoMove:
000084E6 4E75                       		rts	
000084E8                            ; ===========================================================================
000084E8                            
000084E8                            Obj18_07_Wait:
000084E8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084EC 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084EE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084F2 4E75                       		rts	
000084F4                            ; ===========================================================================
000084F4                            
000084F4                            Obj18_Type08:
000084F4 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F8 3028 0034                  		move.w	$34(a0),d0
000084FC 0440 0200                  		subi.w	#$200,d0
00008500 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008504 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008506 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000850A                            
0000850A                            Obj18_08_NoStop:
0000850A 4E75                       		rts	
0000850C                            ; ===========================================================================
0000850C                            
0000850C                            Obj18_Type0A:
0000850C 3028 0034                  		move.w	$34(a0),d0
00008510 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008514 0401 0040                  		subi.b	#$40,d1
00008518 4881                       		ext.w	d1
0000851A E241                       		asr.w	#1,d1
0000851C D041                       		add.w	d1,d0
0000851E 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008522                            
00008522                            Obj18_ChgMotion:
00008522 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008528 4E75                       		rts	
0000852A                            ; ===========================================================================
0000852A                            
0000852A                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000852A 3028 0032                  		move.w	$32(a0),d0
0000852E 0240 FF80                  		andi.w	#$FF80,d0
00008532 3238 F700                  		move.w	($FFFFF700).w,d1
00008536 0441 0080                  		subi.w	#$80,d1
0000853A 0241 FF80                  		andi.w	#$FF80,d1
0000853E 9041                       		sub.w	d1,d0
00008540 0C40 0280                  		cmpi.w	#$280,d0
00008544 6200                       		bhi.s	Obj18_Delete
00008546 4E75                       		rts	
00008548                            ; ===========================================================================
00008548                            
00008548                            Obj18_Delete:				; XREF: Obj18_Index
00008548 6000 0000                  		bra.w	DeleteObject
0000854C                            ; ===========================================================================
0000854C                            ; ---------------------------------------------------------------------------
0000854C                            ; Sprite mappings - unused
0000854C                            ; ---------------------------------------------------------------------------
0000854C                            Map_obj18x:
0000854C                            	include "_maps\obj18x.asm"
0000854C                            ; ---------------------------------------------------------------------------
0000854C                            ; Sprite mappings - unused
0000854C                            ; ---------------------------------------------------------------------------
0000854C 0000                       		dc.w byte_80FE-Map_obj18x
0000854E 0000                       		dc.w byte_8109-Map_obj18x
00008550 02                         byte_80FE:	dc.b 2
00008551 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008556 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000855B 0A                         byte_8109:	dc.b $A
0000855C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008561 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008566 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000856B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008570 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008575 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000857A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000857F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008584 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008589 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000858E                            		even
0000858E                            		even
0000858E                            
0000858E                            ; ---------------------------------------------------------------------------
0000858E                            ; Sprite mappings - GHZ	platforms
0000858E                            ; ---------------------------------------------------------------------------
0000858E                            Map_obj18:
0000858E                            	include "_maps\obj18ghz.asm"
0000858E                            ; ---------------------------------------------------------------------------
0000858E                            ; Sprite mappings - GHZ	platforms
0000858E                            ; ---------------------------------------------------------------------------
0000858E 0000                       		dc.w byte_8140-Map_obj18
00008590 0000                       		dc.w byte_8155-Map_obj18
00008592 04                         byte_8140:	dc.b 4
00008593 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008598 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000859D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000085A2 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000085A7 0A                         byte_8155:	dc.b $A
000085A8 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085AD 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085B2 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085B7 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085BC 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085C1 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085C6 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085CB 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085D0 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085D5 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085DA                            		even
000085DA                            		even
000085DA                            
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            ; Sprite mappings - SYZ	platforms
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            Map_obj18a:
000085DA                            	include "_maps\obj18syz.asm"
000085DA                            ; ---------------------------------------------------------------------------
000085DA                            ; Sprite mappings - SYZ	platforms
000085DA                            ; ---------------------------------------------------------------------------
000085DA 0000                       		dc.w byte_818A-Map_obj18a
000085DC 03                         byte_818A:	dc.b 3
000085DD F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085E2 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085E7 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085EC                            		even
000085EC                            		even
000085EC                            
000085EC                            ; ---------------------------------------------------------------------------
000085EC                            ; Sprite mappings - SLZ	platforms
000085EC                            ; ---------------------------------------------------------------------------
000085EC                            Map_obj18b:
000085EC                            	include "_maps\obj18slz.asm"
000085EC                            ; ---------------------------------------------------------------------------
000085EC                            ; Sprite mappings - SLZ	platforms
000085EC                            ; ---------------------------------------------------------------------------
000085EC 0000                       		dc.w byte_819C-Map_obj18b
000085EE 02                         byte_819C:	dc.b 2
000085EF F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085F4 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085FA 00                         		even
000085FA 00                         		even
000085FA                            
000085FA                            ; ===========================================================================
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Object 19 - blank
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            
000085FA                            Obj19:					; XREF: Obj_Index
000085FA 4E75                       		rts	
000085FC                            ; ===========================================================================
000085FC                            ; ---------------------------------------------------------------------------
000085FC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085FC                            ; ---------------------------------------------------------------------------
000085FC                            Map_obj48:
000085FC                            	include "_maps\obj48.asm"
000085FC                            ; ---------------------------------------------------------------------------
000085FC                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085FC                            ; ---------------------------------------------------------------------------
000085FC 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008600 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008604 06                         byte_81B2:	dc.b 6
00008605 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000860A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000860F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008614 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008619 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
0000861E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008623 04                         byte_81D1:	dc.b 4
00008624 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008629 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
0000862E 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008633 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008638 04                         byte_81E6:	dc.b 4
00008639 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0000863E E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008643 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008648 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0000864D 04                         byte_81FB:	dc.b 4
0000864E E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008653 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008658 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0000865D 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008662                            		even
00008662                            		even
00008662                            
00008662                            ; ===========================================================================
00008662                            ; ---------------------------------------------------------------------------
00008662                            ; Object 1A - GHZ collapsing ledge
00008662                            ; ---------------------------------------------------------------------------
00008662                            
00008662                            Obj1A:					; XREF: Obj_Index
00008662 7000                       		moveq	#0,d0
00008664 1028 0024                  		move.b	$24(a0),d0
00008668 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
0000866C 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008670                            ; ===========================================================================
00008670 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008674 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008678 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000867C                            ; ===========================================================================
0000867C                            
0000867C                            Obj1A_Main:				; XREF: Obj1A_Index
0000867C 5428 0024                  		addq.b	#2,$24(a0)
00008680 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008688 317C 4000 0002             		move.w	#$4000,2(a0)
0000868E 0028 0004 0001             		ori.b	#4,1(a0)
00008694 117C 0004 0018             		move.b	#4,$18(a0)
0000869A 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000086A0 117C 0064 0019             		move.b	#$64,$19(a0)
000086A6 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086AC 117C 0038 0016             		move.b	#$38,$16(a0)
000086B2 08E8 0004 0001             		bset	#4,1(a0)
000086B8                            
000086B8                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086BC 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086BE 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086C2 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086CA                            
000086CA                            Obj1A_Slope:
000086CA 323C 0030                  		move.w	#$30,d1
000086CE 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086D4 6100 F2A4                  		bsr.w	SlopeObject
000086D8 6000 0000                  		bra.w	MarkObjGone
000086DC                            ; ===========================================================================
000086DC                            
000086DC                            Obj1A_Touch:				; XREF: Obj1A_Index
000086DC 4A28 0038                  		tst.b	$38(a0)
000086E0 6700 0000                  		beq.w	loc_847A
000086E4 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086EA 5328 0038                  		subq.b	#1,$38(a0)
000086EE                            
000086EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086EE                            
000086EE                            
000086EE                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 6100 F326                  		bsr.w	ExitPlatform
000086F6 323C 0030                  		move.w	#$30,d1
000086FA 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008700 3428 0008                  		move.w	8(a0),d2
00008704 6100 0000                  		bsr.w	SlopeObject2
00008708 6000 0000                  		bra.w	MarkObjGone
0000870C                            ; End of function Obj1A_WalkOff
0000870C                            
0000870C                            ; ===========================================================================
0000870C                            
0000870C                            Obj1A_Display:				; XREF: Obj1A_Index
0000870C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008710 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008712 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008716 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000871A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000871E 6000 0000                  		bra.w	DisplaySprite
00008722                            ; ===========================================================================
00008722                            
00008722                            loc_82D0:				; XREF: Obj1A_Display
00008722 5328 0038                  		subq.b	#1,$38(a0)
00008726 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000872A 43F8 D000                  		lea	($FFFFD000).w,a1
0000872E 0829 0003 0022             		btst	#3,$22(a1)
00008734 6700                       		beq.s	loc_82FC
00008736 4A28 0038                  		tst.b	$38(a0)
0000873A 6600                       		bne.s	locret_8308
0000873C 08A9 0003 0022             		bclr	#3,$22(a1)
00008742 08A9 0005 0022             		bclr	#5,$22(a1)
00008748 137C 0001 001D             		move.b	#1,$1D(a1)
0000874E                            
0000874E                            loc_82FC:
0000874E 117C 0000 003A             		move.b	#0,$3A(a0)
00008754 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
0000875A                            
0000875A                            locret_8308:
0000875A 4E75                       		rts	
0000875C                            ; ===========================================================================
0000875C                            
0000875C                            Obj1A_TimeZero:				; XREF: Obj1A_Display
0000875C 6100 0000                  		bsr.w	ObjectFall
00008760 6100 0000                  		bsr.w	DisplaySprite
00008764 4A28 0001                  		tst.b	1(a0)
00008768 6A00                       		bpl.s	Obj1A_Delete
0000876A 4E75                       		rts	
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            Obj1A_Delete:				; XREF: Obj1A_Index
0000876C 6100 0000                  		bsr.w	DeleteObject
00008770 4E75                       		rts	
00008772                            ; ===========================================================================
00008772                            ; ---------------------------------------------------------------------------
00008772                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008772                            ; ---------------------------------------------------------------------------
00008772                            
00008772                            Obj53:					; XREF: Obj_Index
00008772 7000                       		moveq	#0,d0
00008774 1028 0024                  		move.b	$24(a0),d0
00008778 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000877C 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008780                            ; ===========================================================================
00008780 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008784 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008788 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000878C                            ; ===========================================================================
0000878C                            
0000878C                            Obj53_Main:				; XREF: Obj53_Index
0000878C 5428 0024                  		addq.b	#2,$24(a0)
00008790 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008798 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000879E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000087A4 6600                       		bne.s	Obj53_NotSLZ
000087A6 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087AC 5428 001A                  		addq.b	#2,$1A(a0)
000087B0                            
000087B0                            Obj53_NotSLZ:
000087B0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087B6 6600                       		bne.s	Obj53_NotSBZ
000087B8 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087BE                            
000087BE                            Obj53_NotSBZ:
000087BE 0028 0004 0001             		ori.b	#4,1(a0)
000087C4 117C 0004 0018             		move.b	#4,$18(a0)
000087CA 117C 0007 0038             		move.b	#7,$38(a0)
000087D0 117C 0044 0019             		move.b	#$44,$19(a0)
000087D6                            
000087D6                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087D6 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087DA 6700                       		beq.s	Obj53_Solid	; if not, branch
000087DC 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087E0 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087E4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E8                            
000087E8                            Obj53_Solid:
000087E8 323C 0020                  		move.w	#$20,d1
000087EC 6100 F0B8                  		bsr.w	PlatformObject
000087F0 4A28 0028                  		tst.b	$28(a0)
000087F4 6A00                       		bpl.s	Obj53_MarkAsGone
000087F6 0829 0003 0022             		btst	#3,$22(a1)
000087FC 6700                       		beq.s	Obj53_MarkAsGone
000087FE 08A8 0000 0001             		bclr	#0,1(a0)
00008804 3029 0008                  		move.w	8(a1),d0
00008808 9068 0008                  		sub.w	8(a0),d0
0000880C 6400                       		bcc.s	Obj53_MarkAsGone
0000880E 08E8 0000 0001             		bset	#0,1(a0)
00008814                            
00008814                            Obj53_MarkAsGone:
00008814 6000 0000                  		bra.w	MarkObjGone
00008818                            ; ===========================================================================
00008818                            
00008818                            Obj53_Touch:				; XREF: Obj53_Index
00008818 4A28 0038                  		tst.b	$38(a0)
0000881C 6700 0000                  		beq.w	loc_8458
00008820 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008826 5328 0038                  		subq.b	#1,$38(a0)
0000882A                            
0000882A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000882A                            
0000882A                            
0000882A                            Obj53_WalkOff:				; XREF: Obj53_Index
0000882A 323C 0020                  		move.w	#$20,d1
0000882E 6100 F1EA                  		bsr.w	ExitPlatform
00008832 3428 0008                  		move.w	8(a0),d2
00008836 6100 F74C                  		bsr.w	MvSonicOnPtfm2
0000883A 6000 0000                  		bra.w	MarkObjGone
0000883E                            ; End of function Obj53_WalkOff
0000883E                            
0000883E                            ; ===========================================================================
0000883E                            
0000883E                            Obj53_Display:				; XREF: Obj53_Index
0000883E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008842 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008844 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008848 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000884C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008850 6000 0000                  		bra.w	DisplaySprite
00008854                            ; ===========================================================================
00008854                            
00008854                            loc_8402:
00008854 5328 0038                  		subq.b	#1,$38(a0)
00008858 6100 FFD0                  		bsr.w	Obj53_WalkOff
0000885C 43F8 D000                  		lea	($FFFFD000).w,a1
00008860 0829 0003 0022             		btst	#3,$22(a1)
00008866 6700                       		beq.s	loc_842E
00008868 4A28 0038                  		tst.b	$38(a0)
0000886C 6600                       		bne.s	locret_843A
0000886E 08A9 0003 0022             		bclr	#3,$22(a1)
00008874 08A9 0005 0022             		bclr	#5,$22(a1)
0000887A 137C 0001 001D             		move.b	#1,$1D(a1)
00008880                            
00008880                            loc_842E:
00008880 117C 0000 003A             		move.b	#0,$3A(a0)
00008886 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000888C                            
0000888C                            locret_843A:
0000888C 4E75                       		rts	
0000888E                            ; ===========================================================================
0000888E                            
0000888E                            Obj53_TimeZero:				; XREF: Obj53_Display
0000888E 6100 0000                  		bsr.w	ObjectFall
00008892 6100 0000                  		bsr.w	DisplaySprite
00008896 4A28 0001                  		tst.b	1(a0)
0000889A 6A00                       		bpl.s	Obj53_Delete
0000889C 4E75                       		rts	
0000889E                            ; ===========================================================================
0000889E                            
0000889E                            Obj53_Delete:				; XREF: Obj53_Index
0000889E 6100 0000                  		bsr.w	DeleteObject
000088A2 4E75                       		rts	
000088A4                            ; ===========================================================================
000088A4                            
000088A4                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000088A4 117C 0000 003A             		move.b	#0,$3A(a0)
000088AA                            
000088AA                            loc_8458:				; XREF: Obj53_Touch
000088AA 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088B0 0828 0000 0028             		btst	#0,$28(a0)
000088B6 6700                       		beq.s	loc_846C
000088B8 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088BE                            
000088BE                            loc_846C:
000088BE 7207                       		moveq	#7,d1
000088C0 5228 001A                  		addq.b	#1,$1A(a0)
000088C4 6000                       		bra.s	loc_8486
000088C6                            ; ===========================================================================
000088C6                            
000088C6                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088C6 117C 0000 003A             		move.b	#0,$3A(a0)
000088CC                            
000088CC                            loc_847A:				; XREF: Obj1A_Touch
000088CC 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088D2 7218                       		moveq	#$18,d1
000088D4 5428 001A                  		addq.b	#2,$1A(a0)
000088D8                            
000088D8                            loc_8486:				; XREF: Obj53_Collapse
000088D8 7000                       		moveq	#0,d0
000088DA 1028 001A                  		move.b	$1A(a0),d0
000088DE D040                       		add.w	d0,d0
000088E0 2668 0004                  		movea.l	4(a0),a3
000088E4 D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E8 524B                       		addq.w	#1,a3
000088EA 08E8 0005 0001             		bset	#5,1(a0)
000088F0 1810                       		move.b	0(a0),d4
000088F2 1A28 0001                  		move.b	1(a0),d5
000088F6 2248                       		movea.l	a0,a1
000088F8 6000                       		bra.s	loc_84B2
000088FA                            ; ===========================================================================
000088FA                            
000088FA                            loc_84AA:
000088FA 6100 0000                  		bsr.w	SingleObjLoad
000088FE 6600                       		bne.s	loc_84F2
00008900 5A4B                       		addq.w	#5,a3
00008902                            
00008902                            loc_84B2:
00008902 137C 0006 0024             		move.b	#6,$24(a1)
00008908 1284                       		move.b	d4,0(a1)
0000890A 234B 0004                  		move.l	a3,4(a1)
0000890E 1345 0001                  		move.b	d5,1(a1)
00008912 3368 0008 0008             		move.w	8(a0),8(a1)
00008918 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000891E 3368 0002 0002             		move.w	2(a0),2(a1)
00008924 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000892A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008930 135C 0038                  		move.b	(a4)+,$38(a1)
00008934 B3C8                       		cmpa.l	a0,a1
00008936 6400                       		bcc.s	loc_84EE
00008938 6100 0000                  		bsr.w	DisplaySprite2
0000893C                            
0000893C                            loc_84EE:
0000893C 51C9 FFBC                  		dbf	d1,loc_84AA
00008940                            
00008940                            loc_84F2:
00008940 6100 0000                  		bsr.w	DisplaySprite
00008944 303C 00B9                  		move.w	#$B9,d0
00008948 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
0000894E                            ; ===========================================================================
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000894E                            ; ---------------------------------------------------------------------------
0000894E 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000895E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008968 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008970 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008978                            
00008978                            ; ---------------------------------------------------------------------------
00008978                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008978                            ; ---------------------------------------------------------------------------
00008978                            
00008978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008978                            
00008978                            
00008978                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008978 43F8 D000                  		lea	($FFFFD000).w,a1
0000897C 0829 0003 0022             		btst	#3,$22(a1)
00008982 6700                       		beq.s	locret_856E
00008984 3029 0008                  		move.w	8(a1),d0
00008988 9068 0008                  		sub.w	8(a0),d0
0000898C D041                       		add.w	d1,d0
0000898E E248                       		lsr.w	#1,d0
00008990 0828 0000 0001             		btst	#0,1(a0)
00008996 6700                       		beq.s	loc_854E
00008998 4640                       		not.w	d0
0000899A D041                       		add.w	d1,d0
0000899C                            
0000899C                            loc_854E:
0000899C 7200                       		moveq	#0,d1
0000899E 1232 0000                  		move.b	(a2,d0.w),d1
000089A2 3028 000C                  		move.w	$C(a0),d0
000089A6 9041                       		sub.w	d1,d0
000089A8 7200                       		moveq	#0,d1
000089AA 1229 0016                  		move.b	$16(a1),d1
000089AE 9041                       		sub.w	d1,d0
000089B0 3340 000C                  		move.w	d0,$C(a1)
000089B4 9468 0008                  		sub.w	8(a0),d2
000089B8 9569 0008                  		sub.w	d2,8(a1)
000089BC                            
000089BC                            locret_856E:
000089BC 4E75                       		rts	
000089BE                            ; End of function SlopeObject2
000089BE                            
000089BE                            ; ===========================================================================
000089BE                            ; ---------------------------------------------------------------------------
000089BE                            ; Collision data for GHZ collapsing ledge
000089BE                            ; ---------------------------------------------------------------------------
000089BE                            Obj1A_SlopeData:
000089BE                            		incbin	misc\ghzledge.bin
000089EE                            		even
000089EE                            
000089EE                            ; ---------------------------------------------------------------------------
000089EE                            ; Sprite mappings - GHZ	collapsing ledge
000089EE                            ; ---------------------------------------------------------------------------
000089EE                            Map_obj1A:
000089EE                            	include "_maps\obj1A.asm"
000089EE                            ; ---------------------------------------------------------------------------
000089EE                            ; Sprite mappings - GHZ	collapsing ledge
000089EE                            ; ---------------------------------------------------------------------------
000089EE 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089F2 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089F6 10                         byte_85A8:	dc.b $10
000089F7 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089FC D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A01 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A06 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A0B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A10 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A15 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A1A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A1F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A24 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A29 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A2E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A33 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A38 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A3D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A42 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A47 10                         byte_85F9:	dc.b $10
00008A48 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A4D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A52 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A57 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A5C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A61 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A66 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A6B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A70 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A75 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A7A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A7F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A84 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A89 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A8E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A93 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A98 19                         byte_864A:	dc.b $19
00008A99 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A9E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008AA3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AAD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AB2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AB7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008ABC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AC1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008AC6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008ACB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AD0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008AD5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008ADA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008ADF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AE4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AEE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AF3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AFD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B02 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B07 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B0C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B11 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B16 19                         byte_86C8:	dc.b $19
00008B17 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B1C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B21 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B26 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B2B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B30 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B35 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B3A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B3F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B44 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B49 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B4E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B53 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B58 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B5D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B62 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B67 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B6C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B71 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B76 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B7B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B80 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B85 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B8A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B8F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B94                            		even
00008B94                            		even
00008B94                            
00008B94                            ; ---------------------------------------------------------------------------
00008B94                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B94                            ; ---------------------------------------------------------------------------
00008B94                            Map_obj53:
00008B94                            	include "_maps\obj53.asm"
00008B94                            ; ---------------------------------------------------------------------------
00008B94                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B94                            ; ---------------------------------------------------------------------------
00008B94 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B98 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B9C 04                         byte_874E:	dc.b 4
00008B9D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008BA2 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008BA7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BAC 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BB1 08                         byte_8763:	dc.b 8
00008BB2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BB7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BBC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BC1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BC6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BCB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BD0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BD5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BDA 04                         byte_878C:	dc.b 4
00008BDB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BE0 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BE5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BEA 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BEF 08                         byte_87A1:	dc.b 8
00008BF0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BF5 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BFA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BFF F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008C04 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C09 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C0E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C13 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C18                            		even
00008C18                            		even
00008C18                            
00008C18                            ; ===========================================================================
00008C18                            ; ---------------------------------------------------------------------------
00008C18                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C18                            ; ---------------------------------------------------------------------------
00008C18                            
00008C18                            Obj1C:					; XREF: Obj_Index
00008C18 7000                       		moveq	#0,d0
00008C1A 1028 0024                  		move.b	$24(a0),d0
00008C1E 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C22 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C26                            ; ===========================================================================
00008C26 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C28 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C2A                            ; ===========================================================================
00008C2A                            
00008C2A                            Obj1C_Main:				; XREF: Obj1C_Index
00008C2A 5428 0024                  		addq.b	#2,$24(a0)
00008C2E 7000                       		moveq	#0,d0
00008C30 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C34 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C38 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C3C 2159 0004                  		move.l	(a1)+,4(a0)
00008C40 3159 0002                  		move.w	(a1)+,2(a0)
00008C44 0028 0004 0001             		ori.b	#4,1(a0)
00008C4A 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C4E 1159 0019                  		move.b	(a1)+,$19(a0)
00008C52 1159 0018                  		move.b	(a1)+,$18(a0)
00008C56 1159 0020                  		move.b	(a1)+,$20(a0)
00008C5A                            
00008C5A                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C5A 3028 0008                  		move.w	8(a0),d0
00008C5E 0240 FF80                  		andi.w	#$FF80,d0
00008C62 3238 F700                  		move.w	($FFFFF700).w,d1
00008C66 0441 0080                  		subi.w	#$80,d1
00008C6A 0241 FF80                  		andi.w	#$FF80,d1
00008C6E 9041                       		sub.w	d1,d0
00008C70 0C40 0280                  		cmpi.w	#$280,d0
00008C74 6200 0000                  		bhi.w	DeleteObject
00008C78 6000 0000                  		bra.w	DisplaySprite
00008C7C                            ; ===========================================================================
00008C7C                            ; ---------------------------------------------------------------------------
00008C7C                            ; Variables for	object $1C are stored in an array
00008C7C                            ; ---------------------------------------------------------------------------
00008C7C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C80 44D8                       		dc.w $44D8		; VRAM setting
00008C82 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C86 0000 0000                  		dc.l Map_obj1C
00008C8A 44D8                       		dc.w $44D8
00008C8C 0008 0200                  		dc.b 0,	8, 2, 0
00008C90 0000 0000                  		dc.l Map_obj1C
00008C94 44D8                       		dc.w $44D8
00008C96 0008 0200                  		dc.b 0,	8, 2, 0
00008C9A 0000 7D8E                  		dc.l Map_obj11
00008C9E 438E                       		dc.w $438E
00008CA0 0110 0100                  		dc.b 1,	$10, 1,	0
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Sprite mappings - SLZ	lava thrower
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            Map_obj1C:
00008CA4                            	include "_maps\obj1C.asm"
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Sprite mappings - SLZ	lava thrower
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4 0000                       		dc.w byte_8858-Map_obj1C
00008CA6 01                         byte_8858:	dc.b 1
00008CA7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CAC                            		even
00008CAC                            		even
00008CAC                            
00008CAC                            ; ===========================================================================
00008CAC                            ; ---------------------------------------------------------------------------
00008CAC                            ; Object 1D - switch that activates when Sonic touches it
00008CAC                            ; (this	is not used anywhere in	the game)
00008CAC                            ; ---------------------------------------------------------------------------
00008CAC                            
00008CAC                            Obj1D:					; XREF: Obj_Index
00008CAC 7000                       		moveq	#0,d0
00008CAE 1028 0024                  		move.b	$24(a0),d0
00008CB2 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CB6 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CBA                            ; ===========================================================================
00008CBA 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CBC 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CBE 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CC0                            ; ===========================================================================
00008CC0                            
00008CC0                            Obj1D_Main:				; XREF: Obj1D_Index
00008CC0 5428 0024                  		addq.b	#2,$24(a0)
00008CC4 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CCC 317C 4000 0002             		move.w	#$4000,2(a0)
00008CD2 117C 0004 0001             		move.b	#4,1(a0)
00008CD8 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CDE 117C 0010 0019             		move.b	#$10,$19(a0)
00008CE4 117C 0005 0018             		move.b	#5,$18(a0)
00008CEA                            
00008CEA                            Obj1D_Action:				; XREF: Obj1D_Index
00008CEA 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CF0 323C 0010                  		move.w	#$10,d1
00008CF4 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF8 6700                       		beq.s	Obj1D_ChkDel
00008CFA 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CFE 7001                       		moveq	#1,d0
00008D00 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008D04                            
00008D04                            Obj1D_ChkDel:
00008D04 6100 0000                  		bsr.w	DisplaySprite
00008D08 3028 0008                  		move.w	8(a0),d0
00008D0C 0240 FF80                  		andi.w	#$FF80,d0
00008D10 3238 F700                  		move.w	($FFFFF700).w,d1
00008D14 0441 0080                  		subi.w	#$80,d1
00008D18 0241 FF80                  		andi.w	#$FF80,d1
00008D1C 9041                       		sub.w	d1,d0
00008D1E 0C40 0280                  		cmpi.w	#$280,d0
00008D22 6200 0000                  		bhi.w	Obj1D_Delete
00008D26 4E75                       		rts	
00008D28                            ; ===========================================================================
00008D28                            
00008D28                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D28 6100 0000                  		bsr.w	DeleteObject
00008D2C 4E75                       		rts	
00008D2E                            ; ---------------------------------------------------------------------------
00008D2E                            ; Subroutine to	check if Sonic touches the object
00008D2E                            ; ---------------------------------------------------------------------------
00008D2E                            
00008D2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D2E                            
00008D2E                            
00008D2E                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D2E 43F8 D000                  		lea	($FFFFD000).w,a1
00008D32 3029 0008                  		move.w	8(a1),d0
00008D36 9068 0008                  		sub.w	8(a0),d0
00008D3A D041                       		add.w	d1,d0
00008D3C 6B00                       		bmi.s	loc_8918
00008D3E D241                       		add.w	d1,d1
00008D40 B041                       		cmp.w	d1,d0
00008D42 6400                       		bcc.s	loc_8918
00008D44 3429 000C                  		move.w	$C(a1),d2
00008D48 1229 0016                  		move.b	$16(a1),d1
00008D4C 4881                       		ext.w	d1
00008D4E D242                       		add.w	d2,d1
00008D50 3028 000C                  		move.w	$C(a0),d0
00008D54 0440 0010                  		subi.w	#$10,d0
00008D58 9041                       		sub.w	d1,d0
00008D5A 6200                       		bhi.s	loc_8918
00008D5C 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D60 6500                       		bcs.s	loc_8918
00008D62 70FF                       		moveq	#-1,d0
00008D64 4E75                       		rts	
00008D66                            ; ===========================================================================
00008D66                            
00008D66                            loc_8918:
00008D66 7000                       		moveq	#0,d0
00008D68 4E75                       		rts	
00008D6A                            ; End of function Obj1D_ChkTouch
00008D6A                            
00008D6A                            ; ===========================================================================
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Sprite mappings - object 1D
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            Map_obj1D:
00008D6A                            	include "_maps\obj1D.asm"
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A                            ; Sprite mappings - object 1D
00008D6A                            ; ---------------------------------------------------------------------------
00008D6A 0000                       		dc.w byte_891E-Map_obj1D
00008D6C 04                         byte_891E:	dc.b 4
00008D6D E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D72 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D77 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D7C 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D82 00                         		even
00008D82 00                         		even
00008D82                            
00008D82                            ; ===========================================================================
00008D82                            ; ---------------------------------------------------------------------------
00008D82                            ; Object 2A - doors (SBZ)
00008D82                            ; ---------------------------------------------------------------------------
00008D82                            
00008D82                            Obj2A:					; XREF: Obj_Index
00008D82 7000                       		moveq	#0,d0
00008D84 1028 0024                  		move.b	$24(a0),d0
00008D88 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D8C 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D90                            ; ===========================================================================
00008D90 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D92 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D94                            ; ===========================================================================
00008D94                            
00008D94                            Obj2A_Main:				; XREF: Obj2A_Index
00008D94 5428 0024                  		addq.b	#2,$24(a0)
00008D98 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008DA0 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008DA6 0028 0004 0001             		ori.b	#4,1(a0)
00008DAC 117C 0008 0019             		move.b	#8,$19(a0)
00008DB2 117C 0004 0018             		move.b	#4,$18(a0)
00008DB8                            
00008DB8                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB8 323C 0040                  		move.w	#$40,d1
00008DBC 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DC0 3038 D008                  		move.w	($FFFFD008).w,d0
00008DC4 D041                       		add.w	d1,d0
00008DC6 B068 0008                  		cmp.w	8(a0),d0
00008DCA 6500                       		bcs.s	Obj2A_Animate
00008DCC 9041                       		sub.w	d1,d0
00008DCE 9041                       		sub.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	Obj2A_Animate
00008DD6 D041                       		add.w	d1,d0
00008DD8 B068 0008                  		cmp.w	8(a0),d0
00008DDC 6400                       		bcc.s	loc_899A
00008DDE 0828 0000 0022             		btst	#0,$22(a0)
00008DE4 6600                       		bne.s	Obj2A_Animate
00008DE6 6000                       		bra.s	Obj2A_Open
00008DE8                            ; ===========================================================================
00008DE8                            
00008DE8                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE8 0828 0000 0022             		btst	#0,$22(a0)
00008DEE 6700                       		beq.s	Obj2A_Animate
00008DF0                            
00008DF0                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DF0 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DF6                            
00008DF6                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DF6 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DFC 6100 0000                  		bsr.w	AnimateSprite
00008E00 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008E04 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008E06 323C 0011                  		move.w	#$11,d1
00008E0A 343C 0020                  		move.w	#$20,d2
00008E0E 3602                       		move.w	d2,d3
00008E10 5243                       		addq.w	#1,d3
00008E12 3828 0008                  		move.w	8(a0),d4
00008E16 6100 0000                  		bsr.w	SolidObject
00008E1A                            
00008E1A                            Obj2A_MarkAsUsed:
00008E1A 6000 0000                  		bra.w	MarkObjGone
00008E1E                            ; ===========================================================================
00008E1E                            Ani_obj2A:
00008E1E                            	include "_anim\obj2A.asm"
00008E1E                            ; ---------------------------------------------------------------------------
00008E1E                            ; Animation script - doors (SBZ)
00008E1E                            ; ---------------------------------------------------------------------------
00008E1E 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E20 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E22 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E2E 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E3A                            		even
00008E3A                            		even
00008E3A                            
00008E3A                            ; ---------------------------------------------------------------------------
00008E3A                            ; Sprite mappings - doors (SBZ)
00008E3A                            ; ---------------------------------------------------------------------------
00008E3A                            Map_obj2A:
00008E3A                            	include "_maps\obj2A.asm"
00008E3A                            ; ---------------------------------------------------------------------------
00008E3A                            ; Sprite mappings - doors (SBZ)
00008E3A                            ; ---------------------------------------------------------------------------
00008E3A 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E42 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E46 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E4A 0000                       		dc.w byte_8A56-Map_obj2A
00008E4C 02                         byte_89FE:	dc.b 2
00008E4D E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E52 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E57 02                         byte_8A09:	dc.b 2
00008E58 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E5D 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E62 02                         byte_8A14:	dc.b 2
00008E63 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E68 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E6D 02                         byte_8A1F:	dc.b 2
00008E6E D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E73 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E78 02                         byte_8A2A:	dc.b 2
00008E79 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E7E 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E83 02                         byte_8A35:	dc.b 2
00008E84 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E89 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E8E 02                         byte_8A40:	dc.b 2
00008E8F C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E94 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E99 02                         byte_8A4B:	dc.b 2
00008E9A C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E9F 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008EA4 02                         byte_8A56:	dc.b 2
00008EA5 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EAA 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EB0 00                         		even
00008EB0 00                         		even
00008EB0                            
00008EB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EB0                            
00008EB0                            
00008EB0                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EB0 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EB4 6700                       		beq.s	loc_8AA8
00008EB6 6B00 0000                  		bmi.w	loc_8AC4
00008EBA 4A40                       		tst.w	d0
00008EBC 6700 0000                  		beq.w	loc_8A92
00008EC0 6B00                       		bmi.s	loc_8A7C
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6B00                       		bmi.s	loc_8A92
00008EC8 6000                       		bra.s	loc_8A82
00008ECA                            ; ===========================================================================
00008ECA                            
00008ECA                            loc_8A7C:
00008ECA 4A69 0010                  		tst.w	$10(a1)
00008ECE 6A00                       		bpl.s	loc_8A92
00008ED0                            
00008ED0                            loc_8A82:
00008ED0 9169 0008                  		sub.w	d0,8(a1)
00008ED4 337C 0000 0014             		move.w	#0,$14(a1)
00008EDA 337C 0000 0010             		move.w	#0,$10(a1)
00008EE0                            
00008EE0                            loc_8A92:
00008EE0 0829 0001 0022             		btst	#1,$22(a1)
00008EE6 6600                       		bne.s	loc_8AB6
00008EE8 08E9 0005 0022             		bset	#5,$22(a1)
00008EEE 08E8 0005 0022             		bset	#5,$22(a0)
00008EF4 4E75                       		rts	
00008EF6                            ; ===========================================================================
00008EF6                            
00008EF6                            loc_8AA8:
00008EF6 0828 0005 0022             		btst	#5,$22(a0)
00008EFC 6700                       		beq.s	locret_8AC2
00008EFE 337C 0001 001C             		move.w	#1,$1C(a1)
00008F04                            
00008F04                            loc_8AB6:
00008F04 08A8 0005 0022             		bclr	#5,$22(a0)
00008F0A 08A9 0005 0022             		bclr	#5,$22(a1)
00008F10                            
00008F10                            locret_8AC2:
00008F10 4E75                       		rts	
00008F12                            ; ===========================================================================
00008F12                            
00008F12                            loc_8AC4:
00008F12 4A69 0012                  		tst.w	$12(a1)
00008F16 6A00                       		bpl.s	locret_8AD8
00008F18 4A43                       		tst.w	d3
00008F1A 6A00                       		bpl.s	locret_8AD8
00008F1C 9769 000C                  		sub.w	d3,$C(a1)
00008F20 337C 0000 0012             		move.w	#0,$12(a1)
00008F26                            
00008F26                            locret_8AD8:
00008F26 4E75                       		rts	
00008F28                            ; End of function Obj44_SolidWall
00008F28                            
00008F28                            
00008F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F28                            
00008F28                            
00008F28                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F28 43F8 D000                  		lea	($FFFFD000).w,a1
00008F2C 3029 0008                  		move.w	8(a1),d0
00008F30 9068 0008                  		sub.w	8(a0),d0
00008F34 D041                       		add.w	d1,d0
00008F36 6B00                       		bmi.s	loc_8B48
00008F38 3601                       		move.w	d1,d3
00008F3A D643                       		add.w	d3,d3
00008F3C B043                       		cmp.w	d3,d0
00008F3E 6200                       		bhi.s	loc_8B48
00008F40 1629 0016                  		move.b	$16(a1),d3
00008F44 4883                       		ext.w	d3
00008F46 D443                       		add.w	d3,d2
00008F48 3629 000C                  		move.w	$C(a1),d3
00008F4C 9668 000C                  		sub.w	$C(a0),d3
00008F50 D642                       		add.w	d2,d3
00008F52 6B00                       		bmi.s	loc_8B48
00008F54 3802                       		move.w	d2,d4
00008F56 D844                       		add.w	d4,d4
00008F58 B644                       		cmp.w	d4,d3
00008F5A 6400                       		bcc.s	loc_8B48
00008F5C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F60 6B00                       		bmi.s	loc_8B48
00008F62 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F68 6400                       		bcc.s	loc_8B48
00008F6A 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F6E 6600                       		bne.s	loc_8B48
00008F70 3A00                       		move.w	d0,d5
00008F72 B240                       		cmp.w	d0,d1
00008F74 6400                       		bcc.s	loc_8B30
00008F76 D241                       		add.w	d1,d1
00008F78 9041                       		sub.w	d1,d0
00008F7A 3A00                       		move.w	d0,d5
00008F7C 4445                       		neg.w	d5
00008F7E                            
00008F7E                            loc_8B30:
00008F7E 3203                       		move.w	d3,d1
00008F80 B443                       		cmp.w	d3,d2
00008F82 6400                       		bcc.s	loc_8B3C
00008F84 9644                       		sub.w	d4,d3
00008F86 3203                       		move.w	d3,d1
00008F88 4441                       		neg.w	d1
00008F8A                            
00008F8A                            loc_8B3C:
00008F8A BA41                       		cmp.w	d1,d5
00008F8C 6200                       		bhi.s	loc_8B44
00008F8E 7801                       		moveq	#1,d4
00008F90 4E75                       		rts	
00008F92                            ; ===========================================================================
00008F92                            
00008F92                            loc_8B44:
00008F92 78FF                       		moveq	#-1,d4
00008F94 4E75                       		rts	
00008F96                            ; ===========================================================================
00008F96                            
00008F96                            loc_8B48:
00008F96 7800                       		moveq	#0,d4
00008F98 4E75                       		rts	
00008F9A                            ; End of function Obj44_SolidWall2
00008F9A                            
00008F9A                            ; ===========================================================================
00008F9A                            ; ---------------------------------------------------------------------------
00008F9A                            ; Object 1E - Ball Hog enemy (SBZ)
00008F9A                            ; ---------------------------------------------------------------------------
00008F9A                            
00008F9A                            Obj1E:					; XREF: Obj_Index
00008F9A 7000                       		moveq	#0,d0
00008F9C 1028 0024                  		move.b	$24(a0),d0
00008FA0 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008FA4 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA8                            ; ===========================================================================
00008FA8 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FAA 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FAC                            ; ===========================================================================
00008FAC                            
00008FAC                            Obj1E_Main:				; XREF: Obj1E_Index
00008FAC 117C 0013 0016             		move.b	#$13,$16(a0)
00008FB2 117C 0008 0017             		move.b	#8,$17(a0)
00008FB8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FC0 317C 2302 0002             		move.w	#$2302,2(a0)
00008FC6 117C 0004 0001             		move.b	#4,1(a0)
00008FCC 117C 0004 0018             		move.b	#4,$18(a0)
00008FD2 117C 0005 0020             		move.b	#5,$20(a0)
00008FD8 117C 000C 0019             		move.b	#$C,$19(a0)
00008FDE 6100 0000                  		bsr.w	ObjectFall
00008FE2 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE8 4A41                       		tst.w	d1
00008FEA 6A00                       		bpl.s	locret_8BAC
00008FEC D368 000C                  		add.w	d1,$C(a0)
00008FF0 317C 0000 0012             		move.w	#0,$12(a0)
00008FF6 5428 0024                  		addq.b	#2,$24(a0)
00008FFA                            
00008FFA                            locret_8BAC:
00008FFA 4E75                       		rts	
00008FFC                            ; ===========================================================================
00008FFC                            
00008FFC                            Obj1E_Action:				; XREF: Obj1E_Index
00008FFC 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009002 6100 0000                  		bsr.w	AnimateSprite
00009006 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000900C 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000900E 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009012 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009014 6000                       		bra.s	Obj1E_MarkAsGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009016 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000901A                            
0000901A                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000901A 6000 0000                  		bra.w	MarkObjGone
0000901E                            ; ===========================================================================
0000901E                            
0000901E                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000901E 117C 0001 0032             		move.b	#1,$32(a0)
00009024 6100 0000                  		bsr.w	SingleObjLoad
00009028 6600                       		bne.s	loc_8C1A
0000902A 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000902E 3368 0008 0008             		move.w	8(a0),8(a1)
00009034 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000903A 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009040 337C 0000 0012             		move.w	#0,$12(a1)
00009046 70FC                       		moveq	#-4,d0
00009048 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
0000904E 6700                       		beq.s	loc_8C0A	; if not, branch
00009050 4440                       		neg.w	d0
00009052 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009056                            
00009056                            loc_8C0A:
00009056 D169 0008                  		add.w	d0,8(a1)
0000905A 0669 000C 000C             		addi.w	#$C,$C(a1)
00009060 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009066                            
00009066                            loc_8C1A:
00009066 60B2                       		bra.s	Obj1E_MarkAsGone
00009068                            ; ===========================================================================
00009068                            ; ---------------------------------------------------------------------------
00009068                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009068                            ; ---------------------------------------------------------------------------
00009068                            
00009068                            Obj20:					; XREF: Obj_Index
00009068 7000                       		moveq	#0,d0
0000906A 1028 0024                  		move.b	$24(a0),d0
0000906E 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009072 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009076                            ; ===========================================================================
00009076 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009078 0000                       		dc.w Obj20_Bounce-Obj20_Index
0000907A                            ; ===========================================================================
0000907A                            
0000907A                            Obj20_Main:				; XREF: Obj20_Index
0000907A 5428 0024                  		addq.b	#2,$24(a0)
0000907E 117C 0007 0016             		move.b	#7,$16(a0)
00009084 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000908C 317C 2302 0002             		move.w	#$2302,2(a0)
00009092 117C 0004 0001             		move.b	#4,1(a0)
00009098 117C 0003 0018             		move.b	#3,$18(a0)
0000909E 117C 0087 0020             		move.b	#$87,$20(a0)
000090A4 117C 0008 0019             		move.b	#8,$19(a0)
000090AA 7000                       		moveq	#0,d0
000090AC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090B0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090B4 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B8 117C 0004 001A             		move.b	#4,$1A(a0)
000090BE                            
000090BE                            Obj20_Bounce:				; XREF: Obj20_Index
000090BE 4EB9 0000 0000             		jsr	ObjectFall
000090C4 4A68 0012                  		tst.w	$12(a0)
000090C8 6B00                       		bmi.s	Obj20_ChkExplode
000090CA 4EB9 0000 0000             		jsr	ObjHitFloor
000090D0 4A41                       		tst.w	d1
000090D2 6A00                       		bpl.s	Obj20_ChkExplode
000090D4 D368 000C                  		add.w	d1,$C(a0)
000090D8 317C FD00 0012             		move.w	#-$300,$12(a0)
000090DE 4A03                       		tst.b	d3
000090E0 6700                       		beq.s	Obj20_ChkExplode
000090E2 6B00                       		bmi.s	loc_8CA4
000090E4 4A68 0010                  		tst.w	$10(a0)
000090E8 6A00                       		bpl.s	Obj20_ChkExplode
000090EA 4468 0010                  		neg.w	$10(a0)
000090EE 6000                       		bra.s	Obj20_ChkExplode
000090F0                            ; ===========================================================================
000090F0                            
000090F0                            loc_8CA4:				; XREF: Obj20_Bounce
000090F0 4A68 0010                  		tst.w	$10(a0)
000090F4 6B00                       		bmi.s	Obj20_ChkExplode
000090F6 4468 0010                  		neg.w	$10(a0)
000090FA                            
000090FA                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090FA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090FE 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009100 10BC 0024                  		move.b	#$24,0(a0)
00009104 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009108 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000910E 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009112                            ; ===========================================================================
00009112                            
00009112                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009112 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009116 6A00                       		bpl.s	Obj20_Display
00009118 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000911E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009124                            
00009124                            Obj20_Display:
00009124 6100 0000                  		bsr.w	DisplaySprite
00009128 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000912C 0640 00E0                  		addi.w	#$E0,d0
00009130 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009134 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009138 4E75                       		rts	
0000913A                            ; ===========================================================================
0000913A                            ; ---------------------------------------------------------------------------
0000913A                            ; Object 24 - explosion	from a destroyed monitor
0000913A                            ; ---------------------------------------------------------------------------
0000913A                            
0000913A                            Obj24:					; XREF: Obj_Index
0000913A 7000                       		moveq	#0,d0
0000913C 1028 0024                  		move.b	$24(a0),d0
00009140 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009144 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009148                            ; ===========================================================================
00009148 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000914A 0000                       		dc.w Obj24_Animate-Obj24_Index
0000914C                            ; ===========================================================================
0000914C                            
0000914C                            Obj24_Main:				; XREF: Obj24_Index
0000914C 5428 0024                  		addq.b	#2,$24(a0)
00009150 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009158 317C 041C 0002             		move.w	#$41C,2(a0)
0000915E 117C 0004 0001             		move.b	#4,1(a0)
00009164 117C 0001 0018             		move.b	#1,$18(a0)
0000916A 117C 0000 0020             		move.b	#0,$20(a0)
00009170 117C 000C 0019             		move.b	#$C,$19(a0)
00009176 117C 0009 001E             		move.b	#9,$1E(a0)
0000917C 117C 0000 001A             		move.b	#0,$1A(a0)
00009182 303C 00A5                  		move.w	#$A5,d0
00009186 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
0000918C                            
0000918C                            Obj24_Animate:				; XREF: Obj24_Index
0000918C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009190 6A00                       		bpl.s	Obj24_Display
00009192 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009198 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000919C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000091A2 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000091A6                            
000091A6                            Obj24_Display:
000091A6 6000 0000                  		bra.w	DisplaySprite
000091AA                            ; ===========================================================================
000091AA                            ; ---------------------------------------------------------------------------
000091AA                            ; Object 27 - explosion	from a destroyed enemy
000091AA                            ; ---------------------------------------------------------------------------
000091AA                            
000091AA                            Obj27:					; XREF: Obj_Index
000091AA 7000                       		moveq	#0,d0
000091AC 1028 0024                  		move.b	$24(a0),d0
000091B0 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091B4 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B8                            ; ===========================================================================
000091B8 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091BA 0000                       		dc.w Obj27_Main-Obj27_Index
000091BC 0000                       		dc.w Obj27_Animate-Obj27_Index
000091BE                            ; ===========================================================================
000091BE                            
000091BE                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091BE 5428 0024                  		addq.b	#2,$24(a0)
000091C2 6100 0000                  		bsr.w	SingleObjLoad
000091C6 6600                       		bne.s	Obj27_Main
000091C8 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091CC 3368 0008 0008             		move.w	8(a0),8(a1)
000091D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D8 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091DE                            
000091DE                            Obj27_Main:				; XREF: Obj27_Index
000091DE 5428 0024                  		addq.b	#2,$24(a0)
000091E2 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091EA 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091F0 117C 0004 0001             		move.b	#4,1(a0)
000091F6 117C 0001 0018             		move.b	#1,$18(a0)
000091FC 117C 0000 0020             		move.b	#0,$20(a0)
00009202 117C 000C 0019             		move.b	#$C,$19(a0)
00009208                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009208 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
0000920E 117C 0000 001A             		move.b	#0,$1A(a0)
00009214 303C 00C1                  		move.w	#$C1,d0
00009218 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000921E                            
0000921E 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009224 1028 0028                  		move.b	$28(a0),d0
00009228 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
0000922E 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009234                            
00009234                            Obj27_Animate:				; XREF: Obj27_Index
00009234 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009238 6A00                       		bpl.s	Obj27_Display
0000923A                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000923A 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009240 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009244 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000924A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000924E                            
0000924E                            Obj27_Display:
0000924E 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009254 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000925A 6000 0000                  		bra.w	DisplaySprite
0000925E                            ; ===========================================================================
0000925E                            ; ---------------------------------------------------------------------------
0000925E                            Obj27_ExplosionXYSpd:
0000925E                            		; dc.w	-$350, -$300	; Left
0000925E                            		; dc.w	-$200, -$450	; Near middle (left)
0000925E                            		; dc.w	0, -$500	; Middle
0000925E                            		; dc.w	$200, -$450	; Near middle (right)
0000925E                            		; dc.w	$350, -$300	; Right
0000925E                            
0000925E FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009262 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009266 0000 FA00                  		dc.w	0, -$600	; Middle
0000926A 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
0000926E 0150 FC00                  		dc.w	$150, -$400	; Right
00009272                            
00009272 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
0000928C                            ; ---------------------------------------------------------------------------
0000928C                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000928C                            ; ---------------------------------------------------------------------------
0000928C                            
0000928C                            Obj3F:					; XREF: Obj_Index
0000928C 7000                       		moveq	#0,d0
0000928E 1028 0024                  		move.b	$24(a0),d0
00009292 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009296 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000929A                            ; ===========================================================================
0000929A 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000929C FF9A                       		dc.w Obj27_Animate-Obj3F_Index
0000929E                            ; ===========================================================================
0000929E                            
0000929E                            Obj3F_Main:				; XREF: Obj3F_Index
0000929E 5428 0024                  		addq.b	#2,$24(a0)
000092A2 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092AA 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092B0 117C 0004 0001             		move.b	#4,1(a0)
000092B6 117C 0001 0018             		move.b	#1,$18(a0)
000092BC 117C 0000 0020             		move.b	#0,$20(a0)
000092C2 117C 000C 0019             		move.b	#$C,$19(a0)
000092C8 117C 0007 001E             		move.b	#7,$1E(a0)
000092CE 117C 0000 001A             		move.b	#0,$1A(a0)
000092D4 303C 00C4                  		move.w	#$C4,d0
000092D8 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092DE                            ; ===========================================================================
000092DE                            Ani_obj1E:
000092DE                            	include "_anim\obj1E.asm"
000092DE                            ; ---------------------------------------------------------------------------
000092DE                            ; Animation script - doors (SBZ)
000092DE                            ; ---------------------------------------------------------------------------
000092DE 0000                       		dc.w byte_8E4A-Ani_obj1E
000092E0 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F8 00                         		even
000092F8 00                         		even
000092F8                            
000092F8                            ; ---------------------------------------------------------------------------
000092F8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F8                            ; ---------------------------------------------------------------------------
000092F8                            Map_obj1E:
000092F8                            	include "_maps\obj1E.asm"
000092F8                            ; ---------------------------------------------------------------------------
000092F8                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F8                            ; ---------------------------------------------------------------------------
000092F8 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092FC 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009300 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009304 02                         byte_8E6E:	dc.b 2
00009305 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930A FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000930F 02                         byte_8E79:	dc.b 2
00009310 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009315 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000931A 02                         byte_8E84:	dc.b 2
0000931B F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009320 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009325 02                         byte_8E8F:	dc.b 2
00009326 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000932B F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009330 01                         byte_8E9A:	dc.b 1
00009331 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009336 01                         byte_8EA0:	dc.b 1
00009337 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000933C                            		even
0000933C                            		even
0000933C                            
0000933C                            ; ---------------------------------------------------------------------------
0000933C                            ; Sprite mappings - explosion
0000933C                            ; ---------------------------------------------------------------------------
0000933C                            Map_obj24:
0000933C                            	include "_maps\obj24.asm"
0000933C                            ; ---------------------------------------------------------------------------
0000933C                            ; Sprite mappings - explosion
0000933C                            ; ---------------------------------------------------------------------------
0000933C 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009340 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009344 01                         byte_8EAE:	dc.b 1
00009345 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000934A 01                         byte_8EB4:	dc.b 1
0000934B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009350 01                         byte_8EBA:	dc.b 1
00009351 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009356 01                         byte_8EC0:	dc.b 1
00009357 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000935C                            		even
0000935C                            		even
0000935C                            
0000935C                            ; ---------------------------------------------------------------------------
0000935C                            ; Sprite mappings - explosion
0000935C                            ; ---------------------------------------------------------------------------
0000935C 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009360 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009364 0000                       		dc.w byte_8EF7-Map_obj27
00009366 01                         byte_8ED0:	dc.b 1
00009367 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000936C 01                         byte_8ED6:	dc.b 1
0000936D F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009372 01                         byte_8EDC:	dc.b 1
00009373 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009378 04                         byte_8EE2:	dc.b 4
00009379 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000937E EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009383 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009388 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000938D 04                         byte_8EF7:	dc.b 4
0000938E EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009393 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009398 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000939D FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000093A2                            		even
000093A2                            ; ---------------------------------------------------------------------------
000093A2                            ; Sprite mappings - explosion from when	a boss is destroyed
000093A2                            ; ---------------------------------------------------------------------------
000093A2 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000093A4 0000                       		dc.w byte_8F16-Map_obj3F
000093A6 0000                       		dc.w byte_8F1C-Map_obj3F
000093A8 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093AA FFEB                       		dc.w byte_8EF7-Map_obj3F
000093AC 01                         byte_8F16:	dc.b 1
000093AD F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093B2 01                         byte_8F1C:	dc.b 1
000093B3 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B8                            		even
000093B8                            ; ===========================================================================
000093B8                            ; ---------------------------------------------------------------------------
000093B8                            ; Object 28 - animals
000093B8                            ; ---------------------------------------------------------------------------
000093B8                            
000093B8                            Obj28:					; XREF: Obj_Index
000093B8 7000                       		moveq	#0,d0
000093BA 1028 0024                  		move.b	$24(a0),d0
000093BE 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093C2 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093C6                            ; ===========================================================================
000093C6 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093EA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093EE 0000                       		dc.w loc_92D6-Obj28_Index
000093F0                            
000093F0 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093FC                            
000093FC FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009400 0000 0000                  		dc.l Map_obj28
00009404 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009408 0000 0000                  		dc.l Map_obj28a		; mappings address
0000940C FE80 FD00                  		dc.w $FE80, $FD00
00009410 0000 0000                  		dc.l Map_obj28
00009414 FEC0 FE80                  		dc.w $FEC0, $FE80
00009418 0000 0000                  		dc.l Map_obj28a
0000941C FE40 FD00                  		dc.w $FE40, $FD00
00009420 0000 0000                  		dc.l Map_obj28b
00009424 FD00 FC00                  		dc.w $FD00, $FC00
00009428 0000 0000                  		dc.l Map_obj28a
0000942C FD80 FC80                  		dc.w $FD80, $FC80
00009430 0000 0000                  		dc.l Map_obj28b
00009434                            
00009434 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009444 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009454 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009460                            
00009460 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009474 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009488 0000 0000                  		dc.l Map_obj28b
0000948C                            
0000948C 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000949E 0565 05B3                  		dc.w $565, $5B3
000094A2                            ; ===========================================================================
000094A2                            
000094A2                            Obj28_Ending:				; XREF: Obj28_Index
000094A2 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000094A6 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094AA 7000                       		moveq	#0,d0
000094AC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094B0 D040                       		add.w	d0,d0		; multiply d0 by 2
000094B2 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094B6 0440 0014                  		subi.w	#$14,d0
000094BA 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094C0 D040                       		add.w	d0,d0
000094C2 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C8 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094CC 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094D2 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D8 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094DE 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094E4 117C 000C 0016             		move.b	#$C,$16(a0)
000094EA 117C 0004 0001             		move.b	#4,1(a0)
000094F0 08E8 0000 0001             		bset	#0,1(a0)
000094F6 117C 0006 0018             		move.b	#6,$18(a0)
000094FC 117C 0008 0019             		move.b	#8,$19(a0)
00009502 117C 0007 001E             		move.b	#7,$1E(a0)
00009508 6000 0000                  		bra.w	DisplaySprite
0000950C                            ; ===========================================================================
0000950C                            
0000950C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000950C 5428 0024                  		addq.b	#2,$24(a0)
00009510 6100 96EA                  		bsr.w	RandomNumber
00009514 0240 0001                  		andi.w	#1,d0
00009518 7200                       		moveq	#0,d1
0000951A 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000951E D241                       		add.w	d1,d1
00009520 D240                       		add.w	d0,d1
00009522 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009526 1031 1000                  		move.b	(a1,d1.w),d0
0000952A 1140 0030                  		move.b	d0,$30(a0)
0000952E E748                       		lsl.w	#3,d0
00009530 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009534 D2C0                       		adda.w	d0,a1
00009536 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000953A 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000953E 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009542 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009548 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000954E 6700                       		beq.s	loc_90C0	; if yes, branch
00009550 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009556                            
00009556                            loc_90C0:
00009556 117C 000C 0016             		move.b	#$C,$16(a0)
0000955C 117C 0004 0001             		move.b	#4,1(a0)
00009562 08E8 0000 0001             		bset	#0,1(a0)
00009568 117C 0006 0018             		move.b	#6,$18(a0)
0000956E 117C 0008 0019             		move.b	#8,$19(a0)
00009574 117C 0007 001E             		move.b	#7,$1E(a0)
0000957A 117C 0002 001A             		move.b	#2,$1A(a0)
00009580 317C FC00 0012             		move.w	#-$400,$12(a0)
00009586 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000958A 6600                       		bne.s	loc_911C
0000958C 6100 0000                  		bsr.w	SingleObjLoad
00009590 6600                       		bne.s	Obj28_Display
00009592 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009596 3368 0008 0008             		move.w	8(a0),8(a1)
0000959C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095A2 3028 003E                  		move.w	$3E(a0),d0
000095A6 E248                       		lsr.w	#1,d0
000095A8 1340 001A                  		move.b	d0,$1A(a1)
000095AC                            
000095AC                            Obj28_Display:
000095AC 6000 0000                  		bra.w	DisplaySprite
000095B0                            ; ===========================================================================
000095B0                            
000095B0                            loc_911C:
000095B0 117C 0012 0024             		move.b	#$12,$24(a0)
000095B6 4268 0010                  		clr.w	$10(a0)
000095BA 6000 0000                  		bra.w	DisplaySprite
000095BE                            ; ===========================================================================
000095BE                            
000095BE                            loc_912A:				; XREF: Obj28_Index
000095BE 4A28 0001                  		tst.b	1(a0)
000095C2 6A00 0000                  		bpl.w	DeleteObject
000095C6 6100 0000                  		bsr.w	ObjectFall
000095CA 4A68 0012                  		tst.w	$12(a0)
000095CE 6B00                       		bmi.s	loc_9180
000095D0 4EB9 0000 0000             		jsr	ObjHitFloor
000095D6 4A41                       		tst.w	d1
000095D8 6A00                       		bpl.s	loc_9180
000095DA D368 000C                  		add.w	d1,$C(a0)
000095DE 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095E4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095EA 117C 0001 001A             		move.b	#1,$1A(a0)
000095F0 1028 0030                  		move.b	$30(a0),d0
000095F4 D000                       		add.b	d0,d0
000095F6 5800                       		addq.b	#4,d0
000095F8 1140 0024                  		move.b	d0,$24(a0)
000095FC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009600 6700                       		beq.s	loc_9180
00009602 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009608 6700                       		beq.s	loc_9180
0000960A 4468 0010                  		neg.w	$10(a0)
0000960E 0868 0000 0001             		bchg	#0,1(a0)
00009614                            
00009614                            loc_9180:
00009614 6000 0000                  		bra.w	DisplaySprite
00009618                            ; ===========================================================================
00009618                            
00009618                            loc_9184:				; XREF: Obj28_Index
00009618 6100 0000                  		bsr.w	ObjectFall
0000961C 117C 0001 001A             		move.b	#1,$1A(a0)
00009622 4A68 0012                  		tst.w	$12(a0)
00009626 6B00                       		bmi.s	loc_91AE
00009628 117C 0000 001A             		move.b	#0,$1A(a0)
0000962E 4EB9 0000 0000             		jsr	ObjHitFloor
00009634 4A41                       		tst.w	d1
00009636 6A00                       		bpl.s	loc_91AE
00009638 D368 000C                  		add.w	d1,$C(a0)
0000963C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009642                            
00009642                            loc_91AE:
00009642 4A28 0028                  		tst.b	$28(a0)
00009646 6600                       		bne.s	loc_9224
00009648 4A28 0001                  		tst.b	1(a0)
0000964C 6A00 0000                  		bpl.w	DeleteObject
00009650 6000 0000                  		bra.w	DisplaySprite
00009654                            ; ===========================================================================
00009654                            
00009654                            loc_91C0:				; XREF: Obj28_Index
00009654 6100 0000                  		bsr.w	SpeedToPos
00009658 0668 0018 0012             		addi.w	#$18,$12(a0)
0000965E 4A68 0012                  		tst.w	$12(a0)
00009662 6B00                       		bmi.s	loc_91FC
00009664 4EB9 0000 0000             		jsr	ObjHitFloor
0000966A 4A41                       		tst.w	d1
0000966C 6A00                       		bpl.s	loc_91FC
0000966E D368 000C                  		add.w	d1,$C(a0)
00009672 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009678 4A28 0028                  		tst.b	$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009684 6700                       		beq.s	loc_91FC
00009686 4468 0010                  		neg.w	$10(a0)
0000968A 0868 0000 0001             		bchg	#0,1(a0)
00009690                            
00009690                            loc_91FC:
00009690 5328 001E                  		subq.b	#1,$1E(a0)
00009694 6A00                       		bpl.s	loc_9212
00009696 117C 0001 001E             		move.b	#1,$1E(a0)
0000969C 5228 001A                  		addq.b	#1,$1A(a0)
000096A0 0228 0001 001A             		andi.b	#1,$1A(a0)
000096A6                            
000096A6                            loc_9212:
000096A6 4A28 0028                  		tst.b	$28(a0)
000096AA 6600                       		bne.s	loc_9224
000096AC 4A28 0001                  		tst.b	1(a0)
000096B0 6A00 0000                  		bpl.w	DeleteObject
000096B4 6000 0000                  		bra.w	DisplaySprite
000096B8                            ; ===========================================================================
000096B8                            
000096B8                            loc_9224:				; XREF: Obj28_Index
000096B8 3028 0008                  		move.w	8(a0),d0
000096BC 9078 D008                  		sub.w	($FFFFD008).w,d0
000096C0 6500                       		bcs.s	loc_923C
000096C2 0440 0180                  		subi.w	#$180,d0
000096C6 6A00                       		bpl.s	loc_923C
000096C8 4A28 0001                  		tst.b	1(a0)
000096CC 6A00 0000                  		bpl.w	DeleteObject
000096D0                            
000096D0                            loc_923C:
000096D0 6000 0000                  		bra.w	DisplaySprite
000096D4                            ; ===========================================================================
000096D4                            
000096D4                            loc_9240:				; XREF: Obj28_Index
000096D4 4A28 0001                  		tst.b	1(a0)
000096D8 6A00 0000                  		bpl.w	DeleteObject
000096DC 5368 0036                  		subq.w	#1,$36(a0)
000096E0 6600 0000                  		bne.w	loc_925C
000096E4 117C 0002 0024             		move.b	#2,$24(a0)
000096EA 117C 0003 0018             		move.b	#3,$18(a0)
000096F0                            
000096F0                            loc_925C:
000096F0 6000 0000                  		bra.w	DisplaySprite
000096F4                            ; ===========================================================================
000096F4                            
000096F4                            loc_9260:				; XREF: Obj28_Index
000096F4 6100 0000                  		bsr.w	sub_9404
000096F8 6400                       		bcc.s	loc_927C
000096FA 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009700 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009706 117C 000E 0024             		move.b	#$E,$24(a0)
0000970C 6000 FF46                  		bra.w	loc_91C0
00009710                            ; ===========================================================================
00009710                            
00009710                            loc_927C:
00009710 6000 FFA6                  		bra.w	loc_9224
00009714                            ; ===========================================================================
00009714                            
00009714                            loc_9280:				; XREF: Obj28_Index
00009714 6100 0000                  		bsr.w	sub_9404
00009718 6A00                       		bpl.s	loc_92B6
0000971A 4268 0010                  		clr.w	$10(a0)
0000971E 4268 0032                  		clr.w	$32(a0)
00009722 6100 0000                  		bsr.w	SpeedToPos
00009726 0668 0018 0012             		addi.w	#$18,$12(a0)
0000972C 6100 0000                  		bsr.w	loc_93C4
00009730 6100 0000                  		bsr.w	loc_93EC
00009734 5328 001E                  		subq.b	#1,$1E(a0)
00009738 6A00                       		bpl.s	loc_92B6
0000973A 117C 0001 001E             		move.b	#1,$1E(a0)
00009740 5228 001A                  		addq.b	#1,$1A(a0)
00009744 0228 0001 001A             		andi.b	#1,$1A(a0)
0000974A                            
0000974A                            loc_92B6:
0000974A 6000 FF6C                  		bra.w	loc_9224
0000974E                            ; ===========================================================================
0000974E                            
0000974E                            loc_92BA:				; XREF: Obj28_Index
0000974E 6100 0000                  		bsr.w	sub_9404
00009752 6A00                       		bpl.s	loc_9310
00009754 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000975A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009760 117C 0004 0024             		move.b	#4,$24(a0)
00009766 6000 FEB0                  		bra.w	loc_9184
0000976A                            ; ===========================================================================
0000976A                            
0000976A                            loc_92D6:				; XREF: Obj28_Index
0000976A 6100 0000                  		bsr.w	ObjectFall
0000976E 117C 0001 001A             		move.b	#1,$1A(a0)
00009774 4A68 0012                  		tst.w	$12(a0)
00009778 6B00                       		bmi.s	loc_9310
0000977A 117C 0000 001A             		move.b	#0,$1A(a0)
00009780 4EB9 0000 0000             		jsr	ObjHitFloor
00009786 4A41                       		tst.w	d1
00009788 6A00                       		bpl.s	loc_9310
0000978A 4628 0029                  		not.b	$29(a0)
0000978E 6600                       		bne.s	loc_9306
00009790 4468 0010                  		neg.w	$10(a0)
00009794 0868 0000 0001             		bchg	#0,1(a0)
0000979A                            
0000979A                            loc_9306:
0000979A D368 000C                  		add.w	d1,$C(a0)
0000979E 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097A4                            
000097A4                            loc_9310:
000097A4 6000 FF12                  		bra.w	loc_9224
000097A8                            ; ===========================================================================
000097A8                            
000097A8                            loc_9314:				; XREF: Obj28_Index
000097A8 6100 0000                  		bsr.w	sub_9404
000097AC 6A00                       		bpl.s	loc_932E
000097AE 4268 0010                  		clr.w	$10(a0)
000097B2 4268 0032                  		clr.w	$32(a0)
000097B6 6100 0000                  		bsr.w	ObjectFall
000097BA 6100 0000                  		bsr.w	loc_93C4
000097BE 6100 0000                  		bsr.w	loc_93EC
000097C2                            
000097C2                            loc_932E:
000097C2 6000 FEF4                  		bra.w	loc_9224
000097C6                            ; ===========================================================================
000097C6                            
000097C6                            loc_9332:				; XREF: Obj28_Index
000097C6 6100 0000                  		bsr.w	sub_9404
000097CA 6A00                       		bpl.s	loc_936C
000097CC 6100 0000                  		bsr.w	ObjectFall
000097D0 117C 0001 001A             		move.b	#1,$1A(a0)
000097D6 4A68 0012                  		tst.w	$12(a0)
000097DA 6B00                       		bmi.s	loc_936C
000097DC 117C 0000 001A             		move.b	#0,$1A(a0)
000097E2 4EB9 0000 0000             		jsr	ObjHitFloor
000097E8 4A41                       		tst.w	d1
000097EA 6A00                       		bpl.s	loc_936C
000097EC 4468 0010                  		neg.w	$10(a0)
000097F0 0868 0000 0001             		bchg	#0,1(a0)
000097F6 D368 000C                  		add.w	d1,$C(a0)
000097FA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009800                            
00009800                            loc_936C:
00009800 6000 FEB6                  		bra.w	loc_9224
00009804                            ; ===========================================================================
00009804                            
00009804                            loc_9370:				; XREF: Obj28_Index
00009804 6100 0000                  		bsr.w	sub_9404
00009808 6A00                       		bpl.s	loc_93C0
0000980A 6100 0000                  		bsr.w	SpeedToPos
0000980E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009814 4A68 0012                  		tst.w	$12(a0)
00009818 6B00                       		bmi.s	loc_93AA
0000981A 4EB9 0000 0000             		jsr	ObjHitFloor
00009820 4A41                       		tst.w	d1
00009822 6A00                       		bpl.s	loc_93AA
00009824 4628 0029                  		not.b	$29(a0)
00009828 6600                       		bne.s	loc_93A0
0000982A 4468 0010                  		neg.w	$10(a0)
0000982E 0868 0000 0001             		bchg	#0,1(a0)
00009834                            
00009834                            loc_93A0:
00009834 D368 000C                  		add.w	d1,$C(a0)
00009838 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000983E                            
0000983E                            loc_93AA:
0000983E 5328 001E                  		subq.b	#1,$1E(a0)
00009842 6A00                       		bpl.s	loc_93C0
00009844 117C 0001 001E             		move.b	#1,$1E(a0)
0000984A 5228 001A                  		addq.b	#1,$1A(a0)
0000984E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009854                            
00009854                            loc_93C0:
00009854 6000 FE62                  		bra.w	loc_9224
00009858                            ; ===========================================================================
00009858                            
00009858                            loc_93C4:
00009858 117C 0001 001A             		move.b	#1,$1A(a0)
0000985E 4A68 0012                  		tst.w	$12(a0)
00009862 6B00                       		bmi.s	locret_93EA
00009864 117C 0000 001A             		move.b	#0,$1A(a0)
0000986A 4EB9 0000 0000             		jsr	ObjHitFloor
00009870 4A41                       		tst.w	d1
00009872 6A00                       		bpl.s	locret_93EA
00009874 D368 000C                  		add.w	d1,$C(a0)
00009878 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000987E                            
0000987E                            locret_93EA:
0000987E 4E75                       		rts	
00009880                            ; ===========================================================================
00009880                            
00009880                            loc_93EC:
00009880 08E8 0000 0001             		bset	#0,1(a0)
00009886 3028 0008                  		move.w	8(a0),d0
0000988A 9078 D008                  		sub.w	($FFFFD008).w,d0
0000988E 6400                       		bcc.s	locret_9402
00009890 08A8 0000 0001             		bclr	#0,1(a0)
00009896                            
00009896                            locret_9402:
00009896 4E75                       		rts	
00009898                            
00009898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009898                            
00009898                            
00009898                            sub_9404:
00009898 3038 D008                  		move.w	($FFFFD008).w,d0
0000989C 9068 0008                  		sub.w	8(a0),d0
000098A0 0440 00B8                  		subi.w	#$B8,d0
000098A4 4E75                       		rts	
000098A6                            ; End of function sub_9404
000098A6                            
000098A6                            ; ===========================================================================
000098A6                            ; ---------------------------------------------------------------------------
000098A6                            ; Object 29 - points that appear when you destroy something
000098A6                            ; ---------------------------------------------------------------------------
000098A6                            
000098A6                            Obj29:					; XREF: Obj_Index
000098A6 7000                       		moveq	#0,d0
000098A8 1028 0024                  		move.b	$24(a0),d0
000098AC 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098B0 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098B4 6000 0000                  		bra.w	DisplaySprite
000098B8                            ; ===========================================================================
000098B8 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098BA 0000                       		dc.w Obj29_Slower-Obj29_Index
000098BC                            ; ===========================================================================
000098BC                            
000098BC                            Obj29_Main:				; XREF: Obj29_Index
000098BC 5428 0024                  		addq.b	#2,$24(a0)
000098C0 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C8 317C 2797 0002             		move.w	#$2797,2(a0)
000098CE 117C 0004 0001             		move.b	#4,1(a0)
000098D4 117C 0001 0018             		move.b	#1,$18(a0)
000098DA 117C 0008 0019             		move.b	#8,$19(a0)
000098E0 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098E6                            
000098E6                            Obj29_Slower:				; XREF: Obj29_Index
000098E6 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098EA 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098EE 6100 0000                  		bsr.w	SpeedToPos
000098F2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F8 4E75                       		rts	
000098FA                            ; ===========================================================================
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Sprite mappings - animals
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            Map_obj28:
000098FA                            	include "_maps\obj28.asm"
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Sprite mappings - animals
000098FA                            ; ---------------------------------------------------------------------------
000098FA 0000                       		dc.w byte_9472-Map_obj28
000098FC 0000                       		dc.w byte_9478-Map_obj28
000098FE 0000                       		dc.w byte_946C-Map_obj28
00009900 01                         byte_946C:	dc.b 1
00009901 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009906 01                         byte_9472:	dc.b 1
00009907 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000990C 01                         byte_9478:	dc.b 1
0000990D F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009912                            		even
00009912                            		even
00009912                            
00009912                            Map_obj28a:
00009912                            	include "_maps\obj28a.asm"
00009912                            ; ---------------------------------------------------------------------------
00009912                            ; Sprite mappings - animals
00009912                            ; ---------------------------------------------------------------------------
00009912 0000                       		dc.w byte_948A-Map_obj28a
00009914 0000                       		dc.w byte_9490-Map_obj28a
00009916 0000                       		dc.w byte_9484-Map_obj28a
00009918 01                         byte_9484:	dc.b 1
00009919 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000991E 01                         byte_948A:	dc.b 1
0000991F FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009924 01                         byte_9490:	dc.b 1
00009925 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000992A                            		even
0000992A                            		even
0000992A                            
0000992A                            Map_obj28b:
0000992A                            	include "_maps\obj28b.asm"
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            ; Sprite mappings - animals
0000992A                            ; ---------------------------------------------------------------------------
0000992A 0000                       		dc.w byte_94A2-Map_obj28b
0000992C 0000                       		dc.w byte_94A8-Map_obj28b
0000992E 0000                       		dc.w byte_949C-Map_obj28b
00009930 01                         byte_949C:	dc.b 1
00009931 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009936 01                         byte_94A2:	dc.b 1
00009937 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000993C 01                         byte_94A8:	dc.b 1
0000993D FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009942                            		even
00009942                            		even
00009942                            
00009942                            ; ---------------------------------------------------------------------------
00009942                            ; Sprite mappings - points that	appear when you	destroy	something
00009942                            ; ---------------------------------------------------------------------------
00009942                            Map_obj29:
00009942                            	include "_maps\obj29.asm"
00009942                            ; ---------------------------------------------------------------------------
00009942                            ; Sprite mappings - points that	appear when you	destroy	something
00009942                            ; ---------------------------------------------------------------------------
00009942 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009946 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000994A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000994E 0000                       		dc.w byte_94E5-Map_obj29
00009950 01                         byte_94BC:	dc.b 1
00009951 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009956 01                         byte_94C2:	dc.b 1
00009957 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000995C 01                         byte_94C8:	dc.b 1
0000995D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009962 01                         byte_94CE:	dc.b 1
00009963 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009968 01                         byte_94D4:	dc.b 1
00009969 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000996E 02                         byte_94DA:	dc.b 2
0000996F FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009974 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009979 02                         byte_94E5:	dc.b 2
0000997A FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000997F FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009984                            		even
00009984                            		even
00009984                            
00009984                            ; ===========================================================================
00009984                            ; ---------------------------------------------------------------------------
00009984                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009984                            ; ---------------------------------------------------------------------------
00009984                            
00009984                            Obj1F:					; XREF: Obj_Index
00009984 7000                       		moveq	#0,d0
00009986 1028 0024                  		move.b	$24(a0),d0
0000998A 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000998E 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009992                            ; ===========================================================================
00009992 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009994 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009996 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009998 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000999A 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000999C                            ; ===========================================================================
0000999C                            
0000999C                            Obj1F_Main:				; XREF: Obj1F_Index
0000999C 117C 0010 0016             		move.b	#$10,$16(a0)
000099A2 117C 0008 0017             		move.b	#8,$17(a0)
000099A8 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099B0 317C 0400 0002             		move.w	#$400,2(a0)
000099B6 117C 0004 0001             		move.b	#4,1(a0)
000099BC 117C 0003 0018             		move.b	#3,$18(a0)
000099C2 117C 0006 0020             		move.b	#6,$20(a0)
000099C8 117C 0015 0019             		move.b	#$15,$19(a0)
000099CE 6100 0000                  		bsr.w	ObjectFall
000099D2 4EB9 0000 0000             		jsr	ObjHitFloor
000099D8 4A41                       		tst.w	d1
000099DA 6A00                       		bpl.s	locret_955A
000099DC D368 000C                  		add.w	d1,$C(a0)
000099E0 1143 0026                  		move.b	d3,$26(a0)
000099E4 317C 0000 0012             		move.w	#0,$12(a0)
000099EA 5428 0024                  		addq.b	#2,$24(a0)
000099EE                            
000099EE                            locret_955A:
000099EE 4E75                       		rts	
000099F0                            ; ===========================================================================
000099F0                            
000099F0                            Obj1F_Action:				; XREF: Obj1F_Index
000099F0 7000                       		moveq	#0,d0
000099F2 1028 0025                  		move.b	$25(a0),d0
000099F6 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099FA 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099FE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009A04 6100 0000                  		bsr.w	AnimateSprite
00009A08 6000 0000                  		bra.w	MarkObjGone
00009A0C                            ; ===========================================================================
00009A0C 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A0E 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A10                            ; ===========================================================================
00009A10                            
00009A10                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A10 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A14 6A00                       		bpl.s	locret_95B6
00009A16 4A28 0001                  		tst.b	1(a0)
00009A1A 6A00                       		bpl.s	Obj1F_Move
00009A1C 0868 0001 0032             		bchg	#1,$32(a0)
00009A22 6600                       		bne.s	Obj1F_MakeFire
00009A24                            
00009A24                            Obj1F_Move:
00009A24 5428 0025                  		addq.b	#2,$25(a0)
00009A28 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A2E 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A34 6100 0000                  		bsr.w	Obj1F_SetAni
00009A38 5600                       		addq.b	#3,d0
00009A3A 1140 001C                  		move.b	d0,$1C(a0)
00009A3E 0868 0000 0022             		bchg	#0,$22(a0)
00009A44 6600                       		bne.s	locret_95B6
00009A46 4468 0010                  		neg.w	$10(a0)		; change direction
00009A4A                            
00009A4A                            locret_95B6:
00009A4A 4E75                       		rts	
00009A4C                            ; ===========================================================================
00009A4C                            
00009A4C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A4C 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A52 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A58 6100 0000                  		bsr.w	SingleObjLoad
00009A5C 6600                       		bne.s	Obj1F_MakeFire2
00009A5E 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A62 137C 0006 0024             		move.b	#6,$24(a1)
00009A68 3368 0008 0008             		move.w	8(a0),8(a1)
00009A6E 0469 0010 0008             		subi.w	#$10,8(a1)
00009A74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A7A 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A80                            
00009A80                            Obj1F_MakeFire2:
00009A80 6100 0000                  		bsr.w	SingleObjLoad
00009A84 6600                       		bne.s	locret_9618
00009A86 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A8A 137C 0006 0024             		move.b	#6,$24(a1)
00009A90 3368 0008 0008             		move.w	8(a0),8(a1)
00009A96 0669 0010 0008             		addi.w	#$10,8(a1)
00009A9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009AA2 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA8                            
00009AA8                            locret_9618:
00009AA8 4E75                       		rts	
00009AAA                            ; ===========================================================================
00009AAA                            
00009AAA                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AAA 5368 0030                  		subq.w	#1,$30(a0)
00009AAE 6B00                       		bmi.s	loc_966E
00009AB0 6100 0000                  		bsr.w	SpeedToPos
00009AB4 0868 0000 0032             		bchg	#0,$32(a0)
00009ABA 6600                       		bne.s	loc_9654
00009ABC 3628 0008                  		move.w	8(a0),d3
00009AC0 0643 0010                  		addi.w	#$10,d3
00009AC4 0828 0000 0022             		btst	#0,$22(a0)
00009ACA 6700                       		beq.s	loc_9640
00009ACC 0443 0020                  		subi.w	#$20,d3
00009AD0                            
00009AD0                            loc_9640:
00009AD0 4EB9 0000 0000             		jsr	ObjHitFloor2
00009AD6 0C41 FFF8                  		cmpi.w	#-8,d1
00009ADA 6D00                       		blt.s	loc_966E
00009ADC 0C41 000C                  		cmpi.w	#$C,d1
00009AE0 6C00                       		bge.s	loc_966E
00009AE2 4E75                       		rts	
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009AE4 4EB9 0000 0000             		jsr	ObjHitFloor
00009AEA D368 000C                  		add.w	d1,$C(a0)
00009AEE 1143 0026                  		move.b	d3,$26(a0)
00009AF2 6100 0000                  		bsr.w	Obj1F_SetAni
00009AF6 5600                       		addq.b	#3,d0
00009AF8 1140 001C                  		move.b	d0,$1C(a0)
00009AFC 4E75                       		rts	
00009AFE                            ; ===========================================================================
00009AFE                            
00009AFE                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AFE 5528 0025                  		subq.b	#2,$25(a0)
00009B02 317C 003B 0030             		move.w	#59,$30(a0)
00009B08 317C 0000 0010             		move.w	#0,$10(a0)
00009B0E 6100 0000                  		bsr.w	Obj1F_SetAni
00009B12 1140 001C                  		move.b	d0,$1C(a0)
00009B16 4E75                       		rts	
00009B18                            ; ---------------------------------------------------------------------------
00009B18                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B18                            ; ---------------------------------------------------------------------------
00009B18                            
00009B18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B18                            
00009B18                            
00009B18                            Obj1F_SetAni:				; XREF: loc_966E
00009B18 7000                       		moveq	#0,d0
00009B1A 1628 0026                  		move.b	$26(a0),d3
00009B1E 6B00                       		bmi.s	loc_96A4
00009B20 0C03 0006                  		cmpi.b	#6,d3
00009B24 6500                       		bcs.s	locret_96A2
00009B26 7001                       		moveq	#1,d0
00009B28 0828 0000 0022             		btst	#0,$22(a0)
00009B2E 6600                       		bne.s	locret_96A2
00009B30 7002                       		moveq	#2,d0
00009B32                            
00009B32                            locret_96A2:
00009B32 4E75                       		rts	
00009B34                            ; ===========================================================================
00009B34                            
00009B34                            loc_96A4:				; XREF: Obj1F_SetAni
00009B34 0C03 00FA                  		cmpi.b	#-6,d3
00009B38 6200                       		bhi.s	locret_96B6
00009B3A 7002                       		moveq	#2,d0
00009B3C 0828 0000 0022             		btst	#0,$22(a0)
00009B42 6600                       		bne.s	locret_96B6
00009B44 7001                       		moveq	#1,d0
00009B46                            
00009B46                            locret_96B6:
00009B46 4E75                       		rts	
00009B48                            ; End of function Obj1F_SetAni
00009B48                            
00009B48                            ; ===========================================================================
00009B48                            
00009B48                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B48 6100 0000                  		bsr.w	DeleteObject
00009B4C 4E75                       		rts	
00009B4E                            ; ===========================================================================
00009B4E                            ; ---------------------------------------------------------------------------
00009B4E                            ; Sub-object - missile that the	Crabmeat throws
00009B4E                            ; ---------------------------------------------------------------------------
00009B4E                            
00009B4E                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B4E 5428 0024                  		addq.b	#2,$24(a0)
00009B52 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B5A 317C 0400 0002             		move.w	#$400,2(a0)
00009B60 117C 0004 0001             		move.b	#4,1(a0)
00009B66 117C 0003 0018             		move.b	#3,$18(a0)
00009B6C 117C 0087 0020             		move.b	#$87,$20(a0)
00009B72 117C 0008 0019             		move.b	#8,$19(a0)
00009B78 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B7E 117C 0007 001C             		move.b	#7,$1C(a0)
00009B84                            
00009B84                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B84 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B8A 6100 0000                  		bsr.w	AnimateSprite
00009B8E 6100 0000                  		bsr.w	ObjectFall
00009B92 6100 0000                  		bsr.w	DisplaySprite
00009B96 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B9A 0640 00E0                  		addi.w	#$E0,d0
00009B9E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009BA2 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009BA4 4E75                       		rts	
00009BA6                            ; ===========================================================================
00009BA6                            
00009BA6                            Obj1F_Delete2:
00009BA6 6000 0000                  		bra.w	DeleteObject
00009BAA                            ; ===========================================================================
00009BAA                            Ani_obj1F:
00009BAA                            	include "_anim\obj1F.asm"
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA                            ; Animation script - Crabmeat enemy
00009BAA                            ; ---------------------------------------------------------------------------
00009BAA 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BB0 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BB6 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BBA 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BBE 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BC2 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BC6 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BCC 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BD2 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD8 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BDC 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BE0                            		even
00009BE0                            		even
00009BE0                            
00009BE0                            ; ---------------------------------------------------------------------------
00009BE0                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BE0                            ; ---------------------------------------------------------------------------
00009BE0                            Map_obj1F:
00009BE0                            	include "_maps\obj1F.asm"
00009BE0                            Map_1514:
00009BE0 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009BE2 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009BE4 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009BE6 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009BE8 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009BEA 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009BEC 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009BEE 03                         Map_1514_E: 	dc.b $3
00009BEF F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BF4 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BF9 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BFE 03                         Map_1514_1E: 	dc.b $3
00009BFF F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C04 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C09 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C0E 03                         Map_1514_2E: 	dc.b $3
00009C0F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C14 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C19 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C1E 03                         Map_1514_3E: 	dc.b $3
00009C1F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C24 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C29 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C2E 03                         Map_1514_4E: 	dc.b $3
00009C2F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C34 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C39 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C3E 01                         Map_1514_5E: 	dc.b $1
00009C3F F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C44 01                         Map_1514_64: 	dc.b $1
00009C45 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009C4A                            	even
00009C4A                            	even
00009C4A                            
00009C4A                            ; ===========================================================================
00009C4A                            ; ---------------------------------------------------------------------------
00009C4A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C4A                            ; ---------------------------------------------------------------------------
00009C4A                            
00009C4A                            Obj22:					; XREF: Obj_Index
00009C4A 7000                       		moveq	#0,d0
00009C4C 1028 0024                  		move.b	$24(a0),d0
00009C50 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C54 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C58                            ; ===========================================================================
00009C58 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C5A 0000                       		dc.w Obj22_Action-Obj22_Index
00009C5C 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C5E                            ; ===========================================================================
00009C5E                            
00009C5E                            Obj22_Main:				; XREF: Obj22_Index
00009C5E 5428 0024                  		addq.b	#2,$24(a0)
00009C62 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C6A 317C 0444 0002             		move.w	#$444,2(a0)
00009C70 117C 0004 0001             		move.b	#4,1(a0)
00009C76 117C 0003 0018             		move.b	#3,$18(a0)
00009C7C 117C 0008 0020             		move.b	#8,$20(a0)
00009C82 117C 0018 0019             		move.b	#$18,$19(a0)
00009C88                            
00009C88                            Obj22_Action:				; XREF: Obj22_Index
00009C88 7000                       		moveq	#0,d0
00009C8A 1028 0025                  		move.b	$25(a0),d0
00009C8E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C92 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C96 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C9C 6100 0000                  		bsr.w	AnimateSprite
00009CA0 6000 0000                  		bra.w	MarkObjGone
00009CA4                            ; ===========================================================================
00009CA4 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009CA6 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            Obj22_Move:				; XREF: Obj22_Index2
00009CA8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CAC 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CAE 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CB4 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CB6 5428 0025                  		addq.b	#2,$25(a0)
00009CBA 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CC0 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CC6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CCC 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CD2 6600                       		bne.s	locret_986C	; if not, branch
00009CD4 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CD8                            
00009CD8                            locret_986C:
00009CD8 4E75                       		rts	
00009CDA                            ; ===========================================================================
00009CDA                            
00009CDA                            Obj22_Fire:				; XREF: Obj22_Move
00009CDA 6100 0000                  		bsr.w	SingleObjLoad
00009CDE 6600                       		bne.s	locret_98D0
00009CE0 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009CE4 3368 0008 0008             		move.w	8(a0),8(a1)
00009CEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CF0 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009CF6 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009CFC 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D02 303C 0018                  		move.w	#$18,d0
00009D06 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D0C 6600                       		bne.s	loc_98AA	; if not, branch
00009D0E 4440                       		neg.w	d0
00009D10 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D14                            
00009D14                            loc_98AA:
00009D14 D169 0008                  		add.w	d0,8(a1)
00009D18 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D1E 337C 000E 0032             		move.w	#$E,$32(a1)
00009D24 2348 003C                  		move.l	a0,$3C(a1)
00009D28 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D2E 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D34 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D3A                            
00009D3A                            locret_98D0:
00009D3A 4E75                       		rts	
00009D3C                            ; ===========================================================================
00009D3C                            
00009D3C                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D3C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D40 6B00                       		bmi.s	Obj22_ChgDir
00009D42 6100 0000                  		bsr.w	SpeedToPos
00009D46 4A28 0034                  		tst.b	$34(a0)
00009D4A 6600                       		bne.s	locret_992A
00009D4C 3038 D008                  		move.w	($FFFFD008).w,d0
00009D50 9068 0008                  		sub.w	8(a0),d0
00009D54 6A00                       		bpl.s	Obj22_SetNrSonic
00009D56 4440                       		neg.w	d0
00009D58                            
00009D58                            Obj22_SetNrSonic:
00009D58 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D5C 6400                       		bcc.s	locret_992A	; if not, branch
00009D5E 4A28 0001                  		tst.b	1(a0)
00009D62 6A00                       		bpl.s	locret_992A
00009D64 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D6A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D70 6000                       		bra.s	Obj22_Stop
00009D72                            ; ===========================================================================
00009D72                            
00009D72                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D72 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D78 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D7E 317C 003B 0032             		move.w	#59,$32(a0)
00009D84                            
00009D84                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009D84 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D88 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D94                            
00009D94                            locret_992A:
00009D94 4E75                       		rts	
00009D96                            ; ===========================================================================
00009D96                            
00009D96                            Obj22_Delete:				; XREF: Obj22_Index
00009D96 6100 0000                  		bsr.w	DeleteObject
00009D9A 4E75                       		rts	
00009D9C                            ; ===========================================================================
00009D9C                            ; ---------------------------------------------------------------------------
00009D9C                            ; Object 23 - missile that Buzz	Bomber throws
00009D9C                            ; ---------------------------------------------------------------------------
00009D9C                            
00009D9C                            Obj23:					; XREF: Obj_Index
00009D9C 7000                       		moveq	#0,d0
00009D9E 1028 0024                  		move.b	$24(a0),d0
00009DA2 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009DA6 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DAA                            ; ===========================================================================
00009DAA 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DAC 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DAE 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DB0 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DB2 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            Obj23_Main:				; XREF: Obj23_Index
00009DB4 5368 0032                  		subq.w	#1,$32(a0)
00009DB8 6A00                       		bpl.s	Obj23_ChkCancel
00009DBA 5428 0024                  		addq.b	#2,$24(a0)
00009DBE 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DC6 317C 2444 0002             		move.w	#$2444,2(a0)
00009DCC 117C 0004 0001             		move.b	#4,1(a0)
00009DD2 117C 0003 0018             		move.b	#3,$18(a0)
00009DD8 117C 0008 0019             		move.b	#8,$19(a0)
00009DDE 0228 0003 0022             		andi.b	#3,$22(a0)
00009DE4 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009DE8 6700                       		beq.s	Obj23_Animate	; if not, branch
00009DEA 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009DF0 117C 0087 0020             		move.b	#$87,$20(a0)
00009DF6 117C 0001 001C             		move.b	#1,$1C(a0)
00009DFC 6000                       		bra.s	Obj23_Animate2
00009DFE                            ; ===========================================================================
00009DFE                            
00009DFE                            Obj23_Animate:				; XREF: Obj23_Index
00009DFE 6100                       		bsr.s	Obj23_ChkCancel
00009E00 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E06 6100 0000                  		bsr.w	AnimateSprite
00009E0A 6000 0000                  		bra.w	DisplaySprite
00009E0E                            ; ---------------------------------------------------------------------------
00009E0E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E0E                            ; destroyed, and if it has, then cancel	the missile
00009E0E                            ; ---------------------------------------------------------------------------
00009E0E                            
00009E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E0E                            
00009E0E                            
00009E0E                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E0E 2268 003C                  		movea.l	$3C(a0),a1
00009E12 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E16 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E18 4E75                       		rts	
00009E1A                            ; End of function Obj23_ChkCancel
00009E1A                            
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E1A 0828 0007 0022             		btst	#7,$22(a0)
00009E20 6600                       		bne.s	Obj23_Explode
00009E22 117C 0087 0020             		move.b	#$87,$20(a0)
00009E28 117C 0001 001C             		move.b	#1,$1C(a0)
00009E2E 6100 0000                  		bsr.w	SpeedToPos
00009E32 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E38 6100 0000                  		bsr.w	AnimateSprite
00009E3C 6100 0000                  		bsr.w	DisplaySprite
00009E40 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E44 0640 00E0                  		addi.w	#$E0,d0
00009E48 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E4C 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E4E 4E75                       		rts	
00009E50                            ; ===========================================================================
00009E50                            
00009E50                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E50 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E54 117C 0000 0024             		move.b	#0,$24(a0)
00009E5A 6000 F2DE                  		bra.w	Obj24
00009E5E                            ; ===========================================================================
00009E5E                            
00009E5E                            Obj23_Delete:				; XREF: Obj23_Index
00009E5E 6100 0000                  		bsr.w	DeleteObject
00009E62 4E75                       		rts	
00009E64                            ; ===========================================================================
00009E64                            
00009E64                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E64 4A28 0001                  		tst.b	1(a0)
00009E68 6AF4                       		bpl.s	Obj23_Delete
00009E6A 6100 0000                  		bsr.w	SpeedToPos
00009E6E                            
00009E6E                            Obj23_Animate2:				; XREF: Obj23_Main
00009E6E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E74 6100 0000                  		bsr.w	AnimateSprite
00009E78 6100 0000                  		bsr.w	DisplaySprite
00009E7C 4E75                       		rts	
00009E7E                            ; ===========================================================================
00009E7E                            Ani_obj22:
00009E7E                            	include "_anim\obj22.asm"
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E                            ; Animation script - Buzz Bomber enemy
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E 0000                       		dc.w byte_9A1E-Ani_obj22
00009E80 0000                       		dc.w byte_9A22-Ani_obj22
00009E82 0000                       		dc.w byte_9A26-Ani_obj22
00009E84 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E88 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E8C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E90                            		even
00009E90                            		even
00009E90                            
00009E90                            Ani_obj23:
00009E90                            	include "_anim\obj23.asm"
00009E90                            ; ---------------------------------------------------------------------------
00009E90                            ; Animation script - missile that Buzz Bomber throws
00009E90                            ; ---------------------------------------------------------------------------
00009E90 0000                       		dc.w byte_9A2E-Ani_obj23
00009E92 0000                       		dc.w byte_9A32-Ani_obj23
00009E94 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E98 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E9C                            		even
00009E9C                            		even
00009E9C                            
00009E9C                            ; ---------------------------------------------------------------------------
00009E9C                            ; Sprite mappings - Buzz Bomber	enemy
00009E9C                            ; ---------------------------------------------------------------------------
00009E9C                            Map_obj22:
00009E9C                            	include "_maps\obj22.asm"
00009E9C                            Map_e97a:
00009E9C 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E9E 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009EA0 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009EA2 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009EA4 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009EA6 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EA8 06                         Map_e97a_C: 	dc.b $6
00009EA9 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EAE F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EB3 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EB8 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EBD F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EC2 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EC7 06                         Map_e97a_2B: 	dc.b $6
00009EC8 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009ECD F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ED2 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ED7 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EDC F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009EE1 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EE6 07                         Map_e97a_4A: 	dc.b $7
00009EE7 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009EEC F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EF1 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EF6 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EFB 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F00 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F05 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F0A 07                         Map_e97a_6E: 	dc.b $7
00009F0B 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F10 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F15 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F1A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F1F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F24 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F29 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F2E 06                         Map_e97a_92: 	dc.b $6
00009F2F F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F34 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F39 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F3E 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F43 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F48 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F4D 04                         Map_e97a_B1: 	dc.b $4
00009F4E F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F53 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F58 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F5D 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F62                            	even
00009F62                            	even
00009F62                            
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Sprite mappings - missile that Buzz Bomber throws
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            Map_obj23:
00009F62                            	include "_maps\obj23.asm"
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Sprite mappings - missile that Buzz Bomber throws
00009F62                            ; ---------------------------------------------------------------------------
00009F62 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F66 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F6A 01                         byte_9B0E:	dc.b 1
00009F6B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F70 01                         byte_9B14:	dc.b 1
00009F71 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F76 01                         byte_9B1A:	dc.b 1
00009F77 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F7C 01                         byte_9B20:	dc.b 1
00009F7D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F82                            		even
00009F82                            		even
00009F82                            
00009F82                            ; ===========================================================================
00009F82                            ; ---------------------------------------------------------------------------
00009F82                            ; Object 25 - rings
00009F82                            ; ---------------------------------------------------------------------------
00009F82                            
00009F82                            Obj25:					; XREF: Obj_Index
00009F82 7000                       		moveq	#0,d0
00009F84 1028 0024                  		move.b	$24(a0),d0
00009F88 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F8C 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F90                            ; ===========================================================================
00009F90 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F92 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F94 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F96 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F98 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F9A                            ; ---------------------------------------------------------------------------
00009F9A                            ; Distances between rings (format: horizontal, vertical)
00009F9A                            ; ---------------------------------------------------------------------------
00009F9A 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F9C 1800                       		dc.b $18, 0		; horizontal normal
00009F9E 2000                       		dc.b $20, 0		; horizontal wide
00009FA0 0010                       		dc.b 0,	$10		; vertical tight
00009FA2 0018                       		dc.b 0,	$18		; vertical normal
00009FA4 0020                       		dc.b 0,	$20		; vertical wide
00009FA6 1010                       		dc.b $10, $10		; diagonal
00009FA8 1818                       		dc.b $18, $18
00009FAA 2020                       		dc.b $20, $20
00009FAC F010                       		dc.b $F0, $10
00009FAE E818                       		dc.b $E8, $18
00009FB0 E020                       		dc.b $E0, $20
00009FB2 1008                       		dc.b $10, 8
00009FB4 1810                       		dc.b $18, $10
00009FB6 F008                       		dc.b $F0, 8
00009FB8 E810                       		dc.b $E8, $10
00009FBA                            ; ===========================================================================
00009FBA                            
00009FBA                            Obj25_Main:				; XREF: Obj25_Index
00009FBA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FBE 7000                       		moveq	#0,d0
00009FC0 1028 0023                  		move.b	$23(a0),d0
00009FC4 45F2 0002                  		lea	2(a2,d0.w),a2
00009FC8 1812                       		move.b	(a2),d4
00009FCA 1228 0028                  		move.b	$28(a0),d1
00009FCE 1001                       		move.b	d1,d0
00009FD0 0241 0007                  		andi.w	#7,d1
00009FD4 0C41 0007                  		cmpi.w	#7,d1
00009FD8 6600                       		bne.s	loc_9B80
00009FDA 7206                       		moveq	#6,d1
00009FDC                            
00009FDC                            loc_9B80:
00009FDC 4841                       		swap	d1
00009FDE 323C 0000                  		move.w	#0,d1
00009FE2 E808                       		lsr.b	#4,d0
00009FE4 D040                       		add.w	d0,d0
00009FE6 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009FEA 4885                       		ext.w	d5
00009FEC 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009FF0 4886                       		ext.w	d6
00009FF2 2248                       		movea.l	a0,a1
00009FF4 3428 0008                  		move.w	8(a0),d2
00009FF8 3628 000C                  		move.w	$C(a0),d3
00009FFC E20C                       		lsr.b	#1,d4
00009FFE 6500                       		bcs.s	loc_9C02
0000A000 0892 0007                  		bclr	#7,(a2)
0000A004 6000                       		bra.s	loc_9BBA
0000A006                            ; ===========================================================================
0000A006                            
0000A006                            Obj25_MakeRings:
0000A006 4841                       		swap	d1
0000A008 E20C                       		lsr.b	#1,d4
0000A00A 6500                       		bcs.s	loc_9C02
0000A00C 0892 0007                  		bclr	#7,(a2)
0000A010 6100 0000                  		bsr.w	SingleObjLoad
0000A014 6600                       		bne.s	loc_9C0E
0000A016                            
0000A016                            loc_9BBA:				; XREF: Obj25_Main
0000A016 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A01A 5429 0024                  		addq.b	#2,$24(a1)
0000A01E 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A022 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A028 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A02C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A034 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A03A 137C 0004 0001             		move.b	#4,1(a1)
0000A040 137C 0002 0018             		move.b	#2,$18(a1)
0000A046 137C 0047 0020             		move.b	#$47,$20(a1)
0000A04C 137C 0008 0019             		move.b	#8,$19(a1)
0000A052 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A058 1341 0034                  		move.b	d1,$34(a1)
0000A05C                            
0000A05C                            loc_9C02:
0000A05C 5241                       		addq.w	#1,d1
0000A05E D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A060 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A062 4841                       		swap	d1
0000A064 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A068                            
0000A068                            loc_9C0E:
0000A068 0812 0000                  		btst	#0,(a2)
0000A06C 6600 0000                  		bne.w	DeleteObject
0000A070                            
0000A070                            Obj25_Animate:				; XREF: Obj25_Index
0000A070 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A076 6100 0000                  		bsr.w	DisplaySprite
0000A07A 3028 0032                  		move.w	$32(a0),d0
0000A07E 0240 FF80                  		andi.w	#$FF80,d0
0000A082 3238 F700                  		move.w	($FFFFF700).w,d1
0000A086 0441 0080                  		subi.w	#$80,d1
0000A08A 0241 FF80                  		andi.w	#$FF80,d1
0000A08E 9041                       		sub.w	d1,d0
0000A090 0C40 0280                  		cmpi.w	#$280,d0
0000A094 6200                       		bhi.s	Obj25_Delete
0000A096 4E75                       		rts	
0000A098                            ; ===========================================================================
0000A098                            
0000A098                            Obj25_Collect:				; XREF: Obj25_Index
0000A098 5428 0024                  		addq.b	#2,$24(a0)
0000A09C 117C 0000 0020             		move.b	#0,$20(a0)
0000A0A2 117C 0001 0018             		move.b	#1,$18(a0)
0000A0A8 6100 0000                  		bsr.w	CollectRing
0000A0AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0B0 7000                       		moveq	#0,d0
0000A0B2 1028 0023                  		move.b	$23(a0),d0
0000A0B6 1228 0034                  		move.b	$34(a0),d1
0000A0BA 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0BE                            
0000A0BE                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0BE 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0C4 6100 0000                  		bsr.w	AnimateSprite
0000A0C8 6000 0000                  		bra.w	DisplaySprite
0000A0CC                            ; ===========================================================================
0000A0CC                            
0000A0CC                            Obj25_Delete:				; XREF: Obj25_Index
0000A0CC 6000 0000                  		bra.w	DeleteObject
0000A0D0                            
0000A0D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0D0                            
0000A0D0                            
0000A0D0                            CollectRing:				; XREF: Obj25_Collect
0000A0D0 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0D4 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0DA 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0DE 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A0E4 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0E6 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A0EC 6700                       		beq.s	loc_9CA4
0000A0EE 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A0F4 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0F6 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A0FC 6600                       		bne.s	Obj25_PlaySnd
0000A0FE                            
0000A0FE                            loc_9CA4:
0000A0FE 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A102 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A106 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A10A                            
0000A10A                            Obj25_PlaySnd:
0000A10A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A110                            ; End of function CollectRing
0000A110                            
0000A110                            ; ===========================================================================
0000A110                            ; ---------------------------------------------------------------------------
0000A110                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A110                            ; ---------------------------------------------------------------------------
0000A110                            
0000A110                            Obj37:					; XREF: Obj_Index
0000A110 7000                       		moveq	#0,d0
0000A112 1028 0024                  		move.b	$24(a0),d0
0000A116 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A11A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A11E                            ; ===========================================================================
0000A11E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A120 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A122 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A124 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A126 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A128                            ; ===========================================================================
0000A128                            
0000A128                            Obj37_CountRings:			; XREF: Obj37_Index
0000A128 2248                       		movea.l	a0,a1
0000A12A 7A00                       		moveq	#0,d5
0000A12C 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A130 7020                       		moveq	#32,d0
0000A132 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A134 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A136 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A138                            
0000A138                            loc_9CDE:
0000A138 5345                       		subq.w	#1,d5
0000A13A 383C 0288                  		move.w	#$288,d4
0000A13E 6000                       		bra.s	Obj37_MakeRings
0000A140                            ; ===========================================================================
0000A140                            
0000A140                            Obj37_Loop:
0000A140 6100 0000                  		bsr.w	SingleObjLoad
0000A144 6600 0000                  		bne.w	Obj37_ResetCounter
0000A148                            
0000A148                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A148 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A14C 5429 0024                  		addq.b	#2,$24(a1)
0000A150 137C 0008 0016             		move.b	#8,$16(a1)
0000A156 137C 0008 0017             		move.b	#8,$17(a1)
0000A15C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A162 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A168 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A170 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A176 137C 0004 0001             		move.b	#4,1(a1)
0000A17C 137C 0003 0018             		move.b	#3,$18(a1)
0000A182 137C 0047 0020             		move.b	#$47,$20(a1)
0000A188 137C 0008 0019             		move.b	#8,$19(a1)
0000A18E 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A194 4A44                       		tst.w	d4
0000A196 6B00                       		bmi.s	loc_9D62
0000A198 3004                       		move.w	d4,d0
0000A19A 6100 8A86                  		bsr.w	CalcSine
0000A19E 3404                       		move.w	d4,d2
0000A1A0 E04A                       		lsr.w	#8,d2
0000A1A2 E560                       		asl.w	d2,d0
0000A1A4 E561                       		asl.w	d2,d1
0000A1A6 3400                       		move.w	d0,d2
0000A1A8 3601                       		move.w	d1,d3
0000A1AA 0604 0010                  		addi.b	#$10,d4
0000A1AE 6400                       		bcc.s	loc_9D62
0000A1B0 0444 0080                  		subi.w	#$80,d4
0000A1B4 6400                       		bcc.s	loc_9D62
0000A1B6 383C 0288                  		move.w	#$288,d4
0000A1BA                            
0000A1BA                            loc_9D62:
0000A1BA 3342 0010                  		move.w	d2,$10(a1)
0000A1BE 3343 0012                  		move.w	d3,$12(a1)
0000A1C2 4442                       		neg.w	d2
0000A1C4 4444                       		neg.w	d4
0000A1C6 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1CA                            
0000A1CA                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1CA 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1D0 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1D6 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1DC 303C 00C6                  		move.w	#$C6,d0
0000A1E0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A1E6                            
0000A1E6                            Obj37_Bounce:				; XREF: Obj37_Index
0000A1E6 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A1EC 6100 0000                  		bsr.w	SpeedToPos
0000A1F0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1F6 6B00                       		bmi.s	Obj37_ChkDel
0000A1F8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A1FC D007                       		add.b	d7,d0
0000A1FE 0200 0003                  		andi.b	#3,d0
0000A202 6600                       		bne.s	Obj37_ChkDel
0000A204 4EB9 0000 0000             		jsr	ObjHitFloor
0000A20A 4A41                       		tst.w	d1
0000A20C 6A00                       		bpl.s	Obj37_ChkDel
0000A20E D368 000C                  		add.w	d1,$C(a0)
0000A212 3028 0012                  		move.w	$12(a0),d0
0000A216 E440                       		asr.w	#2,d0
0000A218 9168 0012                  		sub.w	d0,$12(a0)
0000A21C 4468 0012                  		neg.w	$12(a0)
0000A220                            
0000A220                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A220 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A224 6700                       		beq.s	Obj37_Delete
0000A226 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A22A 0640 00E0                  		addi.w	#$E0,d0
0000A22E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A232 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A234 6000 0000                  		bra.w	DisplaySprite
0000A238                            ; ===========================================================================
0000A238                            
0000A238                            Obj37_Collect:				; XREF: Obj37_Index
0000A238 5428 0024                  		addq.b	#2,$24(a0)
0000A23C 117C 0000 0020             		move.b	#0,$20(a0)
0000A242 117C 0001 0018             		move.b	#1,$18(a0)
0000A248 6100 FE86                  		bsr.w	CollectRing
0000A24C                            
0000A24C                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A24C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A252 6100 0000                  		bsr.w	AnimateSprite
0000A256 6000 0000                  		bra.w	DisplaySprite
0000A25A                            ; ===========================================================================
0000A25A                            
0000A25A                            Obj37_Delete:				; XREF: Obj37_Index
0000A25A 6000 0000                  		bra.w	DeleteObject
0000A25E                            ; ===========================================================================
0000A25E                            ; ---------------------------------------------------------------------------
0000A25E                            ; Object 4B - giant ring for entry to special stage
0000A25E                            ; ---------------------------------------------------------------------------
0000A25E                            
0000A25E                            Obj4B:					; XREF: Obj_Index
0000A25E 7000                       		moveq	#0,d0
0000A260 1028 0024                  		move.b	$24(a0),d0
0000A264 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A268 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A26C                            ; ===========================================================================
0000A26C 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A26E 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A270 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A272 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A274                            ; ===========================================================================
0000A274                            
0000A274                            Obj4B_Main:				; XREF: Obj4B_Index
0000A274 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A27C 317C 2400 0002             		move.w	#$2400,2(a0)
0000A282 0028 0004 0001             		ori.b	#4,1(a0)
0000A288 117C 0040 0019             		move.b	#$40,$19(a0)
0000A28E 4A28 0001                  		tst.b	1(a0)
0000A292 6A00                       		bpl.s	Obj4B_Animate
0000A294 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A29A 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A29E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A2A4 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A2A6 4E75                       		rts	
0000A2A8                            ; ===========================================================================
0000A2A8                            
0000A2A8                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2A8 5428 0024                  		addq.b	#2,$24(a0)
0000A2AC 117C 0002 0018             		move.b	#2,$18(a0)
0000A2B2 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2B8 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2BE                            
0000A2BE                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2BE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2C4 3028 0008                  		move.w	8(a0),d0
0000A2C8 0240 FF80                  		andi.w	#$FF80,d0
0000A2CC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2D0 0441 0080                  		subi.w	#$80,d1
0000A2D4 0241 FF80                  		andi.w	#$FF80,d1
0000A2D8 9041                       		sub.w	d1,d0
0000A2DA 0C40 0280                  		cmpi.w	#$280,d0
0000A2DE 6200 0000                  		bhi.w	DeleteObject
0000A2E2 6000 0000                  		bra.w	DisplaySprite
0000A2E6                            ; ===========================================================================
0000A2E6                            
0000A2E6                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A2E6 5528 0024                  		subq.b	#2,$24(a0)
0000A2EA 117C 0000 0020             		move.b	#0,$20(a0)
0000A2F0 6100 0000                  		bsr.w	SingleObjLoad
0000A2F4 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A2F8 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A2FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A302 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A308 2348 003C                  		move.l	a0,$3C(a1)
0000A30C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A310 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A314 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A316 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A31C                            
0000A31C                            Obj4B_PlaySnd:
0000A31C 303C 00C3                  		move.w	#$C3,d0
0000A320 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A326 6096                       		bra.s	Obj4B_Animate
0000A328                            ; ===========================================================================
0000A328                            
0000A328                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A328 6000 0000                  		bra.w	DeleteObject
0000A32C                            ; ===========================================================================
0000A32C                            ; ---------------------------------------------------------------------------
0000A32C                            ; Object 7C - flash effect when	you collect the	giant ring
0000A32C                            ; ---------------------------------------------------------------------------
0000A32C                            
0000A32C                            Obj7C:					; XREF: Obj_Index
0000A32C 7000                       		moveq	#0,d0
0000A32E 1028 0024                  		move.b	$24(a0),d0
0000A332 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A336 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A33A                            ; ===========================================================================
0000A33A 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A33C 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A33E 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A340                            ; ===========================================================================
0000A340                            
0000A340                            Obj7C_Main:				; XREF: Obj7C_Index
0000A340 5428 0024                  		addq.b	#2,$24(a0)
0000A344 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A34C 317C 2462 0002             		move.w	#$2462,2(a0)
0000A352 0028 0004 0001             		ori.b	#4,1(a0)
0000A358 117C 0000 0018             		move.b	#0,$18(a0)
0000A35E 117C 0020 0019             		move.b	#$20,$19(a0)
0000A364 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A36A                            
0000A36A                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A36A 6100                       		bsr.s	Obj7C_Collect
0000A36C 3028 0008                  		move.w	8(a0),d0
0000A370 0240 FF80                  		andi.w	#$FF80,d0
0000A374 3238 F700                  		move.w	($FFFFF700).w,d1
0000A378 0441 0080                  		subi.w	#$80,d1
0000A37C 0241 FF80                  		andi.w	#$FF80,d1
0000A380 9041                       		sub.w	d1,d0
0000A382 0C40 0280                  		cmpi.w	#$280,d0
0000A386 6200 0000                  		bhi.w	DeleteObject
0000A38A 6000 0000                  		bra.w	DisplaySprite
0000A38E                            
0000A38E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A38E                            
0000A38E                            
0000A38E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A38E 5328 001E                  		subq.b	#1,$1E(a0)
0000A392 6A00                       		bpl.s	locret_9F76
0000A394 117C 0001 001E             		move.b	#1,$1E(a0)
0000A39A 5228 001A                  		addq.b	#1,$1A(a0)
0000A39E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A3A4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A3A6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3AC 6600                       		bne.s	locret_9F76	; if not, branch
0000A3AE 2268 003C                  		movea.l	$3C(a0),a1
0000A3B2 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3B8 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3BE 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3C4 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3C8 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3CC                            
0000A3CC                            locret_9F76:
0000A3CC 4E75                       		rts	
0000A3CE                            ; ===========================================================================
0000A3CE                            
0000A3CE                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3CE 5428 0024                  		addq.b	#2,$24(a0)
0000A3D2 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3D8 588F                       		addq.l	#4,sp
0000A3DA 4E75                       		rts	
0000A3DC                            ; End of function Obj7C_Collect
0000A3DC                            
0000A3DC                            ; ===========================================================================
0000A3DC                            
0000A3DC                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3DC 6000 0000                  		bra.w	DeleteObject
0000A3E0                            ; ===========================================================================
0000A3E0                            Ani_obj25:
0000A3E0                            	include "_anim\obj25.asm"
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Animation script - ring
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3E2 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A3E8                            		even
0000A3E8                            		even
0000A3E8                            
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            ; Sprite mappings - rings
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            Map_obj25:
0000A3E8                            	include "_maps\obj25.asm"
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8                            ; Sprite mappings - rings
0000A3E8                            ; ---------------------------------------------------------------------------
0000A3E8 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A3EC 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A3F0 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A3F4 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A3F8 01                         byte_9FA2:	dc.b 1
0000A3F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A3FE 01                         byte_9FA8:	dc.b 1
0000A3FF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A404 01                         byte_9FAE:	dc.b 1
0000A405 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A40A 01                         byte_9FB4:	dc.b 1
0000A40B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A410 01                         byte_9FBA:	dc.b 1
0000A411 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A416 01                         byte_9FC0:	dc.b 1
0000A417 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A41C 01                         byte_9FC6:	dc.b 1
0000A41D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A422 01                         byte_9FCC:	dc.b 1
0000A423 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A428                            		even
0000A428                            		even
0000A428                            
0000A428                            ; ---------------------------------------------------------------------------
0000A428                            ; Sprite mappings - giant ring
0000A428                            ; ---------------------------------------------------------------------------
0000A428                            Map_obj4B:
0000A428                            	include "_maps\obj4B.asm"
0000A428                            ; ---------------------------------------------------------------------------
0000A428                            ; Sprite mappings - giant ring
0000A428                            ; ---------------------------------------------------------------------------
0000A428 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A42C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A430 0A                         byte_9FDA:	dc.b $A
0000A431 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A436 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A43B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A440 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A445 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A44A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A44F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A454 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A459 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A45E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A463 08                         byte_A00D:	dc.b 8
0000A464 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A469 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A46E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A473 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A478 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A47D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A482 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A487 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A48C 04                         byte_A036:	dc.b 4
0000A48D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A492 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A497 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A49C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A4A1 08                         byte_A04B:	dc.b 8
0000A4A2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A4A7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4AC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4B1 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4B6 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4BB 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4C0 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4C5 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4CA                            		even
0000A4CA                            		even
0000A4CA                            
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            Map_obj7C:
0000A4CA                            	include "_maps\obj7C.asm"
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4CE 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4D2 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4D6 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4DA 02                         byte_A084:	dc.b 2
0000A4DB E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4E0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A4E5 04                         byte_A08F:	dc.b 4
0000A4E6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A4EB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A4F0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A4F5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A4FA 04                         byte_A0A4:	dc.b 4
0000A4FB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A500 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A505 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A50A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A50F 04                         byte_A0B9:	dc.b 4
0000A510 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A515 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A51A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A51F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A524 04                         byte_A0CE:	dc.b 4
0000A525 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A52A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A52F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A534 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A539 04                         byte_A0E3:	dc.b 4
0000A53A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A53F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A544 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A549 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A54E 02                         byte_A0F8:	dc.b 2
0000A54F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A554 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A559 04                         byte_A103:	dc.b 4
0000A55A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A55F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A564 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A569 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A56E                            		even
0000A56E                            		even
0000A56E                            
0000A56E                            ; ===========================================================================
0000A56E                            ; ---------------------------------------------------------------------------
0000A56E                            ; Object 26 - monitors
0000A56E                            ; ---------------------------------------------------------------------------
0000A56E                            
0000A56E                            Obj26:					; XREF: Obj_Index
0000A56E 7000                       		moveq	#0,d0
0000A570 1028 0024                  		move.b	$24(a0),d0
0000A574 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A578 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A57C                            ; ===========================================================================
0000A57C 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A57E 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A580 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A582 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A584 0000                       		dc.w Obj26_Display-Obj26_Index
0000A586                            ; ===========================================================================
0000A586                            
0000A586                            Obj26_Main:				; XREF: Obj26_Index
0000A586 5428 0024                  		addq.b	#2,$24(a0)
0000A58A 117C 000E 0016             		move.b	#$E,$16(a0)
0000A590 117C 000E 0017             		move.b	#$E,$17(a0)
0000A596 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A59E 317C 0680 0002             		move.w	#$680,2(a0)
0000A5A4 117C 0004 0001             		move.b	#4,1(a0)
0000A5AA 117C 0003 0018             		move.b	#3,$18(a0)
0000A5B0 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5BA 7000                       		moveq	#0,d0
0000A5BC 1028 0023                  		move.b	$23(a0),d0
0000A5C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5C6 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5CC 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5CE 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5D4 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5DA 4E75                       		rts	
0000A5DC                            ; ===========================================================================
0000A5DC                            
0000A5DC                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5DC 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5E2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A5E8                            
0000A5E8                            Obj26_Solid:				; XREF: Obj26_Index
0000A5E8 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A5EC 6700                       		beq.s	loc_A1EC	; if not, branch
0000A5EE 5500                       		subq.b	#2,d0
0000A5F0 6600                       		bne.s	Obj26_Fall
0000A5F2 7200                       		moveq	#0,d1
0000A5F4 1228 0019                  		move.b	$19(a0),d1
0000A5F8 0641 000B                  		addi.w	#$B,d1
0000A5FC 6100 D41C                  		bsr.w	ExitPlatform
0000A600 0829 0003 0022             		btst	#3,$22(a1)
0000A606 6600 0000                  		bne.w	loc_A1BC
0000A60A 4228 0025                  		clr.b	$25(a0)
0000A60E 6000 0000                  		bra.w	Obj26_Animate
0000A612                            ; ===========================================================================
0000A612                            
0000A612                            loc_A1BC:				; XREF: Obj26_Solid
0000A612 363C 0010                  		move.w	#$10,d3
0000A616 3428 0008                  		move.w	8(a0),d2
0000A61A 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A61E 6000 0000                  		bra.w	Obj26_Animate
0000A622                            ; ===========================================================================
0000A622                            
0000A622                            Obj26_Fall:				; XREF: Obj26_Solid
0000A622 6100 0000                  		bsr.w	ObjectFall
0000A626 4EB9 0000 0000             		jsr	ObjHitFloor
0000A62C 4A41                       		tst.w	d1
0000A62E 6A00 0000                  		bpl.w	Obj26_Animate
0000A632 D368 000C                  		add.w	d1,$C(a0)
0000A636 4268 0012                  		clr.w	$12(a0)
0000A63A 4228 0025                  		clr.b	$25(a0)
0000A63E 6000 0000                  		bra.w	Obj26_Animate
0000A642                            ; ===========================================================================
0000A642                            
0000A642                            loc_A1EC:				; XREF: Obj26_Solid
0000A642 323C 001A                  		move.w	#$1A,d1
0000A646 343C 000F                  		move.w	#$F,d2
0000A64A 6100 0000                  		bsr.w	Obj26_SolidSides
0000A64E 6700 0000                  		beq.w	loc_A25C
0000A652 4A69 0012                  		tst.w	$12(a1)
0000A656 6B00                       		bmi.s	loc_A20A
0000A658 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A65E 6700                       		beq.s	loc_A25C	; if yes, branch
0000A660                            
0000A660                            loc_A20A:
0000A660 4A41                       		tst.w	d1
0000A662 6A00                       		bpl.s	loc_A220
0000A664 9769 000C                  		sub.w	d3,$C(a1)
0000A668 6100 D29E                  		bsr.w	loc_74AE
0000A66C 117C 0002 0025             		move.b	#2,$25(a0)
0000A672 6000 0000                  		bra.w	Obj26_Animate
0000A676                            ; ===========================================================================
0000A676                            
0000A676                            loc_A220:
0000A676 4A40                       		tst.w	d0
0000A678 6700 0000                  		beq.w	loc_A246
0000A67C 6B00                       		bmi.s	loc_A230
0000A67E 4A69 0010                  		tst.w	$10(a1)
0000A682 6B00                       		bmi.s	loc_A246
0000A684 6000                       		bra.s	loc_A236
0000A686                            ; ===========================================================================
0000A686                            
0000A686                            loc_A230:
0000A686 4A69 0010                  		tst.w	$10(a1)
0000A68A 6A00                       		bpl.s	loc_A246
0000A68C                            
0000A68C                            loc_A236:
0000A68C 9169 0008                  		sub.w	d0,8(a1)
0000A690 337C 0000 0014             		move.w	#0,$14(a1)
0000A696 337C 0000 0010             		move.w	#0,$10(a1)
0000A69C                            
0000A69C                            loc_A246:
0000A69C 0829 0001 0022             		btst	#1,$22(a1)
0000A6A2 6600                       		bne.s	loc_A26A
0000A6A4 08E9 0005 0022             		bset	#5,$22(a1)
0000A6AA 08E8 0005 0022             		bset	#5,$22(a0)
0000A6B0 6000                       		bra.s	Obj26_Animate
0000A6B2                            ; ===========================================================================
0000A6B2                            
0000A6B2                            loc_A25C:
0000A6B2 0828 0005 0022             		btst	#5,$22(a0)
0000A6B8 6700                       		beq.s	Obj26_Animate
0000A6BA 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6C0                            
0000A6C0                            loc_A26A:
0000A6C0 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6C6 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6CC                            
0000A6CC                            Obj26_Animate:				; XREF: Obj26_Index
0000A6CC 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6D2 6100 0000                  		bsr.w	AnimateSprite
0000A6D6                            
0000A6D6                            Obj26_Display:				; XREF: Obj26_Index
0000A6D6 6100 0000                  		bsr.w	DisplaySprite
0000A6DA 3028 0008                  		move.w	8(a0),d0
0000A6DE 0240 FF80                  		andi.w	#$FF80,d0
0000A6E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6E6 0441 0080                  		subi.w	#$80,d1
0000A6EA 0241 FF80                  		andi.w	#$FF80,d1
0000A6EE 9041                       		sub.w	d1,d0
0000A6F0 0C40 0280                  		cmpi.w	#$280,d0
0000A6F4 6200 0000                  		bhi.w	DeleteObject
0000A6F8 4E75                       		rts	
0000A6FA                            ; ===========================================================================
0000A6FA                            
0000A6FA                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A6FA 5428 0024                  		addq.b	#2,$24(a0)
0000A6FE 117C 0000 0020             		move.b	#0,$20(a0)
0000A704 6100 0000                  		bsr.w	SingleObjLoad
0000A708 6600                       		bne.s	Obj26_Explode
0000A70A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A70E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A714 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A71A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A720 7400                       		moveq	#0,d2	; GMZ
0000A722 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A724                            
0000A724                            Obj26_Explode:
0000A724 6100 0000                  		bsr.w	SingleObjLoad
0000A728 6600                       		bne.s	Obj26_SetBroken
0000A72A 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A72E 5429 0024                  		addq.b	#2,$24(a1)
0000A732 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A736 3368 0008 0008             		move.w	8(a0),8(a1)
0000A73C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A742                            
0000A742                            Obj26_NextExplosion:
0000A742 5802                       		addq.b	#4,d2
0000A744 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A748                            
0000A748                            Obj26_SetBroken:
0000A748 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A74C 7000                       		moveq	#0,d0
0000A74E 1028 0023                  		move.b	$23(a0),d0
0000A752 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A758 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A75E 6000 0000                  		bra.w	DisplaySprite
0000A762                            ; ===========================================================================
0000A762                            ; ---------------------------------------------------------------------------
0000A762                            ; Object 2E - contents of monitors
0000A762                            ; ---------------------------------------------------------------------------
0000A762                            
0000A762                            Obj2E:					; XREF: Obj_Index
0000A762 7000                       		moveq	#0,d0
0000A764 1028 0024                  		move.b	$24(a0),d0
0000A768 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A76C 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A770 6000 0000                  		bra.w	DisplaySprite
0000A774                            ; ===========================================================================
0000A774 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A776 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A778 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A77A                            ; ===========================================================================
0000A77A                            
0000A77A                            Obj2E_Main:				; XREF: Obj2E_Index
0000A77A 5428 0024                  		addq.b	#2,$24(a0)
0000A77E 317C 0680 0002             		move.w	#$680,2(a0)
0000A784 117C 0024 0001             		move.b	#$24,1(a0)
0000A78A 117C 0003 0018             		move.b	#3,$18(a0)
0000A790 117C 0008 0019             		move.b	#8,$19(a0)
0000A796 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A79C 7000                       		moveq	#0,d0
0000A79E 1028 001C                  		move.b	$1C(a0),d0
0000A7A2 5400                       		addq.b	#2,d0
0000A7A4 1140 001A                  		move.b	d0,$1A(a0)
0000A7A8 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7AE D000                       		add.b	d0,d0
0000A7B0 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7B4 5249                       		addq.w	#1,a1
0000A7B6 2149 0004                  		move.l	a1,4(a0)
0000A7BA                            
0000A7BA                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7BA 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7BE 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7C2 6100 0000                  		bsr.w	SpeedToPos
0000A7C6 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7CC 4E75                       		rts	
0000A7CE                            ; ===========================================================================
0000A7CE                            
0000A7CE                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7CE 5428 0024                  		addq.b	#2,$24(a0)
0000A7D2 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7D8 1028 001C                  		move.b	$1C(a0),d0
0000A7DC 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7E0 6600                       		bne.s	Obj2E_ChkSonic
0000A7E2 4E75                       		rts			; Eggman monitor does nothing
0000A7E4                            ; ===========================================================================
0000A7E4                            
0000A7E4                            Obj2E_ChkSonic:
0000A7E4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A7E8 6600                       		bne.s	Obj2E_ChkShoes
0000A7EA                            
0000A7EA                            ExtraLife:
0000A7EA 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7EE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7F2 303C 0088                  		move.w	#$88,d0
0000A7F6 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A7FC                            ; ===========================================================================
0000A7FC                            
0000A7FC                            Obj2E_ChkShoes:
0000A7FC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A800 6600                       		bne.s	Obj2E_ChkShield
0000A802 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A808 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A80E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A814 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A81A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A820 303C 00E2                  		move.w	#$E2,d0
0000A824 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A82A                            ; ===========================================================================
0000A82A                            
0000A82A                            Obj2E_ChkShield:
0000A82A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A82E 6600                       		bne.s	Obj2E_ChkInvinc
0000A830 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A836 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A83C 303C 00AF                  		move.w	#$AF,d0
0000A840 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A846                            ; ===========================================================================
0000A846                            
0000A846                            Obj2E_ChkInvinc:
0000A846 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A84A 6600                       		bne.s	Obj2E_ChkRings
0000A84C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A852 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A858 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A85E 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A864 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A86A 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A870 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A876 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A87C 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A882 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A888 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A88C 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A88E 303C 0087                  		move.w	#$87,d0
0000A892 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A898                            ; ===========================================================================
0000A898                            
0000A898                            Obj2E_NoMusic:
0000A898 4E75                       		rts	
0000A89A                            ; ===========================================================================
0000A89A                            
0000A89A                            Obj2E_ChkRings:
0000A89A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A89E 6600                       		bne.s	Obj2E_ChkS
0000A8A0 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A8A6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8AC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8B2 6500                       		bcs.s	Obj2E_RingSound
0000A8B4 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8BA 6700 FF2E                  		beq.w	ExtraLife
0000A8BE 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8C4 6500                       		bcs.s	Obj2E_RingSound
0000A8C6 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8CC 6700 FF1C                  		beq.w	ExtraLife
0000A8D0                            
0000A8D0                            Obj2E_RingSound:
0000A8D0 303C 00B5                  		move.w	#$B5,d0
0000A8D4 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8DA                            ; ===========================================================================
0000A8DA                            
0000A8DA                            Obj2E_ChkS:
0000A8DA 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8DE 6600                       		bne.s	Obj2E_ChkEnd
0000A8E0                            		; nop	
0000A8E0 7201                       		moveq	#1,d1
0000A8E2 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A8E6                            
0000A8E6                            Obj2E_ChkEnd:
0000A8E6 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A8E8                            ; ===========================================================================
0000A8E8                            
0000A8E8                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A8E8 5368 001E                  		subq.w	#1,$1E(a0)
0000A8EC 6B00 0000                  		bmi.w	DeleteObject
0000A8F0 4E75                       		rts	
0000A8F2                            ; ---------------------------------------------------------------------------
0000A8F2                            ; Subroutine to	make the sides of a monitor solid
0000A8F2                            ; ---------------------------------------------------------------------------
0000A8F2                            
0000A8F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A8F2                            
0000A8F2                            
0000A8F2                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A8F2 43F8 D000                  		lea	($FFFFD000).w,a1
0000A8F6 3029 0008                  		move.w	8(a1),d0
0000A8FA 9068 0008                  		sub.w	8(a0),d0
0000A8FE D041                       		add.w	d1,d0
0000A900 6B00                       		bmi.s	loc_A4E6
0000A902 3601                       		move.w	d1,d3
0000A904 D643                       		add.w	d3,d3
0000A906 B043                       		cmp.w	d3,d0
0000A908 6200                       		bhi.s	loc_A4E6
0000A90A 1629 0016                  		move.b	$16(a1),d3
0000A90E 4883                       		ext.w	d3
0000A910 D443                       		add.w	d3,d2
0000A912 3629 000C                  		move.w	$C(a1),d3
0000A916 9668 000C                  		sub.w	$C(a0),d3
0000A91A D642                       		add.w	d2,d3
0000A91C 6B00                       		bmi.s	loc_A4E6
0000A91E D442                       		add.w	d2,d2
0000A920 B642                       		cmp.w	d2,d3
0000A922 6400                       		bcc.s	loc_A4E6
0000A924 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A928 6B00                       		bmi.s	loc_A4E6
0000A92A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A930 6400                       		bcc.s	loc_A4E6
0000A932 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A936 6600                       		bne.s	loc_A4E6
0000A938 B240                       		cmp.w	d0,d1
0000A93A 6400                       		bcc.s	loc_A4DC
0000A93C D241                       		add.w	d1,d1
0000A93E 9041                       		sub.w	d1,d0
0000A940                            
0000A940                            loc_A4DC:
0000A940 0C43 0010                  		cmpi.w	#$10,d3
0000A944 6500                       		bcs.s	loc_A4EA
0000A946                            
0000A946                            loc_A4E2:
0000A946 7201                       		moveq	#1,d1
0000A948 4E75                       		rts	
0000A94A                            ; ===========================================================================
0000A94A                            
0000A94A                            loc_A4E6:
0000A94A 7200                       		moveq	#0,d1
0000A94C 4E75                       		rts	
0000A94E                            ; ===========================================================================
0000A94E                            
0000A94E                            loc_A4EA:
0000A94E 7200                       		moveq	#0,d1
0000A950 1228 0019                  		move.b	$19(a0),d1
0000A954 5841                       		addq.w	#4,d1
0000A956 3401                       		move.w	d1,d2
0000A958 D442                       		add.w	d2,d2
0000A95A D269 0008                  		add.w	8(a1),d1
0000A95E 9268 0008                  		sub.w	8(a0),d1
0000A962 6BE2                       		bmi.s	loc_A4E2
0000A964 B242                       		cmp.w	d2,d1
0000A966 64DE                       		bcc.s	loc_A4E2
0000A968 72FF                       		moveq	#-1,d1
0000A96A 4E75                       		rts	
0000A96C                            ; End of function Obj26_SolidSides
0000A96C                            
0000A96C                            ; ===========================================================================
0000A96C                            Ani_obj26:
0000A96C                            	include "_anim\obj26.asm"
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C                            ; Animation script - monitors
0000A96C                            ; ---------------------------------------------------------------------------
0000A96C 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A972 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A978 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A97E 0000                       		dc.w byte_A582-Ani_obj26
0000A980 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A986 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A992 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A99E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9AA 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9B6 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9C2 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9CE 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9DA 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A9E6 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A9EE                            		even
0000A9EE                            		even
0000A9EE                            
0000A9EE                            ; ---------------------------------------------------------------------------
0000A9EE                            ; Sprite mappings - monitors
0000A9EE                            ; ---------------------------------------------------------------------------
0000A9EE                            Map_obj26:
0000A9EE                            	include "_maps\obj26.asm"
0000A9EE                            ; ================================================================================
0000A9EE                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000A9EE                            ; ================================================================================
0000A9EE                            
0000A9EE                            DATAY1U343IF3L:
0000A9EE 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000A9F2 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000A9F6 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000A9FA 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000A9FE 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA02 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA06 05                         DATAY1U343IF3L_0: dc.b $5
0000AA07 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA0C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA11 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA16 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA1B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA20 06                         DATAY1U343IF3L_1: dc.b $6
0000AA21 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA3F 05                         DATAY1U343IF3L_2: dc.b $5
0000AA40 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA45 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA4A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA4F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA54 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA59 05                         DATAY1U343IF3L_3: dc.b $5
0000AA5A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA5F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA64 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA69 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA6E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA73 06                         DATAY1U343IF3L_4: dc.b $6
0000AA74 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA79 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA7E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA83 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA88 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA8D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA92 06                         DATAY1U343IF3L_5: dc.b $6
0000AA93 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AA98 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA9D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAA2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAA7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAAC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAB1 06                         DATAY1U343IF3L_6: dc.b $6
0000AAB2 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAB7 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AABC 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAC1 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAC6 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AACB 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAD0 06                         DATAY1U343IF3L_7: dc.b $6
0000AAD1 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AAD6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AADB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAE0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAEA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAEF 06                         DATAY1U343IF3L_8: dc.b $6
0000AAF0 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AAF5 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAFA 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAFF E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB04 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB09 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB0E 06                         DATAY1U343IF3L_9: dc.b $6
0000AB0F F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB14 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB19 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB1E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB23 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB28 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB2D 05                         DATAY1U343IF3L_A: dc.b $5
0000AB2E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB33 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB38 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB3D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB42 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB47 01                         DATAY1U343IF3L_B: dc.b $1
0000AB48 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB4E 00                         	even
0000AB4E 00                         	even
0000AB4E                            
0000AB4E                            ; ===========================================================================
0000AB4E                            ; ---------------------------------------------------------------------------
0000AB4E                            ; Object 0E - Sonic on the title screen
0000AB4E                            ; ---------------------------------------------------------------------------
0000AB4E                            
0000AB4E                            Obj0E:					; XREF: Obj_Index
0000AB4E 7000                       		moveq	#0,d0
0000AB50 1028 0024                  		move.b	$24(a0),d0
0000AB54 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB58 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB5C                            ; ===========================================================================
0000AB5C 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB5E 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB60 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB62 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB64                            ; ===========================================================================
0000AB64                            
0000AB64                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB64 5428 0024                  		addq.b	#2,$24(a0)
0000AB68 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB6E 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB74 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB7C 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB82 117C 0001 0018             		move.b	#1,$18(a0)
0000AB88 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AB8E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB94 6100 0000                  		bsr.w	AnimateSprite
0000AB98                            
0000AB98                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AB98 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AB9C 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AB9E 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ABA2 6000 0000                  		bra.w	DisplaySprite
0000ABA6                            ; ===========================================================================
0000ABA6                            
0000ABA6                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ABA6 4E75                       		rts	
0000ABA8                            ; ===========================================================================
0000ABA8                            
0000ABA8                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABA8 5168 000A                  		subq.w	#8,$A(a0)
0000ABAC 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABB2 6600                       		bne.s	Obj0E_Display
0000ABB4 5428 0024                  		addq.b	#2,$24(a0)
0000ABB8                            
0000ABB8                            Obj0E_Display:
0000ABB8 6000 0000                  		bra.w	DisplaySprite
0000ABBC                            ; ===========================================================================
0000ABBC 4E75                       		rts	
0000ABBE                            ; ===========================================================================
0000ABBE                            
0000ABBE                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABBE 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABC4 6100 0000                  		bsr.w	AnimateSprite
0000ABC8 6000 0000                  		bra.w	DisplaySprite
0000ABCC                            ; ===========================================================================
0000ABCC 4E75                       		rts	
0000ABCE                            ; ===========================================================================
0000ABCE                            ; ---------------------------------------------------------------------------
0000ABCE                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABCE                            ; ---------------------------------------------------------------------------
0000ABCE                            
0000ABCE                            Obj0F:					; XREF: Obj_Index
0000ABCE 7000                       		moveq	#0,d0
0000ABD0 1028 0024                  		move.b	$24(a0),d0
0000ABD4 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABD8 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABDC 6000 0000                  		bra.w	DisplaySprite
0000ABE0                            ; ===========================================================================
0000ABE0 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABE2 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ABE4 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ABE6                            ; ===========================================================================
0000ABE6                            
0000ABE6                            Obj0F_Main:				; XREF: Obj0F_Index
0000ABE6 5428 0024                  		addq.b	#2,$24(a0)
0000ABEA 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ABF0 317C 0130 000A             		move.w	#$130,$A(a0)
0000ABF6 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ABFE 317C 0200 0002             		move.w	#$200,2(a0)
0000AC04 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC0A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC0C 5428 0024                  		addq.b	#2,$24(a0)
0000AC10 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC16 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC18 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC1E 317C 0170 0008             		move.w	#$170,8(a0)
0000AC24 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC2A                            
0000AC2A                            locret_A6F8:				; XREF: Obj0F_Index
0000AC2A 4E75                       		rts	
0000AC2C                            ; ===========================================================================
0000AC2C                            
0000AC2C                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC2C 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC32 6000 0000                  		bra.w	AnimateSprite
0000AC36                            ; ===========================================================================
0000AC36                            Ani_obj0E:
0000AC36                            	include "_anim\obj0E.asm"
0000AC36                            ; ---------------------------------------------------------------------------
0000AC36                            ; Animation script - Sonic on the title screen
0000AC36                            ; ---------------------------------------------------------------------------
0000AC36 0000                       		dc.w byte_A706-Ani_obj0E
0000AC38 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC44                            		even
0000AC44                            		even
0000AC44                            
0000AC44                            Ani_obj0F:
0000AC44                            	include "_anim\obj0F.asm"
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC44                            ; ---------------------------------------------------------------------------
0000AC44 0000                       		dc.w byte_A714-Ani_obj0F
0000AC46 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC4A                            		even
0000AC4A                            		even
0000AC4A                            
0000AC4A                            ; ---------------------------------------------------------------------------
0000AC4A                            ; Subroutine to	animate	a sprite using an animation script
0000AC4A                            ; ---------------------------------------------------------------------------
0000AC4A                            
0000AC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC4A                            
0000AC4A                            
0000AC4A                            AnimateSprite:
0000AC4A 7000                       		moveq	#0,d0
0000AC4C 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC50 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC54 6700                       		beq.s	Anim_Run	; if not, branch
0000AC56 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC5A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC60 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC66                            
0000AC66                            Anim_Run:
0000AC66 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC6A 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC6C D040                       		add.w	d0,d0
0000AC6E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC72 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC76 7200                       		moveq	#0,d1
0000AC78 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC7C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC80 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC82                            
0000AC82                            Anim_Next:
0000AC82 1200                       		move.b	d0,d1
0000AC84 0200 001F                  		andi.b	#$1F,d0
0000AC88 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AC8C 1028 0022                  		move.b	$22(a0),d0
0000AC90 E719                       		rol.b	#3,d1
0000AC92 B101                       		eor.b	d0,d1
0000AC94 0201 0003                  		andi.b	#3,d1
0000AC98 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AC9E 8328 0001                  		or.b	d1,1(a0)
0000ACA2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000ACA6                            
0000ACA6                            Anim_Wait:
0000ACA6 4E75                       		rts	
0000ACA8                            ; ===========================================================================
0000ACA8                            
0000ACA8                            Anim_End_FF:
0000ACA8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACAA 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACAC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACB2 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACB6 60CA                       		bra.s	Anim_Next
0000ACB8                            ; ===========================================================================
0000ACB8                            
0000ACB8                            Anim_End_FE:
0000ACB8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACBA 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACBC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACC0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACC4 9200                       		sub.b	d0,d1
0000ACC6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACCA 60B6                       		bra.s	Anim_Next
0000ACCC                            ; ===========================================================================
0000ACCC                            
0000ACCC                            Anim_End_FD:
0000ACCC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACCE 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACD0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACD6                            
0000ACD6                            Anim_End_FC:
0000ACD6 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACD8 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACDA 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACDE                            
0000ACDE                            Anim_End_FB:
0000ACDE 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACE0 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACE2 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACE8 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ACEC                            
0000ACEC                            Anim_End_FA:
0000ACEC 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ACEE 6600                       		bne.s	Anim_End	; if not, branch
0000ACF0 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ACF4                            
0000ACF4                            Anim_End:
0000ACF4 4E75                       		rts	
0000ACF6                            ; End of function AnimateSprite
0000ACF6                            
0000ACF6                            ; ===========================================================================
0000ACF6                            ; ---------------------------------------------------------------------------
0000ACF6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACF6                            ; ---------------------------------------------------------------------------
0000ACF6                            Map_obj0F:
0000ACF6                            	include "_maps\obj0F.asm"
0000ACF6                            ; ---------------------------------------------------------------------------
0000ACF6                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACF6                            ; ---------------------------------------------------------------------------
0000ACF6 0000                       		dc.w byte_A7CD-Map_obj0F
0000ACF8 0000                       		dc.w byte_A7CC-Map_obj0F
0000ACFA 0000                       		dc.w byte_A7EB-Map_obj0F
0000ACFC 0000                       		dc.w byte_A882-Map_obj0F
0000ACFE 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ACFF 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD04 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD09 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD0E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD13 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD18 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD1D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD1E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD23 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD28 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD32 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD37 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD41 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD46 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD4B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD50 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD55 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD5A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD5F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD64 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD69 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD6E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD73 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD78 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD82 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD87 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD8C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD91 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD96 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD9B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADB4 01                         byte_A882:	dc.b 1			; "TM"
0000ADB5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADBA                            		even
0000ADBA                            		even
0000ADBA                            
0000ADBA                            ; ---------------------------------------------------------------------------
0000ADBA                            ; Sprite mappings - Sonic on the title screen
0000ADBA                            ; ---------------------------------------------------------------------------
0000ADBA                            Map_obj0E:
0000ADBA                            	include "_maps\obj0E.asm"
0000ADBA                            ; ================================================================================
0000ADBA                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000ADBA                            ; ================================================================================
0000ADBA                            
0000ADBA                            DATAGKI0HYDQBXP:
0000ADBA 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000ADBE 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000ADC2 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000ADC6 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000ADCA 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000ADCB 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000ADD0 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000ADD5 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000ADDA 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000ADDF 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000ADE4 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000ADE9 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000ADEE 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000ADF3 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000ADF4 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000ADF9 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000ADFE 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AE03 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AE08 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AE0D 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AE12 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AE17 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AE1C 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AE21 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AE26 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AE2B 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AE2C F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AE31 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AE36 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AE3B 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AE40 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AE45 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AE4A 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AE4F 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AE54 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AE59 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AE5E 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AE63 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AE64 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE69 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE6E FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE73 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE78 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE7D 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE82 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AE87 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AE8C 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AE91 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AE96 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AE97 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AE9C F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AEA1 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AEA6 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AEAB 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AEB0 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AEB5 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AEBA 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AEBF 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AEC4 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AEC9 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AECE 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AED3 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AED8 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AEDD 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AEE2 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AEE7 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AEE8 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AEED EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AEF2 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AEF7 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AEFC EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF01 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF06 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF0B EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF10 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF15 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF1A 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF1F 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000AF20 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000AF25 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000AF2A 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AF2F EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AF34 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AF39 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AF3E EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF43 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF48 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF4D EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF52 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF57 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF5C EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000AF61 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF66 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000AF6B 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000AF6C EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000AF71 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000AF76 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000AF7B EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000AF80 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000AF85 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000AF8A EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000AF8F 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000AF94 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000AF99 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000AF9E 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000AFA3 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000AFA8 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000AFAD 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000AFB2 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000AFB8 00                         	even
0000AFB8 00                         	even
0000AFB8                            
0000AFB8                            ; ===========================================================================
0000AFB8                            ; ---------------------------------------------------------------------------
0000AFB8                            ; Object 2B - Chopper enemy (GHZ)
0000AFB8                            ; ---------------------------------------------------------------------------
0000AFB8                            
0000AFB8                            Obj2B:					; XREF: Obj_Index
0000AFB8 7000                       		moveq	#0,d0
0000AFBA 1028 0024                  		move.b	$24(a0),d0
0000AFBE 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AFC2 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AFC6 6000 0000                  		bra.w	MarkObjGone
0000AFCA                            ; ===========================================================================
0000AFCA 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AFCC 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AFCE                            ; ===========================================================================
0000AFCE                            
0000AFCE                            Obj2B_Main:				; XREF: Obj2B_Index
0000AFCE 5428 0024                  		addq.b	#2,$24(a0)
0000AFD2 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AFDA 317C 047B 0002             		move.w	#$47B,2(a0)
0000AFE0 117C 0004 0001             		move.b	#4,1(a0)
0000AFE6 117C 0004 0018             		move.b	#4,$18(a0)
0000AFEC 117C 0009 0020             		move.b	#9,$20(a0)
0000AFF2 117C 0010 0019             		move.b	#$10,$19(a0)
0000AFF8 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AFFE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B004                            
0000B004                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B004 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B00A 6100 FC3E                  		bsr.w	AnimateSprite
0000B00E 6100 0000                  		bsr.w	SpeedToPos
0000B012 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B018 3028 0030                  		move.w	$30(a0),d0
0000B01C B068 000C                  		cmp.w	$C(a0),d0
0000B020 6400                       		bcc.s	Obj2B_ChgAni
0000B022 3140 000C                  		move.w	d0,$C(a0)
0000B026 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B02C                            
0000B02C                            Obj2B_ChgAni:
0000B02C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B032 0440 00C0                  		subi.w	#$C0,d0
0000B036 B068 000C                  		cmp.w	$C(a0),d0
0000B03A 6400                       		bcc.s	locret_ABB6
0000B03C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B042 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B046 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B048 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B04E                            
0000B04E                            locret_ABB6:
0000B04E 4E75                       		rts	
0000B050                            ; ===========================================================================
0000B050                            Ani_obj2B:
0000B050                            	include "_anim\obj2B.asm"
0000B050                            ; ---------------------------------------------------------------------------
0000B050                            ; Animation script - Chopper enemy
0000B050                            ; ---------------------------------------------------------------------------
0000B050 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B052 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B054 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B056 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B05A 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B05E 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B062 00                         		even
0000B062 00                         		even
0000B062                            
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            ; Sprite mappings - Chopper enemy (GHZ)
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            Map_obj2B:
0000B062                            	include "_maps\obj2B.asm"
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            ; Sprite mappings - Chopper enemy (GHZ)
0000B062                            ; ---------------------------------------------------------------------------
0000B062 0000                       		dc.w byte_ABCE-Map_obj2B
0000B064 0000                       		dc.w byte_ABD4-Map_obj2B
0000B066 01                         byte_ABCE:	dc.b 1
0000B067 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B06C 01                         byte_ABD4:	dc.b 1
0000B06D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B072                            		even
0000B072                            		even
0000B072                            
0000B072                            ; ===========================================================================
0000B072                            ; ---------------------------------------------------------------------------
0000B072                            ; Object 2C - Jaws enemy (LZ)
0000B072                            ; ---------------------------------------------------------------------------
0000B072                            
0000B072                            Obj2C:					; XREF: Obj_Index
0000B072 7000                       		moveq	#0,d0
0000B074 1028 0024                  		move.b	$24(a0),d0
0000B078 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B07C 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B080                            ; ===========================================================================
0000B080 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B082 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B084                            ; ===========================================================================
0000B084                            
0000B084                            Obj2C_Main:				; XREF: Obj2C_Index
0000B084 5428 0024                  		addq.b	#2,$24(a0)
0000B088 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B090 317C 2486 0002             		move.w	#$2486,2(a0)
0000B096 0028 0004 0001             		ori.b	#4,1(a0)
0000B09C 117C 000A 0020             		move.b	#$A,$20(a0)
0000B0A2 117C 0004 0018             		move.b	#4,$18(a0)
0000B0A8 117C 0010 0019             		move.b	#$10,$19(a0)
0000B0AE 7000                       		moveq	#0,d0
0000B0B0 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B0B4 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B0B6 5340                       		subq.w	#1,d0
0000B0B8 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B0BC 3140 0032                  		move.w	d0,$32(a0)
0000B0C0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B0C6 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B0CC 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B0CE 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B0D2                            
0000B0D2                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B0D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B0D6 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B0D8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B0DE 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B0E2 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B0E8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B0EE                            
0000B0EE                            Obj2C_Animate:
0000B0EE 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B0F4 6100 FB54                  		bsr.w	AnimateSprite
0000B0F8 6100 0000                  		bsr.w	SpeedToPos
0000B0FC 6000 0000                  		bra.w	MarkObjGone
0000B100                            ; ===========================================================================
0000B100                            Ani_obj2C:
0000B100                            	include "_anim\obj2C.asm"
0000B100                            ; ---------------------------------------------------------------------------
0000B100                            ; Animation script - Jaws enemy
0000B100                            ; ---------------------------------------------------------------------------
0000B100 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B102 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B108                            		even
0000B108                            		even
0000B108                            
0000B108                            ; ---------------------------------------------------------------------------
0000B108                            ; Sprite mappings - Jaws enemy (LZ)
0000B108                            ; ---------------------------------------------------------------------------
0000B108                            Map_obj2C:
0000B108                            	include "_maps\obj2C.asm"
0000B108                            ; ---------------------------------------------------------------------------
0000B108                            ; Sprite mappings - Jaws enemy (LZ)
0000B108                            ; ---------------------------------------------------------------------------
0000B108 0000                       		dc.w byte_AC78-Map_obj2C
0000B10A 0000                       		dc.w byte_AC83-Map_obj2C
0000B10C 0000                       		dc.w byte_AC8E-Map_obj2C
0000B10E 0000                       		dc.w byte_AC99-Map_obj2C
0000B110 02                         byte_AC78:	dc.b 2
0000B111 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B116 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B11B 02                         byte_AC83:	dc.b 2
0000B11C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B121 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B126 02                         byte_AC8E:	dc.b 2
0000B127 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B12C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B131 02                         byte_AC99:	dc.b 2
0000B132 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B137 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B13C                            		even
0000B13C                            		even
0000B13C                            
0000B13C                            ; ===========================================================================
0000B13C                            ; ---------------------------------------------------------------------------
0000B13C                            ; Object 2D - Burrobot enemy (LZ)
0000B13C                            ; ---------------------------------------------------------------------------
0000B13C                            
0000B13C                            Obj2D:					; XREF: Obj_Index
0000B13C 7000                       		moveq	#0,d0
0000B13E 1028 0024                  		move.b	$24(a0),d0
0000B142 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B146 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B14A                            ; ===========================================================================
0000B14A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B14C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B14E                            ; ===========================================================================
0000B14E                            
0000B14E                            Obj2D_Main:				; XREF: Obj2D_Index
0000B14E 5428 0024                  		addq.b	#2,$24(a0)
0000B152 117C 0013 0016             		move.b	#$13,$16(a0)
0000B158 117C 0008 0017             		move.b	#8,$17(a0)
0000B15E 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B166 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B16C 0028 0004 0001             		ori.b	#4,1(a0)
0000B172 117C 0004 0018             		move.b	#4,$18(a0)
0000B178 117C 0005 0020             		move.b	#5,$20(a0)
0000B17E 117C 000C 0019             		move.b	#$C,$19(a0)
0000B184 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B188 117C 0002 001C             		move.b	#2,$1C(a0)
0000B18E                            
0000B18E                            Obj2D_Action:				; XREF: Obj2D_Index
0000B18E 7000                       		moveq	#0,d0
0000B190 1028 0025                  		move.b	$25(a0),d0
0000B194 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B198 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B19C 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B1A2 6100 FAA6                  		bsr.w	AnimateSprite
0000B1A6 6000 0000                  		bra.w	MarkObjGone
0000B1AA                            ; ===========================================================================
0000B1AA 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B1AC 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B1AE 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B1B0 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B1B2                            ; ===========================================================================
0000B1B2                            
0000B1B2                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B1B2 5368 0030                  		subq.w	#1,$30(a0)
0000B1B6 6A00                       		bpl.s	locret_AD42
0000B1B8 5428 0025                  		addq.b	#2,$25(a0)
0000B1BC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B1C2 317C 0080 0010             		move.w	#$80,$10(a0)
0000B1C8 117C 0001 001C             		move.b	#1,$1C(a0)
0000B1CE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B1D4 6700                       		beq.s	locret_AD42
0000B1D6 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B1DA                            
0000B1DA                            locret_AD42:
0000B1DA 4E75                       		rts	
0000B1DC                            ; ===========================================================================
0000B1DC                            
0000B1DC                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B1DC 5368 0030                  		subq.w	#1,$30(a0)
0000B1E0 6B00                       		bmi.s	loc_AD84
0000B1E2 6100 0000                  		bsr.w	SpeedToPos
0000B1E6 0868 0000 0032             		bchg	#0,$32(a0)
0000B1EC 6600                       		bne.s	loc_AD78
0000B1EE 3628 0008                  		move.w	8(a0),d3
0000B1F2 0643 000C                  		addi.w	#$C,d3
0000B1F6 0828 0000 0022             		btst	#0,$22(a0)
0000B1FC 6600                       		bne.s	loc_AD6A
0000B1FE 0443 0018                  		subi.w	#$18,d3
0000B202                            
0000B202                            loc_AD6A:
0000B202 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B208 0C41 000C                  		cmpi.w	#$C,d1
0000B20C 6C00                       		bge.s	loc_AD84
0000B20E 4E75                       		rts	
0000B210                            ; ===========================================================================
0000B210                            
0000B210                            loc_AD78:				; XREF: Obj2D_Move
0000B210 4EB9 0000 0000             		jsr	ObjHitFloor
0000B216 D368 000C                  		add.w	d1,$C(a0)
0000B21A 4E75                       		rts	
0000B21C                            ; ===========================================================================
0000B21C                            
0000B21C                            loc_AD84:				; XREF: Obj2D_Move
0000B21C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B222 6700                       		beq.s	loc_ADA4
0000B224 5528 0025                  		subq.b	#2,$25(a0)
0000B228 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B22E 317C 0000 0010             		move.w	#0,$10(a0)
0000B234 117C 0000 001C             		move.b	#0,$1C(a0)
0000B23A 4E75                       		rts	
0000B23C                            ; ===========================================================================
0000B23C                            
0000B23C                            loc_ADA4:
0000B23C 5428 0025                  		addq.b	#2,$25(a0)
0000B240 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B246 117C 0002 001C             		move.b	#2,$1C(a0)
0000B24C 4E75                       		rts	
0000B24E                            ; ===========================================================================
0000B24E                            
0000B24E                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B24E 6100 0000                  		bsr.w	SpeedToPos
0000B252 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B258 6B00                       		bmi.s	locret_ADF0
0000B25A 117C 0003 001C             		move.b	#3,$1C(a0)
0000B260 4EB9 0000 0000             		jsr	ObjHitFloor
0000B266 4A41                       		tst.w	d1
0000B268 6A00                       		bpl.s	locret_ADF0
0000B26A D368 000C                  		add.w	d1,$C(a0)
0000B26E 317C 0000 0012             		move.w	#0,$12(a0)
0000B274 117C 0001 001C             		move.b	#1,$1C(a0)
0000B27A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B280 5528 0025                  		subq.b	#2,$25(a0)
0000B284 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B288                            
0000B288                            locret_ADF0:
0000B288 4E75                       		rts	
0000B28A                            ; ===========================================================================
0000B28A                            
0000B28A                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B28A 343C 0060                  		move.w	#$60,d2
0000B28E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B292 6400                       		bcc.s	locret_AE20
0000B294 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B298 9068 000C                  		sub.w	$C(a0),d0
0000B29C 6400                       		bcc.s	locret_AE20
0000B29E 0C40 FF80                  		cmpi.w	#-$80,d0
0000B2A2 6500                       		bcs.s	locret_AE20
0000B2A4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B2A8 6600                       		bne.s	locret_AE20
0000B2AA 5528 0025                  		subq.b	#2,$25(a0)
0000B2AE 3141 0010                  		move.w	d1,$10(a0)
0000B2B2 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2B8                            
0000B2B8                            locret_AE20:
0000B2B8 4E75                       		rts	
0000B2BA                            
0000B2BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2BA                            
0000B2BA                            
0000B2BA                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B2BA 323C 0080                  		move.w	#$80,d1
0000B2BE 08E8 0000 0022             		bset	#0,$22(a0)
0000B2C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2C8 9068 0008                  		sub.w	8(a0),d0
0000B2CC 6400                       		bcc.s	loc_AE40
0000B2CE 4440                       		neg.w	d0
0000B2D0 4441                       		neg.w	d1
0000B2D2 08A8 0000 0022             		bclr	#0,$22(a0)
0000B2D8                            
0000B2D8                            loc_AE40:
0000B2D8 B042                       		cmp.w	d2,d0
0000B2DA 4E75                       		rts	
0000B2DC                            ; End of function Obj2D_ChkSonic2
0000B2DC                            
0000B2DC                            ; ===========================================================================
0000B2DC                            Ani_obj2D:
0000B2DC                            	include "_anim\obj2D.asm"
0000B2DC                            ; ---------------------------------------------------------------------------
0000B2DC                            ; Animation script - Burrobot enemy but craig
0000B2DC                            ; ---------------------------------------------------------------------------
0000B2DC 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B2DE 0000                       		dc.w byte_AE50-Ani_obj2D
0000B2E0 0000                       		dc.w byte_AE54-Ani_obj2D
0000B2E2 0000                       		dc.w byte_AE58-Ani_obj2D
0000B2E4 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B2E7 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B2EB 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B2F9 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B2FC                            		even
0000B2FC                            		even
0000B2FC                            
0000B2FC                            ; ---------------------------------------------------------------------------
0000B2FC                            ; Sprite mappings - Burrobot enemy (LZ)
0000B2FC                            ; ---------------------------------------------------------------------------
0000B2FC                            Map_obj2D:
0000B2FC                            	include "_maps\obj2D.asm"
0000B2FC                            Map_e3a3:
0000B2FC 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B2FE 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B300 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B302 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B304 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B306 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B308 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B30A 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B30C 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B30E 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B310 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B312 02                         Map_e3a3_16: 	dc.b $2
0000B313 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B318 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B31D 02                         Map_e3a3_21: 	dc.b $2
0000B31E EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B323 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B328 02                         Map_e3a3_2C: 	dc.b $2
0000B329 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B32E 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B333 02                         Map_e3a3_37: 	dc.b $2
0000B334 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B339 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B33E 02                         Map_e3a3_42: 	dc.b $2
0000B33F EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B344 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B349 02                         Map_e3a3_4D: 	dc.b $2
0000B34A EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B34F FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B354 02                         Map_e3a3_58: 	dc.b $2
0000B355 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B35A FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B35F 02                         Map_e3a3_63: 	dc.b $2
0000B360 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B365 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B36A 02                         Map_e3a3_6E: 	dc.b $2
0000B36B EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B370 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B375 02                         Map_e3a3_79: 	dc.b $2
0000B376 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B37B 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B380 02                         Map_e3a3_84: 	dc.b $2
0000B381 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B386 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B38C 00                         	even
0000B38C 00                         	even
0000B38C                            
0000B38C                            ; ===========================================================================
0000B38C                            ; ---------------------------------------------------------------------------
0000B38C                            ; Object 2F - large moving platforms (MZ)
0000B38C                            ; ---------------------------------------------------------------------------
0000B38C                            
0000B38C                            Obj2F:					; XREF: Obj_Index
0000B38C 7000                       		moveq	#0,d0
0000B38E 1028 0024                  		move.b	$24(a0),d0
0000B392 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B396 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B39A                            ; ===========================================================================
0000B39A 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B39C 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B39E                            
0000B39E 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B3A0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B3A2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B3A4 0140                       		dc.b 1,	$40
0000B3A6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3A8 0220                       		dc.b 2,	$20
0000B3AA                            ; ===========================================================================
0000B3AA                            
0000B3AA                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3AA 5428 0024                  		addq.b	#2,$24(a0)
0000B3AE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3B6 317C C000 0002             		move.w	#$C000,2(a0)
0000B3BC 117C 0004 0001             		move.b	#4,1(a0)
0000B3C2 117C 0005 0018             		move.b	#5,$18(a0)
0000B3C8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B3CE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B3D4 7000                       		moveq	#0,d0
0000B3D6 1028 0028                  		move.b	$28(a0),d0
0000B3DA E448                       		lsr.w	#2,d0
0000B3DC 0240 001C                  		andi.w	#$1C,d0
0000B3E0 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B3E4 3019                       		move.w	(a1)+,d0
0000B3E6 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B3EA 214A 0030                  		move.l	a2,$30(a0)
0000B3EE 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B3F2 1151 0019                  		move.b	(a1),$19(a0)
0000B3F6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B3FC 117C 0040 0016             		move.b	#$40,$16(a0)
0000B402 08E8 0004 0001             		bset	#4,1(a0)
0000B408                            
0000B408                            Obj2F_Action:				; XREF: Obj2F_Index
0000B408 6100 0000                  		bsr.w	Obj2F_Types
0000B40C 4A28 0025                  		tst.b	$25(a0)
0000B410 6700                       		beq.s	Obj2F_Solid
0000B412 7200                       		moveq	#0,d1
0000B414 1228 0019                  		move.b	$19(a0),d1
0000B418 0641 000B                  		addi.w	#$B,d1
0000B41C 6100 C5FC                  		bsr.w	ExitPlatform
0000B420 0829 0003 0022             		btst	#3,$22(a1)
0000B426 6600 0000                  		bne.w	Obj2F_Slope
0000B42A 4228 0025                  		clr.b	$25(a0)
0000B42E 6000                       		bra.s	Obj2F_Display
0000B430                            ; ===========================================================================
0000B430                            
0000B430                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B430 7200                       		moveq	#0,d1
0000B432 1228 0019                  		move.b	$19(a0),d1
0000B436 0641 000B                  		addi.w	#$B,d1
0000B43A 2468 0030                  		movea.l	$30(a0),a2
0000B43E 3428 0008                  		move.w	8(a0),d2
0000B442 6100 D534                  		bsr.w	SlopeObject2
0000B446 6000                       		bra.s	Obj2F_Display
0000B448                            ; ===========================================================================
0000B448                            
0000B448                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B448 7200                       		moveq	#0,d1
0000B44A 1228 0019                  		move.b	$19(a0),d1
0000B44E 0641 000B                  		addi.w	#$B,d1
0000B452 343C 0020                  		move.w	#$20,d2
0000B456 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B45C 6600                       		bne.s	loc_AF8E
0000B45E 343C 0030                  		move.w	#$30,d2
0000B462                            
0000B462                            loc_AF8E:
0000B462 2468 0030                  		movea.l	$30(a0),a2
0000B466 6100 0000                  		bsr.w	SolidObject2F
0000B46A                            
0000B46A                            Obj2F_Display:				; XREF: Obj2F_Action
0000B46A 6100 0000                  		bsr.w	DisplaySprite
0000B46E 6000 0000                  		bra.w	Obj2F_ChkDel
0000B472                            
0000B472                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B472                            
0000B472                            
0000B472                            Obj2F_Types:				; XREF: Obj2F_Action
0000B472 7000                       		moveq	#0,d0
0000B474 1028 0028                  		move.b	$28(a0),d0
0000B478 0240 0007                  		andi.w	#7,d0
0000B47C D040                       		add.w	d0,d0
0000B47E 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B482 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B486                            ; End of function Obj2F_Types
0000B486                            
0000B486                            ; ===========================================================================
0000B486 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B488 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B48A 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B48C 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B48E 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B490 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B492                            ; ===========================================================================
0000B492                            
0000B492                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B492 4E75                       		rts			; type 00 platform doesn't move
0000B494                            ; ===========================================================================
0000B494                            
0000B494                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B494 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B498 323C 0020                  		move.w	#$20,d1
0000B49C 6000                       		bra.s	Obj2F_Move
0000B49E                            ; ===========================================================================
0000B49E                            
0000B49E                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B49E 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B4A2 323C 0030                  		move.w	#$30,d1
0000B4A6 6000                       		bra.s	Obj2F_Move
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4A8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4AC 323C 0040                  		move.w	#$40,d1
0000B4B0 6000                       		bra.s	Obj2F_Move
0000B4B2                            ; ===========================================================================
0000B4B2                            
0000B4B2                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4B2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4B6 323C 0060                  		move.w	#$60,d1
0000B4BA                            
0000B4BA                            Obj2F_Move:
0000B4BA 0828 0003 0028             		btst	#3,$28(a0)
0000B4C0 6700                       		beq.s	loc_AFF2
0000B4C2 4440                       		neg.w	d0
0000B4C4 D041                       		add.w	d1,d0
0000B4C6                            
0000B4C6                            loc_AFF2:
0000B4C6 3228 002C                  		move.w	$2C(a0),d1
0000B4CA 9240                       		sub.w	d0,d1
0000B4CC 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B4D0 4E75                       		rts	
0000B4D2                            ; ===========================================================================
0000B4D2                            
0000B4D2                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B4D2 1028 0034                  		move.b	$34(a0),d0
0000B4D6 4A28 0025                  		tst.b	$25(a0)
0000B4DA 6600                       		bne.s	loc_B010
0000B4DC 5500                       		subq.b	#2,d0
0000B4DE 6400                       		bcc.s	loc_B01C
0000B4E0 7000                       		moveq	#0,d0
0000B4E2 6000                       		bra.s	loc_B01C
0000B4E4                            ; ===========================================================================
0000B4E4                            
0000B4E4                            loc_B010:
0000B4E4 5800                       		addq.b	#4,d0
0000B4E6 0C00 0040                  		cmpi.b	#$40,d0
0000B4EA 6500                       		bcs.s	loc_B01C
0000B4EC 103C 0040                  		move.b	#$40,d0
0000B4F0                            
0000B4F0                            loc_B01C:
0000B4F0 1140 0034                  		move.b	d0,$34(a0)
0000B4F4 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B4FA E848                       		lsr.w	#4,d0
0000B4FC 3200                       		move.w	d0,d1
0000B4FE D068 002C                  		add.w	$2C(a0),d0
0000B502 3140 000C                  		move.w	d0,$C(a0)
0000B506 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B50C 6600                       		bne.s	loc_B07A
0000B50E 4A28 0035                  		tst.b	$35(a0)
0000B512 6600                       		bne.s	loc_B07A
0000B514 117C 0001 0035             		move.b	#1,$35(a0)
0000B51A 6100 0000                  		bsr.w	SingleObjLoad2
0000B51E 6600                       		bne.s	loc_B07A
0000B520 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B524 3368 0008 0008             		move.w	8(a0),8(a1)
0000B52A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B530 5069 002C                  		addq.w	#8,$2C(a1)
0000B534 5769 002C                  		subq.w	#3,$2C(a1)
0000B538 0469 0040 0008             		subi.w	#$40,8(a1)
0000B53E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B544 2348 0038                  		move.l	a0,$38(a1)
0000B548 2448                       		movea.l	a0,a2
0000B54A 6100                       		bsr.s	sub_B09C
0000B54C                            
0000B54C                            loc_B07A:
0000B54C 7400                       		moveq	#0,d2
0000B54E 45E8 0036                  		lea	$36(a0),a2
0000B552 141A                       		move.b	(a2)+,d2
0000B554 5302                       		subq.b	#1,d2
0000B556 6500                       		bcs.s	locret_B09A
0000B558                            
0000B558                            loc_B086:
0000B558 7000                       		moveq	#0,d0
0000B55A 101A                       		move.b	(a2)+,d0
0000B55C ED48                       		lsl.w	#6,d0
0000B55E 0640 D000                  		addi.w	#-$3000,d0
0000B562 3240                       		movea.w	d0,a1
0000B564 3341 003C                  		move.w	d1,$3C(a1)
0000B568 51CA FFEE                  		dbf	d2,loc_B086
0000B56C                            
0000B56C                            locret_B09A:
0000B56C 4E75                       		rts	
0000B56E                            
0000B56E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B56E                            
0000B56E                            
0000B56E                            sub_B09C:
0000B56E 45EA 0036                  		lea	$36(a2),a2
0000B572 7000                       		moveq	#0,d0
0000B574 1012                       		move.b	(a2),d0
0000B576 5212                       		addq.b	#1,(a2)
0000B578 45F2 0001                  		lea	1(a2,d0.w),a2
0000B57C 3009                       		move.w	a1,d0
0000B57E 0440 D000                  		subi.w	#-$3000,d0
0000B582 EC48                       		lsr.w	#6,d0
0000B584 0240 007F                  		andi.w	#$7F,d0
0000B588 1480                       		move.b	d0,(a2)
0000B58A 4E75                       		rts	
0000B58C                            ; End of function sub_B09C
0000B58C                            
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B58C 4A28 0035                  		tst.b	$35(a0)
0000B590 6700                       		beq.s	loc_B0C6
0000B592 4A28 0001                  		tst.b	1(a0)
0000B596 6A00                       		bpl.s	Obj2F_DelFlames
0000B598                            
0000B598                            loc_B0C6:
0000B598 3028 002A                  		move.w	$2A(a0),d0
0000B59C 0240 FF80                  		andi.w	#$FF80,d0
0000B5A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5A4 0441 0080                  		subi.w	#$80,d1
0000B5A8 0241 FF80                  		andi.w	#$FF80,d1
0000B5AC 9041                       		sub.w	d1,d0
0000B5AE 0C40 0280                  		cmpi.w	#$280,d0
0000B5B2 6200 0000                  		bhi.w	DeleteObject
0000B5B6 4E75                       		rts	
0000B5B8                            ; ===========================================================================
0000B5B8                            
0000B5B8                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5B8 7400                       		moveq	#0,d2
0000B5BA                            
0000B5BA                            loc_B0E8:
0000B5BA 45E8 0036                  		lea	$36(a0),a2
0000B5BE 1412                       		move.b	(a2),d2
0000B5C0 421A                       		clr.b	(a2)+
0000B5C2 5302                       		subq.b	#1,d2
0000B5C4 6500                       		bcs.s	locret_B116
0000B5C6                            
0000B5C6                            loc_B0F4:
0000B5C6 7000                       		moveq	#0,d0
0000B5C8 1012                       		move.b	(a2),d0
0000B5CA 421A                       		clr.b	(a2)+
0000B5CC ED48                       		lsl.w	#6,d0
0000B5CE 0640 D000                  		addi.w	#-$3000,d0
0000B5D2 3240                       		movea.w	d0,a1
0000B5D4 6100 0000                  		bsr.w	DeleteObject2
0000B5D8 51CA FFEC                  		dbf	d2,loc_B0F4
0000B5DC 117C 0000 0035             		move.b	#0,$35(a0)
0000B5E2 117C 0000 0034             		move.b	#0,$34(a0)
0000B5E8                            
0000B5E8                            locret_B116:
0000B5E8 4E75                       		rts	
0000B5EA                            ; ===========================================================================
0000B5EA                            ; ---------------------------------------------------------------------------
0000B5EA                            ; Collision data for large moving platforms (MZ)
0000B5EA                            ; ---------------------------------------------------------------------------
0000B5EA                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B636                            		even
0000B636                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B662                            		even
0000B662                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6AE                            		even
0000B6AE                            ; ===========================================================================
0000B6AE                            ; ---------------------------------------------------------------------------
0000B6AE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6AE                            ; (appears when	you walk on sinking platforms)
0000B6AE                            ; ---------------------------------------------------------------------------
0000B6AE                            
0000B6AE                            Obj35:					; XREF: Obj_Index
0000B6AE 7000                       		moveq	#0,d0
0000B6B0 1028 0024                  		move.b	$24(a0),d0
0000B6B4 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6B8 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6BC                            ; ===========================================================================
0000B6BC 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6BE 0000                       		dc.w loc_B238-Obj35_Index
0000B6C0 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6C2                            ; ===========================================================================
0000B6C2                            
0000B6C2                            Obj35_Main:				; XREF: Obj35_Index
0000B6C2 5428 0024                  		addq.b	#2,$24(a0)
0000B6C6 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B6CE 317C 0345 0002             		move.w	#$345,2(a0)
0000B6D4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B6DA 117C 0004 0001             		move.b	#4,1(a0)
0000B6E0 117C 0001 0018             		move.b	#1,$18(a0)
0000B6E6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B6EC 117C 0008 0019             		move.b	#8,$19(a0)
0000B6F2 303C 00C8                  		move.w	#$C8,d0
0000B6F6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B6FC 4A28 0028                  		tst.b	$28(a0)
0000B700 6700                       		beq.s	loc_B238
0000B702 5428 0024                  		addq.b	#2,$24(a0)
0000B706 6000 0000                  		bra.w	Obj35_Move
0000B70A                            ; ===========================================================================
0000B70A                            
0000B70A                            loc_B238:				; XREF: Obj35_Index
0000B70A 2268 0030                  		movea.l	$30(a0),a1
0000B70E 3228 0008                  		move.w	8(a0),d1
0000B712 9268 002A                  		sub.w	$2A(a0),d1
0000B716 0641 000C                  		addi.w	#$C,d1
0000B71A 3001                       		move.w	d1,d0
0000B71C E248                       		lsr.w	#1,d0
0000B71E 1031 0000                  		move.b	(a1,d0.w),d0
0000B722 4440                       		neg.w	d0
0000B724 D068 002C                  		add.w	$2C(a0),d0
0000B728 3400                       		move.w	d0,d2
0000B72A D068 003C                  		add.w	$3C(a0),d0
0000B72E 3140 000C                  		move.w	d0,$C(a0)
0000B732 0C41 0084                  		cmpi.w	#$84,d1
0000B736 6400                       		bcc.s	loc_B2B0
0000B738 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B740 0C41 0080                  		cmpi.w	#$80,d1
0000B744 6400                       		bcc.s	loc_B2B0
0000B746 2028 0008                  		move.l	8(a0),d0
0000B74A 0680 0008 0000             		addi.l	#$80000,d0
0000B750 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B756 6600                       		bne.s	loc_B2B0
0000B758 6100 0000                  		bsr.w	SingleObjLoad2
0000B75C 6600                       		bne.s	loc_B2B0
0000B75E 12BC 0035                  		move.b	#$35,0(a1)
0000B762 3368 0008 0008             		move.w	8(a0),8(a1)
0000B768 3342 002C                  		move.w	d2,$2C(a1)
0000B76C 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B772 137C 0001 0028             		move.b	#1,$28(a1)
0000B778 2468 0038                  		movea.l	$38(a0),a2
0000B77C 6100 FDF0                  		bsr.w	sub_B09C
0000B780                            
0000B780                            loc_B2B0:
0000B780 6000                       		bra.s	Obj35_Animate
0000B782                            ; ===========================================================================
0000B782                            
0000B782                            Obj35_Move:				; XREF: Obj35_Index
0000B782 3028 002C                  		move.w	$2C(a0),d0
0000B786 D068 003C                  		add.w	$3C(a0),d0
0000B78A 3140 000C                  		move.w	d0,$C(a0)
0000B78E                            
0000B78E                            Obj35_Animate:				; XREF: loc_B238
0000B78E 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B794 6100 F4B4                  		bsr.w	AnimateSprite
0000B798 6000 0000                  		bra.w	DisplaySprite
0000B79C                            ; ===========================================================================
0000B79C                            Ani_obj35:
0000B79C                            	include "_anim\obj35.asm"
0000B79C                            ; ---------------------------------------------------------------------------
0000B79C                            ; Animation script - fireball that sits on the	floor (MZ)
0000B79C                            ; ---------------------------------------------------------------------------
0000B79C 0000                       		dc.w byte_B2CE-Ani_obj35
0000B79E 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B7A4                            		even
0000B7A4                            		even
0000B7A4                            
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            ; Sprite mappings - large moving platforms (MZ)
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            Map_obj2F:
0000B7A4                            	include "_maps\obj2F.asm"
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            ; Sprite mappings - large moving platforms (MZ)
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4 0000                       		dc.w byte_B2DA-Map_obj2F
0000B7A6 0000                       		dc.w byte_B31C-Map_obj2F
0000B7A8 0000                       		dc.w byte_B34F-Map_obj2F
0000B7AA 0D                         byte_B2DA:	dc.b $D
0000B7AB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7B0 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7B5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7BA D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7BF F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7C4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7C9 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B7CE D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B7D3 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B7D8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B7DD 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B7E2 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B7E7 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B7EC 0A                         byte_B31C:	dc.b $A
0000B7ED D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B7F2 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B7F7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7FC C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B801 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B806 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B80B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B810 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B815 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B81A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B81F 06                         byte_B34F:	dc.b 6
0000B820 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B825 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B82A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B82F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B834 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B839 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B83E                            		even
0000B83E                            		even
0000B83E                            
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            Map_obj14:
0000B83E                            	include "_maps\obj14.asm"
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B83E                            ; ---------------------------------------------------------------------------
0000B83E 0000                       		dc.w byte_B37A-Map_obj14
0000B840 0000                       		dc.w byte_B380-Map_obj14
0000B842 0000                       		dc.w byte_B386-Map_obj14
0000B844 0000                       		dc.w byte_B38C-Map_obj14
0000B846 0000                       		dc.w byte_B392-Map_obj14
0000B848 0000                       		dc.w byte_B398-Map_obj14
0000B84A 01                         byte_B37A:	dc.b 1
0000B84B E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B850 01                         byte_B380:	dc.b 1
0000B851 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B856 01                         byte_B386:	dc.b 1
0000B857 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B85C 01                         byte_B38C:	dc.b 1
0000B85D F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B862 01                         byte_B392:	dc.b 1
0000B863 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B868 01                         byte_B398:	dc.b 1
0000B869 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B86E                            		even
0000B86E                            		even
0000B86E                            
0000B86E                            ; ===========================================================================
0000B86E                            ; ---------------------------------------------------------------------------
0000B86E                            ; Object 30 - large green glassy blocks	(MZ)
0000B86E                            ; ---------------------------------------------------------------------------
0000B86E                            
0000B86E                            Obj30:					; XREF: Obj_Index
0000B86E 7000                       		moveq	#0,d0
0000B870 1028 0024                  		move.b	$24(a0),d0
0000B874 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B878 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B87C 3028 0008                  		move.w	8(a0),d0
0000B880 0240 FF80                  		andi.w	#$FF80,d0
0000B884 3238 F700                  		move.w	($FFFFF700).w,d1
0000B888 0441 0080                  		subi.w	#$80,d1
0000B88C 0241 FF80                  		andi.w	#$FF80,d1
0000B890 9041                       		sub.w	d1,d0
0000B892 0C40 0280                  		cmpi.w	#$280,d0
0000B896 6200 0000                  		bhi.w	Obj30_Delete
0000B89A 6000 0000                  		bra.w	DisplaySprite
0000B89E                            ; ===========================================================================
0000B89E                            
0000B89E                            Obj30_Delete:
0000B89E 6000 0000                  		bra.w	DeleteObject
0000B8A2                            ; ===========================================================================
0000B8A2 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B8A4 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B8A6 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8A8 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8AA 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8AC                            
0000B8AC 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8AF 0400 01                    		dc.b 4,	0, 1
0000B8B2 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8B5 0800 01                    		dc.b 8,	0, 1
0000B8B8                            ; ===========================================================================
0000B8B8                            
0000B8B8                            Obj30_Main:				; XREF: Obj30_Index
0000B8B8 45F9 0000 B8AC             		lea	(Obj30_Vars1).l,a2
0000B8BE 7201                       		moveq	#1,d1
0000B8C0 117C 0048 0016             		move.b	#$48,$16(a0)
0000B8C6 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B8CC 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B8CE 45F9 0000 B8B2             		lea	(Obj30_Vars2).l,a2
0000B8D4 7201                       		moveq	#1,d1
0000B8D6 117C 0038 0016             		move.b	#$38,$16(a0)
0000B8DC                            
0000B8DC                            loc_B40C:
0000B8DC 2248                       		movea.l	a0,a1
0000B8DE 6000                       		bra.s	Obj30_Load	; load main object
0000B8E0                            ; ===========================================================================
0000B8E0                            
0000B8E0                            Obj30_Loop:
0000B8E0 6100 0000                  		bsr.w	SingleObjLoad2
0000B8E4 6600                       		bne.s	loc_B480
0000B8E6                            
0000B8E6                            Obj30_Load:				; XREF: Obj30_Main
0000B8E6 135A 0024                  		move.b	(a2)+,$24(a1)
0000B8EA 12BC 0030                  		move.b	#$30,0(a1)
0000B8EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8F4 101A                       		move.b	(a2)+,d0
0000B8F6 4880                       		ext.w	d0
0000B8F8 D068 000C                  		add.w	$C(a0),d0
0000B8FC 3340 000C                  		move.w	d0,$C(a1)
0000B900 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B908 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B90E 137C 0004 0001             		move.b	#4,1(a1)
0000B914 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B91A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B920 137C 0020 0019             		move.b	#$20,$19(a1)
0000B926 137C 0004 0018             		move.b	#4,$18(a1)
0000B92C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B930 2348 003C                  		move.l	a0,$3C(a1)
0000B934 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B938                            
0000B938 137C 0010 0019             		move.b	#$10,$19(a1)
0000B93E 137C 0003 0018             		move.b	#3,$18(a1)
0000B944 5029 0028                  		addq.b	#8,$28(a1)
0000B948 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B94E                            
0000B94E                            loc_B480:
0000B94E 317C 0090 0032             		move.w	#$90,$32(a0)
0000B954 08E8 0004 0001             		bset	#4,1(a0)
0000B95A                            
0000B95A                            Obj30_Block012:				; XREF: Obj30_Index
0000B95A 6100 0000                  		bsr.w	Obj30_Types
0000B95E 323C 002B                  		move.w	#$2B,d1
0000B962 343C 0048                  		move.w	#$48,d2
0000B966 363C 0049                  		move.w	#$49,d3
0000B96A 3828 0008                  		move.w	8(a0),d4
0000B96E 6000 0000                  		bra.w	SolidObject
0000B972                            ; ===========================================================================
0000B972                            
0000B972                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B972 2268 003C                  		movea.l	$3C(a0),a1
0000B976 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B97C 6000 0000                  		bra.w	Obj30_Types
0000B980                            ; ===========================================================================
0000B980                            
0000B980                            Obj30_Block34:				; XREF: Obj30_Index
0000B980 6100 0000                  		bsr.w	Obj30_Types
0000B984 323C 002B                  		move.w	#$2B,d1
0000B988 343C 0038                  		move.w	#$38,d2
0000B98C 363C 0039                  		move.w	#$39,d3
0000B990 3828 0008                  		move.w	8(a0),d4
0000B994 6000 0000                  		bra.w	SolidObject
0000B998                            ; ===========================================================================
0000B998                            
0000B998                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B998 2268 003C                  		movea.l	$3C(a0),a1
0000B99C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9A2 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9A8 6000 0002                  		bra.w	*+4
0000B9AC                            
0000B9AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9AC                            
0000B9AC                            
0000B9AC                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9AC 7000                       		moveq	#0,d0
0000B9AE 1028 0028                  		move.b	$28(a0),d0
0000B9B2 0240 0007                  		andi.w	#7,d0
0000B9B6 D040                       		add.w	d0,d0
0000B9B8 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9BC 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9C0                            ; End of function Obj30_Types
0000B9C0                            
0000B9C0                            ; ===========================================================================
0000B9C0 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9C2 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9C4 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B9C6 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B9C8 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B9CA                            ; ===========================================================================
0000B9CA                            
0000B9CA                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B9CA 4E75                       		rts	
0000B9CC                            ; ===========================================================================
0000B9CC                            
0000B9CC                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B9CC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9D0 323C 0040                  		move.w	#$40,d1
0000B9D4 6000                       		bra.s	loc_B514
0000B9D6                            ; ===========================================================================
0000B9D6                            
0000B9D6                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B9D6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9DA 323C 0040                  		move.w	#$40,d1
0000B9DE 4440                       		neg.w	d0
0000B9E0 D041                       		add.w	d1,d0
0000B9E2                            
0000B9E2                            loc_B514:				; XREF: Obj30_Type01
0000B9E2 0828 0003 0028             		btst	#3,$28(a0)
0000B9E8 6700                       		beq.s	loc_B526
0000B9EA 4440                       		neg.w	d0
0000B9EC D041                       		add.w	d1,d0
0000B9EE E208                       		lsr.b	#1,d0
0000B9F0 0640 0020                  		addi.w	#$20,d0
0000B9F4                            
0000B9F4                            loc_B526:
0000B9F4 6000 0000                  		bra.w	loc_B5EE
0000B9F8                            ; ===========================================================================
0000B9F8                            
0000B9F8                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B9F8 0828 0003 0028             		btst	#3,$28(a0)
0000B9FE 6700                       		beq.s	loc_B53E
0000BA00 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA04 0440 0010                  		subi.w	#$10,d0
0000BA08 6000 0000                  		bra.w	loc_B5EE
0000BA0C                            ; ===========================================================================
0000BA0C                            
0000BA0C                            loc_B53E:
0000BA0C 0828 0003 0022             		btst	#3,$22(a0)
0000BA12 6600                       		bne.s	loc_B54E
0000BA14 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA1A 6000                       		bra.s	loc_B582
0000BA1C                            ; ===========================================================================
0000BA1C                            
0000BA1C                            loc_B54E:
0000BA1C 4A28 0034                  		tst.b	$34(a0)
0000BA20 6600                       		bne.s	loc_B582
0000BA22 117C 0001 0034             		move.b	#1,$34(a0)
0000BA28 08E8 0000 0035             		bset	#0,$35(a0)
0000BA2E 6700                       		beq.s	loc_B582
0000BA30 08E8 0007 0034             		bset	#7,$34(a0)
0000BA36 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA3C 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA42 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA48 6600                       		bne.s	loc_B582
0000BA4A 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA50                            
0000BA50                            loc_B582:
0000BA50 4A28 0034                  		tst.b	$34(a0)
0000BA54 6A00                       		bpl.s	loc_B5AA
0000BA56 4A28 0038                  		tst.b	$38(a0)
0000BA5A 6700                       		beq.s	loc_B594
0000BA5C 5328 0038                  		subq.b	#1,$38(a0)
0000BA60 6600                       		bne.s	loc_B5AA
0000BA62                            
0000BA62                            loc_B594:
0000BA62 4A68 0032                  		tst.w	$32(a0)
0000BA66 6700                       		beq.s	loc_B5A4
0000BA68 5368 0032                  		subq.w	#1,$32(a0)
0000BA6C 5368 0036                  		subq.w	#1,$36(a0)
0000BA70 6600                       		bne.s	loc_B5AA
0000BA72                            
0000BA72                            loc_B5A4:
0000BA72 08A8 0007 0034             		bclr	#7,$34(a0)
0000BA78                            
0000BA78                            loc_B5AA:
0000BA78 3028 0032                  		move.w	$32(a0),d0
0000BA7C 6000                       		bra.s	loc_B5EE
0000BA7E                            ; ===========================================================================
0000BA7E                            
0000BA7E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BA7E 0828 0003 0028             		btst	#3,$28(a0)
0000BA84 6700                       		beq.s	Obj30_ChkSwitch
0000BA86 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA8A 0440 0010                  		subi.w	#$10,d0
0000BA8E 6000                       		bra.s	loc_B5EE
0000BA90                            ; ===========================================================================
0000BA90                            
0000BA90                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BA90 4A28 0034                  		tst.b	$34(a0)
0000BA94 6600                       		bne.s	loc_B5E0
0000BA96 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BA9A 7000                       		moveq	#0,d0
0000BA9C 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BAA0 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BAA2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BAA6 6700                       		beq.s	loc_B5EA	; if not, branch
0000BAA8 117C 0001 0034             		move.b	#1,$34(a0)
0000BAAE                            
0000BAAE                            loc_B5E0:
0000BAAE 4A68 0032                  		tst.w	$32(a0)
0000BAB2 6700                       		beq.s	loc_B5EA
0000BAB4 5568 0032                  		subq.w	#2,$32(a0)
0000BAB8                            
0000BAB8                            loc_B5EA:
0000BAB8 3028 0032                  		move.w	$32(a0),d0
0000BABC                            
0000BABC                            loc_B5EE:
0000BABC 3228 0030                  		move.w	$30(a0),d1
0000BAC0 9240                       		sub.w	d0,d1
0000BAC2 3141 000C                  		move.w	d1,$C(a0)
0000BAC6 4E75                       		rts	
0000BAC8                            ; ===========================================================================
0000BAC8                            ; ---------------------------------------------------------------------------
0000BAC8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAC8                            ; ---------------------------------------------------------------------------
0000BAC8                            Map_obj30:
0000BAC8                            	include "_maps\obj30.asm"
0000BAC8                            ; ---------------------------------------------------------------------------
0000BAC8                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAC8                            ; ---------------------------------------------------------------------------
0000BAC8 0000                       		dc.w byte_B600-Map_obj30
0000BACA 0000                       		dc.w byte_B63D-Map_obj30
0000BACC 0000                       		dc.w byte_B648-Map_obj30
0000BACE 0C                         byte_B600:	dc.b $C
0000BACF B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BAD4 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BAD9 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BADE C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BAE3 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BAE8 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BAED 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BAF2 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BAF7 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BAFC 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB01 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB06 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB0B 02                         byte_B63D:	dc.b 2
0000BB0C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB11 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB16 0A                         byte_B648:	dc.b $A
0000BB17 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB1C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB21 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB26 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB2B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB30 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB35 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB3A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB3F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB44 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB4A 00                         		even
0000BB4A 00                         		even
0000BB4A                            
0000BB4A                            ; ===========================================================================
0000BB4A                            ; ---------------------------------------------------------------------------
0000BB4A                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB4A                            ; ---------------------------------------------------------------------------
0000BB4A                            
0000BB4A                            Obj31:					; XREF: Obj_Index
0000BB4A 7000                       		moveq	#0,d0
0000BB4C 1028 0024                  		move.b	$24(a0),d0
0000BB50 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB54 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB58                            ; ===========================================================================
0000BB58 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB5A 0000                       		dc.w loc_B798-Obj31_Index
0000BB5C 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB5E 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB60 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB62                            
0000BB62 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB64 0100                       		dc.b 1,	0
0000BB66                            
0000BB66 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB69 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB6C 08CC 03                    		dc.b 8,	$CC, 3
0000BB6F 06F0 02                    		dc.b 6,	$F0, 2
0000BB72                            
0000BB72 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BB76 5000 7800                  		dc.w $5000, $7800
0000BB7A 3800 5800                  		dc.w $3800, $5800
0000BB7E B800                       		dc.w $B800
0000BB80                            ; ===========================================================================
0000BB80                            
0000BB80                            Obj31_Main:				; XREF: Obj31_Index
0000BB80 7000                       		moveq	#0,d0
0000BB82 1028 0028                  		move.b	$28(a0),d0
0000BB86 6A00                       		bpl.s	loc_B6CE
0000BB88 0240 007F                  		andi.w	#$7F,d0
0000BB8C D040                       		add.w	d0,d0
0000BB8E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BB92 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BB96 101A                       		move.b	(a2)+,d0
0000BB98 1140 0028                  		move.b	d0,$28(a0)
0000BB9C                            
0000BB9C                            loc_B6CE:
0000BB9C 0200 000F                  		andi.b	#$F,d0
0000BBA0 D040                       		add.w	d0,d0
0000BBA2 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BBA6 4A40                       		tst.w	d0
0000BBA8 6600                       		bne.s	loc_B6E0
0000BBAA 3142 0032                  		move.w	d2,$32(a0)
0000BBAE                            
0000BBAE                            loc_B6E0:
0000BBAE 45F9 0000 BB66             		lea	(Obj31_Var).l,a2
0000BBB4 2248                       		movea.l	a0,a1
0000BBB6 7203                       		moveq	#3,d1
0000BBB8 6000                       		bra.s	Obj31_MakeStomper
0000BBBA                            ; ===========================================================================
0000BBBA                            
0000BBBA                            Obj31_Loop:
0000BBBA 6100 0000                  		bsr.w	SingleObjLoad2
0000BBBE 6600 0000                  		bne.w	Obj31_SetSize
0000BBC2                            
0000BBC2                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBC2 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBC6 12BC 0031                  		move.b	#$31,0(a1)
0000BBCA 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBD0 101A                       		move.b	(a2)+,d0
0000BBD2 4880                       		ext.w	d0
0000BBD4 D068 000C                  		add.w	$C(a0),d0
0000BBD8 3340 000C                  		move.w	d0,$C(a1)
0000BBDC 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BBE4 337C 0300 0002             		move.w	#$300,2(a1)
0000BBEA 137C 0004 0001             		move.b	#4,1(a1)
0000BBF0 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBF6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBFC 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC02 3342 0034                  		move.w	d2,$34(a1)
0000BC06 137C 0004 0018             		move.b	#4,$18(a1)
0000BC0C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC10 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC16 6600                       		bne.s	loc_B76A
0000BC18 5341                       		subq.w	#1,d1
0000BC1A 1028 0028                  		move.b	$28(a0),d0
0000BC1E 0240 00F0                  		andi.w	#$F0,d0
0000BC22 0C40 0020                  		cmpi.w	#$20,d0
0000BC26 679A                       		beq.s	Obj31_MakeStomper
0000BC28 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC2E 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC34 5241                       		addq.w	#1,d1
0000BC36                            
0000BC36                            loc_B76A:
0000BC36 2348 003C                  		move.l	a0,$3C(a1)
0000BC3A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC3E                            
0000BC3E 137C 0003 0018             		move.b	#3,$18(a1)
0000BC44                            
0000BC44                            Obj31_SetSize:
0000BC44 7000                       		moveq	#0,d0
0000BC46 1028 0028                  		move.b	$28(a0),d0
0000BC4A E648                       		lsr.w	#3,d0
0000BC4C 0200 000E                  		andi.b	#$E,d0
0000BC50 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC54 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC58 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC5C 6000                       		bra.s	loc_B798
0000BC5E                            ; ===========================================================================
0000BC5E 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC60 3009                       		dc.b $30, 9
0000BC62 100A                       		dc.b $10, $A
0000BC64                            ; ===========================================================================
0000BC64                            
0000BC64                            loc_B798:				; XREF: Obj31_Index
0000BC64 6100 0000                  		bsr.w	Obj31_Types
0000BC68 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC6E 7200                       		moveq	#0,d1
0000BC70 1228 0019                  		move.b	$19(a0),d1
0000BC74 0641 000B                  		addi.w	#$B,d1
0000BC78 343C 000C                  		move.w	#$C,d2
0000BC7C 363C 000D                  		move.w	#$D,d3
0000BC80 3828 0008                  		move.w	8(a0),d4
0000BC84 6100 0000                  		bsr.w	SolidObject
0000BC88 0828 0003 0022             		btst	#3,$22(a0)
0000BC8E 6700                       		beq.s	Obj31_Display
0000BC90 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BC96 6400                       		bcc.s	Obj31_Display
0000BC98 2448                       		movea.l	a0,a2
0000BC9A 41F8 D000                  		lea	($FFFFD000).w,a0
0000BC9E 4EB9 0000 0000             		jsr	KillSonic
0000BCA4 204A                       		movea.l	a2,a0
0000BCA6                            
0000BCA6                            Obj31_Display:
0000BCA6 6100 0000                  		bsr.w	DisplaySprite
0000BCAA 6000 0000                  		bra.w	Obj31_ChkDel
0000BCAE                            ; ===========================================================================
0000BCAE                            
0000BCAE                            loc_B7E2:				; XREF: Obj31_Index
0000BCAE 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCB4 08E8 0004 0001             		bset	#4,1(a0)
0000BCBA 2268 003C                  		movea.l	$3C(a0),a1
0000BCBE 1029 0032                  		move.b	$32(a1),d0
0000BCC2 EA08                       		lsr.b	#5,d0
0000BCC4 5600                       		addq.b	#3,d0
0000BCC6 1140 001A                  		move.b	d0,$1A(a0)
0000BCCA                            
0000BCCA                            loc_B7FE:				; XREF: Obj31_Index
0000BCCA 2268 003C                  		movea.l	$3C(a0),a1
0000BCCE 7000                       		moveq	#0,d0
0000BCD0 1029 0032                  		move.b	$32(a1),d0
0000BCD4 D068 0030                  		add.w	$30(a0),d0
0000BCD8 3140 000C                  		move.w	d0,$C(a0)
0000BCDC                            
0000BCDC                            Obj31_Display2:				; XREF: Obj31_Index
0000BCDC 6100 0000                  		bsr.w	DisplaySprite
0000BCE0                            
0000BCE0                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BCE0 3028 0008                  		move.w	8(a0),d0
0000BCE4 0240 FF80                  		andi.w	#$FF80,d0
0000BCE8 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCEC 0441 0080                  		subi.w	#$80,d1
0000BCF0 0241 FF80                  		andi.w	#$FF80,d1
0000BCF4 9041                       		sub.w	d1,d0
0000BCF6 0C40 0280                  		cmpi.w	#$280,d0
0000BCFA 6200 0000                  		bhi.w	DeleteObject
0000BCFE 4E75                       		rts	
0000BD00                            ; ===========================================================================
0000BD00                            
0000BD00                            Obj31_Types:				; XREF: loc_B798
0000BD00 1028 0028                  		move.b	$28(a0),d0
0000BD04 0240 000F                  		andi.w	#$F,d0
0000BD08 D040                       		add.w	d0,d0
0000BD0A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD0E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD12                            ; ===========================================================================
0000BD12 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD14 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD16 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD18 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD1A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD1C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD1E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD20                            ; ===========================================================================
0000BD20                            
0000BD20                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD20 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD24 7000                       		moveq	#0,d0
0000BD26 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD2A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD2E 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD30 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD34 6A00                       		bpl.s	loc_B872
0000BD36 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD3C 6700                       		beq.s	loc_B8A0
0000BD3E                            
0000BD3E                            loc_B872:
0000BD3E 4A68 0032                  		tst.w	$32(a0)
0000BD42 6700                       		beq.s	loc_B8A0
0000BD44 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD48 0200 000F                  		andi.b	#$F,d0
0000BD4C 6600                       		bne.s	loc_B892
0000BD4E 4A28 0001                  		tst.b	1(a0)
0000BD52 6A00                       		bpl.s	loc_B892
0000BD54 303C 00C7                  		move.w	#$C7,d0
0000BD58 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD5E                            
0000BD5E                            loc_B892:
0000BD5E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD64 6400                       		bcc.s	Obj31_Restart
0000BD66 317C 0000 0032             		move.w	#0,$32(a0)
0000BD6C                            
0000BD6C                            loc_B8A0:
0000BD6C 317C 0000 0012             		move.w	#0,$12(a0)
0000BD72 6000                       		bra.s	Obj31_Restart
0000BD74                            ; ===========================================================================
0000BD74                            
0000BD74                            loc_B8A8:				; XREF: Obj31_Type00
0000BD74 3228 0034                  		move.w	$34(a0),d1
0000BD78 B268 0032                  		cmp.w	$32(a0),d1
0000BD7C 6700                       		beq.s	Obj31_Restart
0000BD7E 3028 0012                  		move.w	$12(a0),d0
0000BD82 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BD88 D168 0032                  		add.w	d0,$32(a0)
0000BD8C B268 0032                  		cmp.w	$32(a0),d1
0000BD90 6200                       		bhi.s	Obj31_Restart
0000BD92 3141 0032                  		move.w	d1,$32(a0)
0000BD96 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BD9C 4A28 0001                  		tst.b	1(a0)
0000BDA0 6A00                       		bpl.s	Obj31_Restart
0000BDA2 303C 00BD                  		move.w	#$BD,d0
0000BDA6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDAC                            
0000BDAC                            Obj31_Restart:
0000BDAC 7000                       		moveq	#0,d0
0000BDAE 1028 0032                  		move.b	$32(a0),d0
0000BDB2 D068 0030                  		add.w	$30(a0),d0
0000BDB6 3140 000C                  		move.w	d0,$C(a0)
0000BDBA 4E75                       		rts	
0000BDBC                            ; ===========================================================================
0000BDBC                            
0000BDBC                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDBC 4A68 0036                  		tst.w	$36(a0)
0000BDC0 6700                       		beq.s	loc_B938
0000BDC2 4A68 0038                  		tst.w	$38(a0)
0000BDC6 6700                       		beq.s	loc_B902
0000BDC8 5368 0038                  		subq.w	#1,$38(a0)
0000BDCC 6000                       		bra.s	loc_B97C
0000BDCE                            ; ===========================================================================
0000BDCE                            
0000BDCE                            loc_B902:
0000BDCE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDD2 0200 000F                  		andi.b	#$F,d0
0000BDD6 6600                       		bne.s	loc_B91C
0000BDD8 4A28 0001                  		tst.b	1(a0)
0000BDDC 6A00                       		bpl.s	loc_B91C
0000BDDE 303C 00C7                  		move.w	#$C7,d0
0000BDE2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDE8                            
0000BDE8                            loc_B91C:
0000BDE8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDEE 6400                       		bcc.s	loc_B97C
0000BDF0 317C 0000 0032             		move.w	#0,$32(a0)
0000BDF6 317C 0000 0012             		move.w	#0,$12(a0)
0000BDFC 317C 0000 0036             		move.w	#0,$36(a0)
0000BE02 6000                       		bra.s	loc_B97C
0000BE04                            ; ===========================================================================
0000BE04                            
0000BE04                            loc_B938:				; XREF: Obj31_Type01
0000BE04 3228 0034                  		move.w	$34(a0),d1
0000BE08 B268 0032                  		cmp.w	$32(a0),d1
0000BE0C 6700                       		beq.s	loc_B97C
0000BE0E 3028 0012                  		move.w	$12(a0),d0
0000BE12 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE18 D168 0032                  		add.w	d0,$32(a0)
0000BE1C B268 0032                  		cmp.w	$32(a0),d1
0000BE20 6200                       		bhi.s	loc_B97C
0000BE22 3141 0032                  		move.w	d1,$32(a0)
0000BE26 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE2C 317C 0001 0036             		move.w	#1,$36(a0)
0000BE32 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE38 4A28 0001                  		tst.b	1(a0)
0000BE3C 6A00                       		bpl.s	loc_B97C
0000BE3E 303C 00BD                  		move.w	#$BD,d0
0000BE42 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE48                            
0000BE48                            loc_B97C:
0000BE48 6000 FF62                  		bra.w	Obj31_Restart
0000BE4C                            ; ===========================================================================
0000BE4C                            
0000BE4C                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE4C 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE50 9068 0008                  		sub.w	8(a0),d0
0000BE54 6400                       		bcc.s	loc_B98C
0000BE56 4440                       		neg.w	d0
0000BE58                            
0000BE58                            loc_B98C:
0000BE58 0C40 0090                  		cmpi.w	#$90,d0
0000BE5C 6400                       		bcc.s	loc_B996
0000BE5E 5228 0028                  		addq.b	#1,$28(a0)
0000BE62                            
0000BE62                            loc_B996:
0000BE62 6000 FF48                  		bra.w	Obj31_Restart
0000BE66                            ; ===========================================================================
0000BE66                            ; ---------------------------------------------------------------------------
0000BE66                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE66                            ; ---------------------------------------------------------------------------
0000BE66                            
0000BE66                            Obj45:					; XREF: Obj_Index
0000BE66 7000                       		moveq	#0,d0
0000BE68 1028 0024                  		move.b	$24(a0),d0
0000BE6C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE70 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BE74                            ; ===========================================================================
0000BE74 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BE76 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BE78 0000                       		dc.w loc_BA8E-Obj45_Index
0000BE7A 0000                       		dc.w Obj45_Display-Obj45_Index
0000BE7C 0000                       		dc.w loc_BA7A-Obj45_Index
0000BE7E                            
0000BE7E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BE81 04E4 01                    		dc.b	4, $E4,	  1
0000BE84 0834 03                    		dc.b	8, $34,	  3
0000BE87 0628 02                    		dc.b	6, $28,	  2
0000BE8A                            
0000BE8A 3800                       word_B9BE:	dc.w $3800
0000BE8C A000                       		dc.w -$6000
0000BE8E 5000                       		dc.w $5000
0000BE90                            ; ===========================================================================
0000BE90                            
0000BE90                            Obj45_Main:				; XREF: Obj45_Index
0000BE90 7000                       		moveq	#0,d0
0000BE92 1028 0028                  		move.b	$28(a0),d0
0000BE96 D040                       		add.w	d0,d0
0000BE98 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BE9C 45F9 0000 BE7E             		lea	(Obj45_Var).l,a2
0000BEA2 2248                       		movea.l	a0,a1
0000BEA4 7203                       		moveq	#3,d1
0000BEA6 6000                       		bra.s	Obj45_Load
0000BEA8                            ; ===========================================================================
0000BEA8                            
0000BEA8                            Obj45_Loop:
0000BEA8 6100 0000                  		bsr.w	SingleObjLoad2
0000BEAC 6600                       		bne.s	loc_BA52
0000BEAE                            
0000BEAE                            Obj45_Load:				; XREF: Obj45_Main
0000BEAE 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEB2 12BC 0045                  		move.b	#$45,0(a1)
0000BEB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BEBC 101A                       		move.b	(a2)+,d0
0000BEBE 4880                       		ext.w	d0
0000BEC0 D068 0008                  		add.w	8(a0),d0
0000BEC4 3340 0008                  		move.w	d0,8(a1)
0000BEC8 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BED0 337C 0300 0002             		move.w	#$300,2(a1)
0000BED6 137C 0004 0001             		move.b	#4,1(a1)
0000BEDC 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BEE2 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BEE8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BEEE 137C 0020 0019             		move.b	#$20,$19(a1)
0000BEF4 3342 0034                  		move.w	d2,$34(a1)
0000BEF8 137C 0004 0018             		move.b	#4,$18(a1)
0000BEFE 0C12 0001                  		cmpi.b	#1,(a2)
0000BF02 6600                       		bne.s	loc_BA40
0000BF04 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF0A                            
0000BF0A                            loc_BA40:
0000BF0A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF0E 2348 003C                  		move.l	a0,$3C(a1)
0000BF12 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF16                            
0000BF16 137C 0003 0018             		move.b	#3,$18(a1)
0000BF1C                            
0000BF1C                            loc_BA52:
0000BF1C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF22                            
0000BF22                            Obj45_Solid:				; XREF: Obj45_Index
0000BF22 3F28 0008                  		move.w	8(a0),-(sp)
0000BF26 6100 0000                  		bsr.w	Obj45_Move
0000BF2A 323C 0017                  		move.w	#$17,d1
0000BF2E 343C 0020                  		move.w	#$20,d2
0000BF32 363C 0020                  		move.w	#$20,d3
0000BF36 381F                       		move.w	(sp)+,d4
0000BF38 6100 0000                  		bsr.w	SolidObject
0000BF3C 6100 0000                  		bsr.w	DisplaySprite
0000BF40 6000 0000                  		bra.w	Obj45_ChkDel
0000BF44                            ; ===========================================================================
0000BF44                            
0000BF44                            loc_BA7A:				; XREF: Obj45_Index
0000BF44 2268 003C                  		movea.l	$3C(a0),a1
0000BF48 1029 0032                  		move.b	$32(a1),d0
0000BF4C 0600 0010                  		addi.b	#$10,d0
0000BF50 EA08                       		lsr.b	#5,d0
0000BF52 5600                       		addq.b	#3,d0
0000BF54 1140 001A                  		move.b	d0,$1A(a0)
0000BF58                            
0000BF58                            loc_BA8E:				; XREF: Obj45_Index
0000BF58 2268 003C                  		movea.l	$3C(a0),a1
0000BF5C 7000                       		moveq	#0,d0
0000BF5E 1029 0032                  		move.b	$32(a1),d0
0000BF62 4440                       		neg.w	d0
0000BF64 D068 0030                  		add.w	$30(a0),d0
0000BF68 3140 0008                  		move.w	d0,8(a0)
0000BF6C                            
0000BF6C                            Obj45_Display:				; XREF: Obj45_Index
0000BF6C 6100 0000                  		bsr.w	DisplaySprite
0000BF70                            
0000BF70                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF70 3028 003A                  		move.w	$3A(a0),d0
0000BF74 0240 FF80                  		andi.w	#$FF80,d0
0000BF78 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF7C 0441 0080                  		subi.w	#$80,d1
0000BF80 0241 FF80                  		andi.w	#$FF80,d1
0000BF84 9041                       		sub.w	d1,d0
0000BF86 0C40 0280                  		cmpi.w	#$280,d0
0000BF8A 6200 0000                  		bhi.w	DeleteObject
0000BF8E 4E75                       		rts	
0000BF90                            
0000BF90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF90                            
0000BF90                            
0000BF90                            Obj45_Move:				; XREF: Obj45_Solid
0000BF90 7000                       		moveq	#0,d0
0000BF92 1028 0028                  		move.b	$28(a0),d0
0000BF96 D040                       		add.w	d0,d0
0000BF98 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BF9C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BFA0                            ; End of function Obj45_Move
0000BFA0                            
0000BFA0                            ; ===========================================================================
0000BFA0 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BFA2 0000                       		dc.w loc_BADA-off_BAD6
0000BFA4                            ; ===========================================================================
0000BFA4                            
0000BFA4                            loc_BADA:				; XREF: off_BAD6
0000BFA4 4A68 0036                  		tst.w	$36(a0)
0000BFA8 6700                       		beq.s	loc_BB08
0000BFAA 4A68 0038                  		tst.w	$38(a0)
0000BFAE 6700                       		beq.s	loc_BAEC
0000BFB0 5368 0038                  		subq.w	#1,$38(a0)
0000BFB4 6000                       		bra.s	loc_BB3C
0000BFB6                            ; ===========================================================================
0000BFB6                            
0000BFB6                            loc_BAEC:
0000BFB6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFBC 6400                       		bcc.s	loc_BB3C
0000BFBE 317C 0000 0032             		move.w	#0,$32(a0)
0000BFC4 317C 0000 0010             		move.w	#0,$10(a0)
0000BFCA 317C 0000 0036             		move.w	#0,$36(a0)
0000BFD0 6000                       		bra.s	loc_BB3C
0000BFD2                            ; ===========================================================================
0000BFD2                            
0000BFD2                            loc_BB08:				; XREF: loc_BADA
0000BFD2 3228 0034                  		move.w	$34(a0),d1
0000BFD6 B268 0032                  		cmp.w	$32(a0),d1
0000BFDA 6700                       		beq.s	loc_BB3C
0000BFDC 3028 0010                  		move.w	$10(a0),d0
0000BFE0 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BFE6 D168 0032                  		add.w	d0,$32(a0)
0000BFEA B268 0032                  		cmp.w	$32(a0),d1
0000BFEE 6200                       		bhi.s	loc_BB3C
0000BFF0 3141 0032                  		move.w	d1,$32(a0)
0000BFF4 317C 0000 0010             		move.w	#0,$10(a0)
0000BFFA 317C 0001 0036             		move.w	#1,$36(a0)
0000C000 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C006                            
0000C006                            loc_BB3C:
0000C006 7000                       		moveq	#0,d0
0000C008 1028 0032                  		move.b	$32(a0),d0
0000C00C 4440                       		neg.w	d0
0000C00E D068 0030                  		add.w	$30(a0),d0
0000C012 3140 0008                  		move.w	d0,8(a0)
0000C016 4E75                       		rts	
0000C018                            ; ===========================================================================
0000C018                            ; ---------------------------------------------------------------------------
0000C018                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C018                            ; ---------------------------------------------------------------------------
0000C018                            Map_obj31:
0000C018                            	include "_maps\obj31.asm"
0000C018                            ; ---------------------------------------------------------------------------
0000C018                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C018                            ; ---------------------------------------------------------------------------
0000C018 0000                       		dc.w byte_BB64-Map_obj31
0000C01A 0000                       		dc.w byte_BB7E-Map_obj31
0000C01C 0000                       		dc.w byte_BB98-Map_obj31
0000C01E 0000                       		dc.w byte_BB9E-Map_obj31
0000C020 0000                       		dc.w byte_BBA9-Map_obj31
0000C022 0000                       		dc.w byte_BBBE-Map_obj31
0000C024 0000                       		dc.w byte_BBDD-Map_obj31
0000C026 0000                       		dc.w byte_BC06-Map_obj31
0000C028 0000                       		dc.w byte_BC06-Map_obj31
0000C02A 0000                       		dc.w byte_BC39-Map_obj31
0000C02C 0000                       		dc.w byte_BC53-Map_obj31
0000C02E 05                         byte_BB64:	dc.b 5
0000C02F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C034 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C039 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C03E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C043 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C048 05                         byte_BB7E:	dc.b 5
0000C049 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C04E F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C053 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C058 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C05D F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C062 01                         byte_BB98:	dc.b 1
0000C063 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C068 02                         byte_BB9E:	dc.b 2
0000C069 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C06E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C073 04                         byte_BBA9:	dc.b 4
0000C074 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C079 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C07E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C083 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C088 06                         byte_BBBE:	dc.b 6
0000C089 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C08E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C093 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C098 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C09D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0A2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0A7 08                         byte_BBDD:	dc.b 8
0000C0A8 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0AD B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0B2 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0B7 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0BC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0C1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0C6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0CB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0D0 0A                         byte_BC06:	dc.b $A
0000C0D1 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C0D6 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C0DB A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0E0 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0E5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0EA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0EF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0F4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0F9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0FE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C103 05                         byte_BC39:	dc.b 5
0000C104 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C109 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C10E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C113 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C118 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C11D 01                         byte_BC53:	dc.b 1
0000C11E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C124 00                         		even
0000C124 00                         		even
0000C124                            
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            Map_obj45:
0000C124                            	include "_maps\obj45.asm"
0000C124                            ; ---------------------------------------------------------------------------
0000C124                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C124                            ; ---------------------------------------------------------------------------
0000C124 0000                       		dc.w byte_BC6C-Map_obj45
0000C126 0000                       		dc.w byte_BC7C-Map_obj45
0000C128 0000                       		dc.w byte_BC8C-Map_obj45
0000C12A 0000                       		dc.w byte_BC92-Map_obj45
0000C12C 0000                       		dc.w byte_BC9D-Map_obj45
0000C12E 0000                       		dc.w byte_BCB2-Map_obj45
0000C130 0000                       		dc.w byte_BCD1-Map_obj45
0000C132 0000                       		dc.w byte_BCFA-Map_obj45
0000C134 0000                       		dc.w byte_BCFA-Map_obj45
0000C136 03                         byte_BC6C:	dc.b 3
0000C137 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C13C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C141 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C146 03                         byte_BC7C:	dc.b 3
0000C147 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C14C FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C151 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C156 01                         byte_BC8C:	dc.b 1
0000C157 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C15C 02                         byte_BC92:	dc.b 2
0000C15D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C162 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C167 04                         byte_BC9D:	dc.b 4
0000C168 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C16D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C172 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C177 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C17C 06                         byte_BCB2:	dc.b 6
0000C17D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C182 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C187 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C18C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C191 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C196 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C19B 08                         byte_BCD1:	dc.b 8
0000C19C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1A1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1A6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1AB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1B0 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1B5 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1BA F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1BF F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1C4 08                         byte_BCFA:	dc.b 8
0000C1C5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1CA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1CF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1D4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1D9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1DE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1E3 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1E8 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1ED F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C1F2 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C1F8 00                         		even
0000C1F8 00                         		even
0000C1F8                            
0000C1F8                            ; ===========================================================================
0000C1F8                            ; ---------------------------------------------------------------------------
0000C1F8                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C1F8                            ; ---------------------------------------------------------------------------
0000C1F8                            
0000C1F8                            Obj32:					; XREF: Obj_Index
0000C1F8 7000                       		moveq	#0,d0
0000C1FA 1028 0024                  		move.b	$24(a0),d0
0000C1FE 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C202 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C206                            ; ===========================================================================
0000C206 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C208 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C20A                            ; ===========================================================================
0000C20A                            
0000C20A                            Obj32_Main:				; XREF: Obj32_Index
0000C20A 5428 0024                  		addq.b	#2,$24(a0)
0000C20E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C216 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C21C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C222 6700                       		beq.s	loc_BD60
0000C224 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C22A                            
0000C22A                            loc_BD60:
0000C22A 117C 0004 0001             		move.b	#4,1(a0)
0000C230 117C 0010 0019             		move.b	#$10,$19(a0)
0000C236 117C 0004 0018             		move.b	#4,$18(a0)
0000C23C 5668 000C                  		addq.w	#3,$C(a0)
0000C240                            
0000C240                            Obj32_Pressed:				; XREF: Obj32_Index
0000C240 4A28 0001                  		tst.b	1(a0)
0000C244 6A00                       		bpl.s	Obj32_Display
0000C246 323C 001B                  		move.w	#$1B,d1
0000C24A 343C 0005                  		move.w	#5,d2
0000C24E 363C 0005                  		move.w	#5,d3
0000C252 3828 0008                  		move.w	8(a0),d4
0000C256 6100 0000                  		bsr.w	SolidObject
0000C25A 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C260 1028 0028                  		move.b	$28(a0),d0
0000C264 0240 000F                  		andi.w	#$F,d0
0000C268 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C26C 47F3 0000                  		lea	(a3,d0.w),a3
0000C270 7600                       		moveq	#0,d3
0000C272 0828 0006 0028             		btst	#6,$28(a0)
0000C278 6700                       		beq.s	loc_BDB2
0000C27A 7607                       		moveq	#7,d3
0000C27C                            
0000C27C                            loc_BDB2:
0000C27C 4A28 0028                  		tst.b	$28(a0)
0000C280 6A00                       		bpl.s	loc_BDBE
0000C282 6100 0000                  		bsr.w	Obj32_MZBlock
0000C286 6600                       		bne.s	loc_BDC8
0000C288                            
0000C288                            loc_BDBE:
0000C288 4A28 0025                  		tst.b	$25(a0)
0000C28C 6600                       		bne.s	loc_BDC8
0000C28E 0793                       		bclr	d3,(a3)
0000C290 6000                       		bra.s	loc_BDDE
0000C292                            ; ===========================================================================
0000C292                            
0000C292                            loc_BDC8:
0000C292 4A13                       		tst.b	(a3)
0000C294 6600                       		bne.s	loc_BDD6
0000C296 303C 00CD                  		move.w	#$CD,d0
0000C29A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C2A0                            
0000C2A0                            loc_BDD6:
0000C2A0 07D3                       		bset	d3,(a3)
0000C2A2 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2A8                            
0000C2A8                            loc_BDDE:
0000C2A8 0828 0005 0028             		btst	#5,$28(a0)
0000C2AE 6700                       		beq.s	Obj32_Display
0000C2B0 5328 001E                  		subq.b	#1,$1E(a0)
0000C2B4 6A00                       		bpl.s	Obj32_Display
0000C2B6 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2BC 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2C2                            
0000C2C2                            Obj32_Display:
0000C2C2 6100 0000                  		bsr.w	DisplaySprite
0000C2C6 3028 0008                  		move.w	8(a0),d0
0000C2CA 0240 FF80                  		andi.w	#$FF80,d0
0000C2CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2D2 0441 0080                  		subi.w	#$80,d1
0000C2D6 0241 FF80                  		andi.w	#$FF80,d1
0000C2DA 9041                       		sub.w	d1,d0
0000C2DC 0C40 0280                  		cmpi.w	#$280,d0
0000C2E0 6200 0000                  		bhi.w	Obj32_Delete
0000C2E4 4E75                       		rts	
0000C2E6                            ; ===========================================================================
0000C2E6                            
0000C2E6                            Obj32_Delete:
0000C2E6 6100 0000                  		bsr.w	DeleteObject
0000C2EA 4E75                       		rts	
0000C2EC                            
0000C2EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C2EC                            
0000C2EC                            
0000C2EC                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C2EC 3F03                       		move.w	d3,-(sp)
0000C2EE 3428 0008                  		move.w	8(a0),d2
0000C2F2 3628 000C                  		move.w	$C(a0),d3
0000C2F6 0442 0010                  		subi.w	#$10,d2
0000C2FA 5143                       		subq.w	#8,d3
0000C2FC 383C 0020                  		move.w	#$20,d4
0000C300 3A3C 0010                  		move.w	#$10,d5
0000C304 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C308 3C3C 005F                  		move.w	#$5F,d6
0000C30C                            
0000C30C                            Obj32_MZLoop:
0000C30C 4A29 0001                  		tst.b	1(a1)
0000C310 6A00                       		bpl.s	loc_BE4E
0000C312 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C316 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C318                            
0000C318                            loc_BE4E:
0000C318 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C31C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C320                            
0000C320 361F                       		move.w	(sp)+,d3
0000C322 7000                       		moveq	#0,d0
0000C324                            
0000C324                            locret_BE5A:
0000C324 4E75                       		rts	
0000C326                            ; ===========================================================================
0000C326 1010                       Obj32_MZData:	dc.b $10, $10
0000C328                            ; ===========================================================================
0000C328                            
0000C328                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C328 7001                       		moveq	#1,d0
0000C32A 0240 003F                  		andi.w	#$3F,d0
0000C32E D040                       		add.w	d0,d0
0000C330 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C334 121A                       		move.b	(a2)+,d1
0000C336 4881                       		ext.w	d1
0000C338 3029 0008                  		move.w	8(a1),d0
0000C33C 9041                       		sub.w	d1,d0
0000C33E 9042                       		sub.w	d2,d0
0000C340 6400                       		bcc.s	loc_BE80
0000C342 D241                       		add.w	d1,d1
0000C344 D041                       		add.w	d1,d0
0000C346 6500                       		bcs.s	loc_BE84
0000C348 60CE                       		bra.s	loc_BE4E
0000C34A                            ; ===========================================================================
0000C34A                            
0000C34A                            loc_BE80:
0000C34A B044                       		cmp.w	d4,d0
0000C34C 62CA                       		bhi.s	loc_BE4E
0000C34E                            
0000C34E                            loc_BE84:
0000C34E 121A                       		move.b	(a2)+,d1
0000C350 4881                       		ext.w	d1
0000C352 3029 000C                  		move.w	$C(a1),d0
0000C356 9041                       		sub.w	d1,d0
0000C358 9043                       		sub.w	d3,d0
0000C35A 6400                       		bcc.s	loc_BE9A
0000C35C D241                       		add.w	d1,d1
0000C35E D041                       		add.w	d1,d0
0000C360 6500                       		bcs.s	loc_BE9E
0000C362 60B4                       		bra.s	loc_BE4E
0000C364                            ; ===========================================================================
0000C364                            
0000C364                            loc_BE9A:
0000C364 B045                       		cmp.w	d5,d0
0000C366 62B0                       		bhi.s	loc_BE4E
0000C368                            
0000C368                            loc_BE9E:
0000C368 361F                       		move.w	(sp)+,d3
0000C36A 7001                       		moveq	#1,d0
0000C36C 4E75                       		rts	
0000C36E                            ; End of function Obj32_MZBlock
0000C36E                            
0000C36E                            ; ===========================================================================
0000C36E                            ; ---------------------------------------------------------------------------
0000C36E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C36E                            ; ---------------------------------------------------------------------------
0000C36E                            Map_obj32:
0000C36E                            	include "_maps\obj32.asm"
0000C36E                            ; ---------------------------------------------------------------------------
0000C36E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C36E                            ; ---------------------------------------------------------------------------
0000C36E 0000                       		dc.w byte_BEAC-Map_obj32
0000C370 0000                       		dc.w byte_BEB7-Map_obj32
0000C372 0000                       		dc.w byte_BEC2-Map_obj32
0000C374 0000                       		dc.w byte_BEB7-Map_obj32
0000C376 02                         byte_BEAC:	dc.b 2
0000C377 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C37C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C381 02                         byte_BEB7:	dc.b 2
0000C382 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C387 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C38C 02                         byte_BEC2:	dc.b 2
0000C38D F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C392 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C397 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C39C                            		even
0000C39C                            		even
0000C39C                            
0000C39C                            ; ===========================================================================
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            ; Object 33 - pushable blocks (MZ, LZ)
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            
0000C39C                            Obj33:					; XREF: Obj_Index
0000C39C 7000                       		moveq	#0,d0
0000C39E 1028 0024                  		move.b	$24(a0),d0
0000C3A2 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C3A6 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3AA                            ; ===========================================================================
0000C3AA 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3AC 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3AE 0000                       		dc.w loc_C02C-Obj33_Index
0000C3B0                            
0000C3B0 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3B2 4001                       		dc.b $40, 1
0000C3B4                            ; ===========================================================================
0000C3B4                            
0000C3B4                            Obj33_Main:				; XREF: Obj33_Index
0000C3B4 5428 0024                  		addq.b	#2,$24(a0)
0000C3B8 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3BE 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3C4 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C3CC 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C3D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C3D8 6600                       		bne.s	loc_BF16
0000C3DA 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C3E0                            
0000C3E0                            loc_BF16:
0000C3E0 117C 0004 0001             		move.b	#4,1(a0)
0000C3E6 117C 0003 0018             		move.b	#3,$18(a0)
0000C3EC 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C3F2 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C3F8 7000                       		moveq	#0,d0
0000C3FA 1028 0028                  		move.b	$28(a0),d0
0000C3FE D040                       		add.w	d0,d0
0000C400 0240 000E                  		andi.w	#$E,d0
0000C404 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C408 115A 0019                  		move.b	(a2)+,$19(a0)
0000C40C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C410 4A28 0028                  		tst.b	$28(a0)
0000C414 6700                       		beq.s	Obj33_ChkGone
0000C416 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C41C                            
0000C41C                            Obj33_ChkGone:
0000C41C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C420 7000                       		moveq	#0,d0
0000C422 1028 0023                  		move.b	$23(a0),d0
0000C426 6700                       		beq.s	loc_BF6E
0000C428 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C42E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C434 6600 0000                  		bne.w	DeleteObject
0000C438                            
0000C438                            loc_BF6E:				; XREF: Obj33_Index
0000C438 4A28 0032                  		tst.b	$32(a0)
0000C43C 6600 0000                  		bne.w	loc_C046
0000C440 7200                       		moveq	#0,d1
0000C442 1228 0019                  		move.b	$19(a0),d1
0000C446 0641 000B                  		addi.w	#$B,d1
0000C44A 343C 0010                  		move.w	#$10,d2
0000C44E 363C 0011                  		move.w	#$11,d3
0000C452 3828 0008                  		move.w	8(a0),d4
0000C456 6100 0000                  		bsr.w	loc_C186
0000C45A 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C460 6600                       		bne.s	loc_BFC6	; if not, branch
0000C462 08A8 0007 0028             		bclr	#7,$28(a0)
0000C468 3028 0008                  		move.w	8(a0),d0
0000C46C 0C40 0A20                  		cmpi.w	#$A20,d0
0000C470 6500                       		bcs.s	loc_BFC6
0000C472 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C476 6400                       		bcc.s	loc_BFC6
0000C478 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C47C 0440 001C                  		subi.w	#$1C,d0
0000C480 3140 000C                  		move.w	d0,$C(a0)
0000C484 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C48A 08E8 0007 0028             		bset	#7,$28(a0)
0000C490                            
0000C490                            loc_BFC6:
0000C490 3028 0008                  		move.w	8(a0),d0
0000C494 0240 FF80                  		andi.w	#$FF80,d0
0000C498 3238 F700                  		move.w	($FFFFF700).w,d1
0000C49C 0441 0080                  		subi.w	#$80,d1
0000C4A0 0241 FF80                  		andi.w	#$FF80,d1
0000C4A4 9041                       		sub.w	d1,d0
0000C4A6 0C40 0280                  		cmpi.w	#$280,d0
0000C4AA 6200                       		bhi.s	loc_BFE6
0000C4AC 6000 0000                  		bra.w	DisplaySprite
0000C4B0                            ; ===========================================================================
0000C4B0                            
0000C4B0                            loc_BFE6:
0000C4B0 3028 0034                  		move.w	$34(a0),d0
0000C4B4 0240 FF80                  		andi.w	#$FF80,d0
0000C4B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4BC 0441 0080                  		subi.w	#$80,d1
0000C4C0 0241 FF80                  		andi.w	#$FF80,d1
0000C4C4 9041                       		sub.w	d1,d0
0000C4C6 0C40 0280                  		cmpi.w	#$280,d0
0000C4CA 6200                       		bhi.s	loc_C016
0000C4CC 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C4D2 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C4D8 117C 0004 0024             		move.b	#4,$24(a0)
0000C4DE 6000                       		bra.s	loc_C02C
0000C4E0                            ; ===========================================================================
0000C4E0                            
0000C4E0                            loc_C016:
0000C4E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4E4 7000                       		moveq	#0,d0
0000C4E6 1028 0023                  		move.b	$23(a0),d0
0000C4EA 6700                       		beq.s	loc_C028
0000C4EC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C4F2                            
0000C4F2                            loc_C028:
0000C4F2 6000 0000                  		bra.w	DeleteObject
0000C4F6                            ; ===========================================================================
0000C4F6                            
0000C4F6                            loc_C02C:				; XREF: Obj33_Index
0000C4F6 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C4FA 6700                       		beq.s	locret_C044
0000C4FC 117C 0002 0024             		move.b	#2,$24(a0)
0000C502 4228 0032                  		clr.b	$32(a0)
0000C506 4268 0010                  		clr.w	$10(a0)
0000C50A 4268 0012                  		clr.w	$12(a0)
0000C50E                            
0000C50E                            locret_C044:
0000C50E 4E75                       		rts	
0000C510                            ; ===========================================================================
0000C510                            
0000C510                            loc_C046:				; XREF: loc_BF6E
0000C510 3F28 0008                  		move.w	8(a0),-(sp)
0000C514 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C51A 6400                       		bcc.s	loc_C056
0000C51C 6100 0000                  		bsr.w	SpeedToPos
0000C520                            
0000C520                            loc_C056:
0000C520 0828 0001 0022             		btst	#1,$22(a0)
0000C526 6700                       		beq.s	loc_C0A0
0000C528 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C52E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C534 4A41                       		tst.w	d1
0000C536 6A00 0000                  		bpl.w	loc_C09E
0000C53A D368 000C                  		add.w	d1,$C(a0)
0000C53E 4268 0012                  		clr.w	$12(a0)
0000C542 08A8 0001 0022             		bclr	#1,$22(a0)
0000C548 3011                       		move.w	(a1),d0
0000C54A 0240 03FF                  		andi.w	#$3FF,d0
0000C54E 0C40 016A                  		cmpi.w	#$16A,d0
0000C552 6500                       		bcs.s	loc_C09E
0000C554 3028 0030                  		move.w	$30(a0),d0
0000C558 E640                       		asr.w	#3,d0
0000C55A 3140 0010                  		move.w	d0,$10(a0)
0000C55E 117C 0001 0032             		move.b	#1,$32(a0)
0000C564 4268 000E                  		clr.w	$E(a0)
0000C568                            
0000C568                            loc_C09E:
0000C568 6000                       		bra.s	loc_C0E6
0000C56A                            ; ===========================================================================
0000C56A                            
0000C56A                            loc_C0A0:
0000C56A 4A68 0010                  		tst.w	$10(a0)
0000C56E 6700 0000                  		beq.w	loc_C0D6
0000C572 6B00                       		bmi.s	loc_C0BC
0000C574 7600                       		moveq	#0,d3
0000C576 1628 0019                  		move.b	$19(a0),d3
0000C57A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C580 4A41                       		tst.w	d1		; has block touched a wall?
0000C582 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C584 6000                       		bra.s	loc_C0E6
0000C586                            ; ===========================================================================
0000C586                            
0000C586                            loc_C0BC:
0000C586 7600                       		moveq	#0,d3
0000C588 1628 0019                  		move.b	$19(a0),d3
0000C58C 4643                       		not.w	d3
0000C58E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C594 4A41                       		tst.w	d1		; has block touched a wall?
0000C596 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C598 6000                       		bra.s	loc_C0E6
0000C59A                            ; ===========================================================================
0000C59A                            
0000C59A                            Obj33_StopPush:
0000C59A 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C59E 6000                       		bra.s	loc_C0E6
0000C5A0                            ; ===========================================================================
0000C5A0                            
0000C5A0                            loc_C0D6:
0000C5A0 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5A8 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5AE 6400                       		bcc.s	loc_C104
0000C5B0                            
0000C5B0                            loc_C0E6:
0000C5B0 7200                       		moveq	#0,d1
0000C5B2 1228 0019                  		move.b	$19(a0),d1
0000C5B6 0641 000B                  		addi.w	#$B,d1
0000C5BA 343C 0010                  		move.w	#$10,d2
0000C5BE 363C 0011                  		move.w	#$11,d3
0000C5C2 381F                       		move.w	(sp)+,d4
0000C5C4 6100 0000                  		bsr.w	loc_C186
0000C5C8 6100                       		bsr.s	Obj33_ChkLava
0000C5CA 6000 FEC4                  		bra.w	loc_BFC6
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            loc_C104:
0000C5CE 381F                       		move.w	(sp)+,d4
0000C5D0 43F8 D000                  		lea	($FFFFD000).w,a1
0000C5D4 08A9 0003 0022             		bclr	#3,$22(a1)
0000C5DA 08A8 0003 0022             		bclr	#3,$22(a0)
0000C5E0 6000 FECE                  		bra.w	loc_BFE6
0000C5E4                            ; ===========================================================================
0000C5E4                            
0000C5E4                            Obj33_ChkLava:
0000C5E4 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C5EA 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C5EC 343C FFE0                  		move.w	#-$20,d2
0000C5F0 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C5F6 6700                       		beq.s	Obj33_LoadLava
0000C5F8 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C5FE 6700                       		beq.s	Obj33_LoadLava
0000C600 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C606 6700                       		beq.s	Obj33_LoadLava
0000C608 4E75                       		rts	
0000C60A                            ; ===========================================================================
0000C60A                            
0000C60A                            Obj33_ChkLava2:
0000C60A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C610 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C612 343C 0020                  		move.w	#$20,d2
0000C616 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C61C 6700                       		beq.s	Obj33_LoadLava
0000C61E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C624 6700                       		beq.s	Obj33_LoadLava
0000C626                            
0000C626                            Obj33_NoLava:
0000C626 4E75                       		rts	
0000C628                            ; ===========================================================================
0000C628                            
0000C628                            Obj33_LoadLava:
0000C628 6100 0000                  		bsr.w	SingleObjLoad
0000C62C 6600                       		bne.s	locret_C184
0000C62E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C632 3368 0008 0008             		move.w	8(a0),8(a1)
0000C638 D569 0008                  		add.w	d2,8(a1)
0000C63C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C642 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C648 2348 003C                  		move.l	a0,$3C(a1)
0000C64C                            
0000C64C                            locret_C184:
0000C64C 4E75                       		rts	
0000C64E                            ; ===========================================================================
0000C64E                            
0000C64E                            loc_C186:				; XREF: loc_BF6E
0000C64E 1028 0025                  		move.b	$25(a0),d0
0000C652 6700 0000                  		beq.w	loc_C218
0000C656 5500                       		subq.b	#2,d0
0000C658 6600                       		bne.s	loc_C1AA
0000C65A 6100 B3BE                  		bsr.w	ExitPlatform
0000C65E 0829 0003 0022             		btst	#3,$22(a1)
0000C664 6600                       		bne.s	loc_C1A4
0000C666 4228 0025                  		clr.b	$25(a0)
0000C66A 4E75                       		rts	
0000C66C                            ; ===========================================================================
0000C66C                            
0000C66C                            loc_C1A4:
0000C66C 3404                       		move.w	d4,d2
0000C66E 6000 B908                  		bra.w	MvSonicOnPtfm
0000C672                            ; ===========================================================================
0000C672                            
0000C672                            loc_C1AA:
0000C672 5500                       		subq.b	#2,d0
0000C674 6600                       		bne.s	loc_C1F2
0000C676 6100 0000                  		bsr.w	SpeedToPos
0000C67A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C680 4EB9 0000 0000             		jsr	ObjHitFloor
0000C686 4A41                       		tst.w	d1
0000C688 6A00 0000                  		bpl.w	locret_C1F0
0000C68C D368 000C                  		add.w	d1,$C(a0)
0000C690 4268 0012                  		clr.w	$12(a0)
0000C694 4228 0025                  		clr.b	$25(a0)
0000C698 3011                       		move.w	(a1),d0
0000C69A 0240 03FF                  		andi.w	#$3FF,d0
0000C69E 0C40 016A                  		cmpi.w	#$16A,d0
0000C6A2 6500                       		bcs.s	locret_C1F0
0000C6A4 3028 0030                  		move.w	$30(a0),d0
0000C6A8 E640                       		asr.w	#3,d0
0000C6AA 3140 0010                  		move.w	d0,$10(a0)
0000C6AE 117C 0001 0032             		move.b	#1,$32(a0)
0000C6B4 4268 000E                  		clr.w	$E(a0)
0000C6B8                            
0000C6B8                            locret_C1F0:
0000C6B8 4E75                       		rts	
0000C6BA                            ; ===========================================================================
0000C6BA                            
0000C6BA                            loc_C1F2:
0000C6BA 6100 0000                  		bsr.w	SpeedToPos
0000C6BE 3028 0008                  		move.w	8(a0),d0
0000C6C2 0240 000C                  		andi.w	#$C,d0
0000C6C6 6600 0000                  		bne.w	locret_C2E4
0000C6CA 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C6D0 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C6D6 4268 0010                  		clr.w	$10(a0)
0000C6DA 5528 0025                  		subq.b	#2,$25(a0)
0000C6DE 4E75                       		rts	
0000C6E0                            ; ===========================================================================
0000C6E0                            
0000C6E0                            loc_C218:
0000C6E0 6100 0000                  		bsr.w	loc_FAC8
0000C6E4 4A44                       		tst.w	d4
0000C6E6 6700 0000                  		beq.w	locret_C2E4
0000C6EA 6B00 0000                  		bmi.w	locret_C2E4
0000C6EE 4A28 0032                  		tst.b	$32(a0)
0000C6F2 6700                       		beq.s	loc_C230
0000C6F4 6000 0000                  		bra.w	locret_C2E4
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            loc_C230:
0000C6F8 4A40                       		tst.w	d0
0000C6FA 6700 0000                  		beq.w	locret_C2E4
0000C6FE 6B00                       		bmi.s	loc_C268
0000C700 0829 0000 0022             		btst	#0,$22(a1)
0000C706 6600 0000                  		bne.w	locret_C2E4
0000C70A 3F00                       		move.w	d0,-(sp)
0000C70C 7600                       		moveq	#0,d3
0000C70E 1628 0019                  		move.b	$19(a0),d3
0000C712 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C718 301F                       		move.w	(sp)+,d0
0000C71A 4A41                       		tst.w	d1
0000C71C 6B00 0000                  		bmi.w	locret_C2E4
0000C720 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C728 7001                       		moveq	#1,d0
0000C72A 323C 0040                  		move.w	#$40,d1
0000C72E 6000                       		bra.s	loc_C294
0000C730                            ; ===========================================================================
0000C730                            
0000C730                            loc_C268:
0000C730 0829 0000 0022             		btst	#0,$22(a1)
0000C736 6700                       		beq.s	locret_C2E4
0000C738 3F00                       		move.w	d0,-(sp)
0000C73A 7600                       		moveq	#0,d3
0000C73C 1628 0019                  		move.b	$19(a0),d3
0000C740 4643                       		not.w	d3
0000C742 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C748 301F                       		move.w	(sp)+,d0
0000C74A 4A41                       		tst.w	d1
0000C74C 6B00                       		bmi.s	locret_C2E4
0000C74E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C756 70FF                       		moveq	#-1,d0
0000C758 323C FFC0                  		move.w	#-$40,d1
0000C75C                            
0000C75C                            loc_C294:
0000C75C 43F8 D000                  		lea	($FFFFD000).w,a1
0000C760 D169 0008                  		add.w	d0,8(a1)
0000C764 3341 0014                  		move.w	d1,$14(a1)
0000C768 337C 0000 0010             		move.w	#0,$10(a1)
0000C76E 3F00                       		move.w	d0,-(sp)
0000C770 303C 00A7                  		move.w	#$A7,d0
0000C774 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C77A 301F                       		move.w	(sp)+,d0
0000C77C 4A28 0028                  		tst.b	$28(a0)
0000C780 6B00                       		bmi.s	locret_C2E4
0000C782 3F00                       		move.w	d0,-(sp)
0000C784 4EB9 0000 0000             		jsr	ObjHitFloor
0000C78A 301F                       		move.w	(sp)+,d0
0000C78C 0C41 0004                  		cmpi.w	#4,d1
0000C790 6F00                       		ble.s	loc_C2E0
0000C792 317C 0400 0010             		move.w	#$400,$10(a0)
0000C798 4A40                       		tst.w	d0
0000C79A 6A00                       		bpl.s	loc_C2D8
0000C79C 4468 0010                  		neg.w	$10(a0)
0000C7A0                            
0000C7A0                            loc_C2D8:
0000C7A0 117C 0006 0025             		move.b	#6,$25(a0)
0000C7A6 6000                       		bra.s	locret_C2E4
0000C7A8                            ; ===========================================================================
0000C7A8                            
0000C7A8                            loc_C2E0:
0000C7A8 D368 000C                  		add.w	d1,$C(a0)
0000C7AC                            
0000C7AC                            locret_C2E4:
0000C7AC 4E75                       		rts	
0000C7AE                            ; ===========================================================================
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            Map_obj33:
0000C7AE                            	include "_maps\obj33.asm"
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7AE                            ; ---------------------------------------------------------------------------
0000C7AE 0000                       		dc.w byte_C2EA-Map_obj33
0000C7B0 0000                       		dc.w byte_C2F0-Map_obj33
0000C7B2 01                         byte_C2EA:	dc.b 1
0000C7B3 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7B8 04                         byte_C2F0:	dc.b 4
0000C7B9 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7BE F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7C3 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C7C8 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C7CE 00                         		even
0000C7CE 00                         		even
0000C7CE                            
0000C7CE                            ; ===========================================================================
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Object 34 - zone title cards
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            
0000C7CE                            Obj34:					; XREF: Obj_Index
0000C7CE 7000                       		moveq	#0,d0
0000C7D0 1028 0024                  		move.b	$24(a0),d0
0000C7D4 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C7D8 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C7DC                            ; ===========================================================================
0000C7DC 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C7DE 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C7E0 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7E2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7E4                            ; ===========================================================================
0000C7E4                            
0000C7E4                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C7E4 2248                       		movea.l	a0,a1
0000C7E6 7000                       		moveq	#0,d0
0000C7E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C7EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C7F2 6600                       		bne.s	Obj34_CheckFZ
0000C7F4 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C7F6                            
0000C7F6                            Obj34_CheckFZ:
0000C7F6 3400                       		move.w	d0,d2
0000C7F8 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C7FE 6600                       		bne.s	Obj34_LoadConfig
0000C800 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C802 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C804                            
0000C804                            Obj34_LoadConfig:
0000C804 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C80A E948                       		lsl.w	#4,d0
0000C80C D6C0                       		adda.w	d0,a3
0000C80E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C814 7203                       		moveq	#3,d1
0000C816                            
0000C816                            Obj34_Loop:
0000C816 12BC 0034                  		move.b	#$34,0(a1)
0000C81A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C81E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C822 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C826 335A 000A                  		move.w	(a2)+,$A(a1)
0000C82A 135A 0024                  		move.b	(a2)+,$24(a1)
0000C82E 101A                       		move.b	(a2)+,d0
0000C830 6600                       		bne.s	Obj34_ActNumber
0000C832 1002                       		move.b	d2,d0
0000C834                            
0000C834                            Obj34_ActNumber:
0000C834 0C00 0007                  		cmpi.b	#7,d0
0000C838 6600                       		bne.s	Obj34_MakeSprite
0000C83A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C83E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C844 6600                       		bne.s	Obj34_MakeSprite
0000C846 5300                       		subq.b	#1,d0
0000C848                            
0000C848                            Obj34_MakeSprite:
0000C848 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C84C 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C854 337C 8580 0002             		move.w	#$8580,2(a1)
0000C85A 137C 0078 0019             		move.b	#$78,$19(a1)
0000C860 137C 0000 0001             		move.b	#0,1(a1)
0000C866 137C 0000 0018             		move.b	#0,$18(a1)
0000C86C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C872 43E9 0040                  		lea	$40(a1),a1	; next object
0000C876 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C87A                            
0000C87A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C87A 7210                       		moveq	#$10,d1		; set horizontal speed
0000C87C 3028 0030                  		move.w	$30(a0),d0
0000C880 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C884 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C886 6C00                       		bge.s	Obj34_Move
0000C888 4441                       		neg.w	d1
0000C88A                            
0000C88A                            Obj34_Move:
0000C88A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C88E                            
0000C88E                            loc_C3C8:
0000C88E 3028 0008                  		move.w	8(a0),d0
0000C892 6B00                       		bmi.s	locret_C3D8
0000C894 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C898 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C89A 6000 0000                  		bra.w	DisplaySprite
0000C89E                            ; ===========================================================================
0000C89E                            
0000C89E                            locret_C3D8:
0000C89E 4E75                       		rts	
0000C8A0                            ; ===========================================================================
0000C8A0                            
0000C8A0                            Obj34_Wait:				; XREF: Obj34_Index
0000C8A0 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C8A4 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C8A6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8AA 6000 0000                  		bra.w	DisplaySprite
0000C8AE                            ; ===========================================================================
0000C8AE                            
0000C8AE                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8AE 4A28 0001                  		tst.b	1(a0)
0000C8B2 6A00                       		bpl.s	Obj34_ChangeArt
0000C8B4 7220                       		moveq	#$20,d1
0000C8B6 3028 0032                  		move.w	$32(a0),d0
0000C8BA B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8BE 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8C0 6C00                       		bge.s	Obj34_Move2
0000C8C2 4441                       		neg.w	d1
0000C8C4                            
0000C8C4                            Obj34_Move2:
0000C8C4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8C8 3028 0008                  		move.w	8(a0),d0
0000C8CC 6B00                       		bmi.s	locret_C412
0000C8CE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8D2 6400                       		bcc.s	locret_C412	; if yes, branch
0000C8D4 6000 0000                  		bra.w	DisplaySprite
0000C8D8                            ; ===========================================================================
0000C8D8                            
0000C8D8                            locret_C412:
0000C8D8 4E75                       		rts	
0000C8DA                            ; ===========================================================================
0000C8DA                            
0000C8DA                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C8DA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C8E0 6600                       		bne.s	Obj34_Delete
0000C8E2 7002                       		moveq	#2,d0
0000C8E4 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C8EA 7000                       		moveq	#0,d0
0000C8EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C8F0 0640 0015                  		addi.w	#$15,d0
0000C8F4 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C8FA                            
0000C8FA                            Obj34_Delete:
0000C8FA 6000 0000                  		bra.w	DeleteObject
0000C8FE                            ; ===========================================================================
0000C8FE 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C900 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C902 00E4                       		dc.w $E4
0000C904 0206                       		dc.b 2,	6
0000C906 00EA                       		dc.w $EA
0000C908 0207                       		dc.b 2,	7
0000C90A 00E0                       		dc.w $E0
0000C90C 020A                       		dc.b 2,	$A
0000C90E                            ; ---------------------------------------------------------------------------
0000C90E                            ; Title	card configuration data
0000C90E                            ; Format:
0000C90E                            ; 4 bytes per item (YYYY XXXX)
0000C90E                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C90E                            ; ---------------------------------------------------------------------------
0000C90E 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C91E 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C92E 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C93E 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C94E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C95E 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C96E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C97E                            ; ===========================================================================
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            
0000C97E                            Obj39:					; XREF: Obj_Index
0000C97E 7000                       		moveq	#0,d0
0000C980 1028 0024                  		move.b	$24(a0),d0
0000C984 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C988 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C98C                            ; ===========================================================================
0000C98C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C98E 0000                       		dc.w loc_C50C-Obj39_Index
0000C990 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C992                            ; ===========================================================================
0000C992                            
0000C992                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C992 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C996 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C998 4E75                       		rts	
0000C99A                            ; ===========================================================================
0000C99A                            
0000C99A                            Obj39_Main:
0000C99A 5428 0024                  		addq.b	#2,$24(a0)
0000C99E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C9A4 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9AA 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9AC 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9B2                            
0000C9B2                            loc_C4EC:
0000C9B2 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9B8 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9C0 317C 855E 0002             		move.w	#$855E,2(a0)
0000C9C6 117C 0000 0001             		move.b	#0,1(a0)
0000C9CC 117C 0000 0018             		move.b	#0,$18(a0)
0000C9D2                            
0000C9D2                            loc_C50C:				; XREF: Obj39_Index
0000C9D2 7210                       		moveq	#$10,d1		; set horizontal speed
0000C9D4 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C9DA 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C9DC 6500                       		bcs.s	Obj39_Move
0000C9DE 4441                       		neg.w	d1
0000C9E0                            
0000C9E0                            Obj39_Move:
0000C9E0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9E4 6000 0000                  		bra.w	DisplaySprite
0000C9E8                            ; ===========================================================================
0000C9E8                            
0000C9E8                            Obj39_SetWait:				; XREF: Obj39_Main
0000C9E8 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C9EE 5428 0024                  		addq.b	#2,$24(a0)
0000C9F2 4E75                       		rts	
0000C9F4                            ; ===========================================================================
0000C9F4                            
0000C9F4                            Obj39_Wait:				; XREF: Obj39_Index
0000C9F4 1038 F605                  		move.b	($FFFFF605).w,d0
0000C9F8 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C9FC 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C9FE 0828 0000 001A             		btst	#0,$1A(a0)
0000CA04 6600                       		bne.s	Obj39_Display
0000CA06 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA0A 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA0C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA10 6000 0000                  		bra.w	DisplaySprite
0000CA14                            ; ===========================================================================
0000CA14                            
0000CA14                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA14 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA18 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA1A 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA20 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA24 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA26 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA2C 6000                       		bra.s	Obj39_Display
0000CA2E                            ; ===========================================================================
0000CA2E                            
0000CA2E                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA2E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA34                            
0000CA34                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA34 6000 0000                  		bra.w	DisplaySprite
0000CA38                            ; ===========================================================================
0000CA38                            ; ---------------------------------------------------------------------------
0000CA38                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA38                            ; ---------------------------------------------------------------------------
0000CA38                            
0000CA38                            Obj3A:					; XREF: Obj_Index
0000CA38 7000                       		moveq	#0,d0
0000CA3A 1028 0024                  		move.b	$24(a0),d0
0000CA3E 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA42 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA46                            ; ===========================================================================
0000CA46 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA48 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA4A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA4C 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA4E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA50 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA52 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA54 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA56 0000                       		dc.w loc_C766-Obj3A_Index
0000CA58                            ; ===========================================================================
0000CA58                            
0000CA58                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA58 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA5C 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA5E 4E75                       		rts	
0000CA60                            ; ===========================================================================
0000CA60                            
0000CA60                            Obj3A_Main:
0000CA60 2248                       		movea.l	a0,a1
0000CA62 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA68 7206                       		moveq	#6,d1
0000CA6A                            
0000CA6A                            Obj3A_Loop:
0000CA6A 12BC 003A                  		move.b	#$3A,0(a1)
0000CA6E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CA72 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CA76 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CA7A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CA7E 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA82 101A                       		move.b	(a2)+,d0
0000CA84 0C00 0006                  		cmpi.b	#6,d0
0000CA88 6600                       		bne.s	loc_C5CA
0000CA8A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CA8E                            
0000CA8E                            loc_C5CA:
0000CA8E 1340 001A                  		move.b	d0,$1A(a1)
0000CA92 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CA9A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAA0 137C 0000 0001             		move.b	#0,1(a1)
0000CAA6 43E9 0040                  		lea	$40(a1),a1
0000CAAA 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CAAE                            
0000CAAE                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CAAE 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAB0 3028 0030                  		move.w	$30(a0),d0
0000CAB4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAB8 6700                       		beq.s	loc_C61A	; if yes, branch
0000CABA 6C00                       		bge.s	Obj3A_Move
0000CABC 4441                       		neg.w	d1
0000CABE                            
0000CABE                            Obj3A_Move:
0000CABE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAC2                            
0000CAC2                            loc_C5FE:				; XREF: loc_C61A
0000CAC2 3028 0008                  		move.w	8(a0),d0
0000CAC6 6B00                       		bmi.s	locret_C60E
0000CAC8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CACC 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CACE 6000 0000                  		bra.w	DisplaySprite
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            locret_C60E:
0000CAD2 4E75                       		rts	
0000CAD4                            ; ===========================================================================
0000CAD4                            
0000CAD4                            loc_C610:				; XREF: loc_C61A
0000CAD4 117C 000E 0024             		move.b	#$E,$24(a0)
0000CADA 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CADE                            ; ===========================================================================
0000CADE                            
0000CADE                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CADE 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CAE4 67EE                       		beq.s	loc_C610
0000CAE6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CAEC 66D4                       		bne.s	loc_C5FE
0000CAEE 5428 0024                  		addq.b	#2,$24(a0)
0000CAF2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CAF8                            
0000CAF8                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CAF8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CAFC 6600                       		bne.s	Obj3A_Display
0000CAFE 5428 0024                  		addq.b	#2,$24(a0)
0000CB02                            
0000CB02                            Obj3A_Display:
0000CB02 6000 0000                  		bra.w	DisplaySprite
0000CB06                            ; ===========================================================================
0000CB06                            
0000CB06                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB06 6100 0000                  		bsr.w	DisplaySprite
0000CB0A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB10 7000                       		moveq	#0,d0
0000CB12 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB16 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB18 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB1C 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB22                            
0000CB22                            Obj3A_RingBonus:
0000CB22 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB26 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB28 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB2C 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB32                            
0000CB32                            Obj3A_ChkBonus:
0000CB32 4A40                       		tst.w	d0		; is there any bonus?
0000CB34 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB36 303C 00C5                  		move.w	#$C5,d0
0000CB3A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB40 5428 0024                  		addq.b	#2,$24(a0)
0000CB44 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB4A 6600                       		bne.s	Obj3A_SetDelay
0000CB4C 5828 0024                  		addq.b	#4,$24(a0)
0000CB50                            
0000CB50                            Obj3A_SetDelay:
0000CB50 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB56                            
0000CB56                            locret_C692:
0000CB56 4E75                       		rts	
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB58 4EB9 0000 0000             		jsr	AddPoints
0000CB5E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB62 0200 0003                  		andi.b	#3,d0
0000CB66 66EE                       		bne.s	locret_C692
0000CB68 303C 00CD                  		move.w	#$CD,d0
0000CB6C 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CB72                            ; ===========================================================================
0000CB72                            
0000CB72                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CB72 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB76 0240 0007                  		andi.w	#7,d0
0000CB7A E748                       		lsl.w	#3,d0
0000CB7C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CB80 0241 0003                  		andi.w	#3,d1
0000CB84 D241                       		add.w	d1,d1
0000CB86 D041                       		add.w	d1,d0
0000CB88 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CB8C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CB90 4A40                       		tst.w	d0
0000CB92 6600                       		bne.s	Obj3A_ChkSS
0000CB94 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CB9A 6000                       		bra.s	Obj3A_Display2
0000CB9C                            ; ===========================================================================
0000CB9C                            
0000CB9C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CB9C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CBA0 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CBA4 6700                       		beq.s	loc_C6EA	; if not, branch
0000CBA6 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBAC 6000                       		bra.s	Obj3A_Display2
0000CBAE                            ; ===========================================================================
0000CBAE                            
0000CBAE                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBAE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBB4                            
0000CBB4                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBB4 6000 0000                  		bra.w	DisplaySprite
0000CBB8                            ; ===========================================================================
0000CBB8                            ; ---------------------------------------------------------------------------
0000CBB8                            ; Level	order array
0000CBB8                            ; ---------------------------------------------------------------------------
0000CBB8                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CBE8                            		even
0000CBE8                            ; ===========================================================================
0000CBE8                            
0000CBE8                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CBE8 7220                       		moveq	#$20,d1		; set horizontal speed
0000CBEA 3028 0032                  		move.w	$32(a0),d0
0000CBEE B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CBF2 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CBF4 6C00                       		bge.s	Obj3A_Move2
0000CBF6 4441                       		neg.w	d1
0000CBF8                            
0000CBF8                            Obj3A_Move2:
0000CBF8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBFC 3028 0008                  		move.w	8(a0),d0
0000CC00 6B00                       		bmi.s	locret_C748
0000CC02 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC06 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC08 6000 0000                  		bra.w	DisplaySprite
0000CC0C                            ; ===========================================================================
0000CC0C                            
0000CC0C                            locret_C748:
0000CC0C 4E75                       		rts	
0000CC0E                            ; ===========================================================================
0000CC0E                            
0000CC0E                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC0E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC14 6600 0000                  		bne.w	DeleteObject
0000CC18 5428 0024                  		addq.b	#2,$24(a0)
0000CC1C 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC20 303C 008D                  		move.w	#$8D,d0
0000CC24 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC2A                            ; ===========================================================================
0000CC2A                            
0000CC2A                            loc_C766:				; XREF: Obj3A_Index
0000CC2A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC2E 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC34 6700 0000                  		beq.w	DeleteObject
0000CC38 4E75                       		rts	
0000CC3A                            ; ===========================================================================
0000CC3A 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC40 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC42 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC48 0201                       		dc.b 2,	1
0000CC4A 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC50 0206                       		dc.b 2,	6
0000CC52 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC58 0202                       		dc.b 2,	2
0000CC5A 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC60 0203                       		dc.b 2,	3
0000CC62 0560 0120 010C             		dc.w $560, $120, $10C
0000CC68 0204                       		dc.b 2,	4
0000CC6A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC70 0205                       		dc.b 2,	5
0000CC72                            ; ===========================================================================
0000CC72                            ; ---------------------------------------------------------------------------
0000CC72                            ; Object 7E - special stage results screen
0000CC72                            ; ---------------------------------------------------------------------------
0000CC72                            
0000CC72                            Obj7E:					; XREF: Obj_Index
0000CC72 7000                       		moveq	#0,d0
0000CC74 1028 0024                  		move.b	$24(a0),d0
0000CC78 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CC7C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CC80                            ; ===========================================================================
0000CC80 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CC82 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CC84 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC86 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CC88 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC8A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC8C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC8E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CC90 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC92 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC94 0000                       		dc.w loc_C91A-Obj7E_Index
0000CC96                            ; ===========================================================================
0000CC96                            
0000CC96                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CC96 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC9A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CC9C 4E75                       		rts	
0000CC9E                            ; ===========================================================================
0000CC9E                            
0000CC9E                            Obj7E_Main:
0000CC9E 2248                       		movea.l	a0,a1
0000CCA0 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CCA6 7203                       		moveq	#3,d1
0000CCA8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCAE 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCB0 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCB2                            
0000CCB2                            Obj7E_Loop:
0000CCB2 12BC 007E                  		move.b	#$7E,0(a1)
0000CCB6 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCBA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCBE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCC2 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCC6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCCA 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CCD2 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCD8 137C 0000 0001             		move.b	#0,1(a1)
0000CCDE 43E9 0040                  		lea	$40(a1),a1
0000CCE2 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CCE6                            
0000CCE6 7007                       		moveq	#7,d0
0000CCE8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CCEC 6700                       		beq.s	loc_C842
0000CCEE 7000                       		moveq	#0,d0
0000CCF0 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CCF4 6600                       		bne.s	loc_C842	; if not, branch
0000CCF6 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CCF8 317C 0018 0008             		move.w	#$18,8(a0)
0000CCFE 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD04                            
0000CD04                            loc_C842:
0000CD04 1140 001A                  		move.b	d0,$1A(a0)
0000CD08                            
0000CD08                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD08 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD0A 3028 0030                  		move.w	$30(a0),d0
0000CD0E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD12 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD14 6C00                       		bge.s	Obj7E_Move
0000CD16 4441                       		neg.w	d1
0000CD18                            
0000CD18                            Obj7E_Move:
0000CD18 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD1C                            
0000CD1C                            loc_C85A:				; XREF: loc_C86C
0000CD1C 3028 0008                  		move.w	8(a0),d0
0000CD20 6B00                       		bmi.s	locret_C86A
0000CD22 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD26 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD28 6000 0000                  		bra.w	DisplaySprite
0000CD2C                            ; ===========================================================================
0000CD2C                            
0000CD2C                            locret_C86A:
0000CD2C 4E75                       		rts	
0000CD2E                            ; ===========================================================================
0000CD2E                            
0000CD2E                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD2E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD34 66E6                       		bne.s	loc_C85A
0000CD36 5428 0024                  		addq.b	#2,$24(a0)
0000CD3A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD40 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD46                            
0000CD46                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD46 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD4A 6600                       		bne.s	Obj7E_Display
0000CD4C 5428 0024                  		addq.b	#2,$24(a0)
0000CD50                            
0000CD50                            Obj7E_Display:
0000CD50 6000 0000                  		bra.w	DisplaySprite
0000CD54                            ; ===========================================================================
0000CD54                            
0000CD54                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD54 6100 0000                  		bsr.w	DisplaySprite
0000CD58 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD5E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD62 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD64 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD6A 700A                       		moveq	#10,d0		; add 10 to score
0000CD6C 4EB9 0000 0000             		jsr	AddPoints
0000CD72 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD76 0200 0003                  		andi.b	#3,d0
0000CD7A 6600                       		bne.s	locret_C8EA
0000CD7C 303C 00CD                  		move.w	#$CD,d0
0000CD80 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD86                            ; ===========================================================================
0000CD86                            
0000CD86                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CD86 303C 00C5                  		move.w	#$C5,d0
0000CD8A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD90 5428 0024                  		addq.b	#2,$24(a0)
0000CD94 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD9A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CDA0 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CDA2 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDA8 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDAC                            
0000CDAC                            locret_C8EA:
0000CDAC 4E75                       		rts	
0000CDAE                            ; ===========================================================================
0000CDAE                            
0000CDAE                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDAE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDB4 6000 0000                  		bra.w	DisplaySprite
0000CDB8                            ; ===========================================================================
0000CDB8                            
0000CDB8                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDB8 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDBE 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDC4 303C 00BF                  		move.w	#$BF,d0
0000CDC8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CDCE 5428 0024                  		addq.b	#2,$24(a0)
0000CDD2 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CDD8 6000 0000                  		bra.w	DisplaySprite
0000CDDC                            ; ===========================================================================
0000CDDC                            
0000CDDC                            loc_C91A:				; XREF: Obj7E_Index
0000CDDC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDE0 0200 000F                  		andi.b	#$F,d0
0000CDE4 6600                       		bne.s	Obj7E_Display2
0000CDE6 0868 0000 001A             		bchg	#0,$1A(a0)
0000CDEC                            
0000CDEC                            Obj7E_Display2:
0000CDEC 6000 0000                  		bra.w	DisplaySprite
0000CDF0                            ; ===========================================================================
0000CDF0 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CDF6 0200                       		dc.b 2,	0		; rountine number, frame number
0000CDF8 0320 0120 0118             		dc.w $320, $120, $118
0000CDFE 0201                       		dc.b 2,	1
0000CE00 0360 0120 0128             		dc.w $360, $120, $128
0000CE06 0202                       		dc.b 2,	2
0000CE08 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE0E 0203                       		dc.b 2,	3
0000CE10 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE16 0206                       		dc.b 2,	6
0000CE18                            ; ===========================================================================
0000CE18                            ; ---------------------------------------------------------------------------
0000CE18                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE18                            ; ---------------------------------------------------------------------------
0000CE18                            
0000CE18                            Obj7F:					; XREF: Obj_Index
0000CE18 7000                       		moveq	#0,d0
0000CE1A 1028 0024                  		move.b	$24(a0),d0
0000CE1E 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE22 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE26                            ; ===========================================================================
0000CE26 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE28 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE2A                            
0000CE2A                            ; ---------------------------------------------------------------------------
0000CE2A                            ; X-axis positions for chaos emeralds
0000CE2A                            ; ---------------------------------------------------------------------------
0000CE2A 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE36                            ; ===========================================================================
0000CE36                            
0000CE36                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE36 2248                       		movea.l	a0,a1
0000CE38 45F9 0000 CE2A             		lea	(Obj7F_PosData).l,a2
0000CE3E 7400                       		moveq	#0,d2
0000CE40 7200                       		moveq	#0,d1
0000CE42 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE46 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE48 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE4C                            
0000CE4C                            Obj7F_Loop:
0000CE4C 12BC 007F                  		move.b	#$7F,0(a1)
0000CE50 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE54 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE5A 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE5E 1633 2000                  		move.b	(a3,d2.w),d3
0000CE62 1343 001A                  		move.b	d3,$1A(a1)
0000CE66 1343 001C                  		move.b	d3,$1C(a1)
0000CE6A 5202                       		addq.b	#1,d2
0000CE6C 5429 0024                  		addq.b	#2,$24(a1)
0000CE70 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CE78 337C 8541 0002             		move.w	#$8541,2(a1)
0000CE7E 137C 0000 0001             		move.b	#0,1(a1)
0000CE84 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE88 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CE8C                            
0000CE8C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CE8C 1028 001A                  		move.b	$1A(a0),d0
0000CE90 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CE96 0C00 0006                  		cmpi.b	#6,d0
0000CE9A 6600                       		bne.s	Obj7F_Display
0000CE9C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CEA2                            
0000CEA2                            Obj7F_Display:
0000CEA2 6000 0000                  		bra.w	DisplaySprite
0000CEA6                            ; ===========================================================================
0000CEA6                            ; ---------------------------------------------------------------------------
0000CEA6                            ; Sprite mappings - zone title cards
0000CEA6                            ; ---------------------------------------------------------------------------
0000CEA6 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CEA8 0000                       		dc.w byte_CA2C-Map_obj34
0000CEAA 0000                       		dc.w byte_CA5A-Map_obj34
0000CEAC 0000                       		dc.w byte_CA7A-Map_obj34
0000CEAE 0000                       		dc.w byte_CAA8-Map_obj34
0000CEB0 0000                       		dc.w byte_CADC-Map_obj34
0000CEB2 0000                       		dc.w byte_CB10-Map_obj34
0000CEB4 0000                       		dc.w byte_CB26-Map_obj34
0000CEB6 0000                       		dc.w byte_CB31-Map_obj34
0000CEB8 0000                       		dc.w byte_CB3C-Map_obj34
0000CEBA 0000                       		dc.w byte_CB47-Map_obj34
0000CEBC 0000                       		dc.w byte_CB8A-Map_obj34
0000CEBE 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CEBF F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEC4 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CEC9 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CECE F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CED3 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CED8 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CEDD F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CEE2 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CEE7 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CEEC F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CEF1 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CEF6 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CEFB 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CEFC F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF01 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF06 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF0B F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF10 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF15 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF1A F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF1F F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF24 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF29 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF2E F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF33 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF38 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF3D F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF42 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF47 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF4C F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF51 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF56 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF5B F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF60 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF65 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF6A 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF6B F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF70 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CF75 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CF7A F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CF7F F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CF84 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CF85 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CF8A F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CF8F F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CF94 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CF99 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CF9E F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CFA3 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFA8 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFAD F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFB2 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFB7 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFBC F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFC1 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CFC6 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CFCB F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CFD0 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CFD5 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CFDA 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CFDB F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CFE0 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CFE5 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CFEA F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CFEF F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CFF4 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CFF9 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CFFE F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D003 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D008 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D00D F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D012 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D017 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D01C F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D021 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D026 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D02B F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D030 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D035 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D03A F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D03F F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D044 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D045 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D04A F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D04F F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D054 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D059 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D05E F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D063 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D068 04                         byte_CB10:	dc.b 4			; ZONE
0000D069 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D06E F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D073 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D078 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D07D 00                         		dc.b 0
0000D07E 02                         byte_CB26:	dc.b 2			; ACT 1
0000D07F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D084 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D089 02                         byte_CB31:	dc.b 2			; ACT 2
0000D08A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D08F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D094 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D095 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D09A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D09F 0D                         byte_CB47:	dc.b $D			; Oval
0000D0A0 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D0A5 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0AA EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0AF F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0B4 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0B9 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0BE 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0C3 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D0C8 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D0CD F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D0D2 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D0D7 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D0DC 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D0E1 00                         		dc.b 0
0000D0E2 05                         byte_CB8A:	dc.b 5			; FINAL
0000D0E3 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D0E8 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D0ED F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D0F2 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D0F7 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D0FC                            		even
0000D0FC                            ; ---------------------------------------------------------------------------
0000D0FC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0FC                            ; ---------------------------------------------------------------------------
0000D0FC                            Map_obj39:
0000D0FC                            	include "_maps\obj39.asm"
0000D0FC                            ; ---------------------------------------------------------------------------
0000D0FC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0FC                            ; ---------------------------------------------------------------------------
0000D0FC 0000                       		dc.w byte_CBAC-Map_obj39
0000D0FE 0000                       		dc.w byte_CBB7-Map_obj39
0000D100 0000                       		dc.w byte_CBC2-Map_obj39
0000D102 0000                       		dc.w byte_CBCD-Map_obj39
0000D104 02                         byte_CBAC:	dc.b 2
0000D105 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D10A F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D10F 02                         byte_CBB7:	dc.b 2
0000D110 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D115 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D11A 02                         byte_CBC2:	dc.b 2
0000D11B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D120 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D125 02                         byte_CBCD:	dc.b 2
0000D126 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D12B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D130                            		even
0000D130                            		even
0000D130                            
0000D130                            ; ---------------------------------------------------------------------------
0000D130                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D130                            ; ---------------------------------------------------------------------------
0000D130 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D132 0000                       		dc.w byte_CC13-Map_obj3A
0000D134 0000                       		dc.w byte_CC32-Map_obj3A
0000D136 0000                       		dc.w byte_CC51-Map_obj3A
0000D138 0000                       		dc.w byte_CC75-Map_obj3A
0000D13A FF6F                       		dc.w byte_CB47-Map_obj3A
0000D13C FF4E                       		dc.w byte_CB26-Map_obj3A
0000D13E FF59                       		dc.w byte_CB31-Map_obj3A
0000D140 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D142 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D143 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D148 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D14D F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D152 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D157 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D15C F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D161 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D166 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D16B F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D170 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D175 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D17A F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D17F F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D184 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D189 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D18E 06                         byte_CC13:	dc.b 6			; PASSED
0000D18F F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D194 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D199 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D19E F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D1A3 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1A8 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1AD 06                         byte_CC32:	dc.b 6			; SCORE
0000D1AE F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1B3 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1B8 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1BD F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1C2 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D1C7 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D1CC 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D1CD F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D1D2 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1D7 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1DC F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1E1 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1E6 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D1EB F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D1F0 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D1F1 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D1F6 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1FB F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D200 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D205 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D20A F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D20F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D214                            		even
0000D214                            ; ---------------------------------------------------------------------------
0000D214                            ; Sprite mappings - special stage results screen
0000D214                            ; ---------------------------------------------------------------------------
0000D214 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D216 0000                       		dc.w byte_CCEE-Map_obj7E
0000D218 0000                       		dc.w byte_CD0D-Map_obj7E
0000D21A FE8B                       		dc.w byte_CB47-Map_obj7E
0000D21C 0000                       		dc.w byte_CD31-Map_obj7E
0000D21E 0000                       		dc.w byte_CD46-Map_obj7E
0000D220 0000                       		dc.w byte_CD5B-Map_obj7E
0000D222 0000                       		dc.w byte_CD6B-Map_obj7E
0000D224 0000                       		dc.w byte_CDA8-Map_obj7E
0000D226 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D227 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D22C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D231 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D236 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D23B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D240 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D245 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D24A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D24F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D254 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D259 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D25E F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D263 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D268 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D269 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D26E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D273 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D278 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D27D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D282 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D287 07                         byte_CD0D:	dc.b 7
0000D288 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D28D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D292 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D297 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D29C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2A1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D2A6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2AB 04                         byte_CD31:	dc.b 4
0000D2AC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2B1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2B6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2BB F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2C0 04                         byte_CD46:	dc.b 4
0000D2C1 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2C6 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2CB F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2D0 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D2D5 03                         byte_CD5B:	dc.b 3
0000D2D6 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2DB F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2E0 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2E5 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D2E6 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D2EB F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D2F0 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D2F5 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D2FA F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D2FF F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D304 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D309 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D30E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D313 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D318 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D31D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D322 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D323 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D328 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D32D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D332 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D337 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D33C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D341 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D346 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D34B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D350 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D355 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D35A F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D35F F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D364 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D369 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D36E                            		even
0000D36E                            ; ---------------------------------------------------------------------------
0000D36E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D36E                            ; ---------------------------------------------------------------------------
0000D36E                            Map_obj7F:
0000D36E                            	include "_maps\obj7F.asm"
0000D36E                            ; ---------------------------------------------------------------------------
0000D36E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D36E                            ; ---------------------------------------------------------------------------
0000D36E 0000                       		dc.w byte_CE02-Map_obj7F
0000D370 0000                       		dc.w byte_CE08-Map_obj7F
0000D372 0000                       		dc.w byte_CE0E-Map_obj7F
0000D374 0000                       		dc.w byte_CE14-Map_obj7F
0000D376 0000                       		dc.w byte_CE1A-Map_obj7F
0000D378 0000                       		dc.w byte_CE20-Map_obj7F
0000D37A 0000                       		dc.w byte_CE26-Map_obj7F
0000D37C 01                         byte_CE02:	dc.b 1
0000D37D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D382 01                         byte_CE08:	dc.b 1
0000D383 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D388 01                         byte_CE0E:	dc.b 1
0000D389 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D38E 01                         byte_CE14:	dc.b 1
0000D38F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D394 01                         byte_CE1A:	dc.b 1
0000D395 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D39A 01                         byte_CE20:	dc.b 1
0000D39B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D3A0 00                         byte_CE26:	dc.b 0			; Blank frame
0000D3A2 00                         		even
0000D3A2 00                         		even
0000D3A2                            
0000D3A2                            ; ===========================================================================
0000D3A2                            ; ---------------------------------------------------------------------------
0000D3A2                            ; Object 36 - spikes
0000D3A2                            ; ---------------------------------------------------------------------------
0000D3A2                            
0000D3A2                            Obj36:					; XREF: Obj_Index
0000D3A2 7000                       		moveq	#0,d0
0000D3A4 1028 0024                  		move.b	$24(a0),d0
0000D3A8 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3AC 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3B0                            ; ===========================================================================
0000D3B0 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3B2 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3B4                            
0000D3B4 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3B6 0110                       		dc.b 1,	$10
0000D3B8 0204                       		dc.b 2,	4
0000D3BA 031C                       		dc.b 3,	$1C
0000D3BC 0440                       		dc.b 4,	$40
0000D3BE 0510                       		dc.b 5,	$10
0000D3C0                            ; ===========================================================================
0000D3C0                            
0000D3C0                            Obj36_Main:				; XREF: Obj36_Index
0000D3C0 5428 0024                  		addq.b	#2,$24(a0)
0000D3C4 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D3CC 317C 051B 0002             		move.w	#$51B,2(a0)
0000D3D2 0028 0004 0001             		ori.b	#4,1(a0)
0000D3D8 117C 0004 0018             		move.b	#4,$18(a0)
0000D3DE 1028 0028                  		move.b	$28(a0),d0
0000D3E2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D3E8 0240 00F0                  		andi.w	#$F0,d0
0000D3EC 43F9 0000 D3B4             		lea	(Obj36_Var).l,a1
0000D3F2 E648                       		lsr.w	#3,d0
0000D3F4 D2C0                       		adda.w	d0,a1
0000D3F6 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D3FA 1159 0019                  		move.b	(a1)+,$19(a0)
0000D3FE 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D404 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D40A                            
0000D40A                            Obj36_Solid:				; XREF: Obj36_Index
0000D40A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D40E 343C 0004                  		move.w	#4,d2
0000D412 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D418 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D41A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D420 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D422 343C 0014                  		move.w	#$14,d2
0000D426                            
0000D426                            ; Spikes types $1x and $5x face	sideways
0000D426                            
0000D426                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D426 323C 001B                  		move.w	#$1B,d1
0000D42A 3602                       		move.w	d2,d3
0000D42C 5243                       		addq.w	#1,d3
0000D42E 3828 0008                  		move.w	8(a0),d4
0000D432 6100 0000                  		bsr.w	SolidObject
0000D436 0828 0003 0022             		btst	#3,$22(a0)
0000D43C 6600                       		bne.s	Obj36_Display
0000D43E 0C44 0001                  		cmpi.w	#1,d4
0000D442 6700                       		beq.s	Obj36_Hurt
0000D444 6000                       		bra.s	Obj36_Display
0000D446                            ; ===========================================================================
0000D446                            
0000D446                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D446                            
0000D446                            Obj36_Upright:				; XREF: Obj36_Solid
0000D446 7200                       		moveq	#0,d1
0000D448 1228 0019                  		move.b	$19(a0),d1
0000D44C 0641 000B                  		addi.w	#$B,d1
0000D450 343C 0010                  		move.w	#$10,d2
0000D454 363C 0011                  		move.w	#$11,d3
0000D458 3828 0008                  		move.w	8(a0),d4
0000D45C 6100 0000                  		bsr.w	SolidObject
0000D460 0828 0003 0022             		btst	#3,$22(a0)
0000D466 6600                       		bne.s	Obj36_Hurt
0000D468 4A44                       		tst.w	d4
0000D46A 6A00                       		bpl.s	Obj36_Display
0000D46C                            
0000D46C                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D46C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D470 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D472 2F08                       		move.l	a0,-(sp)
0000D474 2448                       		movea.l	a0,a2
0000D476 41F8 D000                  		lea	($FFFFD000).w,a0
0000D47A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D480 6400                       		bcc.s	loc_CF20
0000D482 2628 000C                  		move.l	$C(a0),d3
0000D486 3028 0012                  		move.w	$12(a0),d0
0000D48A 48C0                       		ext.l	d0
0000D48C E180                       		asl.l	#8,d0
0000D48E 9680                       		sub.l	d0,d3
0000D490 2143 000C                  		move.l	d3,$C(a0)
0000D494 4EB9 0000 0000             		jsr	HurtSonic
0000D49A                            
0000D49A                            loc_CF20:
0000D49A 205F                       		movea.l	(sp)+,a0
0000D49C                            
0000D49C                            Obj36_Display:
0000D49C 6100 0000                  		bsr.w	DisplaySprite
0000D4A0 3028 0030                  		move.w	$30(a0),d0
0000D4A4 0240 FF80                  		andi.w	#$FF80,d0
0000D4A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4AC 0441 0080                  		subi.w	#$80,d1
0000D4B0 0241 FF80                  		andi.w	#$FF80,d1
0000D4B4 9041                       		sub.w	d1,d0
0000D4B6 0C40 0280                  		cmpi.w	#$280,d0
0000D4BA 6200 0000                  		bhi.w	DeleteObject
0000D4BE 4E75                       		rts	
0000D4C0                            ; ===========================================================================
0000D4C0                            
0000D4C0                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4C0 7000                       		moveq	#0,d0
0000D4C2 1028 0028                  		move.b	$28(a0),d0
0000D4C6 D040                       		add.w	d0,d0
0000D4C8 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D4CC 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D4D0                            ; ===========================================================================
0000D4D0 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D4D2 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D4D4 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D4D6                            ; ===========================================================================
0000D4D6                            
0000D4D6                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D4D6 4E75                       		rts			; don't move the object
0000D4D8                            ; ===========================================================================
0000D4D8                            
0000D4D8                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D4D8 6100 0000                  		bsr.w	Obj36_Wait
0000D4DC 7000                       		moveq	#0,d0
0000D4DE 1028 0034                  		move.b	$34(a0),d0
0000D4E2 D068 0032                  		add.w	$32(a0),d0
0000D4E6 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D4EA 4E75                       		rts	
0000D4EC                            ; ===========================================================================
0000D4EC                            
0000D4EC                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D4EC 6100 0000                  		bsr.w	Obj36_Wait
0000D4F0 7000                       		moveq	#0,d0
0000D4F2 1028 0034                  		move.b	$34(a0),d0
0000D4F6 D068 0030                  		add.w	$30(a0),d0
0000D4FA 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D4FE 4E75                       		rts	
0000D500                            ; ===========================================================================
0000D500                            
0000D500                            Obj36_Wait:
0000D500 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D504 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D506 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D50A 6600                       		bne.s	locret_CFE6
0000D50C 4A28 0001                  		tst.b	1(a0)
0000D510 6A00                       		bpl.s	locret_CFE6
0000D512 303C 00B6                  		move.w	#$B6,d0
0000D516 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D51C 6000                       		bra.s	locret_CFE6
0000D51E                            ; ===========================================================================
0000D51E                            
0000D51E                            loc_CFA4:
0000D51E 4A68 0036                  		tst.w	$36(a0)
0000D522 6700                       		beq.s	loc_CFC6
0000D524 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D52A 6400                       		bcc.s	locret_CFE6
0000D52C 317C 0000 0034             		move.w	#0,$34(a0)
0000D532 317C 0000 0036             		move.w	#0,$36(a0)
0000D538 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D53E 6000                       		bra.s	locret_CFE6
0000D540                            ; ===========================================================================
0000D540                            
0000D540                            loc_CFC6:
0000D540 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D546 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D54C 6500                       		bcs.s	locret_CFE6
0000D54E 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D554 317C 0001 0036             		move.w	#1,$36(a0)
0000D55A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D560                            
0000D560                            locret_CFE6:
0000D560 4E75                       		rts	
0000D562                            ; ===========================================================================
0000D562                            ; ---------------------------------------------------------------------------
0000D562                            ; Sprite mappings - spikes
0000D562                            ; ---------------------------------------------------------------------------
0000D562                            Map_obj36:
0000D562                            	include "_maps\obj36.asm"
0000D562                            ; ---------------------------------------------------------------------------
0000D562                            ; Sprite mappings - spikes
0000D562                            ; ---------------------------------------------------------------------------
0000D562 0000                       		dc.w byte_CFF4-Map_obj36
0000D564 0000                       		dc.w byte_D004-Map_obj36
0000D566 0000                       		dc.w byte_D014-Map_obj36
0000D568 0000                       		dc.w byte_D01A-Map_obj36
0000D56A 0000                       		dc.w byte_D02A-Map_obj36
0000D56C 0000                       		dc.w byte_D049-Map_obj36
0000D56E 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D56F F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D574 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D579 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D57E 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D57F EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D584 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D589 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D58E 01                         byte_D014:	dc.b 1			; 1 spike
0000D58F F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D594 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D595 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D59A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D59F F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D5A4 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D5A5 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5AA F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5AF F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5B4 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5B9 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5BE F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5C3 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5C4 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5CA 00                         		even
0000D5CA 00                         		even
0000D5CA                            
0000D5CA                            ; ===========================================================================
0000D5CA                            ; ---------------------------------------------------------------------------
0000D5CA                            ; Object 3B - purple rock (GHZ)
0000D5CA                            ; ---------------------------------------------------------------------------
0000D5CA                            
0000D5CA                            Obj3B:					; XREF: Obj_Index
0000D5CA 7000                       		moveq	#0,d0
0000D5CC 1028 0024                  		move.b	$24(a0),d0
0000D5D0 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D5D4 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D5D8                            ; ===========================================================================
0000D5D8 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D5DA 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D5DC                            ; ===========================================================================
0000D5DC                            
0000D5DC                            Obj3B_Main:				; XREF: Obj3B_Index
0000D5DC 5428 0024                  		addq.b	#2,$24(a0)
0000D5E0 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D5E8 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D5EE 117C 0004 0001             		move.b	#4,1(a0)
0000D5F4 117C 0013 0019             		move.b	#$13,$19(a0)
0000D5FA 117C 0004 0018             		move.b	#4,$18(a0)
0000D600                            
0000D600                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D600 323C 001B                  		move.w	#$1B,d1
0000D604 343C 0010                  		move.w	#$10,d2
0000D608 363C 0010                  		move.w	#$10,d3
0000D60C 3828 0008                  		move.w	8(a0),d4
0000D610 6100 0000                  		bsr.w	SolidObject
0000D614 6100 0000                  		bsr.w	DisplaySprite
0000D618 3028 0008                  		move.w	8(a0),d0
0000D61C 0240 FF80                  		andi.w	#$FF80,d0
0000D620 3238 F700                  		move.w	($FFFFF700).w,d1
0000D624 0441 0080                  		subi.w	#$80,d1
0000D628 0241 FF80                  		andi.w	#$FF80,d1
0000D62C 9041                       		sub.w	d1,d0
0000D62E 0C40 0280                  		cmpi.w	#$280,d0
0000D632 6200 0000                  		bhi.w	DeleteObject
0000D636 4E75                       		rts	
0000D638                            ; ===========================================================================
0000D638                            ; ---------------------------------------------------------------------------
0000D638                            ; Object 49 - waterfall	sound effect (GHZ)
0000D638                            ; ---------------------------------------------------------------------------
0000D638                            
0000D638                            Obj49:					; XREF: Obj_Index
0000D638 7000                       		moveq	#0,d0
0000D63A 1028 0024                  		move.b	$24(a0),d0
0000D63E 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D642 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D646                            ; ===========================================================================
0000D646 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D648 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D64A                            ; ===========================================================================
0000D64A                            
0000D64A                            Obj49_Main:				; XREF: Obj49_Index
0000D64A 5428 0024                  		addq.b	#2,$24(a0)
0000D64E 117C 0004 0001             		move.b	#4,1(a0)
0000D654                            
0000D654                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D654 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D658 0200 003F                  		andi.b	#$3F,d0
0000D65C 6600                       		bne.s	Obj49_ChkDel
0000D65E 303C 00D0                  		move.w	#$D0,d0
0000D662 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D668                            
0000D668                            Obj49_ChkDel:
0000D668 3028 0008                  		move.w	8(a0),d0
0000D66C 0240 FF80                  		andi.w	#$FF80,d0
0000D670 3238 F700                  		move.w	($FFFFF700).w,d1
0000D674 0441 0080                  		subi.w	#$80,d1
0000D678 0241 FF80                  		andi.w	#$FF80,d1
0000D67C 9041                       		sub.w	d1,d0
0000D67E 0C40 0280                  		cmpi.w	#$280,d0
0000D682 6200 0000                  		bhi.w	DeleteObject
0000D686 4E75                       		rts	
0000D688                            ; ===========================================================================
0000D688                            ; ---------------------------------------------------------------------------
0000D688                            ; Sprite mappings - purple rock	(GHZ)
0000D688                            ; ---------------------------------------------------------------------------
0000D688                            Map_obj3B:
0000D688                            	include "_maps\obj3B.asm"
0000D688                            ; ---------------------------------------------------------------------------
0000D688                            ; Sprite mappings - purple rock	(GHZ)
0000D688                            ; ---------------------------------------------------------------------------
0000D688 0000                       		dc.w byte_D110-Map_obj3B
0000D68A 02                         byte_D110:	dc.b 2
0000D68B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D690 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D696 00                         		even
0000D696 00                         		even
0000D696                            
0000D696                            ; ===========================================================================
0000D696                            ; ---------------------------------------------------------------------------
0000D696                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D696                            ; ---------------------------------------------------------------------------
0000D696                            
0000D696                            Obj3C:					; XREF: Obj_Index
0000D696 7000                       		moveq	#0,d0
0000D698 1028 0024                  		move.b	$24(a0),d0
0000D69C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D6A0 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D6A4 6000 0000                  		bra.w	MarkObjGone
0000D6A8                            ; ===========================================================================
0000D6A8 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6AA 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6AC 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6AE                            ; ===========================================================================
0000D6AE                            
0000D6AE                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6AE 5428 0024                  		addq.b	#2,$24(a0)
0000D6B2 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6BA 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6C0 117C 0004 0001             		move.b	#4,1(a0)
0000D6C6 117C 0010 0019             		move.b	#$10,$19(a0)
0000D6CC 117C 0004 0018             		move.b	#4,$18(a0)
0000D6D2 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D6D8                            
0000D6D8                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D6D8 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D6DE 323C 001B                  		move.w	#$1B,d1
0000D6E2 343C 0020                  		move.w	#$20,d2
0000D6E6 363C 0020                  		move.w	#$20,d3
0000D6EA 3828 0008                  		move.w	8(a0),d4
0000D6EE 6100 0000                  		bsr.w	SolidObject
0000D6F2 0828 0005 0022             		btst	#5,$22(a0)
0000D6F8 6600                       		bne.s	Obj3C_ChkRoll
0000D6FA                            
0000D6FA                            locret_D180:
0000D6FA 4E75                       		rts	
0000D6FC                            ; ===========================================================================
0000D6FC                            
0000D6FC                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D6FC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D702 66F6                       		bne.s	locret_D180	; if not, branch
0000D704 3028 0030                  		move.w	$30(a0),d0
0000D708 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D70A 4440                       		neg.w	d0
0000D70C                            
0000D70C                            Obj3C_ChkSpeed:
0000D70C 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D710 65E8                       		bcs.s	locret_D180	; if not, branch
0000D712 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D718 5869 0008                  		addq.w	#4,8(a1)
0000D71C 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D722 3028 0008                  		move.w	8(a0),d0
0000D726 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D72A 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D72C 5169 0008                  		subq.w	#8,8(a1)
0000D730 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D736                            
0000D736                            Obj3C_Smash:
0000D736 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D73C 08A8 0005 0022             		bclr	#5,$22(a0)
0000D742 08A9 0005 0022             		bclr	#5,$22(a1)
0000D748 7207                       		moveq	#7,d1		; load 8 fragments
0000D74A 343C 0070                  		move.w	#$70,d2
0000D74E 6100                       		bsr.s	SmashObject
0000D750                            
0000D750                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D750 6100 0000                  		bsr.w	SpeedToPos
0000D754 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D75A 6100 0000                  		bsr.w	DisplaySprite
0000D75E 4A28 0001                  		tst.b	1(a0)
0000D762 6A00 0000                  		bpl.w	DeleteObject
0000D766 4E75                       		rts	
0000D768                            
0000D768                            ; ---------------------------------------------------------------------------
0000D768                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D768                            ; ---------------------------------------------------------------------------
0000D768                            
0000D768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D768                            
0000D768                            
0000D768                            SmashObject:				; XREF: Obj3C_Smash
0000D768 7000                       		moveq	#0,d0
0000D76A 1028 001A                  		move.b	$1A(a0),d0
0000D76E D040                       		add.w	d0,d0
0000D770 2668 0004                  		movea.l	4(a0),a3
0000D774 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D778 524B                       		addq.w	#1,a3
0000D77A 08E8 0005 0001             		bset	#5,1(a0)
0000D780 1810                       		move.b	0(a0),d4
0000D782 1A28 0001                  		move.b	1(a0),d5
0000D786 2248                       		movea.l	a0,a1
0000D788 6000                       		bra.s	Smash_LoadFrag
0000D78A                            ; ===========================================================================
0000D78A                            
0000D78A                            Smash_Loop:
0000D78A 6100 0000                  		bsr.w	SingleObjLoad
0000D78E 6600                       		bne.s	Smash_PlaySnd
0000D790 5A4B                       		addq.w	#5,a3
0000D792                            
0000D792                            Smash_LoadFrag:				; XREF: SmashObject
0000D792 137C 0004 0024             		move.b	#4,$24(a1)
0000D798 1284                       		move.b	d4,0(a1)
0000D79A 234B 0004                  		move.l	a3,4(a1)
0000D79E 1345 0001                  		move.b	d5,1(a1)
0000D7A2 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7AE 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7B4 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7BA 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7C0 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7C4 335C 0012                  		move.w	(a4)+,$12(a1)
0000D7C8 B3C8                       		cmpa.l	a0,a1
0000D7CA 6400                       		bcc.s	loc_D268
0000D7CC 2F08                       		move.l	a0,-(sp)
0000D7CE 2049                       		movea.l	a1,a0
0000D7D0 6100 0000                  		bsr.w	SpeedToPos
0000D7D4 D568 0012                  		add.w	d2,$12(a0)
0000D7D8 205F                       		movea.l	(sp)+,a0
0000D7DA 6100 0000                  		bsr.w	DisplaySprite2
0000D7DE                            
0000D7DE                            loc_D268:
0000D7DE 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D7E2                            
0000D7E2                            Smash_PlaySnd:
0000D7E2 303C 00CB                  		move.w	#$CB,d0
0000D7E6 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D7EC                            ; End of function SmashObject
0000D7EC                            
0000D7EC                            ; ===========================================================================
0000D7EC                            ; Smashed block	fragment speeds
0000D7EC                            ;
0000D7EC 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D7F0 0600 FF00                  		dc.w $600, $FF00
0000D7F4 0600 0100                  		dc.w $600, $100
0000D7F8 0400 0500                  		dc.w $400, $500
0000D7FC 0600 FA00                  		dc.w $600, $FA00
0000D800 0800 FE00                  		dc.w $800, $FE00
0000D804 0800 0200                  		dc.w $800, $200
0000D808 0600 0600                  		dc.w $600, $600
0000D80C                            
0000D80C FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D810 F800 FE00                  		dc.w $F800, $FE00
0000D814 F800 0200                  		dc.w $F800, $200
0000D818 FA00 0600                  		dc.w $FA00, $600
0000D81C FC00 FB00                  		dc.w $FC00, $FB00
0000D820 FA00 FF00                  		dc.w $FA00, $FF00
0000D824 FA00 0100                  		dc.w $FA00, $100
0000D828 FC00 0500                  		dc.w $FC00, $500
0000D82C                            ; ---------------------------------------------------------------------------
0000D82C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D82C                            ; ---------------------------------------------------------------------------
0000D82C                            Map_obj3C:
0000D82C                            	include "_maps\obj3C.asm"
0000D82C                            ; ---------------------------------------------------------------------------
0000D82C                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D82C                            ; ---------------------------------------------------------------------------
0000D82C 0000                       		dc.w byte_D2BC-Map_obj3C
0000D82E 0000                       		dc.w byte_D2E5-Map_obj3C
0000D830 0000                       		dc.w byte_D30E-Map_obj3C
0000D832 08                         byte_D2BC:	dc.b 8
0000D833 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D838 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D83D 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D842 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D847 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D84C F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D851 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D856 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D85B 08                         byte_D2E5:	dc.b 8
0000D85C E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D861 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D866 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D86B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D870 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D875 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D87A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D87F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D884 08                         byte_D30E:	dc.b 8
0000D885 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D88A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D88F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D894 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D899 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D89E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D8A3 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8A8 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8AE 00                         		even
0000D8AE 00                         		even
0000D8AE                            
0000D8AE                            ; ---------------------------------------------------------------------------
0000D8AE                            ; Object code loading subroutine
0000D8AE                            ; ---------------------------------------------------------------------------
0000D8AE                            
0000D8AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8AE                            
0000D8AE                            
0000D8AE                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8AE 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8B2 7E7F                       		moveq	#$7F,d7
0000D8B4 7000                       		moveq	#0,d0
0000D8B6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8BC 6400                       		bcc.s	loc_D362
0000D8BE                            
0000D8BE                            loc_D348:
0000D8BE 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8C0 6700                       		beq.s	loc_D358
0000D8C2 D040                       		add.w	d0,d0
0000D8C4 D040                       		add.w	d0,d0
0000D8C6 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D8CA 4E91                       		jsr	(a1)		; run the object's code
0000D8CC 7000                       		moveq	#0,d0
0000D8CE                            
0000D8CE                            loc_D358:
0000D8CE 41E8 0040                  		lea	$40(a0),a0	; next object
0000D8D2 51CF FFEA                  		dbf	d7,loc_D348
0000D8D6 4E75                       		rts	
0000D8D8                            ; ===========================================================================
0000D8D8                            
0000D8D8                            loc_D362:
0000D8D8 7E1F                       		moveq	#$1F,d7
0000D8DA 61E2                       		bsr.s	loc_D348
0000D8DC 7E5F                       		moveq	#$5F,d7
0000D8DE                            
0000D8DE                            loc_D368:
0000D8DE 7000                       		moveq	#0,d0
0000D8E0 1010                       		move.b	(a0),d0
0000D8E2 6700                       		beq.s	loc_D378
0000D8E4 4A28 0001                  		tst.b	1(a0)
0000D8E8 6A00                       		bpl.s	loc_D378
0000D8EA 6100 0000                  		bsr.w	DisplaySprite
0000D8EE                            
0000D8EE                            loc_D378:
0000D8EE 41E8 0040                  		lea	$40(a0),a0
0000D8F2                            
0000D8F2                            loc_D37C:
0000D8F2 51CF FFEA                  		dbf	d7,loc_D368
0000D8F6 4E75                       		rts	
0000D8F8                            ; End of function ObjectsLoad
0000D8F8                            
0000D8F8                            ; ===========================================================================
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8                            ; Object pointers
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8                            Obj_Index:
0000D8F8                            	include "_inc\Object pointers.asm"
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8                            ; Object pointers
0000D8F8                            ; ---------------------------------------------------------------------------
0000D8F8 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D908 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D918 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D928 0000 0000 0000 AB4E 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D938 0000 7786 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D948 0000 7DAC 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D958 0000 85FA 0000 8662 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D968 0000 8CAC 0000 8F9A 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D978 0000 0000 0000 9C4A 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D988 0000 9F82 0000 A56E 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D998 0000 98A6 0000 8D82 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9A8 0000 B13C 0000 A762 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9B8 0000 BB4A 0000 C1F8 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D9C8 0000 B6AE 0000 D3A2 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D9D8 0000 C97E 0000 CA38 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D9E8 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D9F8 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA08 0000 BE66 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA18 0000 D638 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA28 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA38 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA48 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA58 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA68 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DA78 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DA88 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DA98 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DAA8 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DAB8 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DAC8 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DAD8 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DAE8 0000 0000 0000 CC72 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DAF8 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB08 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB18 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB18 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB28                            
0000DB28                            ; ---------------------------------------------------------------------------
0000DB28                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB28                            ; ---------------------------------------------------------------------------
0000DB28                            
0000DB28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB28                            
0000DB28                            
0000DB28                            ObjectFall:
0000DB28 2428 0008                  		move.l	8(a0),d2
0000DB2C 2628 000C                  		move.l	$C(a0),d3
0000DB30 3028 0010                  		move.w	$10(a0),d0
0000DB34 48C0                       		ext.l	d0
0000DB36 E180                       		asl.l	#8,d0
0000DB38 D480                       		add.l	d0,d2
0000DB3A 3028 0012                  		move.w	$12(a0),d0
0000DB3E 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB44 48C0                       		ext.l	d0
0000DB46 E180                       		asl.l	#8,d0
0000DB48 D680                       		add.l	d0,d3
0000DB4A 2142 0008                  		move.l	d2,8(a0)
0000DB4E 2143 000C                  		move.l	d3,$C(a0)
0000DB52 4E75                       		rts	
0000DB54                            ; End of function ObjectFall
0000DB54                            
0000DB54                            ; ---------------------------------------------------------------------------
0000DB54                            ; Subroutine translating object	speed to update	object position
0000DB54                            ; ---------------------------------------------------------------------------
0000DB54                            
0000DB54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB54                            
0000DB54                            
0000DB54                            SpeedToPos:
0000DB54 2428 0008                  		move.l	8(a0),d2
0000DB58 2628 000C                  		move.l	$C(a0),d3
0000DB5C 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB60 48C0                       		ext.l	d0
0000DB62 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB64 D480                       		add.l	d0,d2		; add to x-axis	position
0000DB66 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB6A 48C0                       		ext.l	d0
0000DB6C E180                       		asl.l	#8,d0		; multiply by $100
0000DB6E D680                       		add.l	d0,d3		; add to y-axis	position
0000DB70 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DB74 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DB78 4E75                       		rts	
0000DB7A                            ; End of function SpeedToPos
0000DB7A                            
0000DB7A                            ; ---------------------------------------------------------------------------
0000DB7A                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DB7A                            ; ---------------------------------------------------------------------------
0000DB7A                            
0000DB7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB7A                            
0000DB7A                            
0000DB7A                            DisplaySprite:
0000DB7A 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DB7E 3028 0018                  		move.w	$18(a0),d0
0000DB82 E248                       		lsr.w	#1,d0
0000DB84 0240 0380                  		andi.w	#$380,d0
0000DB88 D2C0                       		adda.w	d0,a1
0000DB8A 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DB8E 6400                       		bcc.s	locret_D620
0000DB90 5451                       		addq.w	#2,(a1)
0000DB92 D2D1                       		adda.w	(a1),a1
0000DB94 3288                       		move.w	a0,(a1)
0000DB96                            
0000DB96                            locret_D620:
0000DB96 4E75                       		rts	
0000DB98                            ; End of function DisplaySprite
0000DB98                            
0000DB98                            ; ---------------------------------------------------------------------------
0000DB98                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DB98                            ; ---------------------------------------------------------------------------
0000DB98                            
0000DB98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB98                            
0000DB98                            
0000DB98                            DisplaySprite2:
0000DB98 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DB9C 3029 0018                  		move.w	$18(a1),d0
0000DBA0 E248                       		lsr.w	#1,d0
0000DBA2 0240 0380                  		andi.w	#$380,d0
0000DBA6 D4C0                       		adda.w	d0,a2
0000DBA8 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBAC 6400                       		bcc.s	locret_D63E
0000DBAE 5452                       		addq.w	#2,(a2)
0000DBB0 D4D2                       		adda.w	(a2),a2
0000DBB2 3489                       		move.w	a1,(a2)
0000DBB4                            
0000DBB4                            locret_D63E:
0000DBB4 4E75                       		rts	
0000DBB6                            ; End of function DisplaySprite2
0000DBB6                            
0000DBB6                            ; ---------------------------------------------------------------------------
0000DBB6                            ; Subroutine to	delete an object
0000DBB6                            ; ---------------------------------------------------------------------------
0000DBB6                            
0000DBB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBB6                            
0000DBB6                            
0000DBB6                            DeleteObject:
0000DBB6 2248                       		movea.l	a0,a1
0000DBB8                            
0000DBB8                            DeleteObject2:
0000DBB8 7200                       		moveq	#0,d1
0000DBBA 700F                       		moveq	#$F,d0
0000DBBC                            
0000DBBC                            loc_D646:
0000DBBC 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBBE 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBC2 4E75                       		rts	
0000DBC4                            ; End of function DeleteObject
0000DBC4                            
0000DBC4                            ; ===========================================================================
0000DBC4 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DBC8 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DBCC 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DBD0 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DBD4                            ; ---------------------------------------------------------------------------
0000DBD4                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DBD4                            ; ---------------------------------------------------------------------------
0000DBD4                            
0000DBD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBD4                            
0000DBD4                            
0000DBD4                            BuildSprites:				; XREF: TitleScreen; et al
0000DBD4 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DBD8 7A00                       		moveq	#0,d5
0000DBDA 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DBDE 7E07                       		moveq	#7,d7
0000DBE0                            
0000DBE0                            loc_D66A:
0000DBE0 4A54                       		tst.w	(a4)
0000DBE2 6700 0000                  		beq.w	loc_D72E
0000DBE6 7C02                       		moveq	#2,d6
0000DBE8                            
0000DBE8                            loc_D672:
0000DBE8 3074 6000                  		movea.w	(a4,d6.w),a0
0000DBEC 4A10                       		tst.b	(a0)
0000DBEE 6700 0000                  		beq.w	loc_D726
0000DBF2 08A8 0007 0001             		bclr	#7,1(a0)
0000DBF8 1028 0001                  		move.b	1(a0),d0
0000DBFC 1800                       		move.b	d0,d4
0000DBFE 0240 000C                  		andi.w	#$C,d0
0000DC02 6700                       		beq.s	loc_D6DE
0000DC04 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC08 7000                       		moveq	#0,d0
0000DC0A 1028 0019                  		move.b	$19(a0),d0
0000DC0E 3628 0008                  		move.w	8(a0),d3
0000DC12 9651                       		sub.w	(a1),d3
0000DC14 3203                       		move.w	d3,d1
0000DC16 D240                       		add.w	d0,d1
0000DC18 6B00 0000                  		bmi.w	loc_D726
0000DC1C 3203                       		move.w	d3,d1
0000DC1E 9240                       		sub.w	d0,d1
0000DC20 0C41 0140                  		cmpi.w	#$140,d1
0000DC24 6C00                       		bge.s	loc_D726
0000DC26 0643 0080                  		addi.w	#$80,d3
0000DC2A 0804 0004                  		btst	#4,d4
0000DC2E 6700                       		beq.s	loc_D6E8
0000DC30 7000                       		moveq	#0,d0
0000DC32 1028 0016                  		move.b	$16(a0),d0
0000DC36 3428 000C                  		move.w	$C(a0),d2
0000DC3A 9469 0004                  		sub.w	4(a1),d2
0000DC3E 3202                       		move.w	d2,d1
0000DC40 D240                       		add.w	d0,d1
0000DC42 6B00                       		bmi.s	loc_D726
0000DC44 3202                       		move.w	d2,d1
0000DC46 9240                       		sub.w	d0,d1
0000DC48 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC4C 6C00                       		bge.s	loc_D726
0000DC4E 0642 0080                  		addi.w	#$80,d2
0000DC52 6000                       		bra.s	loc_D700
0000DC54                            ; ===========================================================================
0000DC54                            
0000DC54                            loc_D6DE:
0000DC54 3428 000A                  		move.w	$A(a0),d2
0000DC58 3628 0008                  		move.w	8(a0),d3
0000DC5C 6000                       		bra.s	loc_D700
0000DC5E                            ; ===========================================================================
0000DC5E                            
0000DC5E                            loc_D6E8:
0000DC5E 3428 000C                  		move.w	$C(a0),d2
0000DC62 9469 0004                  		sub.w	4(a1),d2
0000DC66 0642 0080                  		addi.w	#$80,d2
0000DC6A 0C42 0060                  		cmpi.w	#$60,d2
0000DC6E 6500                       		bcs.s	loc_D726
0000DC70 0C42 0180                  		cmpi.w	#$180,d2
0000DC74 6400                       		bcc.s	loc_D726
0000DC76                            
0000DC76                            loc_D700:
0000DC76 2268 0004                  		movea.l	4(a0),a1
0000DC7A 7200                       		moveq	#0,d1
0000DC7C 0804 0005                  		btst	#5,d4
0000DC80 6600                       		bne.s	loc_D71C
0000DC82 1228 001A                  		move.b	$1A(a0),d1
0000DC86 D201                       		add.b	d1,d1
0000DC88 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DC8C 1219                       		move.b	(a1)+,d1
0000DC8E 5301                       		subq.b	#1,d1
0000DC90 6B00                       		bmi.s	loc_D720
0000DC92                            
0000DC92                            loc_D71C:
0000DC92 6100 0000                  		bsr.w	sub_D750
0000DC96                            
0000DC96                            loc_D720:
0000DC96 08E8 0007 0001             		bset	#7,1(a0)
0000DC9C                            
0000DC9C                            loc_D726:
0000DC9C 5446                       		addq.w	#2,d6
0000DC9E 5554                       		subq.w	#2,(a4)
0000DCA0 6600 FF46                  		bne.w	loc_D672
0000DCA4                            
0000DCA4                            loc_D72E:
0000DCA4 49EC 0080                  		lea	$80(a4),a4
0000DCA8 51CF FF36                  		dbf	d7,loc_D66A
0000DCAC 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCB0 0C05 0050                  		cmpi.b	#$50,d5
0000DCB4 6700                       		beq.s	loc_D748
0000DCB6 24BC 0000 0000             		move.l	#0,(a2)
0000DCBC 4E75                       		rts	
0000DCBE                            ; ===========================================================================
0000DCBE                            
0000DCBE                            loc_D748:
0000DCBE 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCC4 4E75                       		rts	
0000DCC6                            ; End of function BuildSprites
0000DCC6                            
0000DCC6                            
0000DCC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCC6                            
0000DCC6                            
0000DCC6                            sub_D750:				; XREF: BuildSprites
0000DCC6 3668 0002                  		movea.w	2(a0),a3
0000DCCA 0804 0000                  		btst	#0,d4
0000DCCE 6600                       		bne.s	loc_D796
0000DCD0 0804 0001                  		btst	#1,d4
0000DCD4 6600 0000                  		bne.w	loc_D7E4
0000DCD8                            ; End of function sub_D750
0000DCD8                            
0000DCD8                            
0000DCD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCD8                            
0000DCD8                            
0000DCD8                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DCD8 0C05 0050                  		cmpi.b	#$50,d5
0000DCDC 6700                       		beq.s	locret_D794
0000DCDE 1019                       		move.b	(a1)+,d0
0000DCE0 4880                       		ext.w	d0
0000DCE2 D042                       		add.w	d2,d0
0000DCE4 34C0                       		move.w	d0,(a2)+
0000DCE6 14D9                       		move.b	(a1)+,(a2)+
0000DCE8 5205                       		addq.b	#1,d5
0000DCEA 14C5                       		move.b	d5,(a2)+
0000DCEC 1019                       		move.b	(a1)+,d0
0000DCEE E148                       		lsl.w	#8,d0
0000DCF0 1019                       		move.b	(a1)+,d0
0000DCF2 D04B                       		add.w	a3,d0
0000DCF4 34C0                       		move.w	d0,(a2)+
0000DCF6 1019                       		move.b	(a1)+,d0
0000DCF8 4880                       		ext.w	d0
0000DCFA D043                       		add.w	d3,d0
0000DCFC 0240 01FF                  		andi.w	#$1FF,d0
0000DD00 6600                       		bne.s	loc_D78E
0000DD02 5240                       		addq.w	#1,d0
0000DD04                            
0000DD04                            loc_D78E:
0000DD04 34C0                       		move.w	d0,(a2)+
0000DD06 51C9 FFD0                  		dbf	d1,sub_D762
0000DD0A                            
0000DD0A                            locret_D794:
0000DD0A 4E75                       		rts	
0000DD0C                            ; End of function sub_D762
0000DD0C                            
0000DD0C                            ; ===========================================================================
0000DD0C                            
0000DD0C                            loc_D796:
0000DD0C 0804 0001                  		btst	#1,d4
0000DD10 6600 0000                  		bne.w	loc_D82A
0000DD14                            
0000DD14                            loc_D79E:
0000DD14 0C05 0050                  		cmpi.b	#$50,d5
0000DD18 6700                       		beq.s	locret_D7E2
0000DD1A 1019                       		move.b	(a1)+,d0
0000DD1C 4880                       		ext.w	d0
0000DD1E D042                       		add.w	d2,d0
0000DD20 34C0                       		move.w	d0,(a2)+
0000DD22 1819                       		move.b	(a1)+,d4
0000DD24 14C4                       		move.b	d4,(a2)+
0000DD26 5205                       		addq.b	#1,d5
0000DD28 14C5                       		move.b	d5,(a2)+
0000DD2A 1019                       		move.b	(a1)+,d0
0000DD2C E148                       		lsl.w	#8,d0
0000DD2E 1019                       		move.b	(a1)+,d0
0000DD30 D04B                       		add.w	a3,d0
0000DD32 0A40 0800                  		eori.w	#$800,d0
0000DD36 34C0                       		move.w	d0,(a2)+
0000DD38 1019                       		move.b	(a1)+,d0
0000DD3A 4880                       		ext.w	d0
0000DD3C 4440                       		neg.w	d0
0000DD3E D804                       		add.b	d4,d4
0000DD40 0244 0018                  		andi.w	#$18,d4
0000DD44 5044                       		addq.w	#8,d4
0000DD46 9044                       		sub.w	d4,d0
0000DD48 D043                       		add.w	d3,d0
0000DD4A 0240 01FF                  		andi.w	#$1FF,d0
0000DD4E 6600                       		bne.s	loc_D7DC
0000DD50 5240                       		addq.w	#1,d0
0000DD52                            
0000DD52                            loc_D7DC:
0000DD52 34C0                       		move.w	d0,(a2)+
0000DD54 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD58                            
0000DD58                            locret_D7E2:
0000DD58 4E75                       		rts	
0000DD5A                            ; ===========================================================================
0000DD5A                            
0000DD5A                            loc_D7E4:				; XREF: sub_D750
0000DD5A 0C05 0050                  		cmpi.b	#$50,d5
0000DD5E 6700                       		beq.s	locret_D828
0000DD60 1019                       		move.b	(a1)+,d0
0000DD62 1811                       		move.b	(a1),d4
0000DD64 4880                       		ext.w	d0
0000DD66 4440                       		neg.w	d0
0000DD68 E70C                       		lsl.b	#3,d4
0000DD6A 0244 0018                  		andi.w	#$18,d4
0000DD6E 5044                       		addq.w	#8,d4
0000DD70 9044                       		sub.w	d4,d0
0000DD72 D042                       		add.w	d2,d0
0000DD74 34C0                       		move.w	d0,(a2)+
0000DD76 14D9                       		move.b	(a1)+,(a2)+
0000DD78 5205                       		addq.b	#1,d5
0000DD7A 14C5                       		move.b	d5,(a2)+
0000DD7C 1019                       		move.b	(a1)+,d0
0000DD7E E148                       		lsl.w	#8,d0
0000DD80 1019                       		move.b	(a1)+,d0
0000DD82 D04B                       		add.w	a3,d0
0000DD84 0A40 1000                  		eori.w	#$1000,d0
0000DD88 34C0                       		move.w	d0,(a2)+
0000DD8A 1019                       		move.b	(a1)+,d0
0000DD8C 4880                       		ext.w	d0
0000DD8E D043                       		add.w	d3,d0
0000DD90 0240 01FF                  		andi.w	#$1FF,d0
0000DD94 6600                       		bne.s	loc_D822
0000DD96 5240                       		addq.w	#1,d0
0000DD98                            
0000DD98                            loc_D822:
0000DD98 34C0                       		move.w	d0,(a2)+
0000DD9A 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DD9E                            
0000DD9E                            locret_D828:
0000DD9E 4E75                       		rts	
0000DDA0                            ; ===========================================================================
0000DDA0                            
0000DDA0                            loc_D82A:
0000DDA0 0C05 0050                  		cmpi.b	#$50,d5
0000DDA4 6700                       		beq.s	locret_D87C
0000DDA6 1019                       		move.b	(a1)+,d0
0000DDA8 1811                       		move.b	(a1),d4
0000DDAA 4880                       		ext.w	d0
0000DDAC 4440                       		neg.w	d0
0000DDAE E70C                       		lsl.b	#3,d4
0000DDB0 0244 0018                  		andi.w	#$18,d4
0000DDB4 5044                       		addq.w	#8,d4
0000DDB6 9044                       		sub.w	d4,d0
0000DDB8 D042                       		add.w	d2,d0
0000DDBA 34C0                       		move.w	d0,(a2)+
0000DDBC 1819                       		move.b	(a1)+,d4
0000DDBE 14C4                       		move.b	d4,(a2)+
0000DDC0 5205                       		addq.b	#1,d5
0000DDC2 14C5                       		move.b	d5,(a2)+
0000DDC4 1019                       		move.b	(a1)+,d0
0000DDC6 E148                       		lsl.w	#8,d0
0000DDC8 1019                       		move.b	(a1)+,d0
0000DDCA D04B                       		add.w	a3,d0
0000DDCC 0A40 1800                  		eori.w	#$1800,d0
0000DDD0 34C0                       		move.w	d0,(a2)+
0000DDD2 1019                       		move.b	(a1)+,d0
0000DDD4 4880                       		ext.w	d0
0000DDD6 4440                       		neg.w	d0
0000DDD8 D804                       		add.b	d4,d4
0000DDDA 0244 0018                  		andi.w	#$18,d4
0000DDDE 5044                       		addq.w	#8,d4
0000DDE0 9044                       		sub.w	d4,d0
0000DDE2 D043                       		add.w	d3,d0
0000DDE4 0240 01FF                  		andi.w	#$1FF,d0
0000DDE8 6600                       		bne.s	loc_D876
0000DDEA 5240                       		addq.w	#1,d0
0000DDEC                            
0000DDEC                            loc_D876:
0000DDEC 34C0                       		move.w	d0,(a2)+
0000DDEE 51C9 FFB0                  		dbf	d1,loc_D82A
0000DDF2                            
0000DDF2                            locret_D87C:
0000DDF2 4E75                       		rts	
0000DDF4                            ; ---------------------------------------------------------------------------
0000DDF4                            ; Subroutine to	check if an object is on the screen
0000DDF4                            ; ---------------------------------------------------------------------------
0000DDF4                            
0000DDF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDF4                            
0000DDF4                            
0000DDF4                            ChkObjOnScreen:
0000DDF4 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DDF8 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DDFC 6B00                       		bmi.s	NotOnScreen
0000DDFE 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE02 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE04                            
0000DE04 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE08 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE0C 6B00                       		bmi.s	NotOnScreen
0000DE0E 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE12 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE14                            
0000DE14 7000                       		moveq	#0,d0		; set flag to 0
0000DE16 4E75                       		rts	
0000DE18                            ; ===========================================================================
0000DE18                            
0000DE18                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE18 7001                       		moveq	#1,d0		; set flag to 1
0000DE1A 4E75                       		rts	
0000DE1C                            ; End of function ChkObjOnScreen
0000DE1C                            
0000DE1C                            
0000DE1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE1C                            
0000DE1C                            
0000DE1C                            ChkObjOnScreen2:
0000DE1C 7200                       		moveq	#0,d1
0000DE1E 1228 0019                  		move.b	$19(a0),d1
0000DE22 3028 0008                  		move.w	8(a0),d0
0000DE26 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE2A D041                       		add.w	d1,d0
0000DE2C 6B00                       		bmi.s	NotOnScreen2
0000DE2E D241                       		add.w	d1,d1
0000DE30 9041                       		sub.w	d1,d0
0000DE32 0C40 0140                  		cmpi.w	#320,d0
0000DE36 6C00                       		bge.s	NotOnScreen2
0000DE38                            
0000DE38 3228 000C                  		move.w	$C(a0),d1
0000DE3C 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE40 6B00                       		bmi.s	NotOnScreen2
0000DE42 0C41 00E0                  		cmpi.w	#224,d1
0000DE46 6C00                       		bge.s	NotOnScreen2
0000DE48                            
0000DE48 7000                       		moveq	#0,d0
0000DE4A 4E75                       		rts	
0000DE4C                            ; ===========================================================================
0000DE4C                            
0000DE4C                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE4C 7001                       		moveq	#1,d0
0000DE4E 4E75                       		rts	
0000DE50                            ; End of function ChkObjOnScreen2
0000DE50                            
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            ; Subroutine to	load a level's objects
0000DE50                            ; ---------------------------------------------------------------------------
0000DE50                            
0000DE50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE50                            
0000DE50                            
0000DE50                            ObjPosLoad:				; XREF: Level; et al
0000DE50 7000                       		moveq	#0,d0
0000DE52 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE56 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE5A 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE5E                            ; End of function ObjPosLoad
0000DE5E                            
0000DE5E                            ; ===========================================================================
0000DE5E 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE60 0000                       		dc.w OPL_Next-OPL_Index
0000DE62                            ; ===========================================================================
0000DE62                            
0000DE62                            OPL_Main:				; XREF: OPL_Index
0000DE62 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE66 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE6A ED08                       		lsl.b	#6,d0
0000DE6C E848                       		lsr.w	#4,d0
0000DE6E 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DE74 2248                       		movea.l	a0,a1
0000DE76 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DE7A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE7E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE82 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DE86 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DE8A 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DE8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE92 34FC 0101                  		move.w	#$101,(a2)+
0000DE96 303C 005E                  		move.w	#$5E,d0
0000DE9A                            
0000DE9A                            OPL_ClrList:
0000DE9A 429A                       		clr.l	(a2)+
0000DE9C 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DEA0                            
0000DEA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEA4 7400                       		moveq	#0,d2
0000DEA6 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEAA 0446 0080                  		subi.w	#$80,d6
0000DEAE 6400                       		bcc.s	loc_D93C
0000DEB0 7C00                       		moveq	#0,d6
0000DEB2                            
0000DEB2                            loc_D93C:
0000DEB2 0246 FF80                  		andi.w	#$FF80,d6
0000DEB6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DEBA                            
0000DEBA                            loc_D944:
0000DEBA BC50                       		cmp.w	(a0),d6
0000DEBC 6300                       		bls.s	loc_D956
0000DEBE 4A28 0004                  		tst.b	4(a0)
0000DEC2 6A00                       		bpl.s	loc_D952
0000DEC4 1412                       		move.b	(a2),d2
0000DEC6 5212                       		addq.b	#1,(a2)
0000DEC8                            
0000DEC8                            loc_D952:
0000DEC8 5C48                       		addq.w	#6,a0
0000DECA 60EE                       		bra.s	loc_D944
0000DECC                            ; ===========================================================================
0000DECC                            
0000DECC                            loc_D956:
0000DECC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DED0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DED4 0446 0080                  		subi.w	#$80,d6
0000DED8 6500                       		bcs.s	loc_D976
0000DEDA                            
0000DEDA                            loc_D964:
0000DEDA BC50                       		cmp.w	(a0),d6
0000DEDC 6300                       		bls.s	loc_D976
0000DEDE 4A28 0004                  		tst.b	4(a0)
0000DEE2 6A00                       		bpl.s	loc_D972
0000DEE4 522A 0001                  		addq.b	#1,1(a2)
0000DEE8                            
0000DEE8                            loc_D972:
0000DEE8 5C48                       		addq.w	#6,a0
0000DEEA 60EE                       		bra.s	loc_D964
0000DEEC                            ; ===========================================================================
0000DEEC                            
0000DEEC                            loc_D976:
0000DEEC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEF0 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DEF6                            
0000DEF6                            OPL_Next:				; XREF: OPL_Index
0000DEF6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEFA 7400                       		moveq	#0,d2
0000DEFC 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF00 0246 FF80                  		andi.w	#$FF80,d6
0000DF04 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF08 6700 0000                  		beq.w	locret_DA3A
0000DF0C 6C00                       		bge.s	loc_D9F6
0000DF0E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF12 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF16 0446 0080                  		subi.w	#$80,d6
0000DF1A 6500                       		bcs.s	loc_D9D2
0000DF1C                            
0000DF1C                            loc_D9A6:
0000DF1C BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF20 6C00                       		bge.s	loc_D9D2
0000DF22 5D48                       		subq.w	#6,a0
0000DF24 4A28 0004                  		tst.b	4(a0)
0000DF28 6A00                       		bpl.s	loc_D9BC
0000DF2A 532A 0001                  		subq.b	#1,1(a2)
0000DF2E 142A 0001                  		move.b	1(a2),d2
0000DF32                            
0000DF32                            loc_D9BC:
0000DF32 6100 0000                  		bsr.w	loc_DA3C
0000DF36 6600                       		bne.s	loc_D9C6
0000DF38 5D48                       		subq.w	#6,a0
0000DF3A 60E0                       		bra.s	loc_D9A6
0000DF3C                            ; ===========================================================================
0000DF3C                            
0000DF3C                            loc_D9C6:
0000DF3C 4A28 0004                  		tst.b	4(a0)
0000DF40 6A00                       		bpl.s	loc_D9D0
0000DF42 522A 0001                  		addq.b	#1,1(a2)
0000DF46                            
0000DF46                            loc_D9D0:
0000DF46 5C48                       		addq.w	#6,a0
0000DF48                            
0000DF48                            loc_D9D2:
0000DF48 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF4C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF50 0646 0300                  		addi.w	#$300,d6
0000DF54                            
0000DF54                            loc_D9DE:
0000DF54 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF58 6E00                       		bgt.s	loc_D9F0
0000DF5A 4A28 FFFE                  		tst.b	-2(a0)
0000DF5E 6A00                       		bpl.s	loc_D9EC
0000DF60 5312                       		subq.b	#1,(a2)
0000DF62                            
0000DF62                            loc_D9EC:
0000DF62 5D48                       		subq.w	#6,a0
0000DF64 60EE                       		bra.s	loc_D9DE
0000DF66                            ; ===========================================================================
0000DF66                            
0000DF66                            loc_D9F0:
0000DF66 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF6A 4E75                       		rts	
0000DF6C                            ; ===========================================================================
0000DF6C                            
0000DF6C                            loc_D9F6:
0000DF6C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF70 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF74 0646 0280                  		addi.w	#$280,d6
0000DF78                            
0000DF78                            loc_DA02:
0000DF78 BC50                       		cmp.w	(a0),d6
0000DF7A 6300                       		bls.s	loc_DA16
0000DF7C 4A28 0004                  		tst.b	4(a0)
0000DF80 6A00                       		bpl.s	loc_DA10
0000DF82 1412                       		move.b	(a2),d2
0000DF84 5212                       		addq.b	#1,(a2)
0000DF86                            
0000DF86                            loc_DA10:
0000DF86 6100 0000                  		bsr.w	loc_DA3C
0000DF8A 67EC                       		beq.s	loc_DA02
0000DF8C                            
0000DF8C                            loc_DA16:
0000DF8C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF90 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF94 0446 0300                  		subi.w	#$300,d6
0000DF98 6500                       		bcs.s	loc_DA36
0000DF9A                            
0000DF9A                            loc_DA24:
0000DF9A BC50                       		cmp.w	(a0),d6
0000DF9C 6300                       		bls.s	loc_DA36
0000DF9E 4A28 0004                  		tst.b	4(a0)
0000DFA2 6A00                       		bpl.s	loc_DA32
0000DFA4 522A 0001                  		addq.b	#1,1(a2)
0000DFA8                            
0000DFA8                            loc_DA32:
0000DFA8 5C48                       		addq.w	#6,a0
0000DFAA 60EE                       		bra.s	loc_DA24
0000DFAC                            ; ===========================================================================
0000DFAC                            
0000DFAC                            loc_DA36:
0000DFAC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFB0                            
0000DFB0                            locret_DA3A:
0000DFB0 4E75                       		rts	
0000DFB2                            ; ===========================================================================
0000DFB2                            
0000DFB2                            loc_DA3C:
0000DFB2 4A28 0004                  		tst.b	4(a0)
0000DFB6 6A00                       		bpl.s	OPL_MakeItem
0000DFB8 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFBE 6700                       		beq.s	OPL_MakeItem
0000DFC0 5C48                       		addq.w	#6,a0
0000DFC2 7000                       		moveq	#0,d0
0000DFC4 4E75                       		rts	
0000DFC6                            ; ===========================================================================
0000DFC6                            
0000DFC6                            OPL_MakeItem:
0000DFC6 6100 0000                  		bsr.w	SingleObjLoad
0000DFCA 6600                       		bne.s	locret_DA8A
0000DFCC 3358 0008                  		move.w	(a0)+,8(a1)
0000DFD0 3018                       		move.w	(a0)+,d0
0000DFD2 3200                       		move.w	d0,d1
0000DFD4 0240 0FFF                  		andi.w	#$FFF,d0
0000DFD8 3340 000C                  		move.w	d0,$C(a1)
0000DFDC E559                       		rol.w	#2,d1
0000DFDE 0201 0003                  		andi.b	#3,d1
0000DFE2 1341 0001                  		move.b	d1,1(a1)
0000DFE6 1341 0022                  		move.b	d1,$22(a1)
0000DFEA 1018                       		move.b	(a0)+,d0
0000DFEC 6A00                       		bpl.s	loc_DA80
0000DFEE 0200 007F                  		andi.b	#$7F,d0
0000DFF2 1342 0023                  		move.b	d2,$23(a1)
0000DFF6                            
0000DFF6                            loc_DA80:
0000DFF6 1280                       		move.b	d0,0(a1)
0000DFF8 1358 0028                  		move.b	(a0)+,$28(a1)
0000DFFC 7000                       		moveq	#0,d0
0000DFFE                            
0000DFFE                            locret_DA8A:
0000DFFE 4E75                       		rts	
0000E000                            ; ---------------------------------------------------------------------------
0000E000                            ; Single object	loading	subroutine
0000E000                            ; ---------------------------------------------------------------------------
0000E000                            
0000E000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E000                            
0000E000                            
0000E000                            SingleObjLoad:
0000E000 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E004 303C 005F                  		move.w	#$5F,d0
0000E008                            
0000E008                            loc_DA94:
0000E008 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E00A 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E00C 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E010 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E014                            
0000E014                            locret_DAA0:
0000E014 4E75                       		rts	
0000E016                            ; End of function SingleObjLoad
0000E016                            
0000E016                            
0000E016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E016                            
0000E016                            
0000E016                            SingleObjLoad2:
0000E016 2248                       		movea.l	a0,a1
0000E018 303C F000                  		move.w	#-$1000,d0
0000E01C 9048                       		sub.w	a0,d0
0000E01E EC48                       		lsr.w	#6,d0
0000E020 5340                       		subq.w	#1,d0
0000E022 6500                       		bcs.s	locret_DABC
0000E024                            
0000E024                            loc_DAB0:
0000E024 4A11                       		tst.b	(a1)
0000E026 6700                       		beq.s	locret_DABC
0000E028 43E9 0040                  		lea	$40(a1),a1
0000E02C 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E030                            
0000E030                            locret_DABC:
0000E030 4E75                       		rts	
0000E032                            ; End of function SingleObjLoad2
0000E032                            
0000E032                            ; ===========================================================================
0000E032                            ; ---------------------------------------------------------------------------
0000E032                            ; Object 41 - springs
0000E032                            ; ---------------------------------------------------------------------------
0000E032                            
0000E032                            Obj41:					; XREF: Obj_Index
0000E032 7000                       		moveq	#0,d0
0000E034 1028 0024                  		move.b	$24(a0),d0
0000E038 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E03C 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E040 6100 FB38                  		bsr.w	DisplaySprite
0000E044 3028 0008                  		move.w	8(a0),d0
0000E048 0240 FF80                  		andi.w	#$FF80,d0
0000E04C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E050 0441 0080                  		subi.w	#$80,d1
0000E054 0241 FF80                  		andi.w	#$FF80,d1
0000E058 9041                       		sub.w	d1,d0
0000E05A 0C40 0280                  		cmpi.w	#$280,d0
0000E05E 6200 FB56                  		bhi.w	DeleteObject
0000E062 4E75                       		rts	
0000E064                            ; ===========================================================================
0000E064 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E066 0000                       		dc.w Obj41_Up-Obj41_Index
0000E068 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E06A 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E06C 0000                       		dc.w Obj41_LR-Obj41_Index
0000E06E 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E070 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E072 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E074 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E076 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E078                            
0000E078 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E07A F600                       		dc.w -$A00		; power	of yellow spring
0000E07C                            ; ===========================================================================
0000E07C                            
0000E07C                            Obj41_Main:				; XREF: Obj41_Index
0000E07C 5428 0024                  		addq.b	#2,$24(a0)
0000E080 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E088 317C 0523 0002             		move.w	#$523,2(a0)
0000E08E 0028 0004 0001             		ori.b	#4,1(a0)
0000E094 117C 0010 0019             		move.b	#$10,$19(a0)
0000E09A 117C 0004 0018             		move.b	#4,$18(a0)
0000E0A0 1028 0028                  		move.b	$28(a0),d0
0000E0A4 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0A8 6700                       		beq.s	loc_DB54	; if not, branch
0000E0AA 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0B0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0B6 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0BC 317C 0533 0002             		move.w	#$533,2(a0)
0000E0C2 117C 0008 0019             		move.b	#8,$19(a0)
0000E0C8                            
0000E0C8                            loc_DB54:
0000E0C8 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E0CC 6700                       		beq.s	loc_DB66	; if not, branch
0000E0CE 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E0D4 08E8 0001 0022             		bset	#1,$22(a0)
0000E0DA                            
0000E0DA                            loc_DB66:
0000E0DA 0800 0001                  		btst	#1,d0
0000E0DE 6700                       		beq.s	loc_DB72
0000E0E0 08E8 0005 0002             		bset	#5,2(a0)
0000E0E6                            
0000E0E6                            loc_DB72:
0000E0E6 0240 000F                  		andi.w	#$F,d0
0000E0EA 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E0F0 4E75                       		rts	
0000E0F2                            ; ===========================================================================
0000E0F2                            
0000E0F2                            Obj41_Up:				; XREF: Obj41_Index
0000E0F2 323C 001B                  		move.w	#$1B,d1
0000E0F6 343C 0008                  		move.w	#8,d2
0000E0FA 363C 0010                  		move.w	#$10,d3
0000E0FE 3828 0008                  		move.w	8(a0),d4
0000E102 6100 0000                  		bsr.w	SolidObject
0000E106 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E10A 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E10C 4E75                       		rts	
0000E10E                            ; ===========================================================================
0000E10E                            
0000E10E                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E10E 5428 0024                  		addq.b	#2,$24(a0)
0000E112 5069 000C                  		addq.w	#8,$C(a1)
0000E116 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E11C 08E9 0001 0022             		bset	#1,$22(a1)
0000E122 08A9 0003 0022             		bclr	#3,$22(a1)
0000E128 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E12E 137C 0002 0024             		move.b	#2,$24(a1)
0000E134 08A8 0003 0022             		bclr	#3,$22(a0)
0000E13A 4228 0025                  		clr.b	$25(a0)
0000E13E 303C 00CC                  		move.w	#$CC,d0
0000E142 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E148                            
0000E148                            Obj41_AniUp:				; XREF: Obj41_Index
0000E148 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E14E 6000 CAFA                  		bra.w	AnimateSprite
0000E152                            ; ===========================================================================
0000E152                            
0000E152                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E152 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E158 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E15C 4E75                       		rts	
0000E15E                            ; ===========================================================================
0000E15E                            
0000E15E                            Obj41_LR:				; XREF: Obj41_Index
0000E15E 323C 0013                  		move.w	#$13,d1
0000E162 343C 000E                  		move.w	#$E,d2
0000E166 363C 000F                  		move.w	#$F,d3
0000E16A 3828 0008                  		move.w	8(a0),d4
0000E16E 6100 0000                  		bsr.w	SolidObject
0000E172 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E178 6600                       		bne.s	loc_DC0C
0000E17A 117C 0008 0024             		move.b	#8,$24(a0)
0000E180                            
0000E180                            loc_DC0C:
0000E180 0828 0005 0022             		btst	#5,$22(a0)
0000E186 6600                       		bne.s	Obj41_BounceLR
0000E188 4E75                       		rts	
0000E18A                            ; ===========================================================================
0000E18A                            
0000E18A                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E18A 5428 0024                  		addq.b	#2,$24(a0)
0000E18E 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E194 5069 0008                  		addq.w	#8,8(a1)
0000E198 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E19E 6600                       		bne.s	loc_DC36	; if yes, branch
0000E1A0 0469 0010 0008             		subi.w	#$10,8(a1)
0000E1A6 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1AA                            
0000E1AA                            loc_DC36:
0000E1AA 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1B0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1B6 0869 0000 0022             		bchg	#0,$22(a1)
0000E1BC 0829 0002 0022             		btst	#2,$22(a1)
0000E1C2 6600                       		bne.s	loc_DC56
0000E1C4 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E1CA                            
0000E1CA                            loc_DC56:
0000E1CA 08A8 0005 0022             		bclr	#5,$22(a0)
0000E1D0 08A9 0005 0022             		bclr	#5,$22(a1)
0000E1D6 303C 00CC                  		move.w	#$CC,d0
0000E1DA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1E0                            
0000E1E0                            Obj41_AniLR:				; XREF: Obj41_Index
0000E1E0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1E6 6000 CA62                  		bra.w	AnimateSprite
0000E1EA                            ; ===========================================================================
0000E1EA                            
0000E1EA                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E1EA 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E1F0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E1F4 4E75                       		rts	
0000E1F6                            ; ===========================================================================
0000E1F6                            
0000E1F6                            Obj41_Dwn:				; XREF: Obj41_Index
0000E1F6 323C 001B                  		move.w	#$1B,d1
0000E1FA 343C 0008                  		move.w	#8,d2
0000E1FE 363C 0010                  		move.w	#$10,d3
0000E202 3828 0008                  		move.w	8(a0),d4
0000E206 6100 0000                  		bsr.w	SolidObject
0000E20A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E210 6600                       		bne.s	loc_DCA4
0000E212 117C 000E 0024             		move.b	#$E,$24(a0)
0000E218                            
0000E218                            loc_DCA4:
0000E218 4A28 0025                  		tst.b	$25(a0)
0000E21C 6600                       		bne.s	locret_DCAE
0000E21E 4A44                       		tst.w	d4
0000E220 6B00                       		bmi.s	Obj41_BounceDwn
0000E222                            
0000E222                            locret_DCAE:
0000E222 4E75                       		rts	
0000E224                            ; ===========================================================================
0000E224                            
0000E224                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E224 5428 0024                  		addq.b	#2,$24(a0)
0000E228 5169 000C                  		subq.w	#8,$C(a1)
0000E22C 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E232 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E236 08E9 0001 0022             		bset	#1,$22(a1)
0000E23C 08A9 0003 0022             		bclr	#3,$22(a1)
0000E242 137C 0002 0024             		move.b	#2,$24(a1)
0000E248 08A8 0003 0022             		bclr	#3,$22(a0)
0000E24E 4228 0025                  		clr.b	$25(a0)
0000E252 303C 00CC                  		move.w	#$CC,d0
0000E256 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E25C                            
0000E25C                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E25C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E262 6000 C9E6                  		bra.w	AnimateSprite
0000E266                            ; ===========================================================================
0000E266                            
0000E266                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E266 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E26C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E270 4E75                       		rts	
0000E272                            ; ===========================================================================
0000E272                            Ani_obj41:
0000E272                            	include "_anim\obj41.asm"
0000E272                            ; ---------------------------------------------------------------------------
0000E272                            ; Animation script - springs
0000E272                            ; ---------------------------------------------------------------------------
0000E272 0000                       		dc.w byte_DD02-Ani_obj41
0000E274 0000                       		dc.w byte_DD0E-Ani_obj41
0000E276 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E282 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E28E                            		even
0000E28E                            		even
0000E28E                            
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            ; Sprite mappings - springs
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            Map_obj41:
0000E28E                            	include "_maps\obj41.asm"
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E                            ; Sprite mappings - springs
0000E28E                            ; ---------------------------------------------------------------------------
0000E28E 0000                       		dc.w byte_DD26-Map_obj41
0000E290 0000                       		dc.w byte_DD31-Map_obj41
0000E292 0000                       		dc.w byte_DD37-Map_obj41
0000E294 0000                       		dc.w byte_DD47-Map_obj41
0000E296 0000                       		dc.w byte_DD4D-Map_obj41
0000E298 0000                       		dc.w byte_DD53-Map_obj41
0000E29A 02                         byte_DD26:	dc.b 2
0000E29B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E2A0 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E2A5 01                         byte_DD31:	dc.b 1
0000E2A6 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2AB 03                         byte_DD37:	dc.b 3
0000E2AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2B1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2B6 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2BB 01                         byte_DD47:	dc.b 1
0000E2BC F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2C1 01                         byte_DD4D:	dc.b 1
0000E2C2 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E2C7 04                         byte_DD53:	dc.b 4
0000E2C8 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E2CD F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E2D2 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E2D7 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E2DC                            		even
0000E2DC                            		even
0000E2DC                            
0000E2DC                            ; ===========================================================================
0000E2DC                            ; ---------------------------------------------------------------------------
0000E2DC                            ; Object 42 - Newtron enemy (GHZ)
0000E2DC                            ; ---------------------------------------------------------------------------
0000E2DC                            
0000E2DC                            Obj42:					; XREF: Obj_Index
0000E2DC 7000                       		moveq	#0,d0
0000E2DE 1028 0024                  		move.b	$24(a0),d0
0000E2E2 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E2E6 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E2EA                            ; ===========================================================================
0000E2EA 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E2EC 0000                       		dc.w Obj42_Action-Obj42_Index
0000E2EE 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E2F0                            ; ===========================================================================
0000E2F0                            
0000E2F0                            Obj42_Main:				; XREF: Obj42_Index
0000E2F0 5428 0024                  		addq.b	#2,$24(a0)
0000E2F4 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E2FC 317C 049B 0002             		move.w	#$49B,2(a0)
0000E302 117C 0004 0001             		move.b	#4,1(a0)
0000E308 117C 0004 0018             		move.b	#4,$18(a0)
0000E30E 117C 0014 0019             		move.b	#$14,$19(a0)
0000E314 117C 0010 0016             		move.b	#$10,$16(a0)
0000E31A 117C 0008 0017             		move.b	#8,$17(a0)
0000E320                            
0000E320                            Obj42_Action:				; XREF: Obj42_Index
0000E320 7000                       		moveq	#0,d0
0000E322 1028 0025                  		move.b	$25(a0),d0
0000E326 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E32A 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E32E 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E334 6100 C914                  		bsr.w	AnimateSprite
0000E338 6000 0000                  		bra.w	MarkObjGone
0000E33C                            ; ===========================================================================
0000E33C 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E33E 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E340 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E342 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E344 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E346                            ; ===========================================================================
0000E346                            
0000E346                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E346 08E8 0000 0022             		bset	#0,$22(a0)
0000E34C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E350 9068 0008                  		sub.w	8(a0),d0
0000E354 6400                       		bcc.s	loc_DDEA
0000E356 4440                       		neg.w	d0
0000E358 08A8 0000 0022             		bclr	#0,$22(a0)
0000E35E                            
0000E35E                            loc_DDEA:
0000E35E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E362 6400                       		bcc.s	locret_DE12	; if not, branch
0000E364 5428 0025                  		addq.b	#2,$25(a0)
0000E368 117C 0001 001C             		move.b	#1,$1C(a0)
0000E36E 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E372 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E374 317C 249B 0002             		move.w	#$249B,2(a0)
0000E37A 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E380 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E386                            
0000E386                            locret_DE12:
0000E386 4E75                       		rts	
0000E388                            ; ===========================================================================
0000E388                            
0000E388                            Obj42_Type00:				; XREF: Obj42_Index2
0000E388 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E38E 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E390 08E8 0000 0022             		bset	#0,$22(a0)
0000E396 3038 D008                  		move.w	($FFFFD008).w,d0
0000E39A 9068 0008                  		sub.w	8(a0),d0
0000E39E 6400                       		bcc.s	locret_DE32
0000E3A0 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3A6                            
0000E3A6                            locret_DE32:
0000E3A6 4E75                       		rts	
0000E3A8                            ; ===========================================================================
0000E3A8                            
0000E3A8                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3A8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3AE 6600                       		bne.s	loc_DE42
0000E3B0 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3B6                            
0000E3B6                            loc_DE42:
0000E3B6 6100 F770                  		bsr.w	ObjectFall
0000E3BA 6100 0000                  		bsr.w	ObjHitFloor
0000E3BE 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3C0 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3C2 D368 000C                  		add.w	d1,$C(a0)
0000E3C6 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E3CC 5428 0025                  		addq.b	#2,$25(a0)
0000E3D0 117C 0002 001C             		move.b	#2,$1C(a0)
0000E3D6 0828 0005 0002             		btst	#5,2(a0)
0000E3DC 6700                       		beq.s	Obj42_Move
0000E3DE 5228 001C                  		addq.b	#1,$1C(a0)
0000E3E2                            
0000E3E2                            Obj42_Move:
0000E3E2 117C 000D 0020             		move.b	#$D,$20(a0)
0000E3E8 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E3EE 0828 0000 0022             		btst	#0,$22(a0)
0000E3F4 6600                       		bne.s	locret_DE86
0000E3F6 4468 0010                  		neg.w	$10(a0)
0000E3FA                            
0000E3FA                            locret_DE86:
0000E3FA 4E75                       		rts	
0000E3FC                            ; ===========================================================================
0000E3FC                            
0000E3FC                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E3FC 6100 F756                  		bsr.w	SpeedToPos
0000E400 6100 0000                  		bsr.w	ObjHitFloor
0000E404 0C41 FFF8                  		cmpi.w	#-8,d1
0000E408 6D00                       		blt.s	loc_DEA2
0000E40A 0C41 000C                  		cmpi.w	#$C,d1
0000E40E 6C00                       		bge.s	loc_DEA2
0000E410 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E414 4E75                       		rts	
0000E416                            ; ===========================================================================
0000E416                            
0000E416                            loc_DEA2:
0000E416 5428 0025                  		addq.b	#2,$25(a0)
0000E41A 4E75                       		rts	
0000E41C                            ; ===========================================================================
0000E41C                            
0000E41C                            Obj42_Speed:				; XREF: Obj42_Index2
0000E41C 6100 F736                  		bsr.w	SpeedToPos
0000E420 4E75                       		rts	
0000E422                            ; ===========================================================================
0000E422                            
0000E422                            Obj42_Type01:				; XREF: Obj42_Index2
0000E422 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E428 6600                       		bne.s	Obj42_FireMissile
0000E42A 117C 000C 0020             		move.b	#$C,$20(a0)
0000E430                            
0000E430                            Obj42_FireMissile:
0000E430 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E436 6600                       		bne.s	locret_DF14
0000E438 4A28 0032                  		tst.b	$32(a0)
0000E43C 6600                       		bne.s	locret_DF14
0000E43E 117C 0001 0032             		move.b	#1,$32(a0)
0000E444 6100 FBBA                  		bsr.w	SingleObjLoad
0000E448 6600                       		bne.s	locret_DF14
0000E44A 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E44E 3368 0008 0008             		move.w	8(a0),8(a1)
0000E454 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E45A 5169 000C                  		subq.w	#8,$C(a1)
0000E45E 337C 0200 0010             		move.w	#$200,$10(a1)
0000E464 303C 0014                  		move.w	#$14,d0
0000E468 0828 0000 0022             		btst	#0,$22(a0)
0000E46E 6600                       		bne.s	loc_DF04
0000E470 4440                       		neg.w	d0
0000E472 4469 0010                  		neg.w	$10(a1)
0000E476                            
0000E476                            loc_DF04:
0000E476 D169 0008                  		add.w	d0,8(a1)
0000E47A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E480 137C 0001 0028             		move.b	#1,$28(a1)
0000E486                            
0000E486                            locret_DF14:
0000E486 4E75                       		rts	
0000E488                            ; ===========================================================================
0000E488                            
0000E488                            Obj42_Delete:				; XREF: Obj42_Index
0000E488 6000 F72C                  		bra.w	DeleteObject
0000E48C                            ; ===========================================================================
0000E48C                            Ani_obj42:
0000E48C                            	include "_anim\obj42.asm"
0000E48C                            ; ---------------------------------------------------------------------------
0000E48C                            ; Animation script - Newtron enemy
0000E48C                            ; ---------------------------------------------------------------------------
0000E48C 0000                       		dc.w byte_DF24-Ani_obj42
0000E48E 0000                       		dc.w byte_DF28-Ani_obj42
0000E490 0000                       		dc.w byte_DF30-Ani_obj42
0000E492 0000                       		dc.w byte_DF34-Ani_obj42
0000E494 0000                       		dc.w byte_DF38-Ani_obj42
0000E496 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E49A 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E4A2 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E4A6 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4AA 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4B4                            		even
0000E4B4                            		even
0000E4B4                            
0000E4B4                            ; ---------------------------------------------------------------------------
0000E4B4                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4B4                            ; ---------------------------------------------------------------------------
0000E4B4                            Map_obj42:
0000E4B4                            	include "_maps\obj42.asm"
0000E4B4                            ; ---------------------------------------------------------------------------
0000E4B4                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4B4                            ; ---------------------------------------------------------------------------
0000E4B4 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4B8 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4BC 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4C0 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4C4 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E4C8 0000                       		dc.w byte_DFF8-Map_obj42
0000E4CA 03                         byte_DF58:	dc.b 3
0000E4CB EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E4D0 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E4D5 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E4DA 03                         byte_DF68:	dc.b 3
0000E4DB EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E4E0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4E5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4EA 03                         byte_DF78:	dc.b 3
0000E4EB EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E4F0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4F5 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4FA 04                         byte_DF88:	dc.b 4
0000E4FB EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E500 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E505 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E50A 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E50F 03                         byte_DF9D:	dc.b 3
0000E510 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E515 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E51A 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E51F 02                         byte_DFAD:	dc.b 2
0000E520 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E525 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E52A 03                         byte_DFB8:	dc.b 3
0000E52B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E530 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E535 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E53A 03                         byte_DFC8:	dc.b 3
0000E53B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E540 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E545 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E54A 03                         byte_DFD8:	dc.b 3
0000E54B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E550 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E555 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E55A 03                         byte_DFE8:	dc.b 3
0000E55B F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E560 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E565 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E56A 00                         byte_DFF8:	dc.b 0
0000E56C 00                         		even
0000E56C 00                         		even
0000E56C                            
0000E56C                            ; ===========================================================================
0000E56C                            ; ---------------------------------------------------------------------------
0000E56C                            ; Object 43 - Roller enemy (SYZ)
0000E56C                            ; ---------------------------------------------------------------------------
0000E56C                            
0000E56C                            Obj43:					; XREF: Obj_Index
0000E56C 7000                       		moveq	#0,d0
0000E56E 1028 0024                  		move.b	$24(a0),d0
0000E572 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E576 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E57A                            ; ===========================================================================
0000E57A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E57C 0000                       		dc.w Obj43_Action-Obj43_Index
0000E57E                            ; ===========================================================================
0000E57E                            
0000E57E                            Obj43_Main:				; XREF: Obj43_Index
0000E57E 117C 000E 0016             		move.b	#$E,$16(a0)
0000E584 117C 0008 0017             		move.b	#8,$17(a0)
0000E58A 6100 F59C                  		bsr.w	ObjectFall
0000E58E 6100 0000                  		bsr.w	ObjHitFloor
0000E592 4A41                       		tst.w	d1
0000E594 6A00                       		bpl.s	locret_E052
0000E596 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E59A 317C 0000 0012             		move.w	#0,$12(a0)
0000E5A0 5428 0024                  		addq.b	#2,$24(a0)
0000E5A4 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5AC 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5B2 117C 0004 0001             		move.b	#4,1(a0)
0000E5B8 117C 0004 0018             		move.b	#4,$18(a0)
0000E5BE 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5C4                            
0000E5C4                            locret_E052:
0000E5C4 4E75                       		rts	
0000E5C6                            ; ===========================================================================
0000E5C6                            
0000E5C6                            Obj43_Action:				; XREF: Obj43_Index
0000E5C6 7000                       		moveq	#0,d0
0000E5C8 1028 0025                  		move.b	$25(a0),d0
0000E5CC 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E5D0 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E5D4 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E5DA 6100 C66E                  		bsr.w	AnimateSprite
0000E5DE 3028 0008                  		move.w	8(a0),d0
0000E5E2 0240 FF80                  		andi.w	#$FF80,d0
0000E5E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5EA 0441 0080                  		subi.w	#$80,d1
0000E5EE 0241 FF80                  		andi.w	#$FF80,d1
0000E5F2 9041                       		sub.w	d1,d0
0000E5F4 0C40 0280                  		cmpi.w	#$280,d0
0000E5F8 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E5FC 6000 F57C                  		bra.w	DisplaySprite
0000E600                            ; ===========================================================================
0000E600                            
0000E600                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E600 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E604 7000                       		moveq	#0,d0
0000E606 1028 0023                  		move.b	$23(a0),d0
0000E60A 6700                       		beq.s	Obj43_Delete
0000E60C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E612                            
0000E612                            Obj43_Delete:
0000E612 6000 F5A2                  		bra.w	DeleteObject
0000E616                            ; ===========================================================================
0000E616 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E618 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E61A 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E61C 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E61E                            ; ===========================================================================
0000E61E                            
0000E61E                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E61E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E622 0440 0100                  		subi.w	#$100,d0
0000E626 6500                       		bcs.s	loc_E0D2
0000E628 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E62C 6500                       		bcs.s	loc_E0D2
0000E62E 5828 0025                  		addq.b	#4,$25(a0)
0000E632 117C 0002 001C             		move.b	#2,$1C(a0)
0000E638 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E63E 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E644                            
0000E644                            loc_E0D2:
0000E644 588F                       		addq.l	#4,sp
0000E646 4E75                       		rts	
0000E648                            ; ===========================================================================
0000E648                            
0000E648                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E648 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E64E 6700                       		beq.s	loc_E0F8
0000E650 5368 0030                  		subq.w	#1,$30(a0)
0000E654 6A00                       		bpl.s	locret_E0F6
0000E656 117C 0001 001C             		move.b	#1,$1C(a0)
0000E65C 317C 0700 0010             		move.w	#$700,$10(a0)
0000E662 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E668                            
0000E668                            locret_E0F6:
0000E668 4E75                       		rts	
0000E66A                            ; ===========================================================================
0000E66A                            
0000E66A                            loc_E0F8:
0000E66A 5428 0025                  		addq.b	#2,$25(a0)
0000E66E 4E75                       		rts	
0000E670                            ; ===========================================================================
0000E670                            
0000E670                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E670 6100 0000                  		bsr.w	Obj43_Stop
0000E674 6100 F4DE                  		bsr.w	SpeedToPos
0000E678 6100 0000                  		bsr.w	ObjHitFloor
0000E67C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E680 6D00                       		blt.s	Obj43_Jump
0000E682 0C41 000C                  		cmpi.w	#$C,d1
0000E686 6C00                       		bge.s	Obj43_Jump
0000E688 D368 000C                  		add.w	d1,$C(a0)
0000E68C 4E75                       		rts	
0000E68E                            ; ===========================================================================
0000E68E                            
0000E68E                            Obj43_Jump:
0000E68E 5428 0025                  		addq.b	#2,$25(a0)
0000E692 08E8 0000 0032             		bset	#0,$32(a0)
0000E698 6700                       		beq.s	locret_E12E
0000E69A 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E6A0                            
0000E6A0                            locret_E12E:
0000E6A0 4E75                       		rts	
0000E6A2                            ; ===========================================================================
0000E6A2                            
0000E6A2                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E6A2 6100 F484                  		bsr.w	ObjectFall
0000E6A6 4A68 0012                  		tst.w	$12(a0)
0000E6AA 6B00                       		bmi.s	locret_E150
0000E6AC 6100 0000                  		bsr.w	ObjHitFloor
0000E6B0 4A41                       		tst.w	d1
0000E6B2 6A00                       		bpl.s	locret_E150
0000E6B4 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6B8 5528 0025                  		subq.b	#2,$25(a0)
0000E6BC 317C 0000 0012             		move.w	#0,$12(a0)
0000E6C2                            
0000E6C2                            locret_E150:
0000E6C2 4E75                       		rts	
0000E6C4                            
0000E6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6C4                            
0000E6C4                            
0000E6C4                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6C4 4A28 0032                  		tst.b	$32(a0)
0000E6C8 6B00                       		bmi.s	locret_E188
0000E6CA 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6CE 0440 0030                  		subi.w	#$30,d0
0000E6D2 9068 0008                  		sub.w	8(a0),d0
0000E6D6 6400                       		bcc.s	locret_E188
0000E6D8 117C 0000 001C             		move.b	#0,$1C(a0)
0000E6DE 117C 000E 0020             		move.b	#$E,$20(a0)
0000E6E4 4268 0010                  		clr.w	$10(a0)
0000E6E8 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E6EE 117C 0002 0025             		move.b	#2,$25(a0)
0000E6F4 08E8 0007 0032             		bset	#7,$32(a0)
0000E6FA                            
0000E6FA                            locret_E188:
0000E6FA 4E75                       		rts	
0000E6FC                            ; End of function Obj43_Stop
0000E6FC                            
0000E6FC                            ; ===========================================================================
0000E6FC                            Ani_obj43:
0000E6FC                            	include "_anim\obj43.asm"
0000E6FC                            ; ---------------------------------------------------------------------------
0000E6FC                            ; Animation script - Roller enemy
0000E6FC                            ; ---------------------------------------------------------------------------
0000E6FC 0000                       		dc.w byte_E190-Ani_obj43
0000E6FE 0000                       		dc.w byte_E196-Ani_obj43
0000E700 0000                       		dc.w byte_E19C-Ani_obj43
0000E702 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E708 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E70E 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E714 00                         		even
0000E714 00                         		even
0000E714                            
0000E714                            ; ---------------------------------------------------------------------------
0000E714                            ; Sprite mappings - Roller enemy (SYZ)
0000E714                            ; ---------------------------------------------------------------------------
0000E714                            Map_obj43:
0000E714                            	include "_maps\obj43.asm"
0000E714                            Map_61da:
0000E714 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E716 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E718 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E71A 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E71C 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E71E 02                         Map_61da_A: 	dc.b $2
0000E71F DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E724 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E729 02                         Map_61da_15: 	dc.b $2
0000E72A E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E72F FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E734 01                         Map_61da_20: 	dc.b $1
0000E735 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E73A 01                         Map_61da_26: 	dc.b $1
0000E73B F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E740 01                         Map_61da_2C: 	dc.b $1
0000E741 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E746                            	even
0000E746                            	even
0000E746                            
0000E746                            ; ===========================================================================
0000E746                            ; ---------------------------------------------------------------------------
0000E746                            ; Object 44 - walls (GHZ)
0000E746                            ; ---------------------------------------------------------------------------
0000E746                            
0000E746                            Obj44:					; XREF: Obj_Index
0000E746 7000                       		moveq	#0,d0
0000E748 1028 0024                  		move.b	$24(a0),d0
0000E74C 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E750 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E754                            ; ===========================================================================
0000E754 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E756 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E758 0000                       		dc.w Obj44_Display-Obj44_Index
0000E75A                            ; ===========================================================================
0000E75A                            
0000E75A                            Obj44_Main:				; XREF: Obj44_Index
0000E75A 5428 0024                  		addq.b	#2,$24(a0)
0000E75E 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E766 317C 434C 0002             		move.w	#$434C,2(a0)
0000E76C 0028 0004 0001             		ori.b	#4,1(a0)
0000E772 117C 0008 0019             		move.b	#8,$19(a0)
0000E778 117C 0006 0018             		move.b	#6,$18(a0)
0000E77E 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E784 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E78A 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E78C 5428 0024                  		addq.b	#2,$24(a0)
0000E790 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E792                            ; ===========================================================================
0000E792                            
0000E792                            Obj44_Solid:				; XREF: Obj44_Index
0000E792 323C 0013                  		move.w	#$13,d1
0000E796 343C 0028                  		move.w	#$28,d2
0000E79A 6100 A714                  		bsr.w	Obj44_SolidWall
0000E79E                            
0000E79E                            Obj44_Display:				; XREF: Obj44_Index
0000E79E 6100 F3DA                  		bsr.w	DisplaySprite
0000E7A2 3028 0008                  		move.w	8(a0),d0
0000E7A6 0240 FF80                  		andi.w	#$FF80,d0
0000E7AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7AE 0441 0080                  		subi.w	#$80,d1
0000E7B2 0241 FF80                  		andi.w	#$FF80,d1
0000E7B6 9041                       		sub.w	d1,d0
0000E7B8 0C40 0280                  		cmpi.w	#$280,d0
0000E7BC 6200 F3F8                  		bhi.w	DeleteObject
0000E7C0 4E75                       		rts	
0000E7C2                            ; ===========================================================================
0000E7C2                            ; ---------------------------------------------------------------------------
0000E7C2                            ; Sprite mappings - walls (GHZ)
0000E7C2                            ; ---------------------------------------------------------------------------
0000E7C2                            Map_obj44:
0000E7C2                            	include "_maps\obj44.asm"
0000E7C2                            ; ---------------------------------------------------------------------------
0000E7C2                            ; Sprite mappings - walls (GHZ)
0000E7C2                            ; ---------------------------------------------------------------------------
0000E7C2 0000                       		dc.w byte_E256-Map_obj44
0000E7C4 0000                       		dc.w byte_E26B-Map_obj44
0000E7C6 0000                       		dc.w byte_E280-Map_obj44
0000E7C8 04                         byte_E256:	dc.b 4
0000E7C9 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E7CE F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7D3 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7D8 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7DD 04                         byte_E26B:	dc.b 4
0000E7DE E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E7E3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7E8 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7ED 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7F2 04                         byte_E280:	dc.b 4
0000E7F3 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E7F8 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E7FD 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E802 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E808 00                         		even
0000E808 00                         		even
0000E808                            
0000E808                            ; ===========================================================================
0000E808                            ; ---------------------------------------------------------------------------
0000E808                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E808                            ; ---------------------------------------------------------------------------
0000E808                            
0000E808                            Obj13:					; XREF: Obj_Index
0000E808 7000                       		moveq	#0,d0
0000E80A 1028 0024                  		move.b	$24(a0),d0
0000E80E 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E812 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E816 6000 0000                  		bra.w	Obj14_ChkDel
0000E81A                            ; ===========================================================================
0000E81A 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E81C 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E81E                            ; ---------------------------------------------------------------------------
0000E81E                            ;
0000E81E                            ; Lava ball production rates
0000E81E                            ;
0000E81E 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E824                            ; ===========================================================================
0000E824                            
0000E824                            Obj13_Main:				; XREF: Obj13_Index
0000E824 5428 0024                  		addq.b	#2,$24(a0)
0000E828 1028 0028                  		move.b	$28(a0),d0
0000E82C E848                       		lsr.w	#4,d0
0000E82E 0240 000F                  		andi.w	#$F,d0
0000E832 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E838 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E83E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E844                            
0000E844                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E844 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E848 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E84A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E850 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E854 6600                       		bne.s	locret_E302
0000E856 6100 F7A8                  		bsr.w	SingleObjLoad
0000E85A 6600                       		bne.s	locret_E302
0000E85C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E860 3368 0008 0008             		move.w	8(a0),8(a1)
0000E866 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E86C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E872                            
0000E872                            locret_E302:
0000E872 4E75                       		rts	
0000E874                            ; ===========================================================================
0000E874                            ; ---------------------------------------------------------------------------
0000E874                            ; Object 14 - lava balls (MZ, SLZ)
0000E874                            ; ---------------------------------------------------------------------------
0000E874                            
0000E874                            Obj14:					; XREF: Obj_Index
0000E874 7000                       		moveq	#0,d0
0000E876 1028 0024                  		move.b	$24(a0),d0
0000E87A 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E87E 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E882 6000 F2F6                  		bra.w	DisplaySprite
0000E886                            ; ===========================================================================
0000E886 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E888 0000                       		dc.w Obj14_Action-Obj14_Index
0000E88A 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E88C                            
0000E88C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E896 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E89E                            ; ===========================================================================
0000E89E                            
0000E89E                            Obj14_Main:				; XREF: Obj14_Index
0000E89E 5428 0024                  		addq.b	#2,$24(a0)
0000E8A2 117C 0008 0016             		move.b	#8,$16(a0)
0000E8A8 117C 0008 0017             		move.b	#8,$17(a0)
0000E8AE 217C 0000 B83E 0004        		move.l	#Map_obj14,4(a0)
0000E8B6 317C 0345 0002             		move.w	#$345,2(a0)
0000E8BC 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8C2 6600                       		bne.s	loc_E35A
0000E8C4 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E8CA                            
0000E8CA                            loc_E35A:
0000E8CA 117C 0004 0001             		move.b	#4,1(a0)
0000E8D0 117C 0003 0018             		move.b	#3,$18(a0)
0000E8D6 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E8DC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8E2 4A28 0029                  		tst.b	$29(a0)
0000E8E6 6700                       		beq.s	Obj14_SetSpeed
0000E8E8 5428 0018                  		addq.b	#2,$18(a0)
0000E8EC                            
0000E8EC                            Obj14_SetSpeed:
0000E8EC 7000                       		moveq	#0,d0
0000E8EE 1028 0028                  		move.b	$28(a0),d0
0000E8F2 D040                       		add.w	d0,d0
0000E8F4 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E8FA 117C 0008 0019             		move.b	#8,$19(a0)
0000E900 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E906 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E908 117C 0010 0019             		move.b	#$10,$19(a0)
0000E90E 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E914 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E91A 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E920                            
0000E920                            Obj14_PlaySnd:
0000E920 303C 00AE                  		move.w	#$AE,d0
0000E924 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E92A                            
0000E92A                            Obj14_Action:				; XREF: Obj14_Index
0000E92A 7000                       		moveq	#0,d0
0000E92C 1028 0028                  		move.b	$28(a0),d0
0000E930 D040                       		add.w	d0,d0
0000E932 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E936 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E93A 6100 F218                  		bsr.w	SpeedToPos
0000E93E 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E944 6100 C304                  		bsr.w	AnimateSprite
0000E948                            
0000E948                            Obj14_ChkDel:				; XREF: Obj13
0000E948 3028 0008                  		move.w	8(a0),d0
0000E94C 0240 FF80                  		andi.w	#$FF80,d0
0000E950 3238 F700                  		move.w	($FFFFF700).w,d1
0000E954 0441 0080                  		subi.w	#$80,d1
0000E958 0241 FF80                  		andi.w	#$FF80,d1
0000E95C 9041                       		sub.w	d1,d0
0000E95E 0C40 0280                  		cmpi.w	#$280,d0
0000E962 6200 F252                  		bhi.w	DeleteObject
0000E966 4E75                       		rts	
0000E968                            ; ===========================================================================
0000E968 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E96C 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E970 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E974 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E978 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E97A                            ; ===========================================================================
0000E97A                            ; lavaball types 00-03 fly up and fall back down
0000E97A                            
0000E97A                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E97A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E980 3028 0030                  		move.w	$30(a0),d0
0000E984 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E988 6400                       		bcc.s	loc_E41E	; if not, branch
0000E98A 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E98E                            
0000E98E                            loc_E41E:
0000E98E 08A8 0001 0022             		bclr	#1,$22(a0)
0000E994 4A68 0012                  		tst.w	$12(a0)
0000E998 6A00                       		bpl.s	locret_E430
0000E99A 08E8 0001 0022             		bset	#1,$22(a0)
0000E9A0                            
0000E9A0                            locret_E430:
0000E9A0 4E75                       		rts	
0000E9A2                            ; ===========================================================================
0000E9A2                            ; lavaball type	04 flies up until it hits the ceiling
0000E9A2                            
0000E9A2                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E9A2 08E8 0001 0022             		bset	#1,$22(a0)
0000E9A8 6100 0000                  		bsr.w	ObjHitCeiling
0000E9AC 4A41                       		tst.w	d1
0000E9AE 6A00                       		bpl.s	locret_E452
0000E9B0 117C 0008 0028             		move.b	#8,$28(a0)
0000E9B6 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9BC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9C2                            
0000E9C2                            locret_E452:
0000E9C2 4E75                       		rts	
0000E9C4                            ; ===========================================================================
0000E9C4                            ; lavaball type	05 falls down until it hits the	floor
0000E9C4                            
0000E9C4                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9C4 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9CA 6100 0000                  		bsr.w	ObjHitFloor
0000E9CE 4A41                       		tst.w	d1
0000E9D0 6A00                       		bpl.s	locret_E474
0000E9D2 117C 0008 0028             		move.b	#8,$28(a0)
0000E9D8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9DE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E9E4                            
0000E9E4                            locret_E474:
0000E9E4 4E75                       		rts	
0000E9E6                            ; ===========================================================================
0000E9E6                            ; lavaball types 06-07 move sideways
0000E9E6                            
0000E9E6                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E9E6 08E8 0000 0022             		bset	#0,$22(a0)
0000E9EC 76F8                       		moveq	#-8,d3
0000E9EE 6100 0000                  		bsr.w	ObjHitWallLeft
0000E9F2 4A41                       		tst.w	d1
0000E9F4 6A00                       		bpl.s	locret_E498
0000E9F6 117C 0008 0028             		move.b	#8,$28(a0)
0000E9FC 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA02 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA08                            
0000EA08                            locret_E498:
0000EA08 4E75                       		rts	
0000EA0A                            ; ===========================================================================
0000EA0A                            
0000EA0A                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA0A 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA10 7608                       		moveq	#8,d3
0000EA12 6100 0000                  		bsr.w	ObjHitWallRight
0000EA16 4A41                       		tst.w	d1
0000EA18 6A00                       		bpl.s	locret_E4BC
0000EA1A 117C 0008 0028             		move.b	#8,$28(a0)
0000EA20 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA26 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA2C                            
0000EA2C                            locret_E4BC:
0000EA2C 4E75                       		rts	
0000EA2E                            ; ===========================================================================
0000EA2E                            
0000EA2E                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA2E 4E75                       		rts	
0000EA30                            ; ===========================================================================
0000EA30                            
0000EA30                            Obj14_Delete:				; XREF: Obj14_Index
0000EA30 6000 F184                  		bra.w	DeleteObject
0000EA34                            ; ===========================================================================
0000EA34                            Ani_obj14:
0000EA34                            	include "_anim\obj14.asm"
0000EA34                            ; ---------------------------------------------------------------------------
0000EA34                            ; Animation script - lava balls
0000EA34                            ; ---------------------------------------------------------------------------
0000EA34 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA36 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA38 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA3A 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA3C 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA42 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA46 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA4C 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA50                            		even
0000EA50                            		even
0000EA50                            
0000EA50                            ; ===========================================================================
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            ; Object 6D - flame thrower (SBZ)
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            
0000EA50                            Obj6D:					; XREF: Obj_Index
0000EA50 7000                       		moveq	#0,d0
0000EA52 1028 0024                  		move.b	$24(a0),d0
0000EA56 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA5A 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA5E                            ; ===========================================================================
0000EA5E 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA60 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA62                            ; ===========================================================================
0000EA62                            
0000EA62                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA62 5428 0024                  		addq.b	#2,$24(a0)
0000EA66 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA6E 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EA74 0028 0004 0001             		ori.b	#4,1(a0)
0000EA7A 117C 0001 0018             		move.b	#1,$18(a0)
0000EA80 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA86 117C 000C 0019             		move.b	#$C,$19(a0)
0000EA8C 1028 0028                  		move.b	$28(a0),d0
0000EA90 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EA94 D040                       		add.w	d0,d0		; multiply by 2
0000EA96 3140 0030                  		move.w	d0,$30(a0)
0000EA9A 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EA9E 1028 0028                  		move.b	$28(a0),d0
0000EAA2 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EAA6 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EAA8 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EAAC 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAB2 0828 0001 0022             		btst	#1,$22(a0)
0000EAB8 6700                       		beq.s	Obj6D_Action
0000EABA 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAC0 117C 0015 0036             		move.b	#$15,$36(a0)
0000EAC6                            
0000EAC6                            Obj6D_Action:				; XREF: Obj6D_Index
0000EAC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EACA 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EACC 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EAD2 0868 0000 001C             		bchg	#0,$1C(a0)
0000EAD8 6700                       		beq.s	loc_E57A
0000EADA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EAE0 303C 00B3                  		move.w	#$B3,d0
0000EAE4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EAEA                            
0000EAEA                            loc_E57A:
0000EAEA 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EAF0 6100 C158                  		bsr.w	AnimateSprite
0000EAF4 117C 0000 0020             		move.b	#0,$20(a0)
0000EAFA 1028 0036                  		move.b	$36(a0),d0
0000EAFE B028 001A                  		cmp.b	$1A(a0),d0
0000EB02 6600                       		bne.s	Obj6D_ChkDel
0000EB04 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB0A                            
0000EB0A                            Obj6D_ChkDel:
0000EB0A 3028 0008                  		move.w	8(a0),d0
0000EB0E 0240 FF80                  		andi.w	#$FF80,d0
0000EB12 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB16 0441 0080                  		subi.w	#$80,d1
0000EB1A 0241 FF80                  		andi.w	#$FF80,d1
0000EB1E 9041                       		sub.w	d1,d0
0000EB20 0C40 0280                  		cmpi.w	#$280,d0
0000EB24 6200 F090                  		bhi.w	DeleteObject
0000EB28 6000 F050                  		bra.w	DisplaySprite
0000EB2C                            ; ===========================================================================
0000EB2C                            Ani_obj6D:
0000EB2C                            	include "_anim\obj6D.asm"
0000EB2C                            ; ---------------------------------------------------------------------------
0000EB2C                            ; Animation script - flamethrower (SBZ)
0000EB2C                            ; ---------------------------------------------------------------------------
0000EB2C 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB2E 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB30 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB32 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB34 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB42 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB4C 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB5A 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB64                            		even
0000EB64                            		even
0000EB64                            
0000EB64                            ; ---------------------------------------------------------------------------
0000EB64                            ; Sprite mappings - flame thrower (SBZ)
0000EB64                            ; ---------------------------------------------------------------------------
0000EB64                            Map_obj6D:
0000EB64                            	include "_maps\obj6D.asm"
0000EB64                            ; ---------------------------------------------------------------------------
0000EB64                            ; Sprite mappings - flame thrower (SBZ)
0000EB64                            ; ---------------------------------------------------------------------------
0000EB64 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB68 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB6C 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB70 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EB74 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EB78 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EB7C 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EB80 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EB84 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EB88 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EB8C 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EB90 01                         byte_E620:	dc.b 1
0000EB91 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB96 02                         byte_E626:	dc.b 2
0000EB97 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB9C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBA1 02                         byte_E631:	dc.b 2
0000EBA2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBA7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBAC 03                         byte_E63C:	dc.b 3
0000EBAD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBB2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBB7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBBC 03                         byte_E64C:	dc.b 3
0000EBBD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBC2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBC7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBCC 04                         byte_E65C:	dc.b 4
0000EBCD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBD2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBD7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBDC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBE1 04                         byte_E671:	dc.b 4
0000EBE2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBE7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBEC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBF1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBF6 05                         byte_E686:	dc.b 5
0000EBF7 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EBFC 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC01 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC06 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC0B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC10 05                         byte_E6A0:	dc.b 5
0000EC11 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC16 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC1B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC20 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC25 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC2A 06                         byte_E6BA:	dc.b 6
0000EC2B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC30 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC35 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC3A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC3F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC44 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC49 06                         byte_E6D9:	dc.b 6
0000EC4A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC4F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC54 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC59 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC5E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC63 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC68 01                         byte_E6F8:	dc.b 1
0000EC69 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC6E 02                         byte_E6FE:	dc.b 2
0000EC6F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC74 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC79 02                         byte_E709:	dc.b 2
0000EC7A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC7F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC84 03                         byte_E714:	dc.b 3
0000EC85 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC8A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC8F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC94 03                         byte_E724:	dc.b 3
0000EC95 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC9A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC9F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECA4 04                         byte_E734:	dc.b 4
0000ECA5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECAA 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECAF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECB4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECB9 04                         byte_E749:	dc.b 4
0000ECBA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECBF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECC4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECC9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECCE 05                         byte_E75E:	dc.b 5
0000ECCF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ECD4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECD9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECDE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECE3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE8 05                         byte_E778:	dc.b 5
0000ECE9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECEE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECF3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECF8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECFD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED02 06                         byte_E792:	dc.b 6
0000ED03 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED08 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED0D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED12 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED17 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED1C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED21 06                         byte_E7B1:	dc.b 6
0000ED22 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED27 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED2C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED31 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED36 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED3B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED40                            		even
0000ED40                            		even
0000ED40                            
0000ED40                            ; ===========================================================================
0000ED40                            ; ---------------------------------------------------------------------------
0000ED40                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED40                            ; ---------------------------------------------------------------------------
0000ED40                            
0000ED40                            Obj46:					; XREF: Obj_Index
0000ED40 7000                       		moveq	#0,d0
0000ED42 1028 0024                  		move.b	$24(a0),d0
0000ED46 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED4A 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED4E                            ; ===========================================================================
0000ED4E 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED50 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED52                            ; ===========================================================================
0000ED52                            
0000ED52                            Obj46_Main:				; XREF: Obj46_Index
0000ED52 5428 0024                  		addq.b	#2,$24(a0)
0000ED56 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED5C 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED62 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED6A 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED70 117C 0004 0001             		move.b	#4,1(a0)
0000ED76 117C 0003 0018             		move.b	#3,$18(a0)
0000ED7C 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED82 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED88 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000ED8E                            
0000ED8E                            Obj46_Action:				; XREF: Obj46_Index
0000ED8E 4A28 0001                  		tst.b	1(a0)
0000ED92 6A00                       		bpl.s	Obj46_ChkDel
0000ED94 7000                       		moveq	#0,d0
0000ED96 1028 0028                  		move.b	$28(a0),d0	; get object type
0000ED9A 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000ED9E D040                       		add.w	d0,d0
0000EDA0 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EDA4 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDA8 323C 001B                  		move.w	#$1B,d1
0000EDAC 343C 0010                  		move.w	#$10,d2
0000EDB0 363C 0011                  		move.w	#$11,d3
0000EDB4 3828 0008                  		move.w	8(a0),d4
0000EDB8 6100 0000                  		bsr.w	SolidObject
0000EDBC                            
0000EDBC                            Obj46_ChkDel:
0000EDBC 6100 EDBC                  		bsr.w	DisplaySprite
0000EDC0 3028 0008                  		move.w	8(a0),d0
0000EDC4 0240 FF80                  		andi.w	#$FF80,d0
0000EDC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDCC 0441 0080                  		subi.w	#$80,d1
0000EDD0 0241 FF80                  		andi.w	#$FF80,d1
0000EDD4 9041                       		sub.w	d1,d0
0000EDD6 0C40 0280                  		cmpi.w	#$280,d0
0000EDDA 6200 EDDA                  		bhi.w	DeleteObject
0000EDDE 4E75                       		rts	
0000EDE0                            ; ===========================================================================
0000EDE0 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EDE2 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EDE4 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EDE6 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EDE8 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EDEA                            ; ===========================================================================
0000EDEA                            
0000EDEA                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EDEA 4E75                       		rts	
0000EDEC                            ; ===========================================================================
0000EDEC                            
0000EDEC                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EDEC 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDF0 9068 0008                  		sub.w	8(a0),d0
0000EDF4 6400                       		bcc.s	loc_E888
0000EDF6 4440                       		neg.w	d0
0000EDF8                            
0000EDF8                            loc_E888:
0000EDF8 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EDFC 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EDFE 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE04                            
0000EE04                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE04 7000                       		moveq	#0,d0
0000EE06 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE0A 0828 0003 0028             		btst	#3,$28(a0)
0000EE10 6700                       		beq.s	loc_E8A8
0000EE12 4440                       		neg.w	d0
0000EE14 0640 0010                  		addi.w	#$10,d0
0000EE18                            
0000EE18                            loc_E8A8:
0000EE18 3228 0030                  		move.w	$30(a0),d1
0000EE1C 9240                       		sub.w	d0,d1
0000EE1E 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE22 4E75                       		rts	
0000EE24                            ; ===========================================================================
0000EE24                            
0000EE24                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE24 6100 ED2E                  		bsr.w	SpeedToPos
0000EE28 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE2E 6100 0000                  		bsr.w	ObjHitFloor
0000EE32 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE34 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE38 D368 000C                  		add.w	d1,$C(a0)
0000EE3C 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE40 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE46 117C 0004 0028             		move.b	#4,$28(a0)
0000EE4C 3011                       		move.w	(a1),d0
0000EE4E 0240 03FF                  		andi.w	#$3FF,d0
0000EE52 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE56 6400                       		bcc.s	locret_E8EE
0000EE58 117C 0000 0028             		move.b	#0,$28(a0)
0000EE5E                            
0000EE5E                            locret_E8EE:
0000EE5E 4E75                       		rts	
0000EE60                            ; ===========================================================================
0000EE60                            
0000EE60                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE60 7000                       		moveq	#0,d0
0000EE62 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE66 E648                       		lsr.w	#3,d0
0000EE68 3228 0030                  		move.w	$30(a0),d1
0000EE6C 9240                       		sub.w	d0,d1
0000EE6E 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EE72 4E75                       		rts	
0000EE74                            ; ===========================================================================
0000EE74                            ; ---------------------------------------------------------------------------
0000EE74                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE74                            ; ---------------------------------------------------------------------------
0000EE74                            Map_obj46:
0000EE74                            	include "_maps\obj46.asm"
0000EE74                            ; ---------------------------------------------------------------------------
0000EE74                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE74                            ; ---------------------------------------------------------------------------
0000EE74 0000                       		dc.w byte_E906-Map_obj46
0000EE76 01                         byte_E906:	dc.b 1
0000EE77 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EE7C                            		even
0000EE7C                            		even
0000EE7C                            
0000EE7C                            ; ===========================================================================
0000EE7C                            ; ---------------------------------------------------------------------------
0000EE7C                            ; Object 12 - lamp (SYZ)
0000EE7C                            ; ---------------------------------------------------------------------------
0000EE7C                            
0000EE7C                            Obj12:					; XREF: Obj_Index
0000EE7C 7000                       		moveq	#0,d0
0000EE7E 1028 0024                  		move.b	$24(a0),d0
0000EE82 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EE86 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EE8A                            ; ===========================================================================
0000EE8A 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EE8C 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EE8E                            ; ===========================================================================
0000EE8E                            
0000EE8E                            Obj12_Main:				; XREF: Obj12_Index
0000EE8E 5428 0024                  		addq.b	#2,$24(a0)
0000EE92 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EE9A 317C 0000 0002             		move.w	#0,2(a0)
0000EEA0 117C 0004 0001             		move.b	#4,1(a0)
0000EEA6 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEAC 117C 0006 0018             		move.b	#6,$18(a0)
0000EEB2                            
0000EEB2                            Obj12_Animate:				; XREF: Obj12_Index
0000EEB2 5328 001E                  		subq.b	#1,$1E(a0)
0000EEB6 6A00                       		bpl.s	Obj12_ChkDel
0000EEB8 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEBE 5228 001A                  		addq.b	#1,$1A(a0)
0000EEC2 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EEC8 6500                       		bcs.s	Obj12_ChkDel
0000EECA 117C 0000 001A             		move.b	#0,$1A(a0)
0000EED0                            
0000EED0                            Obj12_ChkDel:
0000EED0 3028 0008                  		move.w	8(a0),d0
0000EED4 0240 FF80                  		andi.w	#$FF80,d0
0000EED8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEDC 0441 0080                  		subi.w	#$80,d1
0000EEE0 0241 FF80                  		andi.w	#$FF80,d1
0000EEE4 9041                       		sub.w	d1,d0
0000EEE6 0C40 0280                  		cmpi.w	#$280,d0
0000EEEA 6200 ECCA                  		bhi.w	DeleteObject
0000EEEE 6000 EC8A                  		bra.w	DisplaySprite
0000EEF2                            ; ===========================================================================
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2                            ; Sprite mappings - lamp (SYZ)
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2                            Map_obj12:
0000EEF2                            	include "_maps\obj12.asm"
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2                            ; Sprite mappings - lamp (SYZ)
0000EEF2                            ; ---------------------------------------------------------------------------
0000EEF2 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EEF6 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EEFA 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EEFE 02                         byte_E98E:	dc.b 2
0000EEFF F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF04 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF09 02                         byte_E999:	dc.b 2
0000EF0A F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF0F 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF14 02                         byte_E9A4:	dc.b 2
0000EF15 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF1A 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF1F 02                         byte_E9AF:	dc.b 2
0000EF20 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF25 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF2A 02                         byte_E9BA:	dc.b 2
0000EF2B F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF30 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF35 02                         byte_E9C5:	dc.b 2
0000EF36 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF3B 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF40                            		even
0000EF40                            		even
0000EF40                            
0000EF40                            ; ===========================================================================
0000EF40                            ; ---------------------------------------------------------------------------
0000EF40                            ; Object 47 - pinball bumper (SYZ)
0000EF40                            ; ---------------------------------------------------------------------------
0000EF40                            
0000EF40                            Obj47:					; XREF: Obj_Index
0000EF40 7000                       		moveq	#0,d0
0000EF42 1028 0024                  		move.b	$24(a0),d0
0000EF46 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF4A 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF4E                            ; ===========================================================================
0000EF4E 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF50 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF52                            ; ===========================================================================
0000EF52                            
0000EF52                            Obj47_Main:				; XREF: Obj47_Index
0000EF52 5428 0024                  		addq.b	#2,$24(a0)
0000EF56 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF5E 317C 0380 0002             		move.w	#$380,2(a0)
0000EF64 117C 0004 0001             		move.b	#4,1(a0)
0000EF6A 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF70 117C 0001 0018             		move.b	#1,$18(a0)
0000EF76 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EF7C                            
0000EF7C                            Obj47_Hit:				; XREF: Obj47_Index
0000EF7C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EF80 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EF84 4228 0021                  		clr.b	$21(a0)
0000EF88 43F8 D000                  		lea	($FFFFD000).w,a1
0000EF8C 3228 0008                  		move.w	8(a0),d1
0000EF90 3428 000C                  		move.w	$C(a0),d2
0000EF94 9269 0008                  		sub.w	8(a1),d1
0000EF98 9469 000C                  		sub.w	$C(a1),d2
0000EF9C 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EFA2 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EFA8 C3FC F900                  		muls.w	#-$700,d1
0000EFAC E081                       		asr.l	#8,d1
0000EFAE 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFB2 C1FC F900                  		muls.w	#-$700,d0
0000EFB6 E080                       		asr.l	#8,d0
0000EFB8 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFBC 08E9 0001 0022             		bset	#1,$22(a1)
0000EFC2 08A9 0004 0022             		bclr	#4,$22(a1)
0000EFC8 08A9 0005 0022             		bclr	#5,$22(a1)
0000EFCE 4229 003C                  		clr.b	$3C(a1)
0000EFD2 117C 0001 001C             		move.b	#1,$1C(a0)
0000EFD8 303C 00B4                  		move.w	#$B4,d0
0000EFDC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EFE2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EFE6 7000                       		moveq	#0,d0
0000EFE8 1028 0023                  		move.b	$23(a0),d0
0000EFEC 6700                       		beq.s	Obj47_Score
0000EFEE 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EFF4 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EFF6 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EFFA                            
0000EFFA                            Obj47_Score:
0000EFFA 7001                       		moveq	#1,d0
0000EFFC 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F002 6100 EFFC                  		bsr.w	SingleObjLoad
0000F006 6600                       		bne.s	Obj47_Display
0000F008 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F00C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F012 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F018 137C 0004 001A             		move.b	#4,$1A(a1)
0000F01E                            
0000F01E                            Obj47_Display:
0000F01E 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F024 6100 BC24                  		bsr.w	AnimateSprite
0000F028 3028 0008                  		move.w	8(a0),d0
0000F02C 0240 FF80                  		andi.w	#$FF80,d0
0000F030 3238 F700                  		move.w	($FFFFF700).w,d1
0000F034 0441 0080                  		subi.w	#$80,d1
0000F038 0241 FF80                  		andi.w	#$FF80,d1
0000F03C 9041                       		sub.w	d1,d0
0000F03E 0C40 0280                  		cmpi.w	#$280,d0
0000F042 6200                       		bhi.s	Obj47_ChkHit
0000F044 6000 EB34                  		bra.w	DisplaySprite
0000F048                            ; ===========================================================================
0000F048                            
0000F048                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F048 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F04C 7000                       		moveq	#0,d0
0000F04E 1028 0023                  		move.b	$23(a0),d0
0000F052 6700                       		beq.s	Obj47_Delete
0000F054 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F05A                            
0000F05A                            Obj47_Delete:
0000F05A 6000 EB5A                  		bra.w	DeleteObject
0000F05E                            ; ===========================================================================
0000F05E                            Ani_obj47:
0000F05E                            	include "_anim\obj47.asm"
0000F05E                            ; ---------------------------------------------------------------------------
0000F05E                            ; Animation script - flamethrower (SBZ)
0000F05E                            ; ---------------------------------------------------------------------------
0000F05E 0000                       		dc.w byte_EAF4-Ani_obj47
0000F060 0000                       		dc.w byte_EAF8-Ani_obj47
0000F062 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F066 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F06E                            		even
0000F06E                            		even
0000F06E                            
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            ; Sprite mappings - pinball bumper (SYZ)
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            Map_obj47:
0000F06E                            	include "_maps\obj47.asm"
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E                            ; Sprite mappings - pinball bumper (SYZ)
0000F06E                            ; ---------------------------------------------------------------------------
0000F06E 0000                       		dc.w byte_EB06-Map_obj47
0000F070 0000                       		dc.w byte_EB11-Map_obj47
0000F072 0000                       		dc.w byte_EB1C-Map_obj47
0000F074 02                         byte_EB06:	dc.b 2
0000F075 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F07A F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F07F 02                         byte_EB11:	dc.b 2
0000F080 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F085 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F08A 02                         byte_EB1C:	dc.b 2
0000F08B F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F090 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F096 00                         		even
0000F096 00                         		even
0000F096                            
0000F096                            ; ===========================================================================
0000F096                            ; ---------------------------------------------------------------------------
0000F096                            ; Object 0D - signpost at the end of a level
0000F096                            ; ---------------------------------------------------------------------------
0000F096                            
0000F096                            Obj0D:					; XREF: Obj_Index
0000F096 7000                       		moveq	#0,d0
0000F098 1028 0024                  		move.b	$24(a0),d0
0000F09C 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F0A0 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F0A4 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0AA 6100 BB9E                  		bsr.w	AnimateSprite
0000F0AE 6100 EACA                  		bsr.w	DisplaySprite
0000F0B2 3028 0008                  		move.w	8(a0),d0
0000F0B6 0240 FF80                  		andi.w	#$FF80,d0
0000F0BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0BE 0441 0080                  		subi.w	#$80,d1
0000F0C2 0241 FF80                  		andi.w	#$FF80,d1
0000F0C6 9041                       		sub.w	d1,d0
0000F0C8 0C40 0280                  		cmpi.w	#$280,d0
0000F0CC 6200 EAE8                  		bhi.w	DeleteObject
0000F0D0 4E75                       		rts	
0000F0D2                            ; ===========================================================================
0000F0D2 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F0D4 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F0D6 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F0D8 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F0DA 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F0DC                            ; ===========================================================================
0000F0DC                            
0000F0DC                            Obj0D_Main:				; XREF: Obj0D_Index
0000F0DC 5428 0024                  		addq.b	#2,$24(a0)
0000F0E0 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F0E8 317C 0680 0002             		move.w	#$680,2(a0)
0000F0EE 117C 0004 0001             		move.b	#4,1(a0)
0000F0F4 117C 0018 0019             		move.b	#$18,$19(a0)
0000F0FA 117C 0004 0018             		move.b	#4,$18(a0)
0000F100                            
0000F100                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F100 3038 D008                  		move.w	($FFFFD008).w,d0
0000F104 9068 0008                  		sub.w	8(a0),d0
0000F108 6500                       		bcs.s	locret_EBBA
0000F10A 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F10E 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F110 303C 00CF                  		move.w	#$CF,d0
0000F114 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F11A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F11E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F124 5428 0024                  		addq.b	#2,$24(a0)
0000F128                            
0000F128                            locret_EBBA:
0000F128 4E75                       		rts	
0000F12A                            ; ===========================================================================
0000F12A                            
0000F12A                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F12A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F12E 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F130 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F136 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F13A 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F140 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F142 5428 0024                  		addq.b	#2,$24(a0)
0000F146                            
0000F146                            Obj0D_Sparkle:
0000F146 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F14A 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F14C 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F152 7000                       		moveq	#0,d0
0000F154 1028 0034                  		move.b	$34(a0),d0
0000F158 5428 0034                  		addq.b	#2,$34(a0)
0000F15C 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F162 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F166 6100 EE98                  		bsr.w	SingleObjLoad
0000F16A 6600                       		bne.s	locret_EC42
0000F16C 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F170 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F176 101A                       		move.b	(a2)+,d0
0000F178 4880                       		ext.w	d0
0000F17A D068 0008                  		add.w	8(a0),d0
0000F17E 3340 0008                  		move.w	d0,8(a1)
0000F182 101A                       		move.b	(a2)+,d0
0000F184 4880                       		ext.w	d0
0000F186 D068 000C                  		add.w	$C(a0),d0
0000F18A 3340 000C                  		move.w	d0,$C(a1)
0000F18E 237C 0000 A3E8 0004        		move.l	#Map_obj25,4(a1)
0000F196 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F19C 137C 0004 0001             		move.b	#4,1(a1)
0000F1A2 137C 0002 0018             		move.b	#2,$18(a1)
0000F1A8 137C 0008 0019             		move.b	#8,$19(a1)
0000F1AE                            
0000F1AE                            locret_EC42:
0000F1AE 4E75                       		rts	
0000F1B0                            ; ===========================================================================
0000F1B0 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1B2 0808                       		dc.b	8,   8
0000F1B4 F000                       		dc.b -$10,   0
0000F1B6 18F8                       		dc.b  $18,  -8
0000F1B8 00F8                       		dc.b	0,  -8
0000F1BA 1000                       		dc.b  $10,   0
0000F1BC E808                       		dc.b -$18,   8
0000F1BE 1810                       		dc.b  $18, $10
0000F1C0                            ; ===========================================================================
0000F1C0                            
0000F1C0                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1C4 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F1C8 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F1CE 6600                       		bne.s	loc_EC70
0000F1D0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F1D6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F1DC 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F1DE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F1E4 6000                       		bra.s	loc_EC70
0000F1E6                            
0000F1E6                            Obj0D_MoveLeft:
0000F1E6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F1EC                            
0000F1EC                            loc_EC70:
0000F1EC 4A38 D000                  		tst.b	($FFFFD000).w
0000F1F0 6700                       		beq.s	loc_EC86
0000F1F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1F6 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F1FA 0641 0128                  		addi.w	#$128,d1
0000F1FE B041                       		cmp.w	d1,d0
0000F200 6500                       		bcs.s	locret_ECEE
0000F202                            
0000F202                            loc_EC86:
0000F202 5428 0024                  		addq.b	#2,$24(a0)
0000F206                            
0000F206                            ; ---------------------------------------------------------------------------
0000F206                            ; Subroutine to	set up bonuses at the end of an	act
0000F206                            ; ---------------------------------------------------------------------------
0000F206                            
0000F206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F206                            
0000F206                            
0000F206                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F206 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F20A 6600                       		bne.s	locret_ECEE
0000F20C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F212 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F216 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F21A 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F220 7010                       		moveq	#$10,d0
0000F222 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F228 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F22E 7000                       		moveq	#0,d0
0000F230 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F234 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F238 7200                       		moveq	#0,d1
0000F23A 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F23E D041                       		add.w	d1,d0		; add up your time
0000F240 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F244 7214                       		moveq	#$14,d1
0000F246 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F248 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F24A 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F24C                            
0000F24C                            loc_ECD0:
0000F24C D040                       		add.w	d0,d0
0000F24E 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F254 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F258 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F25C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F260 303C 008E                  		move.w	#$8E,d0
0000F264 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F26A                            
0000F26A                            locret_ECEE:
0000F26A 4E75                       		rts	
0000F26C                            ; End of function GotThroughAct
0000F26C                            
0000F26C                            ; ===========================================================================
0000F26C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F280 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F296                            ; ===========================================================================
0000F296                            
0000F296                            locret_ED1A:				; XREF: Obj0D_Index
0000F296 4E75                       		rts	
0000F298                            ; ===========================================================================
0000F298                            Ani_obj0D:
0000F298                            	include "_anim\obj0D.asm"
0000F298                            ; ---------------------------------------------------------------------------
0000F298                            ; Animation script - signpost
0000F298                            ; ---------------------------------------------------------------------------
0000F298 0000                       		dc.w byte_ED24-Ani_obj0D
0000F29A 0000                       		dc.w byte_ED28-Ani_obj0D
0000F29C 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F29E 0000                       		dc.w byte_ED34-Ani_obj0D
0000F2A0 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F2A4 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2AA 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2B0 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2B4 00                         		even
0000F2B4 00                         		even
0000F2B4                            
0000F2B4                            ; ---------------------------------------------------------------------------
0000F2B4                            ; Sprite mappings - signpost
0000F2B4                            ; ---------------------------------------------------------------------------
0000F2B4                            Map_obj0D:
0000F2B4                            	include "_maps\obj0D.asm"
0000F2B4                            ; ---------------------------------------------------------------------------
0000F2B4                            ; Sprite mappings - signpost
0000F2B4                            ; ---------------------------------------------------------------------------
0000F2B4 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2B8 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2BC 0000                       		dc.w byte_ED73-Map_obj0D
0000F2BE 03                         byte_ED42:	dc.b 3
0000F2BF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2C4 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F2C9 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2CE 02                         byte_ED52:	dc.b 2
0000F2CF F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F2D4 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2D9 02                         byte_ED5D:	dc.b 2
0000F2DA F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F2DF 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2E4 02                         byte_ED68:	dc.b 2
0000F2E5 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F2EA 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2EF 03                         byte_ED73:	dc.b 3
0000F2F0 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F2F5 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F2FA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F300 00                         		even
0000F300 00                         		even
0000F300                            
0000F300                            ; ===========================================================================
0000F300                            ; ---------------------------------------------------------------------------
0000F300                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F300                            ; ---------------------------------------------------------------------------
0000F300                            
0000F300                            Obj4C:					; XREF: Obj_Index
0000F300 7000                       		moveq	#0,d0
0000F302 1028 0024                  		move.b	$24(a0),d0
0000F306 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F30A 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F30E 6000 0000                  		bra.w	Obj4D_ChkDel
0000F312                            ; ===========================================================================
0000F312 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F314 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F316 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F318 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F31A 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F31C 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F31E                            ; ===========================================================================
0000F31E                            
0000F31E                            Obj4C_Main:				; XREF: Obj4C_Index
0000F31E 5428 0024                  		addq.b	#2,$24(a0)
0000F322 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F32A 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F330 117C 0004 0001             		move.b	#4,1(a0)
0000F336 117C 0001 0018             		move.b	#1,$18(a0)
0000F33C 117C 0038 0019             		move.b	#$38,$19(a0)
0000F342 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F348                            
0000F348                            loc_EDCC:				; XREF: Obj4C_Index
0000F348 5368 0032                  		subq.w	#1,$32(a0)
0000F34C 6A00                       		bpl.s	locret_EDF0
0000F34E 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F354 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F358 3228 000C                  		move.w	$C(a0),d1
0000F35C B041                       		cmp.w	d1,d0
0000F35E 6400                       		bcc.s	locret_EDF0
0000F360 0441 0170                  		subi.w	#$170,d1
0000F364 B041                       		cmp.w	d1,d0
0000F366 6500                       		bcs.s	locret_EDF0
0000F368 5428 0024                  		addq.b	#2,$24(a0)
0000F36C                            
0000F36C                            locret_EDF0:
0000F36C 4E75                       		rts	
0000F36E                            ; ===========================================================================
0000F36E                            
0000F36E                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F36E 5428 0024                  		addq.b	#2,$24(a0)
0000F372 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F376 6600                       		bne.s	loc_EE18
0000F378 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F37C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F382 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F388 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F38E 2348 003C                  		move.l	a0,$3C(a1)
0000F392                            
0000F392                            loc_EE18:
0000F392 117C 0001 001C             		move.b	#1,$1C(a0)
0000F398 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F39C 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F39E 117C 0004 001C             		move.b	#4,$1C(a0)
0000F3A4 6000                       		bra.s	Obj4C_Display
0000F3A6                            ; ===========================================================================
0000F3A6                            
0000F3A6                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F3A6 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3AA 08E9 0001 0022             		bset	#1,$22(a1)
0000F3B0 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3B6 6000                       		bra.s	Obj4C_Display
0000F3B8                            ; ===========================================================================
0000F3B8                            
0000F3B8                            loc_EE3E:				; XREF: Obj4C_Index
0000F3B8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3BC 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3BE 5428 0024                  		addq.b	#2,$24(a0)
0000F3C2 4E75                       		rts	
0000F3C4                            ; ===========================================================================
0000F3C4                            
0000F3C4                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3C4 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3CA 6100 B87E                  		bsr.w	AnimateSprite
0000F3CE 6100 E7AA                  		bsr.w	DisplaySprite
0000F3D2 4E75                       		rts	
0000F3D4                            ; ===========================================================================
0000F3D4                            
0000F3D4                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F3D4 117C 0000 001C             		move.b	#0,$1C(a0)
0000F3DA 117C 0002 0024             		move.b	#2,$24(a0)
0000F3E0 4A28 0028                  		tst.b	$28(a0)
0000F3E4 6700 E7D0                  		beq.w	DeleteObject
0000F3E8 4E75                       		rts	
0000F3EA                            ; ===========================================================================
0000F3EA                            ; ---------------------------------------------------------------------------
0000F3EA                            ; Object 4D - lava geyser / lavafall (MZ)
0000F3EA                            ; ---------------------------------------------------------------------------
0000F3EA                            
0000F3EA                            Obj4D:					; XREF: Obj_Index
0000F3EA 7000                       		moveq	#0,d0
0000F3EC 1028 0024                  		move.b	$24(a0),d0
0000F3F0 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F3F4 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F3F8 6000 E780                  		bra.w	DisplaySprite
0000F3FC                            ; ===========================================================================
0000F3FC 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F3FE 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F400 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F402 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F404                            
0000F404 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F408                            ; ===========================================================================
0000F408                            
0000F408                            Obj4D_Main:				; XREF: Obj4D_Index
0000F408 5428 0024                  		addq.b	#2,$24(a0)
0000F40C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F412 4A28 0028                  		tst.b	$28(a0)
0000F416 6700                       		beq.s	loc_EEA4
0000F418 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F41E                            
0000F41E                            loc_EEA4:
0000F41E 7000                       		moveq	#0,d0
0000F420 1028 0028                  		move.b	$28(a0),d0
0000F424 D040                       		add.w	d0,d0
0000F426 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F42C 2248                       		movea.l	a0,a1
0000F42E 7201                       		moveq	#1,d1
0000F430 6100                       		bsr.s	Obj4D_MakeLava
0000F432 6000                       		bra.s	loc_EF10
0000F434                            ; ===========================================================================
0000F434                            
0000F434                            Obj4D_Loop:
0000F434 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F438 6600                       		bne.s	loc_EF0A
0000F43A                            
0000F43A                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F43A 12BC 004D                  		move.b	#$4D,0(a1)
0000F43E 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F446 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F44C 137C 0004 0001             		move.b	#4,1(a1)
0000F452 137C 0020 0019             		move.b	#$20,$19(a1)
0000F458 3368 0008 0008             		move.w	8(a0),8(a1)
0000F45E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F464 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F46A 137C 0001 0018             		move.b	#1,$18(a1)
0000F470 137C 0005 001C             		move.b	#5,$1C(a1)
0000F476 4A28 0028                  		tst.b	$28(a0)
0000F47A 6700                       		beq.s	loc_EF0A
0000F47C 137C 0002 001C             		move.b	#2,$1C(a1)
0000F482                            
0000F482                            loc_EF0A:
0000F482 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F486 4E75                       		rts	
0000F488                            ; ===========================================================================
0000F488                            
0000F488                            loc_EF10:				; XREF: Obj4D_Main
0000F488 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F48E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F494 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F49A 137C 0093 0020             		move.b	#$93,$20(a1)
0000F4A0 137C 0080 0016             		move.b	#$80,$16(a1)
0000F4A6 08E9 0004 0001             		bset	#4,1(a1)
0000F4AC 5829 0024                  		addq.b	#4,$24(a1)
0000F4B0 2348 003C                  		move.l	a0,$3C(a1)
0000F4B4 4A28 0028                  		tst.b	$28(a0)
0000F4B8 6700                       		beq.s	Obj4D_PlaySnd
0000F4BA 7200                       		moveq	#0,d1
0000F4BC 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4C0 5429 0024                  		addq.b	#2,$24(a1)
0000F4C4 08E9 0004 0002             		bset	#4,2(a1)
0000F4CA 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F4D0 137C 0000 0018             		move.b	#0,$18(a1)
0000F4D6 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4DC 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F4E2 117C 0000 0028             		move.b	#0,$28(a0)
0000F4E8                            
0000F4E8                            Obj4D_PlaySnd:
0000F4E8 303C 00C8                  		move.w	#$C8,d0
0000F4EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F4F2                            
0000F4F2                            Obj4D_Action:				; XREF: Obj4D_Index
0000F4F2 7000                       		moveq	#0,d0
0000F4F4 1028 0028                  		move.b	$28(a0),d0
0000F4F8 D040                       		add.w	d0,d0
0000F4FA 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F4FE 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F502 6100 E650                  		bsr.w	SpeedToPos
0000F506 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F50C 6100 B73C                  		bsr.w	AnimateSprite
0000F510                            
0000F510                            Obj4D_ChkDel:				; XREF: Obj4C
0000F510 3028 0008                  		move.w	8(a0),d0
0000F514 0240 FF80                  		andi.w	#$FF80,d0
0000F518 3238 F700                  		move.w	($FFFFF700).w,d1
0000F51C 0441 0080                  		subi.w	#$80,d1
0000F520 0241 FF80                  		andi.w	#$FF80,d1
0000F524 9041                       		sub.w	d1,d0
0000F526 0C40 0280                  		cmpi.w	#$280,d0
0000F52A 6200 E68A                  		bhi.w	DeleteObject
0000F52E 4E75                       		rts	
0000F530                            ; ===========================================================================
0000F530 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F532 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F534                            ; ===========================================================================
0000F534                            
0000F534                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F534 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F53A 3028 0030                  		move.w	$30(a0),d0
0000F53E B068 000C                  		cmp.w	$C(a0),d0
0000F542 6400                       		bcc.s	locret_EFDA
0000F544 5828 0024                  		addq.b	#4,$24(a0)
0000F548 2268 003C                  		movea.l	$3C(a0),a1
0000F54C 137C 0003 001C             		move.b	#3,$1C(a1)
0000F552                            
0000F552                            locret_EFDA:
0000F552 4E75                       		rts	
0000F554                            ; ===========================================================================
0000F554                            
0000F554                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F554 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F55A 3028 0030                  		move.w	$30(a0),d0
0000F55E B068 000C                  		cmp.w	$C(a0),d0
0000F562 6400                       		bcc.s	locret_EFFA
0000F564 5828 0024                  		addq.b	#4,$24(a0)
0000F568 2268 003C                  		movea.l	$3C(a0),a1
0000F56C 137C 0001 001C             		move.b	#1,$1C(a1)
0000F572                            
0000F572                            locret_EFFA:
0000F572 4E75                       		rts	
0000F574                            ; ===========================================================================
0000F574                            
0000F574                            loc_EFFC:				; XREF: Obj4D_Index
0000F574 2268 003C                  		movea.l	$3C(a0),a1
0000F578 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F57E 6700 0000                  		beq.w	Obj4D_Delete
0000F582 3029 000C                  		move.w	$C(a1),d0
0000F586 0640 0060                  		addi.w	#$60,d0
0000F58A 3140 000C                  		move.w	d0,$C(a0)
0000F58E 9068 0030                  		sub.w	$30(a0),d0
0000F592 4440                       		neg.w	d0
0000F594 7208                       		moveq	#8,d1
0000F596 0C40 0040                  		cmpi.w	#$40,d0
0000F59A 6C00                       		bge.s	loc_F026
0000F59C 720B                       		moveq	#$B,d1
0000F59E                            
0000F59E                            loc_F026:
0000F59E 0C40 0080                  		cmpi.w	#$80,d0
0000F5A2 6F00                       		ble.s	loc_F02E
0000F5A4 720E                       		moveq	#$E,d1
0000F5A6                            
0000F5A6                            loc_F02E:
0000F5A6 5328 001E                  		subq.b	#1,$1E(a0)
0000F5AA 6A00                       		bpl.s	loc_F04C
0000F5AC 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5B2 5228 001B                  		addq.b	#1,$1B(a0)
0000F5B6 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5BC 6500                       		bcs.s	loc_F04C
0000F5BE 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5C4                            
0000F5C4                            loc_F04C:
0000F5C4 1028 001B                  		move.b	$1B(a0),d0
0000F5C8 D001                       		add.b	d1,d0
0000F5CA 1140 001A                  		move.b	d0,$1A(a0)
0000F5CE 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F5D2                            ; ===========================================================================
0000F5D2                            
0000F5D2                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F5D2 6000 E5E2                  		bra.w	DeleteObject
0000F5D6                            ; ===========================================================================
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            ; Object 4E - advancing	wall of	lava (MZ)
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            
0000F5D6                            Obj4E:					; XREF: Obj_Index
0000F5D6 7000                       		moveq	#0,d0
0000F5D8 1028 0024                  		move.b	$24(a0),d0
0000F5DC 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F5E0 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F5E4                            ; ===========================================================================
0000F5E4 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F5E6 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F5E8 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F5EA 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F5EC 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F5EE                            ; ===========================================================================
0000F5EE                            
0000F5EE                            Obj4E_Main:				; XREF: Obj4E_Index
0000F5EE 5828 0024                  		addq.b	#4,$24(a0)
0000F5F2 2248                       		movea.l	a0,a1
0000F5F4 7201                       		moveq	#1,d1
0000F5F6 6000                       		bra.s	Obj4E_Main2
0000F5F8                            ; ===========================================================================
0000F5F8                            
0000F5F8                            Obj4E_Loop:
0000F5F8 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F5FC 6600                       		bne.s	loc_F0C8
0000F5FE                            
0000F5FE                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F5FE 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F602 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F60A 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F610 137C 0004 0001             		move.b	#4,1(a1)
0000F616 137C 0050 0019             		move.b	#$50,$19(a1)
0000F61C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F622 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F628 137C 0001 0018             		move.b	#1,$18(a1)
0000F62E 137C 0000 001C             		move.b	#0,$1C(a1)
0000F634 137C 0094 0020             		move.b	#$94,$20(a1)
0000F63A 2348 003C                  		move.l	a0,$3C(a1)
0000F63E                            
0000F63E                            loc_F0C8:
0000F63E 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F642                            
0000F642 5C29 0024                  		addq.b	#6,$24(a1)
0000F646 137C 0004 001A             		move.b	#4,$1A(a1)
0000F64C                            
0000F64C                            Obj4E_Action:				; XREF: Obj4E_Index
0000F64C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F650 9068 0008                  		sub.w	8(a0),d0
0000F654 6400                       		bcc.s	Obj4E_ChkSonic
0000F656 4440                       		neg.w	d0
0000F658                            
0000F658                            Obj4E_ChkSonic:
0000F658 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F65C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F65E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F662 9068 000C                  		sub.w	$C(a0),d0
0000F666 6400                       		bcc.s	loc_F0F4
0000F668 4440                       		neg.w	d0
0000F66A                            
0000F66A                            loc_F0F4:
0000F66A 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F66E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F670 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F676 6000                       		bra.s	Obj4E_Solid
0000F678                            ; ===========================================================================
0000F678                            
0000F678                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F678 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F67C 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F67E 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F684 5528 0024                  		subq.b	#2,$24(a0)
0000F688                            
0000F688                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F688 323C 002B                  		move.w	#$2B,d1
0000F68C 343C 0018                  		move.w	#$18,d2
0000F690 3602                       		move.w	d2,d3
0000F692 5243                       		addq.w	#1,d3
0000F694 3828 0008                  		move.w	8(a0),d4
0000F698 1028 0024                  		move.b	$24(a0),d0
0000F69C 3F00                       		move.w	d0,-(sp)
0000F69E 6100 0000                  		bsr.w	SolidObject
0000F6A2 301F                       		move.w	(sp)+,d0
0000F6A4 1140 0024                  		move.b	d0,$24(a0)
0000F6A8 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6AE 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6B0 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6B4 4228 0036                  		clr.b	$36(a0)
0000F6B8                            
0000F6B8                            Obj4E_Animate:
0000F6B8 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6BE 6100 B58A                  		bsr.w	AnimateSprite
0000F6C2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F6C8 6400                       		bcc.s	Obj4E_ChkDel
0000F6CA 6100 E488                  		bsr.w	SpeedToPos
0000F6CE                            
0000F6CE                            Obj4E_ChkDel:
0000F6CE 6100 E4AA                  		bsr.w	DisplaySprite
0000F6D2 4A28 0036                  		tst.b	$36(a0)
0000F6D6 6600                       		bne.s	locret_F17E
0000F6D8 3028 0008                  		move.w	8(a0),d0
0000F6DC 0240 FF80                  		andi.w	#$FF80,d0
0000F6E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6E4 0441 0080                  		subi.w	#$80,d1
0000F6E8 0241 FF80                  		andi.w	#$FF80,d1
0000F6EC 9041                       		sub.w	d1,d0
0000F6EE 0C40 0280                  		cmpi.w	#$280,d0
0000F6F2 6200                       		bhi.s	Obj4E_ChkGone
0000F6F4                            
0000F6F4                            locret_F17E:
0000F6F4 4E75                       		rts	
0000F6F6                            ; ===========================================================================
0000F6F6                            
0000F6F6                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F6F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F6FA 7000                       		moveq	#0,d0
0000F6FC 1028 0023                  		move.b	$23(a0),d0
0000F700 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F706 117C 0008 0024             		move.b	#8,$24(a0)
0000F70C 4E75                       		rts	
0000F70E                            ; ===========================================================================
0000F70E                            
0000F70E                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F70E 2268 003C                  		movea.l	$3C(a0),a1
0000F712 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F718 6700                       		beq.s	Obj4E_Delete
0000F71A 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F720 0468 0080 0008             		subi.w	#$80,8(a0)
0000F726 6000 E452                  		bra.w	DisplaySprite
0000F72A                            ; ===========================================================================
0000F72A                            
0000F72A                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F72A 6000 E48A                  		bra.w	DeleteObject
0000F72E                            ; ===========================================================================
0000F72E                            ; ---------------------------------------------------------------------------
0000F72E                            ; Object 54 - invisible	lava tag (MZ)
0000F72E                            ; ---------------------------------------------------------------------------
0000F72E                            
0000F72E                            Obj54:					; XREF: Obj_Index
0000F72E 7000                       		moveq	#0,d0
0000F730 1028 0024                  		move.b	$24(a0),d0
0000F734 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F738 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F73C                            ; ===========================================================================
0000F73C 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F73E 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F740                            
0000F740 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F744                            ; ===========================================================================
0000F744                            
0000F744                            Obj54_Main:				; XREF: Obj54_Index
0000F744 5428 0024                  		addq.b	#2,$24(a0)
0000F748 7000                       		moveq	#0,d0
0000F74A 1028 0028                  		move.b	$28(a0),d0
0000F74E 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F754 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F75C 117C 0084 0001             		move.b	#$84,1(a0)
0000F762                            
0000F762                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F762 3028 0008                  		move.w	8(a0),d0
0000F766 0240 FF80                  		andi.w	#$FF80,d0
0000F76A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F76E 0441 0080                  		subi.w	#$80,d1
0000F772 0241 FF80                  		andi.w	#$FF80,d1
0000F776 9041                       		sub.w	d1,d0
0000F778 6B00 E43C                  		bmi.w	DeleteObject
0000F77C 0C40 0280                  		cmpi.w	#$280,d0
0000F780 6200 E434                  		bhi.w	DeleteObject
0000F784 4E75                       		rts	
0000F786                            ; ===========================================================================
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - invisible lava tag (MZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            Map_obj54:
0000F786                            	include "_maps\obj54.asm"
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - invisible lava tag (MZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786 0000                       		dc.w byte_F212-Map_obj54
0000F788 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F78A 00                         		even
0000F78A 00                         		even
0000F78A                            
0000F78A                            Ani_obj4C:
0000F78A                            	include "_anim\obj4C.asm"
0000F78A                            ; ---------------------------------------------------------------------------
0000F78A                            ; Animation script - geyser of lava (MZ)
0000F78A                            ; ---------------------------------------------------------------------------
0000F78A 0000                       		dc.w byte_F220-Ani_obj4C
0000F78C 0000                       		dc.w byte_F22A-Ani_obj4C
0000F78E 0000                       		dc.w byte_F22E-Ani_obj4C
0000F790 0000                       		dc.w byte_F232-Ani_obj4C
0000F792 0000                       		dc.w byte_F23A-Ani_obj4C
0000F794 0000                       		dc.w byte_F23E-Ani_obj4C
0000F796 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F7A0 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F7A4 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7A8 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7B0 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7B4 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7B8                            		even
0000F7B8                            		even
0000F7B8                            
0000F7B8                            Ani_obj4E:
0000F7B8                            	include "_anim\obj4E.asm"
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Animation script - advancing wall of lava (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8 0000                       		dc.w byte_F244-Ani_obj4E
0000F7BA 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7C0                            		even
0000F7C0                            		even
0000F7C0                            
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            Map_obj4C:
0000F7C0                            	include "_maps\obj4C.asm"
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7C0                            ; ---------------------------------------------------------------------------
0000F7C0 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7C4 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F7C8 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F7CC 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F7D0 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F7D4 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F7D8 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F7DC 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F7E0 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F7E4 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F7E8 02                         byte_F272:	dc.b 2
0000F7E9 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F7EE EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F7F3 02                         byte_F27D:	dc.b 2
0000F7F4 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F7F9 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F7FE 04                         byte_F288:	dc.b 4
0000F7FF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F804 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F809 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F80E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F813 04                         byte_F29D:	dc.b 4
0000F814 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F819 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F81E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F823 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F828 06                         byte_F2B2:	dc.b 6
0000F829 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F82E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F833 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F838 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F83D E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F842 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F847 06                         byte_F2D1:	dc.b 6
0000F848 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F84D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F852 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F857 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F85C E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F861 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F866 02                         byte_F2F0:	dc.b 2
0000F867 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F86C E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F871 02                         byte_F2FB:	dc.b 2
0000F872 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F877 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F87C 0A                         byte_F306:	dc.b $A
0000F87D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F882 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F887 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F88C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F891 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F896 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F89B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F8A0 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F8A5 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8AA 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8AF 0A                         byte_F339:	dc.b $A
0000F8B0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8B5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8BA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8BF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8C4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8C9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8CE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F8D3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F8D8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F8DD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F8E2 0A                         byte_F36C:	dc.b $A
0000F8E3 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F8E8 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F8ED B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F8F2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F8F7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F8FC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F901 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F906 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F90B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F910 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F915 06                         byte_F39F:	dc.b 6
0000F916 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F91B 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F920 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F925 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F92A D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F92F D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F934 06                         byte_F3BE:	dc.b 6
0000F935 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F93A 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F93F B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F944 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F949 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F94E D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F953 06                         byte_F3DD:	dc.b 6
0000F954 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F959 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F95E B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F963 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F968 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F96D D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F972 10                         byte_F3FC:	dc.b $10
0000F973 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F978 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F97D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F982 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F987 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F98C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F991 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F996 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F99B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9A0 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9A5 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9AA 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9AF 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9B4 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9B9 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9BE 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9C3 10                         byte_F44D:	dc.b $10
0000F9C4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9C9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9CE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9D3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9D8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9DD D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9E2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9E7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F9EC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F9F1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F9F6 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F9FB 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA00 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA05 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA0A 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA0F 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA14 10                         byte_F49E:	dc.b $10
0000FA15 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA1A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA1F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA24 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA29 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA2E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA33 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA38 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA3D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA42 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA47 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA4C 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA51 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA56 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA5B 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA60 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA65 06                         byte_F4EF:	dc.b 6
0000FA66 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA6B E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA70 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FA75 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FA7A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FA7F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FA84 06                         byte_F50E:	dc.b 6
0000FA85 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FA8A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FA8F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FA94 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FA99 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FA9E D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FAA3 00                         byte_F52D:	dc.b 0
0000FAA4                            		even
0000FAA4                            		even
0000FAA4                            
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4                            Map_obj4E:
0000FAA4                            	include "_maps\obj4E.asm"
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4 0000                       		dc.w byte_F538-Map_obj4E
0000FAA6 0000                       		dc.w byte_F566-Map_obj4E
0000FAA8 0000                       		dc.w byte_F594-Map_obj4E
0000FAAA 0000                       		dc.w byte_F5C2-Map_obj4E
0000FAAC 0000                       		dc.w byte_F5F0-Map_obj4E
0000FAAE 09                         byte_F538:	dc.b 9
0000FAAF E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FAB4 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FAB9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FABE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAC3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAC8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FACD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAD2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FAD7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FADC 09                         byte_F566:	dc.b 9
0000FADD E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FAE2 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FAE7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAEC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAF1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAF6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAFB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB00 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB05 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB0A 09                         byte_F594:	dc.b 9
0000FB0B E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB10 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB15 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB1A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB1F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB24 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB29 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB2E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB33 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB38 09                         byte_F5C2:	dc.b 9
0000FB39 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB3E 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB43 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB48 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB4D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB52 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB57 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB5C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB61 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB66 08                         byte_F5F0:	dc.b 8
0000FB67 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB6C 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB71 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB76 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB7B E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB80 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB85 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB8A 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB90 00                         		even
0000FB90 00                         		even
0000FB90                            
0000FB90                            ; ===========================================================================
0000FB90                            ; ---------------------------------------------------------------------------
0000FB90                            ; Object 40 - Moto Bug enemy (GHZ)
0000FB90                            ; ---------------------------------------------------------------------------
0000FB90                            
0000FB90                            Obj40:					; XREF: Obj_Index
0000FB90 7000                       		moveq	#0,d0
0000FB92 1028 0024                  		move.b	$24(a0),d0
0000FB96 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FB9A 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FB9E                            ; ===========================================================================
0000FB9E 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FBA0 0000                       		dc.w Obj40_Action-Obj40_Index
0000FBA2 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FBA4 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FBA6                            ; ===========================================================================
0000FBA6                            
0000FBA6                            Obj40_Main:				; XREF: Obj40_Index
0000FBA6 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBAE 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBB4 117C 0004 0001             		move.b	#4,1(a0)
0000FBBA 117C 0004 0018             		move.b	#4,$18(a0)
0000FBC0 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBC6 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FBCA 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FBCC 117C 000E 0016             		move.b	#$E,$16(a0)
0000FBD2 117C 0008 0017             		move.b	#8,$17(a0)
0000FBD8 117C 000C 0020             		move.b	#$C,$20(a0)
0000FBDE 6100 DF48                  		bsr.w	ObjectFall
0000FBE2 4EB9 0000 0000             		jsr	ObjHitFloor
0000FBE8 4A41                       		tst.w	d1
0000FBEA 6A00                       		bpl.s	locret_F68A
0000FBEC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FBF0 317C 0000 0012             		move.w	#0,$12(a0)
0000FBF6 5428 0024                  		addq.b	#2,$24(a0)
0000FBFA 0868 0000 0022             		bchg	#0,$22(a0)
0000FC00                            
0000FC00                            locret_F68A:
0000FC00 4E75                       		rts	
0000FC02                            ; ===========================================================================
0000FC02                            
0000FC02                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC02 5828 0024                  		addq.b	#4,$24(a0)
0000FC06 6000 0000                  		bra.w	Obj40_Animate
0000FC0A                            ; ===========================================================================
0000FC0A                            
0000FC0A                            Obj40_Action:				; XREF: Obj40_Index
0000FC0A 7000                       		moveq	#0,d0
0000FC0C 1028 0025                  		move.b	$25(a0),d0
0000FC10 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC14 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC18 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC1E 6100 B02A                  		bsr.w	AnimateSprite
0000FC22                            
0000FC22                            ; ---------------------------------------------------------------------------
0000FC22                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC22                            ; ---------------------------------------------------------------------------
0000FC22                            
0000FC22                            MarkObjGone:
0000FC22 3028 0008                  		move.w	8(a0),d0
0000FC26 0240 FF80                  		andi.w	#$FF80,d0
0000FC2A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC2E 0441 0080                  		subi.w	#$80,d1
0000FC32 0241 FF80                  		andi.w	#$FF80,d1
0000FC36 9041                       		sub.w	d1,d0
0000FC38 0C40 0280                  		cmpi.w	#$280,d0
0000FC3C 6200 0000                  		bhi.w	Mark_ChkGone
0000FC40 6000 DF38                  		bra.w	DisplaySprite
0000FC44                            ; ===========================================================================
0000FC44                            
0000FC44                            Mark_ChkGone:
0000FC44 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC48 7000                       		moveq	#0,d0
0000FC4A 1028 0023                  		move.b	$23(a0),d0
0000FC4E 6700                       		beq.s	Mark_Delete
0000FC50 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC56                            
0000FC56                            Mark_Delete:
0000FC56 6000 DF5E                  		bra.w	DeleteObject
0000FC5A                            
0000FC5A                            ; ===========================================================================
0000FC5A 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC5C 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC5E                            ; ===========================================================================
0000FC5E                            
0000FC5E                            Obj40_Move:				; XREF: Obj40_Index2
0000FC5E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC62 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC64 5428 0025                  		addq.b	#2,$25(a0)
0000FC68 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC6E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC74 0868 0000 0022             		bchg	#0,$22(a0)
0000FC7A 6600                       		bne.s	locret_F70A
0000FC7C 4468 0010                  		neg.w	$10(a0)		; change direction
0000FC80                            
0000FC80                            locret_F70A:
0000FC80 4E75                       		rts	
0000FC82                            ; ===========================================================================
0000FC82                            
0000FC82                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FC82 6100 DED0                  		bsr.w	SpeedToPos
0000FC86 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC8C 0C41 FFF8                  		cmpi.w	#-8,d1
0000FC90 6D00                       		blt.s	Obj40_Pause
0000FC92 0C41 000C                  		cmpi.w	#$C,d1
0000FC96 6C00                       		bge.s	Obj40_Pause
0000FC98 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC9C 5328 0033                  		subq.b	#1,$33(a0)
0000FCA0 6A00                       		bpl.s	locret_F756
0000FCA2 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCA8 6100 E356                  		bsr.w	SingleObjLoad
0000FCAC 6600                       		bne.s	locret_F756
0000FCAE 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCB2 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCBE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCC4 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCCA                            
0000FCCA                            locret_F756:
0000FCCA 4E75                       		rts	
0000FCCC                            ; ===========================================================================
0000FCCC                            
0000FCCC                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FCCC 5528 0025                  		subq.b	#2,$25(a0)
0000FCD0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FCD6 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FCDC 117C 0000 001C             		move.b	#0,$1C(a0)
0000FCE2 4E75                       		rts	
0000FCE4                            ; ===========================================================================
0000FCE4                            
0000FCE4                            Obj40_Animate:				; XREF: Obj40_Index
0000FCE4 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FCEA 6100 AF5E                  		bsr.w	AnimateSprite
0000FCEE 6000 DE8A                  		bra.w	DisplaySprite
0000FCF2                            ; ===========================================================================
0000FCF2                            
0000FCF2                            Obj40_Delete:				; XREF: Obj40_Index
0000FCF2 6000 DEC2                  		bra.w	DeleteObject
0000FCF6                            ; ===========================================================================
0000FCF6                            Ani_obj40:
0000FCF6                            	include "_anim\obj40.asm"
0000FCF6                            ; ---------------------------------------------------------------------------
0000FCF6                            ; Animation script - Motobug enemy
0000FCF6                            ; ---------------------------------------------------------------------------
0000FCF6 0000                       		dc.w byte_F788-Ani_obj40
0000FCF8 0000                       		dc.w byte_F78C-Ani_obj40
0000FCFA 0000                       		dc.w byte_F792-Ani_obj40
0000FCFC 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD00 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD06 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD14                            		even
0000FD14                            		even
0000FD14                            
0000FD14                            ; ---------------------------------------------------------------------------
0000FD14                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD14                            ; ---------------------------------------------------------------------------
0000FD14                            Map_obj40:
0000FD14                            	include "_maps\obj40.asm"
0000FD14                            Map_cedc:
0000FD14 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD16 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD18 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD1A 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD1C 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD1E 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD20 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD22 04                         Map_cedc_E: 	dc.b $4
0000FD23 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD28 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD2D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD32 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD37 04                         Map_cedc_23: 	dc.b $4
0000FD38 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD3D 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD42 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD47 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD4C 05                         Map_cedc_38: 	dc.b $5
0000FD4D F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD52 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD57 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD5C 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD61 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD66 01                         Map_cedc_52: 	dc.b $1
0000FD67 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD6C 01                         Map_cedc_58: 	dc.b $1
0000FD6D FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FD72 01                         Map_cedc_5E: 	dc.b $1
0000FD73 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FD78 00                         Map_cedc_64: 	dc.b $0
0000FD7A 00                         	even
0000FD7A 00                         	even
0000FD7A                            
0000FD7A                            ; ===========================================================================
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A                            ; Object 4F - blank
0000FD7A                            ; ---------------------------------------------------------------------------
0000FD7A                            
0000FD7A                            Obj4F:					; XREF: Obj_Index
0000FD7A 4E75                       		rts	
0000FD7C                            
0000FD7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD7C                            
0000FD7C                            
0000FD7C                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FD7C 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FD80 D047                       		add.w	d7,d0
0000FD82 0240 0003                  		andi.w	#3,d0
0000FD86 6600                       		bne.s	loc_F836
0000FD88 7600                       		moveq	#0,d3
0000FD8A 1628 0019                  		move.b	$19(a0),d3
0000FD8E 4A68 0010                  		tst.w	$10(a0)
0000FD92 6B00                       		bmi.s	loc_F82C
0000FD94 6100 0000                  		bsr.w	ObjHitWallRight
0000FD98 4A41                       		tst.w	d1
0000FD9A 6A00                       		bpl.s	loc_F836
0000FD9C                            
0000FD9C                            loc_F828:
0000FD9C 7001                       		moveq	#1,d0
0000FD9E 4E75                       		rts	
0000FDA0                            ; ===========================================================================
0000FDA0                            
0000FDA0                            loc_F82C:
0000FDA0 4643                       		not.w	d3
0000FDA2 6100 0000                  		bsr.w	ObjHitWallLeft
0000FDA6 4A41                       		tst.w	d1
0000FDA8 6BF2                       		bmi.s	loc_F828
0000FDAA                            
0000FDAA                            loc_F836:
0000FDAA 7000                       		moveq	#0,d0
0000FDAC 4E75                       		rts	
0000FDAE                            ; End of function Obj50_ChkWall
0000FDAE                            
0000FDAE                            ; ===========================================================================
0000FDAE                            ; ---------------------------------------------------------------------------
0000FDAE                            ; Object 50 - Yadrin enemy (SYZ)
0000FDAE                            ; ---------------------------------------------------------------------------
0000FDAE                            
0000FDAE                            Obj50:					; XREF: Obj_Index
0000FDAE 7000                       		moveq	#0,d0
0000FDB0 1028 0024                  		move.b	$24(a0),d0
0000FDB4 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDB8 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDBC                            ; ===========================================================================
0000FDBC 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDBE 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDC0                            ; ===========================================================================
0000FDC0                            
0000FDC0                            Obj50_Main:				; XREF: Obj50_Index
0000FDC0 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FDC8 317C 247B 0002             		move.w	#$247B,2(a0)
0000FDCE 117C 0004 0001             		move.b	#4,1(a0)
0000FDD4 117C 0004 0018             		move.b	#4,$18(a0)
0000FDDA 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDE0 117C 0011 0016             		move.b	#$11,$16(a0)
0000FDE6 117C 0008 0017             		move.b	#8,$17(a0)
0000FDEC 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FDF2 6100 DD34                  		bsr.w	ObjectFall
0000FDF6 6100 0000                  		bsr.w	ObjHitFloor
0000FDFA 4A41                       		tst.w	d1
0000FDFC 6A00                       		bpl.s	locret_F89E
0000FDFE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE02 317C 0000 0012             		move.w	#0,$12(a0)
0000FE08 5428 0024                  		addq.b	#2,$24(a0)
0000FE0C 0868 0000 0022             		bchg	#0,$22(a0)
0000FE12                            
0000FE12                            locret_F89E:
0000FE12 4E75                       		rts	
0000FE14                            ; ===========================================================================
0000FE14                            
0000FE14                            Obj50_Action:				; XREF: Obj50_Index
0000FE14 7000                       		moveq	#0,d0
0000FE16 1028 0025                  		move.b	$25(a0),d0
0000FE1A 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE1E 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE22 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE28 6100 AE20                  		bsr.w	AnimateSprite
0000FE2C 6000 FDF4                  		bra.w	MarkObjGone
0000FE30                            ; ===========================================================================
0000FE30 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE32 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE34                            ; ===========================================================================
0000FE34                            
0000FE34                            Obj50_Move:				; XREF: Obj50_Index2
0000FE34 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE38 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE3A 5428 0025                  		addq.b	#2,$25(a0)
0000FE3E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE44 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE4A 0868 0000 0022             		bchg	#0,$22(a0)
0000FE50 6600                       		bne.s	locret_F8E2
0000FE52 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE56                            
0000FE56                            locret_F8E2:
0000FE56 4E75                       		rts	
0000FE58                            ; ===========================================================================
0000FE58                            
0000FE58                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE58 6100 DCFA                  		bsr.w	SpeedToPos
0000FE5C 6100 0000                  		bsr.w	ObjHitFloor
0000FE60 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE64 6D00                       		blt.s	Obj50_Pause
0000FE66 0C41 000C                  		cmpi.w	#$C,d1
0000FE6A 6C00                       		bge.s	Obj50_Pause
0000FE6C D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE70 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FE74 6600                       		bne.s	Obj50_Pause
0000FE76 4E75                       		rts	
0000FE78                            ; ===========================================================================
0000FE78                            
0000FE78                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FE78 5528 0025                  		subq.b	#2,$25(a0)
0000FE7C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FE82 317C 0000 0010             		move.w	#0,$10(a0)
0000FE88 117C 0000 001C             		move.b	#0,$1C(a0)
0000FE8E 4E75                       		rts	
0000FE90                            ; ===========================================================================
0000FE90                            Ani_obj50:
0000FE90                            	include "_anim\obj50.asm"
0000FE90                            ; ---------------------------------------------------------------------------
0000FE90                            ; Animation script - Yadrin enemy
0000FE90                            ; ---------------------------------------------------------------------------
0000FE90 0000                       		dc.w byte_F920-Ani_obj50
0000FE92 0000                       		dc.w byte_F924-Ani_obj50
0000FE94 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FE98 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FEA2                            		even
0000FEA2                            		even
0000FEA2                            
0000FEA2                            ; ---------------------------------------------------------------------------
0000FEA2                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEA2                            ; ---------------------------------------------------------------------------
0000FEA2                            Map_obj50:
0000FEA2                            	include "_maps\obj50.asm"
0000FEA2                            ; ---------------------------------------------------------------------------
0000FEA2                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FEA2                            ; ---------------------------------------------------------------------------
0000FEA2 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FEA6 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FEAA 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEAE 05                         byte_F93A:	dc.b 5
0000FEAF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEB4 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEB9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEBE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEC3 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEC8 05                         byte_F954:	dc.b 5
0000FEC9 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FECE FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FED3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FED8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEDD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEE2 05                         byte_F96E:	dc.b 5
0000FEE3 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FEE8 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FEED EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEF2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEF7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEFC 05                         byte_F988:	dc.b 5
0000FEFD F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF02 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF07 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF0C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF11 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF16 05                         byte_F9A2:	dc.b 5
0000FF17 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF1C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF21 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF26 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF2B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF30 05                         byte_F9BC:	dc.b 5
0000FF31 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF36 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF3B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF40 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF45 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF4A                            		even
0000FF4A                            		even
0000FF4A                            
0000FF4A                            ; ---------------------------------------------------------------------------
0000FF4A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF4A                            ;
0000FF4A                            ; variables:
0000FF4A                            ; d1 = width
0000FF4A                            ; d2 = height /	2 (when	jumping)
0000FF4A                            ; d3 = height /	2 (when	walking)
0000FF4A                            ; d4 = x-axis position
0000FF4A                            ; ---------------------------------------------------------------------------
0000FF4A                            
0000FF4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF4A                            
0000FF4A                            
0000FF4A                            SolidObject:
0000FF4A 4A28 0025                  		tst.b	$25(a0)
0000FF4E 6700 0000                  		beq.w	loc_FAC8
0000FF52 3401                       		move.w	d1,d2
0000FF54 D442                       		add.w	d2,d2
0000FF56 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF5A 0829 0001 0022             		btst	#1,$22(a1)
0000FF60 6600                       		bne.s	loc_F9FE
0000FF62 3029 0008                  		move.w	8(a1),d0
0000FF66 9068 0008                  		sub.w	8(a0),d0
0000FF6A D041                       		add.w	d1,d0
0000FF6C 6B00                       		bmi.s	loc_F9FE
0000FF6E B042                       		cmp.w	d2,d0
0000FF70 6500                       		bcs.s	loc_FA12
0000FF72                            
0000FF72                            loc_F9FE:
0000FF72 08A9 0003 0022             		bclr	#3,$22(a1)
0000FF78 08A8 0003 0022             		bclr	#3,$22(a0)
0000FF7E 4228 0025                  		clr.b	$25(a0)
0000FF82 7800                       		moveq	#0,d4
0000FF84 4E75                       		rts	
0000FF86                            ; ===========================================================================
0000FF86                            
0000FF86                            loc_FA12:
0000FF86 3404                       		move.w	d4,d2
0000FF88                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FF88 7800                       		moveq	#0,d4
0000FF8A 4E75                       		rts	
0000FF8C                            ; ===========================================================================
0000FF8C                            
0000FF8C                            SolidObject71:				; XREF: Obj71_Solid
0000FF8C 4A28 0025                  		tst.b	$25(a0)
0000FF90 6700 0000                  		beq.w	loc_FAD0
0000FF94 3401                       		move.w	d1,d2
0000FF96 D442                       		add.w	d2,d2
0000FF98 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF9C 0829 0001 0022             		btst	#1,$22(a1)
0000FFA2 6600                       		bne.s	loc_FA44
0000FFA4 3029 0008                  		move.w	8(a1),d0
0000FFA8 9068 0008                  		sub.w	8(a0),d0
0000FFAC D041                       		add.w	d1,d0
0000FFAE 6B00                       		bmi.s	loc_FA44
0000FFB0 B042                       		cmp.w	d2,d0
0000FFB2 6500                       		bcs.s	loc_FA58
0000FFB4                            
0000FFB4                            loc_FA44:
0000FFB4 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFBA 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFC0 4228 0025                  		clr.b	$25(a0)
0000FFC4 7800                       		moveq	#0,d4
0000FFC6 4E75                       		rts	
0000FFC8                            ; ===========================================================================
0000FFC8                            
0000FFC8                            loc_FA58:
0000FFC8 3404                       		move.w	d4,d2
0000FFCA                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FFCA 7800                       		moveq	#0,d4
0000FFCC 4E75                       		rts	
0000FFCE                            ; ===========================================================================
0000FFCE                            
0000FFCE                            SolidObject2F:				; XREF: Obj2F_Solid
0000FFCE 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFD2 4A28 0001                  		tst.b	1(a0)
0000FFD6 6A00 0000                  		bpl.w	loc_FB92
0000FFDA 3029 0008                  		move.w	8(a1),d0
0000FFDE 9068 0008                  		sub.w	8(a0),d0
0000FFE2 D041                       		add.w	d1,d0
0000FFE4 6B00 0000                  		bmi.w	loc_FB92
0000FFE8 3601                       		move.w	d1,d3
0000FFEA D643                       		add.w	d3,d3
0000FFEC B043                       		cmp.w	d3,d0
0000FFEE 6200 0000                  		bhi.w	loc_FB92
0000FFF2 3A00                       		move.w	d0,d5
0000FFF4 0828 0000 0001             		btst	#0,1(a0)
0000FFFA 6700                       		beq.s	loc_FA94
0000FFFC 4645                       		not.w	d5
0000FFFE DA43                       		add.w	d3,d5
00010000                            
00010000                            loc_FA94:
00010000 E24D                       		lsr.w	#1,d5
00010002 7600                       		moveq	#0,d3
00010004 1632 5000                  		move.b	(a2,d5.w),d3
00010008 9612                       		sub.b	(a2),d3
0001000A 3A28 000C                  		move.w	$C(a0),d5
0001000E 9A43                       		sub.w	d3,d5
00010010 1629 0016                  		move.b	$16(a1),d3
00010014 4883                       		ext.w	d3
00010016 D443                       		add.w	d3,d2
00010018 3629 000C                  		move.w	$C(a1),d3
0001001C 9645                       		sub.w	d5,d3
0001001E 5843                       		addq.w	#4,d3
00010020 D642                       		add.w	d2,d3
00010022 6B00 0000                  		bmi.w	loc_FB92
00010026 3802                       		move.w	d2,d4
00010028 D844                       		add.w	d4,d4
0001002A B644                       		cmp.w	d4,d3
0001002C 6400 0000                  		bcc.w	loc_FB92
00010030 6000 0000                  		bra.w	loc_FB0E
00010034                            ; ===========================================================================
00010034                            
00010034                            loc_FAC8:
00010034 4A28 0001                  		tst.b	1(a0)
00010038 6A00 0000                  		bpl.w	loc_FB92
0001003C                            
0001003C                            loc_FAD0:
0001003C 43F8 D000                  		lea	($FFFFD000).w,a1
00010040 3029 0008                  		move.w	8(a1),d0
00010044 9068 0008                  		sub.w	8(a0),d0
00010048 D041                       		add.w	d1,d0
0001004A 6B00 0000                  		bmi.w	loc_FB92
0001004E 3601                       		move.w	d1,d3
00010050 D643                       		add.w	d3,d3
00010052 B043                       		cmp.w	d3,d0
00010054 6200 0000                  		bhi.w	loc_FB92
00010058 1629 0016                  		move.b	$16(a1),d3
0001005C 4883                       		ext.w	d3
0001005E D443                       		add.w	d3,d2
00010060 3629 000C                  		move.w	$C(a1),d3
00010064 9668 000C                  		sub.w	$C(a0),d3
00010068 5843                       		addq.w	#4,d3
0001006A D642                       		add.w	d2,d3
0001006C 6B00 0000                  		bmi.w	loc_FB92
00010070 3802                       		move.w	d2,d4
00010072 D844                       		add.w	d4,d4
00010074 B644                       		cmp.w	d4,d3
00010076 6400 0000                  		bcc.w	loc_FB92
0001007A                            
0001007A                            loc_FB0E:
0001007A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001007E 6B00 0000                  		bmi.w	loc_FB92
00010082 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010088 6400 0000                  		bcc.w	loc_FB92
0001008C 4A78 FE08                  		tst.w	($FFFFFE08).w
00010090 6600 0000                  		bne.w	loc_FBAC
00010094 3A00                       		move.w	d0,d5
00010096 B240                       		cmp.w	d0,d1
00010098 6400                       		bcc.s	loc_FB36
0001009A D241                       		add.w	d1,d1
0001009C 9041                       		sub.w	d1,d0
0001009E 3A00                       		move.w	d0,d5
000100A0 4445                       		neg.w	d5
000100A2                            
000100A2                            loc_FB36:
000100A2 3203                       		move.w	d3,d1
000100A4 B443                       		cmp.w	d3,d2
000100A6 6400                       		bcc.s	loc_FB44
000100A8 5943                       		subq.w	#4,d3
000100AA 9644                       		sub.w	d4,d3
000100AC 3203                       		move.w	d3,d1
000100AE 4441                       		neg.w	d1
000100B0                            
000100B0                            loc_FB44:
000100B0 BA41                       		cmp.w	d1,d5
000100B2 6200 0000                  		bhi.w	loc_FBB0
000100B6 0C41 0004                  		cmpi.w	#4,d1
000100BA 6300                       		bls.s	loc_FB8C
000100BC 4A40                       		tst.w	d0
000100BE 6700                       		beq.s	loc_FB70
000100C0 6B00                       		bmi.s	loc_FB5E
000100C2 4A69 0010                  		tst.w	$10(a1)
000100C6 6B00                       		bmi.s	loc_FB70
000100C8 6000                       		bra.s	loc_FB64
000100CA                            ; ===========================================================================
000100CA                            
000100CA                            loc_FB5E:
000100CA 4A69 0010                  		tst.w	$10(a1)
000100CE 6A00                       		bpl.s	loc_FB70
000100D0                            
000100D0                            loc_FB64:
000100D0 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000100D6 337C 0000 0010             		move.w	#0,$10(a1)
000100DC                            
000100DC                            loc_FB70:
000100DC 9169 0008                  		sub.w	d0,8(a1)
000100E0 0829 0001 0022             		btst	#1,$22(a1)
000100E6 6600                       		bne.s	loc_FB8C
000100E8 08E9 0005 0022             		bset	#5,$22(a1)
000100EE 08E8 0005 0022             		bset	#5,$22(a0)
000100F4 7801                       		moveq	#1,d4
000100F6 4E75                       		rts	
000100F8                            ; ===========================================================================
000100F8                            
000100F8                            loc_FB8C:
000100F8 6100                       		bsr.s	loc_FBA0
000100FA 7801                       		moveq	#1,d4
000100FC 4E75                       		rts	
000100FE                            ; ===========================================================================
000100FE                            
000100FE                            loc_FB92:
000100FE 0828 0005 0022             		btst	#5,$22(a0)
00010104 6700                       		beq.s	loc_FBAC
00010106 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001010C                            
0001010C                            loc_FBA0:
0001010C 08A8 0005 0022             		bclr	#5,$22(a0)
00010112 08A9 0005 0022             		bclr	#5,$22(a1)
00010118                            
00010118                            loc_FBAC:
00010118 7800                       		moveq	#0,d4
0001011A 4E75                       		rts	
0001011C                            ; ===========================================================================
0001011C                            
0001011C                            loc_FBB0:
0001011C 4A43                       		tst.w	d3
0001011E 6B00                       		bmi.s	loc_FBBC
00010120 0C43 0010                  		cmpi.w	#$10,d3
00010124 6500                       		bcs.s	loc_FBEE
00010126 60D6                       		bra.s	loc_FB92
00010128                            ; ===========================================================================
00010128                            
00010128                            loc_FBBC:
00010128 4A69 0012                  		tst.w	$12(a1)
0001012C 6700                       		beq.s	loc_FBD6
0001012E 6A00                       		bpl.s	loc_FBD2
00010130 4A43                       		tst.w	d3
00010132 6A00                       		bpl.s	loc_FBD2
00010134 9769 000C                  		sub.w	d3,$C(a1)
00010138 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001013E                            
0001013E                            loc_FBD2:
0001013E 78FF                       		moveq	#-1,d4
00010140 4E75                       		rts	
00010142                            ; ===========================================================================
00010142                            
00010142                            loc_FBD6:
00010142 0829 0001 0022             		btst	#1,$22(a1)
00010148 66F4                       		bne.s	loc_FBD2
0001014A 2F08                       		move.l	a0,-(sp)
0001014C 2049                       		movea.l	a1,a0
0001014E 4EB9 0000 0000             		jsr	KillSonic
00010154 205F                       		movea.l	(sp)+,a0
00010156 78FF                       		moveq	#-1,d4
00010158 4E75                       		rts	
0001015A                            ; ===========================================================================
0001015A                            
0001015A                            loc_FBEE:
0001015A 5943                       		subq.w	#4,d3
0001015C 7200                       		moveq	#0,d1
0001015E 1228 0019                  		move.b	$19(a0),d1
00010162 3401                       		move.w	d1,d2
00010164 D442                       		add.w	d2,d2
00010166 D269 0008                  		add.w	8(a1),d1
0001016A 9268 0008                  		sub.w	8(a0),d1
0001016E 6B00                       		bmi.s	loc_FC28
00010170 B242                       		cmp.w	d2,d1
00010172 6400                       		bcc.s	loc_FC28
00010174 4A69 0012                  		tst.w	$12(a1)
00010178 6B00                       		bmi.s	loc_FC28
0001017A 9769 000C                  		sub.w	d3,$C(a1)
0001017E 5369 000C                  		subq.w	#1,$C(a1)
00010182 6100                       		bsr.s	sub_FC2C
00010184 117C 0002 0025             		move.b	#2,$25(a0)
0001018A 08E8 0003 0022             		bset	#3,$22(a0)
00010190 78FF                       		moveq	#-1,d4
00010192 4E75                       		rts	
00010194                            ; ===========================================================================
00010194                            
00010194                            loc_FC28:
00010194 7800                       		moveq	#0,d4
00010196 4E75                       		rts	
00010198                            ; End of function SolidObject
00010198                            
00010198                            
00010198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010198                            
00010198                            
00010198                            sub_FC2C:				; XREF: SolidObject
00010198 0829 0003 0022             		btst	#3,$22(a1)
0001019E 6700                       		beq.s	loc_FC4E
000101A0 7000                       		moveq	#0,d0
000101A2 1029 003D                  		move.b	$3D(a1),d0
000101A6 ED48                       		lsl.w	#6,d0
000101A8 0680 00FF D000             		addi.l	#$FFD000,d0
000101AE 2440                       		movea.l	d0,a2
000101B0 08AA 0003 0022             		bclr	#3,$22(a2)
000101B6 422A 0025                  		clr.b	$25(a2)
000101BA                            
000101BA                            loc_FC4E:
000101BA 3008                       		move.w	a0,d0
000101BC 0440 D000                  		subi.w	#-$3000,d0
000101C0 EC48                       		lsr.w	#6,d0
000101C2 0240 007F                  		andi.w	#$7F,d0
000101C6 1340 003D                  		move.b	d0,$3D(a1)
000101CA 137C 0000 0026             		move.b	#0,$26(a1)
000101D0 337C 0000 0012             		move.w	#0,$12(a1)
000101D6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000101DC 0829 0001 0022             		btst	#1,$22(a1)
000101E2 6700                       		beq.s	loc_FC84
000101E4 2F08                       		move.l	a0,-(sp)
000101E6 2049                       		movea.l	a1,a0
000101E8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000101EE 205F                       		movea.l	(sp)+,a0
000101F0                            
000101F0                            loc_FC84:
000101F0 08E9 0003 0022             		bset	#3,$22(a1)
000101F6 08E8 0003 0022             		bset	#3,$22(a0)
000101FC 4E75                       		rts	
000101FE                            ; End of function sub_FC2C
000101FE                            
000101FE                            ; ===========================================================================
000101FE                            ; ---------------------------------------------------------------------------
000101FE                            ; Object 51 - smashable	green block (MZ)
000101FE                            ; ---------------------------------------------------------------------------
000101FE                            
000101FE                            Obj51:					; XREF: Obj_Index
000101FE 7000                       		moveq	#0,d0
00010200 1028 0024                  		move.b	$24(a0),d0
00010204 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010208 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001020C 6000 FA14                  		bra.w	MarkObjGone
00010210                            ; ===========================================================================
00010210 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010212 0000                       		dc.w Obj51_Solid-Obj51_Index
00010214 0000                       		dc.w Obj51_Display-Obj51_Index
00010216                            ; ===========================================================================
00010216                            
00010216                            Obj51_Main:				; XREF: Obj51_Index
00010216 5428 0024                  		addq.b	#2,$24(a0)
0001021A 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010222 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010228 117C 0004 0001             		move.b	#4,1(a0)
0001022E 117C 0010 0019             		move.b	#$10,$19(a0)
00010234 117C 0004 0018             		move.b	#4,$18(a0)
0001023A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010240                            
00010240                            Obj51_Solid:				; XREF: Obj51_Index
00010240 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010246 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001024C 323C 001B                  		move.w	#$1B,d1
00010250 343C 0010                  		move.w	#$10,d2
00010254 363C 0011                  		move.w	#$11,d3
00010258 3828 0008                  		move.w	8(a0),d4
0001025C 6100 FCEC                  		bsr.w	SolidObject
00010260 0828 0003 0022             		btst	#3,$22(a0)
00010266 6600                       		bne.s	Obj51_Smash
00010268                            
00010268                            locret_FCFC:
00010268 4E75                       		rts	
0001026A                            ; ===========================================================================
0001026A                            
0001026A                            Obj51_Smash:				; XREF: Obj51_Solid
0001026A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010270 66F6                       		bne.s	locret_FCFC	; if not, branch
00010272 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010278 08E9 0002 0022             		bset	#2,$22(a1)
0001027E 137C 000E 0016             		move.b	#$E,$16(a1)
00010284 137C 0007 0017             		move.b	#7,$17(a1)
0001028A 137C 0002 001C             		move.b	#2,$1C(a1)
00010290 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010296 08E9 0001 0022             		bset	#1,$22(a1)
0001029C 08A9 0003 0022             		bclr	#3,$22(a1)
000102A2 137C 0002 0024             		move.b	#2,$24(a1)
000102A8 08A8 0003 0022             		bclr	#3,$22(a0)
000102AE 4228 0025                  		clr.b	$25(a0)
000102B2 117C 0001 001A             		move.b	#1,$1A(a0)
000102B8 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102BE 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102C0 343C 0038                  		move.w	#$38,d2
000102C4 6100 D4A2                  		bsr.w	SmashObject
000102C8 6100 DD36                  		bsr.w	SingleObjLoad
000102CC 6600                       		bne.s	Obj51_Display
000102CE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000102D2 3368 0008 0008             		move.w	8(a0),8(a1)
000102D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102DE 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000102E2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000102E6 0C42 0006                  		cmpi.w	#6,d2
000102EA 6500                       		bcs.s	Obj51_Bonus
000102EC 7406                       		moveq	#6,d2
000102EE                            
000102EE                            Obj51_Bonus:
000102EE 7000                       		moveq	#0,d0
000102F0 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000102F4 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000102FA 6500                       		bcs.s	loc_FD98	; if not, branch
000102FC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010300 740A                       		moveq	#10,d2
00010302                            
00010302                            loc_FD98:
00010302 4EB9 0000 0000             		jsr	AddPoints
00010308 E24A                       		lsr.w	#1,d2
0001030A 1342 001A                  		move.b	d2,$1A(a1)
0001030E                            
0001030E                            Obj51_Display:				; XREF: Obj51_Index
0001030E 6100 D844                  		bsr.w	SpeedToPos
00010312 0668 0038 0012             		addi.w	#$38,$12(a0)
00010318 6100 D860                  		bsr.w	DisplaySprite
0001031C 4A28 0001                  		tst.b	1(a0)
00010320 6A00 D894                  		bpl.w	DeleteObject
00010324 4E75                       		rts	
00010326                            ; ===========================================================================
00010326 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001032A FF00 FF00                  		dc.w $FF00, $FF00
0001032E 0200 FE00                  		dc.w $200, $FE00
00010332 0100 FF00                  		dc.w $100, $FF00
00010336                            
00010336 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001033E                            ; ---------------------------------------------------------------------------
0001033E                            ; Sprite mappings - smashable green block (MZ)
0001033E                            ; ---------------------------------------------------------------------------
0001033E                            Map_obj51:
0001033E                            	include "_maps\obj51.asm"
0001033E                            ; ---------------------------------------------------------------------------
0001033E                            ; Sprite mappings - smashable green block (MZ)
0001033E                            ; ---------------------------------------------------------------------------
0001033E 0000                       		dc.w byte_FDD8-Map_obj51
00010340 0000                       		dc.w byte_FDE3-Map_obj51
00010342 02                         byte_FDD8:	dc.b 2
00010343 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010348 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001034D 04                         byte_FDE3:	dc.b 4
0001034E F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010353 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010358 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001035D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010362                            		even
00010362                            		even
00010362                            
00010362                            ; ===========================================================================
00010362                            ; ---------------------------------------------------------------------------
00010362                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010362                            ; ---------------------------------------------------------------------------
00010362                            
00010362                            Obj52:					; XREF: Obj_Index
00010362 7000                       		moveq	#0,d0
00010364 1028 0024                  		move.b	$24(a0),d0
00010368 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001036C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010370                            ; ===========================================================================
00010370 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010372 0000                       		dc.w Obj52_Platform-Obj52_Index
00010374 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010376                            
00010376 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010378 2001                       		dc.b $20, 1
0001037A 2002                       		dc.b $20, 2
0001037C 4003                       		dc.b $40, 3
0001037E 3004                       		dc.b $30, 4
00010380                            ; ===========================================================================
00010380                            
00010380                            Obj52_Main:				; XREF: Obj52_Index
00010380 5428 0024                  		addq.b	#2,$24(a0)
00010384 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001038C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010392 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010398 6600                       		bne.s	loc_FE44
0001039A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000103A2 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103A8 117C 0007 0016             		move.b	#7,$16(a0)
000103AE                            
000103AE                            loc_FE44:
000103AE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103B4 6600                       		bne.s	loc_FE60
000103B6 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103BC 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103C2 6700                       		beq.s	loc_FE60	; if yes, branch
000103C4 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000103CA                            
000103CA                            loc_FE60:
000103CA 117C 0004 0001             		move.b	#4,1(a0)
000103D0 7000                       		moveq	#0,d0
000103D2 1028 0028                  		move.b	$28(a0),d0
000103D6 E648                       		lsr.w	#3,d0
000103D8 0240 001E                  		andi.w	#$1E,d0
000103DC 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000103E0 115A 0019                  		move.b	(a2)+,$19(a0)
000103E4 115A 001A                  		move.b	(a2)+,$1A(a0)
000103E8 117C 0004 0018             		move.b	#4,$18(a0)
000103EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000103F4 3168 000C 0032             		move.w	$C(a0),$32(a0)
000103FA 0228 000F 0028             		andi.b	#$F,$28(a0)
00010400                            
00010400                            Obj52_Platform:				; XREF: Obj52_Index
00010400 6100 0000                  		bsr.w	Obj52_Move
00010404 7200                       		moveq	#0,d1
00010406 1228 0019                  		move.b	$19(a0),d1
0001040A 4EB9 0000 78A6             		jsr	(PlatformObject).l
00010410 6000                       		bra.s	Obj52_ChkDel
00010412                            ; ===========================================================================
00010412                            
00010412                            Obj52_StandOn:				; XREF: Obj52_Index
00010412 7200                       		moveq	#0,d1
00010414 1228 0019                  		move.b	$19(a0),d1
00010418 4EB9 0000 7A1A             		jsr	(ExitPlatform).l
0001041E 3F28 0008                  		move.w	8(a0),-(sp)
00010422 6100 0000                  		bsr.w	Obj52_Move
00010426 341F                       		move.w	(sp)+,d2
00010428 4EB9 0000 7F84             		jsr	(MvSonicOnPtfm2).l
0001042E                            
0001042E                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001042E 3028 0030                  		move.w	$30(a0),d0
00010432 0240 FF80                  		andi.w	#$FF80,d0
00010436 3238 F700                  		move.w	($FFFFF700).w,d1
0001043A 0441 0080                  		subi.w	#$80,d1
0001043E 0241 FF80                  		andi.w	#$FF80,d1
00010442 9041                       		sub.w	d1,d0
00010444 0C40 0280                  		cmpi.w	#$280,d0
00010448 6200 D76C                  		bhi.w	DeleteObject
0001044C 6000 D72C                  		bra.w	DisplaySprite
00010450                            ; ===========================================================================
00010450                            
00010450                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010450 7000                       		moveq	#0,d0
00010452 1028 0028                  		move.b	$28(a0),d0
00010456 0240 000F                  		andi.w	#$F,d0
0001045A D040                       		add.w	d0,d0
0001045C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010460 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010464                            ; ===========================================================================
00010464 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010468 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001046C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010470 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010474 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010478 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001047A                            ; ===========================================================================
0001047A                            
0001047A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001047A 4E75                       		rts	
0001047C                            ; ===========================================================================
0001047C                            
0001047C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001047C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010480 323C 0060                  		move.w	#$60,d1
00010484 0828 0000 0022             		btst	#0,$22(a0)
0001048A 6700                       		beq.s	loc_FF26
0001048C 4440                       		neg.w	d0
0001048E D041                       		add.w	d1,d0
00010490                            
00010490                            loc_FF26:
00010490 3228 0030                  		move.w	$30(a0),d1
00010494 9240                       		sub.w	d0,d1
00010496 3141 0008                  		move.w	d1,8(a0)
0001049A 4E75                       		rts	
0001049C                            ; ===========================================================================
0001049C                            
0001049C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001049C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000104A2 6600                       		bne.s	Obj52_02_Wait
000104A4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104A8                            
000104A8                            Obj52_02_Wait:
000104A8 4E75                       		rts	
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104AA 7600                       		moveq	#0,d3
000104AC 1628 0019                  		move.b	$19(a0),d3
000104B0 6100 0000                  		bsr.w	ObjHitWallRight
000104B4 4A41                       		tst.w	d1		; has the platform hit a wall?
000104B6 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104B8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104BC 3168 0008 0030             		move.w	8(a0),$30(a0)
000104C2 4E75                       		rts	
000104C4                            ; ===========================================================================
000104C4                            
000104C4                            Obj52_03_End:
000104C4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000104C8 4E75                       		rts	
000104CA                            ; ===========================================================================
000104CA                            
000104CA                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000104CA 7600                       		moveq	#0,d3
000104CC 1628 0019                  		move.b	$19(a0),d3
000104D0 6100 0000                  		bsr.w	ObjHitWallRight
000104D4 4A41                       		tst.w	d1		; has the platform hit a wall?
000104D6 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000104D8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104DC 3168 0008 0030             		move.w	8(a0),$30(a0)
000104E2 4E75                       		rts	
000104E4                            ; ===========================================================================
000104E4                            
000104E4                            Obj52_05_End:
000104E4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000104E8 4E75                       		rts	
000104EA                            ; ===========================================================================
000104EA                            
000104EA                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000104EA 6100 D668                  		bsr.w	SpeedToPos
000104EE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000104F4 6100 0000                  		bsr.w	ObjHitFloor
000104F8 4A41                       		tst.w	d1		; has platform hit the floor?
000104FA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000104FE D368 000C                  		add.w	d1,$C(a0)
00010502 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010506 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001050A                            
0001050A                            locret_FFA0:
0001050A 4E75                       		rts	
0001050C                            ; ===========================================================================
0001050C                            
0001050C                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001050C 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010510 6700                       		beq.s	Obj52_07_ChkDel
00010512 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010516                            
00010516                            Obj52_07_ChkDel:
00010516 588F                       		addq.l	#4,sp
00010518 3028 0030                  		move.w	$30(a0),d0
0001051C 0240 FF80                  		andi.w	#$FF80,d0
00010520 3238 F700                  		move.w	($FFFFF700).w,d1
00010524 0441 0080                  		subi.w	#$80,d1
00010528 0241 FF80                  		andi.w	#$FF80,d1
0001052C 9041                       		sub.w	d1,d0
0001052E 0C40 0280                  		cmpi.w	#$280,d0
00010532 6200 D682                  		bhi.w	DeleteObject
00010536 4E75                       		rts	
00010538                            ; ===========================================================================
00010538                            
00010538                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010538 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001053C 323C 0080                  		move.w	#$80,d1
00010540 0828 0000 0022             		btst	#0,$22(a0)
00010546 6700                       		beq.s	loc_FFE2
00010548 4440                       		neg.w	d0
0001054A D041                       		add.w	d1,d0
0001054C                            
0001054C                            loc_FFE2:
0001054C 3228 0032                  		move.w	$32(a0),d1
00010550 9240                       		sub.w	d0,d1
00010552 3141 000C                  		move.w	d1,$C(a0)
00010556 4E75                       		rts	
00010558                            ; ===========================================================================
00010558                            
00010558                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010558 7600                       		moveq	#0,d3
0001055A 1628 0019                  		move.b	$19(a0),d3
0001055E D643                       		add.w	d3,d3
00010560 7208                       		moveq	#8,d1
00010562 0828 0000 0022             		btst	#0,$22(a0)
00010568 6700                       		beq.s	loc_10004
0001056A 4441                       		neg.w	d1
0001056C 4443                       		neg.w	d3
0001056E                            
0001056E                            loc_10004:
0001056E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010572 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010574 3028 0008                  		move.w	8(a0),d0
00010578 9068 0030                  		sub.w	$30(a0),d0
0001057C B043                       		cmp.w	d3,d0
0001057E 6700                       		beq.s	Obj52_0A_Wait
00010580 D368 0008                  		add.w	d1,8(a0)	; move platform
00010584 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            Obj52_0A_Wait:
0001058C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010590 6600                       		bne.s	locret_1002E	; if time remains, branch
00010592 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010598                            
00010598                            locret_1002E:
00010598 4E75                       		rts	
0001059A                            ; ===========================================================================
0001059A                            
0001059A                            Obj52_0A_Back:
0001059A 3028 0008                  		move.w	8(a0),d0
0001059E 9068 0030                  		sub.w	$30(a0),d0
000105A2 6700                       		beq.s	Obj52_0A_Reset
000105A4 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105A8 4E75                       		rts	
000105AA                            ; ===========================================================================
000105AA                            
000105AA                            Obj52_0A_Reset:
000105AA 4268 0036                  		clr.w	$36(a0)
000105AE 5328 0028                  		subq.b	#1,$28(a0)
000105B2 4E75                       		rts	
000105B4                            ; ===========================================================================
000105B4                            ; ---------------------------------------------------------------------------
000105B4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105B4                            ; ---------------------------------------------------------------------------
000105B4                            Map_obj52:
000105B4                            	include "_maps\obj52mz.asm"
000105B4                            ; ---------------------------------------------------------------------------
000105B4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105B4                            ; ---------------------------------------------------------------------------
000105B4 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105B8 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105BC 0000                       		dc.w byte_1008F-Map_obj52
000105BE 01                         byte_10054:	dc.b 1
000105BF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105C4 02                         byte_1005A:	dc.b 2
000105C5 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000105CA F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000105CF 04                         byte_10065:	dc.b 4
000105D0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000105D5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000105DA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000105DF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000105E4 04                         byte_1007A:	dc.b 4
000105E5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000105EA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000105EF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000105F4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000105F9 03                         byte_1008F:	dc.b 3
000105FA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000105FF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010604 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001060A 00                         		even
0001060A 00                         		even
0001060A                            
0001060A                            ; ---------------------------------------------------------------------------
0001060A                            ; Sprite mappings - moving block (LZ)
0001060A                            ; ---------------------------------------------------------------------------
0001060A                            Map_obj52a:
0001060A                            	include "_maps\obj52lz.asm"
0001060A                            ; ---------------------------------------------------------------------------
0001060A                            ; Sprite mappings - moving block (LZ)
0001060A                            ; ---------------------------------------------------------------------------
0001060A 0000                       		dc.w byte_100A2-Map_obj52a
0001060C 01                         byte_100A2:	dc.b 1
0001060D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010612                            		even
00010612                            		even
00010612                            
00010612                            ; ===========================================================================
00010612                            ; ---------------------------------------------------------------------------
00010612                            ; Object 55 - Basaran enemy (MZ)
00010612                            ; ---------------------------------------------------------------------------
00010612                            
00010612                            Obj55:					; XREF: Obj_Index
00010612 7000                       		moveq	#0,d0
00010614 1028 0024                  		move.b	$24(a0),d0
00010618 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001061C 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010620                            ; ===========================================================================
00010620 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010622 0000                       		dc.w Obj55_Action-Obj55_Index
00010624                            ; ===========================================================================
00010624                            
00010624                            Obj55_Main:				; XREF: Obj55_Index
00010624 5428 0024                  		addq.b	#2,$24(a0)
00010628 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010630 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010636 117C 0004 0001             		move.b	#4,1(a0)
0001063C 117C 000C 0016             		move.b	#$C,$16(a0)
00010642 117C 0002 0018             		move.b	#2,$18(a0)
00010648 117C 000B 0020             		move.b	#$B,$20(a0)
0001064E 117C 0010 0019             		move.b	#$10,$19(a0)
00010654                            
00010654                            Obj55_Action:				; XREF: Obj55_Index
00010654 7000                       		moveq	#0,d0
00010656 1028 0025                  		move.b	$25(a0),d0
0001065A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001065E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010662 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010668 6100 A5E0                  		bsr.w	AnimateSprite
0001066C 6000 F5B4                  		bra.w	MarkObjGone
00010670                            ; ===========================================================================
00010670 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010672 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010674 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010676 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010678                            ; ===========================================================================
00010678                            
00010678                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010678 343C 0080                  		move.w	#$80,d2
0001067C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010680 6400                       		bcc.s	Obj55_NoDrop
00010682 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010686 3140 0036                  		move.w	d0,$36(a0)
0001068A 9068 000C                  		sub.w	$C(a0),d0
0001068E 6500                       		bcs.s	Obj55_NoDrop
00010690 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010694 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010696 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001069A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001069C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106A0 D007                       		add.b	d7,d0
000106A2 0200 0007                  		andi.b	#7,d0
000106A6 6600                       		bne.s	Obj55_NoDrop
000106A8 117C 0001 001C             		move.b	#1,$1C(a0)
000106AE 5428 0025                  		addq.b	#2,$25(a0)
000106B2                            
000106B2                            Obj55_NoDrop:
000106B2 4E75                       		rts	
000106B4                            ; ===========================================================================
000106B4                            
000106B4                            Obj55_DropFly:				; XREF: Obj55_Index2
000106B4 6100 D49E                  		bsr.w	SpeedToPos
000106B8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106BE 343C 0080                  		move.w	#$80,d2
000106C2 6100 0000                  		bsr.w	Obj55_ChkSonic
000106C6 3028 0036                  		move.w	$36(a0),d0
000106CA 9068 000C                  		sub.w	$C(a0),d0
000106CE 6500                       		bcs.s	Obj55_ChkDel
000106D0 0C40 0010                  		cmpi.w	#$10,d0
000106D4 6400                       		bcc.s	locret_10180
000106D6 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000106DA 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000106E0 117C 0002 001C             		move.b	#2,$1C(a0)
000106E6 5428 0025                  		addq.b	#2,$25(a0)
000106EA                            
000106EA                            locret_10180:
000106EA 4E75                       		rts	
000106EC                            ; ===========================================================================
000106EC                            
000106EC                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000106EC 4A28 0001                  		tst.b	1(a0)
000106F0 6A00 D4C4                  		bpl.w	DeleteObject
000106F4 4E75                       		rts	
000106F6                            ; ===========================================================================
000106F6                            
000106F6                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000106F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106FA 0200 000F                  		andi.b	#$F,d0
000106FE 6600                       		bne.s	loc_101A0
00010700 303C 00C0                  		move.w	#$C0,d0
00010704 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
0001070A                            
0001070A                            loc_101A0:
0001070A 6100 D448                  		bsr.w	SpeedToPos
0001070E 3038 D008                  		move.w	($FFFFD008).w,d0
00010712 9068 0008                  		sub.w	8(a0),d0
00010716 6400                       		bcc.s	loc_101B0
00010718 4440                       		neg.w	d0
0001071A                            
0001071A                            loc_101B0:
0001071A 0C40 0080                  		cmpi.w	#$80,d0
0001071E 6500                       		bcs.s	locret_101C6
00010720 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010724 D007                       		add.b	d7,d0
00010726 0200 0007                  		andi.b	#7,d0
0001072A 6600                       		bne.s	locret_101C6
0001072C 5428 0025                  		addq.b	#2,$25(a0)
00010730                            
00010730                            locret_101C6:
00010730 4E75                       		rts	
00010732                            ; ===========================================================================
00010732                            
00010732                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010732 6100 D420                  		bsr.w	SpeedToPos
00010736 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001073C 6100 0000                  		bsr.w	ObjHitCeiling
00010740 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010742 6A00                       		bpl.s	locret_101F4	; if not, branch
00010744 9368 000C                  		sub.w	d1,$C(a0)
00010748 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001074E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010752 4268 0012                  		clr.w	$12(a0)
00010756 4228 001C                  		clr.b	$1C(a0)
0001075A 4228 0025                  		clr.b	$25(a0)
0001075E                            
0001075E                            locret_101F4:
0001075E 4E75                       		rts	
00010760                            ; ===========================================================================
00010760                            
00010760                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010760 323C 0100                  		move.w	#$100,d1
00010764 08E8 0000 0022             		bset	#0,$22(a0)
0001076A 3038 D008                  		move.w	($FFFFD008).w,d0
0001076E 9068 0008                  		sub.w	8(a0),d0
00010772 6400                       		bcc.s	loc_10214
00010774 4440                       		neg.w	d0
00010776 4441                       		neg.w	d1
00010778 08A8 0000 0022             		bclr	#0,$22(a0)
0001077E                            
0001077E                            loc_10214:
0001077E B042                       		cmp.w	d2,d0
00010780 4E75                       		rts	
00010782                            ; ===========================================================================
00010782 6100 D3D0                  		bsr.w	SpeedToPos
00010786 6100 D3F2                  		bsr.w	DisplaySprite
0001078A 4A28 0001                  		tst.b	1(a0)
0001078E 6A00 D426                  		bpl.w	DeleteObject
00010792 4E75                       		rts	
00010794                            ; ===========================================================================
00010794                            Ani_obj55:
00010794                            	include "_anim\obj55.asm"
00010794                            ; ---------------------------------------------------------------------------
00010794                            ; Animation script - Basaran enemy
00010794                            ; ---------------------------------------------------------------------------
00010794 0000                       		dc.w byte_10230-Ani_obj55
00010796 0000                       		dc.w byte_10234-Ani_obj55
00010798 0000                       		dc.w byte_10238-Ani_obj55
0001079A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001079E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000107A2 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107A8                            		even
000107A8                            		even
000107A8                            
000107A8                            ; ---------------------------------------------------------------------------
000107A8                            ; Sprite mappings - Basaran enemy (MZ)
000107A8                            ; ---------------------------------------------------------------------------
000107A8                            Map_obj55:
000107A8                            	include "_maps\obj55.asm"
000107A8                            ; ---------------------------------------------------------------------------
000107A8                            ; Sprite mappings - Basaran enemy (MZ)
000107A8                            ; ---------------------------------------------------------------------------
000107A8 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107AC 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107B0 01                         byte_10246:	dc.b 1
000107B1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107B6 03                         byte_1024C:	dc.b 3
000107B7 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107BC 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107C1 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000107C6 04                         byte_1025C:	dc.b 4
000107C7 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000107CC 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000107D1 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000107D6 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000107DB 04                         byte_10271:	dc.b 4
000107DC F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000107E1 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000107E6 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000107EB FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000107F0                            		even
000107F0                            		even
000107F0                            
000107F0                            ; ===========================================================================
000107F0                            ; ---------------------------------------------------------------------------
000107F0                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000107F0                            ; ---------------------------------------------------------------------------
000107F0                            
000107F0                            Obj56:					; XREF: Obj_Index
000107F0 7000                       		moveq	#0,d0
000107F2 1028 0024                  		move.b	$24(a0),d0
000107F6 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000107FA 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000107FE                            ; ===========================================================================
000107FE 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010800 0000                       		dc.w Obj56_Action-Obj56_Index
00010802                            
00010802 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010804 2020                       		dc.b  $20, $20
00010806 1020                       		dc.b  $10, $20
00010808 201A                       		dc.b  $20, $1A
0001080A 1027                       		dc.b  $10, $27
0001080C 1010                       		dc.b  $10, $10
0001080E 0820                       		dc.b	8, $20
00010810 4010                       		dc.b  $40, $10
00010812                            ; ===========================================================================
00010812                            
00010812                            Obj56_Main:				; XREF: Obj56_Index
00010812 5428 0024                  		addq.b	#2,$24(a0)
00010816 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001081E 317C 4000 0002             		move.w	#$4000,2(a0)
00010824 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001082A 6600                       		bne.s	loc_102C8
0001082C 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010832                            
00010832                            loc_102C8:
00010832 117C 0004 0001             		move.b	#4,1(a0)
00010838 117C 0003 0018             		move.b	#3,$18(a0)
0001083E 7000                       		moveq	#0,d0
00010840 1028 0028                  		move.b	$28(a0),d0
00010844 E648                       		lsr.w	#3,d0
00010846 0240 000E                  		andi.w	#$E,d0
0001084A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001084E 115A 0019                  		move.b	(a2)+,$19(a0)
00010852 1152 0016                  		move.b	(a2),$16(a0)
00010856 E248                       		lsr.w	#1,d0
00010858 1140 001A                  		move.b	d0,$1A(a0)
0001085C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010862 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010868 7000                       		moveq	#0,d0
0001086A 1012                       		move.b	(a2),d0
0001086C D040                       		add.w	d0,d0
0001086E 3140 003A                  		move.w	d0,$3A(a0)
00010872 7000                       		moveq	#0,d0
00010874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001087A 6700                       		beq.s	loc_10332
0001087C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010880 0240 000F                  		andi.w	#$F,d0
00010884 5140                       		subq.w	#8,d0
00010886 6500                       		bcs.s	loc_10332
00010888 E548                       		lsl.w	#2,d0
0001088A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001088E 45F2 0000                  		lea	(a2,d0.w),a2
00010892 4A52                       		tst.w	(a2)
00010894 6A00                       		bpl.s	loc_10332
00010896 0868 0000 0022             		bchg	#0,$22(a0)
0001089C                            
0001089C                            loc_10332:
0001089C 1028 0028                  		move.b	$28(a0),d0
000108A0 6A00                       		bpl.s	Obj56_Action
000108A2 0200 000F                  		andi.b	#$F,d0
000108A6 1140 003C                  		move.b	d0,$3C(a0)
000108AA 117C 0005 0028             		move.b	#5,$28(a0)
000108B0 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108B6 6600                       		bne.s	Obj56_ChkGone
000108B8 117C 000C 0028             		move.b	#$C,$28(a0)
000108BE 317C 0080 003A             		move.w	#$80,$3A(a0)
000108C4                            
000108C4                            Obj56_ChkGone:
000108C4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108C8 7000                       		moveq	#0,d0
000108CA 1028 0023                  		move.b	$23(a0),d0
000108CE 6700                       		beq.s	Obj56_Action
000108D0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000108D6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000108DC 6700                       		beq.s	Obj56_Action
000108DE 5228 0028                  		addq.b	#1,$28(a0)
000108E2 4268 003A                  		clr.w	$3A(a0)
000108E6                            
000108E6                            Obj56_Action:				; XREF: Obj56_Index
000108E6 3F28 0008                  		move.w	8(a0),-(sp)
000108EA 7000                       		moveq	#0,d0
000108EC 1028 0028                  		move.b	$28(a0),d0	; get object type
000108F0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000108F4 D040                       		add.w	d0,d0
000108F6 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000108FA 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000108FE 381F                       		move.w	(sp)+,d4
00010900 4A28 0001                  		tst.b	1(a0)
00010904 6A00                       		bpl.s	Obj56_ChkDel
00010906 7200                       		moveq	#0,d1
00010908 1228 0019                  		move.b	$19(a0),d1
0001090C 0641 000B                  		addi.w	#$B,d1
00010910 7400                       		moveq	#0,d2
00010912 1428 0016                  		move.b	$16(a0),d2
00010916 3602                       		move.w	d2,d3
00010918 5243                       		addq.w	#1,d3
0001091A 6100 F62E                  		bsr.w	SolidObject
0001091E                            
0001091E                            Obj56_ChkDel:
0001091E 3028 0034                  		move.w	$34(a0),d0
00010922 0240 FF80                  		andi.w	#$FF80,d0
00010926 3238 F700                  		move.w	($FFFFF700).w,d1
0001092A 0441 0080                  		subi.w	#$80,d1
0001092E 0241 FF80                  		andi.w	#$FF80,d1
00010932 9041                       		sub.w	d1,d0
00010934 0C40 0280                  		cmpi.w	#$280,d0
00010938 6200 D27C                  		bhi.w	DeleteObject
0001093C 6000 D23C                  		bra.w	DisplaySprite
00010940                            ; ===========================================================================
00010940 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010944 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010948 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001094C 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010950 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010954 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010958 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001095C                            ; ===========================================================================
0001095C                            
0001095C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001095C 4E75                       		rts	
0001095E                            ; ===========================================================================
0001095E                            
0001095E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001095E 323C 0040                  		move.w	#$40,d1
00010962 7000                       		moveq	#0,d0
00010964 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010968 6000                       		bra.s	Obj56_Move_LR
0001096A                            ; ===========================================================================
0001096A                            
0001096A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001096A 323C 0080                  		move.w	#$80,d1
0001096E 7000                       		moveq	#0,d0
00010970 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010974                            
00010974                            Obj56_Move_LR:
00010974 0828 0000 0022             		btst	#0,$22(a0)
0001097A 6700                       		beq.s	loc_10416
0001097C 4440                       		neg.w	d0
0001097E D041                       		add.w	d1,d0
00010980                            
00010980                            loc_10416:
00010980 3228 0034                  		move.w	$34(a0),d1
00010984 9240                       		sub.w	d0,d1
00010986 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001098A 4E75                       		rts	
0001098C                            ; ===========================================================================
0001098C                            
0001098C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001098C 323C 0040                  		move.w	#$40,d1
00010990 7000                       		moveq	#0,d0
00010992 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010996 6000                       		bra.s	Obj56_Move_UD
00010998                            ; ===========================================================================
00010998                            
00010998                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010998 323C 0080                  		move.w	#$80,d1
0001099C 7000                       		moveq	#0,d0
0001099E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109A2                            
000109A2                            Obj56_Move_UD:
000109A2 0828 0000 0022             		btst	#0,$22(a0)
000109A8 6700                       		beq.s	loc_10444
000109AA 4440                       		neg.w	d0
000109AC D041                       		add.w	d1,d0
000109AE                            
000109AE                            loc_10444:
000109AE 3228 0030                  		move.w	$30(a0),d1
000109B2 9240                       		sub.w	d0,d1
000109B4 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109BA 4A28 0038                  		tst.b	$38(a0)
000109BE 6600                       		bne.s	loc_104A4
000109C0 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109C6 6600                       		bne.s	loc_1047A	; if not, branch
000109C8 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000109CE 6600                       		bne.s	loc_1047A
000109D0 4238 F7C9                  		clr.b	($FFFFF7C9).w
000109D4 3038 D008                  		move.w	($FFFFD008).w,d0
000109D8 B068 0008                  		cmp.w	8(a0),d0
000109DC 6400                       		bcc.s	loc_1047A
000109DE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000109E4                            
000109E4                            loc_1047A:
000109E4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000109E8 7000                       		moveq	#0,d0
000109EA 1028 003C                  		move.b	$3C(a0),d0
000109EE 0832 0000 0000             		btst	#0,(a2,d0.w)
000109F4 6700                       		beq.s	loc_104AE
000109F6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109FC 6600                       		bne.s	loc_1049E	; if not, branch
000109FE 0C00 0003                  		cmpi.b	#3,d0
00010A02 6600                       		bne.s	loc_1049E
00010A04 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A08                            
00010A08                            loc_1049E:
00010A08 117C 0001 0038             		move.b	#1,$38(a0)
00010A0E                            
00010A0E                            loc_104A4:
00010A0E 4A68 003A                  		tst.w	$3A(a0)
00010A12 6700                       		beq.s	loc_104C8
00010A14 5568 003A                  		subq.w	#2,$3A(a0)
00010A18                            
00010A18                            loc_104AE:
00010A18 3028 003A                  		move.w	$3A(a0),d0
00010A1C 0828 0000 0022             		btst	#0,$22(a0)
00010A22 6700                       		beq.s	loc_104BC
00010A24 4440                       		neg.w	d0
00010A26                            
00010A26                            loc_104BC:
00010A26 3228 0030                  		move.w	$30(a0),d1
00010A2A D240                       		add.w	d0,d1
00010A2C 3141 000C                  		move.w	d1,$C(a0)
00010A30 4E75                       		rts	
00010A32                            ; ===========================================================================
00010A32                            
00010A32                            loc_104C8:
00010A32 5228 0028                  		addq.b	#1,$28(a0)
00010A36 4228 0038                  		clr.b	$38(a0)
00010A3A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A3E 7000                       		moveq	#0,d0
00010A40 1028 0023                  		move.b	$23(a0),d0
00010A44 67D2                       		beq.s	loc_104AE
00010A46 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A4C 60CA                       		bra.s	loc_104AE
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A4E 4A28 0038                  		tst.b	$38(a0)
00010A52 6600                       		bne.s	loc_10500
00010A54 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A58 7000                       		moveq	#0,d0
00010A5A 1028 003C                  		move.b	$3C(a0),d0
00010A5E 4A32 0000                  		tst.b	(a2,d0.w)
00010A62 6A00                       		bpl.s	loc_10512
00010A64 117C 0001 0038             		move.b	#1,$38(a0)
00010A6A                            
00010A6A                            loc_10500:
00010A6A 7000                       		moveq	#0,d0
00010A6C 1028 0016                  		move.b	$16(a0),d0
00010A70 D040                       		add.w	d0,d0
00010A72 B068 003A                  		cmp.w	$3A(a0),d0
00010A76 6700                       		beq.s	loc_1052C
00010A78 5468 003A                  		addq.w	#2,$3A(a0)
00010A7C                            
00010A7C                            loc_10512:
00010A7C 3028 003A                  		move.w	$3A(a0),d0
00010A80 0828 0000 0022             		btst	#0,$22(a0)
00010A86 6700                       		beq.s	loc_10520
00010A88 4440                       		neg.w	d0
00010A8A                            
00010A8A                            loc_10520:
00010A8A 3228 0030                  		move.w	$30(a0),d1
00010A8E D240                       		add.w	d0,d1
00010A90 3141 000C                  		move.w	d1,$C(a0)
00010A94 4E75                       		rts	
00010A96                            ; ===========================================================================
00010A96                            
00010A96                            loc_1052C:
00010A96 5328 0028                  		subq.b	#1,$28(a0)
00010A9A 4228 0038                  		clr.b	$38(a0)
00010A9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AA2 7000                       		moveq	#0,d0
00010AA4 1028 0023                  		move.b	$23(a0),d0
00010AA8 67D2                       		beq.s	loc_10512
00010AAA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010AB0 60CA                       		bra.s	loc_10512
00010AB2                            ; ===========================================================================
00010AB2                            
00010AB2                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AB2 4A28 0038                  		tst.b	$38(a0)
00010AB6 6600                       		bne.s	loc_1055E
00010AB8 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010ABC 6700                       		beq.s	locret_10578
00010ABE 117C 0001 0038             		move.b	#1,$38(a0)
00010AC4 4268 003A                  		clr.w	$3A(a0)
00010AC8                            
00010AC8                            loc_1055E:
00010AC8 5268 0008                  		addq.w	#1,8(a0)
00010ACC 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AD2 5268 003A                  		addq.w	#1,$3A(a0)
00010AD6 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010ADC 6600                       		bne.s	locret_10578
00010ADE 4228 0028                  		clr.b	$28(a0)
00010AE2                            
00010AE2                            locret_10578:
00010AE2 4E75                       		rts	
00010AE4                            ; ===========================================================================
00010AE4                            
00010AE4                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010AE4 4A28 0038                  		tst.b	$38(a0)
00010AE8 6600                       		bne.s	loc_10598
00010AEA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AEE 7000                       		moveq	#0,d0
00010AF0 1028 003C                  		move.b	$3C(a0),d0
00010AF4 0832 0000 0000             		btst	#0,(a2,d0.w)
00010AFA 6700                       		beq.s	loc_105A2
00010AFC 117C 0001 0038             		move.b	#1,$38(a0)
00010B02                            
00010B02                            loc_10598:
00010B02 4A68 003A                  		tst.w	$3A(a0)
00010B06 6700                       		beq.s	loc_105C0
00010B08 5568 003A                  		subq.w	#2,$3A(a0)
00010B0C                            
00010B0C                            loc_105A2:
00010B0C 3028 003A                  		move.w	$3A(a0),d0
00010B10 0828 0000 0022             		btst	#0,$22(a0)
00010B16 6700                       		beq.s	loc_105B4
00010B18 4440                       		neg.w	d0
00010B1A 0640 0080                  		addi.w	#$80,d0
00010B1E                            
00010B1E                            loc_105B4:
00010B1E 3228 0034                  		move.w	$34(a0),d1
00010B22 D240                       		add.w	d0,d1
00010B24 3141 0008                  		move.w	d1,8(a0)
00010B28 4E75                       		rts	
00010B2A                            ; ===========================================================================
00010B2A                            
00010B2A                            loc_105C0:
00010B2A 5228 0028                  		addq.b	#1,$28(a0)
00010B2E 4228 0038                  		clr.b	$38(a0)
00010B32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B36 7000                       		moveq	#0,d0
00010B38 1028 0023                  		move.b	$23(a0),d0
00010B3C 67CE                       		beq.s	loc_105A2
00010B3E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B44 60C6                       		bra.s	loc_105A2
00010B46                            ; ===========================================================================
00010B46                            
00010B46                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B46 4A28 0038                  		tst.b	$38(a0)
00010B4A 6600                       		bne.s	loc_105F8
00010B4C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B50 7000                       		moveq	#0,d0
00010B52 1028 003C                  		move.b	$3C(a0),d0
00010B56 4A32 0000                  		tst.b	(a2,d0.w)
00010B5A 6A00                       		bpl.s	loc_10606
00010B5C 117C 0001 0038             		move.b	#1,$38(a0)
00010B62                            
00010B62                            loc_105F8:
00010B62 303C 0080                  		move.w	#$80,d0
00010B66 B068 003A                  		cmp.w	$3A(a0),d0
00010B6A 6700                       		beq.s	loc_10624
00010B6C 5468 003A                  		addq.w	#2,$3A(a0)
00010B70                            
00010B70                            loc_10606:
00010B70 3028 003A                  		move.w	$3A(a0),d0
00010B74 0828 0000 0022             		btst	#0,$22(a0)
00010B7A 6700                       		beq.s	loc_10618
00010B7C 4440                       		neg.w	d0
00010B7E 0640 0080                  		addi.w	#$80,d0
00010B82                            
00010B82                            loc_10618:
00010B82 3228 0034                  		move.w	$34(a0),d1
00010B86 D240                       		add.w	d0,d1
00010B88 3141 0008                  		move.w	d1,8(a0)
00010B8C 4E75                       		rts	
00010B8E                            ; ===========================================================================
00010B8E                            
00010B8E                            loc_10624:
00010B8E 5328 0028                  		subq.b	#1,$28(a0)
00010B92 4228 0038                  		clr.b	$38(a0)
00010B96 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B9A 7000                       		moveq	#0,d0
00010B9C 1028 0023                  		move.b	$23(a0),d0
00010BA0 67CE                       		beq.s	loc_10606
00010BA2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BA8 60C6                       		bra.s	loc_10606
00010BAA                            ; ===========================================================================
00010BAA                            
00010BAA                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BAA 323C 0010                  		move.w	#$10,d1
00010BAE 7000                       		moveq	#0,d0
00010BB0 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BB4 E248                       		lsr.w	#1,d0
00010BB6 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BBA 6000                       		bra.s	Obj56_Move_Sqr
00010BBC                            ; ===========================================================================
00010BBC                            
00010BBC                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BBC 323C 0030                  		move.w	#$30,d1
00010BC0 7000                       		moveq	#0,d0
00010BC2 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010BC6 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010BCA 6000                       		bra.s	Obj56_Move_Sqr
00010BCC                            ; ===========================================================================
00010BCC                            
00010BCC                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010BCC 323C 0050                  		move.w	#$50,d1
00010BD0 7000                       		moveq	#0,d0
00010BD2 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010BD6 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010BDA 6000                       		bra.s	Obj56_Move_Sqr
00010BDC                            ; ===========================================================================
00010BDC                            
00010BDC                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010BDC 323C 0070                  		move.w	#$70,d1
00010BE0 7000                       		moveq	#0,d0
00010BE2 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010BE6 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010BEA                            
00010BEA                            Obj56_Move_Sqr:
00010BEA 4A43                       		tst.w	d3
00010BEC 6600                       		bne.s	loc_1068E
00010BEE 5228 0022                  		addq.b	#1,$22(a0)
00010BF2 0228 0003 0022             		andi.b	#3,$22(a0)
00010BF8                            
00010BF8                            loc_1068E:
00010BF8 1428 0022                  		move.b	$22(a0),d2
00010BFC 0202 0003                  		andi.b	#3,d2
00010C00 6600                       		bne.s	loc_106AE
00010C02 9041                       		sub.w	d1,d0
00010C04 D068 0034                  		add.w	$34(a0),d0
00010C08 3140 0008                  		move.w	d0,8(a0)
00010C0C 4441                       		neg.w	d1
00010C0E D268 0030                  		add.w	$30(a0),d1
00010C12 3141 000C                  		move.w	d1,$C(a0)
00010C16 4E75                       		rts	
00010C18                            ; ===========================================================================
00010C18                            
00010C18                            loc_106AE:
00010C18 5302                       		subq.b	#1,d2
00010C1A 6600                       		bne.s	loc_106CC
00010C1C 5341                       		subq.w	#1,d1
00010C1E 9041                       		sub.w	d1,d0
00010C20 4440                       		neg.w	d0
00010C22 D068 0030                  		add.w	$30(a0),d0
00010C26 3140 000C                  		move.w	d0,$C(a0)
00010C2A 5241                       		addq.w	#1,d1
00010C2C D268 0034                  		add.w	$34(a0),d1
00010C30 3141 0008                  		move.w	d1,8(a0)
00010C34 4E75                       		rts	
00010C36                            ; ===========================================================================
00010C36                            
00010C36                            loc_106CC:
00010C36 5302                       		subq.b	#1,d2
00010C38 6600                       		bne.s	loc_106EA
00010C3A 5341                       		subq.w	#1,d1
00010C3C 9041                       		sub.w	d1,d0
00010C3E 4440                       		neg.w	d0
00010C40 D068 0034                  		add.w	$34(a0),d0
00010C44 3140 0008                  		move.w	d0,8(a0)
00010C48 5241                       		addq.w	#1,d1
00010C4A D268 0030                  		add.w	$30(a0),d1
00010C4E 3141 000C                  		move.w	d1,$C(a0)
00010C52 4E75                       		rts	
00010C54                            ; ===========================================================================
00010C54                            
00010C54                            loc_106EA:
00010C54 9041                       		sub.w	d1,d0
00010C56 D068 0030                  		add.w	$30(a0),d0
00010C5A 3140 000C                  		move.w	d0,$C(a0)
00010C5E 4441                       		neg.w	d1
00010C60 D268 0034                  		add.w	$34(a0),d1
00010C64 3141 0008                  		move.w	d1,8(a0)
00010C68 4E75                       		rts	
00010C6A                            ; ===========================================================================
00010C6A                            ; ---------------------------------------------------------------------------
00010C6A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C6A                            ; ---------------------------------------------------------------------------
00010C6A                            Map_obj56:
00010C6A                            	include "_maps\obj56.asm"
00010C6A                            ; ---------------------------------------------------------------------------
00010C6A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C6A                            ; ---------------------------------------------------------------------------
00010C6A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C6E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010C72 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010C76 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010C7A 01                         byte_10710:	dc.b 1
00010C7B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010C80 04                         byte_10716:	dc.b 4
00010C81 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010C86 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010C8B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010C90 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010C95 02                         byte_1072B:	dc.b 2
00010C96 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010C9B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010CA0 04                         byte_10736:	dc.b 4
00010CA1 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010CA6 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CAB 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CB0 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CB5 03                         byte_1074B:	dc.b 3
00010CB6 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CBB F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CC0 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CC5 01                         byte_1075B:	dc.b 1
00010CC6 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010CCB 02                         byte_10761:	dc.b 2
00010CCC E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010CD1 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010CD6 04                         byte_1076C:	dc.b 4
00010CD7 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010CDC F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010CE1 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010CE6 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010CEC 00                         		even
00010CEC 00                         		even
00010CEC                            
00010CEC                            ; ===========================================================================
00010CEC                            ; ---------------------------------------------------------------------------
00010CEC                            ; Object 57 - spiked balls (SYZ, LZ)
00010CEC                            ; ---------------------------------------------------------------------------
00010CEC                            
00010CEC                            Obj57:					; XREF: Obj_Index
00010CEC 7000                       		moveq	#0,d0
00010CEE 1028 0024                  		move.b	$24(a0),d0
00010CF2 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010CF6 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010CFA                            ; ===========================================================================
00010CFA 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010CFC 0000                       		dc.w Obj57_Move-Obj57_Index
00010CFE 0000                       		dc.w Obj57_Display-Obj57_Index
00010D00                            ; ===========================================================================
00010D00                            
00010D00                            Obj57_Main:				; XREF: Obj57_Index
00010D00 5428 0024                  		addq.b	#2,$24(a0)
00010D04 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D0C 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D12 117C 0004 0001             		move.b	#4,1(a0)
00010D18 117C 0004 0018             		move.b	#4,$18(a0)
00010D1E 117C 0008 0019             		move.b	#8,$19(a0)
00010D24 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D2A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D30 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D3C 6600                       		bne.s	loc_107E8
00010D3E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D44 317C 0310 0002             		move.w	#$310,2(a0)
00010D4A 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D52                            
00010D52                            loc_107E8:
00010D52 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D56 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D5A 4881                       		ext.w	d1
00010D5C E741                       		asl.w	#3,d1		; multiply by 8
00010D5E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D62 1028 0022                  		move.b	$22(a0),d0
00010D66 E418                       		ror.b	#2,d0
00010D68 0200 00C0                  		andi.b	#-$40,d0
00010D6C 1140 0026                  		move.b	d0,$26(a0)
00010D70 45E8 0029                  		lea	$29(a0),a2
00010D74 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D78 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010D7C 14FC 0000                  		move.b	#0,(a2)+
00010D80 3601                       		move.w	d1,d3
00010D82 E94B                       		lsl.w	#4,d3
00010D84 1143 003C                  		move.b	d3,$3C(a0)
00010D88 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010D8A 6500                       		bcs.s	loc_10894
00010D8C 0828 0003 0028             		btst	#3,$28(a0)
00010D92 6700                       		beq.s	Obj57_MakeChain
00010D94 5341                       		subq.w	#1,d1
00010D96 6500                       		bcs.s	loc_10894
00010D98                            
00010D98                            Obj57_MakeChain:
00010D98 6100 D266                  		bsr.w	SingleObjLoad
00010D9C 6600                       		bne.s	loc_10894
00010D9E 5228 0029                  		addq.b	#1,$29(a0)
00010DA2 3A09                       		move.w	a1,d5
00010DA4 0445 D000                  		subi.w	#-$3000,d5
00010DA8 EC4D                       		lsr.w	#6,d5
00010DAA 0245 007F                  		andi.w	#$7F,d5
00010DAE 14C5                       		move.b	d5,(a2)+
00010DB0 137C 0004 0024             		move.b	#4,$24(a1)
00010DB6 1290                       		move.b	0(a0),0(a1)
00010DB8 2368 0004 0004             		move.l	4(a0),4(a1)
00010DBE 3368 0002 0002             		move.w	2(a0),2(a1)
00010DC4 1368 0001 0001             		move.b	1(a0),1(a1)
00010DCA 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010DD0 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010DD6 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010DDC 0403 0010                  		subi.b	#$10,d3
00010DE0 1343 003C                  		move.b	d3,$3C(a1)
00010DE4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010DEA 6600                       		bne.s	loc_10890
00010DEC 4A03                       		tst.b	d3
00010DEE 6600                       		bne.s	loc_10890
00010DF0 137C 0002 001A             		move.b	#2,$1A(a1)
00010DF6                            
00010DF6                            loc_10890:
00010DF6 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010DFA                            
00010DFA                            loc_10894:
00010DFA 3A08                       		move.w	a0,d5
00010DFC 0445 D000                  		subi.w	#-$3000,d5
00010E00 EC4D                       		lsr.w	#6,d5
00010E02 0245 007F                  		andi.w	#$7F,d5
00010E06 14C5                       		move.b	d5,(a2)+
00010E08 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E0E 6600                       		bne.s	Obj57_Move
00010E10 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E16 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E1C                            
00010E1C                            Obj57_Move:				; XREF: Obj57_Index
00010E1C 6100 0000                  		bsr.w	Obj57_MoveSub
00010E20 6000 0000                  		bra.w	Obj57_ChkDel
00010E24                            ; ===========================================================================
00010E24                            
00010E24                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E24 3028 003E                  		move.w	$3E(a0),d0
00010E28 D168 0026                  		add.w	d0,$26(a0)
00010E2C 1028 0026                  		move.b	$26(a0),d0
00010E30 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E36 3428 0038                  		move.w	$38(a0),d2
00010E3A 3628 003A                  		move.w	$3A(a0),d3
00010E3E 45E8 0029                  		lea	$29(a0),a2
00010E42 7C00                       		moveq	#0,d6
00010E44 1C1A                       		move.b	(a2)+,d6
00010E46                            
00010E46                            Obj57_MoveLoop:
00010E46 7800                       		moveq	#0,d4
00010E48 181A                       		move.b	(a2)+,d4
00010E4A ED4C                       		lsl.w	#6,d4
00010E4C 0684 00FF D000             		addi.l	#$FFD000,d4
00010E52 2244                       		movea.l	d4,a1
00010E54 7800                       		moveq	#0,d4
00010E56 1829 003C                  		move.b	$3C(a1),d4
00010E5A 2A04                       		move.l	d4,d5
00010E5C C9C0                       		muls.w	d0,d4
00010E5E E084                       		asr.l	#8,d4
00010E60 CBC1                       		muls.w	d1,d5
00010E62 E085                       		asr.l	#8,d5
00010E64 D842                       		add.w	d2,d4
00010E66 DA43                       		add.w	d3,d5
00010E68 3344 000C                  		move.w	d4,$C(a1)
00010E6C 3345 0008                  		move.w	d5,8(a1)
00010E70 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010E74 4E75                       		rts	
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            Obj57_ChkDel:				; XREF: Obj57_Move
00010E76 3028 003A                  		move.w	$3A(a0),d0
00010E7A 0240 FF80                  		andi.w	#$FF80,d0
00010E7E 3238 F700                  		move.w	($FFFFF700).w,d1
00010E82 0441 0080                  		subi.w	#$80,d1
00010E86 0241 FF80                  		andi.w	#$FF80,d1
00010E8A 9041                       		sub.w	d1,d0
00010E8C 0C40 0280                  		cmpi.w	#$280,d0
00010E90 6200 0000                  		bhi.w	Obj57_Delete
00010E94 6000 CCE4                  		bra.w	DisplaySprite
00010E98                            ; ===========================================================================
00010E98                            
00010E98                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010E98 7400                       		moveq	#0,d2
00010E9A 45E8 0029                  		lea	$29(a0),a2
00010E9E 141A                       		move.b	(a2)+,d2
00010EA0                            
00010EA0                            Obj57_DelLoop:
00010EA0 7000                       		moveq	#0,d0
00010EA2 101A                       		move.b	(a2)+,d0
00010EA4 ED48                       		lsl.w	#6,d0
00010EA6 0680 00FF D000             		addi.l	#$FFD000,d0
00010EAC 2240                       		movea.l	d0,a1
00010EAE 6100 CD08                  		bsr.w	DeleteObject2
00010EB2 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010EB6                            
00010EB6 4E75                       		rts	
00010EB8                            ; ===========================================================================
00010EB8                            
00010EB8                            Obj57_Display:				; XREF: Obj57_Index
00010EB8 6000 CCC0                  		bra.w	DisplaySprite
00010EBC                            ; ===========================================================================
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC                            Map_obj57:
00010EBC                            	include "_maps\obj57syz.asm"
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EBC                            ; ---------------------------------------------------------------------------
00010EBC 0000                       		dc.w byte_10958-Map_obj57
00010EBE 01                         byte_10958:	dc.b 1
00010EBF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EC4                            		even
00010EC4                            		even
00010EC4                            
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            Map_obj57a:
00010EC4                            	include "_maps\obj57lz.asm"
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EC4                            ; ---------------------------------------------------------------------------
00010EC4 0000                       		dc.w byte_10964-Map_obj57a
00010EC6 0000                       		dc.w byte_1096A-Map_obj57a
00010EC8 0000                       		dc.w byte_10970-Map_obj57a
00010ECA 01                         byte_10964:	dc.b 1
00010ECB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010ED0 01                         byte_1096A:	dc.b 1
00010ED1 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010ED6 01                         byte_10970:	dc.b 1
00010ED7 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010EDC                            		even
00010EDC                            		even
00010EDC                            
00010EDC                            ; ===========================================================================
00010EDC                            ; ---------------------------------------------------------------------------
00010EDC                            ; Object 58 - giant spiked balls (SYZ)
00010EDC                            ; ---------------------------------------------------------------------------
00010EDC                            
00010EDC                            Obj58:					; XREF: Obj_Index
00010EDC 7000                       		moveq	#0,d0
00010EDE 1028 0024                  		move.b	$24(a0),d0
00010EE2 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010EE6 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010EEA                            ; ===========================================================================
00010EEA 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010EEC 0000                       		dc.w Obj58_Move-Obj58_Index
00010EEE                            ; ===========================================================================
00010EEE                            
00010EEE                            Obj58_Main:				; XREF: Obj58_Index
00010EEE 5428 0024                  		addq.b	#2,$24(a0)
00010EF2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010EFA 317C 0396 0002             		move.w	#$396,2(a0)
00010F00 117C 0004 0001             		move.b	#4,1(a0)
00010F06 117C 0004 0018             		move.b	#4,$18(a0)
00010F0C 117C 0018 0019             		move.b	#$18,$19(a0)
00010F12 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F18 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F1E 117C 0086 0020             		move.b	#$86,$20(a0)
00010F24 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F28 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F2C 4881                       		ext.w	d1
00010F2E E741                       		asl.w	#3,d1		; multiply by 8
00010F30 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F34 1028 0022                  		move.b	$22(a0),d0
00010F38 E418                       		ror.b	#2,d0
00010F3A 0200 00C0                  		andi.b	#$C0,d0
00010F3E 1140 0026                  		move.b	d0,$26(a0)
00010F42 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F48                            
00010F48                            Obj58_Move:				; XREF: Obj58_Index
00010F48 7000                       		moveq	#0,d0
00010F4A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F4E 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F52 D040                       		add.w	d0,d0
00010F54 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F58 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F5C 3028 003A                  		move.w	$3A(a0),d0
00010F60 0240 FF80                  		andi.w	#$FF80,d0
00010F64 3238 F700                  		move.w	($FFFFF700).w,d1
00010F68 0441 0080                  		subi.w	#$80,d1
00010F6C 0241 FF80                  		andi.w	#$FF80,d1
00010F70 9041                       		sub.w	d1,d0
00010F72 0C40 0280                  		cmpi.w	#$280,d0
00010F76 6200 CC3E                  		bhi.w	DeleteObject
00010F7A 6000 CBFE                  		bra.w	DisplaySprite
00010F7E                            ; ===========================================================================
00010F7E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010F80 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010F82 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010F84 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010F86                            ; ===========================================================================
00010F86                            
00010F86                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010F86 4E75                       		rts	
00010F88                            ; ===========================================================================
00010F88                            
00010F88                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010F88 323C 0060                  		move.w	#$60,d1
00010F8C 7000                       		moveq	#0,d0
00010F8E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010F92 0828 0000 0022             		btst	#0,$22(a0)
00010F98 6700                       		beq.s	loc_10A38
00010F9A 4440                       		neg.w	d0
00010F9C D041                       		add.w	d1,d0
00010F9E                            
00010F9E                            loc_10A38:
00010F9E 3228 003A                  		move.w	$3A(a0),d1
00010FA2 9240                       		sub.w	d0,d1
00010FA4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FA8 4E75                       		rts	
00010FAA                            ; ===========================================================================
00010FAA                            
00010FAA                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FAA 323C 0060                  		move.w	#$60,d1
00010FAE 7000                       		moveq	#0,d0
00010FB0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FB4 0828 0000 0022             		btst	#0,$22(a0)
00010FBA 6700                       		beq.s	loc_10A5C
00010FBC 4440                       		neg.w	d0
00010FBE 0640 0080                  		addi.w	#$80,d0
00010FC2                            
00010FC2                            loc_10A5C:
00010FC2 3228 0038                  		move.w	$38(a0),d1
00010FC6 9240                       		sub.w	d0,d1
00010FC8 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010FCC 4E75                       		rts	
00010FCE                            ; ===========================================================================
00010FCE                            
00010FCE                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010FCE 3028 003E                  		move.w	$3E(a0),d0
00010FD2 D168 0026                  		add.w	d0,$26(a0)
00010FD6 1028 0026                  		move.b	$26(a0),d0
00010FDA 4EB9 0000 2C22             		jsr	(CalcSine).l
00010FE0 3428 0038                  		move.w	$38(a0),d2
00010FE4 3628 003A                  		move.w	$3A(a0),d3
00010FE8 7800                       		moveq	#0,d4
00010FEA 1828 003C                  		move.b	$3C(a0),d4
00010FEE 2A04                       		move.l	d4,d5
00010FF0 C9C0                       		muls.w	d0,d4
00010FF2 E084                       		asr.l	#8,d4
00010FF4 CBC1                       		muls.w	d1,d5
00010FF6 E085                       		asr.l	#8,d5
00010FF8 D842                       		add.w	d2,d4
00010FFA DA43                       		add.w	d3,d5
00010FFC 3144 000C                  		move.w	d4,$C(a0)
00011000 3145 0008                  		move.w	d5,8(a0)
00011004 4E75                       		rts	
00011006                            ; ===========================================================================
00011006                            ; ---------------------------------------------------------------------------
00011006                            ; Sprite mappings - SBZ	spiked ball on a chain
00011006                            ; ---------------------------------------------------------------------------
00011006                            Map_obj15b:
00011006                            	include "_maps\obj15sbz.asm"
00011006                            ; ---------------------------------------------------------------------------
00011006                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011006                            ; ---------------------------------------------------------------------------
00011006 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001100A 0000                       		dc.w byte_10AC6-Map_obj15b
0001100C 05                         byte_10AA6:	dc.b 5
0001100D E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011012 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011017 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001101C F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011021 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011026 01                         byte_10AC0:	dc.b 1
00011027 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001102C 02                         byte_10AC6:	dc.b 2
0001102D F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011032 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011038 00                         		even
00011038 00                         		even
00011038                            
00011038                            ; ===========================================================================
00011038                            ; ---------------------------------------------------------------------------
00011038                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011038                            ; ---------------------------------------------------------------------------
00011038                            
00011038                            Obj59:					; XREF: Obj_Index
00011038 7000                       		moveq	#0,d0
0001103A 1028 0024                  		move.b	$24(a0),d0
0001103E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011042 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011046 3028 0032                  		move.w	$32(a0),d0
0001104A 0240 FF80                  		andi.w	#$FF80,d0
0001104E 3238 F700                  		move.w	($FFFFF700).w,d1
00011052 0441 0080                  		subi.w	#$80,d1
00011056 0241 FF80                  		andi.w	#$FF80,d1
0001105A 9041                       		sub.w	d1,d0
0001105C 0C40 0280                  		cmpi.w	#$280,d0
00011060 6200 CB54                  		bhi.w	DeleteObject
00011064 6000 CB14                  		bra.w	DisplaySprite
00011068                            ; ===========================================================================
00011068 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001106A 0000                       		dc.w Obj59_Platform-Obj59_Index
0001106C 0000                       		dc.w Obj59_Action-Obj59_Index
0001106E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011070                            
00011070 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011072                            
00011072 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011074 2001                       		dc.b $20, 1
00011076 3401                       		dc.b $34, 1
00011078 1003                       		dc.b $10, 3
0001107A 2003                       		dc.b $20, 3
0001107C 3403                       		dc.b $34, 3
0001107E 1401                       		dc.b $14, 1
00011080 2401                       		dc.b $24, 1
00011082 2C01                       		dc.b $2C, 1
00011084 1403                       		dc.b $14, 3
00011086 2403                       		dc.b $24, 3
00011088 2C03                       		dc.b $2C, 3
0001108A 2005                       		dc.b $20, 5
0001108C 2007                       		dc.b $20, 7
0001108E 3009                       		dc.b $30, 9
00011090                            ; ===========================================================================
00011090                            
00011090                            Obj59_Main:				; XREF: Obj59_Index
00011090 5428 0024                  		addq.b	#2,$24(a0)
00011094 7000                       		moveq	#0,d0
00011096 1028 0028                  		move.b	$28(a0),d0
0001109A 6A00                       		bpl.s	Obj59_Main2
0001109C 5828 0024                  		addq.b	#4,$24(a0)
000110A0 0240 007F                  		andi.w	#$7F,d0
000110A4 C0FC 0006                  		mulu.w	#6,d0
000110A8 3140 003C                  		move.w	d0,$3C(a0)
000110AC 3140 003E                  		move.w	d0,$3E(a0)
000110B0 588F                       		addq.l	#4,sp
000110B2 4E75                       		rts	
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            Obj59_Main2:
000110B4 E648                       		lsr.w	#3,d0
000110B6 0240 001E                  		andi.w	#$1E,d0
000110BA 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110BE 115A 0019                  		move.b	(a2)+,$19(a0)
000110C2 115A 001A                  		move.b	(a2)+,$1A(a0)
000110C6 7000                       		moveq	#0,d0
000110C8 1028 0028                  		move.b	$28(a0),d0
000110CC D040                       		add.w	d0,d0
000110CE 0240 001E                  		andi.w	#$1E,d0
000110D2 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000110D6 101A                       		move.b	(a2)+,d0
000110D8 E548                       		lsl.w	#2,d0
000110DA 3140 003C                  		move.w	d0,$3C(a0)
000110DE 115A 0028                  		move.b	(a2)+,$28(a0)
000110E2 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000110EA 317C 4000 0002             		move.w	#$4000,2(a0)
000110F0 117C 0004 0001             		move.b	#4,1(a0)
000110F6 117C 0004 0018             		move.b	#4,$18(a0)
000110FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00011102 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011108                            
00011108                            Obj59_Platform:				; XREF: Obj59_Index
00011108 7200                       		moveq	#0,d1
0001110A 1228 0019                  		move.b	$19(a0),d1
0001110E 4EB9 0000 78A6             		jsr	(PlatformObject).l
00011114 6000 0000                  		bra.w	Obj59_Types
00011118                            ; ===========================================================================
00011118                            
00011118                            Obj59_Action:				; XREF: Obj59_Index
00011118 7200                       		moveq	#0,d1
0001111A 1228 0019                  		move.b	$19(a0),d1
0001111E 4EB9 0000 7A1A             		jsr	(ExitPlatform).l
00011124 3F28 0008                  		move.w	8(a0),-(sp)
00011128 6100 0000                  		bsr.w	Obj59_Types
0001112C 341F                       		move.w	(sp)+,d2
0001112E 4A10                       		tst.b	0(a0)
00011130 6700                       		beq.s	locret_10BD4
00011132 4EF9 0000 7F84             		jmp	(MvSonicOnPtfm2).l
00011138                            ; ===========================================================================
00011138                            
00011138                            locret_10BD4:
00011138 4E75                       		rts	
0001113A                            ; ===========================================================================
0001113A                            
0001113A                            Obj59_Types:
0001113A 7000                       		moveq	#0,d0
0001113C 1028 0028                  		move.b	$28(a0),d0
00011140 0240 000F                  		andi.w	#$F,d0
00011144 D040                       		add.w	d0,d0
00011146 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001114A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001114E                            ; ===========================================================================
0001114E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011152 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011156 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001115A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001115E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011162                            ; ===========================================================================
00011162                            
00011162                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011162 4E75                       		rts	
00011164                            ; ===========================================================================
00011164                            
00011164                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011164 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001116A 6600                       		bne.s	locret_10C0C
0001116C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011170                            
00011170                            locret_10C0C:
00011170 4E75                       		rts	
00011172                            ; ===========================================================================
00011172                            
00011172                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011172 6100 0000                  		bsr.w	Obj59_Move
00011176 3028 0034                  		move.w	$34(a0),d0
0001117A 4440                       		neg.w	d0
0001117C D068 0030                  		add.w	$30(a0),d0
00011180 3140 000C                  		move.w	d0,$C(a0)
00011184 4E75                       		rts	
00011186                            ; ===========================================================================
00011186                            
00011186                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011186 6100 0000                  		bsr.w	Obj59_Move
0001118A 3028 0034                  		move.w	$34(a0),d0
0001118E D068 0030                  		add.w	$30(a0),d0
00011192 3140 000C                  		move.w	d0,$C(a0)
00011196 4E75                       		rts	
00011198                            ; ===========================================================================
00011198                            
00011198                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011198 6100 0000                  		bsr.w	Obj59_Move
0001119C 3028 0034                  		move.w	$34(a0),d0
000111A0 E240                       		asr.w	#1,d0
000111A2 4440                       		neg.w	d0
000111A4 D068 0030                  		add.w	$30(a0),d0
000111A8 3140 000C                  		move.w	d0,$C(a0)
000111AC 3028 0034                  		move.w	$34(a0),d0
000111B0 D068 0032                  		add.w	$32(a0),d0
000111B4 3140 0008                  		move.w	d0,8(a0)
000111B8 4E75                       		rts	
000111BA                            ; ===========================================================================
000111BA                            
000111BA                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111BA 6100 0000                  		bsr.w	Obj59_Move
000111BE 3028 0034                  		move.w	$34(a0),d0
000111C2 E240                       		asr.w	#1,d0
000111C4 D068 0030                  		add.w	$30(a0),d0
000111C8 3140 000C                  		move.w	d0,$C(a0)
000111CC 3028 0034                  		move.w	$34(a0),d0
000111D0 4440                       		neg.w	d0
000111D2 D068 0032                  		add.w	$32(a0),d0
000111D6 3140 0008                  		move.w	d0,8(a0)
000111DA 4E75                       		rts	
000111DC                            ; ===========================================================================
000111DC                            
000111DC                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000111DC 6100 0000                  		bsr.w	Obj59_Move
000111E0 3028 0034                  		move.w	$34(a0),d0
000111E4 4440                       		neg.w	d0
000111E6 D068 0030                  		add.w	$30(a0),d0
000111EA 3140 000C                  		move.w	d0,$C(a0)
000111EE 4A28 0028                  		tst.b	$28(a0)
000111F2 6700 0000                  		beq.w	loc_10C94
000111F6 4E75                       		rts	
000111F8                            ; ===========================================================================
000111F8                            
000111F8                            loc_10C94:
000111F8 0828 0003 0022             		btst	#3,$22(a0)
000111FE 6700                       		beq.s	Obj59_Delete
00011200 08E9 0001 0022             		bset	#1,$22(a1)
00011206 08A9 0003 0022             		bclr	#3,$22(a1)
0001120C 137C 0002 0024             		move.b	#2,$24(a1)
00011212                            
00011212                            Obj59_Delete:
00011212 6000 C9A2                  		bra.w	DeleteObject
00011216                            
00011216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011216                            
00011216                            
00011216                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011216 3028 0038                  		move.w	$38(a0),d0
0001121A 4A28 003A                  		tst.b	$3A(a0)
0001121E 6600                       		bne.s	loc_10CC8
00011220 0C40 0800                  		cmpi.w	#$800,d0
00011224 6400                       		bcc.s	loc_10CD0
00011226 0640 0010                  		addi.w	#$10,d0
0001122A 6000                       		bra.s	loc_10CD0
0001122C                            ; ===========================================================================
0001122C                            
0001122C                            loc_10CC8:
0001122C 4A40                       		tst.w	d0
0001122E 6700                       		beq.s	loc_10CD0
00011230 0440 0010                  		subi.w	#$10,d0
00011234                            
00011234                            loc_10CD0:
00011234 3140 0038                  		move.w	d0,$38(a0)
00011238 48C0                       		ext.l	d0
0001123A E180                       		asl.l	#8,d0
0001123C D0A8 0034                  		add.l	$34(a0),d0
00011240 2140 0034                  		move.l	d0,$34(a0)
00011244 4840                       		swap	d0
00011246 3428 003C                  		move.w	$3C(a0),d2
0001124A B042                       		cmp.w	d2,d0
0001124C 6300                       		bls.s	loc_10CF0
0001124E 117C 0001 003A             		move.b	#1,$3A(a0)
00011254                            
00011254                            loc_10CF0:
00011254 D442                       		add.w	d2,d2
00011256 B042                       		cmp.w	d2,d0
00011258 6600                       		bne.s	locret_10CFA
0001125A 4228 0028                  		clr.b	$28(a0)
0001125E                            
0001125E                            locret_10CFA:
0001125E 4E75                       		rts	
00011260                            ; End of function Obj59_Move
00011260                            
00011260                            ; ===========================================================================
00011260                            
00011260                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011260 5368 003C                  		subq.w	#1,$3C(a0)
00011264 6600                       		bne.s	Obj59_ChkDel
00011266 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001126C 6100 CD92                  		bsr.w	SingleObjLoad
00011270 6600                       		bne.s	Obj59_ChkDel
00011272 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011276 3368 0008 0008             		move.w	8(a0),8(a1)
0001127C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011282 137C 000E 0028             		move.b	#$E,$28(a1)
00011288                            
00011288                            Obj59_ChkDel:
00011288 588F                       		addq.l	#4,sp
0001128A 3028 0008                  		move.w	8(a0),d0
0001128E 0240 FF80                  		andi.w	#$FF80,d0
00011292 3238 F700                  		move.w	($FFFFF700).w,d1
00011296 0441 0080                  		subi.w	#$80,d1
0001129A 0241 FF80                  		andi.w	#$FF80,d1
0001129E 9041                       		sub.w	d1,d0
000112A0 0C40 0280                  		cmpi.w	#$280,d0
000112A4 6200 C910                  		bhi.w	DeleteObject
000112A8 4E75                       		rts	
000112AA                            ; ===========================================================================
000112AA                            ; ---------------------------------------------------------------------------
000112AA                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112AA                            ; ---------------------------------------------------------------------------
000112AA                            Map_obj59:
000112AA                            	include "_maps\obj59.asm"
000112AA                            ; ---------------------------------------------------------------------------
000112AA                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112AA                            ; ---------------------------------------------------------------------------
000112AA 0000                       		dc.w byte_10D4A-Map_obj59
000112AC 03                         byte_10D4A:	dc.b 3
000112AD F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112B2 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112B7 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112BC                            		even
000112BC                            		even
000112BC                            
000112BC                            ; ===========================================================================
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            ; Object 5A - platforms	moving in circles (SLZ)
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            
000112BC                            Obj5A:					; XREF: Obj_Index
000112BC 7000                       		moveq	#0,d0
000112BE 1028 0024                  		move.b	$24(a0),d0
000112C2 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000112C6 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000112CA 3028 0032                  		move.w	$32(a0),d0
000112CE 0240 FF80                  		andi.w	#$FF80,d0
000112D2 3238 F700                  		move.w	($FFFFF700).w,d1
000112D6 0441 0080                  		subi.w	#$80,d1
000112DA 0241 FF80                  		andi.w	#$FF80,d1
000112DE 9041                       		sub.w	d1,d0
000112E0 0C40 0280                  		cmpi.w	#$280,d0
000112E4 6200 C8D0                  		bhi.w	DeleteObject
000112E8 6000 C890                  		bra.w	DisplaySprite
000112EC                            ; ===========================================================================
000112EC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000112EE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000112F0 0000                       		dc.w Obj5A_Action-Obj5A_Index
000112F2                            ; ===========================================================================
000112F2                            
000112F2                            Obj5A_Main:				; XREF: Obj5A_Index
000112F2 5428 0024                  		addq.b	#2,$24(a0)
000112F6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000112FE 317C 4000 0002             		move.w	#$4000,2(a0)
00011304 117C 0004 0001             		move.b	#4,1(a0)
0001130A 117C 0004 0018             		move.b	#4,$18(a0)
00011310 117C 0018 0019             		move.b	#$18,$19(a0)
00011316 3168 0008 0032             		move.w	8(a0),$32(a0)
0001131C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011322                            
00011322                            Obj5A_Platform:				; XREF: Obj5A_Index
00011322 7200                       		moveq	#0,d1
00011324 1228 0019                  		move.b	$19(a0),d1
00011328 4EB9 0000 78A6             		jsr	(PlatformObject).l
0001132E 6000 0000                  		bra.w	Obj5A_Types
00011332                            ; ===========================================================================
00011332                            
00011332                            Obj5A_Action:				; XREF: Obj5A_Index
00011332 7200                       		moveq	#0,d1
00011334 1228 0019                  		move.b	$19(a0),d1
00011338 4EB9 0000 7A1A             		jsr	(ExitPlatform).l
0001133E 3F28 0008                  		move.w	8(a0),-(sp)
00011342 6100 0000                  		bsr.w	Obj5A_Types
00011346 341F                       		move.w	(sp)+,d2
00011348 4EF9 0000 7F84             		jmp	(MvSonicOnPtfm2).l
0001134E                            ; ===========================================================================
0001134E                            
0001134E                            Obj5A_Types:
0001134E 7000                       		moveq	#0,d0
00011350 1028 0028                  		move.b	$28(a0),d0
00011354 0240 000C                  		andi.w	#$C,d0
00011358 E248                       		lsr.w	#1,d0
0001135A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001135E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011362                            ; ===========================================================================
00011362 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011364 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011366                            ; ===========================================================================
00011366                            
00011366                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011366 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001136A 0401 0050                  		subi.b	#$50,d1
0001136E 4881                       		ext.w	d1
00011370 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011374 0402 0050                  		subi.b	#$50,d2
00011378 4882                       		ext.w	d2
0001137A 0828 0000 0028             		btst	#0,$28(a0)
00011380 6700                       		beq.s	loc_10E24
00011382 4441                       		neg.w	d1
00011384 4442                       		neg.w	d2
00011386                            
00011386                            loc_10E24:
00011386 0828 0001 0028             		btst	#1,$28(a0)
0001138C 6700                       		beq.s	loc_10E30
0001138E 4441                       		neg.w	d1
00011390 C342                       		exg	d1,d2
00011392                            
00011392                            loc_10E30:
00011392 D268 0032                  		add.w	$32(a0),d1
00011396 3141 0008                  		move.w	d1,8(a0)
0001139A D468 0030                  		add.w	$30(a0),d2
0001139E 3142 000C                  		move.w	d2,$C(a0)
000113A2 4E75                       		rts	
000113A4                            ; ===========================================================================
000113A4                            
000113A4                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000113A4 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113A8 0401 0050                  		subi.b	#$50,d1
000113AC 4881                       		ext.w	d1
000113AE 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113B2 0402 0050                  		subi.b	#$50,d2
000113B6 4882                       		ext.w	d2
000113B8 0828 0000 0028             		btst	#0,$28(a0)
000113BE 6700                       		beq.s	loc_10E62
000113C0 4441                       		neg.w	d1
000113C2 4442                       		neg.w	d2
000113C4                            
000113C4                            loc_10E62:
000113C4 0828 0001 0028             		btst	#1,$28(a0)
000113CA 6700                       		beq.s	loc_10E6E
000113CC 4441                       		neg.w	d1
000113CE C342                       		exg	d1,d2
000113D0                            
000113D0                            loc_10E6E:
000113D0 4441                       		neg.w	d1
000113D2 D268 0032                  		add.w	$32(a0),d1
000113D6 3141 0008                  		move.w	d1,8(a0)
000113DA D468 0030                  		add.w	$30(a0),d2
000113DE 3142 000C                  		move.w	d2,$C(a0)
000113E2 4E75                       		rts	
000113E4                            ; ===========================================================================
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            Map_obj5A:
000113E4                            	include "_maps\obj5A.asm"
000113E4                            ; ---------------------------------------------------------------------------
000113E4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113E4                            ; ---------------------------------------------------------------------------
000113E4 0000                       		dc.w byte_10E84-Map_obj5A
000113E6 02                         byte_10E84:	dc.b 2
000113E7 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000113EC F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000113F2 00                         		even
000113F2 00                         		even
000113F2                            
000113F2                            ; ===========================================================================
000113F2                            ; ---------------------------------------------------------------------------
000113F2                            ; Object 5B - blocks that form a staircase (SLZ)
000113F2                            ; ---------------------------------------------------------------------------
000113F2                            
000113F2                            Obj5B:					; XREF: Obj_Index
000113F2 7000                       		moveq	#0,d0
000113F4 1028 0024                  		move.b	$24(a0),d0
000113F8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000113FC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011400 3028 0030                  		move.w	$30(a0),d0
00011404 0240 FF80                  		andi.w	#$FF80,d0
00011408 3238 F700                  		move.w	($FFFFF700).w,d1
0001140C 0441 0080                  		subi.w	#$80,d1
00011410 0241 FF80                  		andi.w	#$FF80,d1
00011414 9041                       		sub.w	d1,d0
00011416 0C40 0280                  		cmpi.w	#$280,d0
0001141A 6200 C79A                  		bhi.w	DeleteObject
0001141E 6000 C75A                  		bra.w	DisplaySprite
00011422                            ; ===========================================================================
00011422 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011424 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011426 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011428                            ; ===========================================================================
00011428                            
00011428                            Obj5B_Main:				; XREF: Obj5B_Index
00011428 5428 0024                  		addq.b	#2,$24(a0)
0001142C 7638                       		moveq	#$38,d3
0001142E 7801                       		moveq	#1,d4
00011430 0828 0000 0022             		btst	#0,$22(a0)
00011436 6700                       		beq.s	loc_10EDA
00011438 763B                       		moveq	#$3B,d3
0001143A 78FF                       		moveq	#-1,d4
0001143C                            
0001143C                            loc_10EDA:
0001143C 3428 0008                  		move.w	8(a0),d2
00011440 2248                       		movea.l	a0,a1
00011442 7203                       		moveq	#3,d1
00011444 6000                       		bra.s	Obj5B_MakeBlocks
00011446                            ; ===========================================================================
00011446                            
00011446                            Obj5B_Loop:
00011446 6100 CBCE                  		bsr.w	SingleObjLoad2
0001144A 6600 0000                  		bne.w	Obj5B_Move
0001144E 137C 0004 0024             		move.b	#4,$24(a1)
00011454                            
00011454                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011454 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011458 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011460 337C 4000 0002             		move.w	#$4000,2(a1)
00011466 137C 0004 0001             		move.b	#4,1(a1)
0001146C 137C 0003 0018             		move.b	#3,$18(a1)
00011472 137C 0010 0019             		move.b	#$10,$19(a1)
00011478 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001147E 3342 0008                  		move.w	d2,8(a1)
00011482 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011488 3368 0008 0030             		move.w	8(a0),$30(a1)
0001148E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011494 0642 0020                  		addi.w	#$20,d2
00011498 1343 0037                  		move.b	d3,$37(a1)
0001149C 2348 003C                  		move.l	a0,$3C(a1)
000114A0 D604                       		add.b	d4,d3
000114A2 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000114A6                            
000114A6                            Obj5B_Move:				; XREF: Obj5B_Index
000114A6 7000                       		moveq	#0,d0
000114A8 1028 0028                  		move.b	$28(a0),d0
000114AC 0240 0007                  		andi.w	#7,d0
000114B0 D040                       		add.w	d0,d0
000114B2 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114B6 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114BA                            
000114BA                            Obj5B_Solid:				; XREF: Obj5B_Index
000114BA 2468 003C                  		movea.l	$3C(a0),a2
000114BE 7000                       		moveq	#0,d0
000114C0 1028 0037                  		move.b	$37(a0),d0
000114C4 1032 0000                  		move.b	(a2,d0.w),d0
000114C8 D068 0032                  		add.w	$32(a0),d0
000114CC 3140 000C                  		move.w	d0,$C(a0)
000114D0 7200                       		moveq	#0,d1
000114D2 1228 0019                  		move.b	$19(a0),d1
000114D6 0641 000B                  		addi.w	#$B,d1
000114DA 343C 0010                  		move.w	#$10,d2
000114DE 363C 0011                  		move.w	#$11,d3
000114E2 3828 0008                  		move.w	8(a0),d4
000114E6 6100 EA62                  		bsr.w	SolidObject
000114EA 4A04                       		tst.b	d4
000114EC 6A00                       		bpl.s	loc_10F92
000114EE 1544 0036                  		move.b	d4,$36(a2)
000114F2                            
000114F2                            loc_10F92:
000114F2 0828 0003 0022             		btst	#3,$22(a0)
000114F8 6700                       		beq.s	locret_10FA0
000114FA 157C 0001 0036             		move.b	#1,$36(a2)
00011500                            
00011500                            locret_10FA0:
00011500 4E75                       		rts	
00011502                            ; ===========================================================================
00011502 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011504 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011506 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011508 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001150A                            ; ===========================================================================
0001150A                            
0001150A                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001150A 4A68 0034                  		tst.w	$34(a0)
0001150E 6600                       		bne.s	loc_10FC0
00011510 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011516 6600                       		bne.s	locret_10FBE
00011518 317C 001E 0034             		move.w	#$1E,$34(a0)
0001151E                            
0001151E                            locret_10FBE:
0001151E 4E75                       		rts	
00011520                            ; ===========================================================================
00011520                            
00011520                            loc_10FC0:
00011520 5368 0034                  		subq.w	#1,$34(a0)
00011524 66F8                       		bne.s	locret_10FBE
00011526 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001152A 4E75                       		rts	
0001152C                            ; ===========================================================================
0001152C                            
0001152C                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001152C 4A68 0034                  		tst.w	$34(a0)
00011530 6600                       		bne.s	loc_10FE0
00011532 4A28 0036                  		tst.b	$36(a0)
00011536 6A00                       		bpl.s	locret_10FDE
00011538 317C 003C 0034             		move.w	#$3C,$34(a0)
0001153E                            
0001153E                            locret_10FDE:
0001153E 4E75                       		rts	
00011540                            ; ===========================================================================
00011540                            
00011540                            loc_10FE0:
00011540 5368 0034                  		subq.w	#1,$34(a0)
00011544 6600                       		bne.s	loc_10FEC
00011546 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001154A 4E75                       		rts	
0001154C                            ; ===========================================================================
0001154C                            
0001154C                            loc_10FEC:
0001154C 43E8 0038                  		lea	$38(a0),a1
00011550 3028 0034                  		move.w	$34(a0),d0
00011554 E408                       		lsr.b	#2,d0
00011556 0200 0001                  		andi.b	#1,d0
0001155A 12C0                       		move.b	d0,(a1)+
0001155C 0A00 0001                  		eori.b	#1,d0
00011560 12C0                       		move.b	d0,(a1)+
00011562 0A00 0001                  		eori.b	#1,d0
00011566 12C0                       		move.b	d0,(a1)+
00011568 0A00 0001                  		eori.b	#1,d0
0001156C 12C0                       		move.b	d0,(a1)+
0001156E 4E75                       		rts	
00011570                            ; ===========================================================================
00011570                            
00011570                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011570 43E8 0038                  		lea	$38(a0),a1
00011574 0C11 0080                  		cmpi.b	#$80,(a1)
00011578 6700                       		beq.s	locret_11038
0001157A 5211                       		addq.b	#1,(a1)
0001157C 7200                       		moveq	#0,d1
0001157E 1219                       		move.b	(a1)+,d1
00011580 4841                       		swap	d1
00011582 E289                       		lsr.l	#1,d1
00011584 2401                       		move.l	d1,d2
00011586 E289                       		lsr.l	#1,d1
00011588 2601                       		move.l	d1,d3
0001158A D682                       		add.l	d2,d3
0001158C 4841                       		swap	d1
0001158E 4842                       		swap	d2
00011590 4843                       		swap	d3
00011592 12C3                       		move.b	d3,(a1)+
00011594 12C2                       		move.b	d2,(a1)+
00011596 12C1                       		move.b	d1,(a1)+
00011598                            
00011598                            locret_11038:
00011598 4E75                       		rts	
0001159A 4E75                       		rts	
0001159C                            ; ===========================================================================
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            Map_obj5B:
0001159C                            	include "_maps\obj5B.asm"
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C 0000                       		dc.w byte_1103E-Map_obj5B
0001159E 01                         byte_1103E:	dc.b 1
0001159F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000115A4                            		even
000115A4                            		even
000115A4                            
000115A4                            ; ===========================================================================
000115A4                            ; ---------------------------------------------------------------------------
000115A4                            ; Object 5C - metal girders in foreground (SLZ)
000115A4                            ; ---------------------------------------------------------------------------
000115A4                            
000115A4                            Obj5C:					; XREF: Obj_Index
000115A4 7000                       		moveq	#0,d0
000115A6 1028 0024                  		move.b	$24(a0),d0
000115AA 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115AE 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115B2                            ; ===========================================================================
000115B2 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115B4 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            Obj5C_Main:				; XREF: Obj5C_Index
000115B6 5428 0024                  		addq.b	#2,$24(a0)
000115BA 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115C2 317C 83CC 0002             		move.w	#$83CC,2(a0)
000115C8 117C 0010 0019             		move.b	#$10,$19(a0)
000115CE                            
000115CE                            Obj5C_Display:				; XREF: Obj5C_Index
000115CE 2238 F700                  		move.l	($FFFFF700).w,d1
000115D2 D281                       		add.l	d1,d1
000115D4 4841                       		swap	d1
000115D6 4441                       		neg.w	d1
000115D8 3141 0008                  		move.w	d1,8(a0)
000115DC 2238 F704                  		move.l	($FFFFF704).w,d1
000115E0 D281                       		add.l	d1,d1
000115E2 4841                       		swap	d1
000115E4 0241 003F                  		andi.w	#$3F,d1
000115E8 4441                       		neg.w	d1
000115EA 0641 0100                  		addi.w	#$100,d1
000115EE 3141 000A                  		move.w	d1,$A(a0)
000115F2 6000 C586                  		bra.w	DisplaySprite
000115F6                            ; ===========================================================================
000115F6                            ; ---------------------------------------------------------------------------
000115F6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115F6                            ; ---------------------------------------------------------------------------
000115F6                            Map_obj5C:
000115F6                            	include "_maps\obj5C.asm"
000115F6                            ; ---------------------------------------------------------------------------
000115F6                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115F6                            ; ---------------------------------------------------------------------------
000115F6 0000                       		dc.w byte_11098-Map_obj5C
000115F8 09                         byte_11098:	dc.b 9
000115F9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000115FE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011603 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011608 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001160D 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011612 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011617 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001161C 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011621 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011626                            		even
00011626                            		even
00011626                            
00011626                            ; ===========================================================================
00011626                            ; ---------------------------------------------------------------------------
00011626                            ; Object 1B - water surface (LZ)
00011626                            ; ---------------------------------------------------------------------------
00011626                            
00011626                            Obj1B:					; XREF: Obj_Index
00011626 7000                       		moveq	#0,d0
00011628 1028 0024                  		move.b	$24(a0),d0
0001162C 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011630 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011634                            ; ===========================================================================
00011634 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011636 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011638                            ; ===========================================================================
00011638                            
00011638                            Obj1B_Main:				; XREF: Obj1B_Index
00011638 5428 0024                  		addq.b	#2,$24(a0)
0001163C 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011644 317C C300 0002             		move.w	#$C300,2(a0)
0001164A 117C 0004 0001             		move.b	#4,1(a0)
00011650 117C 0080 0019             		move.b	#$80,$19(a0)
00011656 3168 0008 0030             		move.w	8(a0),$30(a0)
0001165C                            
0001165C                            Obj1B_Action:				; XREF: Obj1B_Index
0001165C 3238 F700                  		move.w	($FFFFF700).w,d1
00011660 0241 FFE0                  		andi.w	#$FFE0,d1
00011664 D268 0030                  		add.w	$30(a0),d1
00011668 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001166E 6700                       		beq.s	loc_11114
00011670 0641 0020                  		addi.w	#$20,d1
00011674                            
00011674                            loc_11114:
00011674 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011678 3238 F646                  		move.w	($FFFFF646).w,d1
0001167C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011680 4A28 0032                  		tst.b	$32(a0)
00011684 6600                       		bne.s	Obj1B_Animate
00011686 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001168C 6700                       		beq.s	loc_1114A	; if not, branch
0001168E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011692 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011698 6000                       		bra.s	Obj1B_Display
0001169A                            ; ===========================================================================
0001169A                            
0001169A                            Obj1B_Animate:				; XREF: loc_11114
0001169A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001169E 6600                       		bne.s	Obj1B_Display	; if yes, branch
000116A0 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000116A6 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116AA                            
000116AA                            loc_1114A:				; XREF: loc_11114
000116AA 5328 001E                  		subq.b	#1,$1E(a0)
000116AE 6A00                       		bpl.s	Obj1B_Display
000116B0 117C 0007 001E             		move.b	#7,$1E(a0)
000116B6 5228 001A                  		addq.b	#1,$1A(a0)
000116BA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116C0 6500                       		bcs.s	Obj1B_Display
000116C2 117C 0000 001A             		move.b	#0,$1A(a0)
000116C8                            
000116C8                            Obj1B_Display:
000116C8 6000 C4B0                  		bra.w	DisplaySprite
000116CC                            ; ===========================================================================
000116CC                            ; ---------------------------------------------------------------------------
000116CC                            ; Sprite mappings - water surface (LZ)
000116CC                            ; ---------------------------------------------------------------------------
000116CC                            Map_obj1B:
000116CC                            	include "_maps\obj1B.asm"
000116CC                            ; ---------------------------------------------------------------------------
000116CC                            ; Sprite mappings - water surface (LZ)
000116CC                            ; ---------------------------------------------------------------------------
000116CC 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000116D0 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000116D4 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000116D8 03                         byte_11178:	dc.b 3
000116D9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000116DE FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000116E3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000116E8 03                         byte_11188:	dc.b 3
000116E9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000116EE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000116F3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000116F8 03                         byte_11198:	dc.b 3
000116F9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000116FE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011703 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011708 06                         byte_111A8:	dc.b 6
00011709 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001170E FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011713 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011718 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001171D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011722 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011727 06                         byte_111C7:	dc.b 6
00011728 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001172D FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011732 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011737 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001173C FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011741 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011746 06                         byte_111E6:	dc.b 6
00011747 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001174C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011751 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011756 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001175B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011760 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011766 00                         		even
00011766 00                         		even
00011766                            
00011766                            ; ===========================================================================
00011766                            ; ---------------------------------------------------------------------------
00011766                            ; Object 0B - pole that	breaks (LZ)
00011766                            ; ---------------------------------------------------------------------------
00011766                            
00011766                            Obj0B:					; XREF: Obj_Index
00011766 7000                       		moveq	#0,d0
00011768 1028 0024                  		move.b	$24(a0),d0
0001176C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011770 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011774                            ; ===========================================================================
00011774 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011776 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011778 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001177A                            ; ===========================================================================
0001177A                            
0001177A                            Obj0B_Main:				; XREF: Obj0B_Index
0001177A 5428 0024                  		addq.b	#2,$24(a0)
0001177E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011786 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001178C 117C 0004 0001             		move.b	#4,1(a0)
00011792 117C 0008 0019             		move.b	#8,$19(a0)
00011798 117C 0004 0018             		move.b	#4,$18(a0)
0001179E 117C 00E1 0020             		move.b	#$E1,$20(a0)
000117A4 7000                       		moveq	#0,d0
000117A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000117AA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117AE 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117B2                            
000117B2                            Obj0B_Action:				; XREF: Obj0B_Index
000117B2 4A28 0032                  		tst.b	$32(a0)
000117B6 6700                       		beq.s	Obj0B_Grab
000117B8 4A68 0030                  		tst.w	$30(a0)
000117BC 6700                       		beq.s	Obj0B_MoveUp
000117BE 5368 0030                  		subq.w	#1,$30(a0)
000117C2 6600                       		bne.s	Obj0B_MoveUp
000117C4 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000117CA 6000                       		bra.s	Obj0B_Release
000117CC                            ; ===========================================================================
000117CC                            
000117CC                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000117CC 43F8 D000                  		lea	($FFFFD000).w,a1
000117D0 3028 000C                  		move.w	$C(a0),d0
000117D4 0440 0018                  		subi.w	#$18,d0
000117D8 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000117DE 6700                       		beq.s	Obj0B_MoveDown
000117E0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000117E4 B069 000C                  		cmp.w	$C(a1),d0
000117E8 6500                       		bcs.s	Obj0B_MoveDown
000117EA 3340 000C                  		move.w	d0,$C(a1)
000117EE                            
000117EE                            Obj0B_MoveDown:
000117EE 0640 0024                  		addi.w	#$24,d0
000117F2 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000117F8 6700                       		beq.s	Obj0B_LetGo
000117FA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000117FE B069 000C                  		cmp.w	$C(a1),d0
00011802 6400                       		bcc.s	Obj0B_LetGo
00011804 3340 000C                  		move.w	d0,$C(a1)
00011808                            
00011808                            Obj0B_LetGo:
00011808 1038 F603                  		move.b	($FFFFF603).w,d0
0001180C 0240 0070                  		andi.w	#$70,d0
00011810 6700                       		beq.s	Obj0B_Display
00011812                            
00011812                            Obj0B_Release:				; XREF: Obj0B_Action
00011812 4228 0020                  		clr.b	$20(a0)
00011816 5428 0024                  		addq.b	#2,$24(a0)
0001181A 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001181E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011822 4228 0032                  		clr.b	$32(a0)
00011826 6000                       		bra.s	Obj0B_Display
00011828                            ; ===========================================================================
00011828                            
00011828                            Obj0B_Grab:				; XREF: Obj0B_Action
00011828 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001182C 6700                       		beq.s	Obj0B_Display	; if not, branch
0001182E 43F8 D000                  		lea	($FFFFD000).w,a1
00011832 3028 0008                  		move.w	8(a0),d0
00011836 0640 0014                  		addi.w	#$14,d0
0001183A B069 0008                  		cmp.w	8(a1),d0
0001183E 6400                       		bcc.s	Obj0B_Display
00011840 4228 0021                  		clr.b	$21(a0)
00011844 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001184A 6400                       		bcc.s	Obj0B_Display
0001184C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011850 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011854 3028 0008                  		move.w	8(a0),d0
00011858 0640 0014                  		addi.w	#$14,d0
0001185C 3340 0008                  		move.w	d0,8(a1)
00011860 08A9 0000 0022             		bclr	#0,$22(a1)
00011866 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001186C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011872 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011878 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001187E                            
0001187E                            Obj0B_Display:				; XREF: Obj0B_Index
0001187E 6000 E3A2                  		bra.w	MarkObjGone
00011882                            ; ===========================================================================
00011882                            ; ---------------------------------------------------------------------------
00011882                            ; Sprite mappings - pole that breaks (LZ)
00011882                            ; ---------------------------------------------------------------------------
00011882                            Map_obj0B:
00011882                            	include "_maps\obj0B.asm"
00011882                            ; ---------------------------------------------------------------------------
00011882                            ; Sprite mappings - pole that breaks (LZ)
00011882                            ; ---------------------------------------------------------------------------
00011882 0000                       		dc.w byte_11326-Map_obj0B
00011884 0000                       		dc.w byte_11331-Map_obj0B
00011886 02                         byte_11326:	dc.b 2			; normal pole
00011887 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001188C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011891 04                         byte_11331:	dc.b 4			; broken pole
00011892 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011897 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001189C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000118A1 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000118A6                            		even
000118A6                            		even
000118A6                            
000118A6                            ; ===========================================================================
000118A6                            ; ---------------------------------------------------------------------------
000118A6                            ; Object 0C - flapping door (LZ)
000118A6                            ; ---------------------------------------------------------------------------
000118A6                            
000118A6                            Obj0C:					; XREF: Obj_Index
000118A6 7000                       		moveq	#0,d0
000118A8 1028 0024                  		move.b	$24(a0),d0
000118AC 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118B0 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118B4                            ; ===========================================================================
000118B4 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118B6 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118B8                            ; ===========================================================================
000118B8                            
000118B8                            Obj0C_Main:				; XREF: Obj0C_Index
000118B8 5428 0024                  		addq.b	#2,$24(a0)
000118BC 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118C4 317C 4328 0002             		move.w	#$4328,2(a0)
000118CA 0028 0004 0001             		ori.b	#4,1(a0)
000118D0 117C 0028 0019             		move.b	#$28,$19(a0)
000118D6 7000                       		moveq	#0,d0
000118D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000118DC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000118E0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000118E4                            
000118E4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000118E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000118E8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000118EA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000118F0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000118F6 4A28 0001                  		tst.b	1(a0)
000118FA 6A00                       		bpl.s	Obj0C_Solid
000118FC 303C 00BB                  		move.w	#$BB,d0
00011900 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00011906                            
00011906                            Obj0C_Solid:
00011906 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001190C 6100 933C                  		bsr.w	AnimateSprite
00011910 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011914 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011918 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001191A 3038 D008                  		move.w	($FFFFD008).w,d0
0001191E B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011922 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011924 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001192A 323C 0013                  		move.w	#$13,d1
0001192E 343C 0020                  		move.w	#$20,d2
00011932 3602                       		move.w	d2,d3
00011934 5243                       		addq.w	#1,d3
00011936 3828 0008                  		move.w	8(a0),d4
0001193A 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
0001193E                            
0001193E                            Obj0C_Display:
0001193E 6000 E2E2                  		bra.w	MarkObjGone
00011942                            ; ===========================================================================
00011942                            Ani_obj0C:
00011942                            	include "_anim\obj0C.asm"
00011942                            ; ---------------------------------------------------------------------------
00011942                            ; Animation script - flapping door (LZ)
00011942                            ; ---------------------------------------------------------------------------
00011942 0000                       		dc.w byte_113E6-Ani_obj0C
00011944 0000                       		dc.w byte_113EC-Ani_obj0C
00011946 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001194C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011952                            		even
00011952                            		even
00011952                            
00011952                            ; ---------------------------------------------------------------------------
00011952                            ; Sprite mappings - flapping door (LZ)
00011952                            ; ---------------------------------------------------------------------------
00011952                            Map_obj0C:
00011952                            	include "_maps\obj0C.asm"
00011952                            ; ---------------------------------------------------------------------------
00011952                            ; Sprite mappings - flapping door (LZ)
00011952                            ; ---------------------------------------------------------------------------
00011952 0000                       		dc.w byte_113F8-Map_obj0C
00011954 0000                       		dc.w byte_11403-Map_obj0C
00011956 0000                       		dc.w byte_1140E-Map_obj0C
00011958 02                         byte_113F8:	dc.b 2
00011959 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001195E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011963 02                         byte_11403:	dc.b 2
00011964 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011969 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001196E 02                         byte_1140E:	dc.b 2
0001196F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011974 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001197A 00                         		even
0001197A 00                         		even
0001197A                            
0001197A                            ; ===========================================================================
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            ; Object 71 - invisible	solid blocks
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            
0001197A                            Obj71:					; XREF: Obj_Index
0001197A 7000                       		moveq	#0,d0
0001197C 1028 0024                  		move.b	$24(a0),d0
00011980 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011984 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011988                            ; ===========================================================================
00011988 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001198A 0000                       		dc.w Obj71_Solid-Obj71_Index
0001198C                            ; ===========================================================================
0001198C                            
0001198C                            Obj71_Main:				; XREF: Obj71_Index
0001198C 5428 0024                  		addq.b	#2,$24(a0)
00011990 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011998 317C 8680 0002             		move.w	#$8680,2(a0)
0001199E 0028 0004 0001             		ori.b	#4,1(a0)
000119A4 1028 0028                  		move.b	$28(a0),d0	; get object type
000119A8 1200                       		move.b	d0,d1
000119AA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119AE 0640 0010                  		addi.w	#$10,d0
000119B2 E248                       		lsr.w	#1,d0
000119B4 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119B8 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119BC 5241                       		addq.w	#1,d1
000119BE E749                       		lsl.w	#3,d1
000119C0 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119C4                            
000119C4                            Obj71_Solid:				; XREF: Obj71_Index
000119C4 6100 C42E                  		bsr.w	ChkObjOnScreen
000119C8 6600                       		bne.s	Obj71_ChkDel
000119CA 7200                       		moveq	#0,d1
000119CC 1228 0019                  		move.b	$19(a0),d1
000119D0 0641 000B                  		addi.w	#$B,d1
000119D4 7400                       		moveq	#0,d2
000119D6 1428 0016                  		move.b	$16(a0),d2
000119DA 3602                       		move.w	d2,d3
000119DC 5243                       		addq.w	#1,d3
000119DE 3828 0008                  		move.w	8(a0),d4
000119E2 6100 E5A8                  		bsr.w	SolidObject71
000119E6                            
000119E6                            Obj71_ChkDel:
000119E6 3028 0008                  		move.w	8(a0),d0
000119EA 0240 FF80                  		andi.w	#$FF80,d0
000119EE 3238 F700                  		move.w	($FFFFF700).w,d1
000119F2 0441 0080                  		subi.w	#$80,d1
000119F6 0241 FF80                  		andi.w	#$FF80,d1
000119FA 9041                       		sub.w	d1,d0
000119FC 0C40 0280                  		cmpi.w	#$280,d0
00011A00 6200                       		bhi.s	Obj71_Delete
00011A02 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A06 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A08 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            Obj71_NoDisplay:
00011A0C 4E75                       		rts	
00011A0E                            ; ===========================================================================
00011A0E                            
00011A0E                            Obj71_Delete:
00011A0E 4EFA C1A6                  		jmp	DeleteObject
00011A12                            ; ===========================================================================
00011A12                            ; ---------------------------------------------------------------------------
00011A12                            ; Sprite mappings - invisible solid blocks
00011A12                            ; ---------------------------------------------------------------------------
00011A12                            Map_obj71:
00011A12                            	include "_maps\obj71.asm"
00011A12                            ; ---------------------------------------------------------------------------
00011A12                            ; Sprite mappings - invisible solid blocks
00011A12                            ; ---------------------------------------------------------------------------
00011A12 0000                       		dc.w byte_114BC-Map_obj71
00011A14 0000                       		dc.w byte_114D1-Map_obj71
00011A16 0000                       		dc.w byte_114E6-Map_obj71
00011A18 04                         byte_114BC:	dc.b 4
00011A19 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A1E F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A23 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A28 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A2D 04                         byte_114D1:	dc.b 4
00011A2E E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A33 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A38 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A3D 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A42 04                         byte_114E6:	dc.b 4
00011A43 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A48 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A4D 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A52 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A58 00                         		even
00011A58 00                         		even
00011A58                            
00011A58                            ; ===========================================================================
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            ; Object 5D - fans (SLZ)
00011A58                            ; ---------------------------------------------------------------------------
00011A58                            
00011A58                            Obj5D:					; XREF: Obj_Index
00011A58 7000                       		moveq	#0,d0
00011A5A 1028 0024                  		move.b	$24(a0),d0
00011A5E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A62 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A66                            ; ===========================================================================
00011A66 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A68 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A6A                            ; ===========================================================================
00011A6A                            
00011A6A                            Obj5D_Main:				; XREF: Obj5D_Index
00011A6A 5428 0024                  		addq.b	#2,$24(a0)
00011A6E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011A76 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011A7C 0028 0004 0001             		ori.b	#4,1(a0)
00011A82 117C 0010 0019             		move.b	#$10,$19(a0)
00011A88 117C 0004 0018             		move.b	#4,$18(a0)
00011A8E                            
00011A8E                            Obj5D_Delay:				; XREF: Obj5D_Index
00011A8E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011A94 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011A96 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A9A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011A9C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011AA2 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011AA8 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AAA 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011AB0                            
00011AB0                            Obj5D_Blow:
00011AB0 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011AB4 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011AB8 43F8 D000                  		lea	($FFFFD000).w,a1
00011ABC 3029 0008                  		move.w	8(a1),d0
00011AC0 9068 0008                  		sub.w	8(a0),d0
00011AC4 0828 0000 0022             		btst	#0,$22(a0)
00011ACA 6600                       		bne.s	Obj5D_ChkSonic
00011ACC 4440                       		neg.w	d0
00011ACE                            
00011ACE                            Obj5D_ChkSonic:
00011ACE 0640 0050                  		addi.w	#$50,d0
00011AD2 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011AD6 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011AD8 3229 000C                  		move.w	$C(a1),d1
00011ADC 0641 0060                  		addi.w	#$60,d1
00011AE0 9268 000C                  		sub.w	$C(a0),d1
00011AE4 6500                       		bcs.s	Obj5D_Animate
00011AE6 0C41 0070                  		cmpi.w	#$70,d1
00011AEA 6400                       		bcc.s	Obj5D_Animate
00011AEC 0440 0050                  		subi.w	#$50,d0
00011AF0 6400                       		bcc.s	loc_1159A
00011AF2 4640                       		not.w	d0
00011AF4 D040                       		add.w	d0,d0
00011AF6                            
00011AF6                            loc_1159A:
00011AF6 0640 0060                  		addi.w	#$60,d0
00011AFA 0828 0000 0022             		btst	#0,$22(a0)
00011B00 6600                       		bne.s	loc_115A8
00011B02 4440                       		neg.w	d0
00011B04                            
00011B04                            loc_115A8:
00011B04 4400                       		neg.b	d0
00011B06 E840                       		asr.w	#4,d0
00011B08 0828 0000 0028             		btst	#0,$28(a0)
00011B0E 6700                       		beq.s	Obj5D_MoveSonic
00011B10 4440                       		neg.w	d0
00011B12                            
00011B12                            Obj5D_MoveSonic:
00011B12 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B16                            
00011B16                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B16 5328 001E                  		subq.b	#1,$1E(a0)
00011B1A 6A00                       		bpl.s	Obj5D_ChkDel
00011B1C 117C 0000 001E             		move.b	#0,$1E(a0)
00011B22 5228 001B                  		addq.b	#1,$1B(a0)
00011B26 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B2C 6500                       		bcs.s	loc_115D8
00011B2E 117C 0000 001B             		move.b	#0,$1B(a0)
00011B34                            
00011B34                            loc_115D8:
00011B34 7000                       		moveq	#0,d0
00011B36 0828 0000 0028             		btst	#0,$28(a0)
00011B3C 6700                       		beq.s	loc_115E4
00011B3E 7002                       		moveq	#2,d0
00011B40                            
00011B40                            loc_115E4:
00011B40 D028 001B                  		add.b	$1B(a0),d0
00011B44 1140 001A                  		move.b	d0,$1A(a0)
00011B48                            
00011B48                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B48 6100 C030                  		bsr.w	DisplaySprite
00011B4C 3028 0008                  		move.w	8(a0),d0
00011B50 0240 FF80                  		andi.w	#$FF80,d0
00011B54 3238 F700                  		move.w	($FFFFF700).w,d1
00011B58 0441 0080                  		subi.w	#$80,d1
00011B5C 0241 FF80                  		andi.w	#$FF80,d1
00011B60 9041                       		sub.w	d1,d0
00011B62 0C40 0280                  		cmpi.w	#$280,d0
00011B66 6200 C04E                  		bhi.w	DeleteObject
00011B6A 4E75                       		rts	
00011B6C                            ; ===========================================================================
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            ; Sprite mappings - fans (SLZ)
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            Map_obj5D:
00011B6C                            	include "_maps\obj5D.asm"
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            ; Sprite mappings - fans (SLZ)
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B70 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011B74 0000                       		dc.w byte_1161A-Map_obj5D
00011B76 02                         byte_1161A:	dc.b 2
00011B77 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011B7C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011B81 02                         byte_11625:	dc.b 2
00011B82 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011B87 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011B8C 02                         byte_11630:	dc.b 2
00011B8D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011B92 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011B98 00                         		even
00011B98 00                         		even
00011B98                            
00011B98                            ; ===========================================================================
00011B98                            ; ---------------------------------------------------------------------------
00011B98                            ; Object 5E - seesaws (SLZ)
00011B98                            ; ---------------------------------------------------------------------------
00011B98                            
00011B98                            Obj5E:					; XREF: Obj_Index
00011B98 7000                       		moveq	#0,d0
00011B9A 1028 0024                  		move.b	$24(a0),d0
00011B9E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011BA2 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011BA6 3028 0030                  		move.w	$30(a0),d0
00011BAA 0240 FF80                  		andi.w	#$FF80,d0
00011BAE 3238 F700                  		move.w	($FFFFF700).w,d1
00011BB2 0441 0080                  		subi.w	#$80,d1
00011BB6 0241 FF80                  		andi.w	#$FF80,d1
00011BBA 9041                       		sub.w	d1,d0
00011BBC 6B00 BFF8                  		bmi.w	DeleteObject
00011BC0 0C40 0280                  		cmpi.w	#$280,d0
00011BC4 6200 BFF0                  		bhi.w	DeleteObject
00011BC8 6000 BFB0                  		bra.w	DisplaySprite
00011BCC                            ; ===========================================================================
00011BCC 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011BCE 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011BD0 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011BD2 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011BD4 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011BD6 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011BD8                            ; ===========================================================================
00011BD8                            
00011BD8                            Obj5E_Main:				; XREF: Obj5E_Index
00011BD8 5428 0024                  		addq.b	#2,$24(a0)
00011BDC 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011BE4 317C 0374 0002             		move.w	#$374,2(a0)
00011BEA 0028 0004 0001             		ori.b	#4,1(a0)
00011BF0 117C 0004 0018             		move.b	#4,$18(a0)
00011BF6 117C 0030 0019             		move.b	#$30,$19(a0)
00011BFC 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C02 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C06 6600                       		bne.s	loc_116D2	; if not, branch
00011C08 6100 C40C                  		bsr.w	SingleObjLoad2
00011C0C 6600                       		bne.s	loc_116D2
00011C0E 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C12 5C29 0024                  		addq.b	#6,$24(a1)
00011C16 3368 0008 0008             		move.w	8(a0),8(a1)
00011C1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C22 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C28 2348 003C                  		move.l	a0,$3C(a1)
00011C2C                            
00011C2C                            loc_116D2:
00011C2C 0828 0000 0022             		btst	#0,$22(a0)
00011C32 6700                       		beq.s	loc_116E0
00011C34 117C 0002 001A             		move.b	#2,$1A(a0)
00011C3A                            
00011C3A                            loc_116E0:
00011C3A 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C40                            
00011C40                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C40 1228 003A                  		move.b	$3A(a0),d1
00011C44 6100 0000                  		bsr.w	loc_11766
00011C48 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C4E 0828 0000 001A             		btst	#0,$1A(a0)
00011C54 6700                       		beq.s	loc_11702
00011C56 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C5C                            
00011C5C                            loc_11702:
00011C5C 43F8 D000                  		lea	($FFFFD000).w,a1
00011C60 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C66 323C 0030                  		move.w	#$30,d1
00011C6A 4EB9 0000 797A             		jsr	(SlopeObject).l
00011C70 4E75                       		rts	
00011C72                            ; ===========================================================================
00011C72                            
00011C72                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011C72 6100 0000                  		bsr.w	loc_1174A
00011C76 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C7C 0828 0000 001A             		btst	#0,$1A(a0)
00011C82 6700                       		beq.s	loc_11730
00011C84 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C8A                            
00011C8A                            loc_11730:
00011C8A 323C 0030                  		move.w	#$30,d1
00011C8E 4EB9 0000 7A1A             		jsr	(ExitPlatform).l
00011C94 323C 0030                  		move.w	#$30,d1
00011C98 3428 0008                  		move.w	8(a0),d2
00011C9C 4EB9 0000 8978             		jsr	SlopeObject2
00011CA2 4E75                       		rts	
00011CA4                            ; ===========================================================================
00011CA4                            
00011CA4                            loc_1174A:				; XREF: Obj5E_Slope2
00011CA4 7202                       		moveq	#2,d1
00011CA6 43F8 D000                  		lea	($FFFFD000).w,a1
00011CAA 3028 0008                  		move.w	8(a0),d0
00011CAE 9069 0008                  		sub.w	8(a1),d0
00011CB2 6400                       		bcc.s	loc_1175E
00011CB4 4440                       		neg.w	d0
00011CB6 7200                       		moveq	#0,d1
00011CB8                            
00011CB8                            loc_1175E:
00011CB8 0C40 0008                  		cmpi.w	#8,d0
00011CBC 6400                       		bcc.s	loc_11766
00011CBE 7201                       		moveq	#1,d1
00011CC0                            
00011CC0                            loc_11766:
00011CC0 1028 001A                  		move.b	$1A(a0),d0
00011CC4 B001                       		cmp.b	d1,d0
00011CC6 6700                       		beq.s	locret_11790
00011CC8 6400                       		bcc.s	loc_11772
00011CCA 5400                       		addq.b	#2,d0
00011CCC                            
00011CCC                            loc_11772:
00011CCC 5300                       		subq.b	#1,d0
00011CCE 1140 001A                  		move.b	d0,$1A(a0)
00011CD2 1141 003A                  		move.b	d1,$3A(a0)
00011CD6 08A8 0000 0001             		bclr	#0,1(a0)
00011CDC 0828 0001 001A             		btst	#1,$1A(a0)
00011CE2 6700                       		beq.s	locret_11790
00011CE4 08E8 0000 0001             		bset	#0,1(a0)
00011CEA                            
00011CEA                            locret_11790:
00011CEA 4E75                       		rts	
00011CEC                            ; ===========================================================================
00011CEC                            
00011CEC                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011CEC 5428 0024                  		addq.b	#2,$24(a0)
00011CF0 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011CF8 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011CFE 0028 0004 0001             		ori.b	#4,1(a0)
00011D04 117C 0004 0018             		move.b	#4,$18(a0)
00011D0A 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D10 117C 000C 0019             		move.b	#$C,$19(a0)
00011D16 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D1C 0668 0028 0008             		addi.w	#$28,8(a0)
00011D22 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D28 117C 0001 001A             		move.b	#1,$1A(a0)
00011D2E 0828 0000 0022             		btst	#0,$22(a0)
00011D34 6700                       		beq.s	Obj5E_MoveSpike
00011D36 0468 0050 0008             		subi.w	#$50,8(a0)
00011D3C 117C 0002 003A             		move.b	#2,$3A(a0)
00011D42                            
00011D42                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D42 2268 003C                  		movea.l	$3C(a0),a1
00011D46 7000                       		moveq	#0,d0
00011D48 1028 003A                  		move.b	$3A(a0),d0
00011D4C 9029 003A                  		sub.b	$3A(a1),d0
00011D50 6700                       		beq.s	loc_1183E
00011D52 6400                       		bcc.s	loc_117FC
00011D54 4400                       		neg.b	d0
00011D56                            
00011D56                            loc_117FC:
00011D56 323C F7E8                  		move.w	#-$818,d1
00011D5A 343C FEEC                  		move.w	#-$114,d2
00011D5E 0C00 0001                  		cmpi.b	#1,d0
00011D62 6700                       		beq.s	loc_11822
00011D64 323C F510                  		move.w	#-$AF0,d1
00011D68 343C FF34                  		move.w	#-$CC,d2
00011D6C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011D72 6D00                       		blt.s	loc_11822
00011D74 323C F200                  		move.w	#-$E00,d1
00011D78 343C FF60                  		move.w	#-$A0,d2
00011D7C                            
00011D7C                            loc_11822:
00011D7C 3141 0012                  		move.w	d1,$12(a0)
00011D80 3142 0010                  		move.w	d2,$10(a0)
00011D84 3028 0008                  		move.w	8(a0),d0
00011D88 9068 0030                  		sub.w	$30(a0),d0
00011D8C 6400                       		bcc.s	loc_11838
00011D8E 4468 0010                  		neg.w	$10(a0)
00011D92                            
00011D92                            loc_11838:
00011D92 5428 0024                  		addq.b	#2,$24(a0)
00011D96 6000                       		bra.s	Obj5E_SpikeFall
00011D98                            ; ===========================================================================
00011D98                            
00011D98                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011D98 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011D9E 7000                       		moveq	#0,d0
00011DA0 1029 001A                  		move.b	$1A(a1),d0
00011DA4 343C 0028                  		move.w	#$28,d2
00011DA8 3228 0008                  		move.w	8(a0),d1
00011DAC 9268 0030                  		sub.w	$30(a0),d1
00011DB0 6400                       		bcc.s	loc_1185C
00011DB2 4442                       		neg.w	d2
00011DB4 5440                       		addq.w	#2,d0
00011DB6                            
00011DB6                            loc_1185C:
00011DB6 D040                       		add.w	d0,d0
00011DB8 3228 0034                  		move.w	$34(a0),d1
00011DBC D272 0000                  		add.w	(a2,d0.w),d1
00011DC0 3141 000C                  		move.w	d1,$C(a0)
00011DC4 D468 0030                  		add.w	$30(a0),d2
00011DC8 3142 0008                  		move.w	d2,8(a0)
00011DCC 4268 000E                  		clr.w	$E(a0)
00011DD0 4268 000A                  		clr.w	$A(a0)
00011DD4 4E75                       		rts	
00011DD6                            ; ===========================================================================
00011DD6                            
00011DD6                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011DD6 4A68 0012                  		tst.w	$12(a0)
00011DDA 6A00                       		bpl.s	loc_1189A
00011DDC 6100 BD4A                  		bsr.w	ObjectFall
00011DE0 3028 0034                  		move.w	$34(a0),d0
00011DE4 0440 002F                  		subi.w	#$2F,d0
00011DE8 B068 000C                  		cmp.w	$C(a0),d0
00011DEC 6E00                       		bgt.s	locret_11898
00011DEE 6100 BD38                  		bsr.w	ObjectFall
00011DF2                            
00011DF2                            locret_11898:
00011DF2 4E75                       		rts	
00011DF4                            ; ===========================================================================
00011DF4                            
00011DF4                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011DF4 6100 BD32                  		bsr.w	ObjectFall
00011DF8 2268 003C                  		movea.l	$3C(a0),a1
00011DFC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E02 7000                       		moveq	#0,d0
00011E04 1029 001A                  		move.b	$1A(a1),d0
00011E08 3228 0008                  		move.w	8(a0),d1
00011E0C 9268 0030                  		sub.w	$30(a0),d1
00011E10 6400                       		bcc.s	loc_118BA
00011E12 5440                       		addq.w	#2,d0
00011E14                            
00011E14                            loc_118BA:
00011E14 D040                       		add.w	d0,d0
00011E16 3228 0034                  		move.w	$34(a0),d1
00011E1A D272 0000                  		add.w	(a2,d0.w),d1
00011E1E B268 000C                  		cmp.w	$C(a0),d1
00011E22 6E00                       		bgt.s	locret_11938
00011E24 2268 003C                  		movea.l	$3C(a0),a1
00011E28 7202                       		moveq	#2,d1
00011E2A 4A68 0010                  		tst.w	$10(a0)
00011E2E 6B00                       		bmi.s	Obj5E_Spring
00011E30 7200                       		moveq	#0,d1
00011E32                            
00011E32                            Obj5E_Spring:
00011E32 1341 003A                  		move.b	d1,$3A(a1)
00011E36 1141 003A                  		move.b	d1,$3A(a0)
00011E3A B229 001A                  		cmp.b	$1A(a1),d1
00011E3E 6700                       		beq.s	loc_1192C
00011E40 08A9 0003 0022             		bclr	#3,$22(a1)
00011E46 6700                       		beq.s	loc_1192C
00011E48 4229 0025                  		clr.b	$25(a1)
00011E4C 137C 0002 0024             		move.b	#2,$24(a1)
00011E52 45F8 D000                  		lea	($FFFFD000).w,a2
00011E56 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E5C 446A 0012                  		neg.w	$12(a2)
00011E60 08EA 0001 0022             		bset	#1,$22(a2)
00011E66 08AA 0003 0022             		bclr	#3,$22(a2)
00011E6C 422A 003C                  		clr.b	$3C(a2)
00011E70 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011E76 157C 0002 0024             		move.b	#2,$24(a2)
00011E7C 303C 00CC                  		move.w	#$CC,d0
00011E80 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011E86                            
00011E86                            loc_1192C:
00011E86 4268 0010                  		clr.w	$10(a0)
00011E8A 4268 0012                  		clr.w	$12(a0)
00011E8E 5528 0024                  		subq.b	#2,$24(a0)
00011E92                            
00011E92                            locret_11938:
00011E92 4E75                       		rts	
00011E94                            ; ===========================================================================
00011E94 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011E9E                            
00011E9E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011ECE                            		even
00011ECE                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011EFE                            		even
00011EFE                            ; ---------------------------------------------------------------------------
00011EFE                            ; Sprite mappings - seesaws (SLZ)
00011EFE                            ; ---------------------------------------------------------------------------
00011EFE                            Map_obj5E:
00011EFE                            	include "_maps\obj5E.asm"
00011EFE                            ; ---------------------------------------------------------------------------
00011EFE                            ; Sprite mappings - seesaws (SLZ)
00011EFE                            ; ---------------------------------------------------------------------------
00011EFE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F02 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F06 07                         byte_119AC:	dc.b 7
00011F07 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F0C DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F11 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F16 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F1B FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F20 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F25 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F2A 04                         byte_119D0:	dc.b 4
00011F2B E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F30 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F35 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F3A E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F40 00                         		even
00011F40 00                         		even
00011F40                            
00011F40                            ; ---------------------------------------------------------------------------
00011F40                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F40                            ; ---------------------------------------------------------------------------
00011F40                            Map_obj5Ea:
00011F40                            	include "_maps\obj5Eballs.asm"
00011F40                            ; ---------------------------------------------------------------------------
00011F40                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F40                            ; ---------------------------------------------------------------------------
00011F40 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F42 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F44 01                         byte_119EA:	dc.b 1
00011F45 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F4A 01                         byte_119F0:	dc.b 1
00011F4B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F50                            		even
00011F50                            		even
00011F50                            
00011F50                            ; ===========================================================================
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F50                            ; ---------------------------------------------------------------------------
00011F50                            
00011F50                            Obj5F:					; XREF: Obj_Index
00011F50 7000                       		moveq	#0,d0
00011F52 1028 0024                  		move.b	$24(a0),d0
00011F56 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F5A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F5E                            ; ===========================================================================
00011F5E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F60 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F62 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F64 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            Obj5F_Main:				; XREF: Obj5F_Index
00011F66 5428 0024                  		addq.b	#2,$24(a0)
00011F6A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011F72 317C 0400 0002             		move.w	#$400,2(a0)
00011F78 0028 0004 0001             		ori.b	#4,1(a0)
00011F7E 117C 0003 0018             		move.b	#3,$18(a0)
00011F84 117C 000C 0019             		move.b	#$C,$19(a0)
00011F8A 1028 0028                  		move.b	$28(a0),d0
00011F8E 6700                       		beq.s	loc_11A3C
00011F90 1140 0024                  		move.b	d0,$24(a0)
00011F94 4E75                       		rts	
00011F96                            ; ===========================================================================
00011F96                            
00011F96                            loc_11A3C:
00011F96 117C 009A 0020             		move.b	#$9A,$20(a0)
00011F9C 0868 0000 0022             		bchg	#0,$22(a0)
00011FA2                            
00011FA2                            Obj5F_Action:				; XREF: Obj5F_Index
00011FA2 7000                       		moveq	#0,d0
00011FA4 1028 0025                  		move.b	$25(a0),d0
00011FA8 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FAC 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FB0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FB6 6100 8C92                  		bsr.w	AnimateSprite
00011FBA 6000 DC66                  		bra.w	MarkObjGone
00011FBE                            ; ===========================================================================
00011FBE 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FC0 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FC2 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FC4                            ; ===========================================================================
00011FC4                            
00011FC4                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FC4 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FC8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FCC 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011FCE 5428 0025                  		addq.b	#2,$25(a0)
00011FD2 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011FD8 317C 0010 0010             		move.w	#$10,$10(a0)
00011FDE 117C 0001 001C             		move.b	#1,$1C(a0)
00011FE4 0868 0000 0022             		bchg	#0,$22(a0)
00011FEA 6700                       		beq.s	locret_11A96
00011FEC 4468 0010                  		neg.w	$10(a0)		; change direction
00011FF0                            
00011FF0                            locret_11A96:
00011FF0 4E75                       		rts	
00011FF2                            ; ===========================================================================
00011FF2                            
00011FF2                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011FF2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FF6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FFA 6B00                       		bmi.s	loc_11AA8
00011FFC 6100 BB56                  		bsr.w	SpeedToPos
00012000 4E75                       		rts	
00012002                            ; ===========================================================================
00012002                            
00012002                            loc_11AA8:
00012002 5528 0025                  		subq.b	#2,$25(a0)
00012006 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001200C 4268 0010                  		clr.w	$10(a0)		; stop walking
00012010 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012016 4E75                       		rts	
00012018                            ; ===========================================================================
00012018                            
00012018                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012018 5368 0030                  		subq.w	#1,$30(a0)
0001201C 6A00                       		bpl.s	locret_11AD0
0001201E 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012022 117C 0000 0024             		move.b	#0,$24(a0)
00012028                            
00012028                            locret_11AD0:
00012028 4E75                       		rts	
0001202A                            ; ===========================================================================
0001202A                            
0001202A                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001202A 3038 D008                  		move.w	($FFFFD008).w,d0
0001202E 9068 0008                  		sub.w	8(a0),d0
00012032 6400                       		bcc.s	loc_11ADE
00012034 4440                       		neg.w	d0
00012036                            
00012036                            loc_11ADE:
00012036 0C40 0060                  		cmpi.w	#$60,d0
0001203A 6400                       		bcc.s	locret_11B5E
0001203C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012040 9068 000C                  		sub.w	$C(a0),d0
00012044 6400                       		bcc.s	Obj5F_MakeFuse
00012046 4440                       		neg.w	d0
00012048                            
00012048                            Obj5F_MakeFuse:
00012048 0C40 0060                  		cmpi.w	#$60,d0
0001204C 6400                       		bcc.s	locret_11B5E
0001204E 4A78 FE08                  		tst.w	($FFFFFE08).w
00012052 6600                       		bne.s	locret_11B5E
00012054 117C 0004 0025             		move.b	#4,$25(a0)
0001205A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012060 4268 0010                  		clr.w	$10(a0)
00012064 117C 0002 001C             		move.b	#2,$1C(a0)
0001206A 6100 BFAA                  		bsr.w	SingleObjLoad2
0001206E 6600                       		bne.s	locret_11B5E
00012070 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012074 3368 0008 0008             		move.w	8(a0),8(a1)
0001207A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012080 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012086 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001208C 137C 0004 0028             		move.b	#4,$28(a1)
00012092 137C 0003 001C             		move.b	#3,$1C(a1)
00012098 337C 0010 0012             		move.w	#$10,$12(a1)
0001209E 0828 0001 0022             		btst	#1,$22(a0)
000120A4 6700                       		beq.s	loc_11B54
000120A6 4469 0012                  		neg.w	$12(a1)
000120AA                            
000120AA                            loc_11B54:
000120AA 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120B0 2348 003C                  		move.l	a0,$3C(a1)
000120B4                            
000120B4                            locret_11B5E:
000120B4 4E75                       		rts	
000120B6                            ; ===========================================================================
000120B6                            
000120B6                            Obj5F_Display:				; XREF: Obj5F_Index
000120B6 6100                       		bsr.s	loc_11B70
000120B8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120BE 6100 8B8A                  		bsr.w	AnimateSprite
000120C2 6000 DB5E                  		bra.w	MarkObjGone
000120C6                            ; ===========================================================================
000120C6                            
000120C6                            loc_11B70:
000120C6 5368 0030                  		subq.w	#1,$30(a0)
000120CA 6B00                       		bmi.s	loc_11B7C
000120CC 6100 BA86                  		bsr.w	SpeedToPos
000120D0 4E75                       		rts	
000120D2                            ; ===========================================================================
000120D2                            
000120D2                            loc_11B7C:
000120D2 4268 0030                  		clr.w	$30(a0)
000120D6 4228 0024                  		clr.b	$24(a0)
000120DA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000120E0 7203                       		moveq	#3,d1
000120E2 2248                       		movea.l	a0,a1
000120E4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000120EA 6000                       		bra.s	Obj5F_MakeShrap
000120EC                            ; ===========================================================================
000120EC                            
000120EC                            Obj5F_Loop:
000120EC 6100 BF28                  		bsr.w	SingleObjLoad2
000120F0 6600                       		bne.s	loc_11BCE
000120F2                            
000120F2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000120F2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000120F6 3368 0008 0008             		move.w	8(a0),8(a1)
000120FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012102 137C 0006 0028             		move.b	#6,$28(a1)
00012108 137C 0004 001C             		move.b	#4,$1C(a1)
0001210E 335A 0010                  		move.w	(a2)+,$10(a1)
00012112 335A 0012                  		move.w	(a2)+,$12(a1)
00012116 137C 0098 0020             		move.b	#$98,$20(a1)
0001211C 08E9 0007 0001             		bset	#7,1(a1)
00012122                            
00012122                            loc_11BCE:
00012122 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012126                            
00012126 117C 0006 0024             		move.b	#6,$24(a0)
0001212C                            
0001212C                            Obj5F_End:				; XREF: Obj5F_Index
0001212C 6100 BA26                  		bsr.w	SpeedToPos
00012130 0668 0018 0012             		addi.w	#$18,$12(a0)
00012136 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001213C 6100 8B0C                  		bsr.w	AnimateSprite
00012140 4A28 0001                  		tst.b	1(a0)
00012144 6A00 BA70                  		bpl.w	DeleteObject
00012148 6000 BA30                  		bra.w	DisplaySprite
0001214C                            ; ===========================================================================
0001214C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001215C                            
0001215C                            Ani_obj5F:
0001215C                            	include "_anim\obj5F.asm"
0001215C                            ; ---------------------------------------------------------------------------
0001215C                            ; Animation script - Bomb enemy
0001215C                            ; ---------------------------------------------------------------------------
0001215C 0000                       		dc.w byte_11C12-Ani_obj5F
0001215E 0000                       		dc.w byte_11C16-Ani_obj5F
00012160 0000                       		dc.w byte_11C1C-Ani_obj5F
00012162 0000                       		dc.w byte_11C20-Ani_obj5F
00012164 0000                       		dc.w byte_11C24-Ani_obj5F
00012166 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001216A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012170 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012174 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012178 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001217C                            		even
0001217C                            		even
0001217C                            
0001217C                            ; ---------------------------------------------------------------------------
0001217C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001217C                            ; ---------------------------------------------------------------------------
0001217C                            Map_obj5F:
0001217C                            	include "_maps\obj5F.asm"
0001217C                            ; ---------------------------------------------------------------------------
0001217C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001217C                            ; ---------------------------------------------------------------------------
0001217C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012180 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012184 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012188 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001218C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012190 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012194 03                         byte_11C40:	dc.b 3
00012195 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001219A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001219F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121A4 03                         byte_11C50:	dc.b 3
000121A5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121AA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121AF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121B4 03                         byte_11C60:	dc.b 3
000121B5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121BA 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121BF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121C4 03                         byte_11C70:	dc.b 3
000121C5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121CA 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000121CF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121D4 03                         byte_11C80:	dc.b 3
000121D5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121DA 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000121DF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121E4 03                         byte_11C90:	dc.b 3
000121E5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121EA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000121EF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121F4 02                         byte_11CA0:	dc.b 2
000121F5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121FA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121FF 02                         byte_11CAB:	dc.b 2
00012200 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012205 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001220A 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001220B E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012210 01                         byte_11CBC:	dc.b 1			; fuse
00012211 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012216 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012217 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001221C 01                         byte_11CC8:	dc.b 1			; fireball
0001221D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012222                            		even
00012222                            		even
00012222                            
00012222                            ; ===========================================================================
00012222                            ; ---------------------------------------------------------------------------
00012222                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012222                            ; ---------------------------------------------------------------------------
00012222                            
00012222                            Obj60:					; XREF: Obj_Index
00012222 7000                       		moveq	#0,d0
00012224 1028 0024                  		move.b	$24(a0),d0
00012228 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001222C 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012230                            ; ===========================================================================
00012230 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012232 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012234 0000                       		dc.w Obj60_Display-Obj60_Index
00012236 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012238 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001223A                            ; ===========================================================================
0001223A                            
0001223A                            Obj60_Main:				; XREF: Obj60_Index
0001223A 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012242 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012248 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001224E 6700                       		beq.s	loc_11D02
00012250 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012256                            
00012256                            loc_11D02:
00012256 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001225C 6600                       		bne.s	loc_11D10
0001225E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012264                            
00012264                            loc_11D10:
00012264 0028 0004 0001             		ori.b	#4,1(a0)
0001226A 117C 0004 0018             		move.b	#4,$18(a0)
00012270 117C 000B 0020             		move.b	#$B,$20(a0)
00012276 117C 000C 0019             		move.b	#$C,$19(a0)
0001227C 7400                       		moveq	#0,d2
0001227E 45E8 0037                  		lea	$37(a0),a2
00012282 264A                       		movea.l	a2,a3
00012284 524A                       		addq.w	#1,a2
00012286 7203                       		moveq	#3,d1
00012288                            
00012288                            Obj60_MakeOrbs:
00012288 6100 BD8C                  		bsr.w	SingleObjLoad2
0001228C 6600                       		bne.s	loc_11D90
0001228E 5213                       		addq.b	#1,(a3)
00012290 3A09                       		move.w	a1,d5
00012292 0445 D000                  		subi.w	#-$3000,d5
00012296 EC4D                       		lsr.w	#6,d5
00012298 0245 007F                  		andi.w	#$7F,d5
0001229C 14C5                       		move.b	d5,(a2)+
0001229E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000122A0 137C 0006 0024             		move.b	#6,$24(a1)
000122A6 2368 0004 0004             		move.l	4(a0),4(a1)
000122AC 3368 0002 0002             		move.w	2(a0),2(a1)
000122B2 0029 0004 0001             		ori.b	#4,1(a1)
000122B8 137C 0004 0018             		move.b	#4,$18(a1)
000122BE 137C 0008 0019             		move.b	#8,$19(a1)
000122C4 137C 0003 001A             		move.b	#3,$1A(a1)
000122CA 137C 0098 0020             		move.b	#$98,$20(a1)
000122D0 1342 0026                  		move.b	d2,$26(a1)
000122D4 0602 0040                  		addi.b	#$40,d2
000122D8 2348 003C                  		move.l	a0,$3C(a1)
000122DC 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000122E0                            
000122E0                            loc_11D90:
000122E0 7001                       		moveq	#1,d0
000122E2 0828 0000 0022             		btst	#0,$22(a0)
000122E8 6700                       		beq.s	Obj60_Move
000122EA 4440                       		neg.w	d0
000122EC                            
000122EC                            Obj60_Move:
000122EC 1140 0036                  		move.b	d0,$36(a0)
000122F0 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000122F6 5428 0024                  		addq.b	#2,$24(a0)
000122FA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012300 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012306 6700                       		beq.s	locret_11DBC	; if not, branch
00012308 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001230C                            
0001230C                            locret_11DBC:
0001230C 4E75                       		rts	
0001230E                            ; ===========================================================================
0001230E                            
0001230E                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001230E 3038 D008                  		move.w	($FFFFD008).w,d0
00012312 9068 0008                  		sub.w	8(a0),d0
00012316 6400                       		bcc.s	loc_11DCA
00012318 4440                       		neg.w	d0
0001231A                            
0001231A                            loc_11DCA:
0001231A 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001231E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012320 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012324 9068 000C                  		sub.w	$C(a0),d0
00012328 6400                       		bcc.s	loc_11DDC
0001232A 4440                       		neg.w	d0
0001232C                            
0001232C                            loc_11DDC:
0001232C 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012330 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012332 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012336 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012338 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001233E                            
0001233E                            Obj60_Animate:
0001233E 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012344 6100 8904                  		bsr.w	AnimateSprite
00012348 6000 0000                  		bra.w	Obj60_ChkDel
0001234C                            ; ===========================================================================
0001234C                            
0001234C                            Obj60_Display:				; XREF: Obj60_Index
0001234C 6100 B806                  		bsr.w	SpeedToPos
00012350                            
00012350                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012350 3028 0008                  		move.w	8(a0),d0
00012354 0240 FF80                  		andi.w	#$FF80,d0
00012358 3238 F700                  		move.w	($FFFFF700).w,d1
0001235C 0441 0080                  		subi.w	#$80,d1
00012360 0241 FF80                  		andi.w	#$FF80,d1
00012364 9041                       		sub.w	d1,d0
00012366 0C40 0280                  		cmpi.w	#$280,d0
0001236A 6200 0000                  		bhi.w	Obj60_ChkGone
0001236E 6000 B80A                  		bra.w	DisplaySprite
00012372                            ; ===========================================================================
00012372                            
00012372                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012372 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012376 7000                       		moveq	#0,d0
00012378 1028 0023                  		move.b	$23(a0),d0
0001237C 6700                       		beq.s	loc_11E34
0001237E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012384                            
00012384                            loc_11E34:
00012384 45E8 0037                  		lea	$37(a0),a2
00012388 7400                       		moveq	#0,d2
0001238A 141A                       		move.b	(a2)+,d2
0001238C 5342                       		subq.w	#1,d2
0001238E 6500                       		bcs.s	Obj60_Delete
00012390                            
00012390                            loc_11E40:
00012390 7000                       		moveq	#0,d0
00012392 101A                       		move.b	(a2)+,d0
00012394 ED48                       		lsl.w	#6,d0
00012396 0680 00FF D000             		addi.l	#$FFD000,d0
0001239C 2240                       		movea.l	d0,a1
0001239E 6100 B818                  		bsr.w	DeleteObject2
000123A2 51CA FFEC                  		dbf	d2,loc_11E40
000123A6                            
000123A6                            Obj60_Delete:
000123A6 6000 B80E                  		bra.w	DeleteObject
000123AA                            ; ===========================================================================
000123AA                            
000123AA                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123AA 2268 003C                  		movea.l	$3C(a0),a1
000123AE 0C11 0060                  		cmpi.b	#$60,0(a1)
000123B2 6600 B802                  		bne.w	DeleteObject
000123B6 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123BC 6600                       		bne.s	Obj60_Circle
000123BE 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123C4 6600                       		bne.s	Obj60_Circle
000123C6 5428 0024                  		addq.b	#2,$24(a0)
000123CA 5329 0037                  		subq.b	#1,$37(a1)
000123CE 6600                       		bne.s	Obj60_FireOrb
000123D0 5429 0024                  		addq.b	#2,$24(a1)
000123D4                            
000123D4                            Obj60_FireOrb:
000123D4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000123DA 0829 0000 0022             		btst	#0,$22(a1)
000123E0 6700                       		beq.s	Obj60_Display2
000123E2 4468 0010                  		neg.w	$10(a0)
000123E6                            
000123E6                            Obj60_Display2:
000123E6 6000 B792                  		bra.w	DisplaySprite
000123EA                            ; ===========================================================================
000123EA                            
000123EA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000123EA 1028 0026                  		move.b	$26(a0),d0
000123EE 4EB9 0000 2C22             		jsr	(CalcSine).l
000123F4 E841                       		asr.w	#4,d1
000123F6 D269 0008                  		add.w	8(a1),d1
000123FA 3141 0008                  		move.w	d1,8(a0)
000123FE E840                       		asr.w	#4,d0
00012400 D069 000C                  		add.w	$C(a1),d0
00012404 3140 000C                  		move.w	d0,$C(a0)
00012408 1029 0036                  		move.b	$36(a1),d0
0001240C D128 0026                  		add.b	d0,$26(a0)
00012410 6000 B768                  		bra.w	DisplaySprite
00012414                            ; ===========================================================================
00012414                            
00012414                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012414 6100 B73E                  		bsr.w	SpeedToPos
00012418 4A28 0001                  		tst.b	1(a0)
0001241C 6A00 B798                  		bpl.w	DeleteObject
00012420 6000 B758                  		bra.w	DisplaySprite
00012424                            ; ===========================================================================
00012424                            Ani_obj60:
00012424                            	include "_anim\obj60.asm"
00012424                            ; ---------------------------------------------------------------------------
00012424                            ; Animation script - Orbinaut enemy
00012424                            ; ---------------------------------------------------------------------------
00012424 0000                       		dc.w byte_11EDA-Ani_obj60
00012426 0000                       		dc.w byte_11EDE-Ani_obj60
00012428 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001242C 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012432                            		even
00012432                            		even
00012432                            
00012432                            ; ---------------------------------------------------------------------------
00012432                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012432                            ; ---------------------------------------------------------------------------
00012432                            Map_obj60:
00012432                            	include "_maps\obj60.asm"
00012432                            ; ---------------------------------------------------------------------------
00012432                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012432                            ; ---------------------------------------------------------------------------
00012432 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012436 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001243A 01                         byte_11EEC:	dc.b 1
0001243B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012440 01                         byte_11EF2:	dc.b 1
00012441 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012446 01                         byte_11EF8:	dc.b 1
00012447 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001244C 01                         byte_11EFE:	dc.b 1
0001244D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012452                            		even
00012452                            		even
00012452                            
00012452                            ; ===========================================================================
00012452                            ; ---------------------------------------------------------------------------
00012452                            ; Object 16 - harpoon (LZ)
00012452                            ; ---------------------------------------------------------------------------
00012452                            
00012452                            Obj16:					; XREF: Obj_Index
00012452 7000                       		moveq	#0,d0
00012454 1028 0024                  		move.b	$24(a0),d0
00012458 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001245C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012460                            ; ===========================================================================
00012460 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012462 0000                       		dc.w Obj16_Move-Obj16_Index
00012464 0000                       		dc.w Obj16_Wait-Obj16_Index
00012466                            ; ===========================================================================
00012466                            
00012466                            Obj16_Main:				; XREF: Obj16_Index
00012466 5428 0024                  		addq.b	#2,$24(a0)
0001246A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012472 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012478 0028 0004 0001             		ori.b	#4,1(a0)
0001247E 117C 0004 0018             		move.b	#4,$18(a0)
00012484 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001248A 117C 0014 0019             		move.b	#$14,$19(a0)
00012490 317C 003C 0030             		move.w	#60,$30(a0)
00012496                            
00012496                            Obj16_Move:				; XREF: Obj16_Index
00012496 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001249C 6100 87AC                  		bsr.w	AnimateSprite
000124A0 7000                       		moveq	#0,d0
000124A2 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000124A6 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124AC 6000 D774                  		bra.w	MarkObjGone
000124B0                            ; ===========================================================================
000124B0 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124B6                            ; ===========================================================================
000124B6                            
000124B6                            Obj16_Wait:				; XREF: Obj16_Index
000124B6 5368 0030                  		subq.w	#1,$30(a0)
000124BA 6A00                       		bpl.s	Obj16_ChkDel
000124BC 317C 003C 0030             		move.w	#60,$30(a0)
000124C2 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000124C6 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000124CC                            
000124CC                            Obj16_ChkDel:
000124CC 6000 D754                  		bra.w	MarkObjGone
000124D0                            ; ===========================================================================
000124D0                            Ani_obj16:
000124D0                            	include "_anim\obj16.asm"
000124D0                            ; ---------------------------------------------------------------------------
000124D0                            ; Animation script - harpoon (LZ)
000124D0                            ; ---------------------------------------------------------------------------
000124D0 0000                       		dc.w byte_11F8A-Ani_obj16
000124D2 0000                       		dc.w byte_11F8E-Ani_obj16
000124D4 0000                       		dc.w byte_11F92-Ani_obj16
000124D6 0000                       		dc.w byte_11F96-Ani_obj16
000124D8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000124DC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000124E0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000124E4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000124E8                            		even
000124E8                            		even
000124E8                            
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            ; Sprite mappings - harpoon (LZ)
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            Map_obj16:
000124E8                            	include "_maps\obj16.asm"
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            ; Sprite mappings - harpoon (LZ)
000124E8                            ; ---------------------------------------------------------------------------
000124E8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000124EC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000124F0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000124F4 01                         byte_11FA6:	dc.b 1
000124F5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000124FA 01                         byte_11FAC:	dc.b 1
000124FB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012500 02                         byte_11FB2:	dc.b 2
00012501 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012506 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001250B 01                         byte_11FBD:	dc.b 1
0001250C F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012511 01                         byte_11FC3:	dc.b 1
00012512 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012517 02                         byte_11FC9:	dc.b 2
00012518 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001251D F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012522                            		even
00012522                            		even
00012522                            
00012522                            ; ===========================================================================
00012522                            ; ---------------------------------------------------------------------------
00012522                            ; Object 61 - blocks (LZ)
00012522                            ; ---------------------------------------------------------------------------
00012522                            
00012522                            Obj61:					; XREF: Obj_Index
00012522 7000                       		moveq	#0,d0
00012524 1028 0024                  		move.b	$24(a0),d0
00012528 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001252C 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012530                            ; ===========================================================================
00012530 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012532 0000                       		dc.w Obj61_Action-Obj61_Index
00012534                            
00012534 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012536 200C                       		dc.b $20, $C
00012538 1010                       		dc.b $10, $10
0001253A 1010                       		dc.b $10, $10
0001253C                            ; ===========================================================================
0001253C                            
0001253C                            Obj61_Main:				; XREF: Obj61_Index
0001253C 5428 0024                  		addq.b	#2,$24(a0)
00012540 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012548 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001254E 117C 0004 0001             		move.b	#4,1(a0)
00012554 117C 0003 0018             		move.b	#3,$18(a0)
0001255A 7000                       		moveq	#0,d0
0001255C 1028 0028                  		move.b	$28(a0),d0
00012560 E648                       		lsr.w	#3,d0
00012562 0240 000E                  		andi.w	#$E,d0
00012566 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001256A 115A 0019                  		move.b	(a2)+,$19(a0)
0001256E 1152 0016                  		move.b	(a2),$16(a0)
00012572 E248                       		lsr.w	#1,d0
00012574 1140 001A                  		move.b	d0,$1A(a0)
00012578 3168 0008 0034             		move.w	8(a0),$34(a0)
0001257E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012584 1028 0028                  		move.b	$28(a0),d0
00012588 0200 000F                  		andi.b	#$F,d0
0001258C 6700                       		beq.s	Obj61_Action
0001258E 0C00 0007                  		cmpi.b	#7,d0
00012592 6700                       		beq.s	Obj61_Action
00012594 117C 0001 0038             		move.b	#1,$38(a0)
0001259A                            
0001259A                            Obj61_Action:				; XREF: Obj61_Index
0001259A 3F28 0008                  		move.w	8(a0),-(sp)
0001259E 7000                       		moveq	#0,d0
000125A0 1028 0028                  		move.b	$28(a0),d0
000125A4 0240 000F                  		andi.w	#$F,d0
000125A8 D040                       		add.w	d0,d0
000125AA 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125AE 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125B2 381F                       		move.w	(sp)+,d4
000125B4 4A28 0001                  		tst.b	1(a0)
000125B8 6A00                       		bpl.s	Obj61_ChkDel
000125BA 7200                       		moveq	#0,d1
000125BC 1228 0019                  		move.b	$19(a0),d1
000125C0 0641 000B                  		addi.w	#$B,d1
000125C4 7400                       		moveq	#0,d2
000125C6 1428 0016                  		move.b	$16(a0),d2
000125CA 3602                       		move.w	d2,d3
000125CC 5243                       		addq.w	#1,d3
000125CE 6100 D97A                  		bsr.w	SolidObject
000125D2 1144 003F                  		move.b	d4,$3F(a0)
000125D6 6100 0000                  		bsr.w	loc_12180
000125DA                            
000125DA                            Obj61_ChkDel:
000125DA 3028 0034                  		move.w	$34(a0),d0
000125DE 0240 FF80                  		andi.w	#$FF80,d0
000125E2 3238 F700                  		move.w	($FFFFF700).w,d1
000125E6 0441 0080                  		subi.w	#$80,d1
000125EA 0241 FF80                  		andi.w	#$FF80,d1
000125EE 9041                       		sub.w	d1,d0
000125F0 0C40 0280                  		cmpi.w	#$280,d0
000125F4 6200 B5C0                  		bhi.w	DeleteObject
000125F8 6000 B580                  		bra.w	DisplaySprite
000125FC                            ; ===========================================================================
000125FC 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012600 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012604 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012608 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001260C                            ; ===========================================================================
0001260C                            
0001260C                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001260C 4E75                       		rts	
0001260E                            ; ===========================================================================
0001260E                            
0001260E                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001260E 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012612 6600                       		bne.s	loc_120D6	; if yes, branch
00012614 0828 0003 0022             		btst	#3,$22(a0)
0001261A 6700                       		beq.s	locret_120D4
0001261C 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012622                            
00012622                            locret_120D4:
00012622 4E75                       		rts	
00012624                            ; ===========================================================================
00012624                            
00012624                            loc_120D6:
00012624 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012628 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001262A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001262E 4228 0038                  		clr.b	$38(a0)
00012632 4E75                       		rts	
00012634                            ; ===========================================================================
00012634                            
00012634                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012634 6100 B51E                  		bsr.w	SpeedToPos
00012638 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001263C 6100 0000                  		bsr.w	ObjHitFloor
00012640 4A41                       		tst.w	d1
00012642 6A00 0000                  		bpl.w	locret_12106
00012646 5241                       		addq.w	#1,d1
00012648 D368 000C                  		add.w	d1,$C(a0)
0001264C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012650 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012654                            
00012654                            locret_12106:
00012654 4E75                       		rts	
00012656                            ; ===========================================================================
00012656                            
00012656                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012656 6100 B4FC                  		bsr.w	SpeedToPos
0001265A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001265E 6100 0000                  		bsr.w	ObjHitCeiling
00012662 4A41                       		tst.w	d1
00012664 6A00 0000                  		bpl.w	locret_12126
00012668 9368 000C                  		sub.w	d1,$C(a0)
0001266C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012670 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012674                            
00012674                            locret_12126:
00012674 4E75                       		rts	
00012676                            ; ===========================================================================
00012676                            
00012676                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012676 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001267C 6600                       		bne.s	locret_12138	; if not, branch
0001267E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012682 4228 0038                  		clr.b	$38(a0)
00012686                            
00012686                            locret_12138:
00012686 4E75                       		rts	
00012688                            ; ===========================================================================
00012688                            
00012688                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012688 3038 F646                  		move.w	($FFFFF646).w,d0
0001268C 9068 000C                  		sub.w	$C(a0),d0
00012690 6700                       		beq.s	locret_1217E
00012692 6400                       		bcc.s	loc_12162
00012694 0C40 FFFE                  		cmpi.w	#-2,d0
00012698 6C00                       		bge.s	loc_1214E
0001269A 70FE                       		moveq	#-2,d0
0001269C                            
0001269C                            loc_1214E:
0001269C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000126A0 6100 0000                  		bsr.w	ObjHitCeiling
000126A4 4A41                       		tst.w	d1
000126A6 6A00 0000                  		bpl.w	locret_12160
000126AA 9368 000C                  		sub.w	d1,$C(a0)
000126AE                            
000126AE                            locret_12160:
000126AE 4E75                       		rts	
000126B0                            ; ===========================================================================
000126B0                            
000126B0                            loc_12162:				; XREF: Obj61_Type07
000126B0 0C40 0002                  		cmpi.w	#2,d0
000126B4 6F00                       		ble.s	loc_1216A
000126B6 7002                       		moveq	#2,d0
000126B8                            
000126B8                            loc_1216A:
000126B8 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126BC 6100 0000                  		bsr.w	ObjHitFloor
000126C0 4A41                       		tst.w	d1
000126C2 6A00 0000                  		bpl.w	locret_1217E
000126C6 5241                       		addq.w	#1,d1
000126C8 D368 000C                  		add.w	d1,$C(a0)
000126CC                            
000126CC                            locret_1217E:
000126CC 4E75                       		rts	
000126CE                            ; ===========================================================================
000126CE                            
000126CE                            loc_12180:				; XREF: Obj61_Action
000126CE 4A28 0038                  		tst.b	$38(a0)
000126D2 6700                       		beq.s	locret_121C0
000126D4 0828 0003 0022             		btst	#3,$22(a0)
000126DA 6600                       		bne.s	loc_1219A
000126DC 4A28 003E                  		tst.b	$3E(a0)
000126E0 6700                       		beq.s	locret_121C0
000126E2 5928 003E                  		subq.b	#4,$3E(a0)
000126E6 6000                       		bra.s	loc_121A6
000126E8                            ; ===========================================================================
000126E8                            
000126E8                            loc_1219A:
000126E8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000126EE 6700                       		beq.s	locret_121C0
000126F0 5828 003E                  		addq.b	#4,$3E(a0)
000126F4                            
000126F4                            loc_121A6:
000126F4 1028 003E                  		move.b	$3E(a0),d0
000126F8 4EB9 0000 2C22             		jsr	(CalcSine).l
000126FE 323C 0400                  		move.w	#$400,d1
00012702 C1C1                       		muls.w	d1,d0
00012704 4840                       		swap	d0
00012706 D068 0030                  		add.w	$30(a0),d0
0001270A 3140 000C                  		move.w	d0,$C(a0)
0001270E                            
0001270E                            locret_121C0:
0001270E 4E75                       		rts	
00012710                            ; ===========================================================================
00012710                            ; ---------------------------------------------------------------------------
00012710                            ; Sprite mappings - blocks (LZ)
00012710                            ; ---------------------------------------------------------------------------
00012710                            Map_obj61:
00012710                            	include "_maps\obj61.asm"
00012710                            ; ---------------------------------------------------------------------------
00012710                            ; Sprite mappings - blocks (LZ)
00012710                            ; ---------------------------------------------------------------------------
00012710 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012714 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012718 01                         byte_121CA:	dc.b 1
00012719 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001271E 02                         byte_121D0:	dc.b 2
0001271F F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012724 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012729 01                         byte_121DB:	dc.b 1
0001272A F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001272F 01                         byte_121E1:	dc.b 1
00012730 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012736 00                         		even
00012736 00                         		even
00012736                            
00012736                            ; ===========================================================================
00012736                            ; ---------------------------------------------------------------------------
00012736                            ; Object 62 - gargoyle head (LZ)
00012736                            ; ---------------------------------------------------------------------------
00012736                            
00012736                            Obj62:					; XREF: Obj_Index
00012736 7000                       		moveq	#0,d0
00012738 1028 0024                  		move.b	$24(a0),d0
0001273C 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012740 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012744 6000 D4DC                  		bra.w	MarkObjGone
00012748                            ; ===========================================================================
00012748 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001274A 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001274C 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001274E 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012750                            
00012750 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012758                            ; ===========================================================================
00012758                            
00012758                            Obj62_Main:				; XREF: Obj62_Index
00012758 5428 0024                  		addq.b	#2,$24(a0)
0001275C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012764 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001276A 0028 0004 0001             		ori.b	#4,1(a0)
00012770 117C 0003 0018             		move.b	#3,$18(a0)
00012776 117C 0010 0019             		move.b	#$10,$19(a0)
0001277C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012780 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012784 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001278A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012790 0228 000F 0028             		andi.b	#$F,$28(a0)
00012796                            
00012796                            Obj62_MakeFire:				; XREF: Obj62_Index
00012796 5328 001E                  		subq.b	#1,$1E(a0)
0001279A 6600                       		bne.s	Obj62_NoFire
0001279C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127A2 6100 B650                  		bsr.w	ChkObjOnScreen
000127A6 6600                       		bne.s	Obj62_NoFire
000127A8 6100 B856                  		bsr.w	SingleObjLoad
000127AC 6600                       		bne.s	Obj62_NoFire
000127AE 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127B2 5829 0024                  		addq.b	#4,$24(a1)
000127B6 3368 0008 0008             		move.w	8(a0),8(a1)
000127BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127C2 1368 0001 0001             		move.b	1(a0),1(a1)
000127C8 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127CE                            
000127CE                            Obj62_NoFire:
000127CE 4E75                       		rts	
000127D0                            ; ===========================================================================
000127D0                            
000127D0                            Obj62_FireBall:				; XREF: Obj62_Index
000127D0 5428 0024                  		addq.b	#2,$24(a0)
000127D4 117C 0008 0016             		move.b	#8,$16(a0)
000127DA 117C 0008 0017             		move.b	#8,$17(a0)
000127E0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127E8 317C 02E9 0002             		move.w	#$2E9,2(a0)
000127EE 0028 0004 0001             		ori.b	#4,1(a0)
000127F4 117C 0004 0018             		move.b	#4,$18(a0)
000127FA 117C 0098 0020             		move.b	#$98,$20(a0)
00012800 117C 0008 0019             		move.b	#8,$19(a0)
00012806 117C 0002 001A             		move.b	#2,$1A(a0)
0001280C 5068 000C                  		addq.w	#8,$C(a0)
00012810 317C 0200 0010             		move.w	#$200,$10(a0)
00012816 0828 0000 0022             		btst	#0,$22(a0)
0001281C 6600                       		bne.s	Obj62_Sound
0001281E 4468 0010                  		neg.w	$10(a0)
00012822                            
00012822                            Obj62_Sound:
00012822 303C 00AE                  		move.w	#$AE,d0
00012826 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001282C                            
0001282C                            Obj62_AniFire:				; XREF: Obj62_Index
0001282C 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012830 0200 0007                  		andi.b	#7,d0
00012834 6600                       		bne.s	Obj62_StopFire
00012836 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001283C                            
0001283C                            Obj62_StopFire:
0001283C 6100 B316                  		bsr.w	SpeedToPos
00012840 0828 0000 0022             		btst	#0,$22(a0)
00012846 6600                       		bne.s	Obj62_StopFire2
00012848 76F8                       		moveq	#-8,d3
0001284A 6100 0000                  		bsr.w	ObjHitWallLeft
0001284E 4A41                       		tst.w	d1
00012850 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012854 4E75                       		rts	
00012856                            ; ===========================================================================
00012856                            
00012856                            Obj62_StopFire2:
00012856 7608                       		moveq	#8,d3
00012858 6100 0000                  		bsr.w	ObjHitWallRight
0001285C 4A41                       		tst.w	d1
0001285E 6B00 B356                  		bmi.w	DeleteObject
00012862 4E75                       		rts	
00012864                            ; ===========================================================================
00012864                            ; ---------------------------------------------------------------------------
00012864                            ; Sprite mappings - gargoyle head (LZ)
00012864                            ; ---------------------------------------------------------------------------
00012864                            Map_obj62:
00012864                            	include "_maps\obj62.asm"
00012864                            ; ---------------------------------------------------------------------------
00012864                            ; Sprite mappings - gargoyle head (LZ)
00012864                            ; ---------------------------------------------------------------------------
00012864 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012868 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001286C 03                         byte_12320:	dc.b 3
0001286D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012872 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012877 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001287C 01                         byte_12330:	dc.b 1
0001287D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012882 01                         byte_12336:	dc.b 1
00012883 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012888                            		even
00012888                            		even
00012888                            
00012888                            ; ===========================================================================
00012888                            ; ---------------------------------------------------------------------------
00012888                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012888                            ; ---------------------------------------------------------------------------
00012888                            
00012888                            Obj63:					; XREF: Obj_Index
00012888 7000                       		moveq	#0,d0
0001288A 1028 0024                  		move.b	$24(a0),d0
0001288E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012892 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012896 3028 0030                  		move.w	$30(a0),d0
0001289A 0240 FF80                  		andi.w	#$FF80,d0
0001289E 3238 F700                  		move.w	($FFFFF700).w,d1
000128A2 0441 0080                  		subi.w	#$80,d1
000128A6 0241 FF80                  		andi.w	#$FF80,d1
000128AA 9041                       		sub.w	d1,d0
000128AC 0C40 0280                  		cmpi.w	#$280,d0
000128B0 6200                       		bhi.s	loc_1236A
000128B2                            
000128B2                            Obj63_Display:				; XREF: loc_1236A
000128B2 6000 B2C6                  		bra.w	DisplaySprite
000128B6                            ; ===========================================================================
000128B6                            
000128B6                            loc_1236A:				; XREF: Obj63
000128B6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128BC 6600                       		bne.s	loc_12378
000128BE 0C40 FF80                  		cmpi.w	#-$80,d0
000128C2 64EE                       		bcc.s	Obj63_Display
000128C4                            
000128C4                            loc_12378:
000128C4 1028 002F                  		move.b	$2F(a0),d0
000128C8 6A00 B2EC                  		bpl.w	DeleteObject
000128CC 0240 007F                  		andi.w	#$7F,d0
000128D0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000128D4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000128DA 6000 B2DA                  		bra.w	DeleteObject
000128DE                            ; ===========================================================================
000128DE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000128E0 0000                       		dc.w loc_124B2-Obj63_Index
000128E2 0000                       		dc.w loc_124C2-Obj63_Index
000128E4 0000                       		dc.w loc_124DE-Obj63_Index
000128E6                            ; ===========================================================================
000128E6                            
000128E6                            Obj63_Main:				; XREF: Obj63_Index
000128E6 1028 0028                  		move.b	$28(a0),d0
000128EA 6B00 0000                  		bmi.w	loc_12460
000128EE 5428 0024                  		addq.b	#2,$24(a0)
000128F2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000128FA 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012900 0028 0004 0001             		ori.b	#4,1(a0)
00012906 117C 0010 0019             		move.b	#$10,$19(a0)
0001290C 117C 0004 0018             		move.b	#4,$18(a0)
00012912 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012918 6600                       		bne.s	loc_123E2
0001291A 5828 0024                  		addq.b	#4,$24(a0)
0001291E 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012924 117C 0001 0018             		move.b	#1,$18(a0)
0001292A 6000 0000                  		bra.w	loc_124DE
0001292E                            ; ===========================================================================
0001292E                            
0001292E                            loc_123E2:
0001292E 117C 0004 001A             		move.b	#4,$1A(a0)
00012934 7000                       		moveq	#0,d0
00012936 1028 0028                  		move.b	$28(a0),d0
0001293A 3200                       		move.w	d0,d1
0001293C E648                       		lsr.w	#3,d0
0001293E 0240 001E                  		andi.w	#$1E,d0
00012942 45FA 0000                  		lea	Obj63_Data(pc),a2
00012946 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001294A 315A 0038                  		move.w	(a2)+,$38(a0)
0001294E 315A 0030                  		move.w	(a2)+,$30(a0)
00012952 214A 003C                  		move.l	a2,$3C(a0)
00012956 0241 000F                  		andi.w	#$F,d1
0001295A E549                       		lsl.w	#2,d1
0001295C 1141 0038                  		move.b	d1,$38(a0)
00012960 117C 0004 003A             		move.b	#4,$3A(a0)
00012966 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001296A 6700                       		beq.s	loc_1244C
0001296C 117C 0001 003B             		move.b	#1,$3B(a0)
00012972 4428 003A                  		neg.b	$3A(a0)
00012976 7200                       		moveq	#0,d1
00012978 1228 0038                  		move.b	$38(a0),d1
0001297C D228 003A                  		add.b	$3A(a0),d1
00012980 B228 0039                  		cmp.b	$39(a0),d1
00012984 6500                       		bcs.s	loc_12448
00012986 1001                       		move.b	d1,d0
00012988 7200                       		moveq	#0,d1
0001298A 4A00                       		tst.b	d0
0001298C 6A00                       		bpl.s	loc_12448
0001298E 1228 0039                  		move.b	$39(a0),d1
00012992 5901                       		subq.b	#4,d1
00012994                            
00012994                            loc_12448:
00012994 1141 0038                  		move.b	d1,$38(a0)
00012998                            
00012998                            loc_1244C:
00012998 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001299E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000129A4 6100 0000                  		bsr.w	Obj63_ChangeDir
000129A8 6000 0000                  		bra.w	loc_124B2
000129AC                            ; ===========================================================================
000129AC                            
000129AC                            loc_12460:				; XREF: Obj63_Main
000129AC 1140 002F                  		move.b	d0,$2F(a0)
000129B0 0240 007F                  		andi.w	#$7F,d0
000129B4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129B8 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129BE 6600 B1F6                  		bne.w	DeleteObject
000129C2 D040                       		add.w	d0,d0
000129C4 0240 001E                  		andi.w	#$1E,d0
000129C8 0640 0070                  		addi.w	#$70,d0
000129CC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000129D2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000129D6 321A                       		move.w	(a2)+,d1
000129D8 2248                       		movea.l	a0,a1
000129DA 6000                       		bra.s	Obj63_MakePtfms
000129DC                            ; ===========================================================================
000129DC                            
000129DC                            Obj63_Loop:
000129DC 6100 B622                  		bsr.w	SingleObjLoad
000129E0 6600                       		bne.s	loc_124AA
000129E2                            
000129E2                            Obj63_MakePtfms:			; XREF: loc_12460
000129E2 12BC 0063                  		move.b	#$63,0(a1)
000129E6 335A 0008                  		move.w	(a2)+,8(a1)
000129EA 335A 000C                  		move.w	(a2)+,$C(a1)
000129EE 301A                       		move.w	(a2)+,d0
000129F0 1340 0028                  		move.b	d0,$28(a1)
000129F4                            
000129F4                            loc_124AA:
000129F4 51C9 FFE6                  		dbf	d1,Obj63_Loop
000129F8                            
000129F8 588F                       		addq.l	#4,sp
000129FA 4E75                       		rts	
000129FC                            ; ===========================================================================
000129FC                            
000129FC                            loc_124B2:				; XREF: Obj63_Index
000129FC 7200                       		moveq	#0,d1
000129FE 1228 0019                  		move.b	$19(a0),d1
00012A02 4EB9 0000 78A6             		jsr	(PlatformObject).l
00012A08 6000 0000                  		bra.w	sub_12502
00012A0C                            ; ===========================================================================
00012A0C                            
00012A0C                            loc_124C2:				; XREF: Obj63_Index
00012A0C 7200                       		moveq	#0,d1
00012A0E 1228 0019                  		move.b	$19(a0),d1
00012A12 4EB9 0000 7A1A             		jsr	(ExitPlatform).l
00012A18 3F28 0008                  		move.w	8(a0),-(sp)
00012A1C 6100 0000                  		bsr.w	sub_12502
00012A20 341F                       		move.w	(sp)+,d2
00012A22 4EF9 0000 7F84             		jmp	(MvSonicOnPtfm2).l
00012A28                            ; ===========================================================================
00012A28                            
00012A28                            loc_124DE:				; XREF: Obj63_Index
00012A28 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A2C 0240 0003                  		andi.w	#3,d0
00012A30 6600                       		bne.s	loc_124FC
00012A32 7201                       		moveq	#1,d1
00012A34 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A38 6700                       		beq.s	loc_124F2
00012A3A 4401                       		neg.b	d1
00012A3C                            
00012A3C                            loc_124F2:
00012A3C D328 001A                  		add.b	d1,$1A(a0)
00012A40 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A46                            
00012A46                            loc_124FC:
00012A46 588F                       		addq.l	#4,sp
00012A48 6000 D1D8                  		bra.w	MarkObjGone
00012A4C                            
00012A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A4C                            
00012A4C                            
00012A4C                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A4C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A50 6700                       		beq.s	loc_12520
00012A52 4A28 003B                  		tst.b	$3B(a0)
00012A56 6600                       		bne.s	loc_12520
00012A58 117C 0001 003B             		move.b	#1,$3B(a0)
00012A5E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A64 4428 003A                  		neg.b	$3A(a0)
00012A68 6000                       		bra.s	loc_12534
00012A6A                            ; ===========================================================================
00012A6A                            
00012A6A                            loc_12520:
00012A6A 3028 0008                  		move.w	8(a0),d0
00012A6E B068 0034                  		cmp.w	$34(a0),d0
00012A72 6600                       		bne.s	loc_1256A
00012A74 3028 000C                  		move.w	$C(a0),d0
00012A78 B068 0036                  		cmp.w	$36(a0),d0
00012A7C 6600                       		bne.s	loc_1256A
00012A7E                            
00012A7E                            loc_12534:
00012A7E 7200                       		moveq	#0,d1
00012A80 1228 0038                  		move.b	$38(a0),d1
00012A84 D228 003A                  		add.b	$3A(a0),d1
00012A88 B228 0039                  		cmp.b	$39(a0),d1
00012A8C 6500                       		bcs.s	loc_12552
00012A8E 1001                       		move.b	d1,d0
00012A90 7200                       		moveq	#0,d1
00012A92 4A00                       		tst.b	d0
00012A94 6A00                       		bpl.s	loc_12552
00012A96 1228 0039                  		move.b	$39(a0),d1
00012A9A 5901                       		subq.b	#4,d1
00012A9C                            
00012A9C                            loc_12552:
00012A9C 1141 0038                  		move.b	d1,$38(a0)
00012AA0 2268 003C                  		movea.l	$3C(a0),a1
00012AA4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AAA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012AB0 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AB4                            
00012AB4                            loc_1256A:
00012AB4 6100 B09E                  		bsr.w	SpeedToPos
00012AB8 4E75                       		rts	
00012ABA                            ; End of function sub_12502
00012ABA                            
00012ABA                            
00012ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012ABA                            
00012ABA                            
00012ABA                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012ABA 7000                       		moveq	#0,d0
00012ABC 343C FF00                  		move.w	#-$100,d2
00012AC0 3028 0008                  		move.w	8(a0),d0
00012AC4 9068 0034                  		sub.w	$34(a0),d0
00012AC8 6400                       		bcc.s	loc_12584
00012ACA 4440                       		neg.w	d0
00012ACC 4442                       		neg.w	d2
00012ACE                            
00012ACE                            loc_12584:
00012ACE 7200                       		moveq	#0,d1
00012AD0 363C FF00                  		move.w	#-$100,d3
00012AD4 3228 000C                  		move.w	$C(a0),d1
00012AD8 9268 0036                  		sub.w	$36(a0),d1
00012ADC 6400                       		bcc.s	loc_12598
00012ADE 4441                       		neg.w	d1
00012AE0 4443                       		neg.w	d3
00012AE2                            
00012AE2                            loc_12598:
00012AE2 B240                       		cmp.w	d0,d1
00012AE4 6500                       		bcs.s	loc_125C2
00012AE6 3028 0008                  		move.w	8(a0),d0
00012AEA 9068 0034                  		sub.w	$34(a0),d0
00012AEE 6700                       		beq.s	loc_125AE
00012AF0 48C0                       		ext.l	d0
00012AF2 E180                       		asl.l	#8,d0
00012AF4 81C1                       		divs.w	d1,d0
00012AF6 4440                       		neg.w	d0
00012AF8                            
00012AF8                            loc_125AE:
00012AF8 3140 0010                  		move.w	d0,$10(a0)
00012AFC 3143 0012                  		move.w	d3,$12(a0)
00012B00 4840                       		swap	d0
00012B02 3140 000A                  		move.w	d0,$A(a0)
00012B06 4268 000E                  		clr.w	$E(a0)
00012B0A 4E75                       		rts	
00012B0C                            ; ===========================================================================
00012B0C                            
00012B0C                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B0C 3228 000C                  		move.w	$C(a0),d1
00012B10 9268 0036                  		sub.w	$36(a0),d1
00012B14 6700                       		beq.s	loc_125D4
00012B16 48C1                       		ext.l	d1
00012B18 E181                       		asl.l	#8,d1
00012B1A 83C0                       		divs.w	d0,d1
00012B1C 4441                       		neg.w	d1
00012B1E                            
00012B1E                            loc_125D4:
00012B1E 3141 0012                  		move.w	d1,$12(a0)
00012B22 3142 0010                  		move.w	d2,$10(a0)
00012B26 4841                       		swap	d1
00012B28 3141 000E                  		move.w	d1,$E(a0)
00012B2C 4268 000A                  		clr.w	$A(a0)
00012B30 4E75                       		rts	
00012B32                            ; End of function Obj63_ChangeDir
00012B32                            
00012B32                            ; ===========================================================================
00012B32 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B34 0000                       		dc.w word_12610-Obj63_Data
00012B36 0000                       		dc.w word_12628-Obj63_Data
00012B38 0000                       		dc.w word_1263C-Obj63_Data
00012B3A 0000                       		dc.w word_12650-Obj63_Data
00012B3C 0000                       		dc.w word_12668-Obj63_Data
00012B3E 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B4E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B5A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B6A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012B72 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012B86 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012B9A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BB2 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012BC6                            
00012BC6                            ; ---------------------------------------------------------------------------
00012BC6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BC6                            ; ---------------------------------------------------------------------------
00012BC6                            Map_obj63:
00012BC6                            	include "_maps\obj63.asm"
00012BC6                            ; ---------------------------------------------------------------------------
00012BC6                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BC6                            ; ---------------------------------------------------------------------------
00012BC6 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012BCA 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012BCE 0000                       		dc.w byte_1269E-Map_obj63
00012BD0 01                         byte_12686:	dc.b 1
00012BD1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BD6 01                         byte_1268C:	dc.b 1
00012BD7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012BDC 01                         byte_12692:	dc.b 1
00012BDD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012BE2 01                         byte_12698:	dc.b 1
00012BE3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012BE8 01                         byte_1269E:	dc.b 1
00012BE9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012BEE                            		even
00012BEE                            		even
00012BEE                            
00012BEE                            ; ===========================================================================
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            ; Object 64 - bubbles (LZ)
00012BEE                            ; ---------------------------------------------------------------------------
00012BEE                            
00012BEE                            Obj64:					; XREF: Obj_Index
00012BEE 7000                       		moveq	#0,d0
00012BF0 1028 0024                  		move.b	$24(a0),d0
00012BF4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012BF8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012BFC                            ; ===========================================================================
00012BFC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012BFE 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C00 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C02 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C04 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C06 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C08                            ; ===========================================================================
00012C08                            
00012C08                            Obj64_Main:				; XREF: Obj64_Index
00012C08 5428 0024                  		addq.b	#2,$24(a0)
00012C0C 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C14 317C 8348 0002             		move.w	#$8348,2(a0)
00012C1A 117C 0084 0001             		move.b	#$84,1(a0)
00012C20 117C 0010 0019             		move.b	#$10,$19(a0)
00012C26 117C 0001 0018             		move.b	#1,$18(a0)
00012C2C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C30 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C32 5028 0024                  		addq.b	#8,$24(a0)
00012C36 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C3A 1140 0032                  		move.b	d0,$32(a0)
00012C3E 1140 0033                  		move.b	d0,$33(a0)
00012C42 117C 0006 001C             		move.b	#6,$1C(a0)
00012C48 6000 0000                  		bra.w	Obj64_BblMaker
00012C4C                            ; ===========================================================================
00012C4C                            
00012C4C                            Obj64_Bubble:				; XREF: Obj64_Main
00012C4C 1140 001C                  		move.b	d0,$1C(a0)
00012C50 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C56 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C5C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C62 1140 0026                  		move.b	d0,$26(a0)
00012C66                            
00012C66                            Obj64_Animate:				; XREF: Obj64_Index
00012C66 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C6C 4EB9 0000 AC4A             		jsr	AnimateSprite
00012C72 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012C78 6600                       		bne.s	Obj64_ChkWater
00012C7A 117C 0001 002E             		move.b	#1,$2E(a0)
00012C80                            
00012C80                            Obj64_ChkWater:				; XREF: Obj64_Index
00012C80 3038 F646                  		move.w	($FFFFF646).w,d0
00012C84 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012C88 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012C8A                            
00012C8A                            Obj64_Burst:				; XREF: Obj64_Wobble
00012C8A 117C 0006 0024             		move.b	#6,$24(a0)
00012C90 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012C94 6000 0000                  		bra.w	Obj64_Display2
00012C98                            ; ===========================================================================
00012C98                            
00012C98                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012C98 1028 0026                  		move.b	$26(a0),d0
00012C9C 5228 0026                  		addq.b	#1,$26(a0)
00012CA0 0240 007F                  		andi.w	#$7F,d0
00012CA4 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CAA 1031 0000                  		move.b	(a1,d0.w),d0
00012CAE 4880                       		ext.w	d0
00012CB0 D068 0030                  		add.w	$30(a0),d0
00012CB4 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CB8 4A28 002E                  		tst.b	$2E(a0)
00012CBC 6700                       		beq.s	Obj64_Display
00012CBE 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CC2 6700                       		beq.s	Obj64_Display	; if not, branch
00012CC4                            
00012CC4 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012CC8 303C 00AD                  		move.w	#$AD,d0
00012CCC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012CD2 43F8 D000                  		lea	($FFFFD000).w,a1
00012CD6 4269 0010                  		clr.w	$10(a1)
00012CDA 4269 0012                  		clr.w	$12(a1)
00012CDE 4269 0014                  		clr.w	$14(a1)
00012CE2 137C 0015 001C             		move.b	#$15,$1C(a1)
00012CE8 337C 0023 003E             		move.w	#$23,$3E(a1)
00012CEE 137C 0000 003C             		move.b	#0,$3C(a1)
00012CF4 08A9 0005 0022             		bclr	#5,$22(a1)
00012CFA 08A9 0004 0022             		bclr	#4,$22(a1)
00012D00 0829 0002 0022             		btst	#2,$22(a1)
00012D06 6700 FF82                  		beq.w	Obj64_Burst
00012D0A 08A9 0002 0022             		bclr	#2,$22(a1)
00012D10 137C 0013 0016             		move.b	#$13,$16(a1)
00012D16 137C 0009 0017             		move.b	#9,$17(a1)
00012D1C 5B69 000C                  		subq.w	#5,$C(a1)
00012D20 6000 FF68                  		bra.w	Obj64_Burst
00012D24                            ; ===========================================================================
00012D24                            
00012D24                            Obj64_Display:				; XREF: Obj64_Wobble
00012D24 6100 AE2E                  		bsr.w	SpeedToPos
00012D28 4A28 0001                  		tst.b	1(a0)
00012D2C 6A00                       		bpl.s	Obj64_Delete
00012D2E 4EFA AE4A                  		jmp	DisplaySprite
00012D32                            ; ===========================================================================
00012D32                            
00012D32                            Obj64_Delete:
00012D32 4EFA AE82                  		jmp	DeleteObject
00012D36                            ; ===========================================================================
00012D36                            
00012D36                            Obj64_Display2:				; XREF: Obj64_Index
00012D36 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D3C 4EB9 0000 AC4A             		jsr	AnimateSprite
00012D42 4A28 0001                  		tst.b	1(a0)
00012D46 6A00                       		bpl.s	Obj64_Delete2
00012D48 4EFA AE30                  		jmp	DisplaySprite
00012D4C                            ; ===========================================================================
00012D4C                            
00012D4C                            Obj64_Delete2:
00012D4C 4EFA AE68                  		jmp	DeleteObject
00012D50                            ; ===========================================================================
00012D50                            
00012D50                            Obj64_Delete3:				; XREF: Obj64_Index
00012D50 6000 AE64                  		bra.w	DeleteObject
00012D54                            ; ===========================================================================
00012D54                            
00012D54                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D54 4A68 0036                  		tst.w	$36(a0)
00012D58 6600                       		bne.s	loc_12874
00012D5A 3038 F646                  		move.w	($FFFFF646).w,d0
00012D5E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D62 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D66 4A28 0001                  		tst.b	1(a0)
00012D6A 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D6E 5368 0038                  		subq.w	#1,$38(a0)
00012D72 6A00 0000                  		bpl.w	loc_12914
00012D76 317C 0001 0036             		move.w	#1,$36(a0)
00012D7C                            
00012D7C                            loc_1283A:
00012D7C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012D82 3200                       		move.w	d0,d1
00012D84 0240 0007                  		andi.w	#7,d0
00012D88 0C40 0006                  		cmpi.w	#6,d0
00012D8C 64EE                       		bcc.s	loc_1283A
00012D8E                            
00012D8E 1140 0034                  		move.b	d0,$34(a0)
00012D92 0241 000C                  		andi.w	#$C,d1
00012D96 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012D9C D2C1                       		adda.w	d1,a1
00012D9E 2149 003C                  		move.l	a1,$3C(a0)
00012DA2 5328 0032                  		subq.b	#1,$32(a0)
00012DA6 6A00                       		bpl.s	loc_12872
00012DA8 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DAE 08E8 0007 0036             		bset	#7,$36(a0)
00012DB4                            
00012DB4                            loc_12872:
00012DB4 6000                       		bra.s	loc_1287C
00012DB6                            ; ===========================================================================
00012DB6                            
00012DB6                            loc_12874:				; XREF: Obj64_BblMaker
00012DB6 5368 0038                  		subq.w	#1,$38(a0)
00012DBA 6A00 0000                  		bpl.w	loc_12914
00012DBE                            
00012DBE                            loc_1287C:
00012DBE 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DC4 0240 001F                  		andi.w	#$1F,d0
00012DC8 3140 0038                  		move.w	d0,$38(a0)
00012DCC 6100 B232                  		bsr.w	SingleObjLoad
00012DD0 6600                       		bne.s	loc_128F8
00012DD2 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012DD6 3368 0008 0008             		move.w	8(a0),8(a1)
00012DDC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DE2 0240 000F                  		andi.w	#$F,d0
00012DE6 5140                       		subq.w	#8,d0
00012DE8 D169 0008                  		add.w	d0,8(a1)
00012DEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012DF2 7000                       		moveq	#0,d0
00012DF4 1028 0034                  		move.b	$34(a0),d0
00012DF8 2468 003C                  		movea.l	$3C(a0),a2
00012DFC 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E02 0828 0007 0036             		btst	#7,$36(a0)
00012E08 6700                       		beq.s	loc_128F8
00012E0A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E10 0240 0003                  		andi.w	#3,d0
00012E14 6600                       		bne.s	loc_128E4
00012E16 08E8 0006 0036             		bset	#6,$36(a0)
00012E1C 6600                       		bne.s	loc_128F8
00012E1E 137C 0002 0028             		move.b	#2,$28(a1)
00012E24                            
00012E24                            loc_128E4:
00012E24 4A28 0034                  		tst.b	$34(a0)
00012E28 6600                       		bne.s	loc_128F8
00012E2A 08E8 0006 0036             		bset	#6,$36(a0)
00012E30 6600                       		bne.s	loc_128F8
00012E32 137C 0002 0028             		move.b	#2,$28(a1)
00012E38                            
00012E38                            loc_128F8:
00012E38 5328 0034                  		subq.b	#1,$34(a0)
00012E3C 6A00                       		bpl.s	loc_12914
00012E3E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E44 0240 007F                  		andi.w	#$7F,d0
00012E48 0640 0080                  		addi.w	#$80,d0
00012E4C D168 0038                  		add.w	d0,$38(a0)
00012E50 4268 0036                  		clr.w	$36(a0)
00012E54                            
00012E54                            loc_12914:
00012E54 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E5A 4EB9 0000 AC4A             		jsr	AnimateSprite
00012E60                            
00012E60                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E60 3028 0008                  		move.w	8(a0),d0
00012E64 0240 FF80                  		andi.w	#$FF80,d0
00012E68 3238 F700                  		move.w	($FFFFF700).w,d1
00012E6C 0441 0080                  		subi.w	#$80,d1
00012E70 0241 FF80                  		andi.w	#$FF80,d1
00012E74 9041                       		sub.w	d1,d0
00012E76 0C40 0280                  		cmpi.w	#$280,d0
00012E7A 6200 AD3A                  		bhi.w	DeleteObject
00012E7E 3038 F646                  		move.w	($FFFFF646).w,d0
00012E82 B068 000C                  		cmp.w	$C(a0),d0
00012E86 6500 ACF2                  		bcs.w	DisplaySprite
00012E8A 4E75                       		rts	
00012E8C                            ; ===========================================================================
00012E8C                            ; bubble production sequence
00012E8C                            
00012E8C                            ; 0 = small bubble, 1 =	large bubble
00012E8C                            
00012E8C 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012E9E                            
00012E9E                            ; ===========================================================================
00012E9E                            
00012E9E                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012E9E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012EA2 6B00                       		bmi.s	loc_12998
00012EA4 43F8 D000                  		lea	($FFFFD000).w,a1
00012EA8 3029 0008                  		move.w	8(a1),d0
00012EAC 3228 0008                  		move.w	8(a0),d1
00012EB0 0441 0010                  		subi.w	#$10,d1
00012EB4 B240                       		cmp.w	d0,d1
00012EB6 6400                       		bcc.s	loc_12998
00012EB8 0641 0020                  		addi.w	#$20,d1
00012EBC B240                       		cmp.w	d0,d1
00012EBE 6500                       		bcs.s	loc_12998
00012EC0 3029 000C                  		move.w	$C(a1),d0
00012EC4 3228 000C                  		move.w	$C(a0),d1
00012EC8 B240                       		cmp.w	d0,d1
00012ECA 6400                       		bcc.s	loc_12998
00012ECC 0641 0010                  		addi.w	#$10,d1
00012ED0 B240                       		cmp.w	d0,d1
00012ED2 6500                       		bcs.s	loc_12998
00012ED4 7001                       		moveq	#1,d0
00012ED6 4E75                       		rts	
00012ED8                            ; ===========================================================================
00012ED8                            
00012ED8                            loc_12998:
00012ED8 7000                       		moveq	#0,d0
00012EDA 4E75                       		rts	
00012EDC                            ; ===========================================================================
00012EDC                            Ani_obj64:
00012EDC                            	include "_anim\obj64.asm"
00012EDC                            ; ---------------------------------------------------------------------------
00012EDC                            ; Animation script - bubbles (LZ)
00012EDC                            ; ---------------------------------------------------------------------------
00012EDC 0000                       		dc.w byte_129AA-Ani_obj64
00012EDE 0000                       		dc.w byte_129B0-Ani_obj64
00012EE0 0000                       		dc.w byte_129B6-Ani_obj64
00012EE2 0000                       		dc.w byte_129BE-Ani_obj64
00012EE4 0000                       		dc.w byte_129BE-Ani_obj64
00012EE6 0000                       		dc.w byte_129C0-Ani_obj64
00012EE8 0000                       		dc.w byte_129C6-Ani_obj64
00012EEA 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012EF0 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012EF6 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012EFE 04FC                       byte_129BE:	dc.b 4,	$FC
00012F00 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F06 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F0C 00                         		even
00012F0C 00                         		even
00012F0C                            
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            ; Sprite mappings - bubbles (LZ)
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            Map_obj64:
00012F0C                            	include "_maps\obj64.asm"
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C                            ; Sprite mappings - bubbles (LZ)
00012F0C                            ; ---------------------------------------------------------------------------
00012F0C 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F10 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F14 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F18 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F1C 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F20 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F24 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F28 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F2C 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F30 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F34 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F38 0000                       		dc.w byte_12A9C-Map_obj64
00012F3A 01                         byte_129FA:	dc.b 1
00012F3B FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F40 01                         byte_12A00:	dc.b 1
00012F41 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F46 01                         byte_12A06:	dc.b 1
00012F47 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F4C 01                         byte_12A0C:	dc.b 1
00012F4D F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F52 01                         byte_12A12:	dc.b 1
00012F53 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F58 01                         byte_12A18:	dc.b 1
00012F59 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F5E 01                         byte_12A1E:	dc.b 1
00012F5F F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F64 04                         byte_12A24:	dc.b 4
00012F65 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F6A F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F6F 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012F74 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012F79 04                         byte_12A39:	dc.b 4
00012F7A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012F7F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012F84 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012F89 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012F8E 01                         byte_12A4E:	dc.b 1
00012F8F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012F94 01                         byte_12A54:	dc.b 1
00012F95 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012F9A 01                         byte_12A5A:	dc.b 1
00012F9B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012FA0 01                         byte_12A60:	dc.b 1
00012FA1 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012FA6 01                         byte_12A66:	dc.b 1
00012FA7 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FAC 01                         byte_12A6C:	dc.b 1
00012FAD F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FB2 01                         byte_12A72:	dc.b 1
00012FB3 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FB8 01                         byte_12A78:	dc.b 1
00012FB9 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FBE 01                         byte_12A7E:	dc.b 1
00012FBF F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FC4 01                         byte_12A84:	dc.b 1
00012FC5 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012FCA 01                         byte_12A8A:	dc.b 1
00012FCB F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012FD0 01                         byte_12A90:	dc.b 1
00012FD1 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012FD6 01                         byte_12A96:	dc.b 1
00012FD7 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012FDC 00                         byte_12A9C:	dc.b 0
00012FDE 00                         		even
00012FDE 00                         		even
00012FDE                            
00012FDE                            ; ===========================================================================
00012FDE                            ; ---------------------------------------------------------------------------
00012FDE                            ; Object 65 - waterfalls (LZ)
00012FDE                            ; ---------------------------------------------------------------------------
00012FDE                            
00012FDE                            Obj65:					; XREF: Obj_Index
00012FDE 7000                       		moveq	#0,d0
00012FE0 1028 0024                  		move.b	$24(a0),d0
00012FE4 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012FE8 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012FEC                            ; ===========================================================================
00012FEC 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012FEE 0000                       		dc.w Obj65_Animate-Obj65_Index
00012FF0 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012FF2 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012FF4 0000                       		dc.w loc_12B36-Obj65_Index
00012FF6                            ; ===========================================================================
00012FF6                            
00012FF6                            Obj65_Main:				; XREF: Obj65_Index
00012FF6 5828 0024                  		addq.b	#4,$24(a0)
00012FFA 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013002 317C 4259 0002             		move.w	#$4259,2(a0)
00013008 0028 0004 0001             		ori.b	#4,1(a0)
0001300E 117C 0018 0019             		move.b	#$18,$19(a0)
00013014 117C 0001 0018             		move.b	#1,$18(a0)
0001301A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001301E 6A00                       		bpl.s	loc_12AE6
00013020 08E8 0007 0002             		bset	#7,2(a0)
00013026                            
00013026                            loc_12AE6:
00013026 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001302A 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001302E 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013032 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013034 4228 0018                  		clr.b	$18(a0)
00013038 5528 0024                  		subq.b	#2,$24(a0)
0001303C 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013042 6700                       		beq.s	loc_12B0A	; if not, branch
00013044 117C 0006 0024             		move.b	#6,$24(a0)
0001304A                            
0001304A                            loc_12B0A:
0001304A 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013050 6700                       		beq.s	Obj65_Animate	; if not, branch
00013052 117C 0008 0024             		move.b	#8,$24(a0)
00013058                            
00013058                            Obj65_Animate:				; XREF: Obj65_Index
00013058 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001305E 4EB9 0000 AC4A             		jsr	AnimateSprite
00013064                            
00013064                            Obj65_ChkDel:				; XREF: Obj65_Index
00013064 6000 CBBC                  		bra.w	MarkObjGone
00013068                            ; ===========================================================================
00013068                            
00013068                            Obj65_FixHeight:			; XREF: Obj65_Index
00013068 3038 F646                  		move.w	($FFFFF646).w,d0
0001306C 0440 0010                  		subi.w	#$10,d0
00013070 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013074 60E2                       		bra.s	Obj65_Animate
00013076                            ; ===========================================================================
00013076                            
00013076                            loc_12B36:				; XREF: Obj65_Index
00013076 08A8 0007 0002             		bclr	#7,2(a0)
0001307C 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013082 6600                       		bne.s	Obj65_Animate2
00013084 08E8 0007 0002             		bset	#7,2(a0)
0001308A                            
0001308A                            Obj65_Animate2:
0001308A 60CC                       		bra.s	Obj65_Animate
0001308C                            ; ===========================================================================
0001308C                            Ani_obj65:
0001308C                            	include "_anim\obj65.asm"
0001308C                            ; ---------------------------------------------------------------------------
0001308C                            ; Animation script - waterfall (LZ)
0001308C                            ; ---------------------------------------------------------------------------
0001308C 0000                       		dc.w byte_12B4E-Ani_obj65
0001308E 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013094 00                         		even
00013094 00                         		even
00013094                            
00013094                            ; ---------------------------------------------------------------------------
00013094                            ; Sprite mappings - waterfalls (LZ)
00013094                            ; ---------------------------------------------------------------------------
00013094                            Map_obj65:
00013094                            	include "_maps\obj65.asm"
00013094                            ; ---------------------------------------------------------------------------
00013094                            ; Sprite mappings - waterfalls (LZ)
00013094                            ; ---------------------------------------------------------------------------
00013094 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013098 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001309C 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000130A0 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000130A4 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130A8 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130AC 01                         byte_12B6C:	dc.b 1
000130AD F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130B2 02                         byte_12B72:	dc.b 2
000130B3 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130B8 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130BD 02                         byte_12B7D:	dc.b 2
000130BE F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130C3 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130C8 01                         byte_12B88:	dc.b 1
000130C9 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000130CE 02                         byte_12B8E:	dc.b 2
000130CF F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130D4 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130D9 01                         byte_12B99:	dc.b 1
000130DA F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000130DF 01                         byte_12B9F:	dc.b 1
000130E0 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000130E5 01                         byte_12BA5:	dc.b 1
000130E6 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000130EB 02                         byte_12BAB:	dc.b 2
000130EC F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000130F1 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000130F6 02                         byte_12BB6:	dc.b 2
000130F7 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000130FC F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013101 02                         byte_12BC1:	dc.b 2
00013102 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013107 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001310C 02                         byte_12BCC:	dc.b 2
0001310D F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013112 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013118 00                         		even
00013118 00                         		even
00013118                            
00013118                            ; ===========================================================================
00013118                            ; ---------------------------------------------------------------------------
00013118                            ; Object 01 - Sonic
00013118                            ; ---------------------------------------------------------------------------
00013118                            
00013118                            Obj01:					; XREF: Obj_Index
00013118 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001311C 6700                       		beq.s	Obj01_Normal	; if not, branch
0001311E 4EF9 0000 0000             		jmp	DebugMode
00013124                            ; ===========================================================================
00013124                            
00013124                            Obj01_Normal:
00013124 7000                       		moveq	#0,d0
00013126 1028 0024                  		move.b	$24(a0),d0
0001312A 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001312E 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013132                            ; ===========================================================================
00013132 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013134 0000                       		dc.w Obj01_Control-Obj01_Index
00013136 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013138 0000                       		dc.w Obj01_Death-Obj01_Index
0001313A 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001313C                            ; ===========================================================================
0001313C                            
0001313C                            Obj01_Main:				; XREF: Obj01_Index
0001313C 5428 0024                  		addq.b	#2,$24(a0)
00013140 117C 0013 0016             		move.b	#$13,$16(a0)
00013146 117C 0009 0017             		move.b	#9,$17(a0)
0001314C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013154 317C 0780 0002             		move.w	#$780,2(a0)
0001315A 117C 0002 0018             		move.b	#2,$18(a0)
00013160 117C 0018 0019             		move.b	#$18,$19(a0)
00013166 117C 0004 0001             		move.b	#4,1(a0)
0001316C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013172 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013178 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001317E                            
0001317E                            Obj01_Control:				; XREF: Obj01_Index
0001317E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013182 6700                       		beq.s	loc_12C58	; if not, branch
00013184 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001318A 6700                       		beq.s	loc_12C58	; if not, branch
0001318C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013192 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013196 4E75                       		rts	
00013198                            ; ===========================================================================
00013198                            
00013198                            loc_12C58:
00013198 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001319C 6600                       		bne.s	loc_12C64	; if yes, branch
0001319E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000131A4                            
000131A4                            loc_12C64:
000131A4 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131AA 6600                       		bne.s	loc_12C7E	; if yes, branch
000131AC 7000                       		moveq	#0,d0
000131AE 1028 0022                  		move.b	$22(a0),d0
000131B2 0240 0006                  		andi.w	#6,d0
000131B6 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131BA 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131BE                            
000131BE                            loc_12C7E:
000131BE 6100                       		bsr.s	Sonic_Display
000131C0 6100 0000                  		bsr.w	Sonic_RecordPos
000131C4 6100 0000                  		bsr.w	Sonic_Water
000131C8 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000131CE 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000131D4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000131D8 6700                       		beq.s	loc_12CA6
000131DA 4A28 001C                  		tst.b	$1C(a0)
000131DE 6600                       		bne.s	loc_12CA6
000131E0 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000131E6                            
000131E6                            loc_12CA6:
000131E6 6100 0000                  		bsr.w	Sonic_Animate
000131EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000131EE 6B00                       		bmi.s	loc_12CB6
000131F0 4EB9 0000 0000             		jsr	TouchResponse
000131F6                            
000131F6                            loc_12CB6:
000131F6 6100 0000                  		bsr.w	Sonic_Loops
000131FA 6100 0000                  		bsr.w	LoadSonicDynPLC
000131FE 4E75                       		rts	
00013200                            ; ===========================================================================
00013200 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013202 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013204 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013206 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013208                            ; ---------------------------------------------------------------------------
00013208                            ; Music	to play	after invincibility wears off
00013208                            ; ---------------------------------------------------------------------------
00013208                            ; ===========================================================================
00013208                            
00013208                            Sonic_Display:				; XREF: loc_12C7E
00013208 3028 0030                  		move.w	$30(a0),d0
0001320C 6700                       		beq.s	Obj01_Display
0001320E 5368 0030                  		subq.w	#1,$30(a0)
00013212 E648                       		lsr.w	#3,d0
00013214 6400                       		bcc.s	Obj01_ChkInvin
00013216                            
00013216                            Obj01_Display:
00013216 4EBA A962                  		jsr	DisplaySprite
0001321A                            
0001321A                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
0001321A                             
0001321A                            Obj01_ChkInvin:
0001321A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001321E 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013222 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013226 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001322A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001322E 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013232 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013236 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001323A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013240 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013244 7000                       		moveq	#0,d0
00013246 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001324A                             
0001324A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013250 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013252 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013258 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001325A                             
0001325A                            Obj01_GetBgm2:
0001325A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013260 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013262 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013268 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001326A                             
0001326A                            Obj01_GetBgm3:
0001326A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013270 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013272 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013278 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
0001327A                             
0001327A                            Obj01_GetBgm4:
0001327A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013280 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013282 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013288                             
00013288                            Obj01_PlayMusic:
00013288 1031 0000                  		move.b	(a1,d0.w),d0
0001328C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
00013292                             
00013292                            ; NineKode ends here.
00013292                            
00013292                            Obj01_RmvInvin:
00013292 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013298                            
00013298                            Obj01_ChkShoes:
00013298 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001329C 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001329E 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000132A2 6700                       		beq.s	Obj01_ExitChk
000132A4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132A8 6600                       		bne.s	Obj01_ExitChk
000132AA 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132B0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132B6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132BC 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132C2 303C 00E3                  		move.w	#$E3,d0
000132C6 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000132CC                            ; ===========================================================================
000132CC                            
000132CC                            Obj01_ExitChk:
000132CC 4E75                       		rts	
000132CE                            
000132CE                            ; ---------------------------------------------------------------------------
000132CE                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000132CE                            ; ---------------------------------------------------------------------------
000132CE                            
000132CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132CE                            
000132CE                            
000132CE                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000132CE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000132D2 43F8 CB00                  		lea	($FFFFCB00).w,a1
000132D6 43F1 0000                  		lea	(a1,d0.w),a1
000132DA 32E8 0008                  		move.w	8(a0),(a1)+
000132DE 32E8 000C                  		move.w	$C(a0),(a1)+
000132E2 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000132E6 4E75                       		rts	
000132E8                            ; End of function Sonic_RecordPos
000132E8                            
000132E8                            ; ---------------------------------------------------------------------------
000132E8                            ; Subroutine for Sonic when he's underwater
000132E8                            ; ---------------------------------------------------------------------------
000132E8                            
000132E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E8                            
000132E8                            
000132E8                            Sonic_Water:				; XREF: loc_12C7E
000132E8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000132EE 6700                       		beq.s	Obj01_InWater	; if yes, branch
000132F0                            
000132F0                            locret_12D80:
000132F0 4E75                       		rts	
000132F2                            ; ===========================================================================
000132F2                            
000132F2                            Obj01_InWater:
000132F2 3038 F646                  		move.w	($FFFFF646).w,d0
000132F6 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000132FA 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000132FC 08E8 0006 0022             		bset	#6,$22(a0)
00013302 66EC                       		bne.s	locret_12D80
00013304 6100 0000                  		bsr.w	ResumeMusic
00013308 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001330E 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013314 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001331A 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013320 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013326 E0E8 0010                  		asr	$10(a0)
0001332A E0E8 0012                  		asr	$12(a0)
0001332E E0E8 0012                  		asr	$12(a0)
00013332 67BC                       		beq.s	locret_12D80
00013334 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001333A 303C 00AA                  		move.w	#$AA,d0
0001333E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013344                            ; ===========================================================================
00013344                            
00013344                            Obj01_OutWater:
00013344 08A8 0006 0022             		bclr	#6,$22(a0)
0001334A 67A4                       		beq.s	locret_12D80
0001334C 6100 0000                  		bsr.w	ResumeMusic
00013350 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013356 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001335C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013362 E1E8 0012                  		asl	$12(a0)
00013366 6700 FF88                  		beq.w	locret_12D80
0001336A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013370 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013376 6E00                       		bgt.s	loc_12E0E
00013378 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001337E                            
0001337E                            loc_12E0E:
0001337E 303C 00AA                  		move.w	#$AA,d0
00013382 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013388                            ; End of function Sonic_Water
00013388                            
00013388                            ; ===========================================================================
00013388                            ; ---------------------------------------------------------------------------
00013388                            ; Modes	for controlling	Sonic
00013388                            ; ---------------------------------------------------------------------------
00013388                            
00013388                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013388 6100 0000                  		bsr.w	Sonic_Jump
0001338C 6100 0000                  		bsr.w	Sonic_SlopeResist
00013390 6100 0000                  		bsr.w	Sonic_Move
00013394 6100 0000                  		bsr.w	Sonic_Roll
00013398 6100 0000                  		bsr.w	Sonic_LevelBound
0001339C 4EBA A7B6                  		jsr	SpeedToPos
000133A0 6100 0000                  		bsr.w	Sonic_AnglePos
000133A4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133A8 4E75                       		rts	
000133AA                            ; ===========================================================================
000133AA                            
000133AA                            Obj01_MdJump:				; XREF: Obj01_Modes
000133AA 6100 0000                  		bsr.w	Sonic_JumpHeight
000133AE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133B2 6100 0000                  		bsr.w	Sonic_LevelBound
000133B6 4EBA A770                  		jsr	ObjectFall
000133BA 0828 0006 0022             		btst	#6,$22(a0)
000133C0 6700                       		beq.s	loc_12E5C
000133C2 0468 0028 0012             		subi.w	#$28,$12(a0)
000133C8                            
000133C8                            loc_12E5C:
000133C8 6100 0000                  		bsr.w	Sonic_JumpAngle
000133CC 6100 0000                  		bsr.w	Sonic_Floor
000133D0 4E75                       		rts	
000133D2                            ; ===========================================================================
000133D2                            
000133D2                            Obj01_MdRoll:				; XREF: Obj01_Modes
000133D2 6100 0000                  		bsr.w	Sonic_Jump
000133D6 6100 0000                  		bsr.w	Sonic_RollRepel
000133DA 6100 0000                  		bsr.w	Sonic_RollSpeed
000133DE 6100 0000                  		bsr.w	Sonic_LevelBound
000133E2 4EBA A770                  		jsr	SpeedToPos
000133E6 6100 0000                  		bsr.w	Sonic_AnglePos
000133EA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133EE 4E75                       		rts	
000133F0                            ; ===========================================================================
000133F0                            
000133F0                            Obj01_MdJump2:				; XREF: Obj01_Modes
000133F0 6100 0000                  		bsr.w	Sonic_JumpHeight
000133F4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133F8 6100 0000                  		bsr.w	Sonic_LevelBound
000133FC 6100 0000                  		bsr.w	Sonic_AirUnroll
00013400 4EBA A726                  		jsr	ObjectFall
00013404 0828 0006 0022             		btst	#6,$22(a0)
0001340A 6700                       		beq.s	loc_12EA6
0001340C 0468 0028 0012             		subi.w	#$28,$12(a0)
00013412                            
00013412                            loc_12EA6:
00013412 6100 0000                  		bsr.w	Sonic_JumpAngle
00013416 6100 0000                  		bsr.w	Sonic_Floor
0001341A 4E75                       		rts	
0001341C                            ; ---------------------------------------------------------------------------
0001341C                            ; Subroutine to	make Sonic walk/run
0001341C                            ; ---------------------------------------------------------------------------
0001341C                            
0001341C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001341C                            
0001341C                            
0001341C                            Sonic_Move:				; XREF: Obj01_MdNormal
0001341C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013420 3A38 F762                  		move.w	($FFFFF762).w,d5
00013424 3838 F764                  		move.w	($FFFFF764).w,d4
00013428 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001342C 6600 0000                  		bne.w	loc_12FEE
00013430 4A68 003E                  		tst.w	$3E(a0)
00013434 6600 0000                  		bne.w	Obj01_ResetScr
00013438 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001343E 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013440 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013446 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013448 6100 0000                  		bsr.w	Sonic_MoveLeft
0001344C                            
0001344C                            Obj01_NotLeft:
0001344C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013452 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013454 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001345A 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001345C 6100 0000                  		bsr.w	Sonic_MoveLeft
00013460 6000                       		bra.s	Obj01_NotRight
00013462                            
00013462                            Obj01_MoveRight:
00013462 6100 0000                  		bsr.w	Sonic_MoveRight
00013466                            
00013466                            Obj01_NotRight:
00013466 1028 0026                  		move.b	$26(a0),d0
0001346A 0600 0020                  		addi.b	#$20,d0
0001346E 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013472 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013476 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001347A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001347E 08A8 0005 0022             		bclr	#5,$22(a0)
00013484 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001348A 0828 0003 0022             		btst	#3,$22(a0)
00013490 6700                       		beq.s	Sonic_Balance
00013492 7000                       		moveq	#0,d0
00013494 1028 003D                  		move.b	$3D(a0),d0
00013498 ED48                       		lsl.w	#6,d0
0001349A 43F8 D000                  		lea	($FFFFD000).w,a1
0001349E 43F1 0000                  		lea	(a1,d0.w),a1
000134A2 4A29 0022                  		tst.b	$22(a1)
000134A6 6B00                       		bmi.s	Sonic_LookUp
000134A8 7200                       		moveq	#0,d1
000134AA 1229 0019                  		move.b	$19(a1),d1
000134AE 3401                       		move.w	d1,d2
000134B0 D442                       		add.w	d2,d2
000134B2 5942                       		subq.w	#4,d2
000134B4 D268 0008                  		add.w	8(a0),d1
000134B8 9269 0008                  		sub.w	8(a1),d1
000134BC 0C41 0004                  		cmpi.w	#4,d1
000134C0 6D00                       		blt.s	loc_12F6A
000134C2 B242                       		cmp.w	d2,d1
000134C4 6C00                       		bge.s	loc_12F5A
000134C6 6000                       		bra.s	Sonic_LookUp
000134C8                            ; ===========================================================================
000134C8                            
000134C8                            Sonic_Balance:
000134C8 4EB9 0000 0000             		jsr	ObjHitFloor
000134CE 0C41 000C                  		cmpi.w	#$C,d1
000134D2 6D00                       		blt.s	Sonic_LookUp
000134D4 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000134DA 6600                       		bne.s	loc_12F62
000134DC                            
000134DC                            loc_12F5A:
000134DC 08A8 0000 0022             		bclr	#0,$22(a0)
000134E2 6000                       		bra.s	loc_12F70
000134E4                            ; ===========================================================================
000134E4                            
000134E4                            loc_12F62:
000134E4 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000134EA 6600                       		bne.s	Sonic_LookUp
000134EC                            
000134EC                            loc_12F6A:
000134EC 08E8 0000 0022             		bset	#0,$22(a0)
000134F2                            
000134F2                            loc_12F70:
000134F2 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000134F8 6000                       		bra.s	Obj01_ResetScr
000134FA                            ; ===========================================================================
000134FA                            
000134FA                            Sonic_LookUp:
000134FA 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013500 6700                       		beq.s	Sonic_Duck	; if not, branch
00013502 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013508 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001350E 6700                       		beq.s	loc_12FC2
00013510 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013514 6000                       		bra.s	loc_12FC2
00013516                            ; ===========================================================================
00013516                            
00013516                            Sonic_Duck:
00013516 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001351C 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001351E 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013524 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001352A 6700                       		beq.s	loc_12FC2
0001352C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013530 6000                       		bra.s	loc_12FC2
00013532                            ; ===========================================================================
00013532                            
00013532                            Obj01_ResetScr:
00013532 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013538 6700                       		beq.s	loc_12FC2	; if yes, branch
0001353A 6400                       		bcc.s	loc_12FBE
0001353C 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013540                            
00013540                            loc_12FBE:
00013540 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013544                            
00013544                            loc_12FC2:
00013544 1038 F602                  		move.b	($FFFFF602).w,d0
00013548 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001354C 6600                       		bne.s	loc_12FEE	; if yes, branch
0001354E 3028 0014                  		move.w	$14(a0),d0
00013552 6700                       		beq.s	loc_12FEE
00013554 6B00                       		bmi.s	loc_12FE2
00013556 9045                       		sub.w	d5,d0
00013558 6400                       		bcc.s	loc_12FDC
0001355A 303C 0000                  		move.w	#0,d0
0001355E                            
0001355E                            loc_12FDC:
0001355E 3140 0014                  		move.w	d0,$14(a0)
00013562 6000                       		bra.s	loc_12FEE
00013564                            ; ===========================================================================
00013564                            
00013564                            loc_12FE2:
00013564 D045                       		add.w	d5,d0
00013566 6400                       		bcc.s	loc_12FEA
00013568 303C 0000                  		move.w	#0,d0
0001356C                            
0001356C                            loc_12FEA:
0001356C 3140 0014                  		move.w	d0,$14(a0)
00013570                            
00013570                            loc_12FEE:
00013570 1028 0026                  		move.b	$26(a0),d0
00013574 4EB9 0000 2C22             		jsr	(CalcSine).l
0001357A C3E8 0014                  		muls.w	$14(a0),d1
0001357E E081                       		asr.l	#8,d1
00013580 3141 0010                  		move.w	d1,$10(a0)
00013584 C1E8 0014                  		muls.w	$14(a0),d0
00013588 E080                       		asr.l	#8,d0
0001358A 3140 0012                  		move.w	d0,$12(a0)
0001358E                            
0001358E                            loc_1300C:
0001358E 1028 0026                  		move.b	$26(a0),d0
00013592 0600 0040                  		addi.b	#$40,d0
00013596 6B00                       		bmi.s	locret_1307C
00013598 123C 0040                  		move.b	#$40,d1
0001359C 4A68 0014                  		tst.w	$14(a0)
000135A0 6700                       		beq.s	locret_1307C
000135A2 6B00                       		bmi.s	loc_13024
000135A4 4441                       		neg.w	d1
000135A6                            
000135A6                            loc_13024:
000135A6 1028 0026                  		move.b	$26(a0),d0
000135AA D001                       		add.b	d1,d0
000135AC 3F00                       		move.w	d0,-(sp)
000135AE 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135B2 301F                       		move.w	(sp)+,d0
000135B4 4A41                       		tst.w	d1
000135B6 6A00                       		bpl.s	locret_1307C
000135B8 E141                       		asl.w	#8,d1
000135BA 0600 0020                  		addi.b	#$20,d0
000135BE 0200 00C0                  		andi.b	#$C0,d0
000135C2 6700                       		beq.s	loc_13078
000135C4 0C00 0040                  		cmpi.b	#$40,d0
000135C8 6700                       		beq.s	loc_13066
000135CA 0C00 0080                  		cmpi.b	#$80,d0
000135CE 6700                       		beq.s	loc_13060
000135D0 D368 0010                  		add.w	d1,$10(a0)
000135D4 08E8 0005 0022             		bset	#5,$22(a0)
000135DA 317C 0000 0014             		move.w	#0,$14(a0)
000135E0 4E75                       		rts	
000135E2                            ; ===========================================================================
000135E2                            
000135E2                            loc_13060:
000135E2 9368 0012                  		sub.w	d1,$12(a0)
000135E6 4E75                       		rts	
000135E8                            ; ===========================================================================
000135E8                            
000135E8                            loc_13066:
000135E8 9368 0010                  		sub.w	d1,$10(a0)
000135EC 08E8 0005 0022             		bset	#5,$22(a0)
000135F2 317C 0000 0014             		move.w	#0,$14(a0)
000135F8 4E75                       		rts	
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            loc_13078:
000135FA D368 0012                  		add.w	d1,$12(a0)
000135FE                            
000135FE                            locret_1307C:
000135FE 4E75                       		rts	
00013600                            ; End of function Sonic_Move
00013600                            
00013600                            
00013600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013600                            
00013600                            
00013600                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013600 3028 0014                  		move.w	$14(a0),d0
00013604 6700                       		beq.s	loc_13086
00013606 6A00                       		bpl.s	loc_130B2
00013608                            
00013608                            loc_13086:
00013608 08E8 0000 0022             		bset	#0,$22(a0)
0001360E 6600                       		bne.s	loc_1309A
00013610 08A8 0005 0022             		bclr	#5,$22(a0)
00013616 117C 0001 001D             		move.b	#1,$1D(a0)
0001361C                            
0001361C                            loc_1309A:
0001361C 9045                       		sub.w	d5,d0
0001361E 3206                       		move.w	d6,d1
00013620 4441                       		neg.w	d1
00013622 B041                       		cmp.w	d1,d0
00013624 6E00                       		bgt.s	loc_130A6
00013626 3001                       		move.w	d1,d0
00013628                            
00013628                            loc_130A6:
00013628 3140 0014                  		move.w	d0,$14(a0)
0001362C 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013632 4E75                       		rts	
00013634                            ; ===========================================================================
00013634                            
00013634                            loc_130B2:				; XREF: Sonic_MoveLeft
00013634 9044                       		sub.w	d4,d0
00013636 6400                       		bcc.s	loc_130BA
00013638 303C FF80                  		move.w	#-$80,d0
0001363C                            
0001363C                            loc_130BA:
0001363C 3140 0014                  		move.w	d0,$14(a0)
00013640 1028 0026                  		move.b	$26(a0),d0
00013644 0600 0020                  		addi.b	#$20,d0
00013648 0200 00C0                  		andi.b	#$C0,d0
0001364C 6600                       		bne.s	locret_130E8
0001364E 0C40 0400                  		cmpi.w	#$400,d0
00013652 6D00                       		blt.s	locret_130E8
00013654 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001365A 08A8 0000 0022             		bclr	#0,$22(a0)
00013660 303C 00A4                  		move.w	#$A4,d0
00013664 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
0001366A                            
0001366A                            locret_130E8:
0001366A 4E75                       		rts	
0001366C                            ; End of function Sonic_MoveLeft
0001366C                            
0001366C                            
0001366C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001366C                            
0001366C                            
0001366C                            Sonic_MoveRight:			; XREF: Sonic_Move
0001366C 3028 0014                  		move.w	$14(a0),d0
00013670 6B00                       		bmi.s	loc_13118
00013672 08A8 0000 0022             		bclr	#0,$22(a0)
00013678 6700                       		beq.s	loc_13104
0001367A 08A8 0005 0022             		bclr	#5,$22(a0)
00013680 117C 0001 001D             		move.b	#1,$1D(a0)
00013686                            
00013686                            loc_13104:
00013686 D045                       		add.w	d5,d0
00013688 B046                       		cmp.w	d6,d0
0001368A 6D00                       		blt.s	loc_1310C
0001368C 3006                       		move.w	d6,d0
0001368E                            
0001368E                            loc_1310C:
0001368E 3140 0014                  		move.w	d0,$14(a0)
00013692 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013698 4E75                       		rts	
0001369A                            ; ===========================================================================
0001369A                            
0001369A                            loc_13118:				; XREF: Sonic_MoveRight
0001369A D044                       		add.w	d4,d0
0001369C 6400                       		bcc.s	loc_13120
0001369E 303C 0080                  		move.w	#$80,d0
000136A2                            
000136A2                            loc_13120:
000136A2 3140 0014                  		move.w	d0,$14(a0)
000136A6 1028 0026                  		move.b	$26(a0),d0
000136AA 0600 0020                  		addi.b	#$20,d0
000136AE 0200 00C0                  		andi.b	#$C0,d0
000136B2 6600                       		bne.s	locret_1314E
000136B4 0C40 FC00                  		cmpi.w	#-$400,d0
000136B8 6E00                       		bgt.s	locret_1314E
000136BA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136C0 08E8 0000 0022             		bset	#0,$22(a0)
000136C6 303C 00A4                  		move.w	#$A4,d0
000136CA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136D0                            
000136D0                            locret_1314E:
000136D0 4E75                       		rts	
000136D2                            ; End of function Sonic_MoveRight
000136D2                            
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            ; Subroutine to	change Sonic's speed as he rolls
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            
000136D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136D2                            
000136D2                            
000136D2                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000136D2 3C38 F760                  		move.w	($FFFFF760).w,d6
000136D6 E346                       		asl.w	#1,d6
000136D8 3A38 F762                  		move.w	($FFFFF762).w,d5
000136DC E245                       		asr.w	#1,d5
000136DE 3838 F764                  		move.w	($FFFFF764).w,d4
000136E2 E444                       		asr.w	#2,d4
000136E4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136E8 6600 0000                  		bne.w	loc_131CC
000136EC 4A68 003E                  		tst.w	$3E(a0)
000136F0 6600                       		bne.s	loc_13188
000136F2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136F8 6700                       		beq.s	loc_1317C	; if not, branch
000136FA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013700 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013702 6100 0000                  		bsr.w	Sonic_RollLeft
00013706                            
00013706                            loc_1317C:
00013706 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001370C 6700                       		beq.s	loc_13188	; if not, branch
0001370E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013714 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013716 6100 0000                  		bsr.w	Sonic_RollLeft
0001371A 6000                       		bra.s	loc_13188
0001371C                            
0001371C                            SonicRS_RollRight:
0001371C 6100 0000                  		bsr.w	Sonic_RollRight
00013720                            
00013720                            loc_13188:
00013720 3028 0014                  		move.w	$14(a0),d0
00013724 6700                       		beq.s	loc_131AA
00013726 6B00                       		bmi.s	loc_1319E
00013728 9045                       		sub.w	d5,d0
0001372A 6400                       		bcc.s	loc_13198
0001372C 303C 0000                  		move.w	#0,d0
00013730                            
00013730                            loc_13198:
00013730 3140 0014                  		move.w	d0,$14(a0)
00013734 6000                       		bra.s	loc_131AA
00013736                            ; ===========================================================================
00013736                            
00013736                            loc_1319E:				; XREF: Sonic_RollSpeed
00013736 D045                       		add.w	d5,d0
00013738 6400                       		bcc.s	loc_131A6
0001373A 303C 0000                  		move.w	#0,d0
0001373E                            
0001373E                            loc_131A6:
0001373E 3140 0014                  		move.w	d0,$14(a0)
00013742                            
00013742                            loc_131AA:
00013742 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013746 6600                       		bne.s	loc_131CC	; if yes, branch
00013748 08A8 0002 0022             		bclr	#2,$22(a0)
0001374E 117C 0013 0016             		move.b	#$13,$16(a0)
00013754 117C 0009 0017             		move.b	#9,$17(a0)
0001375A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013760 5B68 000C                  		subq.w	#5,$C(a0)
00013764                            
00013764                            loc_131CC:
00013764 1028 0026                  		move.b	$26(a0),d0
00013768 4EB9 0000 2C22             		jsr	(CalcSine).l
0001376E C1E8 0014                  		muls.w	$14(a0),d0
00013772 E080                       		asr.l	#8,d0
00013774 3140 0012                  		move.w	d0,$12(a0)
00013778 C3E8 0014                  		muls.w	$14(a0),d1
0001377C E081                       		asr.l	#8,d1
0001377E 0C41 1000                  		cmpi.w	#$1000,d1
00013782 6F00                       		ble.s	loc_131F0
00013784 323C 1000                  		move.w	#$1000,d1
00013788                            
00013788                            loc_131F0:
00013788 0C41 F000                  		cmpi.w	#-$1000,d1
0001378C 6C00                       		bge.s	loc_131FA
0001378E 323C F000                  		move.w	#-$1000,d1
00013792                            
00013792                            loc_131FA:
00013792 3141 0010                  		move.w	d1,$10(a0)
00013796 6000 FDF6                  		bra.w	loc_1300C
0001379A                            ; End of function Sonic_RollSpeed
0001379A                            
0001379A                            
0001379A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001379A                            
0001379A                            
0001379A                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001379A 3028 0014                  		move.w	$14(a0),d0
0001379E 6700                       		beq.s	loc_1320A
000137A0 6A00                       		bpl.s	loc_13218
000137A2                            
000137A2                            loc_1320A:
000137A2 08E8 0000 0022             		bset	#0,$22(a0)
000137A8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137AE 4E75                       		rts	
000137B0                            ; ===========================================================================
000137B0                            
000137B0                            loc_13218:
000137B0 9044                       		sub.w	d4,d0
000137B2 6400                       		bcc.s	loc_13220
000137B4 303C FF80                  		move.w	#-$80,d0
000137B8                            
000137B8                            loc_13220:
000137B8 3140 0014                  		move.w	d0,$14(a0)
000137BC 4E75                       		rts	
000137BE                            ; End of function Sonic_RollLeft
000137BE                            
000137BE                            
000137BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137BE                            
000137BE                            
000137BE                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137BE 3028 0014                  		move.w	$14(a0),d0
000137C2 6B00                       		bmi.s	loc_1323A
000137C4 08A8 0000 0022             		bclr	#0,$22(a0)
000137CA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137D0 4E75                       		rts	
000137D2                            ; ===========================================================================
000137D2                            
000137D2                            loc_1323A:
000137D2 D044                       		add.w	d4,d0
000137D4 6400                       		bcc.s	loc_13242
000137D6 303C 0080                  		move.w	#$80,d0
000137DA                            
000137DA                            loc_13242:
000137DA 3140 0014                  		move.w	d0,$14(a0)
000137DE 4E75                       		rts	
000137E0                            ; End of function Sonic_RollRight
000137E0                            
000137E0                            Sonic_AirUnroll:
000137E0                            		
000137E0 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000137E4 6600                       		bne.s	@timer
000137E6 1038 F605                  		move.b	($FFFFF605).w,d0
000137EA 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000137EE 6700                       		beq.s	@end	; if not, branch
000137F0 08A8 0002 0022             		bclr	#2,$22(a0)
000137F6 117C 0013 0016             		move.b	#$13,$16(a0)
000137FC 117C 0009 0017             		move.b	#9,$17(a0)
00013802 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013808 2028 0010                  		move.l	$10(a0),d0
0001380C D080                       		add.l	d0,d0
0001380E 2140 0010                  		move.l	d0,$10(a0)
00013812 5B68 000C                  		subq.w	#5,$C(a0)
00013816                            	@end:
00013816 4E75                       		rts
00013818                            	@timer:
00013818 5328 003A                  		subq.b	#1,$3A(a0)
0001381C 4E75                       		rts
0001381E                            
0001381E                            ; ---------------------------------------------------------------------------
0001381E                            ; Subroutine to	change Sonic's direction while jumping
0001381E                            ; ---------------------------------------------------------------------------
0001381E                            
0001381E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001381E                            
0001381E                            
0001381E                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001381E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013822 3A38 F762                  		move.w	($FFFFF762).w,d5
00013826 E345                       		asl.w	#1,d5
00013828 0828 0004 0022             		btst	#4,$22(a0)
0001382E 6600                       		bne.s	Obj01_ResetScr2
00013830 3028 0010                  		move.w	$10(a0),d0
00013834 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001383A 6700                       		beq.s	loc_13278	; if not, branch
0001383C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013842 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013844 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013848 6E00                       		bgt.s	loc_13278
0001384A 3001                       		move.w	d1,d0
0001384C                            
0001384C                            loc_13278:
0001384C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013852 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013854 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001385A 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001385C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013860 6E00                       		bgt.s	Obj01_JumpMove
00013862 3001                       		move.w	d1,d0
00013864 6000                       		bra.s	Obj01_JumpMove
00013866                            
00013866                            SonicCJD_JumpLeft:
00013866 08E8 0000 0022             		bset	#0,$22(a0)
0001386C 9045                       		sub.w	d5,d0
0001386E 3206                       		move.w	d6,d1
00013870 4441                       		neg.w	d1
00013872 B041                       		cmp.w	d1,d0
00013874                            		; bgt.s	loc_13278
00013874                            		; move.w	d1,d0
00013874 4E75                       		rts
00013876                            
00013876                            SonicCJD_JumpRight:
00013876 08A8 0000 0022             		bclr	#0,$22(a0)
0001387C D045                       		add.w	d5,d0
0001387E B046                       		cmp.w	d6,d0
00013880 6D00                       		blt.s	Obj01_JumpMove
00013882 3006                       		move.w	d6,d0
00013884                            
00013884                            Obj01_JumpMove:
00013884 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013888                            
00013888                            Obj01_ResetScr2:
00013888 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001388E 6700                       		beq.s	loc_132A4	; if yes, branch
00013890 6400                       		bcc.s	loc_132A0
00013892 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013896                            
00013896                            loc_132A0:
00013896 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001389A                            
0001389A                            loc_132A4:
0001389A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000138A0 6500                       		bcs.s	locret_132D2	; if yes, branch
000138A2 3028 0010                  		move.w	$10(a0),d0
000138A6 3200                       		move.w	d0,d1
000138A8 EA41                       		asr.w	#5,d1
000138AA 6700                       		beq.s	locret_132D2
000138AC 6B00                       		bmi.s	loc_132C6
000138AE 9041                       		sub.w	d1,d0
000138B0 6400                       		bcc.s	loc_132C0
000138B2 303C 0000                  		move.w	#0,d0
000138B6                            
000138B6                            loc_132C0:
000138B6 3140 0010                  		move.w	d0,$10(a0)
000138BA 4E75                       		rts	
000138BC                            ; ===========================================================================
000138BC                            
000138BC                            loc_132C6:
000138BC 9041                       		sub.w	d1,d0
000138BE 6500                       		bcs.s	loc_132CE
000138C0 303C 0000                  		move.w	#0,d0
000138C4                            
000138C4                            loc_132CE:
000138C4 3140 0010                  		move.w	d0,$10(a0)
000138C8                            
000138C8                            locret_132D2:
000138C8 4E75                       		rts	
000138CA                            ; End of function Sonic_ChgJumpDir
000138CA                            
000138CA                            ; ===========================================================================
000138CA                            ; ---------------------------------------------------------------------------
000138CA                            ; Unused subroutine to squash Sonic
000138CA                            ; ---------------------------------------------------------------------------
000138CA 1028 0026                  		move.b	$26(a0),d0
000138CE 0600 0020                  		addi.b	#$20,d0
000138D2 0200 00C0                  		andi.b	#$C0,d0
000138D6 6600                       		bne.s	locret_13302
000138D8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138DC 4A41                       		tst.w	d1
000138DE 6A00                       		bpl.s	locret_13302
000138E0 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138E6 317C 0000 0010             		move.w	#0,$10(a0)
000138EC 317C 0000 0012             		move.w	#0,$12(a0)
000138F2 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138F8                            
000138F8                            locret_13302:
000138F8 4E75                       		rts	
000138FA                            ; ---------------------------------------------------------------------------
000138FA                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138FA                            ; ---------------------------------------------------------------------------
000138FA                            
000138FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138FA                            
000138FA                            
000138FA                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138FA 2228 0008                  		move.l	8(a0),d1
000138FE 3028 0010                  		move.w	$10(a0),d0
00013902 48C0                       		ext.l	d0
00013904 E180                       		asl.l	#8,d0
00013906 D280                       		add.l	d0,d1
00013908 4841                       		swap	d1
0001390A 3038 F728                  		move.w	($FFFFF728).w,d0
0001390E 0640 0010                  		addi.w	#$10,d0
00013912 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013914 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013916 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001391A 0640 0128                  		addi.w	#$128,d0
0001391E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013922 6600                       		bne.s	loc_13332
00013924 0640 0040                  		addi.w	#$40,d0
00013928                            
00013928                            loc_13332:
00013928 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001392A 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001392C                            
0001392C                            loc_13336:
0001392C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013930 0640 00E0                  		addi.w	#$E0,d0
00013934 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013938 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001393A 4E75                       		rts	
0001393C                            ; ===========================================================================
0001393C                            
0001393C                            Boundary_Bottom:
0001393C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013942 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013946 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001394C 6500 0000                  		bcs.w	KillSonic
00013950 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013954 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001395A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013960 4E75                       		rts	
00013962                            ; ===========================================================================
00013962                            
00013962                            Boundary_Sides:
00013962 3140 0008                  		move.w	d0,8(a0)
00013966 317C 0000 000A             		move.w	#0,$A(a0)
0001396C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013972 317C 0000 0014             		move.w	#0,$14(a0)
00013978 60B2                       		bra.s	loc_13336
0001397A                            ; End of function Sonic_LevelBound
0001397A                            
0001397A                            ; ---------------------------------------------------------------------------
0001397A                            ; Subroutine allowing Sonic to roll when he's moving
0001397A                            ; ---------------------------------------------------------------------------
0001397A                            
0001397A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001397A                            
0001397A                            
0001397A                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001397A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001397E 6600                       		bne.s	Obj01_NoRoll
00013980 3028 0014                  		move.w	$14(a0),d0
00013984 6A00                       		bpl.s	loc_13392
00013986 4440                       		neg.w	d0
00013988                            
00013988                            loc_13392:
00013988 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001398C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
0001398E 1038 F602                  		move.b	($FFFFF602).w,d0
00013992 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013996 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013998 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001399E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000139A0                            
000139A0                            Obj01_NoRoll:
000139A0 4E75                       		rts	
000139A2                            ; ===========================================================================
000139A2                            
000139A2                            Obj01_ChkRoll:
000139A2 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000139A8 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000139AA 4E75                       		rts	
000139AC                            ; ===========================================================================
000139AC                            
000139AC                            Obj01_DoRoll:
000139AC 08E8 0002 0022             		bset	#2,$22(a0)
000139B2 117C 000E 0016             		move.b	#$E,$16(a0)
000139B8 117C 0007 0017             		move.b	#7,$17(a0)
000139BE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139C4 5A68 000C                  		addq.w	#5,$C(a0)
000139C8 303C 00BE                  		move.w	#$BE,d0
000139CC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
000139D2 4A68 0014                  		tst.w	$14(a0)
000139D6 6600                       		bne.s	locret_133E8
000139D8 317C 0200 0014             		move.w	#$200,$14(a0)
000139DE                            
000139DE                            locret_133E8:
000139DE 4E75                       		rts	
000139E0                            ; End of function Sonic_Roll
000139E0                            
000139E0                            ; ---------------------------------------------------------------------------
000139E0                            ; Subroutine allowing Sonic to jump
000139E0                            ; ---------------------------------------------------------------------------
000139E0                            
000139E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139E0                            
000139E0                            
000139E0                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139E0 1038 F603                  		move.b	($FFFFF603).w,d0
000139E4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139E8 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139EC 7000                       		moveq	#0,d0
000139EE 1028 0026                  		move.b	$26(a0),d0
000139F2 0600 0080                  		addi.b	#$80,d0
000139F6 6100 0000                  		bsr.w	sub_14D48
000139FA 0C41 0006                  		cmpi.w	#6,d1
000139FE 6D00 0000                  		blt.w	locret_1348E
00013A02 343C 0680                  		move.w	#$680,d2
00013A06 0828 0006 0022             		btst	#6,$22(a0)
00013A0C 6700                       		beq.s	loc_1341C
00013A0E 343C 0380                  		move.w	#$380,d2
00013A12                            
00013A12                            loc_1341C:
00013A12 7000                       		moveq	#0,d0
00013A14 1028 0026                  		move.b	$26(a0),d0
00013A18 0400 0040                  		subi.b	#$40,d0
00013A1C 4EB9 0000 2C22             		jsr	(CalcSine).l
00013A22 C3C2                       		muls.w	d2,d1
00013A24 E081                       		asr.l	#8,d1
00013A26 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013A2A C1C2                       		muls.w	d2,d0
00013A2C E080                       		asr.l	#8,d0
00013A2E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A32 08E8 0001 0022             		bset	#1,$22(a0)
00013A38 08A8 0005 0022             		bclr	#5,$22(a0)
00013A3E 588F                       		addq.l	#4,sp
00013A40 117C 0001 003C             		move.b	#1,$3C(a0)
00013A46 4228 0038                  		clr.b	$38(a0)
00013A4A 303C 00A0                  		move.w	#$A0,d0
00013A4E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A54 117C 0013 0016             		move.b	#$13,$16(a0)
00013A5A 117C 0009 0017             		move.b	#9,$17(a0)
00013A60 0828 0002 0022             		btst	#2,$22(a0)
00013A66 6600                       		bne.s	loc_13490
00013A68 117C 000E 0016             		move.b	#$E,$16(a0)
00013A6E 117C 0007 0017             		move.b	#7,$17(a0)
00013A74 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A7A 08E8 0002 0022             		bset	#2,$22(a0)
00013A80 5A68 000C                  		addq.w	#5,$C(a0)
00013A84 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013A8A                            
00013A8A                            locret_1348E:
00013A8A 4E75                       		rts	
00013A8C                            ; ===========================================================================
00013A8C                            
00013A8C                            loc_13490:
00013A8C 08E8 0004 0022             		bset	#4,$22(a0)
00013A92 4E75                       		rts	
00013A94                            ; End of function Sonic_Jump
00013A94                            
00013A94                            
00013A94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A94                            
00013A94                            
00013A94                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A94 4A28 003C                  		tst.b	$3C(a0)
00013A98 6700                       		beq.s	loc_134C4
00013A9A 323C FC00                  		move.w	#-$400,d1
00013A9E 0828 0006 0022             		btst	#6,$22(a0)
00013AA4 6700                       		beq.s	loc_134AE
00013AA6 323C FE00                  		move.w	#-$200,d1
00013AAA                            
00013AAA                            loc_134AE:
00013AAA B268 0012                  		cmp.w	$12(a0),d1
00013AAE 6F00                       		ble.s	locret_134C2
00013AB0 1038 F602                  		move.b	($FFFFF602).w,d0
00013AB4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013AB8 6600                       		bne.s	locret_134C2	; if yes, branch
00013ABA 3141 0012                  		move.w	d1,$12(a0)
00013ABE                            
00013ABE                            locret_134C2:
00013ABE 4E75                       		rts	
00013AC0                            ; ===========================================================================
00013AC0                            
00013AC0                            loc_134C4:
00013AC0 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013AC6 6C00                       		bge.s	locret_134D2
00013AC8 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013ACE                            
00013ACE                            locret_134D2:
00013ACE 4E75                       		rts	
00013AD0                            ; End of function Sonic_JumpHeight
00013AD0                            
00013AD0                            ; ---------------------------------------------------------------------------
00013AD0                            ; Subroutine to	slow Sonic walking up a	slope
00013AD0                            ; ---------------------------------------------------------------------------
00013AD0                            
00013AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AD0                            
00013AD0                            
00013AD0                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013AD0 1028 0026                  		move.b	$26(a0),d0
00013AD4 0600 0060                  		addi.b	#$60,d0
00013AD8 0C00 00C0                  		cmpi.b	#$C0,d0
00013ADC 6400                       		bcc.s	locret_13508
00013ADE 1028 0026                  		move.b	$26(a0),d0
00013AE2 4EB9 0000 2C22             		jsr	(CalcSine).l
00013AE8 C1FC 0020                  		muls.w	#$20,d0
00013AEC E080                       		asr.l	#8,d0
00013AEE 4A68 0014                  		tst.w	$14(a0)
00013AF2 6700                       		beq.s	locret_13508
00013AF4 6B00                       		bmi.s	loc_13504
00013AF6 4A40                       		tst.w	d0
00013AF8 6700                       		beq.s	locret_13502
00013AFA D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013AFE                            
00013AFE                            locret_13502:
00013AFE 4E75                       		rts	
00013B00                            ; ===========================================================================
00013B00                            
00013B00                            loc_13504:
00013B00 D168 0014                  		add.w	d0,$14(a0)
00013B04                            
00013B04                            locret_13508:
00013B04 4E75                       		rts	
00013B06                            ; End of function Sonic_SlopeResist
00013B06                            
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013B06                            ; ---------------------------------------------------------------------------
00013B06                            
00013B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B06                            
00013B06                            
00013B06                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013B06 1028 0026                  		move.b	$26(a0),d0
00013B0A 0600 0060                  		addi.b	#$60,d0
00013B0E 0C00 00C0                  		cmpi.b	#-$40,d0
00013B12 6400                       		bcc.s	locret_13544
00013B14 1028 0026                  		move.b	$26(a0),d0
00013B18 4EB9 0000 2C22             		jsr	(CalcSine).l
00013B1E C1FC 0050                  		muls.w	#$50,d0
00013B22 E080                       		asr.l	#8,d0
00013B24 4A68 0014                  		tst.w	$14(a0)
00013B28 6B00                       		bmi.s	loc_1353A
00013B2A 4A40                       		tst.w	d0
00013B2C 6A00                       		bpl.s	loc_13534
00013B2E E480                       		asr.l	#2,d0
00013B30                            
00013B30                            loc_13534:
00013B30 D168 0014                  		add.w	d0,$14(a0)
00013B34 4E75                       		rts	
00013B36                            ; ===========================================================================
00013B36                            
00013B36                            loc_1353A:
00013B36 4A40                       		tst.w	d0
00013B38 6B00                       		bmi.s	loc_13540
00013B3A E480                       		asr.l	#2,d0
00013B3C                            
00013B3C                            loc_13540:
00013B3C D168 0014                  		add.w	d0,$14(a0)
00013B40                            
00013B40                            locret_13544:
00013B40 4E75                       		rts	
00013B42                            ; End of function Sonic_RollRepel
00013B42                            
00013B42                            ; ---------------------------------------------------------------------------
00013B42                            ; Subroutine to	push Sonic down	a slope
00013B42                            ; ---------------------------------------------------------------------------
00013B42                            
00013B42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B42                            
00013B42                            
00013B42                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B42 4E71                       		nop	
00013B44 4A28 0038                  		tst.b	$38(a0)
00013B48 6600                       		bne.s	locret_13580
00013B4A 4A68 003E                  		tst.w	$3E(a0)
00013B4E 6600                       		bne.s	loc_13582
00013B50 1028 0026                  		move.b	$26(a0),d0
00013B54 0600 0020                  		addi.b	#$20,d0
00013B58 0200 00C0                  		andi.b	#$C0,d0
00013B5C 6700                       		beq.s	locret_13580
00013B5E 3028 0014                  		move.w	$14(a0),d0
00013B62 6A00                       		bpl.s	loc_1356A
00013B64 4440                       		neg.w	d0
00013B66                            
00013B66                            loc_1356A:
00013B66 0C40 0280                  		cmpi.w	#$280,d0
00013B6A 6400                       		bcc.s	locret_13580
00013B6C 4268 0014                  		clr.w	$14(a0)
00013B70 08E8 0001 0022             		bset	#1,$22(a0)
00013B76 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B7C                            
00013B7C                            locret_13580:
00013B7C 4E75                       		rts	
00013B7E                            ; ===========================================================================
00013B7E                            
00013B7E                            loc_13582:
00013B7E 5368 003E                  		subq.w	#1,$3E(a0)
00013B82 4E75                       		rts	
00013B84                            ; End of function Sonic_SlopeRepel
00013B84                            
00013B84                            ; ---------------------------------------------------------------------------
00013B84                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B84                            ; ---------------------------------------------------------------------------
00013B84                            
00013B84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B84                            
00013B84                            
00013B84                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B84 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B88 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B8A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B8C                            
00013B8C 5400                       		addq.b	#2,d0		; increase angle
00013B8E 6400                       		bcc.s	loc_13596
00013B90 7000                       		moveq	#0,d0
00013B92                            
00013B92                            loc_13596:
00013B92 6000                       		bra.s	loc_1359E
00013B94                            ; ===========================================================================
00013B94                            
00013B94                            loc_13598:
00013B94 5500                       		subq.b	#2,d0		; decrease angle
00013B96 6400                       		bcc.s	loc_1359E
00013B98 7000                       		moveq	#0,d0
00013B9A                            
00013B9A                            loc_1359E:
00013B9A 1140 0026                  		move.b	d0,$26(a0)
00013B9E                            
00013B9E                            locret_135A2:
00013B9E 4E75                       		rts	
00013BA0                            ; End of function Sonic_JumpAngle
00013BA0                            
00013BA0                            ; ---------------------------------------------------------------------------
00013BA0                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013BA0                            ; ---------------------------------------------------------------------------
00013BA0                            
00013BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BA0                            
00013BA0                            
00013BA0                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013BA0 3228 0010                  		move.w	$10(a0),d1
00013BA4 3428 0012                  		move.w	$12(a0),d2
00013BA8 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013BAE 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013BB2 0400 0020                  		subi.b	#$20,d0
00013BB6 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013BBA 0200 00C0                  		andi.b	#$C0,d0
00013BBE 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013BC2 0C00 0040                  		cmpi.b	#$40,d0
00013BC6 6700 0000                  		beq.w	loc_13680
00013BCA 0C00 0080                  		cmpi.b	#$80,d0
00013BCE 6700 0000                  		beq.w	loc_136E2
00013BD2 0C00 00C0                  		cmpi.b	#-$40,d0
00013BD6 6700 0000                  		beq.w	loc_1373E
00013BDA 6100 0000                  		bsr.w	Sonic_HitWall
00013BDE 4A41                       		tst.w	d1
00013BE0 6A00                       		bpl.s	loc_135F0
00013BE2 9368 0008                  		sub.w	d1,8(a0)
00013BE6 317C 0000 0010             		move.w	#0,$10(a0)
00013BEC                            
00013BEC                            loc_135F0:
00013BEC 6100 0000                  		bsr.w	sub_14EB4
00013BF0 4A41                       		tst.w	d1
00013BF2 6A00                       		bpl.s	loc_13602
00013BF4 D368 0008                  		add.w	d1,8(a0)
00013BF8 317C 0000 0010             		move.w	#0,$10(a0)
00013BFE                            
00013BFE                            loc_13602:
00013BFE 6100 0000                  		bsr.w	Sonic_HitFloor
00013C02 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013C06 4A41                       		tst.w	d1
00013C08 6A00                       		bpl.s	locret_1367E
00013C0A 1428 0012                  		move.b	$12(a0),d2
00013C0E 5002                       		addq.b	#8,d2
00013C10 4402                       		neg.b	d2
00013C12 B202                       		cmp.b	d2,d1
00013C14 6C00                       		bge.s	loc_1361E
00013C16 B002                       		cmp.b	d2,d0
00013C18 6D00                       		blt.s	locret_1367E
00013C1A                            
00013C1A                            loc_1361E:
00013C1A D368 000C                  		add.w	d1,$C(a0)
00013C1E 1143 0026                  		move.b	d3,$26(a0)
00013C22 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C26 117C 0000 001C             		move.b	#0,$1C(a0)
00013C2C 1003                       		move.b	d3,d0
00013C2E 0600 0020                  		addi.b	#$20,d0
00013C32 0200 0040                  		andi.b	#$40,d0
00013C36 6600                       		bne.s	loc_1365C
00013C38 1003                       		move.b	d3,d0
00013C3A 0600 0010                  		addi.b	#$10,d0
00013C3E 0200 0020                  		andi.b	#$20,d0
00013C42 6700                       		beq.s	loc_1364E
00013C44 E0E8 0012                  		asr	$12(a0)
00013C48 6000                       		bra.s	loc_13670
00013C4A                            ; ===========================================================================
00013C4A                            
00013C4A                            loc_1364E:
00013C4A 317C 0000 0012             		move.w	#0,$12(a0)
00013C50 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C56 4E75                       		rts	
00013C58                            ; ===========================================================================
00013C58                            
00013C58                            loc_1365C:
00013C58 317C 0000 0010             		move.w	#0,$10(a0)
00013C5E 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C64 6F00                       		ble.s	loc_13670
00013C66 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C6C                            
00013C6C                            loc_13670:
00013C6C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C72 4A03                       		tst.b	d3
00013C74 6A00                       		bpl.s	locret_1367E
00013C76 4468 0014                  		neg.w	$14(a0)
00013C7A                            
00013C7A                            locret_1367E:
00013C7A 4E75                       		rts	
00013C7C                            ; ===========================================================================
00013C7C                            
00013C7C                            loc_13680:
00013C7C 6100 0000                  		bsr.w	Sonic_HitWall
00013C80 4A41                       		tst.w	d1
00013C82 6A00                       		bpl.s	loc_1369A
00013C84 9368 0008                  		sub.w	d1,8(a0)
00013C88 317C 0000 0010             		move.w	#0,$10(a0)
00013C8E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C94 4E75                       		rts	
00013C96                            ; ===========================================================================
00013C96                            
00013C96                            loc_1369A:
00013C96 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C9A 4A41                       		tst.w	d1
00013C9C 6A00                       		bpl.s	loc_136B4
00013C9E 9368 000C                  		sub.w	d1,$C(a0)
00013CA2 4A68 0012                  		tst.w	$12(a0)
00013CA6 6A00                       		bpl.s	locret_136B2
00013CA8 317C 0000 0012             		move.w	#0,$12(a0)
00013CAE                            
00013CAE                            locret_136B2:
00013CAE 4E75                       		rts	
00013CB0                            ; ===========================================================================
00013CB0                            
00013CB0                            loc_136B4:
00013CB0 4A68 0012                  		tst.w	$12(a0)
00013CB4 6B00                       		bmi.s	locret_136E0
00013CB6 6100 0000                  		bsr.w	Sonic_HitFloor
00013CBA 4A41                       		tst.w	d1
00013CBC 6A00                       		bpl.s	locret_136E0
00013CBE D368 000C                  		add.w	d1,$C(a0)
00013CC2 1143 0026                  		move.b	d3,$26(a0)
00013CC6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CCA 117C 0000 001C             		move.b	#0,$1C(a0)
00013CD0 317C 0000 0012             		move.w	#0,$12(a0)
00013CD6 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CDC                            
00013CDC                            locret_136E0:
00013CDC 4E75                       		rts	
00013CDE                            ; ===========================================================================
00013CDE                            
00013CDE                            loc_136E2:
00013CDE 6100 0000                  		bsr.w	Sonic_HitWall
00013CE2 4A41                       		tst.w	d1
00013CE4 6A00                       		bpl.s	loc_136F4
00013CE6 9368 0008                  		sub.w	d1,8(a0)
00013CEA 317C 0000 0010             		move.w	#0,$10(a0)
00013CF0                            
00013CF0                            loc_136F4:
00013CF0 6100 0000                  		bsr.w	sub_14EB4
00013CF4 4A41                       		tst.w	d1
00013CF6 6A00                       		bpl.s	loc_13706
00013CF8 D368 0008                  		add.w	d1,8(a0)
00013CFC 317C 0000 0010             		move.w	#0,$10(a0)
00013D02                            
00013D02                            loc_13706:
00013D02 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D06 4A41                       		tst.w	d1
00013D08 6A00                       		bpl.s	locret_1373C
00013D0A 9368 000C                  		sub.w	d1,$C(a0)
00013D0E 1003                       		move.b	d3,d0
00013D10 0600 0020                  		addi.b	#$20,d0
00013D14 0200 0040                  		andi.b	#$40,d0
00013D18 6600                       		bne.s	loc_13726
00013D1A 317C 0000 0012             		move.w	#0,$12(a0)
00013D20 4E75                       		rts	
00013D22                            ; ===========================================================================
00013D22                            
00013D22                            loc_13726:
00013D22 1143 0026                  		move.b	d3,$26(a0)
00013D26 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D2A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D30 4A03                       		tst.b	d3
00013D32 6A00                       		bpl.s	locret_1373C
00013D34 4468 0014                  		neg.w	$14(a0)
00013D38                            
00013D38                            locret_1373C:
00013D38 4E75                       		rts	
00013D3A                            ; ===========================================================================
00013D3A                            
00013D3A                            loc_1373E:
00013D3A 6100 0000                  		bsr.w	sub_14EB4
00013D3E 4A41                       		tst.w	d1
00013D40 6A00                       		bpl.s	loc_13758
00013D42 D368 0008                  		add.w	d1,8(a0)
00013D46 317C 0000 0010             		move.w	#0,$10(a0)
00013D4C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D52 4E75                       		rts	
00013D54                            ; ===========================================================================
00013D54                            
00013D54                            loc_13758:
00013D54 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D58 4A41                       		tst.w	d1
00013D5A 6A00                       		bpl.s	loc_13772
00013D5C 9368 000C                  		sub.w	d1,$C(a0)
00013D60 4A68 0012                  		tst.w	$12(a0)
00013D64 6A00                       		bpl.s	locret_13770
00013D66 317C 0000 0012             		move.w	#0,$12(a0)
00013D6C                            
00013D6C                            locret_13770:
00013D6C 4E75                       		rts	
00013D6E                            ; ===========================================================================
00013D6E                            
00013D6E                            loc_13772:
00013D6E 4A68 0012                  		tst.w	$12(a0)
00013D72 6B00                       		bmi.s	locret_1379E
00013D74 6100 0000                  		bsr.w	Sonic_HitFloor
00013D78 4A41                       		tst.w	d1
00013D7A 6A00                       		bpl.s	locret_1379E
00013D7C D368 000C                  		add.w	d1,$C(a0)
00013D80 1143 0026                  		move.b	d3,$26(a0)
00013D84 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D88 117C 0000 001C             		move.b	#0,$1C(a0)
00013D8E 317C 0000 0012             		move.w	#0,$12(a0)
00013D94 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D9A                            
00013D9A                            locret_1379E:
00013D9A 4E75                       		rts	
00013D9C                            ; End of function Sonic_Floor
00013D9C                            
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D9C                            ; ---------------------------------------------------------------------------
00013D9C                            
00013D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D9C                            
00013D9C                            
00013D9C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D9C 0828 0004 0022             		btst	#4,$22(a0)
00013DA2 6700                       		beq.s	loc_137AE
00013DA4 4E71                       		nop	
00013DA6 4E71                       		nop	
00013DA8 4E71                       		nop	
00013DAA                            
00013DAA                            loc_137AE:
00013DAA 08A8 0005 0022             		bclr	#5,$22(a0)
00013DB0 08A8 0001 0022             		bclr	#1,$22(a0)
00013DB6 08A8 0004 0022             		bclr	#4,$22(a0)
00013DBC 0828 0002 0022             		btst	#2,$22(a0)
00013DC2 6700                       		beq.s	loc_137E4
00013DC4 08A8 0002 0022             		bclr	#2,$22(a0)
00013DCA 117C 0013 0016             		move.b	#$13,$16(a0)
00013DD0 117C 0009 0017             		move.b	#9,$17(a0)
00013DD6 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DDC 5B68 000C                  		subq.w	#5,$C(a0)
00013DE0                            
00013DE0                            loc_137E4:
00013DE0 117C 0000 003C             		move.b	#0,$3C(a0)
00013DE6 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DEC 4E75                       		rts	
00013DEE                            ; End of function Sonic_ResetOnFloor
00013DEE                            
00013DEE                            ; ===========================================================================
00013DEE                            ; ---------------------------------------------------------------------------
00013DEE                            ; Sonic	when he	gets hurt
00013DEE                            ; ---------------------------------------------------------------------------
00013DEE                            
00013DEE                            Obj01_Hurt:				; XREF: Obj01_Index
00013DEE 4EBA 9D64                  		jsr	SpeedToPos
00013DF2 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DF8 0828 0006 0022             		btst	#6,$22(a0)
00013DFE 6700                       		beq.s	loc_1380C
00013E00 0468 0020 0012             		subi.w	#$20,$12(a0)
00013E06                            
00013E06                            loc_1380C:
00013E06 6100 0000                  		bsr.w	Sonic_HurtStop
00013E0A 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013E0E 6100 F4BE                  		bsr.w	Sonic_RecordPos
00013E12 6100 0000                  		bsr.w	Sonic_Animate
00013E16 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E1A 4EFA 9D5E                  		jmp	DisplaySprite
00013E1E                            
00013E1E                            ; ---------------------------------------------------------------------------
00013E1E                            ; Subroutine to	stop Sonic falling after he's been hurt
00013E1E                            ; ---------------------------------------------------------------------------
00013E1E                            
00013E1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E1E                            
00013E1E                            
00013E1E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013E1E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E22 0640 00E0                  		addi.w	#$E0,d0
00013E26 B068 000C                  		cmp.w	$C(a0),d0
00013E2A 6500 0000                  		bcs.w	KillSonic
00013E2E 6100 FD70                  		bsr.w	Sonic_Floor
00013E32 0828 0001 0022             		btst	#1,$22(a0)
00013E38 6600                       		bne.s	locret_13860
00013E3A 7000                       		moveq	#0,d0
00013E3C 3140 0012                  		move.w	d0,$12(a0)
00013E40 3140 0010                  		move.w	d0,$10(a0)
00013E44 3140 0014                  		move.w	d0,$14(a0)
00013E48 117C 0000 001C             		move.b	#0,$1C(a0)
00013E4E 5528 0024                  		subq.b	#2,$24(a0)
00013E52 317C 0078 0030             		move.w	#$78,$30(a0)
00013E58                            
00013E58                            locret_13860:
00013E58 4E75                       		rts	
00013E5A                            ; End of function Sonic_HurtStop
00013E5A                            
00013E5A                            ; ===========================================================================
00013E5A                            ; ---------------------------------------------------------------------------
00013E5A                            ; Sonic	when he	dies
00013E5A                            ; ---------------------------------------------------------------------------
00013E5A                            
00013E5A                            Obj01_Death:				; XREF: Obj01_Index
00013E5A 6100 0000                  		bsr.w	GameOver
00013E5E 4EBA 9CC8                  		jsr	ObjectFall
00013E62 6100 F46A                  		bsr.w	Sonic_RecordPos
00013E66 6100 0000                  		bsr.w	Sonic_Animate
00013E6A 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E6E 4EFA 9D0A                  		jmp	DisplaySprite
00013E72                            
00013E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E72                            
00013E72                            
00013E72                            GameOver:				; XREF: Obj01_Death
00013E72 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E76 0640 0100                  		addi.w	#$100,d0
00013E7A B068 000C                  		cmp.w	$C(a0),d0
00013E7E 6400 0000                  		bcc.w	locret_13900
00013E82 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E88 5428 0024                  		addq.b	#2,$24(a0)
00013E8C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E90 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E94 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E98 6600                       		bne.s	loc_138D4
00013E9A 317C 0000 003A             		move.w	#0,$3A(a0)
00013EA0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013EA6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EAC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013EB2 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013EB6                            
00013EB6                            loc_138C2:
00013EB6 303C 008F                  		move.w	#$8F,d0
00013EBA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013EC0 7003                       		moveq	#3,d0
00013EC2 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013EC8                            ; ===========================================================================
00013EC8                            
00013EC8                            loc_138D4:
00013EC8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013ECE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013ED2 6700                       		beq.s	locret_13900	; if not, branch
00013ED4 317C 0000 003A             		move.w	#0,$3A(a0)
00013EDA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013EE0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EE6 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013EEC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013EF2 60C2                       		bra.s	loc_138C2
00013EF4                            ; ===========================================================================
00013EF4                            
00013EF4                            locret_13900:
00013EF4 4E75                       		rts	
00013EF6                            ; End of function GameOver
00013EF6                            
00013EF6                            ; ===========================================================================
00013EF6                            ; ---------------------------------------------------------------------------
00013EF6                            ; Sonic	when the level is restarted
00013EF6                            ; ---------------------------------------------------------------------------
00013EF6                            
00013EF6                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EF6 4A68 003A                  		tst.w	$3A(a0)
00013EFA 6700                       		beq.s	locret_13914
00013EFC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013F00 6600                       		bne.s	locret_13914
00013F02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013F08                            
00013F08                            locret_13914:
00013F08 4E75                       		rts	
00013F0A                            
00013F0A                            ; ---------------------------------------------------------------------------
00013F0A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013F0A                            ; ---------------------------------------------------------------------------
00013F0A                            
00013F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F0A                            
00013F0A                            
00013F0A                            Sonic_Loops:				; XREF: Obj01_Control
00013F0A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013F10 6700                       		beq.s	loc_13926	; if yes, branch
00013F12 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013F16 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013F1A                            
00013F1A                            loc_13926:
00013F1A 3028 000C                  		move.w	$C(a0),d0
00013F1E E248                       		lsr.w	#1,d0
00013F20 0240 0380                  		andi.w	#$380,d0
00013F24 1228 0008                  		move.b	8(a0),d1
00013F28 0241 007F                  		andi.w	#$7F,d1
00013F2C D041                       		add.w	d1,d0
00013F2E 43F8 A400                  		lea	($FFFFA400).w,a1
00013F32 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F36 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F3A 6700 FA66                  		beq.w	Obj01_ChkRoll
00013F3E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F42 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013F46 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F4A 6700                       		beq.s	loc_13976
00013F4C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F50 6700                       		beq.s	loc_13966
00013F52 08A8 0006 0001             		bclr	#6,1(a0)
00013F58 4E75                       		rts	
00013F5A                            ; ===========================================================================
00013F5A                            
00013F5A                            loc_13966:
00013F5A 0828 0001 0022             		btst	#1,$22(a0)
00013F60 6700                       		beq.s	loc_13976
00013F62 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F68 4E75                       		rts	
00013F6A                            ; ===========================================================================
00013F6A                            
00013F6A                            loc_13976:
00013F6A 3428 0008                  		move.w	8(a0),d2
00013F6E 0C02 002C                  		cmpi.b	#$2C,d2
00013F72 6400                       		bcc.s	loc_13988
00013F74 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F7A 4E75                       		rts	
00013F7C                            ; ===========================================================================
00013F7C                            
00013F7C                            loc_13988:
00013F7C 0C02 00E0                  		cmpi.b	#-$20,d2
00013F80 6500                       		bcs.s	loc_13996
00013F82 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F88 4E75                       		rts	
00013F8A                            ; ===========================================================================
00013F8A                            
00013F8A                            loc_13996:
00013F8A 0828 0006 0001             		btst	#6,1(a0)
00013F90 6600                       		bne.s	loc_139B2
00013F92 1228 0026                  		move.b	$26(a0),d1
00013F96 6700                       		beq.s	locret_139C2
00013F98 0C01 0080                  		cmpi.b	#-$80,d1
00013F9C 6200                       		bhi.s	locret_139C2
00013F9E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013FA4 4E75                       		rts	
00013FA6                            ; ===========================================================================
00013FA6                            
00013FA6                            loc_139B2:
00013FA6 1228 0026                  		move.b	$26(a0),d1
00013FAA 0C01 0080                  		cmpi.b	#-$80,d1
00013FAE 6300                       		bls.s	locret_139C2
00013FB0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FB6                            
00013FB6                            locret_139C2:
00013FB6 4E75                       		rts	
00013FB8                            ; End of function Sonic_Loops
00013FB8                            
00013FB8                            ; ---------------------------------------------------------------------------
00013FB8                            ; Subroutine to	animate	Sonic's sprites
00013FB8                            ; ---------------------------------------------------------------------------
00013FB8                            
00013FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FB8                            
00013FB8                            
00013FB8                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013FB8 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013FBE 7000                       		moveq	#0,d0
00013FC0 1028 001C                  		move.b	$1C(a0),d0
00013FC4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013FC8 6700                       		beq.s	SAnim_Do	; if not, branch
00013FCA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013FCE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013FD4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FDA                            
00013FDA                            SAnim_Do:
00013FDA D040                       		add.w	d0,d0
00013FDC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FE0 1011                       		move.b	(a1),d0
00013FE2 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FE4 1228 0022                  		move.b	$22(a0),d1
00013FE8 0201 0001                  		andi.b	#1,d1
00013FEC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FF2 8328 0001                  		or.b	d1,1(a0)
00013FF6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FFA 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FFC 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014000                            
00014000                            SAnim_Do2:
00014000 7200                       		moveq	#0,d1
00014002 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014006 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001400A 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001400C                            
0001400C                            SAnim_Next:
0001400C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014010 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014014                            
00014014                            SAnim_Delay:
00014014 4E75                       		rts	
00014016                            ; ===========================================================================
00014016                            
00014016                            SAnim_End_FF:
00014016 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014018 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001401A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014020 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014024 60E6                       		bra.s	SAnim_Next
00014026                            ; ===========================================================================
00014026                            
00014026                            SAnim_End_FE:
00014026 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014028 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001402A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001402E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014032 9200                       		sub.b	d0,d1
00014034 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014038 60D2                       		bra.s	SAnim_Next
0001403A                            ; ===========================================================================
0001403A                            
0001403A                            SAnim_End_FD:
0001403A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001403C 6600                       		bne.s	SAnim_End	; if not, branch
0001403E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014044                            
00014044                            SAnim_End:
00014044 4E75                       		rts	
00014046                            ; ===========================================================================
00014046                            
00014046                            SAnim_WalkRun:				; XREF: SAnim_Do
00014046 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001404A 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001404C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001404E 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014052 7200                       		moveq	#0,d1
00014054 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014058 1428 0022                  		move.b	$22(a0),d2
0001405C 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014060 6600                       		bne.s	loc_13A70	; if yes, branch
00014062 4600                       		not.b	d0		; reverse angle
00014064                            
00014064                            loc_13A70:
00014064 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014068 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001406A 7203                       		moveq	#3,d1
0001406C                            
0001406C                            loc_13A78:
0001406C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014072 B302                       		eor.b	d1,d2
00014074 8528 0001                  		or.b	d2,1(a0)
00014078 0828 0005 0022             		btst	#5,$22(a0)
0001407E 6600 0000                  		bne.w	SAnim_Push
00014082 E808                       		lsr.b	#4,d0		; divide angle by $10
00014084 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014088 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001408C 6A00                       		bpl.s	loc_13A9C
0001408E 4442                       		neg.w	d2
00014090                            
00014090                            loc_13A9C:
00014090 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014096 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001409A 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001409C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000140A2 1200                       		move.b	d0,d1
000140A4 E209                       		lsr.b	#1,d1
000140A6 D001                       		add.b	d1,d0
000140A8                            
000140A8                            loc_13AB4:
000140A8 D000                       		add.b	d0,d0
000140AA 1600                       		move.b	d0,d3
000140AC 4442                       		neg.w	d2
000140AE 0642 0800                  		addi.w	#$800,d2
000140B2 6A00                       		bpl.s	loc_13AC2
000140B4 7400                       		moveq	#0,d2
000140B6                            
000140B6                            loc_13AC2:
000140B6 E04A                       		lsr.w	#8,d2
000140B8 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140BC 6100 FF42                  		bsr.w	SAnim_Do2
000140C0 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000140C4 4E75                       		rts	
000140C6                            ; ===========================================================================
000140C6                            
000140C6                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000140C6 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000140C8 6600                       		bne.s	SAnim_Push	; if not, branch
000140CA 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140CE 6A00                       		bpl.s	loc_13ADE
000140D0 4442                       		neg.w	d2
000140D2                            
000140D2                            loc_13ADE:
000140D2 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000140D8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140DC 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140DE 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140E4                            
000140E4                            loc_13AF0:
000140E4 4442                       		neg.w	d2
000140E6 0642 0400                  		addi.w	#$400,d2
000140EA 6A00                       		bpl.s	loc_13AFA
000140EC 7400                       		moveq	#0,d2
000140EE                            
000140EE                            loc_13AFA:
000140EE E04A                       		lsr.w	#8,d2
000140F0 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140F4 1228 0022                  		move.b	$22(a0),d1
000140F8 0201 0001                  		andi.b	#1,d1
000140FC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014102 8328 0001                  		or.b	d1,1(a0)
00014106 6000 FEF8                  		bra.w	SAnim_Do2
0001410A                            ; ===========================================================================
0001410A                            
0001410A                            SAnim_Push:				; XREF: SAnim_RollJump
0001410A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001410E 6B00                       		bmi.s	loc_13B1E
00014110 4442                       		neg.w	d2
00014112                            
00014112                            loc_13B1E:
00014112 0642 0800                  		addi.w	#$800,d2
00014116 6A00                       		bpl.s	loc_13B26
00014118 7400                       		moveq	#0,d2
0001411A                            
0001411A                            loc_13B26:
0001411A EC4A                       		lsr.w	#6,d2
0001411C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014120 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014126 1228 0022                  		move.b	$22(a0),d1
0001412A 0201 0001                  		andi.b	#1,d1
0001412E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014134 8328 0001                  		or.b	d1,1(a0)
00014138 6000 FEC6                  		bra.w	SAnim_Do2
0001413C                            ; End of function Sonic_Animate
0001413C                            
0001413C                            ; ===========================================================================
0001413C                            SonicAniData:
0001413C                            	include "_anim\Sonic.asm"
0001413C                            ; ---------------------------------------------------------------------------
0001413C                            ; Animation script - Sonic
0001413C                            ; ---------------------------------------------------------------------------
0001413C 0000                       		dc.w SonAni_Walk-SonicAniData
0001413E 0000                       		dc.w SonAni_Run-SonicAniData
00014140 0000                       		dc.w SonAni_Roll-SonicAniData
00014142 0000                       		dc.w SonAni_Roll2-SonicAniData
00014144 0000                       		dc.w SonAni_Push-SonicAniData
00014146 0000                       		dc.w SonAni_Wait-SonicAniData
00014148 0000                       		dc.w SonAni_Balance-SonicAniData
0001414A 0000                       		dc.w SonAni_LookUp-SonicAniData
0001414C 0000                       		dc.w SonAni_Duck-SonicAniData
0001414E 0000                       		dc.w SonAni_Warp1-SonicAniData
00014150 0000                       		dc.w SonAni_Warp2-SonicAniData
00014152 0000                       		dc.w SonAni_Warp3-SonicAniData
00014154 0000                       		dc.w SonAni_Warp4-SonicAniData
00014156 0000                       		dc.w SonAni_Stop-SonicAniData
00014158 0000                       		dc.w SonAni_Float1-SonicAniData
0001415A 0000                       		dc.w SonAni_Float2-SonicAniData
0001415C 0000                       		dc.w SonAni_Spring-SonicAniData
0001415E 0000                       		dc.w SonAni_LZHang-SonicAniData
00014160 0000                       		dc.w SonAni_Leap1-SonicAniData
00014162 0000                       		dc.w SonAni_Leap2-SonicAniData
00014164 0000                       		dc.w SonAni_Surf-SonicAniData
00014166 0000                       		dc.w SonAni_Bubble-SonicAniData
00014168 0000                       		dc.w SonAni_Death1-SonicAniData
0001416A 0000                       		dc.w SonAni_Drown-SonicAniData
0001416C 0000                       		dc.w SonAni_Death2-SonicAniData
0001416E 0000                       		dc.w SonAni_Shrink-SonicAniData
00014170 0000                       		dc.w SonAni_Hurt-SonicAniData
00014172 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014174 0000                       		dc.w SonAni_Blank-SonicAniData
00014176 0000                       		dc.w SonAni_Float3-SonicAniData
00014178 0000                       		dc.w SonAni_Float4-SonicAniData
0001417A FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014184 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001418C FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014194 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001419C FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000141A4 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000141BA 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000141BE 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000141C2 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000141C6 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000141CA 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000141CE 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000141D2 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000141D6 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141DA 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141DE 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141E6 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141EA 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141EE 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141F4 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141FA 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141FE 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014206 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001420A 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001420E 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014212 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001421C 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014220 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014224 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014228 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014230 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014234                            		even
00014234                            		even
00014234                            
00014234                            ; ---------------------------------------------------------------------------
00014234                            ; Sonic	pattern	loading	subroutine
00014234                            ; ---------------------------------------------------------------------------
00014234                            
00014234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014234                            
00014234                            
00014234                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014234 7000                       		moveq	#0,d0
00014236 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001423A B038 F766                  		cmp.b	($FFFFF766).w,d0
0001423E 6700                       		beq.s	locret_13C96
00014240 11C0 F766                  		move.b	d0,($FFFFF766).w
00014244 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001424A D040                       		add.w	d0,d0
0001424C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014250 7200                       		moveq	#0,d1
00014252 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014254 5301                       		subq.b	#1,d1
00014256 6B00                       		bmi.s	locret_13C96
00014258 47F8 C800                  		lea	($FFFFC800).w,a3
0001425C 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014262                            
00014262                            SPLC_ReadEntry:
00014262 7400                       		moveq	#0,d2
00014264 141A                       		move.b	(a2)+,d2
00014266 3002                       		move.w	d2,d0
00014268 E808                       		lsr.b	#4,d0
0001426A E14A                       		lsl.w	#8,d2
0001426C 141A                       		move.b	(a2)+,d2
0001426E EB4A                       		lsl.w	#5,d2
00014270 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014276 D3C2                       		adda.l	d2,a1
00014278                            
00014278                            SPLC_LoadTile:
00014278 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001427C 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014280 47EB 0020                  		lea	$20(a3),a3	; next tile
00014284 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014288                            
00014288 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001428C                            
0001428C                            locret_13C96:
0001428C 4E75                       		rts	
0001428E                            ; End of function LoadSonicDynPLC
0001428E                            
0001428E                            ; ===========================================================================
0001428E                            ; ---------------------------------------------------------------------------
0001428E                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001428E                            ; ---------------------------------------------------------------------------
0001428E                            
0001428E                            Obj0A:					; XREF: Obj_Index
0001428E 7000                       		moveq	#0,d0
00014290 1028 0024                  		move.b	$24(a0),d0
00014294 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014298 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001429C                            ; ===========================================================================
0001429C 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000142A0 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000142A4 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000142A8 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000142AC 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000142AE                            ; ===========================================================================
000142AE                            
000142AE                            Obj0A_Main:				; XREF: Obj0A_Index
000142AE 5428 0024                  		addq.b	#2,$24(a0)
000142B2 217C 0001 2F0C 0004        		move.l	#Map_obj64,4(a0)
000142BA 317C 8348 0002             		move.w	#$8348,2(a0)
000142C0 117C 0084 0001             		move.b	#$84,1(a0)
000142C6 117C 0010 0019             		move.b	#$10,$19(a0)
000142CC 117C 0001 0018             		move.b	#1,$18(a0)
000142D2 1028 0028                  		move.b	$28(a0),d0
000142D6 6A00                       		bpl.s	loc_13D00
000142D8 5028 0024                  		addq.b	#8,$24(a0)
000142DC 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142E4 317C 0440 0002             		move.w	#$440,2(a0)
000142EA 0240 007F                  		andi.w	#$7F,d0
000142EE 1140 0033                  		move.b	d0,$33(a0)
000142F2 6000 0000                  		bra.w	Obj0A_Countdown
000142F6                            ; ===========================================================================
000142F6                            
000142F6                            loc_13D00:
000142F6 1140 001C                  		move.b	d0,$1C(a0)
000142FA 3168 0008 0030             		move.w	8(a0),$30(a0)
00014300 317C FF78 0012             		move.w	#-$88,$12(a0)
00014306                            
00014306                            Obj0A_Animate:				; XREF: Obj0A_Index
00014306 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001430C 4EB9 0000 AC4A             		jsr	AnimateSprite
00014312                            
00014312                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014312 3038 F646                  		move.w	($FFFFF646).w,d0
00014316 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001431A 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001431C 117C 0006 0024             		move.b	#6,$24(a0)
00014322 5E28 001C                  		addq.b	#7,$1C(a0)
00014326 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001432C 6700                       		beq.s	Obj0A_Display
0001432E 6000                       		bra.s	Obj0A_Display
00014330                            ; ===========================================================================
00014330                            
00014330                            Obj0A_Wobble:
00014330 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014334 6700                       		beq.s	loc_13D44
00014336 5868 0030                  		addq.w	#4,$30(a0)
0001433A                            
0001433A                            loc_13D44:
0001433A 1028 0026                  		move.b	$26(a0),d0
0001433E 5228 0026                  		addq.b	#1,$26(a0)
00014342 0240 007F                  		andi.w	#$7F,d0
00014346 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001434C 1031 0000                  		move.b	(a1,d0.w),d0
00014350 4880                       		ext.w	d0
00014352 D068 0030                  		add.w	$30(a0),d0
00014356 3140 0008                  		move.w	d0,8(a0)
0001435A 6100                       		bsr.s	Obj0A_ShowNumber
0001435C 4EBA 97F6                  		jsr	SpeedToPos
00014360 4A28 0001                  		tst.b	1(a0)
00014364 6A00                       		bpl.s	Obj0A_Delete
00014366 4EFA 9812                  		jmp	DisplaySprite
0001436A                            ; ===========================================================================
0001436A                            
0001436A                            Obj0A_Delete:
0001436A 4EFA 984A                  		jmp	DeleteObject
0001436E                            ; ===========================================================================
0001436E                            
0001436E                            Obj0A_Display:				; XREF: Obj0A_Index
0001436E 6100                       		bsr.s	Obj0A_ShowNumber
00014370 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014376 4EB9 0000 AC4A             		jsr	AnimateSprite
0001437C 4EFA 97FC                  		jmp	DisplaySprite
00014380                            ; ===========================================================================
00014380                            
00014380                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014380 4EFA 9834                  		jmp	DeleteObject
00014384                            ; ===========================================================================
00014384                            
00014384                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014384 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001438A 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001438C 5368 0038                  		subq.w	#1,$38(a0)
00014390 6600                       		bne.s	Obj0A_Display2
00014392 117C 000E 0024             		move.b	#$E,$24(a0)
00014398 5E28 001C                  		addq.b	#7,$1C(a0)
0001439C 60D0                       		bra.s	Obj0A_Display
0001439E                            ; ===========================================================================
0001439E                            
0001439E                            Obj0A_Display2:
0001439E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143A4 4EB9 0000 AC4A             		jsr	AnimateSprite
000143AA 4A28 0001                  		tst.b	1(a0)
000143AE 6A00                       		bpl.s	Obj0A_Delete3
000143B0 4EFA 97C8                  		jmp	DisplaySprite
000143B4                            ; ===========================================================================
000143B4                            
000143B4                            Obj0A_Delete3:
000143B4 4EFA 9800                  		jmp	DeleteObject
000143B8                            ; ===========================================================================
000143B8                            
000143B8                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000143B8 4A68 0038                  		tst.w	$38(a0)
000143BC 6700                       		beq.s	locret_13E1A
000143BE 5368 0038                  		subq.w	#1,$38(a0)
000143C2 6600                       		bne.s	locret_13E1A
000143C4 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000143CA 6400                       		bcc.s	locret_13E1A
000143CC 317C 000F 0038             		move.w	#$F,$38(a0)
000143D2 4268 0012                  		clr.w	$12(a0)
000143D6 117C 0080 0001             		move.b	#$80,1(a0)
000143DC 3028 0008                  		move.w	8(a0),d0
000143E0 9078 F700                  		sub.w	($FFFFF700).w,d0
000143E4 0640 0080                  		addi.w	#$80,d0
000143E8 3140 0008                  		move.w	d0,8(a0)
000143EC 3028 000C                  		move.w	$C(a0),d0
000143F0 9078 F704                  		sub.w	($FFFFF704).w,d0
000143F4 0640 0080                  		addi.w	#$80,d0
000143F8 3140 000A                  		move.w	d0,$A(a0)
000143FC 117C 000C 0024             		move.b	#$C,$24(a0)
00014402                            
00014402                            locret_13E1A:
00014402 4E75                       		rts	
00014404                            ; ===========================================================================
00014404                            Obj0A_WobbleData:
00014404 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014415 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014426 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014437 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014447 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014454 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014461 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001446E FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001447B FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014484                            ; ===========================================================================
00014484                            
00014484                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014484 4A68 002C                  		tst.w	$2C(a0)
00014488 6600 0000                  		bne.w	loc_13F86
0001448C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014492 6400 0000                  		bcc.w	locret_1408C
00014496 0838 0006 D022             		btst	#6,($FFFFD022).w
0001449C 6700 0000                  		beq.w	locret_1408C
000144A0 5368 0038                  		subq.w	#1,$38(a0)
000144A4 6A00 0000                  		bpl.w	loc_13FAC
000144A8 317C 003B 0038             		move.w	#59,$38(a0)
000144AE 317C 0001 0036             		move.w	#1,$36(a0)
000144B4 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000144BA 0240 0001                  		andi.w	#1,d0
000144BE 1140 0034                  		move.b	d0,$34(a0)
000144C2 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000144C6 0C40 0019                  		cmpi.w	#$19,d0
000144CA 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000144CC 0C40 0014                  		cmpi.w	#$14,d0
000144D0 6700                       		beq.s	Obj0A_WarnSound
000144D2 0C40 000F                  		cmpi.w	#$F,d0
000144D6 6700                       		beq.s	Obj0A_WarnSound
000144D8 0C40 000C                  		cmpi.w	#$C,d0
000144DC 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144DE 6600                       		bne.s	loc_13F02
000144E0 303C 0092                  		move.w	#$92,d0
000144E4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144EA                            
000144EA                            loc_13F02:
000144EA 5328 0032                  		subq.b	#1,$32(a0)
000144EE 6A00                       		bpl.s	Obj0A_ReduceAir
000144F0 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144F6 08E8 0007 0036             		bset	#7,$36(a0)
000144FC 6000                       		bra.s	Obj0A_ReduceAir
000144FE                            ; ===========================================================================
000144FE                            
000144FE                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144FE 303C 00C2                  		move.w	#$C2,d0
00014502 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014508                            
00014508                            Obj0A_ReduceAir:
00014508 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001450C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014510 6100 0000                  		bsr.w	ResumeMusic
00014514 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001451A 303C 00B2                  		move.w	#$B2,d0
0001451E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
00014524 117C 000A 0034             		move.b	#$A,$34(a0)
0001452A 317C 0001 0036             		move.w	#1,$36(a0)
00014530 317C 0078 002C             		move.w	#$78,$2C(a0)
00014536 2F08                       		move.l	a0,-(sp)
00014538 41F8 D000                  		lea	($FFFFD000).w,a0
0001453C 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
00014540 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014546 08E8 0001 0022             		bset	#1,$22(a0)
0001454C 08E8 0007 0002             		bset	#7,2(a0)
00014552 317C 0000 0012             		move.w	#0,$12(a0)
00014558 317C 0000 0010             		move.w	#0,$10(a0)
0001455E 317C 0000 0014             		move.w	#0,$14(a0)
00014564 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001456A 205F                       		movea.l	(sp)+,a0
0001456C 4E75                       		rts	
0001456E                            ; ===========================================================================
0001456E                            
0001456E                            loc_13F86:
0001456E 5368 002C                  		subq.w	#1,$2C(a0)
00014572 6600                       		bne.s	loc_13F94
00014574 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001457A 4E75                       		rts	
0001457C                            ; ===========================================================================
0001457C                            
0001457C                            loc_13F94:
0001457C 2F08                       		move.l	a0,-(sp)
0001457E 41F8 D000                  		lea	($FFFFD000).w,a0
00014582 4EBA 95D0                  		jsr	SpeedToPos
00014586 0668 0010 0012             		addi.w	#$10,$12(a0)
0001458C 205F                       		movea.l	(sp)+,a0
0001458E 6000                       		bra.s	loc_13FAC
00014590                            ; ===========================================================================
00014590                            
00014590                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014590 6000                       		bra.s	Obj0A_MakeItem
00014592                            ; ===========================================================================
00014592                            
00014592                            loc_13FAC:
00014592 4A68 0036                  		tst.w	$36(a0)
00014596 6700 0000                  		beq.w	locret_1408C
0001459A 5368 003A                  		subq.w	#1,$3A(a0)
0001459E 6A00 0000                  		bpl.w	locret_1408C
000145A2                            
000145A2                            Obj0A_MakeItem:
000145A2 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145A8 0240 000F                  		andi.w	#$F,d0
000145AC 3140 003A                  		move.w	d0,$3A(a0)
000145B0 4EBA 9A4E                  		jsr	SingleObjLoad
000145B4 6600 0000                  		bne.w	locret_1408C
000145B8 12BC 000A                  		move.b	#$A,0(a1)	; load object
000145BC 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000145C2 7006                       		moveq	#6,d0
000145C4 0838 0000 D022             		btst	#0,($FFFFD022).w
000145CA 6700                       		beq.s	loc_13FF2
000145CC 4440                       		neg.w	d0
000145CE 137C 0040 0026             		move.b	#$40,$26(a1)
000145D4                            
000145D4                            loc_13FF2:
000145D4 D169 0008                  		add.w	d0,8(a1)
000145D8 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145DE 137C 0006 0028             		move.b	#6,$28(a1)
000145E4 4A68 002C                  		tst.w	$2C(a0)
000145E8 6700 0000                  		beq.w	loc_1403E
000145EC 0268 0007 003A             		andi.w	#7,$3A(a0)
000145F2 0668 0000 003A             		addi.w	#0,$3A(a0)
000145F8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145FC 0440 000C                  		subi.w	#$C,d0
00014600 3340 000C                  		move.w	d0,$C(a1)
00014604 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001460A 1340 0026                  		move.b	d0,$26(a1)
0001460E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014612 0200 0003                  		andi.b	#3,d0
00014616 6600                       		bne.s	loc_14082
00014618 137C 000E 0028             		move.b	#$E,$28(a1)
0001461E 6000                       		bra.s	loc_14082
00014620                            ; ===========================================================================
00014620                            
00014620                            loc_1403E:
00014620 0828 0007 0036             		btst	#7,$36(a0)
00014626 6700                       		beq.s	loc_14082
00014628 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001462C E24A                       		lsr.w	#1,d2
0001462E 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014634 0240 0003                  		andi.w	#3,d0
00014638 6600                       		bne.s	loc_1406A
0001463A 08E8 0006 0036             		bset	#6,$36(a0)
00014640 6600                       		bne.s	loc_14082
00014642 1342 0028                  		move.b	d2,$28(a1)
00014646 337C 001C 0038             		move.w	#$1C,$38(a1)
0001464C                            
0001464C                            loc_1406A:
0001464C 4A28 0034                  		tst.b	$34(a0)
00014650 6600                       		bne.s	loc_14082
00014652 08E8 0006 0036             		bset	#6,$36(a0)
00014658 6600                       		bne.s	loc_14082
0001465A 1342 0028                  		move.b	d2,$28(a1)
0001465E 337C 001C 0038             		move.w	#$1C,$38(a1)
00014664                            
00014664                            loc_14082:
00014664 5328 0034                  		subq.b	#1,$34(a0)
00014668 6A00                       		bpl.s	locret_1408C
0001466A 4268 0036                  		clr.w	$36(a0)
0001466E                            
0001466E                            locret_1408C:
0001466E 4E75                       		rts	
00014670                            
00014670                            ; ---------------------------------------------------------------------------
00014670                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014670                            ; ---------------------------------------------------------------------------
00014670                            
00014670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014670                            
00014670                            
00014670                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014670 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014676                             
00014676                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014676                             
00014676 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001467A                             
0001467A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014680 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014682 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014688 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001468A                             
0001468A                            Air_GetBgm2:
0001468A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014690 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014692 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014698 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001469A                             
0001469A                            Air_GetBgm3:
0001469A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000146A0 6600                       		bne.s	Air_GetBgm4	; if not, branch
000146A2 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000146A8 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146AA                             
000146AA                            Air_GetBgm4:
000146AA 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000146B0 6600                       		bne.s	Air_PlayMusic	; if not, branch
000146B2 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000146B8                             
000146B8                            Air_PlayMusic:
000146B8 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000146BC                             
000146BC                            loc_140A6:
000146BC 4EB9 0000 15B6             		jsr	(PlaySound).l
000146C2                             
000146C2                            ; NineKode ends here
000146C2                            
000146C2                            loc_140AC:
000146C2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000146C8 4238 D372                  		clr.b	($FFFFD372).w
000146CC 4E75                       		rts	
000146CE                            ; End of function ResumeMusic
000146CE                            
000146CE                            ; ===========================================================================
000146CE                            Ani_obj0A:
000146CE                            	include "_anim\obj0A.asm"
000146CE                            ; ---------------------------------------------------------------------------
000146CE                            ; Animation script - countdown numbers and bubbles (LZ)
000146CE                            ; ---------------------------------------------------------------------------
000146CE 0000                       		dc.w byte_140D6-Ani_obj0A
000146D0 0000                       		dc.w byte_140E0-Ani_obj0A
000146D2 0000                       		dc.w byte_140EA-Ani_obj0A
000146D4 0000                       		dc.w byte_140F4-Ani_obj0A
000146D6 0000                       		dc.w byte_140FE-Ani_obj0A
000146D8 0000                       		dc.w byte_14108-Ani_obj0A
000146DA 0000                       		dc.w byte_14112-Ani_obj0A
000146DC 0000                       		dc.w byte_14118-Ani_obj0A
000146DE 0000                       		dc.w byte_14120-Ani_obj0A
000146E0 0000                       		dc.w byte_14128-Ani_obj0A
000146E2 0000                       		dc.w byte_14130-Ani_obj0A
000146E4 0000                       		dc.w byte_14138-Ani_obj0A
000146E6 0000                       		dc.w byte_14140-Ani_obj0A
000146E8 0000                       		dc.w byte_14148-Ani_obj0A
000146EA 0000                       		dc.w byte_1414A-Ani_obj0A
000146EC 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146F6 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014700 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
0001470A 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014714 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001471E 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014728 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001472E 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014736 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001473E 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014746 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001474E 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014756 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001475E 0EFC                       byte_14148:	dc.b $E, $FC
00014760 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014766                            		even
00014766                            		even
00014766                            
00014766                            ; ---------------------------------------------------------------------------
00014766                            ; Sprite mappings - drowning countdown numbers (LZ)
00014766                            ; ---------------------------------------------------------------------------
00014766                            Map_obj0A:
00014766                            	include "_maps\obj0A.asm"
00014766                            ; ---------------------------------------------------------------------------
00014766                            ; Sprite mappings - drowning countdown numbers (LZ)
00014766                            ; ---------------------------------------------------------------------------
00014766 0000                       		dc.w byte_14152-Map_obj0A
00014768 01                         byte_14152:	dc.b 1
00014769 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001476E                            		even
0001476E                            		even
0001476E                            
0001476E                            ; ===========================================================================
0001476E                            ; ---------------------------------------------------------------------------
0001476E                            ; Object 38 - shield and invincibility stars
0001476E                            ; ---------------------------------------------------------------------------
0001476E                            
0001476E                            Obj38:					; XREF: Obj_Index
0001476E 7000                       		moveq	#0,d0
00014770 1028 0024                  		move.b	$24(a0),d0
00014774 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014778 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001477C                            ; ===========================================================================
0001477C 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
0001477E 0000                       		dc.w Obj38_Shield-Obj38_Index
00014780 0000                       		dc.w Obj38_Stars-Obj38_Index
00014782                            ; ===========================================================================
00014782                            
00014782                            Obj38_Main:				; XREF: Obj38_Index
00014782 5428 0024                  		addq.b	#2,$24(a0)
00014786 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001478E 117C 0004 0001             		move.b	#4,1(a0)
00014794 117C 0001 0018             		move.b	#1,$18(a0)
0001479A 117C 0010 0019             		move.b	#$10,$19(a0)
000147A0 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000147A4 6600                       		bne.s	Obj38_DoStars	; if not, branch
000147A6 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000147AC 4E75                       		rts	
000147AE                            ; ===========================================================================
000147AE                            
000147AE                            Obj38_DoStars:
000147AE 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000147B2 317C 055C 0002             		move.w	#$55C,2(a0)
000147B8 4E75                       		rts	
000147BA                            ; ===========================================================================
000147BA                            
000147BA                            Obj38_Shield:				; XREF: Obj38_Index
000147BA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147BE 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000147C0 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000147C4 6700                       		beq.s	Obj38_Delete	; if not, branch
000147C6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000147CC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000147D2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000147D8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147DE 4EB9 0000 AC4A             		jsr	AnimateSprite
000147E4 4EFA 9394                  		jmp	DisplaySprite
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Obj38_RmvShield:
000147E8 4E75                       		rts	
000147EA                            ; ===========================================================================
000147EA                            
000147EA                            Obj38_Delete:
000147EA 4EFA 93CA                  		jmp	DeleteObject
000147EE                            ; ===========================================================================
000147EE                            
000147EE                            Obj38_Stars:				; XREF: Obj38_Index
000147EE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147F2 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147F4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147F8 1228 001C                  		move.b	$1C(a0),d1
000147FC 5301                       		subq.b	#1,d1
000147FE 6000                       		bra.s	Obj38_StarTrail
00014800                            ; ===========================================================================
00014800 E909                       		lsl.b	#4,d1
00014802 5801                       		addq.b	#4,d1
00014804 9001                       		sub.b	d1,d0
00014806 1228 0030                  		move.b	$30(a0),d1
0001480A 9001                       		sub.b	d1,d0
0001480C 5801                       		addq.b	#4,d1
0001480E 0201 000F                  		andi.b	#$F,d1
00014812 1141 0030                  		move.b	d1,$30(a0)
00014816 6000                       		bra.s	Obj38_StarTrail2a
00014818                            ; ===========================================================================
00014818                            
00014818                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014818 E709                       		lsl.b	#3,d1
0001481A 1401                       		move.b	d1,d2
0001481C D201                       		add.b	d1,d1
0001481E D202                       		add.b	d2,d1
00014820 5801                       		addq.b	#4,d1
00014822 9001                       		sub.b	d1,d0
00014824 1228 0030                  		move.b	$30(a0),d1
00014828 9001                       		sub.b	d1,d0
0001482A 5801                       		addq.b	#4,d1
0001482C 0C01 0018                  		cmpi.b	#$18,d1
00014830 6500                       		bcs.s	Obj38_StarTrail2
00014832 7200                       		moveq	#0,d1
00014834                            
00014834                            Obj38_StarTrail2:
00014834 1141 0030                  		move.b	d1,$30(a0)
00014838                            
00014838                            Obj38_StarTrail2a:
00014838 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001483C 43F1 0000                  		lea	(a1,d0.w),a1
00014840 3159 0008                  		move.w	(a1)+,8(a0)
00014844 3159 000C                  		move.w	(a1)+,$C(a0)
00014848 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001484E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014854 4EB9 0000 AC4A             		jsr	AnimateSprite
0001485A 4EFA 931E                  		jmp	DisplaySprite
0001485E                            ; ===========================================================================
0001485E                            
0001485E                            Obj38_Delete2:				; XREF: Obj38_Stars
0001485E 4EFA 9356                  		jmp	DeleteObject
00014862                            ; ===========================================================================
00014862                            ; ---------------------------------------------------------------------------
00014862                            ; Object 4A - special stage entry from beta
00014862                            ; ---------------------------------------------------------------------------
00014862                            
00014862                            Obj4A:					; XREF: Obj_Index
00014862 7000                       		moveq	#0,d0
00014864 1028 0024                  		move.b	$24(a0),d0
00014868 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001486C 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014870                            ; ===========================================================================
00014870 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014872 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014874 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014876                            ; ===========================================================================
00014876                            
00014876                            Obj4A_Main:				; XREF: Obj4A_Index
00014876 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001487A 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001487C 4E75                       		rts	
0001487E                            ; ===========================================================================
0001487E                            
0001487E                            Obj4A_Main2:
0001487E 5428 0024                  		addq.b	#2,$24(a0)
00014882 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001488A 117C 0004 0001             		move.b	#4,1(a0)
00014890 117C 0001 0018             		move.b	#1,$18(a0)
00014896 117C 0038 0019             		move.b	#$38,$19(a0)
0001489C 317C 0541 0002             		move.w	#$541,2(a0)
000148A2 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000148A8                            
000148A8                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000148A8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000148AE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148B4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148BA 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000148C0 4EB9 0000 AC4A             		jsr	AnimateSprite
000148C6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000148CC 6600                       		bne.s	Obj4A_Display
000148CE 4A38 D000                  		tst.b	($FFFFD000).w
000148D2 6700                       		beq.s	Obj4A_Display
000148D4 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148DA 303C 00A8                  		move.w	#$A8,d0
000148DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148E4                            
000148E4                            Obj4A_Display:
000148E4 4EFA 9294                  		jmp	DisplaySprite
000148E8                            ; ===========================================================================
000148E8                            
000148E8                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148E8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148EC 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148EE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148F4 4EFA 92C0                  		jmp	DeleteObject
000148F8                            ; ===========================================================================
000148F8                            
000148F8                            Obj4A_Wait:
000148F8 4E75                       		rts	
000148FA                            ; ===========================================================================
000148FA                            ; ---------------------------------------------------------------------------
000148FA                            ; Object 08 - water splash (LZ)
000148FA                            ; ---------------------------------------------------------------------------
000148FA                            
000148FA                            Obj08:					; XREF: Obj_Index
000148FA 7000                       		moveq	#0,d0
000148FC 1028 0024                  		move.b	$24(a0),d0
00014900 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014904 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014908                            ; ===========================================================================
00014908 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
0001490A 0000                       		dc.w Obj08_Display-Obj08_Index
0001490C 0000                       		dc.w Obj08_Delete-Obj08_Index
0001490E                            ; ===========================================================================
0001490E                            
0001490E                            Obj08_Main:				; XREF: Obj08_Index
0001490E 5428 0024                  		addq.b	#2,$24(a0)
00014912 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
0001491A 0028 0004 0001             		ori.b	#4,1(a0)
00014920 117C 0001 0018             		move.b	#1,$18(a0)
00014926 117C 0010 0019             		move.b	#$10,$19(a0)
0001492C 317C 4259 0002             		move.w	#$4259,2(a0)
00014932 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014938                            
00014938                            Obj08_Display:				; XREF: Obj08_Index
00014938 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001493E 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014944 4EB9 0000 AC4A             		jsr	AnimateSprite
0001494A 4EFA 922E                  		jmp	DisplaySprite
0001494E                            ; ===========================================================================
0001494E                            
0001494E                            Obj08_Delete:				; XREF: Obj08_Index
0001494E 4EFA 9266                  		jmp	DeleteObject	; delete when animation	is complete
00014952                            ; ===========================================================================
00014952                            Ani_obj38:
00014952                            	include "_anim\obj38.asm"
00014952                            ; ---------------------------------------------------------------------------
00014952                            ; Animation script - shield and invincibility stars
00014952                            ; ---------------------------------------------------------------------------
00014952 0000                       		dc.w byte_14356-Ani_obj38
00014954 0000                       		dc.w byte_1435E-Ani_obj38
00014956 0000                       		dc.w byte_14364-Ani_obj38
00014958 0000                       		dc.w byte_1437E-Ani_obj38
0001495A 0000                       		dc.w byte_14398-Ani_obj38
0001495C 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014964 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001496A 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001497B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014984 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014995 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
0001499E 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000149AF 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000149B8                            		even
000149B8                            		even
000149B8                            
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            ; Sprite mappings - shield and invincibility stars
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            Map_obj38:
000149B8                            	include "_maps\obj38.asm"
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            ; Sprite mappings - shield and invincibility stars
000149B8                            ; ---------------------------------------------------------------------------
000149B8 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000149BC 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000149C0 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000149C4 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000149C8 04                         byte_143C2:	dc.b 4
000149C9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149CE E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149D3 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
000149D8 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149DD 04                         byte_143D7:	dc.b 4
000149DE E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149E3 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149E8 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149ED 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149F2 04                         byte_143EC:	dc.b 4
000149F3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149F8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149FD 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A02 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A07 04                         byte_14401:	dc.b 4
00014A08 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014A0D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A12 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A17 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A1C 04                         byte_14416:	dc.b 4
00014A1D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A22 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A27 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014A2C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A31 04                         byte_1442B:	dc.b 4
00014A32 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A37 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A3C 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A41 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A46 04                         byte_14440:	dc.b 4
00014A47 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A4C E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A51 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A56 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A5C 00                         		even
00014A5C 00                         		even
00014A5C                            
00014A5C                            Ani_obj4A:
00014A5C                            	include "_anim\obj4A.asm"
00014A5C                            ; ---------------------------------------------------------------------------
00014A5C                            ; Animation script - special stage entry effect from beta
00014A5C                            ; ---------------------------------------------------------------------------
00014A5C 0000                       		dc.w byte_14458-Ani_obj4A
00014A5E 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A72                            		even
00014A72                            		even
00014A72                            
00014A72                            ; ---------------------------------------------------------------------------
00014A72                            ; Sprite mappings - special stage entry	from beta
00014A72                            ; ---------------------------------------------------------------------------
00014A72                            Map_obj4A:
00014A72                            	include "_maps\obj4A.asm"
00014A72                            ; ---------------------------------------------------------------------------
00014A72                            ; Sprite mappings - special stage entry	from beta
00014A72                            ; ---------------------------------------------------------------------------
00014A72 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A76 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A7A 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A7E 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A82 03                         byte_1447C:	dc.b 3
00014A83 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A88 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A8D 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A92 03                         byte_1448C:	dc.b 3
00014A93 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A98 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A9D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014AA2 05                         byte_1449C:	dc.b 5
00014AA3 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014AA8 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014AAD FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014AB2 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014AB7 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014ABC 09                         byte_144B6:	dc.b 9
00014ABD F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014AC2 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014AC7 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014ACC 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014AD1 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014AD6 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014ADB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AE0 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014AE5 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014AEA 12                         byte_144E4:	dc.b $12
00014AEB 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014AF0 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014AF5 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AFA 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014AFF 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014B04 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014B09 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014B0E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014B13 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014B18 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014B1D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014B22 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014B27 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014B2C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014B31 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B36 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B3B 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B40 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B45 11                         byte_1453F:	dc.b $11
00014B46 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B4B F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B50 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B55 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B5A 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B5F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B64 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B69 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B6E 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B73 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B78 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B7D 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B82 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B87 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B8C F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B91 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B96 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B9B 09                         byte_14595:	dc.b 9
00014B9C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014BA1 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014BA6 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014BAB 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014BB0 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014BB5 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014BBA 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014BBF 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014BC4 04                         		dc.b 4
00014BC5 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014BCA                            		even
00014BCA                            		even
00014BCA                            
00014BCA                            Ani_obj08:
00014BCA                            	include "_anim\obj08.asm"
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA                            ; Animation script - water splash (LZ)
00014BCA                            ; ---------------------------------------------------------------------------
00014BCA 0000                       		dc.w byte_145C6-Ani_obj08
00014BCC 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014BD2                            		even
00014BD2                            		even
00014BD2                            
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2                            ; Sprite mappings - water splash (LZ)
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2                            Map_obj08:
00014BD2                            	include "_maps\obj08.asm"
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2                            ; Sprite mappings - water splash (LZ)
00014BD2                            ; ---------------------------------------------------------------------------
00014BD2 0000                       		dc.w byte_145D2-Map_obj08
00014BD4 0000                       		dc.w byte_145DD-Map_obj08
00014BD6 0000                       		dc.w byte_145E8-Map_obj08
00014BD8 02                         byte_145D2:	dc.b 2
00014BD9 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BDE FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BE3 02                         byte_145DD:	dc.b 2
00014BE4 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BE9 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BEE 01                         byte_145E8:	dc.b 1
00014BEF E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BF4                            		even
00014BF4                            		even
00014BF4                            
00014BF4                            ; ---------------------------------------------------------------------------
00014BF4                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BF4                            ; ---------------------------------------------------------------------------
00014BF4                            
00014BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BF4                            
00014BF4                            
00014BF4                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BF4 0828 0003 0022             		btst	#3,$22(a0)
00014BFA 6700                       		beq.s	loc_14602
00014BFC 7000                       		moveq	#0,d0
00014BFE 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C02 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C06 4E75                       		rts	
00014C08                            ; ===========================================================================
00014C08                            
00014C08                            loc_14602:
00014C08 7003                       		moveq	#3,d0
00014C0A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C0E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C12 1028 0026                  		move.b	$26(a0),d0
00014C16 0600 0020                  		addi.b	#$20,d0
00014C1A 6A00                       		bpl.s	loc_14624
00014C1C 1028 0026                  		move.b	$26(a0),d0
00014C20 6A00                       		bpl.s	loc_1461E
00014C22 5300                       		subq.b	#1,d0
00014C24                            
00014C24                            loc_1461E:
00014C24 0600 0020                  		addi.b	#$20,d0
00014C28 6000                       		bra.s	loc_14630
00014C2A                            ; ===========================================================================
00014C2A                            
00014C2A                            loc_14624:
00014C2A 1028 0026                  		move.b	$26(a0),d0
00014C2E 6A00                       		bpl.s	loc_1462C
00014C30 5200                       		addq.b	#1,d0
00014C32                            
00014C32                            loc_1462C:
00014C32 0600 001F                  		addi.b	#$1F,d0
00014C36                            
00014C36                            loc_14630:
00014C36 0200 00C0                  		andi.b	#$C0,d0
00014C3A 0C00 0040                  		cmpi.b	#$40,d0
00014C3E 6700 0000                  		beq.w	Sonic_WalkVertL
00014C42 0C00 0080                  		cmpi.b	#$80,d0
00014C46 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C4A 0C00 00C0                  		cmpi.b	#$C0,d0
00014C4E 6700 0000                  		beq.w	Sonic_WalkVertR
00014C52 3428 000C                  		move.w	$C(a0),d2
00014C56 3628 0008                  		move.w	8(a0),d3
00014C5A 7000                       		moveq	#0,d0
00014C5C 1028 0016                  		move.b	$16(a0),d0
00014C60 4880                       		ext.w	d0
00014C62 D440                       		add.w	d0,d2
00014C64 1028 0017                  		move.b	$17(a0),d0
00014C68 4880                       		ext.w	d0
00014C6A D640                       		add.w	d0,d3
00014C6C 49F8 F768                  		lea	($FFFFF768).w,a4
00014C70 367C 0010                  		movea.w	#$10,a3
00014C74 3C3C 0000                  		move.w	#0,d6
00014C78 7A0D                       		moveq	#$D,d5
00014C7A 6100 0000                  		bsr.w	FindFloor
00014C7E 3F01                       		move.w	d1,-(sp)
00014C80 3428 000C                  		move.w	$C(a0),d2
00014C84 3628 0008                  		move.w	8(a0),d3
00014C88 7000                       		moveq	#0,d0
00014C8A 1028 0016                  		move.b	$16(a0),d0
00014C8E 4880                       		ext.w	d0
00014C90 D440                       		add.w	d0,d2
00014C92 1028 0017                  		move.b	$17(a0),d0
00014C96 4880                       		ext.w	d0
00014C98 4440                       		neg.w	d0
00014C9A D640                       		add.w	d0,d3
00014C9C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CA0 367C 0010                  		movea.w	#$10,a3
00014CA4 3C3C 0000                  		move.w	#0,d6
00014CA8 7A0D                       		moveq	#$D,d5
00014CAA 6100 0000                  		bsr.w	FindFloor
00014CAE 301F                       		move.w	(sp)+,d0
00014CB0 6100 0000                  		bsr.w	Sonic_Angle
00014CB4 4A41                       		tst.w	d1
00014CB6 6700                       		beq.s	locret_146BE
00014CB8 6A00                       		bpl.s	loc_146C0
00014CBA 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CBE 6D00                       		blt.s	locret_146E6
00014CC0 D368 000C                  		add.w	d1,$C(a0)
00014CC4                            
00014CC4                            locret_146BE:
00014CC4 4E75                       		rts	
00014CC6                            ; ===========================================================================
00014CC6                            
00014CC6                            loc_146C0:
00014CC6 0C41 000E                  		cmpi.w	#$E,d1
00014CCA 6E00                       		bgt.s	loc_146CC
00014CCC                            
00014CCC                            loc_146C6:
00014CCC D368 000C                  		add.w	d1,$C(a0)
00014CD0 4E75                       		rts	
00014CD2                            ; ===========================================================================
00014CD2                            
00014CD2                            loc_146CC:
00014CD2 4A28 0038                  		tst.b	$38(a0)
00014CD6 66F4                       		bne.s	loc_146C6
00014CD8 08E8 0001 0022             		bset	#1,$22(a0)
00014CDE 08A8 0005 0022             		bclr	#5,$22(a0)
00014CE4 117C 0001 001D             		move.b	#1,$1D(a0)
00014CEA 4E75                       		rts	
00014CEC                            ; ===========================================================================
00014CEC                            
00014CEC                            locret_146E6:
00014CEC 4E75                       		rts	
00014CEE                            ; End of function Sonic_AnglePos
00014CEE                            
00014CEE                            ; ===========================================================================
00014CEE 2428 0008                  		move.l	8(a0),d2
00014CF2 3028 0010                  		move.w	$10(a0),d0
00014CF6 48C0                       		ext.l	d0
00014CF8 E180                       		asl.l	#8,d0
00014CFA 9480                       		sub.l	d0,d2
00014CFC 2142 0008                  		move.l	d2,8(a0)
00014D00 303C 0038                  		move.w	#$38,d0
00014D04 48C0                       		ext.l	d0
00014D06 E180                       		asl.l	#8,d0
00014D08 9680                       		sub.l	d0,d3
00014D0A 2143 000C                  		move.l	d3,$C(a0)
00014D0E 4E75                       		rts	
00014D10                            ; ===========================================================================
00014D10                            
00014D10                            locret_1470A:
00014D10 4E75                       		rts	
00014D12                            ; ===========================================================================
00014D12 2628 000C                  		move.l	$C(a0),d3
00014D16 3028 0012                  		move.w	$12(a0),d0
00014D1A 0440 0038                  		subi.w	#$38,d0
00014D1E 3140 0012                  		move.w	d0,$12(a0)
00014D22 48C0                       		ext.l	d0
00014D24 E180                       		asl.l	#8,d0
00014D26 9680                       		sub.l	d0,d3
00014D28 2143 000C                  		move.l	d3,$C(a0)
00014D2C 4E75                       		rts	
00014D2E 4E75                       		rts	
00014D30                            ; ===========================================================================
00014D30 2428 0008                  		move.l	8(a0),d2
00014D34 2628 000C                  		move.l	$C(a0),d3
00014D38 3028 0010                  		move.w	$10(a0),d0
00014D3C 48C0                       		ext.l	d0
00014D3E E180                       		asl.l	#8,d0
00014D40 9480                       		sub.l	d0,d2
00014D42 3028 0012                  		move.w	$12(a0),d0
00014D46 48C0                       		ext.l	d0
00014D48 E180                       		asl.l	#8,d0
00014D4A 9680                       		sub.l	d0,d3
00014D4C 2142 0008                  		move.l	d2,8(a0)
00014D50 2143 000C                  		move.l	d3,$C(a0)
00014D54 4E75                       		rts	
00014D56                            
00014D56                            ; ---------------------------------------------------------------------------
00014D56                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D56                            ; ---------------------------------------------------------------------------
00014D56                            
00014D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D56                            
00014D56                            
00014D56                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D56 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D5A B240                       		cmp.w	d0,d1
00014D5C 6F00                       		ble.s	loc_1475E
00014D5E 1438 F768                  		move.b	($FFFFF768).w,d2
00014D62 3200                       		move.w	d0,d1
00014D64                            
00014D64                            loc_1475E:
00014D64 0802 0000                  		btst	#0,d2
00014D68 6600                       		bne.s	loc_1476A
00014D6A 1142 0026                  		move.b	d2,$26(a0)
00014D6E 4E75                       		rts	
00014D70                            ; ===========================================================================
00014D70                            
00014D70                            loc_1476A:
00014D70 1428 0026                  		move.b	$26(a0),d2
00014D74 0602 0020                  		addi.b	#$20,d2
00014D78 0202 00C0                  		andi.b	#$C0,d2
00014D7C 1142 0026                  		move.b	d2,$26(a0)
00014D80 4E75                       		rts	
00014D82                            ; End of function Sonic_Angle
00014D82                            
00014D82                            ; ---------------------------------------------------------------------------
00014D82                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D82                            ; ---------------------------------------------------------------------------
00014D82                            
00014D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D82                            
00014D82                            
00014D82                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D82 3428 000C                  		move.w	$C(a0),d2
00014D86 3628 0008                  		move.w	8(a0),d3
00014D8A 7000                       		moveq	#0,d0
00014D8C 1028 0017                  		move.b	$17(a0),d0
00014D90 4880                       		ext.w	d0
00014D92 4440                       		neg.w	d0
00014D94 D440                       		add.w	d0,d2
00014D96 1028 0016                  		move.b	$16(a0),d0
00014D9A 4880                       		ext.w	d0
00014D9C D640                       		add.w	d0,d3
00014D9E 49F8 F768                  		lea	($FFFFF768).w,a4
00014DA2 367C 0010                  		movea.w	#$10,a3
00014DA6 3C3C 0000                  		move.w	#0,d6
00014DAA 7A0D                       		moveq	#$D,d5
00014DAC 6100 0000                  		bsr.w	FindWall
00014DB0 3F01                       		move.w	d1,-(sp)
00014DB2 3428 000C                  		move.w	$C(a0),d2
00014DB6 3628 0008                  		move.w	8(a0),d3
00014DBA 7000                       		moveq	#0,d0
00014DBC 1028 0017                  		move.b	$17(a0),d0
00014DC0 4880                       		ext.w	d0
00014DC2 D440                       		add.w	d0,d2
00014DC4 1028 0016                  		move.b	$16(a0),d0
00014DC8 4880                       		ext.w	d0
00014DCA D640                       		add.w	d0,d3
00014DCC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DD0 367C 0010                  		movea.w	#$10,a3
00014DD4 3C3C 0000                  		move.w	#0,d6
00014DD8 7A0D                       		moveq	#$D,d5
00014DDA 6100 0000                  		bsr.w	FindWall
00014DDE 301F                       		move.w	(sp)+,d0
00014DE0 6100 FF74                  		bsr.w	Sonic_Angle
00014DE4 4A41                       		tst.w	d1
00014DE6 6700                       		beq.s	locret_147F0
00014DE8 6A00                       		bpl.s	loc_147F2
00014DEA 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DEE 6D00 FF20                  		blt.w	locret_1470A
00014DF2 D368 0008                  		add.w	d1,8(a0)
00014DF6                            
00014DF6                            locret_147F0:
00014DF6 4E75                       		rts	
00014DF8                            ; ===========================================================================
00014DF8                            
00014DF8                            loc_147F2:
00014DF8 0C41 000E                  		cmpi.w	#$E,d1
00014DFC 6E00                       		bgt.s	loc_147FE
00014DFE                            
00014DFE                            loc_147F8:
00014DFE D368 0008                  		add.w	d1,8(a0)
00014E02 4E75                       		rts	
00014E04                            ; ===========================================================================
00014E04                            
00014E04                            loc_147FE:
00014E04 4A28 0038                  		tst.b	$38(a0)
00014E08 66F4                       		bne.s	loc_147F8
00014E0A 08E8 0001 0022             		bset	#1,$22(a0)
00014E10 08A8 0005 0022             		bclr	#5,$22(a0)
00014E16 117C 0001 001D             		move.b	#1,$1D(a0)
00014E1C 4E75                       		rts	
00014E1E                            ; End of function Sonic_WalkVertR
00014E1E                            
00014E1E                            ; ---------------------------------------------------------------------------
00014E1E                            ; Subroutine allowing Sonic to walk upside-down
00014E1E                            ; ---------------------------------------------------------------------------
00014E1E                            
00014E1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E1E                            
00014E1E                            
00014E1E                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014E1E 3428 000C                  		move.w	$C(a0),d2
00014E22 3628 0008                  		move.w	8(a0),d3
00014E26 7000                       		moveq	#0,d0
00014E28 1028 0016                  		move.b	$16(a0),d0
00014E2C 4880                       		ext.w	d0
00014E2E 9440                       		sub.w	d0,d2
00014E30 0A42 000F                  		eori.w	#$F,d2
00014E34 1028 0017                  		move.b	$17(a0),d0
00014E38 4880                       		ext.w	d0
00014E3A D640                       		add.w	d0,d3
00014E3C 49F8 F768                  		lea	($FFFFF768).w,a4
00014E40 367C FFF0                  		movea.w	#-$10,a3
00014E44 3C3C 1000                  		move.w	#$1000,d6
00014E48 7A0D                       		moveq	#$D,d5
00014E4A 6100 0000                  		bsr.w	FindFloor
00014E4E 3F01                       		move.w	d1,-(sp)
00014E50 3428 000C                  		move.w	$C(a0),d2
00014E54 3628 0008                  		move.w	8(a0),d3
00014E58 7000                       		moveq	#0,d0
00014E5A 1028 0016                  		move.b	$16(a0),d0
00014E5E 4880                       		ext.w	d0
00014E60 9440                       		sub.w	d0,d2
00014E62 0A42 000F                  		eori.w	#$F,d2
00014E66 1028 0017                  		move.b	$17(a0),d0
00014E6A 4880                       		ext.w	d0
00014E6C 9640                       		sub.w	d0,d3
00014E6E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E72 367C FFF0                  		movea.w	#-$10,a3
00014E76 3C3C 1000                  		move.w	#$1000,d6
00014E7A 7A0D                       		moveq	#$D,d5
00014E7C 6100 0000                  		bsr.w	FindFloor
00014E80 301F                       		move.w	(sp)+,d0
00014E82 6100 FED2                  		bsr.w	Sonic_Angle
00014E86 4A41                       		tst.w	d1
00014E88 6700                       		beq.s	locret_14892
00014E8A 6A00                       		bpl.s	loc_14894
00014E8C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E90 6D00 FE5A                  		blt.w	locret_146E6
00014E94 9368 000C                  		sub.w	d1,$C(a0)
00014E98                            
00014E98                            locret_14892:
00014E98 4E75                       		rts	
00014E9A                            ; ===========================================================================
00014E9A                            
00014E9A                            loc_14894:
00014E9A 0C41 000E                  		cmpi.w	#$E,d1
00014E9E 6E00                       		bgt.s	loc_148A0
00014EA0                            
00014EA0                            loc_1489A:
00014EA0 9368 000C                  		sub.w	d1,$C(a0)
00014EA4 4E75                       		rts	
00014EA6                            ; ===========================================================================
00014EA6                            
00014EA6                            loc_148A0:
00014EA6 4A28 0038                  		tst.b	$38(a0)
00014EAA 66F4                       		bne.s	loc_1489A
00014EAC 08E8 0001 0022             		bset	#1,$22(a0)
00014EB2 08A8 0005 0022             		bclr	#5,$22(a0)
00014EB8 117C 0001 001D             		move.b	#1,$1D(a0)
00014EBE 4E75                       		rts	
00014EC0                            ; End of function Sonic_WalkCeiling
00014EC0                            
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014EC0                            ; ---------------------------------------------------------------------------
00014EC0                            
00014EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EC0                            
00014EC0                            
00014EC0                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014EC0 3428 000C                  		move.w	$C(a0),d2
00014EC4 3628 0008                  		move.w	8(a0),d3
00014EC8 7000                       		moveq	#0,d0
00014ECA 1028 0017                  		move.b	$17(a0),d0
00014ECE 4880                       		ext.w	d0
00014ED0 9440                       		sub.w	d0,d2
00014ED2 1028 0016                  		move.b	$16(a0),d0
00014ED6 4880                       		ext.w	d0
00014ED8 9640                       		sub.w	d0,d3
00014EDA 0A43 000F                  		eori.w	#$F,d3
00014EDE 49F8 F768                  		lea	($FFFFF768).w,a4
00014EE2 367C FFF0                  		movea.w	#-$10,a3
00014EE6 3C3C 0800                  		move.w	#$800,d6
00014EEA 7A0D                       		moveq	#$D,d5
00014EEC 6100 0000                  		bsr.w	FindWall
00014EF0 3F01                       		move.w	d1,-(sp)
00014EF2 3428 000C                  		move.w	$C(a0),d2
00014EF6 3628 0008                  		move.w	8(a0),d3
00014EFA 7000                       		moveq	#0,d0
00014EFC 1028 0017                  		move.b	$17(a0),d0
00014F00 4880                       		ext.w	d0
00014F02 D440                       		add.w	d0,d2
00014F04 1028 0016                  		move.b	$16(a0),d0
00014F08 4880                       		ext.w	d0
00014F0A 9640                       		sub.w	d0,d3
00014F0C 0A43 000F                  		eori.w	#$F,d3
00014F10 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F14 367C FFF0                  		movea.w	#-$10,a3
00014F18 3C3C 0800                  		move.w	#$800,d6
00014F1C 7A0D                       		moveq	#$D,d5
00014F1E 6100 0000                  		bsr.w	FindWall
00014F22 301F                       		move.w	(sp)+,d0
00014F24 6100 FE30                  		bsr.w	Sonic_Angle
00014F28 4A41                       		tst.w	d1
00014F2A 6700                       		beq.s	locret_14934
00014F2C 6A00                       		bpl.s	loc_14936
00014F2E 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F32 6D00 FDDC                  		blt.w	locret_1470A
00014F36 9368 0008                  		sub.w	d1,8(a0)
00014F3A                            
00014F3A                            locret_14934:
00014F3A 4E75                       		rts	
00014F3C                            ; ===========================================================================
00014F3C                            
00014F3C                            loc_14936:
00014F3C 0C41 000E                  		cmpi.w	#$E,d1
00014F40 6E00                       		bgt.s	loc_14942
00014F42                            
00014F42                            loc_1493C:
00014F42 9368 0008                  		sub.w	d1,8(a0)
00014F46 4E75                       		rts	
00014F48                            ; ===========================================================================
00014F48                            
00014F48                            loc_14942:
00014F48 4A28 0038                  		tst.b	$38(a0)
00014F4C 66F4                       		bne.s	loc_1493C
00014F4E 08E8 0001 0022             		bset	#1,$22(a0)
00014F54 08A8 0005 0022             		bclr	#5,$22(a0)
00014F5A 117C 0001 001D             		move.b	#1,$1D(a0)
00014F60 4E75                       		rts	
00014F62                            ; End of function Sonic_WalkVertL
00014F62                            
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            ; Subroutine to	find which tile	the object is standing on
00014F62                            ; ---------------------------------------------------------------------------
00014F62                            
00014F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F62                            
00014F62                            
00014F62                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F62 3002                       		move.w	d2,d0
00014F64 E248                       		lsr.w	#1,d0
00014F66 0240 0380                  		andi.w	#$380,d0
00014F6A 3203                       		move.w	d3,d1
00014F6C E049                       		lsr.w	#8,d1
00014F6E 0241 007F                  		andi.w	#$7F,d1
00014F72 D041                       		add.w	d1,d0
00014F74 72FF                       		moveq	#-1,d1
00014F76 43F8 A400                  		lea	($FFFFA400).w,a1
00014F7A 1231 0000                  		move.b	(a1,d0.w),d1
00014F7E 6700                       		beq.s	loc_14996
00014F80 6B00                       		bmi.s	loc_1499A
00014F82 5301                       		subq.b	#1,d1
00014F84 4881                       		ext.w	d1
00014F86 EE59                       		ror.w	#7,d1
00014F88 3002                       		move.w	d2,d0
00014F8A D040                       		add.w	d0,d0
00014F8C 0240 01E0                  		andi.w	#$1E0,d0
00014F90 D240                       		add.w	d0,d1
00014F92 3003                       		move.w	d3,d0
00014F94 E648                       		lsr.w	#3,d0
00014F96 0240 001E                  		andi.w	#$1E,d0
00014F9A D240                       		add.w	d0,d1
00014F9C                            
00014F9C                            loc_14996:
00014F9C 2241                       		movea.l	d1,a1
00014F9E 4E75                       		rts	
00014FA0                            ; ===========================================================================
00014FA0                            
00014FA0                            loc_1499A:
00014FA0 0241 007F                  		andi.w	#$7F,d1
00014FA4 0828 0006 0001             		btst	#6,1(a0)
00014FAA 6700                       		beq.s	loc_149B2
00014FAC 5241                       		addq.w	#1,d1
00014FAE 0C41 0029                  		cmpi.w	#$29,d1
00014FB2 6600                       		bne.s	loc_149B2
00014FB4 323C 0051                  		move.w	#$51,d1
00014FB8                            
00014FB8                            loc_149B2:
00014FB8 5301                       		subq.b	#1,d1
00014FBA EE59                       		ror.w	#7,d1
00014FBC 3002                       		move.w	d2,d0
00014FBE D040                       		add.w	d0,d0
00014FC0 0240 01E0                  		andi.w	#$1E0,d0
00014FC4 D240                       		add.w	d0,d1
00014FC6 3003                       		move.w	d3,d0
00014FC8 E648                       		lsr.w	#3,d0
00014FCA 0240 001E                  		andi.w	#$1E,d0
00014FCE D240                       		add.w	d0,d1
00014FD0 2241                       		movea.l	d1,a1
00014FD2 4E75                       		rts	
00014FD4                            ; End of function Floor_ChkTile
00014FD4                            
00014FD4                            
00014FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FD4                            
00014FD4                            
00014FD4                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014FD4 618C                       		bsr.s	Floor_ChkTile
00014FD6 3011                       		move.w	(a1),d0
00014FD8 3800                       		move.w	d0,d4
00014FDA 0240 07FF                  		andi.w	#$7FF,d0
00014FDE 6700                       		beq.s	loc_149DE
00014FE0 0B04                       		btst	d5,d4
00014FE2 6600                       		bne.s	loc_149EC
00014FE4                            
00014FE4                            loc_149DE:
00014FE4 D44B                       		add.w	a3,d2
00014FE6 6100 0000                  		bsr.w	FindFloor2
00014FEA 944B                       		sub.w	a3,d2
00014FEC 0641 0010                  		addi.w	#$10,d1
00014FF0 4E75                       		rts	
00014FF2                            ; ===========================================================================
00014FF2                            
00014FF2                            loc_149EC:
00014FF2 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FF6 1032 0000                  		move.b	(a2,d0.w),d0
00014FFA 0240 00FF                  		andi.w	#$FF,d0
00014FFE 67E4                       		beq.s	loc_149DE
00015000 45F9 0000 0000             		lea	(AngleMap).l,a2
00015006 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001500A E948                       		lsl.w	#4,d0
0001500C 3203                       		move.w	d3,d1
0001500E 0804 000B                  		btst	#$B,d4
00015012 6700                       		beq.s	loc_14A12
00015014 4641                       		not.w	d1
00015016 4414                       		neg.b	(a4)
00015018                            
00015018                            loc_14A12:
00015018 0804 000C                  		btst	#$C,d4
0001501C 6700                       		beq.s	loc_14A22
0001501E 0614 0040                  		addi.b	#$40,(a4)
00015022 4414                       		neg.b	(a4)
00015024 0414 0040                  		subi.b	#$40,(a4)
00015028                            
00015028                            loc_14A22:
00015028 0241 000F                  		andi.w	#$F,d1
0001502C D240                       		add.w	d0,d1
0001502E 45F9 0000 0000             		lea	(CollArray1).l,a2
00015034 1032 1000                  		move.b	(a2,d1.w),d0
00015038 4880                       		ext.w	d0
0001503A BD44                       		eor.w	d6,d4
0001503C 0804 000C                  		btst	#$C,d4
00015040 6700                       		beq.s	loc_14A3E
00015042 4440                       		neg.w	d0
00015044                            
00015044                            loc_14A3E:
00015044 4A40                       		tst.w	d0
00015046 679C                       		beq.s	loc_149DE
00015048 6B00                       		bmi.s	loc_14A5A
0001504A 0C00 0010                  		cmpi.b	#$10,d0
0001504E 6700                       		beq.s	loc_14A66
00015050 3202                       		move.w	d2,d1
00015052 0241 000F                  		andi.w	#$F,d1
00015056 D041                       		add.w	d1,d0
00015058 323C 000F                  		move.w	#$F,d1
0001505C 9240                       		sub.w	d0,d1
0001505E 4E75                       		rts	
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_14A5A:
00015060 3202                       		move.w	d2,d1
00015062 0241 000F                  		andi.w	#$F,d1
00015066 D041                       		add.w	d1,d0
00015068 6A00 FF7A                  		bpl.w	loc_149DE
0001506C                            
0001506C                            loc_14A66:
0001506C 944B                       		sub.w	a3,d2
0001506E 6100 0000                  		bsr.w	FindFloor2
00015072 D44B                       		add.w	a3,d2
00015074 0441 0010                  		subi.w	#$10,d1
00015078 4E75                       		rts	
0001507A                            ; End of function FindFloor
0001507A                            
0001507A                            
0001507A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001507A                            
0001507A                            
0001507A                            FindFloor2:				; XREF: FindFloor
0001507A 6100 FEE6                  		bsr.w	Floor_ChkTile
0001507E 3011                       		move.w	(a1),d0
00015080 3800                       		move.w	d0,d4
00015082 0240 07FF                  		andi.w	#$7FF,d0
00015086 6700                       		beq.s	loc_14A86
00015088 0B04                       		btst	d5,d4
0001508A 6600                       		bne.s	loc_14A94
0001508C                            
0001508C                            loc_14A86:
0001508C 323C 000F                  		move.w	#$F,d1
00015090 3002                       		move.w	d2,d0
00015092 0240 000F                  		andi.w	#$F,d0
00015096 9240                       		sub.w	d0,d1
00015098 4E75                       		rts	
0001509A                            ; ===========================================================================
0001509A                            
0001509A                            loc_14A94:
0001509A 2478 F796                  		movea.l	($FFFFF796).w,a2
0001509E 1032 0000                  		move.b	(a2,d0.w),d0
000150A2 0240 00FF                  		andi.w	#$FF,d0
000150A6 67E4                       		beq.s	loc_14A86
000150A8 45F9 0000 0000             		lea	(AngleMap).l,a2
000150AE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150B2 E948                       		lsl.w	#4,d0
000150B4 3203                       		move.w	d3,d1
000150B6 0804 000B                  		btst	#$B,d4
000150BA 6700                       		beq.s	loc_14ABA
000150BC 4641                       		not.w	d1
000150BE 4414                       		neg.b	(a4)
000150C0                            
000150C0                            loc_14ABA:
000150C0 0804 000C                  		btst	#$C,d4
000150C4 6700                       		beq.s	loc_14ACA
000150C6 0614 0040                  		addi.b	#$40,(a4)
000150CA 4414                       		neg.b	(a4)
000150CC 0414 0040                  		subi.b	#$40,(a4)
000150D0                            
000150D0                            loc_14ACA:
000150D0 0241 000F                  		andi.w	#$F,d1
000150D4 D240                       		add.w	d0,d1
000150D6 45F9 0000 0000             		lea	(CollArray1).l,a2
000150DC 1032 1000                  		move.b	(a2,d1.w),d0
000150E0 4880                       		ext.w	d0
000150E2 BD44                       		eor.w	d6,d4
000150E4 0804 000C                  		btst	#$C,d4
000150E8 6700                       		beq.s	loc_14AE6
000150EA 4440                       		neg.w	d0
000150EC                            
000150EC                            loc_14AE6:
000150EC 4A40                       		tst.w	d0
000150EE 679C                       		beq.s	loc_14A86
000150F0 6B00                       		bmi.s	loc_14AFC
000150F2 3202                       		move.w	d2,d1
000150F4 0241 000F                  		andi.w	#$F,d1
000150F8 D041                       		add.w	d1,d0
000150FA 323C 000F                  		move.w	#$F,d1
000150FE 9240                       		sub.w	d0,d1
00015100 4E75                       		rts	
00015102                            ; ===========================================================================
00015102                            
00015102                            loc_14AFC:
00015102 3202                       		move.w	d2,d1
00015104 0241 000F                  		andi.w	#$F,d1
00015108 D041                       		add.w	d1,d0
0001510A 6A00 FF80                  		bpl.w	loc_14A86
0001510E 4641                       		not.w	d1
00015110 4E75                       		rts	
00015112                            ; End of function FindFloor2
00015112                            
00015112                            
00015112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015112                            
00015112                            
00015112                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015112 6100 FE4E                  		bsr.w	Floor_ChkTile
00015116 3011                       		move.w	(a1),d0
00015118 3800                       		move.w	d0,d4
0001511A 0240 07FF                  		andi.w	#$7FF,d0
0001511E 6700                       		beq.s	loc_14B1E
00015120 0B04                       		btst	d5,d4
00015122 6600                       		bne.s	loc_14B2C
00015124                            
00015124                            loc_14B1E:
00015124 D64B                       		add.w	a3,d3
00015126 6100 0000                  		bsr.w	FindWall2
0001512A 964B                       		sub.w	a3,d3
0001512C 0641 0010                  		addi.w	#$10,d1
00015130 4E75                       		rts	
00015132                            ; ===========================================================================
00015132                            
00015132                            loc_14B2C:
00015132 2478 F796                  		movea.l	($FFFFF796).w,a2
00015136 1032 0000                  		move.b	(a2,d0.w),d0
0001513A 0240 00FF                  		andi.w	#$FF,d0
0001513E 67E4                       		beq.s	loc_14B1E
00015140 45F9 0000 0000             		lea	(AngleMap).l,a2
00015146 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001514A E948                       		lsl.w	#4,d0
0001514C 3202                       		move.w	d2,d1
0001514E 0804 000C                  		btst	#$C,d4
00015152 6700                       		beq.s	loc_14B5A
00015154 4641                       		not.w	d1
00015156 0614 0040                  		addi.b	#$40,(a4)
0001515A 4414                       		neg.b	(a4)
0001515C 0414 0040                  		subi.b	#$40,(a4)
00015160                            
00015160                            loc_14B5A:
00015160 0804 000B                  		btst	#$B,d4
00015164 6700                       		beq.s	loc_14B62
00015166 4414                       		neg.b	(a4)
00015168                            
00015168                            loc_14B62:
00015168 0241 000F                  		andi.w	#$F,d1
0001516C D240                       		add.w	d0,d1
0001516E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015174 1032 1000                  		move.b	(a2,d1.w),d0
00015178 4880                       		ext.w	d0
0001517A BD44                       		eor.w	d6,d4
0001517C 0804 000B                  		btst	#$B,d4
00015180 6700                       		beq.s	loc_14B7E
00015182 4440                       		neg.w	d0
00015184                            
00015184                            loc_14B7E:
00015184 4A40                       		tst.w	d0
00015186 679C                       		beq.s	loc_14B1E
00015188 6B00                       		bmi.s	loc_14B9A
0001518A 0C00 0010                  		cmpi.b	#$10,d0
0001518E 6700                       		beq.s	loc_14BA6
00015190 3203                       		move.w	d3,d1
00015192 0241 000F                  		andi.w	#$F,d1
00015196 D041                       		add.w	d1,d0
00015198 323C 000F                  		move.w	#$F,d1
0001519C 9240                       		sub.w	d0,d1
0001519E 4E75                       		rts	
000151A0                            ; ===========================================================================
000151A0                            
000151A0                            loc_14B9A:
000151A0 3203                       		move.w	d3,d1
000151A2 0241 000F                  		andi.w	#$F,d1
000151A6 D041                       		add.w	d1,d0
000151A8 6A00 FF7A                  		bpl.w	loc_14B1E
000151AC                            
000151AC                            loc_14BA6:
000151AC 964B                       		sub.w	a3,d3
000151AE 6100 0000                  		bsr.w	FindWall2
000151B2 D64B                       		add.w	a3,d3
000151B4 0441 0010                  		subi.w	#$10,d1
000151B8 4E75                       		rts	
000151BA                            ; End of function FindWall
000151BA                            
000151BA                            
000151BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151BA                            
000151BA                            
000151BA                            FindWall2:				; XREF: FindWall
000151BA 6100 FDA6                  		bsr.w	Floor_ChkTile
000151BE 3011                       		move.w	(a1),d0
000151C0 3800                       		move.w	d0,d4
000151C2 0240 07FF                  		andi.w	#$7FF,d0
000151C6 6700                       		beq.s	loc_14BC6
000151C8 0B04                       		btst	d5,d4
000151CA 6600                       		bne.s	loc_14BD4
000151CC                            
000151CC                            loc_14BC6:
000151CC 323C 000F                  		move.w	#$F,d1
000151D0 3003                       		move.w	d3,d0
000151D2 0240 000F                  		andi.w	#$F,d0
000151D6 9240                       		sub.w	d0,d1
000151D8 4E75                       		rts	
000151DA                            ; ===========================================================================
000151DA                            
000151DA                            loc_14BD4:
000151DA 2478 F796                  		movea.l	($FFFFF796).w,a2
000151DE 1032 0000                  		move.b	(a2,d0.w),d0
000151E2 0240 00FF                  		andi.w	#$FF,d0
000151E6 67E4                       		beq.s	loc_14BC6
000151E8 45F9 0000 0000             		lea	(AngleMap).l,a2
000151EE 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151F2 E948                       		lsl.w	#4,d0
000151F4 3202                       		move.w	d2,d1
000151F6 0804 000C                  		btst	#$C,d4
000151FA 6700                       		beq.s	loc_14C02
000151FC 4641                       		not.w	d1
000151FE 0614 0040                  		addi.b	#$40,(a4)
00015202 4414                       		neg.b	(a4)
00015204 0414 0040                  		subi.b	#$40,(a4)
00015208                            
00015208                            loc_14C02:
00015208 0804 000B                  		btst	#$B,d4
0001520C 6700                       		beq.s	loc_14C0A
0001520E 4414                       		neg.b	(a4)
00015210                            
00015210                            loc_14C0A:
00015210 0241 000F                  		andi.w	#$F,d1
00015214 D240                       		add.w	d0,d1
00015216 45F9 0000 0000             		lea	(CollArray2).l,a2
0001521C 1032 1000                  		move.b	(a2,d1.w),d0
00015220 4880                       		ext.w	d0
00015222 BD44                       		eor.w	d6,d4
00015224 0804 000B                  		btst	#$B,d4
00015228 6700                       		beq.s	loc_14C26
0001522A 4440                       		neg.w	d0
0001522C                            
0001522C                            loc_14C26:
0001522C 4A40                       		tst.w	d0
0001522E 679C                       		beq.s	loc_14BC6
00015230 6B00                       		bmi.s	loc_14C3C
00015232 3203                       		move.w	d3,d1
00015234 0241 000F                  		andi.w	#$F,d1
00015238 D041                       		add.w	d1,d0
0001523A 323C 000F                  		move.w	#$F,d1
0001523E 9240                       		sub.w	d0,d1
00015240 4E75                       		rts	
00015242                            ; ===========================================================================
00015242                            
00015242                            loc_14C3C:
00015242 3203                       		move.w	d3,d1
00015244 0241 000F                  		andi.w	#$F,d1
00015248 D041                       		add.w	d1,d0
0001524A 6A00 FF80                  		bpl.w	loc_14BC6
0001524E 4641                       		not.w	d1
00015250 4E75                       		rts	
00015252                            ; End of function FindWall2
00015252                            
00015252                            ; ---------------------------------------------------------------------------
00015252                            ; Unused floor/wall subroutine - logs something	to do with collision
00015252                            ; ---------------------------------------------------------------------------
00015252                            
00015252                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015252                            
00015252                            
00015252                            FloorLog_Unk:				; XREF: Level
00015252 4E75                       		rts	
00015254                            
00015254 43F9 0000 0000             		lea	(CollArray1).l,a1
0001525A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015260 363C 00FF                  		move.w	#$FF,d3
00015264                            
00015264                            loc_14C5E:
00015264 7A10                       		moveq	#$10,d5
00015266 343C 000F                  		move.w	#$F,d2
0001526A                            
0001526A                            loc_14C64:
0001526A 7800                       		moveq	#0,d4
0001526C 323C 000F                  		move.w	#$F,d1
00015270                            
00015270                            loc_14C6A:
00015270 3019                       		move.w	(a1)+,d0
00015272 EAA8                       		lsr.l	d5,d0
00015274 D944                       		addx.w	d4,d4
00015276 51C9 FFF8                  		dbf	d1,loc_14C6A
0001527A                            
0001527A 34C4                       		move.w	d4,(a2)+
0001527C 92FC 0020                  		suba.w	#$20,a1
00015280 5345                       		subq.w	#1,d5
00015282 51CA FFE6                  		dbf	d2,loc_14C64
00015286                            
00015286 D2FC 0020                  		adda.w	#$20,a1
0001528A 51CB FFD8                  		dbf	d3,loc_14C5E
0001528E                            
0001528E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015294 45F9 0000 0000             		lea	(CollArray2).l,a2
0001529A 6100                       		bsr.s	FloorLog_Unk2
0001529C 43F9 0000 0000             		lea	(CollArray1).l,a1
000152A2 45F9 0000 0000             		lea	(CollArray1).l,a2
000152A8                            
000152A8                            ; End of function FloorLog_Unk
000152A8                            
000152A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A8                            
000152A8                            
000152A8                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000152A8 363C 0FFF                  		move.w	#$FFF,d3
000152AC                            
000152AC                            loc_14CA6:
000152AC 7400                       		moveq	#0,d2
000152AE 323C 000F                  		move.w	#$F,d1
000152B2 3019                       		move.w	(a1)+,d0
000152B4 6700                       		beq.s	loc_14CD4
000152B6 6B00                       		bmi.s	loc_14CBE
000152B8                            
000152B8                            loc_14CB2:
000152B8 E248                       		lsr.w	#1,d0
000152BA 6400                       		bcc.s	loc_14CB8
000152BC 5202                       		addq.b	#1,d2
000152BE                            
000152BE                            loc_14CB8:
000152BE 51C9 FFF8                  		dbf	d1,loc_14CB2
000152C2                            
000152C2 6000                       		bra.s	loc_14CD6
000152C4                            ; ===========================================================================
000152C4                            
000152C4                            loc_14CBE:
000152C4 0C40 FFFF                  		cmpi.w	#-1,d0
000152C8 6700                       		beq.s	loc_14CD0
000152CA                            
000152CA                            loc_14CC4:
000152CA E348                       		lsl.w	#1,d0
000152CC 6400                       		bcc.s	loc_14CCA
000152CE 5302                       		subq.b	#1,d2
000152D0                            
000152D0                            loc_14CCA:
000152D0 51C9 FFF8                  		dbf	d1,loc_14CC4
000152D4                            
000152D4 6000                       		bra.s	loc_14CD6
000152D6                            ; ===========================================================================
000152D6                            
000152D6                            loc_14CD0:
000152D6 303C 0010                  		move.w	#$10,d0
000152DA                            
000152DA                            loc_14CD4:
000152DA 3400                       		move.w	d0,d2
000152DC                            
000152DC                            loc_14CD6:
000152DC 14C2                       		move.b	d2,(a2)+
000152DE 51CB FFCC                  		dbf	d3,loc_14CA6
000152E2                            
000152E2 4E75                       		rts	
000152E4                            
000152E4                            ; End of function FloorLog_Unk2
000152E4                            
000152E4                            
000152E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152E4                            
000152E4                            
000152E4                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152E4 2628 0008                  		move.l	8(a0),d3
000152E8 2428 000C                  		move.l	$C(a0),d2
000152EC 3228 0010                  		move.w	$10(a0),d1
000152F0 48C1                       		ext.l	d1
000152F2 E181                       		asl.l	#8,d1
000152F4 D681                       		add.l	d1,d3
000152F6 3228 0012                  		move.w	$12(a0),d1
000152FA 48C1                       		ext.l	d1
000152FC E181                       		asl.l	#8,d1
000152FE D481                       		add.l	d1,d2
00015300 4842                       		swap	d2
00015302 4843                       		swap	d3
00015304 11C0 F768                  		move.b	d0,($FFFFF768).w
00015308 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001530C 1200                       		move.b	d0,d1
0001530E 0600 0020                  		addi.b	#$20,d0
00015312 6A00                       		bpl.s	loc_14D1A
00015314 1001                       		move.b	d1,d0
00015316 6A00                       		bpl.s	loc_14D14
00015318 5300                       		subq.b	#1,d0
0001531A                            
0001531A                            loc_14D14:
0001531A 0600 0020                  		addi.b	#$20,d0
0001531E 6000                       		bra.s	loc_14D24
00015320                            ; ===========================================================================
00015320                            
00015320                            loc_14D1A:
00015320 1001                       		move.b	d1,d0
00015322 6A00                       		bpl.s	loc_14D20
00015324 5200                       		addq.b	#1,d0
00015326                            
00015326                            loc_14D20:
00015326 0600 001F                  		addi.b	#$1F,d0
0001532A                            
0001532A                            loc_14D24:
0001532A 0200 00C0                  		andi.b	#$C0,d0
0001532E 6700 0000                  		beq.w	loc_14DF0
00015332 0C00 0080                  		cmpi.b	#$80,d0
00015336 6700 0000                  		beq.w	loc_14F7C
0001533A 0201 0038                  		andi.b	#$38,d1
0001533E 6600                       		bne.s	loc_14D3C
00015340 5042                       		addq.w	#8,d2
00015342                            
00015342                            loc_14D3C:
00015342 0C00 0040                  		cmpi.b	#$40,d0
00015346 6700 0000                  		beq.w	loc_1504A
0001534A 6000 0000                  		bra.w	loc_14EBC
0001534E                            
0001534E                            ; End of function Sonic_WalkSpeed
0001534E                            
0001534E                            
0001534E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001534E                            
0001534E                            
0001534E                            sub_14D48:				; XREF: Sonic_Jump
0001534E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015352 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015356 0600 0020                  		addi.b	#$20,d0
0001535A 0200 00C0                  		andi.b	#$C0,d0
0001535E 0C00 0040                  		cmpi.b	#$40,d0
00015362 6700 0000                  		beq.w	loc_14FD6
00015366 0C00 0080                  		cmpi.b	#$80,d0
0001536A 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001536E 0C00 00C0                  		cmpi.b	#$C0,d0
00015372 6700 0000                  		beq.w	sub_14E50
00015376                            
00015376                            ; End of function sub_14D48
00015376                            
00015376                            ; ---------------------------------------------------------------------------
00015376                            ; Subroutine to	make Sonic land	on the floor after jumping
00015376                            ; ---------------------------------------------------------------------------
00015376                            
00015376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015376                            
00015376                            
00015376                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015376 3428 000C                  		move.w	$C(a0),d2
0001537A 3628 0008                  		move.w	8(a0),d3
0001537E 7000                       		moveq	#0,d0
00015380 1028 0016                  		move.b	$16(a0),d0
00015384 4880                       		ext.w	d0
00015386 D440                       		add.w	d0,d2
00015388 1028 0017                  		move.b	$17(a0),d0
0001538C 4880                       		ext.w	d0
0001538E D640                       		add.w	d0,d3
00015390 49F8 F768                  		lea	($FFFFF768).w,a4
00015394 367C 0010                  		movea.w	#$10,a3
00015398 3C3C 0000                  		move.w	#0,d6
0001539C 7A0D                       		moveq	#$D,d5
0001539E 6100 FC34                  		bsr.w	FindFloor
000153A2 3F01                       		move.w	d1,-(sp)
000153A4 3428 000C                  		move.w	$C(a0),d2
000153A8 3628 0008                  		move.w	8(a0),d3
000153AC 7000                       		moveq	#0,d0
000153AE 1028 0016                  		move.b	$16(a0),d0
000153B2 4880                       		ext.w	d0
000153B4 D440                       		add.w	d0,d2
000153B6 1028 0017                  		move.b	$17(a0),d0
000153BA 4880                       		ext.w	d0
000153BC 9640                       		sub.w	d0,d3
000153BE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153C2 367C 0010                  		movea.w	#$10,a3
000153C6 3C3C 0000                  		move.w	#0,d6
000153CA 7A0D                       		moveq	#$D,d5
000153CC 6100 FC06                  		bsr.w	FindFloor
000153D0 301F                       		move.w	(sp)+,d0
000153D2 143C 0000                  		move.b	#0,d2
000153D6                            
000153D6                            loc_14DD0:
000153D6 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153DA B240                       		cmp.w	d0,d1
000153DC 6F00                       		ble.s	loc_14DDE
000153DE 1638 F768                  		move.b	($FFFFF768).w,d3
000153E2 C141                       		exg	d0,d1
000153E4                            
000153E4                            loc_14DDE:
000153E4 0803 0000                  		btst	#0,d3
000153E8 6700                       		beq.s	locret_14DE6
000153EA 1602                       		move.b	d2,d3
000153EC                            
000153EC                            locret_14DE6:
000153EC 4E75                       		rts	
000153EE                            
000153EE                            ; End of function Sonic_HitFloor
000153EE                            
000153EE                            ; ===========================================================================
000153EE 3428 000C                  		move.w	$C(a0),d2
000153F2 3628 0008                  		move.w	8(a0),d3
000153F6                            
000153F6                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153F6 0642 000A                  		addi.w	#$A,d2
000153FA 49F8 F768                  		lea	($FFFFF768).w,a4
000153FE 367C 0010                  		movea.w	#$10,a3
00015402 3C3C 0000                  		move.w	#0,d6
00015406 7A0E                       		moveq	#$E,d5
00015408 6100 FBCA                  		bsr.w	FindFloor
0001540C 143C 0000                  		move.b	#0,d2
00015410                            
00015410                            loc_14E0A:				; XREF: sub_14EB4
00015410 1638 F768                  		move.b	($FFFFF768).w,d3
00015414 0803 0000                  		btst	#0,d3
00015418 6700                       		beq.s	locret_14E16
0001541A 1602                       		move.b	d2,d3
0001541C                            
0001541C                            locret_14E16:
0001541C 4E75                       		rts	
0001541E                            
0001541E                            ; ---------------------------------------------------------------------------
0001541E                            ; Subroutine allowing objects to interact with the floor
0001541E                            ; ---------------------------------------------------------------------------
0001541E                            
0001541E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001541E                            
0001541E                            
0001541E                            ObjHitFloor:
0001541E 3628 0008                  		move.w	8(a0),d3
00015422                            
00015422                            ; End of function ObjHitFloor
00015422                            
00015422                            
00015422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015422                            
00015422                            
00015422                            ObjHitFloor2:
00015422 3428 000C                  		move.w	$C(a0),d2
00015426 7000                       		moveq	#0,d0
00015428 1028 0016                  		move.b	$16(a0),d0
0001542C 4880                       		ext.w	d0
0001542E D440                       		add.w	d0,d2
00015430 49F8 F768                  		lea	($FFFFF768).w,a4
00015434 18BC 0000                  		move.b	#0,(a4)
00015438 367C 0010                  		movea.w	#$10,a3
0001543C 3C3C 0000                  		move.w	#0,d6
00015440 7A0D                       		moveq	#$D,d5
00015442 6100 FB90                  		bsr.w	FindFloor
00015446 1638 F768                  		move.b	($FFFFF768).w,d3
0001544A 0803 0000                  		btst	#0,d3
0001544E 6700                       		beq.s	locret_14E4E
00015450 163C 0000                  		move.b	#0,d3
00015454                            
00015454                            locret_14E4E:
00015454 4E75                       		rts	
00015456                            ; End of function ObjHitFloor2
00015456                            
00015456                            
00015456                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015456                            
00015456                            
00015456                            sub_14E50:				; XREF: sub_14D48
00015456 3428 000C                  		move.w	$C(a0),d2
0001545A 3628 0008                  		move.w	8(a0),d3
0001545E 7000                       		moveq	#0,d0
00015460 1028 0017                  		move.b	$17(a0),d0
00015464 4880                       		ext.w	d0
00015466 9440                       		sub.w	d0,d2
00015468 1028 0016                  		move.b	$16(a0),d0
0001546C 4880                       		ext.w	d0
0001546E D640                       		add.w	d0,d3
00015470 49F8 F768                  		lea	($FFFFF768).w,a4
00015474 367C 0010                  		movea.w	#$10,a3
00015478 3C3C 0000                  		move.w	#0,d6
0001547C 7A0E                       		moveq	#$E,d5
0001547E 6100 FC92                  		bsr.w	FindWall
00015482 3F01                       		move.w	d1,-(sp)
00015484 3428 000C                  		move.w	$C(a0),d2
00015488 3628 0008                  		move.w	8(a0),d3
0001548C 7000                       		moveq	#0,d0
0001548E 1028 0017                  		move.b	$17(a0),d0
00015492 4880                       		ext.w	d0
00015494 D440                       		add.w	d0,d2
00015496 1028 0016                  		move.b	$16(a0),d0
0001549A 4880                       		ext.w	d0
0001549C D640                       		add.w	d0,d3
0001549E 49F8 F76A                  		lea	($FFFFF76A).w,a4
000154A2 367C 0010                  		movea.w	#$10,a3
000154A6 3C3C 0000                  		move.w	#0,d6
000154AA 7A0E                       		moveq	#$E,d5
000154AC 6100 FC64                  		bsr.w	FindWall
000154B0 301F                       		move.w	(sp)+,d0
000154B2 143C 00C0                  		move.b	#-$40,d2
000154B6 6000 FF1E                  		bra.w	loc_14DD0
000154BA                            
000154BA                            ; End of function sub_14E50
000154BA                            
000154BA                            
000154BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154BA                            
000154BA                            
000154BA                            sub_14EB4:				; XREF: Sonic_Floor
000154BA 3428 000C                  		move.w	$C(a0),d2
000154BE 3628 0008                  		move.w	8(a0),d3
000154C2                            
000154C2                            loc_14EBC:
000154C2 0643 000A                  		addi.w	#$A,d3
000154C6 49F8 F768                  		lea	($FFFFF768).w,a4
000154CA 367C 0010                  		movea.w	#$10,a3
000154CE 3C3C 0000                  		move.w	#0,d6
000154D2 7A0E                       		moveq	#$E,d5
000154D4 6100 FC3C                  		bsr.w	FindWall
000154D8 143C 00C0                  		move.b	#-$40,d2
000154DC 6000 FF32                  		bra.w	loc_14E0A
000154E0                            
000154E0                            ; End of function sub_14EB4
000154E0                            
000154E0                            ; ---------------------------------------------------------------------------
000154E0                            ; Subroutine to	detect when an object hits a wall to its right
000154E0                            ; ---------------------------------------------------------------------------
000154E0                            
000154E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154E0                            
000154E0                            
000154E0                            ObjHitWallRight:
000154E0 D668 0008                  		add.w	8(a0),d3
000154E4 3428 000C                  		move.w	$C(a0),d2
000154E8 49F8 F768                  		lea	($FFFFF768).w,a4
000154EC 18BC 0000                  		move.b	#0,(a4)
000154F0 367C 0010                  		movea.w	#$10,a3
000154F4 3C3C 0000                  		move.w	#0,d6
000154F8 7A0E                       		moveq	#$E,d5
000154FA 6100 FC16                  		bsr.w	FindWall
000154FE 1638 F768                  		move.b	($FFFFF768).w,d3
00015502 0803 0000                  		btst	#0,d3
00015506 6700                       		beq.s	locret_14F06
00015508 163C 00C0                  		move.b	#-$40,d3
0001550C                            
0001550C                            locret_14F06:
0001550C 4E75                       		rts	
0001550E                            
0001550E                            ; End of function ObjHitWallRight
0001550E                            
0001550E                            ; ---------------------------------------------------------------------------
0001550E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001550E                            ; touches them
0001550E                            ; ---------------------------------------------------------------------------
0001550E                            
0001550E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001550E                            
0001550E                            
0001550E                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001550E 3428 000C                  		move.w	$C(a0),d2
00015512 3628 0008                  		move.w	8(a0),d3
00015516 7000                       		moveq	#0,d0
00015518 1028 0016                  		move.b	$16(a0),d0
0001551C 4880                       		ext.w	d0
0001551E 9440                       		sub.w	d0,d2
00015520 0A42 000F                  		eori.w	#$F,d2
00015524 1028 0017                  		move.b	$17(a0),d0
00015528 4880                       		ext.w	d0
0001552A D640                       		add.w	d0,d3
0001552C 49F8 F768                  		lea	($FFFFF768).w,a4
00015530 367C FFF0                  		movea.w	#-$10,a3
00015534 3C3C 1000                  		move.w	#$1000,d6
00015538 7A0E                       		moveq	#$E,d5
0001553A 6100 FA98                  		bsr.w	FindFloor
0001553E 3F01                       		move.w	d1,-(sp)
00015540 3428 000C                  		move.w	$C(a0),d2
00015544 3628 0008                  		move.w	8(a0),d3
00015548 7000                       		moveq	#0,d0
0001554A 1028 0016                  		move.b	$16(a0),d0
0001554E 4880                       		ext.w	d0
00015550 9440                       		sub.w	d0,d2
00015552 0A42 000F                  		eori.w	#$F,d2
00015556 1028 0017                  		move.b	$17(a0),d0
0001555A 4880                       		ext.w	d0
0001555C 9640                       		sub.w	d0,d3
0001555E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015562 367C FFF0                  		movea.w	#-$10,a3
00015566 3C3C 1000                  		move.w	#$1000,d6
0001556A 7A0E                       		moveq	#$E,d5
0001556C 6100 FA66                  		bsr.w	FindFloor
00015570 301F                       		move.w	(sp)+,d0
00015572 143C 0080                  		move.b	#-$80,d2
00015576 6000 FE5E                  		bra.w	loc_14DD0
0001557A                            ; End of function Sonic_DontRunOnWalls
0001557A                            
0001557A                            ; ===========================================================================
0001557A 3428 000C                  		move.w	$C(a0),d2
0001557E 3628 0008                  		move.w	8(a0),d3
00015582                            
00015582                            loc_14F7C:
00015582 0442 000A                  		subi.w	#$A,d2
00015586 0A42 000F                  		eori.w	#$F,d2
0001558A 49F8 F768                  		lea	($FFFFF768).w,a4
0001558E 367C FFF0                  		movea.w	#-$10,a3
00015592 3C3C 1000                  		move.w	#$1000,d6
00015596 7A0E                       		moveq	#$E,d5
00015598 6100 FA3A                  		bsr.w	FindFloor
0001559C 143C 0080                  		move.b	#-$80,d2
000155A0 6000 FE6E                  		bra.w	loc_14E0A
000155A4                            
000155A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155A4                            
000155A4                            
000155A4                            ObjHitCeiling:
000155A4 3428 000C                  		move.w	$C(a0),d2
000155A8 3628 0008                  		move.w	8(a0),d3
000155AC 7000                       		moveq	#0,d0
000155AE 1028 0016                  		move.b	$16(a0),d0
000155B2 4880                       		ext.w	d0
000155B4 9440                       		sub.w	d0,d2
000155B6 0A42 000F                  		eori.w	#$F,d2
000155BA 49F8 F768                  		lea	($FFFFF768).w,a4
000155BE 367C FFF0                  		movea.w	#-$10,a3
000155C2 3C3C 1000                  		move.w	#$1000,d6
000155C6 7A0E                       		moveq	#$E,d5
000155C8 6100 FA0A                  		bsr.w	FindFloor
000155CC 1638 F768                  		move.b	($FFFFF768).w,d3
000155D0 0803 0000                  		btst	#0,d3
000155D4 6700                       		beq.s	locret_14FD4
000155D6 163C 0080                  		move.b	#-$80,d3
000155DA                            
000155DA                            locret_14FD4:
000155DA 4E75                       		rts	
000155DC                            ; End of function ObjHitCeiling
000155DC                            
000155DC                            ; ===========================================================================
000155DC                            
000155DC                            loc_14FD6:				; XREF: sub_14D48
000155DC 3428 000C                  		move.w	$C(a0),d2
000155E0 3628 0008                  		move.w	8(a0),d3
000155E4 7000                       		moveq	#0,d0
000155E6 1028 0017                  		move.b	$17(a0),d0
000155EA 4880                       		ext.w	d0
000155EC 9440                       		sub.w	d0,d2
000155EE 1028 0016                  		move.b	$16(a0),d0
000155F2 4880                       		ext.w	d0
000155F4 9640                       		sub.w	d0,d3
000155F6 0A43 000F                  		eori.w	#$F,d3
000155FA 49F8 F768                  		lea	($FFFFF768).w,a4
000155FE 367C FFF0                  		movea.w	#-$10,a3
00015602 3C3C 0800                  		move.w	#$800,d6
00015606 7A0E                       		moveq	#$E,d5
00015608 6100 FB08                  		bsr.w	FindWall
0001560C 3F01                       		move.w	d1,-(sp)
0001560E 3428 000C                  		move.w	$C(a0),d2
00015612 3628 0008                  		move.w	8(a0),d3
00015616 7000                       		moveq	#0,d0
00015618 1028 0017                  		move.b	$17(a0),d0
0001561C 4880                       		ext.w	d0
0001561E D440                       		add.w	d0,d2
00015620 1028 0016                  		move.b	$16(a0),d0
00015624 4880                       		ext.w	d0
00015626 9640                       		sub.w	d0,d3
00015628 0A43 000F                  		eori.w	#$F,d3
0001562C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015630 367C FFF0                  		movea.w	#-$10,a3
00015634 3C3C 0800                  		move.w	#$800,d6
00015638 7A0E                       		moveq	#$E,d5
0001563A 6100 FAD6                  		bsr.w	FindWall
0001563E 301F                       		move.w	(sp)+,d0
00015640 143C 0040                  		move.b	#$40,d2
00015644 6000 FD90                  		bra.w	loc_14DD0
00015648                            
00015648                            ; ---------------------------------------------------------------------------
00015648                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015648                            ; ---------------------------------------------------------------------------
00015648                            
00015648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015648                            
00015648                            
00015648                            Sonic_HitWall:				; XREF: Sonic_Floor
00015648 3428 000C                  		move.w	$C(a0),d2
0001564C 3628 0008                  		move.w	8(a0),d3
00015650                            
00015650                            loc_1504A:
00015650 0443 000A                  		subi.w	#$A,d3
00015654 0A43 000F                  		eori.w	#$F,d3
00015658 49F8 F768                  		lea	($FFFFF768).w,a4
0001565C 367C FFF0                  		movea.w	#-$10,a3
00015660 3C3C 0800                  		move.w	#$800,d6
00015664 7A0E                       		moveq	#$E,d5
00015666 6100 FAAA                  		bsr.w	FindWall
0001566A 143C 0040                  		move.b	#$40,d2
0001566E 6000 FDA0                  		bra.w	loc_14E0A
00015672                            ; End of function Sonic_HitWall
00015672                            
00015672                            ; ---------------------------------------------------------------------------
00015672                            ; Subroutine to	detect when an object hits a wall to its left
00015672                            ; ---------------------------------------------------------------------------
00015672                            
00015672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015672                            
00015672                            
00015672                            ObjHitWallLeft:
00015672 D668 0008                  		add.w	8(a0),d3
00015676 3428 000C                  		move.w	$C(a0),d2
0001567A 49F8 F768                  		lea	($FFFFF768).w,a4
0001567E 18BC 0000                  		move.b	#0,(a4)
00015682 367C FFF0                  		movea.w	#-$10,a3
00015686 3C3C 0800                  		move.w	#$800,d6
0001568A 7A0E                       		moveq	#$E,d5
0001568C 6100 FA84                  		bsr.w	FindWall
00015690 1638 F768                  		move.b	($FFFFF768).w,d3
00015694 0803 0000                  		btst	#0,d3
00015698 6700                       		beq.s	locret_15098
0001569A 163C 0040                  		move.b	#$40,d3
0001569E                            
0001569E                            locret_15098:
0001569E 4E75                       		rts	
000156A0                            ; End of function ObjHitWallLeft
000156A0                            
000156A0                            ; ===========================================================================
000156A0                            ; ---------------------------------------------------------------------------
000156A0                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000156A0                            ; ---------------------------------------------------------------------------
000156A0                            
000156A0                            Obj66:					; XREF: Obj_Index
000156A0 7000                       		moveq	#0,d0
000156A2 1028 0024                  		move.b	$24(a0),d0
000156A6 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000156AA 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000156AE                            ; ===========================================================================
000156AE 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000156B0 0000                       		dc.w Obj66_Action-Obj66_Index
000156B2 0000                       		dc.w Obj66_Display-Obj66_Index
000156B4 0000                       		dc.w Obj66_Release-Obj66_Index
000156B6                            ; ===========================================================================
000156B6                            
000156B6                            Obj66_Main:				; XREF: Obj66_Index
000156B6 5428 0024                  		addq.b	#2,$24(a0)
000156BA 323C 0001                  		move.w	#1,d1
000156BE 2248                       		movea.l	a0,a1
000156C0 6000                       		bra.s	Obj66_MakeItem
000156C2                            ; ===========================================================================
000156C2                            
000156C2                            Obj66_Loop:
000156C2 6100 893C                  		bsr.w	SingleObjLoad
000156C6 6600                       		bne.s	loc_150FE
000156C8 12BC 0066                  		move.b	#$66,0(a1)
000156CC 5829 0024                  		addq.b	#4,$24(a1)
000156D0 3368 0008 0008             		move.w	8(a0),8(a1)
000156D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156DC 137C 0003 0018             		move.b	#3,$18(a1)
000156E2 137C 0010 001A             		move.b	#$10,$1A(a1)
000156E8                            
000156E8                            Obj66_MakeItem:				; XREF: Obj66_Main
000156E8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156F0 337C 4348 0002             		move.w	#$4348,2(a1)
000156F6 0029 0004 0001             		ori.b	#4,1(a1)
000156FC 137C 0038 0019             		move.b	#$38,$19(a1)
00015702                            
00015702                            loc_150FE:
00015702 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015706                            
00015706 117C 0030 0019             		move.b	#$30,$19(a0)
0001570C 117C 0004 0018             		move.b	#4,$18(a0)
00015712 317C 003C 0030             		move.w	#$3C,$30(a0)
00015718 117C 0001 0034             		move.b	#1,$34(a0)
0001571E 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015724                            
00015724                            Obj66_Action:				; XREF: Obj66_Index
00015724 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015728 4A28 0001                  		tst.b	1(a0)
0001572C 6A00 0000                  		bpl.w	Obj66_Display
00015730 323C 0030                  		move.w	#$30,d1
00015734 3401                       		move.w	d1,d2
00015736 3602                       		move.w	d2,d3
00015738 5243                       		addq.w	#1,d3
0001573A 3828 0008                  		move.w	8(a0),d4
0001573E 6100 A80A                  		bsr.w	SolidObject
00015742 0828 0005 0022             		btst	#5,$22(a0)
00015748 6700 0000                  		beq.w	Obj66_Display
0001574C 43F8 D000                  		lea	($FFFFD000).w,a1
00015750 720E                       		moveq	#$E,d1
00015752 3029 0008                  		move.w	8(a1),d0
00015756 B068 0008                  		cmp.w	8(a0),d0
0001575A 6500                       		bcs.s	Obj66_GrabSonic
0001575C 7207                       		moveq	#7,d1
0001575E                            
0001575E                            Obj66_GrabSonic:
0001575E B228 001A                  		cmp.b	$1A(a0),d1
00015762 6600                       		bne.s	Obj66_Display
00015764 1141 0032                  		move.b	d1,$32(a0)
00015768 5828 0024                  		addq.b	#4,$24(a0)
0001576C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015772 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015778 337C 0800 0014             		move.w	#$800,$14(a1)
0001577E 337C 0000 0010             		move.w	#0,$10(a1)
00015784 337C 0000 0012             		move.w	#0,$12(a1)
0001578A 08A8 0005 0022             		bclr	#5,$22(a0)
00015790 08A9 0005 0022             		bclr	#5,$22(a1)
00015796 08E9 0001 0022             		bset	#1,$22(a1)
0001579C 3429 0008                  		move.w	8(a1),d2
000157A0 3629 000C                  		move.w	$C(a1),d3
000157A4 6100 0000                  		bsr.w	Obj66_ChgPos
000157A8 D569 0008                  		add.w	d2,8(a1)
000157AC D769 000C                  		add.w	d3,$C(a1)
000157B0 E0E9 0008                  		asr	8(a1)
000157B4 E0E9 000C                  		asr	$C(a1)
000157B8                            
000157B8                            Obj66_Display:				; XREF: Obj66_Index
000157B8 6000 A468                  		bra.w	MarkObjGone
000157BC                            ; ===========================================================================
000157BC                            
000157BC                            Obj66_Release:				; XREF: Obj66_Index
000157BC 1028 001A                  		move.b	$1A(a0),d0
000157C0 0C00 0004                  		cmpi.b	#4,d0
000157C4 6700                       		beq.s	loc_151C8
000157C6 0C00 0007                  		cmpi.b	#7,d0
000157CA 6600                       		bne.s	loc_151F8
000157CC                            
000157CC                            loc_151C8:
000157CC B028 0032                  		cmp.b	$32(a0),d0
000157D0 6700                       		beq.s	loc_151F8
000157D2 43F8 D000                  		lea	($FFFFD000).w,a1
000157D6 337C 0000 0010             		move.w	#0,$10(a1)
000157DC 337C 0800 0012             		move.w	#$800,$12(a1)
000157E2 0C00 0004                  		cmpi.b	#4,d0
000157E6 6700                       		beq.s	loc_151F0
000157E8 337C 0800 0010             		move.w	#$800,$10(a1)
000157EE 337C 0800 0012             		move.w	#$800,$12(a1)
000157F4                            
000157F4                            loc_151F0:
000157F4 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157F8 5928 0024                  		subq.b	#4,$24(a0)
000157FC                            
000157FC                            loc_151F8:
000157FC 6100                       		bsr.s	Obj66_ChkSwitch
000157FE 6100                       		bsr.s	Obj66_ChgPos
00015800 6000 A420                  		bra.w	MarkObjGone
00015804                            
00015804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015804                            
00015804                            
00015804                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015804 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015808 7000                       		moveq	#0,d0
0001580A 1028 0038                  		move.b	$38(a0),d0
0001580E 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015814 6700                       		beq.s	loc_15224	; if not, branch
00015816 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
0001581A 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001581C 4428 0034                  		neg.b	$34(a0)
00015820 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015826 6000                       		bra.s	Obj66_Animate
00015828                            ; ===========================================================================
00015828                            
00015828                            loc_15224:
00015828 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001582C                            
0001582C                            Obj66_Animate:
0001582C 5328 001E                  		subq.b	#1,$1E(a0)
00015830 6A00                       		bpl.s	locret_15246
00015832 117C 0007 001E             		move.b	#7,$1E(a0)
00015838 1228 0034                  		move.b	$34(a0),d1
0001583C 1028 001A                  		move.b	$1A(a0),d0
00015840 D001                       		add.b	d1,d0
00015842 0200 000F                  		andi.b	#$F,d0
00015846 1140 001A                  		move.b	d0,$1A(a0)
0001584A                            
0001584A                            locret_15246:
0001584A 4E75                       		rts	
0001584C                            ; End of function Obj66_ChkSwitch
0001584C                            
0001584C                            
0001584C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001584C                            
0001584C                            
0001584C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001584C 43F8 D000                  		lea	($FFFFD000).w,a1
00015850 7000                       		moveq	#0,d0
00015852 1028 001A                  		move.b	$1A(a0),d0
00015856 D040                       		add.w	d0,d0
00015858 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001585C 101A                       		move.b	(a2)+,d0
0001585E 4880                       		ext.w	d0
00015860 D068 0008                  		add.w	8(a0),d0
00015864 3340 0008                  		move.w	d0,8(a1)
00015868 101A                       		move.b	(a2)+,d0
0001586A 4880                       		ext.w	d0
0001586C D068 000C                  		add.w	$C(a0),d0
00015870 3340 000C                  		move.w	d0,$C(a1)
00015874 4E75                       		rts	
00015876                            ; End of function Obj66_ChgPos
00015876                            
00015876                            ; ===========================================================================
00015876 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001587A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
0001587E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015882 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015886 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001588A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
0001588E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015892 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015896                            ; ---------------------------------------------------------------------------
00015896                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015896                            ; ---------------------------------------------------------------------------
00015896                            Map_obj66:
00015896                            	include "_maps\obj66.asm"
00015896                            ; ---------------------------------------------------------------------------
00015896                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015896                            ; ---------------------------------------------------------------------------
00015896 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001589A 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
0001589E 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000158A2 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000158A6 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000158AA 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000158AE 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000158B2 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000158B6 0000                       		dc.w byte_154A4-Map_obj66
000158B8 06                         byte_152B4:	dc.b 6
000158B9 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000158BE 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000158C3 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000158C8 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000158CD 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000158D2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000158D7 06                         byte_152D3:	dc.b 6
000158D8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158DD 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158E2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158E7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158EC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158F1 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158F6 06                         byte_152F2:	dc.b 6
000158F7 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158FC 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015901 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015906 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
0001590B 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015910 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015915 06                         byte_15311:	dc.b 6
00015916 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
0001591B 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015920 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015925 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
0001592A 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001592F 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015934 06                         byte_15330:	dc.b 6
00015935 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
0001593A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001593F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015944 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015949 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001594E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015953 06                         byte_1534F:	dc.b 6
00015954 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015959 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001595E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015963 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015968 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001596D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015972 06                         byte_1536E:	dc.b 6
00015973 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015978 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001597D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015982 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015987 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001598C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015991 06                         byte_1538D:	dc.b 6
00015992 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015997 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001599C F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000159A1 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000159A6 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000159AB 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000159B0 06                         byte_153AC:	dc.b 6
000159B1 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000159B6 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000159BB E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000159C0 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000159C5 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000159CA 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000159CF 06                         byte_153CB:	dc.b 6
000159D0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000159D5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159DA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159DF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159E4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159E9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159EE 06                         byte_153EA:	dc.b 6
000159EF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159F4 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159F9 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159FE D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015A03 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015A08 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015A0D 06                         byte_15409:	dc.b 6
00015A0E D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015A13 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015A18 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015A1D CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015A22 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015A27 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015A2C 06                         byte_15428:	dc.b 6
00015A2D D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A32 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A37 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A3C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A41 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A46 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A4B 06                         byte_15447:	dc.b 6
00015A4C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A51 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A56 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A5B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A60 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A65 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A6A 06                         byte_15466:	dc.b 6
00015A6B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A70 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A75 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A7A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A7F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A84 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A89 06                         byte_15485:	dc.b 6
00015A8A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A8F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A94 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A99 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A9E F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015AA3 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015AA8 0C                         byte_154A4:	dc.b $C
00015AA9 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015AAE D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015AB3 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015AB8 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015ABD D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015AC2 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015AC7 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015ACC 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015AD1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015AD6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015ADB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AE0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015AE6 00                         		even
00015AE6 00                         		even
00015AE6                            
00015AE6                            ; ===========================================================================
00015AE6                            ; ---------------------------------------------------------------------------
00015AE6                            ; Object 67 - disc that	you run	around (SBZ)
00015AE6                            ; ---------------------------------------------------------------------------
00015AE6                            
00015AE6                            Obj67:					; XREF: Obj_Index
00015AE6 7000                       		moveq	#0,d0
00015AE8 1028 0024                  		move.b	$24(a0),d0
00015AEC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015AF0 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015AF4                            ; ===========================================================================
00015AF4 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015AF6 0000                       		dc.w Obj67_Action-Obj67_Index
00015AF8                            ; ===========================================================================
00015AF8                            
00015AF8                            Obj67_Main:				; XREF: Obj67_Index
00015AF8 5428 0024                  		addq.b	#2,$24(a0)
00015AFC 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015B04 317C C344 0002             		move.w	#$C344,2(a0)
00015B0A 117C 0004 0001             		move.b	#4,1(a0)
00015B10 117C 0004 0018             		move.b	#4,$18(a0)
00015B16 117C 0008 0019             		move.b	#8,$19(a0)
00015B1C 3168 0008 0032             		move.w	8(a0),$32(a0)
00015B22 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015B28 117C 0018 0034             		move.b	#$18,$34(a0)
00015B2E 117C 0048 0038             		move.b	#$48,$38(a0)
00015B34 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B38 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B3C 6700                       		beq.s	loc_15546
00015B3E 117C 0010 0034             		move.b	#$10,$34(a0)
00015B44 117C 0038 0038             		move.b	#$38,$38(a0)
00015B4A                            
00015B4A                            loc_15546:
00015B4A 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B4E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B52 4881                       		ext.w	d1
00015B54 E741                       		asl.w	#3,d1
00015B56 3141 0036                  		move.w	d1,$36(a0)
00015B5A 1028 0022                  		move.b	$22(a0),d0
00015B5E E418                       		ror.b	#2,d0
00015B60 0200 00C0                  		andi.b	#-$40,d0
00015B64 1140 0026                  		move.b	d0,$26(a0)
00015B68                            
00015B68                            Obj67_Action:				; XREF: Obj67_Index
00015B68 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B6C 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B70 6000 0000                  		bra.w	Obj67_ChkDel
00015B74                            ; ===========================================================================
00015B74                            
00015B74                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B74 7400                       		moveq	#0,d2
00015B76 1428 0038                  		move.b	$38(a0),d2
00015B7A 3602                       		move.w	d2,d3
00015B7C D643                       		add.w	d3,d3
00015B7E 43F8 D000                  		lea	($FFFFD000).w,a1
00015B82 3029 0008                  		move.w	8(a1),d0
00015B86 9068 0032                  		sub.w	$32(a0),d0
00015B8A D042                       		add.w	d2,d0
00015B8C B043                       		cmp.w	d3,d0
00015B8E 6400                       		bcc.s	loc_155A8
00015B90 3229 000C                  		move.w	$C(a1),d1
00015B94 9268 0030                  		sub.w	$30(a0),d1
00015B98 D242                       		add.w	d2,d1
00015B9A B243                       		cmp.w	d3,d1
00015B9C 6400                       		bcc.s	loc_155A8
00015B9E 0829 0001 0022             		btst	#1,$22(a1)
00015BA4 6700                       		beq.s	loc_155B8
00015BA6 4228 003A                  		clr.b	$3A(a0)
00015BAA 4E75                       		rts	
00015BAC                            ; ===========================================================================
00015BAC                            
00015BAC                            loc_155A8:
00015BAC 4A28 003A                  		tst.b	$3A(a0)
00015BB0 6700                       		beq.s	locret_155B6
00015BB2 4229 0038                  		clr.b	$38(a1)
00015BB6 4228 003A                  		clr.b	$3A(a0)
00015BBA                            
00015BBA                            locret_155B6:
00015BBA 4E75                       		rts	
00015BBC                            ; ===========================================================================
00015BBC                            
00015BBC                            loc_155B8:
00015BBC 4A28 003A                  		tst.b	$3A(a0)
00015BC0 6600                       		bne.s	loc_155E2
00015BC2 117C 0001 003A             		move.b	#1,$3A(a0)
00015BC8 0829 0002 0022             		btst	#2,$22(a1)
00015BCE 6600                       		bne.s	loc_155D0
00015BD0 4229 001C                  		clr.b	$1C(a1)
00015BD4                            
00015BD4                            loc_155D0:
00015BD4 08A9 0005 0022             		bclr	#5,$22(a1)
00015BDA 137C 0001 001D             		move.b	#1,$1D(a1)
00015BE0 137C 0001 0038             		move.b	#1,$38(a1)
00015BE6                            
00015BE6                            loc_155E2:
00015BE6 3029 0014                  		move.w	$14(a1),d0
00015BEA 4A68 0036                  		tst.w	$36(a0)
00015BEE 6A00                       		bpl.s	loc_15608
00015BF0 0C40 FC00                  		cmpi.w	#-$400,d0
00015BF4 6F00                       		ble.s	loc_155FA
00015BF6 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BFC 4E75                       		rts	
00015BFE                            ; ===========================================================================
00015BFE                            
00015BFE                            loc_155FA:
00015BFE 0C40 F100                  		cmpi.w	#-$F00,d0
00015C02 6C00                       		bge.s	locret_15606
00015C04 337C F100 0014             		move.w	#-$F00,$14(a1)
00015C0A                            
00015C0A                            locret_15606:
00015C0A 4E75                       		rts	
00015C0C                            ; ===========================================================================
00015C0C                            
00015C0C                            loc_15608:
00015C0C 0C40 0400                  		cmpi.w	#$400,d0
00015C10 6C00                       		bge.s	loc_15616
00015C12 337C 0400 0014             		move.w	#$400,$14(a1)
00015C18 4E75                       		rts	
00015C1A                            ; ===========================================================================
00015C1A                            
00015C1A                            loc_15616:
00015C1A 0C40 0F00                  		cmpi.w	#$F00,d0
00015C1E 6F00                       		ble.s	locret_15622
00015C20 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015C26                            
00015C26                            locret_15622:
00015C26 4E75                       		rts	
00015C28                            ; ===========================================================================
00015C28                            
00015C28                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015C28 3028 0036                  		move.w	$36(a0),d0
00015C2C D168 0026                  		add.w	d0,$26(a0)
00015C30 1028 0026                  		move.b	$26(a0),d0
00015C34 4EB9 0000 2C22             		jsr	(CalcSine).l
00015C3A 3428 0030                  		move.w	$30(a0),d2
00015C3E 3628 0032                  		move.w	$32(a0),d3
00015C42 7800                       		moveq	#0,d4
00015C44 1828 0034                  		move.b	$34(a0),d4
00015C48 E14C                       		lsl.w	#8,d4
00015C4A 2A04                       		move.l	d4,d5
00015C4C C9C0                       		muls.w	d0,d4
00015C4E 4844                       		swap	d4
00015C50 CBC1                       		muls.w	d1,d5
00015C52 4845                       		swap	d5
00015C54 D842                       		add.w	d2,d4
00015C56 DA43                       		add.w	d3,d5
00015C58 3144 000C                  		move.w	d4,$C(a0)
00015C5C 3145 0008                  		move.w	d5,8(a0)
00015C60 4E75                       		rts	
00015C62                            ; ===========================================================================
00015C62                            
00015C62                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C62 3028 0032                  		move.w	$32(a0),d0
00015C66 0240 FF80                  		andi.w	#-$80,d0
00015C6A 3238 F700                  		move.w	($FFFFF700).w,d1
00015C6E 0441 0080                  		subi.w	#$80,d1
00015C72 0241 FF80                  		andi.w	#-$80,d1
00015C76 9041                       		sub.w	d1,d0
00015C78 0C40 0280                  		cmpi.w	#$280,d0
00015C7C 6200                       		bhi.s	Obj67_Delete
00015C7E 4EF9 0000 DB7A             		jmp	DisplaySprite
00015C84                            ; ===========================================================================
00015C84                            
00015C84                            Obj67_Delete:
00015C84 4EF9 0000 DBB6             		jmp	DeleteObject
00015C8A                            ; ===========================================================================
00015C8A                            ; ---------------------------------------------------------------------------
00015C8A                            ; Sprite mappings - disc that you run around (SBZ)
00015C8A                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C8A                            ; part of the level tiles.)
00015C8A                            ; ---------------------------------------------------------------------------
00015C8A                            Map_obj67:
00015C8A                            	include "_maps\obj67.asm"
00015C8A                            ; ---------------------------------------------------------------------------
00015C8A                            ; Sprite mappings - disc that you run around (SBZ)
00015C8A                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C8A                            ; part of the level tiles.)
00015C8A                            ; ---------------------------------------------------------------------------
00015C8A 0000                       		dc.w byte_15688-Map_obj67
00015C8C 01                         byte_15688:	dc.b 1
00015C8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C92                            		even
00015C92                            		even
00015C92                            
00015C92                            ; ===========================================================================
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            ; Object 68 - conveyor belts (SBZ)
00015C92                            ; ---------------------------------------------------------------------------
00015C92                            
00015C92                            Obj68:					; XREF: Obj_Index
00015C92 7000                       		moveq	#0,d0
00015C94 1028 0024                  		move.b	$24(a0),d0
00015C98 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C9C 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015CA0                            ; ===========================================================================
00015CA0 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015CA2 0000                       		dc.w Obj68_Action-Obj68_Index
00015CA4                            ; ===========================================================================
00015CA4                            
00015CA4                            Obj68_Main:				; XREF: Obj68_Index
00015CA4 5428 0024                  		addq.b	#2,$24(a0)
00015CA8 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015CAE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CB2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CB6 6700                       		beq.s	loc_156BA	; if zero, branch
00015CB8 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015CBE                            
00015CBE                            loc_156BA:
00015CBE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CC2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CC6 4881                       		ext.w	d1
00015CC8 E841                       		asr.w	#4,d1
00015CCA 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015CCE                            
00015CCE                            Obj68_Action:				; XREF: Obj68_Index
00015CCE 6100                       		bsr.s	Obj68_MoveSonic
00015CD0 3028 0008                  		move.w	8(a0),d0
00015CD4 0240 FF80                  		andi.w	#$FF80,d0
00015CD8 3238 F700                  		move.w	($FFFFF700).w,d1
00015CDC 0441 0080                  		subi.w	#$80,d1
00015CE0 0241 FF80                  		andi.w	#$FF80,d1
00015CE4 9041                       		sub.w	d1,d0
00015CE6 0C40 0280                  		cmpi.w	#$280,d0
00015CEA 6200                       		bhi.s	Obj68_Delete
00015CEC 4E75                       		rts	
00015CEE                            ; ===========================================================================
00015CEE                            
00015CEE                            Obj68_Delete:
00015CEE 4EF9 0000 DBB6             		jmp	DeleteObject
00015CF4                            ; ===========================================================================
00015CF4                            
00015CF4                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CF4 7400                       		moveq	#0,d2
00015CF6 1428 0038                  		move.b	$38(a0),d2
00015CFA 3602                       		move.w	d2,d3
00015CFC D643                       		add.w	d3,d3
00015CFE 43F8 D000                  		lea	($FFFFD000).w,a1
00015D02 3029 0008                  		move.w	8(a1),d0
00015D06 9068 0008                  		sub.w	8(a0),d0
00015D0A D042                       		add.w	d2,d0
00015D0C B043                       		cmp.w	d3,d0
00015D0E 6400                       		bcc.s	locret_1572E
00015D10 3229 000C                  		move.w	$C(a1),d1
00015D14 9268 000C                  		sub.w	$C(a0),d1
00015D18 0641 0030                  		addi.w	#$30,d1
00015D1C 0C41 0030                  		cmpi.w	#$30,d1
00015D20 6400                       		bcc.s	locret_1572E
00015D22 0829 0001 0022             		btst	#1,$22(a1)
00015D28 6600                       		bne.s	locret_1572E
00015D2A 3028 0036                  		move.w	$36(a0),d0
00015D2E D169 0008                  		add.w	d0,8(a1)
00015D32                            
00015D32                            locret_1572E:
00015D32 4E75                       		rts	
00015D34                            
00015D34                            ; ===========================================================================
00015D34                            ; ---------------------------------------------------------------------------
00015D34                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D34                            ; ---------------------------------------------------------------------------
00015D34                            
00015D34                            Obj69:					; XREF: Obj_Index
00015D34 7000                       		moveq	#0,d0
00015D36 1028 0024                  		move.b	$24(a0),d0
00015D3A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D3E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D42                            ; ===========================================================================
00015D42 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D44 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D46 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D48                            ; ===========================================================================
00015D48                            
00015D48                            Obj69_Main:				; XREF: Obj69_Index
00015D48 5428 0024                  		addq.b	#2,$24(a0)
00015D4C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D54 317C 4492 0002             		move.w	#$4492,2(a0)
00015D5A 0028 0004 0001             		ori.b	#4,1(a0)
00015D60 117C 0080 0019             		move.b	#$80,$19(a0)
00015D66 7000                       		moveq	#0,d0
00015D68 1028 0028                  		move.b	$28(a0),d0
00015D6C 0240 000F                  		andi.w	#$F,d0
00015D70 C0FC 003C                  		mulu.w	#$3C,d0
00015D74 3140 0032                  		move.w	d0,$32(a0)
00015D78 4A28 0028                  		tst.b	$28(a0)
00015D7C 6A00                       		bpl.s	Obj69_Trapdoor
00015D7E 5428 0024                  		addq.b	#2,$24(a0)
00015D82 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D8A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D90 117C 0010 0019             		move.b	#$10,$19(a0)
00015D96 117C 0002 001C             		move.b	#2,$1C(a0)
00015D9C 7000                       		moveq	#0,d0
00015D9E 1028 0028                  		move.b	$28(a0),d0	; get object type
00015DA2 3200                       		move.w	d0,d1
00015DA4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015DA8 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015DAC 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015DB0 3140 0032                  		move.w	d0,$32(a0)
00015DB4 0241 0070                  		andi.w	#$70,d1
00015DB8 0641 0010                  		addi.w	#$10,d1
00015DBC E549                       		lsl.w	#2,d1
00015DBE 5341                       		subq.w	#1,d1
00015DC0 3141 0036                  		move.w	d1,$36(a0)
00015DC4 6000                       		bra.s	Obj69_Spinner
00015DC6                            ; ===========================================================================
00015DC6                            
00015DC6                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015DC6 5368 0030                  		subq.w	#1,$30(a0)
00015DCA 6A00                       		bpl.s	Obj69_Animate
00015DCC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015DD2 0868 0000 001C             		bchg	#0,$1C(a0)
00015DD8 4A28 0001                  		tst.b	1(a0)
00015DDC 6A00                       		bpl.s	Obj69_Animate
00015DDE 303C 00BB                  		move.w	#$BB,d0
00015DE2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DE8                            
00015DE8                            Obj69_Animate:
00015DE8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DEE 4EB9 0000 AC4A             		jsr	AnimateSprite
00015DF4 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DF8 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DFA 323C 004B                  		move.w	#$4B,d1
00015DFE 343C 000C                  		move.w	#$C,d2
00015E02 3602                       		move.w	d2,d3
00015E04 5243                       		addq.w	#1,d3
00015E06 3828 0008                  		move.w	8(a0),d4
00015E0A 6100 A13E                  		bsr.w	SolidObject
00015E0E 6000 9E12                  		bra.w	MarkObjGone
00015E12                            ; ===========================================================================
00015E12                            
00015E12                            Obj69_NotSolid:
00015E12 0828 0003 0022             		btst	#3,$22(a0)
00015E18 6700                       		beq.s	Obj69_Display
00015E1A 43F8 D000                  		lea	($FFFFD000).w,a1
00015E1E 08A9 0003 0022             		bclr	#3,$22(a1)
00015E24 08A8 0003 0022             		bclr	#3,$22(a0)
00015E2A 4228 0025                  		clr.b	$25(a0)
00015E2E                            
00015E2E                            Obj69_Display:
00015E2E 6000 9DF2                  		bra.w	MarkObjGone
00015E32                            ; ===========================================================================
00015E32                            
00015E32                            Obj69_Spinner:				; XREF: Obj69_Index
00015E32 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E36 C068 0036                  		and.w	$36(a0),d0
00015E3A 6600                       		bne.s	Obj69_Delay
00015E3C 117C 0001 0034             		move.b	#1,$34(a0)
00015E42                            
00015E42                            Obj69_Delay:
00015E42 4A28 0034                  		tst.b	$34(a0)
00015E46 6700                       		beq.s	Obj69_Animate2
00015E48 5368 0030                  		subq.w	#1,$30(a0)
00015E4C 6A00                       		bpl.s	Obj69_Animate2
00015E4E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E54 4228 0034                  		clr.b	$34(a0)
00015E58 0868 0000 001C             		bchg	#0,$1C(a0)
00015E5E                            
00015E5E                            Obj69_Animate2:
00015E5E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E64 4EB9 0000 AC4A             		jsr	AnimateSprite
00015E6A 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E6E 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E70 323C 001B                  		move.w	#$1B,d1
00015E74 343C 0007                  		move.w	#7,d2
00015E78 3602                       		move.w	d2,d3
00015E7A 5243                       		addq.w	#1,d3
00015E7C 3828 0008                  		move.w	8(a0),d4
00015E80 6100 A0C8                  		bsr.w	SolidObject
00015E84 6000 9D9C                  		bra.w	MarkObjGone
00015E88                            ; ===========================================================================
00015E88                            
00015E88                            Obj69_NotSolid2:
00015E88 0828 0003 0022             		btst	#3,$22(a0)
00015E8E 6700                       		beq.s	Obj69_Display2
00015E90 43F8 D000                  		lea	($FFFFD000).w,a1
00015E94 08A9 0003 0022             		bclr	#3,$22(a1)
00015E9A 08A8 0003 0022             		bclr	#3,$22(a0)
00015EA0 4228 0025                  		clr.b	$25(a0)
00015EA4                            
00015EA4                            Obj69_Display2:
00015EA4 6000 9D7C                  		bra.w	MarkObjGone
00015EA8                            ; ===========================================================================
00015EA8                            Ani_obj69:
00015EA8                            	include "_anim\obj69.asm"
00015EA8                            ; ---------------------------------------------------------------------------
00015EA8                            ; Animation script - trapdoor (SBZ)
00015EA8                            ; ---------------------------------------------------------------------------
00015EA8 0000                       		dc.w byte_158AC-Ani_obj69
00015EAA 0000                       		dc.w byte_158B2-Ani_obj69
00015EAC 0000                       		dc.w byte_158B8-Ani_obj69
00015EAE 0000                       		dc.w byte_158CC-Ani_obj69
00015EB0 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015EB6 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015EBC 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EC9 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015ED0 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EDD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EE4                            		even
00015EE4                            		even
00015EE4                            
00015EE4                            ; ---------------------------------------------------------------------------
00015EE4                            ; Sprite mappings - trapdoor (SBZ)
00015EE4                            ; ---------------------------------------------------------------------------
00015EE4                            Map_obj69:
00015EE4                            	include "_maps\obj69.asm"
00015EE4                            ; ---------------------------------------------------------------------------
00015EE4                            ; Sprite mappings - trapdoor (SBZ)
00015EE4                            ; ---------------------------------------------------------------------------
00015EE4 0000                       		dc.w byte_158E6-Map_obj69
00015EE6 0000                       		dc.w byte_158FB-Map_obj69
00015EE8 0000                       		dc.w byte_15924-Map_obj69
00015EEA 04                         byte_158E6:	dc.b 4
00015EEB F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015EF0 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EF5 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EFA F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015EFF 08                         byte_158FB:	dc.b 8
00015F00 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015F05 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015F0A 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015F0F 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015F14 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015F19 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015F1E 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015F23 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015F28 04                         byte_15924:	dc.b 4
00015F29 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015F2E 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F33 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F38 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F3E 00                         		even
00015F3E 00                         		even
00015F3E                            
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Sprite mappings - spinning platforms (SBZ)
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            Map_obj69a:
00015F3E                            	include "_maps\obj69a.asm"
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E                            ; Sprite mappings - spinning platforms (SBZ)
00015F3E                            ; ---------------------------------------------------------------------------
00015F3E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F42 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F46 0000                       		dc.w byte_15970-Map_obj69a
00015F48 02                         byte_15944:	dc.b 2
00015F49 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F4E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F53 02                         byte_1594F:	dc.b 2
00015F54 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F59 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F5E 02                         byte_1595A:	dc.b 2
00015F5F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F64 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F69 02                         byte_15965:	dc.b 2
00015F6A F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F6F 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F74 02                         byte_15970:	dc.b 2
00015F75 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F7A 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F80 00                         		even
00015F80 00                         		even
00015F80                            
00015F80                            ; ===========================================================================
00015F80                            ; ---------------------------------------------------------------------------
00015F80                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F80                            ; ---------------------------------------------------------------------------
00015F80                            
00015F80                            Obj6A:					; XREF: Obj_Index
00015F80 7000                       		moveq	#0,d0
00015F82 1028 0024                  		move.b	$24(a0),d0
00015F86 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F8A 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F8E                            ; ===========================================================================
00015F8E 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F90 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F92                            ; ===========================================================================
00015F92                            
00015F92                            Obj6A_Main:				; XREF: Obj6A_Index
00015F92 5428 0024                  		addq.b	#2,$24(a0)
00015F96 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F9E 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015FA4 117C 0004 0001             		move.b	#4,1(a0)
00015FAA 117C 0004 0018             		move.b	#4,$18(a0)
00015FB0 117C 0020 0019             		move.b	#$20,$19(a0)
00015FB6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FBC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015FC2 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015FC8 6400                       		bcc.s	Obj6A_Action
00015FCA 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FD0                            
00015FD0                            Obj6A_Action:				; XREF: Obj6A_Index
00015FD0 7000                       		moveq	#0,d0
00015FD2 1028 0028                  		move.b	$28(a0),d0
00015FD6 0240 0007                  		andi.w	#7,d0
00015FDA D040                       		add.w	d0,d0
00015FDC 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FE0 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FE4 3028 003A                  		move.w	$3A(a0),d0
00015FE8 0240 FF80                  		andi.w	#$FF80,d0
00015FEC 3238 F700                  		move.w	($FFFFF700).w,d1
00015FF0 0441 0080                  		subi.w	#$80,d1
00015FF4 0241 FF80                  		andi.w	#$FF80,d1
00015FF8 9041                       		sub.w	d1,d0
00015FFA 0C40 0280                  		cmpi.w	#$280,d0
00015FFE 6200                       		bhi.s	Obj6A_Delete
00016000 4EF9 0000 DB7A             		jmp	DisplaySprite
00016006                            ; ===========================================================================
00016006                            
00016006                            Obj6A_Delete:
00016006 4EF9 0000 DBB6             		jmp	DeleteObject
0001600C                            ; ===========================================================================
0001600C 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016010 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016014 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016016                            ; ===========================================================================
00016016                            
00016016                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016016 4E75                       		rts	
00016018                            ; ===========================================================================
00016018                            
00016018                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016018 323C 0060                  		move.w	#$60,d1
0001601C 7000                       		moveq	#0,d0
0001601E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016022 0828 0000 0022             		btst	#0,$22(a0)
00016028 6700                       		beq.s	Obj6A_Animate01
0001602A 4440                       		neg.w	d0
0001602C D041                       		add.w	d1,d0
0001602E                            
0001602E                            Obj6A_Animate01:
0001602E 3228 003A                  		move.w	$3A(a0),d1
00016032 9240                       		sub.w	d0,d1
00016034 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016038 5328 001E                  		subq.b	#1,$1E(a0)
0001603C 6A00                       		bpl.s	loc_15A46
0001603E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016044 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001604A                            
0001604A                            loc_15A46:
0001604A 4A28 0001                  		tst.b	1(a0)
0001604E 6A00                       		bpl.s	locret_15A60
00016050 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016054 0240 000F                  		andi.w	#$F,d0
00016058 6600                       		bne.s	locret_15A60
0001605A 303C 00B0                  		move.w	#$B0,d0
0001605E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016064                            
00016064                            locret_15A60:
00016064 4E75                       		rts	
00016066                            ; ===========================================================================
00016066                            
00016066                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016066 323C 0030                  		move.w	#$30,d1
0001606A 7000                       		moveq	#0,d0
0001606C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016070 0828 0000 0022             		btst	#0,$22(a0)
00016076 6700                       		beq.s	Obj6A_Animate02
00016078 4440                       		neg.w	d0
0001607A 0640 0080                  		addi.w	#$80,d0
0001607E                            
0001607E                            Obj6A_Animate02:
0001607E 3228 0038                  		move.w	$38(a0),d1
00016082 9240                       		sub.w	d0,d1
00016084 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016088 5328 001E                  		subq.b	#1,$1E(a0)
0001608C 6A00                       		bpl.s	loc_15A96
0001608E 117C 0002 001E             		move.b	#2,$1E(a0)
00016094 0868 0000 001A             		bchg	#0,$1A(a0)
0001609A                            
0001609A                            loc_15A96:
0001609A 4A28 0001                  		tst.b	1(a0)
0001609E 6A00                       		bpl.s	locret_15AB0
000160A0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000160A4 0C00 0018                  		cmpi.b	#$18,d0
000160A8 6600                       		bne.s	locret_15AB0
000160AA 303C 00B0                  		move.w	#$B0,d0
000160AE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160B4                            
000160B4                            locret_15AB0:
000160B4 4E75                       		rts	
000160B6                            ; ===========================================================================
000160B6                            
000160B6                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000160B6 4A28 003D                  		tst.b	$3D(a0)
000160BA 6600                       		bne.s	Obj6A_Animate03
000160BC 3038 D008                  		move.w	($FFFFD008).w,d0
000160C0 0440 00C0                  		subi.w	#$C0,d0
000160C4 6500                       		bcs.s	loc_15B02
000160C6 9068 0008                  		sub.w	8(a0),d0
000160CA 6500                       		bcs.s	loc_15B02
000160CC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160D0 0440 0080                  		subi.w	#$80,d0
000160D4 B068 000C                  		cmp.w	$C(a0),d0
000160D8 6400                       		bcc.s	locret_15B04
000160DA 0640 0100                  		addi.w	#$100,d0
000160DE B068 000C                  		cmp.w	$C(a0),d0
000160E2 6500                       		bcs.s	locret_15B04
000160E4 117C 0001 003D             		move.b	#1,$3D(a0)
000160EA 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160F0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160F6 117C 0002 001A             		move.b	#2,$1A(a0)
000160FC 303C 00B0                  		move.w	#$B0,d0
00016100 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016106                            
00016106                            loc_15B02:
00016106 588F                       		addq.l	#4,sp
00016108                            
00016108                            locret_15B04:
00016108 4E75                       		rts	
0001610A                            ; ===========================================================================
0001610A                            
0001610A                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001610A 4EB9 0000 DB54             		jsr	SpeedToPos
00016110 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016116 5328 001E                  		subq.b	#1,$1E(a0)
0001611A 6A00                       		bpl.s	locret_15B24
0001611C 117C 0002 001E             		move.b	#2,$1E(a0)
00016122 0868 0000 001A             		bchg	#0,$1A(a0)
00016128                            
00016128                            locret_15B24:
00016128 4E75                       		rts	
0001612A                            ; ===========================================================================
0001612A                            
0001612A                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001612A 4A28 003D                  		tst.b	$3D(a0)
0001612E 6600                       		bne.s	Obj6A_Animate04
00016130 3038 D008                  		move.w	($FFFFD008).w,d0
00016134 0640 00E0                  		addi.w	#$E0,d0
00016138 9068 0008                  		sub.w	8(a0),d0
0001613C 6400                       		bcc.s	loc_15B74
0001613E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016142 0440 0080                  		subi.w	#$80,d0
00016146 B068 000C                  		cmp.w	$C(a0),d0
0001614A 6400                       		bcc.s	locret_15B76
0001614C 0640 0100                  		addi.w	#$100,d0
00016150 B068 000C                  		cmp.w	$C(a0),d0
00016154 6500                       		bcs.s	locret_15B76
00016156 117C 0001 003D             		move.b	#1,$3D(a0)
0001615C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016162 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016168 117C 0002 001A             		move.b	#2,$1A(a0)
0001616E 303C 00B0                  		move.w	#$B0,d0
00016172 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016178                            
00016178                            loc_15B74:
00016178 588F                       		addq.l	#4,sp
0001617A                            
0001617A                            locret_15B76:
0001617A 4E75                       		rts	
0001617C                            ; ===========================================================================
0001617C                            
0001617C                            Obj6A_Animate04:
0001617C 4EB9 0000 DB54             		jsr	SpeedToPos
00016182 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016188 5328 001E                  		subq.b	#1,$1E(a0)
0001618C 6A00                       		bpl.s	locret_15B96
0001618E 117C 0002 001E             		move.b	#2,$1E(a0)
00016194 0868 0000 001A             		bchg	#0,$1A(a0)
0001619A                            
0001619A                            locret_15B96:
0001619A 4E75                       		rts	
0001619C                            ; ===========================================================================
0001619C                            ; ---------------------------------------------------------------------------
0001619C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001619C                            ; ---------------------------------------------------------------------------
0001619C                            Map_obj6A:
0001619C                            	include "_maps\obj6A.asm"
0001619C                            ; ---------------------------------------------------------------------------
0001619C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001619C                            ; ---------------------------------------------------------------------------
0001619C 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000161A0 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000161A4 07                         byte_15BA0:	dc.b 7
000161A5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161AA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161AF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161B4 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161B9 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161BE 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161C3 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161C8 07                         byte_15BC4:	dc.b 7
000161C9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161CE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161D3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161D8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161DD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161E2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161E7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161EC 04                         byte_15BE8:	dc.b 4
000161ED E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161F2 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161F7 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161FC 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016201 04                         byte_15BFD:	dc.b 4
00016202 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016207 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001620C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016211 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016216                            		even
00016216                            		even
00016216                            
00016216                            ; ===========================================================================
00016216                            ; ---------------------------------------------------------------------------
00016216                            ; Object 6B - stomper (SBZ)
00016216                            ; ---------------------------------------------------------------------------
00016216                            
00016216                            Obj6B:					; XREF: Obj_Index
00016216 7000                       		moveq	#0,d0
00016218 1028 0024                  		move.b	$24(a0),d0
0001621C 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016220 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016224                            ; ===========================================================================
00016224 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016226 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016228                            
00016228 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001622C 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016230 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016234 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016238 8040 0005                  		dc.b  $80, $40,	  0,   5
0001623C                            ; ===========================================================================
0001623C                            
0001623C                            Obj6B_Main:				; XREF: Obj6B_Index
0001623C 5428 0024                  		addq.b	#2,$24(a0)
00016240 7000                       		moveq	#0,d0
00016242 1028 0028                  		move.b	$28(a0),d0
00016246 E448                       		lsr.w	#2,d0
00016248 0240 001C                  		andi.w	#$1C,d0
0001624C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016250 115B 0019                  		move.b	(a3)+,$19(a0)
00016254 115B 0016                  		move.b	(a3)+,$16(a0)
00016258 E448                       		lsr.w	#2,d0
0001625A 1140 001A                  		move.b	d0,$1A(a0)
0001625E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016266 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001626C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016272 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016274 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001627A 6700                       		beq.s	Obj6B_SBZ3
0001627C                            
0001627C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001627C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016280 7000                       		moveq	#0,d0
00016282 1028 0023                  		move.b	$23(a0),d0
00016286 6700                       		beq.s	Obj6B_Delete
00016288 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001628E                            
0001628E                            Obj6B_Delete:
0001628E 4EF9 0000 DBB6             		jmp	DeleteObject
00016294                            ; ===========================================================================
00016294                            
00016294                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016294 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001629A 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000162A0 6600                       		bne.s	Obj6B_SBZ12
000162A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162A6 7000                       		moveq	#0,d0
000162A8 1028 0023                  		move.b	$23(a0),d0
000162AC 6700                       		beq.s	Obj6B_SBZ12
000162AE 0832 0000 0002             		btst	#0,2(a2,d0.w)
000162B4 6700                       		beq.s	Obj6B_SBZ12
000162B6 4238 F7CB                  		clr.b	($FFFFF7CB).w
000162BA 60C0                       		bra.s	Obj6B_ChkGone
000162BC                            ; ===========================================================================
000162BC                            
000162BC                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000162BC 0028 0004 0001             		ori.b	#4,1(a0)
000162C2 117C 0004 0018             		move.b	#4,$18(a0)
000162C8 3168 0008 0034             		move.w	8(a0),$34(a0)
000162CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
000162D4 7000                       		moveq	#0,d0
000162D6 101B                       		move.b	(a3)+,d0
000162D8 3140 003C                  		move.w	d0,$3C(a0)
000162DC 7000                       		moveq	#0,d0
000162DE 1028 0028                  		move.b	$28(a0),d0
000162E2 6A00                       		bpl.s	Obj6B_Action
000162E4 0200 000F                  		andi.b	#$F,d0
000162E8 1140 003E                  		move.b	d0,$3E(a0)
000162EC 1153 0028                  		move.b	(a3),$28(a0)
000162F0 0C13 0005                  		cmpi.b	#5,(a3)
000162F4 6600                       		bne.s	Obj6B_ChkGone2
000162F6 08E8 0004 0001             		bset	#4,1(a0)
000162FC                            
000162FC                            Obj6B_ChkGone2:
000162FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016300 7000                       		moveq	#0,d0
00016302 1028 0023                  		move.b	$23(a0),d0
00016306 6700                       		beq.s	Obj6B_Action
00016308 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001630E                            
0001630E                            Obj6B_Action:				; XREF: Obj6B_Index
0001630E 3F28 0008                  		move.w	8(a0),-(sp)
00016312 7000                       		moveq	#0,d0
00016314 1028 0028                  		move.b	$28(a0),d0
00016318 0240 000F                  		andi.w	#$F,d0
0001631C D040                       		add.w	d0,d0
0001631E 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016322 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016326 381F                       		move.w	(sp)+,d4
00016328 4A28 0001                  		tst.b	1(a0)
0001632C 6A00                       		bpl.s	Obj6B_ChkDel
0001632E 7200                       		moveq	#0,d1
00016330 1228 0019                  		move.b	$19(a0),d1
00016334 0641 000B                  		addi.w	#$B,d1
00016338 7400                       		moveq	#0,d2
0001633A 1428 0016                  		move.b	$16(a0),d2
0001633E 3602                       		move.w	d2,d3
00016340 5243                       		addq.w	#1,d3
00016342 6100 9C06                  		bsr.w	SolidObject
00016346                            
00016346                            Obj6B_ChkDel:
00016346 3028 0034                  		move.w	$34(a0),d0
0001634A 0240 FF80                  		andi.w	#$FF80,d0
0001634E 3238 F700                  		move.w	($FFFFF700).w,d1
00016352 0441 0080                  		subi.w	#$80,d1
00016356 0241 FF80                  		andi.w	#$FF80,d1
0001635A 9041                       		sub.w	d1,d0
0001635C 0C40 0280                  		cmpi.w	#$280,d0
00016360 6200                       		bhi.s	loc_15D64
00016362 4EF9 0000 DB7A             		jmp	DisplaySprite
00016368                            ; ===========================================================================
00016368                            
00016368                            loc_15D64:
00016368 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001636E 6600                       		bne.s	Obj6B_Delete2
00016370 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016374 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016378 7000                       		moveq	#0,d0
0001637A 1028 0023                  		move.b	$23(a0),d0
0001637E 6700                       		beq.s	Obj6B_Delete2
00016380 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016386                            
00016386                            Obj6B_Delete2:
00016386 4EF9 0000 DBB6             		jmp	DeleteObject
0001638C                            ; ===========================================================================
0001638C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016390 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016394 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016398                            ; ===========================================================================
00016398                            
00016398                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016398 4E75                       		rts	
0001639A                            ; ===========================================================================
0001639A                            
0001639A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001639A 4A28 0038                  		tst.b	$38(a0)
0001639E 6600                       		bne.s	loc_15DB4
000163A0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000163A4 7000                       		moveq	#0,d0
000163A6 1028 003E                  		move.b	$3E(a0),d0
000163AA 0832 0000 0000             		btst	#0,(a2,d0.w)
000163B0 6700                       		beq.s	loc_15DC2
000163B2 117C 0001 0038             		move.b	#1,$38(a0)
000163B8                            
000163B8                            loc_15DB4:
000163B8 3028 003C                  		move.w	$3C(a0),d0
000163BC B068 003A                  		cmp.w	$3A(a0),d0
000163C0 6700                       		beq.s	loc_15DE0
000163C2 5468 003A                  		addq.w	#2,$3A(a0)
000163C6                            
000163C6                            loc_15DC2:
000163C6 3028 003A                  		move.w	$3A(a0),d0
000163CA 0828 0000 0022             		btst	#0,$22(a0)
000163D0 6700                       		beq.s	loc_15DD4
000163D2 4440                       		neg.w	d0
000163D4 0640 0080                  		addi.w	#$80,d0
000163D8                            
000163D8                            loc_15DD4:
000163D8 3228 0034                  		move.w	$34(a0),d1
000163DC 9240                       		sub.w	d0,d1
000163DE 3141 0008                  		move.w	d1,8(a0)
000163E2 4E75                       		rts	
000163E4                            ; ===========================================================================
000163E4                            
000163E4                            loc_15DE0:
000163E4 5228 0028                  		addq.b	#1,$28(a0)
000163E8 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163EE 4228 0038                  		clr.b	$38(a0)
000163F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163F6 7000                       		moveq	#0,d0
000163F8 1028 0023                  		move.b	$23(a0),d0
000163FC 67C8                       		beq.s	loc_15DC2
000163FE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016404 60C0                       		bra.s	loc_15DC2
00016406                            ; ===========================================================================
00016406                            
00016406                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016406 4A28 0038                  		tst.b	$38(a0)
0001640A 6600                       		bne.s	loc_15E14
0001640C 5368 0036                  		subq.w	#1,$36(a0)
00016410 6600                       		bne.s	loc_15E1E
00016412 117C 0001 0038             		move.b	#1,$38(a0)
00016418                            
00016418                            loc_15E14:
00016418 4A68 003A                  		tst.w	$3A(a0)
0001641C 6700                       		beq.s	loc_15E3C
0001641E 5568 003A                  		subq.w	#2,$3A(a0)
00016422                            
00016422                            loc_15E1E:
00016422 3028 003A                  		move.w	$3A(a0),d0
00016426 0828 0000 0022             		btst	#0,$22(a0)
0001642C 6700                       		beq.s	loc_15E30
0001642E 4440                       		neg.w	d0
00016430 0640 0080                  		addi.w	#$80,d0
00016434                            
00016434                            loc_15E30:
00016434 3228 0034                  		move.w	$34(a0),d1
00016438 9240                       		sub.w	d0,d1
0001643A 3141 0008                  		move.w	d1,8(a0)
0001643E 4E75                       		rts	
00016440                            ; ===========================================================================
00016440                            
00016440                            loc_15E3C:
00016440 5328 0028                  		subq.b	#1,$28(a0)
00016444 4228 0038                  		clr.b	$38(a0)
00016448 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001644C 7000                       		moveq	#0,d0
0001644E 1028 0023                  		move.b	$23(a0),d0
00016452 67CE                       		beq.s	loc_15E1E
00016454 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001645A 60C6                       		bra.s	loc_15E1E
0001645C                            ; ===========================================================================
0001645C                            
0001645C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001645C 4A28 0038                  		tst.b	$38(a0)
00016460 6600                       		bne.s	loc_15E7C
00016462 4A68 003A                  		tst.w	$3A(a0)
00016466 6700                       		beq.s	loc_15E6A
00016468 5368 003A                  		subq.w	#1,$3A(a0)
0001646C 6000                       		bra.s	loc_15E8E
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            loc_15E6A:
0001646E 5368 0036                  		subq.w	#1,$36(a0)
00016472 6A00                       		bpl.s	loc_15E8E
00016474 317C 003C 0036             		move.w	#$3C,$36(a0)
0001647A 117C 0001 0038             		move.b	#1,$38(a0)
00016480                            
00016480                            loc_15E7C:
00016480 5068 003A                  		addq.w	#8,$3A(a0)
00016484 3028 003A                  		move.w	$3A(a0),d0
00016488 B068 003C                  		cmp.w	$3C(a0),d0
0001648C 6600                       		bne.s	loc_15E8E
0001648E 4228 0038                  		clr.b	$38(a0)
00016492                            
00016492                            loc_15E8E:
00016492 3028 003A                  		move.w	$3A(a0),d0
00016496 0828 0000 0022             		btst	#0,$22(a0)
0001649C 6700                       		beq.s	loc_15EA0
0001649E 4440                       		neg.w	d0
000164A0 0640 0038                  		addi.w	#$38,d0
000164A4                            
000164A4                            loc_15EA0:
000164A4 3228 0030                  		move.w	$30(a0),d1
000164A8 D240                       		add.w	d0,d1
000164AA 3141 000C                  		move.w	d1,$C(a0)
000164AE 4E75                       		rts	
000164B0                            ; ===========================================================================
000164B0                            
000164B0                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000164B0 4A28 0038                  		tst.b	$38(a0)
000164B4 6600                       		bne.s	loc_15ED0
000164B6 4A68 003A                  		tst.w	$3A(a0)
000164BA 6700                       		beq.s	loc_15EBE
000164BC 5168 003A                  		subq.w	#8,$3A(a0)
000164C0 6000                       		bra.s	loc_15EF0
000164C2                            ; ===========================================================================
000164C2                            
000164C2                            loc_15EBE:
000164C2 5368 0036                  		subq.w	#1,$36(a0)
000164C6 6A00                       		bpl.s	loc_15EF0
000164C8 317C 003C 0036             		move.w	#$3C,$36(a0)
000164CE 117C 0001 0038             		move.b	#1,$38(a0)
000164D4                            
000164D4                            loc_15ED0:
000164D4 3028 003A                  		move.w	$3A(a0),d0
000164D8 B068 003C                  		cmp.w	$3C(a0),d0
000164DC 6700                       		beq.s	loc_15EE0
000164DE 5068 003A                  		addq.w	#8,$3A(a0)
000164E2 6000                       		bra.s	loc_15EF0
000164E4                            ; ===========================================================================
000164E4                            
000164E4                            loc_15EE0:
000164E4 5368 0036                  		subq.w	#1,$36(a0)
000164E8 6A00                       		bpl.s	loc_15EF0
000164EA 317C 003C 0036             		move.w	#$3C,$36(a0)
000164F0 4228 0038                  		clr.b	$38(a0)
000164F4                            
000164F4                            loc_15EF0:
000164F4 3028 003A                  		move.w	$3A(a0),d0
000164F8 0828 0000 0022             		btst	#0,$22(a0)
000164FE 6700                       		beq.s	loc_15F02
00016500 4440                       		neg.w	d0
00016502 0640 0038                  		addi.w	#$38,d0
00016506                            
00016506                            loc_15F02:
00016506 3228 0030                  		move.w	$30(a0),d1
0001650A D240                       		add.w	d0,d1
0001650C 3141 000C                  		move.w	d1,$C(a0)
00016510 4E75                       		rts	
00016512                            ; ===========================================================================
00016512                            
00016512                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016512 4A28 0038                  		tst.b	$38(a0)
00016516 6600                       		bne.s	loc_15F3E
00016518 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001651C 7000                       		moveq	#0,d0
0001651E 1028 003E                  		move.b	$3E(a0),d0
00016522 0832 0000 0000             		btst	#0,(a2,d0.w)
00016528 6700                       		beq.s	locret_15F5C
0001652A 117C 0001 0038             		move.b	#1,$38(a0)
00016530 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016534 7000                       		moveq	#0,d0
00016536 1028 0023                  		move.b	$23(a0),d0
0001653A 6700                       		beq.s	loc_15F3E
0001653C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016542                            
00016542                            loc_15F3E:
00016542 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001654A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016552 3168 0008 0034             		move.w	8(a0),$34(a0)
00016558 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001655E 6700                       		beq.s	loc_15F5E
00016560                            
00016560                            locret_15F5C:
00016560 4E75                       		rts	
00016562                            ; ===========================================================================
00016562                            
00016562                            loc_15F5E:
00016562 4228 0028                  		clr.b	$28(a0)
00016566 4228 0038                  		clr.b	$38(a0)
0001656A 4E75                       		rts	
0001656C                            ; ===========================================================================
0001656C                            ; ---------------------------------------------------------------------------
0001656C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001656C                            ; ---------------------------------------------------------------------------
0001656C                            Map_obj6B:
0001656C                            	include "_maps\obj6B.asm"
0001656C                            ; ---------------------------------------------------------------------------
0001656C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001656C                            ; ---------------------------------------------------------------------------
0001656C 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016570 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016574 0000                       		dc.w byte_15FB0-Map_obj6B
00016576 04                         byte_15F72:	dc.b 4
00016577 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001657C F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016581 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016586 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001658B 08                         byte_15F87:	dc.b 8
0001658C E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016591 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016596 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001659B E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000165A0 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000165A5 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000165AA 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000165AF 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000165B4 0E                         byte_15FB0:	dc.b $E
000165B5 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000165BA C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000165BF C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000165C4 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000165C9 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000165CE C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000165D3 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000165D8 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165DD E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165E2 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165E7 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165EC 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165F1 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165F6 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165FC 00                         		even
000165FC 00                         		even
000165FC                            
000165FC                            ; ===========================================================================
000165FC                            ; ---------------------------------------------------------------------------
000165FC                            ; Object 6C - vanishing	platforms (SBZ)
000165FC                            ; ---------------------------------------------------------------------------
000165FC                            
000165FC                            Obj6C:					; XREF: Obj_Index
000165FC 7000                       		moveq	#0,d0
000165FE 1028 0024                  		move.b	$24(a0),d0
00016602 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016606 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001660A                            ; ===========================================================================
0001660A 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001660C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001660E 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016610 0000                       		dc.w loc_16068-Obj6C_Index
00016612                            ; ===========================================================================
00016612                            
00016612                            Obj6C_Main:				; XREF: Obj6C_Index
00016612 5C28 0024                  		addq.b	#6,$24(a0)
00016616 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001661E 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016624 0028 0004 0001             		ori.b	#4,1(a0)
0001662A 117C 0010 0019             		move.b	#$10,$19(a0)
00016630 117C 0004 0018             		move.b	#4,$18(a0)
00016636 7000                       		moveq	#0,d0
00016638 1028 0028                  		move.b	$28(a0),d0	; get object type
0001663C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016640 5240                       		addq.w	#1,d0		; add 1
00016642 EF48                       		lsl.w	#7,d0		; multiply by $80
00016644 3200                       		move.w	d0,d1
00016646 5340                       		subq.w	#1,d0
00016648 3140 0030                  		move.w	d0,$30(a0)
0001664C 3140 0032                  		move.w	d0,$32(a0)
00016650 7000                       		moveq	#0,d0
00016652 1028 0028                  		move.b	$28(a0),d0	; get object type
00016656 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001665A 0641 0080                  		addi.w	#$80,d1
0001665E C0C1                       		mulu.w	d1,d0
00016660 E088                       		lsr.l	#8,d0
00016662 3140 0036                  		move.w	d0,$36(a0)
00016666 5341                       		subq.w	#1,d1
00016668 3141 0038                  		move.w	d1,$38(a0)
0001666C                            
0001666C                            loc_16068:				; XREF: Obj6C_Index
0001666C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016670 9068 0036                  		sub.w	$36(a0),d0
00016674 C068 0038                  		and.w	$38(a0),d0
00016678 6600                       		bne.s	Obj6C_Animate
0001667A 5928 0024                  		subq.b	#4,$24(a0)
0001667E 6000                       		bra.s	Obj6C_Vanish
00016680                            ; ===========================================================================
00016680                            
00016680                            Obj6C_Animate:
00016680 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016686 4EB9 0000 AC4A             		jsr	AnimateSprite
0001668C 6000 9594                  		bra.w	MarkObjGone
00016690                            ; ===========================================================================
00016690                            
00016690                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016690 5368 0030                  		subq.w	#1,$30(a0)
00016694 6A00                       		bpl.s	loc_160AA
00016696 317C 007F 0030             		move.w	#127,$30(a0)
0001669C 4A28 001C                  		tst.b	$1C(a0)
000166A0 6700                       		beq.s	loc_160A4
000166A2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000166A8                            
000166A8                            loc_160A4:
000166A8 0868 0000 001C             		bchg	#0,$1C(a0)
000166AE                            
000166AE                            loc_160AA:
000166AE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000166B4 4EB9 0000 AC4A             		jsr	AnimateSprite
000166BA 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000166C0 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000166C2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000166C8 6600                       		bne.s	loc_160D6
000166CA 7200                       		moveq	#0,d1
000166CC 1228 0019                  		move.b	$19(a0),d1
000166D0 4EB9 0000 78A6             		jsr	(PlatformObject).l
000166D6 6000 954A                  		bra.w	MarkObjGone
000166DA                            ; ===========================================================================
000166DA                            
000166DA                            loc_160D6:
000166DA 7200                       		moveq	#0,d1
000166DC 1228 0019                  		move.b	$19(a0),d1
000166E0 4EB9 0000 7A1A             		jsr	(ExitPlatform).l
000166E6 3428 0008                  		move.w	8(a0),d2
000166EA 4EB9 0000 7F84             		jsr	(MvSonicOnPtfm2).l
000166F0 6000 9530                  		bra.w	MarkObjGone
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166F4 0828 0003 0022             		btst	#3,$22(a0)
000166FA 6700                       		beq.s	Obj6C_Display
000166FC 43F8 D000                  		lea	($FFFFD000).w,a1
00016700 08A9 0003 0022             		bclr	#3,$22(a1)
00016706 08A8 0003 0022             		bclr	#3,$22(a0)
0001670C 117C 0002 0024             		move.b	#2,$24(a0)
00016712 4228 0025                  		clr.b	$25(a0)
00016716                            
00016716                            Obj6C_Display:
00016716 6000 950A                  		bra.w	MarkObjGone
0001671A                            ; ===========================================================================
0001671A                            Ani_obj6C:
0001671A                            	include "_anim\obj6C.asm"
0001671A                            ; ---------------------------------------------------------------------------
0001671A                            ; Animation script - vanishing platforms (SBZ)
0001671A                            ; ---------------------------------------------------------------------------
0001671A 0000                       		dc.w byte_1611A-Ani_obj6C
0001671C 0000                       		dc.w byte_16122-Ani_obj6C
0001671E 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016726 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001672E                            		even
0001672E                            		even
0001672E                            
0001672E                            ; ---------------------------------------------------------------------------
0001672E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001672E                            ; ---------------------------------------------------------------------------
0001672E                            Map_obj6C:
0001672E                            	include "_maps\obj6C.asm"
0001672E                            ; ---------------------------------------------------------------------------
0001672E                            ; Sprite mappings - vanishing platforms	(SBZ)
0001672E                            ; ---------------------------------------------------------------------------
0001672E 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016732 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016736 01                         byte_16132:	dc.b 1
00016737 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001673C 01                         byte_16138:	dc.b 1
0001673D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016742 01                         byte_1613E:	dc.b 1
00016743 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016748 00                         byte_16144:	dc.b 0
0001674A 00                         		even
0001674A 00                         		even
0001674A                            
0001674A                            ; ===========================================================================
0001674A                            ; ---------------------------------------------------------------------------
0001674A                            ; Object 6E - electrocution orbs (SBZ)
0001674A                            ; ---------------------------------------------------------------------------
0001674A                            
0001674A                            Obj6E:					; XREF: Obj_Index
0001674A 7000                       		moveq	#0,d0
0001674C 1028 0024                  		move.b	$24(a0),d0
00016750 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016754 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016758                            ; ===========================================================================
00016758 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001675A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001675C                            ; ===========================================================================
0001675C                            
0001675C                            Obj6E_Main:				; XREF: Obj6E_Index
0001675C 5428 0024                  		addq.b	#2,$24(a0)
00016760 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016768 317C 047E 0002             		move.w	#$47E,2(a0)
0001676E 0028 0004 0001             		ori.b	#4,1(a0)
00016774 117C 0028 0019             		move.b	#$28,$19(a0)
0001677A 7000                       		moveq	#0,d0
0001677C 1028 0028                  		move.b	$28(a0),d0	; read object type
00016780 E948                       		lsl.w	#4,d0		; multiply by $10
00016782 5340                       		subq.w	#1,d0
00016784 3140 0034                  		move.w	d0,$34(a0)
00016788                            
00016788                            Obj6E_Shock:				; XREF: Obj6E_Index
00016788 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001678C C068 0034                  		and.w	$34(a0),d0
00016790 6600                       		bne.s	Obj6E_Animate
00016792 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016798 4A28 0001                  		tst.b	1(a0)
0001679C 6A00                       		bpl.s	Obj6E_Animate
0001679E 303C 00B1                  		move.w	#$B1,d0
000167A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
000167A8                            
000167A8                            Obj6E_Animate:
000167A8 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000167AE 4EB9 0000 AC4A             		jsr	AnimateSprite
000167B4 117C 0000 0020             		move.b	#0,$20(a0)
000167BA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000167C0 6600                       		bne.s	Obj6E_Display	; if not, branch
000167C2 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000167C8                            
000167C8                            Obj6E_Display:
000167C8 6000 9458                  		bra.w	MarkObjGone
000167CC                            ; ===========================================================================
000167CC                            Ani_obj6E:
000167CC                            	include "_anim\obj6E.asm"
000167CC                            ; ---------------------------------------------------------------------------
000167CC                            ; Animation script - electrocution orbs (SBZ)
000167CC                            ; ---------------------------------------------------------------------------
000167CC 0000                       		dc.w byte_161CC-Ani_obj6E
000167CE 0000                       		dc.w byte_161D0-Ani_obj6E
000167D0 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000167D4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167E4                            		even
000167E4                            		even
000167E4                            
000167E4                            ; ---------------------------------------------------------------------------
000167E4                            ; Sprite mappings - electrocution orbs (SBZ)
000167E4                            ; ---------------------------------------------------------------------------
000167E4                            Map_obj6E:
000167E4                            	include "_maps\obj6E.asm"
000167E4                            Map_26ed:
000167E4 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000167E6 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000167E8 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000167EA 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000167EC 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000167EE 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000167F0 01                         Map_26ed_C: 	dc.b $1
000167F1 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000167F6 02                         Map_26ed_12: 	dc.b $2
000167F7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167FC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016801 06                         Map_26ed_1D: 	dc.b $6
00016802 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016807 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001680C F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016811 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016816 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001681B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016820 08                         Map_26ed_3C: 	dc.b $8
00016821 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016826 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001682B F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016830 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016835 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
0001683A F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001683F F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016844 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016849 06                         Map_26ed_65: 	dc.b $6
0001684A F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001684F 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016854 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016859 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001685E F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016863 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016868 04                         Map_26ed_84: 	dc.b $4
00016869 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001686E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016873 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016878 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001687E 00                         	even
0001687E 00                         	even
0001687E                            
0001687E                            ; ===========================================================================
0001687E                            ; ---------------------------------------------------------------------------
0001687E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001687E                            ; ---------------------------------------------------------------------------
0001687E                            
0001687E                            Obj6F:					; XREF: Obj_Index
0001687E 7000                       		moveq	#0,d0
00016880 1028 0024                  		move.b	$24(a0),d0
00016884 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016888 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001688C 3028 0030                  		move.w	$30(a0),d0
00016890 0240 FF80                  		andi.w	#$FF80,d0
00016894 3238 F700                  		move.w	($FFFFF700).w,d1
00016898 0441 0080                  		subi.w	#$80,d1
0001689C 0241 FF80                  		andi.w	#$FF80,d1
000168A0 9041                       		sub.w	d1,d0
000168A2 0C40 0280                  		cmpi.w	#$280,d0
000168A6 6200                       		bhi.s	loc_1629A
000168A8                            
000168A8                            Obj6F_Display:
000168A8 4EF9 0000 DB7A             		jmp	DisplaySprite
000168AE                            ; ===========================================================================
000168AE                            
000168AE                            loc_1629A:
000168AE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000168B4 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000168B6 0C40 FF80                  		cmpi.w	#-$80,d0
000168BA 64EC                       		bcc.s	Obj6F_Display
000168BC                            
000168BC                            Obj6F_Act1or2:
000168BC 1028 002F                  		move.b	$2F(a0),d0
000168C0 6A00                       		bpl.s	Obj6F_Delete
000168C2 0240 007F                  		andi.w	#$7F,d0
000168C6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000168CA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000168D0                            
000168D0                            Obj6F_Delete:
000168D0 4EF9 0000 DBB6             		jmp	DeleteObject
000168D6                            ; ===========================================================================
000168D6 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000168D8 0000                       		dc.w loc_163D8-Obj6F_Index
000168DA                            ; ===========================================================================
000168DA                            
000168DA                            Obj6F_Main:				; XREF: Obj6F_Index
000168DA 1028 0028                  		move.b	$28(a0),d0
000168DE 6B00 0000                  		bmi.w	loc_16380
000168E2 5428 0024                  		addq.b	#2,$24(a0)
000168E6 217C 0001 5F3E 0004        		move.l	#Map_obj69a,4(a0)
000168EE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168F4 117C 0010 0019             		move.b	#$10,$19(a0)
000168FA 0028 0004 0001             		ori.b	#4,1(a0)
00016900 117C 0004 0018             		move.b	#4,$18(a0)
00016906 7000                       		moveq	#0,d0
00016908 1028 0028                  		move.b	$28(a0),d0
0001690C 3200                       		move.w	d0,d1
0001690E E648                       		lsr.w	#3,d0
00016910 0240 001E                  		andi.w	#$1E,d0
00016914 45FA 0000                  		lea	off_164A6(pc),a2
00016918 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001691C 315A 0038                  		move.w	(a2)+,$38(a0)
00016920 315A 0030                  		move.w	(a2)+,$30(a0)
00016924 214A 003C                  		move.l	a2,$3C(a0)
00016928 0241 000F                  		andi.w	#$F,d1
0001692C E549                       		lsl.w	#2,d1
0001692E 1141 0038                  		move.b	d1,$38(a0)
00016932 117C 0004 003A             		move.b	#4,$3A(a0)
00016938 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001693C 6700                       		beq.s	loc_16356
0001693E 117C 0001 003B             		move.b	#1,$3B(a0)
00016944 4428 003A                  		neg.b	$3A(a0)
00016948 7200                       		moveq	#0,d1
0001694A 1228 0038                  		move.b	$38(a0),d1
0001694E D228 003A                  		add.b	$3A(a0),d1
00016952 B228 0039                  		cmp.b	$39(a0),d1
00016956 6500                       		bcs.s	loc_16352
00016958 1001                       		move.b	d1,d0
0001695A 7200                       		moveq	#0,d1
0001695C 4A00                       		tst.b	d0
0001695E 6A00                       		bpl.s	loc_16352
00016960 1228 0039                  		move.b	$39(a0),d1
00016964 5901                       		subq.b	#4,d1
00016966                            
00016966                            loc_16352:
00016966 1141 0038                  		move.b	d1,$38(a0)
0001696A                            
0001696A                            loc_16356:
0001696A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016970 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016976 4A41                       		tst.w	d1
00016978 6600                       		bne.s	loc_1636C
0001697A 117C 0001 001C             		move.b	#1,$1C(a0)
00016980                            
00016980                            loc_1636C:
00016980 0C41 0008                  		cmpi.w	#8,d1
00016984 6600                       		bne.s	loc_16378
00016986 117C 0000 001C             		move.b	#0,$1C(a0)
0001698C                            
0001698C                            loc_16378:
0001698C 6100 C12C                  		bsr.w	Obj63_ChangeDir
00016990 6000 0000                  		bra.w	loc_163D8
00016994                            ; ===========================================================================
00016994                            
00016994                            loc_16380:				; XREF: Obj6F_Main
00016994 1140 002F                  		move.b	d0,$2F(a0)
00016998 0240 007F                  		andi.w	#$7F,d0
0001699C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000169A0 08F2 0000 0000             		bset	#0,(a2,d0.w)
000169A6 6700                       		beq.s	loc_1639A
000169A8 4EF9 0000 DBB6             		jmp	DeleteObject
000169AE                            ; ===========================================================================
000169AE                            
000169AE                            loc_1639A:
000169AE D040                       		add.w	d0,d0
000169B0 0240 001E                  		andi.w	#$1E,d0
000169B4 0640 0080                  		addi.w	#$80,d0
000169B8 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000169BE D4F2 0000                  		adda.w	(a2,d0.w),a2
000169C2 321A                       		move.w	(a2)+,d1
000169C4 2248                       		movea.l	a0,a1
000169C6 6000                       		bra.s	Obj6F_LoadPform
000169C8                            ; ===========================================================================
000169C8                            
000169C8                            Obj6F_Loop:
000169C8 4EB9 0000 E000             		jsr	SingleObjLoad
000169CE 6600                       		bne.s	loc_163D0
000169D0                            
000169D0                            Obj6F_LoadPform:			; XREF: loc_1639A
000169D0 12BC 006F                  		move.b	#$6F,0(a1)
000169D4 335A 0008                  		move.w	(a2)+,8(a1)
000169D8 335A 000C                  		move.w	(a2)+,$C(a1)
000169DC 301A                       		move.w	(a2)+,d0
000169DE 1340 0028                  		move.b	d0,$28(a1)
000169E2                            
000169E2                            loc_163D0:
000169E2 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169E6                            
000169E6 588F                       		addq.l	#4,sp
000169E8 4E75                       		rts	
000169EA                            ; ===========================================================================
000169EA                            
000169EA                            loc_163D8:				; XREF: Obj6F_Index
000169EA 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169F0 4EB9 0000 AC4A             		jsr	AnimateSprite
000169F6 4A28 001A                  		tst.b	$1A(a0)
000169FA 6600                       		bne.s	loc_16404
000169FC 3F28 0008                  		move.w	8(a0),-(sp)
00016A00 6100 0000                  		bsr.w	loc_16424
00016A04 323C 001B                  		move.w	#$1B,d1
00016A08 343C 0007                  		move.w	#7,d2
00016A0C 3602                       		move.w	d2,d3
00016A0E 5243                       		addq.w	#1,d3
00016A10 381F                       		move.w	(sp)+,d4
00016A12 6000 9536                  		bra.w	SolidObject
00016A16                            ; ===========================================================================
00016A16                            
00016A16                            loc_16404:
00016A16 0828 0003 0022             		btst	#3,$22(a0)
00016A1C 6700                       		beq.s	loc_16420
00016A1E 43F8 D000                  		lea	($FFFFD000).w,a1
00016A22 08A9 0003 0022             		bclr	#3,$22(a1)
00016A28 08A8 0003 0022             		bclr	#3,$22(a0)
00016A2E 4228 0025                  		clr.b	$25(a0)
00016A32                            
00016A32                            loc_16420:
00016A32 6000 0002                  		bra.w	*+4
00016A36                            
00016A36                            loc_16424:
00016A36 3028 0008                  		move.w	8(a0),d0
00016A3A B068 0034                  		cmp.w	$34(a0),d0
00016A3E 6600                       		bne.s	loc_16484
00016A40 3028 000C                  		move.w	$C(a0),d0
00016A44 B068 0036                  		cmp.w	$36(a0),d0
00016A48 6600                       		bne.s	loc_16484
00016A4A 7200                       		moveq	#0,d1
00016A4C 1228 0038                  		move.b	$38(a0),d1
00016A50 D228 003A                  		add.b	$3A(a0),d1
00016A54 B228 0039                  		cmp.b	$39(a0),d1
00016A58 6500                       		bcs.s	loc_16456
00016A5A 1001                       		move.b	d1,d0
00016A5C 7200                       		moveq	#0,d1
00016A5E 4A00                       		tst.b	d0
00016A60 6A00                       		bpl.s	loc_16456
00016A62 1228 0039                  		move.b	$39(a0),d1
00016A66 5901                       		subq.b	#4,d1
00016A68                            
00016A68                            loc_16456:
00016A68 1141 0038                  		move.b	d1,$38(a0)
00016A6C 2268 003C                  		movea.l	$3C(a0),a1
00016A70 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A76 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A7C 4A41                       		tst.w	d1
00016A7E 6600                       		bne.s	loc_16474
00016A80 117C 0001 001C             		move.b	#1,$1C(a0)
00016A86                            
00016A86                            loc_16474:
00016A86 0C41 0008                  		cmpi.w	#8,d1
00016A8A 6600                       		bne.s	loc_16480
00016A8C 117C 0000 001C             		move.b	#0,$1C(a0)
00016A92                            
00016A92                            loc_16480:
00016A92 6100 C026                  		bsr.w	Obj63_ChangeDir
00016A96                            
00016A96                            loc_16484:
00016A96 4EF9 0000 DB54             		jmp	SpeedToPos
00016A9C                            ; ===========================================================================
00016A9C                            Ani_obj6F:
00016A9C                            	include "_anim\obj6F.asm"
00016A9C                            ; ---------------------------------------------------------------------------
00016A9C                            ; Animation script - platform on conveyor belt (SBZ)
00016A9C                            ; ---------------------------------------------------------------------------
00016A9C 0000                       		dc.w byte_1648E-Ani_obj6F
00016A9E 0000                       		dc.w byte_164A2-Ani_obj6F
00016AA0 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016AAD 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016AB4 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016AB8 00                         		even
00016AB8 00                         		even
00016AB8                            
00016AB8 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016ABE 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016AC4 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016AD8 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016AEC 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016B00 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016B14 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016B28 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B3C                            ; ===========================================================================
00016B3C                            ; ---------------------------------------------------------------------------
00016B3C                            ; Object 70 - large girder block (SBZ)
00016B3C                            ; ---------------------------------------------------------------------------
00016B3C                            
00016B3C                            Obj70:					; XREF: Obj_Index
00016B3C 7000                       		moveq	#0,d0
00016B3E 1028 0024                  		move.b	$24(a0),d0
00016B42 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B46 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B4A                            ; ===========================================================================
00016B4A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B4C 0000                       		dc.w Obj70_Action-Obj70_Index
00016B4E                            ; ===========================================================================
00016B4E                            
00016B4E                            Obj70_Main:				; XREF: Obj70_Index
00016B4E 5428 0024                  		addq.b	#2,$24(a0)
00016B52 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B5A 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B60 0028 0004 0001             		ori.b	#4,1(a0)
00016B66 117C 0004 0018             		move.b	#4,$18(a0)
00016B6C 117C 0060 0019             		move.b	#$60,$19(a0)
00016B72 117C 0018 0016             		move.b	#$18,$16(a0)
00016B78 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B7E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B84 6100 0000                  		bsr.w	Obj70_Move2
00016B88                            
00016B88                            Obj70_Action:				; XREF: Obj70_Index
00016B88 3F28 0008                  		move.w	8(a0),-(sp)
00016B8C 4A68 003A                  		tst.w	$3A(a0)
00016B90 6700                       		beq.s	Obj70_Move
00016B92 5368 003A                  		subq.w	#1,$3A(a0)
00016B96 6600                       		bne.s	Obj70_Solid
00016B98                            
00016B98                            Obj70_Move:
00016B98 4EB9 0000 DB54             		jsr	SpeedToPos
00016B9E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016BA2 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016BA4 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016BA8                            
00016BA8                            Obj70_Solid:
00016BA8 381F                       		move.w	(sp)+,d4
00016BAA 4A28 0001                  		tst.b	1(a0)
00016BAE 6A00                       		bpl.s	Obj70_ChkDel
00016BB0 7200                       		moveq	#0,d1
00016BB2 1228 0019                  		move.b	$19(a0),d1
00016BB6 0641 000B                  		addi.w	#$B,d1
00016BBA 7400                       		moveq	#0,d2
00016BBC 1428 0016                  		move.b	$16(a0),d2
00016BC0 3602                       		move.w	d2,d3
00016BC2 5243                       		addq.w	#1,d3
00016BC4 6100 9384                  		bsr.w	SolidObject
00016BC8                            
00016BC8                            Obj70_ChkDel:
00016BC8 3028 0032                  		move.w	$32(a0),d0
00016BCC 0240 FF80                  		andi.w	#$FF80,d0
00016BD0 3238 F700                  		move.w	($FFFFF700).w,d1
00016BD4 0441 0080                  		subi.w	#$80,d1
00016BD8 0241 FF80                  		andi.w	#$FF80,d1
00016BDC 9041                       		sub.w	d1,d0
00016BDE 0C40 0280                  		cmpi.w	#$280,d0
00016BE2 6200                       		bhi.s	Obj70_Delete
00016BE4 4EF9 0000 DB7A             		jmp	DisplaySprite
00016BEA                            ; ===========================================================================
00016BEA                            
00016BEA                            Obj70_Delete:
00016BEA 4EF9 0000 DBB6             		jmp	DeleteObject
00016BF0                            ; ===========================================================================
00016BF0                            
00016BF0                            Obj70_Move2:				; XREF: Obj70_Main
00016BF0 1028 0038                  		move.b	$38(a0),d0
00016BF4 0240 0018                  		andi.w	#$18,d0
00016BF8 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BFE 43F1 0000                  		lea	(a1,d0.w),a1
00016C02 3159 0010                  		move.w	(a1)+,$10(a0)
00016C06 3159 0012                  		move.w	(a1)+,$12(a0)
00016C0A 3159 0034                  		move.w	(a1)+,$34(a0)
00016C0E 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016C12 317C 0007 003A             		move.w	#7,$3A(a0)
00016C18 4E75                       		rts	
00016C1A                            ; ===========================================================================
00016C1A 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016C22 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016C2A FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016C32 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A                            ; Sprite mappings - large girder block (SBZ)
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A                            Map_obj70:
00016C3A                            	include "_maps\obj70.asm"
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A                            ; Sprite mappings - large girder block (SBZ)
00016C3A                            ; ---------------------------------------------------------------------------
00016C3A 0000                       		dc.w byte_1662A-Map_obj70
00016C3C 0C                         byte_1662A:	dc.b $C
00016C3D E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C42 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C47 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C4C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C51 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C56 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C5B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C60 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C65 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C6A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C6F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C74 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C7A 00                         		even
00016C7A 00                         		even
00016C7A                            
00016C7A                            ; ===========================================================================
00016C7A                            ; ---------------------------------------------------------------------------
00016C7A                            ; Object 72 - teleporter (SBZ)
00016C7A                            ; ---------------------------------------------------------------------------
00016C7A                            
00016C7A                            Obj72:					; XREF: Obj_Index
00016C7A 7000                       		moveq	#0,d0
00016C7C 1028 0024                  		move.b	$24(a0),d0
00016C80 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C84 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C88 3028 0008                  		move.w	8(a0),d0
00016C8C 0240 FF80                  		andi.w	#$FF80,d0
00016C90 3238 F700                  		move.w	($FFFFF700).w,d1
00016C94 0441 0080                  		subi.w	#$80,d1
00016C98 0241 FF80                  		andi.w	#$FF80,d1
00016C9C 9041                       		sub.w	d1,d0
00016C9E 0C40 0280                  		cmpi.w	#$280,d0
00016CA2 6200                       		bhi.s	Obj72_Delete
00016CA4 4E75                       		rts	
00016CA6                            ; ===========================================================================
00016CA6                            
00016CA6                            Obj72_Delete:
00016CA6 4EF9 0000 DBB6             		jmp	DeleteObject
00016CAC                            ; ===========================================================================
00016CAC 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016CAE 0000                       		dc.w loc_166C8-Obj72_Index
00016CB0 0000                       		dc.w loc_1675E-Obj72_Index
00016CB2 0000                       		dc.w loc_16798-Obj72_Index
00016CB4                            ; ===========================================================================
00016CB4                            
00016CB4                            Obj72_Main:				; XREF: Obj72_Index
00016CB4 5428 0024                  		addq.b	#2,$24(a0)
00016CB8 1028 0028                  		move.b	$28(a0),d0
00016CBC D040                       		add.w	d0,d0
00016CBE 0240 001E                  		andi.w	#$1E,d0
00016CC2 45FA 0000                  		lea	Obj72_Data(pc),a2
00016CC6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CCA 315A 003A                  		move.w	(a2)+,$3A(a0)
00016CCE 214A 003C                  		move.l	a2,$3C(a0)
00016CD2 315A 0036                  		move.w	(a2)+,$36(a0)
00016CD6 315A 0038                  		move.w	(a2)+,$38(a0)
00016CDA                            
00016CDA                            loc_166C8:				; XREF: Obj72_Index
00016CDA 43F8 D000                  		lea	($FFFFD000).w,a1
00016CDE 3029 0008                  		move.w	8(a1),d0
00016CE2 9068 0008                  		sub.w	8(a0),d0
00016CE6 0828 0000 0022             		btst	#0,$22(a0)
00016CEC 6700                       		beq.s	loc_166E0
00016CEE 0640 000F                  		addi.w	#$F,d0
00016CF2                            
00016CF2                            loc_166E0:
00016CF2 0C40 0010                  		cmpi.w	#$10,d0
00016CF6 6400                       		bcc.s	locret_1675C
00016CF8 3229 000C                  		move.w	$C(a1),d1
00016CFC 9268 000C                  		sub.w	$C(a0),d1
00016D00 0641 0020                  		addi.w	#$20,d1
00016D04 0C41 0040                  		cmpi.w	#$40,d1
00016D08 6400                       		bcc.s	locret_1675C
00016D0A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016D0E 6600                       		bne.s	locret_1675C
00016D10 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016D16 6600                       		bne.s	loc_1670E
00016D18 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016D1E 6500                       		bcs.s	locret_1675C
00016D20                            
00016D20                            loc_1670E:
00016D20 5428 0024                  		addq.b	#2,$24(a0)
00016D24 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016D2A 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016D30 337C 0800 0014             		move.w	#$800,$14(a1)
00016D36 337C 0000 0010             		move.w	#0,$10(a1)
00016D3C 337C 0000 0012             		move.w	#0,$12(a1)
00016D42 08A8 0005 0022             		bclr	#5,$22(a0)
00016D48 08A9 0005 0022             		bclr	#5,$22(a1)
00016D4E 08E9 0001 0022             		bset	#1,$22(a1)
00016D54 3368 0008 0008             		move.w	8(a0),8(a1)
00016D5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D60 4228 0032                  		clr.b	$32(a0)
00016D64 303C 00BE                  		move.w	#$BE,d0
00016D68 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D6E                            
00016D6E                            locret_1675C:
00016D6E 4E75                       		rts	
00016D70                            ; ===========================================================================
00016D70                            
00016D70                            loc_1675E:				; XREF: Obj72_Index
00016D70 43F8 D000                  		lea	($FFFFD000).w,a1
00016D74 1028 0032                  		move.b	$32(a0),d0
00016D78 5428 0032                  		addq.b	#2,$32(a0)
00016D7C 4EB9 0000 2C22             		jsr	(CalcSine).l
00016D82 EA40                       		asr.w	#5,d0
00016D84 3428 000C                  		move.w	$C(a0),d2
00016D88 9440                       		sub.w	d0,d2
00016D8A 3342 000C                  		move.w	d2,$C(a1)
00016D8E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D94 6600                       		bne.s	locret_16796
00016D96 6100 0000                  		bsr.w	sub_1681C
00016D9A 5428 0024                  		addq.b	#2,$24(a0)
00016D9E 303C 00BC                  		move.w	#$BC,d0
00016DA2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016DA8                            
00016DA8                            locret_16796:
00016DA8 4E75                       		rts	
00016DAA                            ; ===========================================================================
00016DAA                            
00016DAA                            loc_16798:				; XREF: Obj72_Index
00016DAA 588F                       		addq.l	#4,sp
00016DAC 43F8 D000                  		lea	($FFFFD000).w,a1
00016DB0 5328 002E                  		subq.b	#1,$2E(a0)
00016DB4 6A00                       		bpl.s	loc_167DA
00016DB6 3368 0036 0008             		move.w	$36(a0),8(a1)
00016DBC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016DC2 7200                       		moveq	#0,d1
00016DC4 1228 003A                  		move.b	$3A(a0),d1
00016DC8 5801                       		addq.b	#4,d1
00016DCA B228 003B                  		cmp.b	$3B(a0),d1
00016DCE 6500                       		bcs.s	loc_167C2
00016DD0 7200                       		moveq	#0,d1
00016DD2 6000                       		bra.s	loc_16800
00016DD4                            ; ===========================================================================
00016DD4                            
00016DD4                            loc_167C2:
00016DD4 1141 003A                  		move.b	d1,$3A(a0)
00016DD8 2468 003C                  		movea.l	$3C(a0),a2
00016DDC 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DE2 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DE8 6000 0000                  		bra.w	sub_1681C
00016DEC                            ; ===========================================================================
00016DEC                            
00016DEC                            loc_167DA:
00016DEC 2429 0008                  		move.l	8(a1),d2
00016DF0 2629 000C                  		move.l	$C(a1),d3
00016DF4 3029 0010                  		move.w	$10(a1),d0
00016DF8 48C0                       		ext.l	d0
00016DFA E180                       		asl.l	#8,d0
00016DFC D480                       		add.l	d0,d2
00016DFE 3029 0012                  		move.w	$12(a1),d0
00016E02 48C0                       		ext.l	d0
00016E04 E180                       		asl.l	#8,d0
00016E06 D680                       		add.l	d0,d3
00016E08 2342 0008                  		move.l	d2,8(a1)
00016E0C 2343 000C                  		move.l	d3,$C(a1)
00016E10 4E75                       		rts	
00016E12                            ; ===========================================================================
00016E12                            
00016E12                            loc_16800:
00016E12 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016E18 4228 0024                  		clr.b	$24(a0)
00016E1C 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016E20 337C 0000 0010             		move.w	#0,$10(a1)
00016E26 337C 0200 0012             		move.w	#$200,$12(a1)
00016E2C 4E75                       		rts	
00016E2E                            
00016E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E2E                            
00016E2E                            
00016E2E                            sub_1681C:
00016E2E 7000                       		moveq	#0,d0
00016E30 343C 1000                  		move.w	#$1000,d2
00016E34 3028 0036                  		move.w	$36(a0),d0
00016E38 9069 0008                  		sub.w	8(a1),d0
00016E3C 6C00                       		bge.s	loc_16830
00016E3E 4440                       		neg.w	d0
00016E40 4442                       		neg.w	d2
00016E42                            
00016E42                            loc_16830:
00016E42 7200                       		moveq	#0,d1
00016E44 363C 1000                  		move.w	#$1000,d3
00016E48 3228 0038                  		move.w	$38(a0),d1
00016E4C 9269 000C                  		sub.w	$C(a1),d1
00016E50 6C00                       		bge.s	loc_16844
00016E52 4441                       		neg.w	d1
00016E54 4443                       		neg.w	d3
00016E56                            
00016E56                            loc_16844:
00016E56 B240                       		cmp.w	d0,d1
00016E58 6500                       		bcs.s	loc_1687A
00016E5A 7200                       		moveq	#0,d1
00016E5C 3228 0038                  		move.w	$38(a0),d1
00016E60 9269 000C                  		sub.w	$C(a1),d1
00016E64 4841                       		swap	d1
00016E66 83C3                       		divs.w	d3,d1
00016E68 7000                       		moveq	#0,d0
00016E6A 3028 0036                  		move.w	$36(a0),d0
00016E6E 9069 0008                  		sub.w	8(a1),d0
00016E72 6700                       		beq.s	loc_16866
00016E74 4840                       		swap	d0
00016E76 81C1                       		divs.w	d1,d0
00016E78                            
00016E78                            loc_16866:
00016E78 3340 0010                  		move.w	d0,$10(a1)
00016E7C 3343 0012                  		move.w	d3,$12(a1)
00016E80 4A41                       		tst.w	d1
00016E82 6A00                       		bpl.s	loc_16874
00016E84 4441                       		neg.w	d1
00016E86                            
00016E86                            loc_16874:
00016E86 3141 002E                  		move.w	d1,$2E(a0)
00016E8A 4E75                       		rts	
00016E8C                            ; ===========================================================================
00016E8C                            
00016E8C                            loc_1687A:
00016E8C 7000                       		moveq	#0,d0
00016E8E 3028 0036                  		move.w	$36(a0),d0
00016E92 9069 0008                  		sub.w	8(a1),d0
00016E96 4840                       		swap	d0
00016E98 81C2                       		divs.w	d2,d0
00016E9A 7200                       		moveq	#0,d1
00016E9C 3228 0038                  		move.w	$38(a0),d1
00016EA0 9269 000C                  		sub.w	$C(a1),d1
00016EA4 6700                       		beq.s	loc_16898
00016EA6 4841                       		swap	d1
00016EA8 83C0                       		divs.w	d0,d1
00016EAA                            
00016EAA                            loc_16898:
00016EAA 3341 0012                  		move.w	d1,$12(a1)
00016EAE 3342 0010                  		move.w	d2,$10(a1)
00016EB2 4A40                       		tst.w	d0
00016EB4 6A00                       		bpl.s	loc_168A6
00016EB6 4440                       		neg.w	d0
00016EB8                            
00016EB8                            loc_168A6:
00016EB8 3140 002E                  		move.w	d0,$2E(a0)
00016EBC 4E75                       		rts	
00016EBE                            ; End of function sub_1681C
00016EBE                            
00016EBE                            ; ===========================================================================
00016EBE 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016EC4 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016ECA 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016ECE 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016ED4 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016EDA 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016EE0 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016EE6 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016EEC 0884 0298 0894             		dc.w $884, $298, $894
00016EF2 0270 0894 0190             		dc.w $270, $894, $190
00016EF8 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EFE 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016F04 1184 0498 1158             		dc.w $1184, $498, $1158
00016F0A 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016F10 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016F16 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016F1C 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016F22 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016F28 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016F2E FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016F34 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F3A FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F40 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F46                            ; ===========================================================================
00016F46                            ; ---------------------------------------------------------------------------
00016F46                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F46                            ; ---------------------------------------------------------------------------
00016F46                            
00016F46                            Obj78:					; XREF: Obj_Index
00016F46 7000                       		moveq	#0,d0
00016F48 1028 0024                  		move.b	$24(a0),d0
00016F4C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F50 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F54                            ; ===========================================================================
00016F54 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F56 0000                       		dc.w Obj78_Action-Obj78_Index
00016F58 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F5A 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F5C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F5E 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F60 0000                       		dc.w loc_16CC0-Obj78_Index
00016F62                            ; ===========================================================================
00016F62                            
00016F62                            locret_16950:
00016F62 4E75                       		rts	
00016F64                            ; ===========================================================================
00016F64                            
00016F64                            Obj78_Main:				; XREF: Obj78_Index
00016F64 117C 0007 0016             		move.b	#7,$16(a0)
00016F6A 117C 0008 0017             		move.b	#8,$17(a0)
00016F70 4EB9 0000 DB28             		jsr	ObjectFall
00016F76 4EBA E4A6                  		jsr	ObjHitFloor
00016F7A 4A41                       		tst.w	d1
00016F7C 6AE4                       		bpl.s	locret_16950
00016F7E D368 000C                  		add.w	d1,$C(a0)
00016F82 4268 0012                  		clr.w	$12(a0)
00016F86 5428 0024                  		addq.b	#2,$24(a0)
00016F8A 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F92 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F98 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F9E 6700                       		beq.s	loc_16996
00016FA0 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016FA6                            
00016FA6                            loc_16996:
00016FA6 0228 0003 0001             		andi.b	#3,1(a0)
00016FAC 0028 0004 0001             		ori.b	#4,1(a0)
00016FB2 1168 0001 0022             		move.b	1(a0),$22(a0)
00016FB8 117C 0004 0018             		move.b	#4,$18(a0)
00016FBE 117C 0008 0019             		move.b	#8,$19(a0)
00016FC4 117C 000B 0020             		move.b	#$B,$20(a0)
00016FCA 3428 0008                  		move.w	8(a0),d2
00016FCE 7A0C                       		moveq	#$C,d5
00016FD0 0828 0000 0022             		btst	#0,$22(a0)
00016FD6 6700                       		beq.s	loc_169CA
00016FD8 4445                       		neg.w	d5
00016FDA                            
00016FDA                            loc_169CA:
00016FDA 1C3C 0004                  		move.b	#4,d6
00016FDE 7600                       		moveq	#0,d3
00016FE0 7804                       		moveq	#4,d4
00016FE2 2448                       		movea.l	a0,a2
00016FE4 7202                       		moveq	#2,d1
00016FE6                            
00016FE6                            Obj78_LoadBody:
00016FE6 4EB9 0000 E016             		jsr	SingleObjLoad2
00016FEC 6600                       		bne.s	Obj78_QuitLoad
00016FEE 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FF2 1346 0024                  		move.b	d6,$24(a1)
00016FF6 5406                       		addq.b	#2,d6
00016FF8 2368 0004 0004             		move.l	4(a0),4(a1)
00016FFE 3368 0002 0002             		move.w	2(a0),2(a1)
00017004 137C 0005 0018             		move.b	#5,$18(a1)
0001700A 137C 0008 0019             		move.b	#8,$19(a1)
00017010 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017016 D445                       		add.w	d5,d2
00017018 3342 0008                  		move.w	d2,8(a1)
0001701C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017022 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017028 1368 0022 0001             		move.b	$22(a0),1(a1)
0001702E 137C 0008 001A             		move.b	#8,$1A(a1)
00017034 234A 003C                  		move.l	a2,$3C(a1)
00017038 1344 003C                  		move.b	d4,$3C(a1)
0001703C 5804                       		addq.b	#4,d4
0001703E 2449                       		movea.l	a1,a2
00017040                            
00017040                            Obj78_QuitLoad:
00017040 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017044                            
00017044 117C 0007 002A             		move.b	#7,$2A(a0)
0001704A 4228 003C                  		clr.b	$3C(a0)
0001704E                            
0001704E                            Obj78_Action:				; XREF: Obj78_Index
0001704E 4A28 0022                  		tst.b	$22(a0)
00017052 6B00 0000                  		bmi.w	loc_16C96
00017056 7000                       		moveq	#0,d0
00017058 1028 0025                  		move.b	$25(a0),d0
0001705C 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017060 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017064 1228 002B                  		move.b	$2B(a0),d1
00017068 6A00                       		bpl.s	Obj78_Display
0001706A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017070 1028 0026                  		move.b	$26(a0),d0
00017074 0240 007F                  		andi.w	#$7F,d0
00017078 5828 0026                  		addq.b	#4,$26(a0)
0001707C 1031 0000                  		move.b	(a1,d0.w),d0
00017080 6A00                       		bpl.s	Obj78_AniHead
00017082 08A8 0007 002B             		bclr	#7,$2B(a0)
00017088 6000                       		bra.s	Obj78_Display
0001708A                            ; ===========================================================================
0001708A                            
0001708A                            Obj78_AniHead:
0001708A 0201 0010                  		andi.b	#$10,d1
0001708E D001                       		add.b	d1,d0
00017090 1140 001A                  		move.b	d0,$1A(a0)
00017094                            
00017094                            Obj78_Display:
00017094 3028 0008                  		move.w	8(a0),d0
00017098 0240 FF80                  		andi.w	#$FF80,d0
0001709C 3238 F700                  		move.w	($FFFFF700).w,d1
000170A0 0441 0080                  		subi.w	#$80,d1
000170A4 0241 FF80                  		andi.w	#$FF80,d1
000170A8 9041                       		sub.w	d1,d0
000170AA 0C40 0280                  		cmpi.w	#$280,d0
000170AE 6200 0000                  		bhi.w	Obj78_ChkGone
000170B2 4EF9 0000 DB7A             		jmp	DisplaySprite
000170B8                            ; ===========================================================================
000170B8                            
000170B8                            Obj78_ChkGone:
000170B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170BC 7000                       		moveq	#0,d0
000170BE 1028 0023                  		move.b	$23(a0),d0
000170C2 6700                       		beq.s	loc_16ABC
000170C4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000170CA                            
000170CA                            loc_16ABC:
000170CA 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000170D0 4E75                       		rts	
000170D2                            ; ===========================================================================
000170D2                            
000170D2                            Obj78_Delete:				; XREF: Obj78_Index
000170D2 4EF9 0000 DBB6             		jmp	DeleteObject
000170D8                            ; ===========================================================================
000170D8 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000170DA 0000                       		dc.w loc_16B02-Obj78_Index2
000170DC                            ; ===========================================================================
000170DC                            
000170DC                            Obj78_Move:				; XREF: Obj78_Index2
000170DC 5328 002A                  		subq.b	#1,$2A(a0)
000170E0 6B00                       		bmi.s	Obj78_Move2
000170E2 4E75                       		rts	
000170E4                            ; ===========================================================================
000170E4                            
000170E4                            Obj78_Move2:
000170E4 5428 0025                  		addq.b	#2,$25(a0)
000170E8 117C 0010 002A             		move.b	#$10,$2A(a0)
000170EE 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170F4 317C 0040 0014             		move.w	#$40,$14(a0)
000170FA 0868 0004 002B             		bchg	#4,$2B(a0)
00017100 6600                       		bne.s	loc_16AFC
00017102 4268 0010                  		clr.w	$10(a0)
00017106 4468 0014                  		neg.w	$14(a0)
0001710A                            
0001710A                            loc_16AFC:
0001710A 08E8 0007 002B             		bset	#7,$2B(a0)
00017110                            
00017110                            loc_16B02:				; XREF: Obj78_Index2
00017110 5328 002A                  		subq.b	#1,$2A(a0)
00017114 6B00                       		bmi.s	loc_16B5E
00017116 2F28 0008                  		move.l	8(a0),-(sp)
0001711A 2428 0008                  		move.l	8(a0),d2
0001711E 3028 0010                  		move.w	$10(a0),d0
00017122 0828 0000 0022             		btst	#0,$22(a0)
00017128 6700                       		beq.s	loc_16B1E
0001712A 4440                       		neg.w	d0
0001712C                            
0001712C                            loc_16B1E:
0001712C 48C0                       		ext.l	d0
0001712E E180                       		asl.l	#8,d0
00017130 D480                       		add.l	d0,d2
00017132 2142 0008                  		move.l	d2,8(a0)
00017136 4EBA E2E6                  		jsr	ObjHitFloor
0001713A 241F                       		move.l	(sp)+,d2
0001713C 0C41 FFF8                  		cmpi.w	#-8,d1
00017140 6D00                       		blt.s	loc_16B70
00017142 0C41 000C                  		cmpi.w	#$C,d1
00017146 6C00                       		bge.s	loc_16B70
00017148 D368 000C                  		add.w	d1,$C(a0)
0001714C 4842                       		swap	d2
0001714E B468 0008                  		cmp.w	8(a0),d2
00017152 6700                       		beq.s	locret_16B5C
00017154 7000                       		moveq	#0,d0
00017156 1028 003C                  		move.b	$3C(a0),d0
0001715A 5228 003C                  		addq.b	#1,$3C(a0)
0001715E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017164 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017168                            
00017168                            locret_16B5C:
00017168 4E75                       		rts	
0001716A                            ; ===========================================================================
0001716A                            
0001716A                            loc_16B5E:
0001716A 5528 0025                  		subq.b	#2,$25(a0)
0001716E 117C 0007 002A             		move.b	#7,$2A(a0)
00017174 317C 0000 0010             		move.w	#0,$10(a0)
0001717A 4E75                       		rts	
0001717C                            ; ===========================================================================
0001717C                            
0001717C                            loc_16B70:
0001717C 2142 0008                  		move.l	d2,8(a0)
00017180 0868 0000 0022             		bchg	#0,$22(a0)
00017186 1168 0022 0001             		move.b	$22(a0),1(a0)
0001718C 7000                       		moveq	#0,d0
0001718E 1028 003C                  		move.b	$3C(a0),d0
00017192 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017198 5228 003C                  		addq.b	#1,$3C(a0)
0001719C 0228 000F 003C             		andi.b	#$F,$3C(a0)
000171A2 4E75                       		rts	
000171A4                            ; ===========================================================================
000171A4                            
000171A4                            Obj78_BodySeg2:				; XREF: Obj78_Index
000171A4 2268 003C                  		movea.l	$3C(a0),a1
000171A8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171AE 6A00                       		bpl.s	Obj78_BodySeg1
000171B0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000171B6 1028 0026                  		move.b	$26(a0),d0
000171BA 0240 007F                  		andi.w	#$7F,d0
000171BE 5828 0026                  		addq.b	#4,$26(a0)
000171C2 4A31 0004                  		tst.b	4(a1,d0.w)
000171C6 6A00                       		bpl.s	Obj78_AniBody
000171C8 5828 0026                  		addq.b	#4,$26(a0)
000171CC                            
000171CC                            Obj78_AniBody:
000171CC 1031 0000                  		move.b	(a1,d0.w),d0
000171D0 5000                       		addq.b	#8,d0
000171D2 1140 001A                  		move.b	d0,$1A(a0)
000171D6                            
000171D6                            Obj78_BodySeg1:				; XREF: Obj78_Index
000171D6 2268 003C                  		movea.l	$3C(a0),a1
000171DA 4A28 0022                  		tst.b	$22(a0)
000171DE 6B00 0000                  		bmi.w	loc_16C90
000171E2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171E8 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171EE 6700 0000                  		beq.w	loc_16C64
000171F2 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171F8 3029 0010                  		move.w	$10(a1),d0
000171FC D069 0014                  		add.w	$14(a1),d0
00017200 3140 0010                  		move.w	d0,$10(a0)
00017204 2428 0008                  		move.l	8(a0),d2
00017208 2602                       		move.l	d2,d3
0001720A 3028 0010                  		move.w	$10(a0),d0
0001720E 0828 0000 0022             		btst	#0,$22(a0)
00017214 6700                       		beq.s	loc_16C0C
00017216 4440                       		neg.w	d0
00017218                            
00017218                            loc_16C0C:
00017218 48C0                       		ext.l	d0
0001721A E180                       		asl.l	#8,d0
0001721C D480                       		add.l	d0,d2
0001721E 2142 0008                  		move.l	d2,8(a0)
00017222 4843                       		swap	d3
00017224 B668 0008                  		cmp.w	8(a0),d3
00017228 6700                       		beq.s	loc_16C64
0001722A 7000                       		moveq	#0,d0
0001722C 1028 003C                  		move.b	$3C(a0),d0
00017230 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017234 0C01 0080                  		cmpi.b	#-$80,d1
00017238 6600                       		bne.s	loc_16C50
0001723A 4843                       		swap	d3
0001723C 2143 0008                  		move.l	d3,8(a0)
00017240 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017244 0868 0000 0022             		bchg	#0,$22(a0)
0001724A 1168 0022 0001             		move.b	$22(a0),1(a0)
00017250 5228 003C                  		addq.b	#1,$3C(a0)
00017254 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001725A 6000                       		bra.s	loc_16C64
0001725C                            ; ===========================================================================
0001725C                            
0001725C                            loc_16C50:
0001725C 4881                       		ext.w	d1
0001725E D368 000C                  		add.w	d1,$C(a0)
00017262 5228 003C                  		addq.b	#1,$3C(a0)
00017266 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001726C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017270                            
00017270                            loc_16C64:
00017270 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017276 6700                       		beq.s	loc_16C90
00017278 0C11 0027                  		cmpi.b	#$27,0(a1)
0001727C 6700                       		beq.s	loc_16C7C
0001727E 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017284 6600                       		bne.s	loc_16C82
00017286                            
00017286                            loc_16C7C:
00017286 117C 000A 0024             		move.b	#$A,$24(a0)
0001728C                            
0001728C                            loc_16C82:
0001728C 4EF9 0000 DB7A             		jmp	DisplaySprite
00017292                            
00017292                            ; ===========================================================================
00017292 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001729A                            ; ===========================================================================
0001729A                            
0001729A                            loc_16C90:
0001729A 08E9 0007 0022             		bset	#7,$22(a1)
000172A0                            
000172A0                            loc_16C96:
000172A0 7000                       		moveq	#0,d0
000172A2 1028 0024                  		move.b	$24(a0),d0
000172A6 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000172AA 0828 0000 0022             		btst	#0,$22(a0)
000172B0 6700                       		beq.s	loc_16CAA
000172B2 4440                       		neg.w	d0
000172B4                            
000172B4                            loc_16CAA:
000172B4 3140 0010                  		move.w	d0,$10(a0)
000172B8 317C FC00 0012             		move.w	#-$400,$12(a0)
000172BE 117C 000C 0024             		move.b	#$C,$24(a0)
000172C4 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000172CA                            
000172CA                            loc_16CC0:				; XREF: Obj78_Index
000172CA 4EB9 0000 DB28             		jsr	ObjectFall
000172D0 4A68 0012                  		tst.w	$12(a0)
000172D4 6B00                       		bmi.s	loc_16CE0
000172D6 4EBA E146                  		jsr	ObjHitFloor
000172DA 4A41                       		tst.w	d1
000172DC 6A00                       		bpl.s	loc_16CE0
000172DE D368 000C                  		add.w	d1,$C(a0)
000172E2 317C FC00 0012             		move.w	#-$400,$12(a0)
000172E8                            
000172E8                            loc_16CE0:
000172E8 4A28 0001                  		tst.b	1(a0)
000172EC 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172F0 4EF9 0000 DB7A             		jmp	DisplaySprite
000172F6                            ; ===========================================================================
000172F6                            Ani_obj78:
000172F6                            	include "_anim\obj78.asm"
000172F6                            ; ---------------------------------------------------------------------------
000172F6                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172F6                            ; ---------------------------------------------------------------------------
000172F6 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017306 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017316 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017326 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017336 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017346 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017356 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017366 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017376                            	even
00017376                            	even
00017376                            
00017376                            ; ---------------------------------------------------------------------------
00017376                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017376                            ; ---------------------------------------------------------------------------
00017376                            Map_obj78:
00017376                            	include "_maps\obj78.asm"
00017376                            ; ---------------------------------------------------------------------------
00017376                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017376                            ; ---------------------------------------------------------------------------
00017376 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001737A 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001737E 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017382 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017386 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001738A 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001738E 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017392 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017396 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001739A 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001739E 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000173A2 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000173A6 01                         byte_16D9E:	dc.b 1
000173A7 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000173AC 01                         byte_16DA4:	dc.b 1
000173AD F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000173B2 01                         byte_16DAA:	dc.b 1
000173B3 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000173B8 01                         byte_16DB0:	dc.b 1
000173B9 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000173BE 01                         byte_16DB6:	dc.b 1
000173BF EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000173C4 01                         byte_16DBC:	dc.b 1
000173C5 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000173CA 01                         byte_16DC2:	dc.b 1
000173CB EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000173D0 01                         byte_16DC8:	dc.b 1
000173D1 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000173D6 01                         byte_16DCE:	dc.b 1
000173D7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000173DC 01                         byte_16DD4:	dc.b 1
000173DD F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173E2 01                         byte_16DDA:	dc.b 1
000173E3 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173E8 01                         byte_16DE0:	dc.b 1
000173E9 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173EE 01                         byte_16DE6:	dc.b 1
000173EF F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173F4 01                         byte_16DEC:	dc.b 1
000173F5 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173FA 01                         byte_16DF2:	dc.b 1
000173FB F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017400 01                         byte_16DF8:	dc.b 1
00017401 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017406 01                         byte_16DFE:	dc.b 1
00017407 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001740C 01                         byte_16E04:	dc.b 1
0001740D F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017412 01                         byte_16E0A:	dc.b 1
00017413 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017418 01                         byte_16E10:	dc.b 1
00017419 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001741E 01                         byte_16E16:	dc.b 1
0001741F EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017424 01                         byte_16E1C:	dc.b 1
00017425 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001742A 01                         byte_16E22:	dc.b 1
0001742B EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017430 01                         byte_16E28:	dc.b 1
00017431 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017436                            		even
00017436                            		even
00017436                            
00017436                            ; ===========================================================================
00017436                            ; ---------------------------------------------------------------------------
00017436                            ; Object 79 - lamppost
00017436                            ; ---------------------------------------------------------------------------
00017436                            
00017436                            Obj79:					; XREF: Obj_Index
00017436 7000                       		moveq	#0,d0
00017438 1028 0024                  		move.b	$24(a0),d0
0001743C 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017440 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017444 4EFA 87DC                  		jmp	MarkObjGone
00017448                            ; ===========================================================================
00017448 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001744A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001744C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001744E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017450                            ; ===========================================================================
00017450                            
00017450                            Obj79_Main:				; XREF: Obj79_Index
00017450 5428 0024                  		addq.b	#2,$24(a0)
00017454 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001745C 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017462 117C 0004 0001             		move.b	#4,1(a0)
00017468 117C 0008 0019             		move.b	#8,$19(a0)
0001746E 117C 0005 0018             		move.b	#5,$18(a0)
00017474 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017478 7000                       		moveq	#0,d0
0001747A 1028 0023                  		move.b	$23(a0),d0
0001747E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017484 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001748A 6600                       		bne.s	Obj79_RedLamp
0001748C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017490 0201 007F                  		andi.b	#$7F,d1
00017494 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017498 0202 007F                  		andi.b	#$7F,d2
0001749C B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001749E 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000174A0                            
000174A0                            Obj79_RedLamp:
000174A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174A6 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000174AC 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000174B2 4E75                       		rts	
000174B4                            ; ===========================================================================
000174B4                            
000174B4                            Obj79_BlueLamp:				; XREF: Obj79_Index
000174B4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000174B8 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000174BC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000174C0 6B00 0000                  		bmi.w	locret_16F90
000174C4 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174C8 0201 007F                  		andi.b	#$7F,d1
000174CC 1428 0028                  		move.b	$28(a0),d2
000174D0 0202 007F                  		andi.b	#$7F,d2
000174D4 B202                       		cmp.b	d2,d1
000174D6 6500                       		bcs.s	Obj79_HitLamp
000174D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174DC 7000                       		moveq	#0,d0
000174DE 1028 0023                  		move.b	$23(a0),d0
000174E2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174E8 117C 0004 0024             		move.b	#4,$24(a0)
000174EE 117C 0003 001A             		move.b	#3,$1A(a0)
000174F4 6000 0000                  		bra.w	locret_16F90
000174F8                            ; ===========================================================================
000174F8                            
000174F8                            Obj79_HitLamp:
000174F8 3038 D008                  		move.w	($FFFFD008).w,d0
000174FC 9068 0008                  		sub.w	8(a0),d0
00017500 5040                       		addq.w	#8,d0
00017502 0C40 0010                  		cmpi.w	#$10,d0
00017506 6400 0000                  		bcc.w	locret_16F90
0001750A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001750E 9068 000C                  		sub.w	$C(a0),d0
00017512 0640 0040                  		addi.w	#$40,d0
00017516 0C40 0068                  		cmpi.w	#$68,d0
0001751A 6400                       		bcc.s	locret_16F90
0001751C 303C 00A1                  		move.w	#$A1,d0
00017520 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017526 5428 0024                  		addq.b	#2,$24(a0)
0001752A 4EB9 0000 E000             		jsr	SingleObjLoad
00017530 6600                       		bne.s	loc_16F76
00017532 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017536 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001753C 3368 0008 0030             		move.w	8(a0),$30(a1)
00017542 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017548 0469 0018 0032             		subi.w	#$18,$32(a1)
0001754E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017556 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001755C 137C 0004 0001             		move.b	#4,1(a1)
00017562 137C 0008 0019             		move.b	#8,$19(a1)
00017568 137C 0004 0018             		move.b	#4,$18(a1)
0001756E 137C 0002 001A             		move.b	#2,$1A(a1)
00017574 337C 0020 0036             		move.w	#$20,$36(a1)
0001757A                            
0001757A                            loc_16F76:
0001757A 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017580 6100 0000                  		bsr.w	Obj79_StoreInfo
00017584 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017588 7000                       		moveq	#0,d0
0001758A 1028 0023                  		move.b	$23(a0),d0
0001758E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017594                            
00017594                            locret_16F90:
00017594 4E75                       		rts	
00017596                            ; ===========================================================================
00017596                            
00017596                            Obj79_AfterHit:				; XREF: Obj79_Index
00017596 4E75                       		rts	
00017598                            ; ===========================================================================
00017598                            
00017598                            Obj79_Twirl:				; XREF: Obj79_Index
00017598 5368 0036                  		subq.w	#1,$36(a0)
0001759C 6A00                       		bpl.s	loc_16FA0
0001759E 117C 0004 0024             		move.b	#4,$24(a0)
000175A4                            
000175A4                            loc_16FA0:
000175A4 1028 0026                  		move.b	$26(a0),d0
000175A8 0428 0010 0026             		subi.b	#$10,$26(a0)
000175AE 0400 0040                  		subi.b	#$40,d0
000175B2 4EB9 0000 2C22             		jsr	(CalcSine).l
000175B8 C3FC 0C00                  		muls.w	#$C00,d1
000175BC 4841                       		swap	d1
000175BE D268 0030                  		add.w	$30(a0),d1
000175C2 3141 0008                  		move.w	d1,8(a0)
000175C6 C1FC 0C00                  		muls.w	#$C00,d0
000175CA 4840                       		swap	d0
000175CC D068 0032                  		add.w	$32(a0),d0
000175D0 3140 000C                  		move.w	d0,$C(a0)
000175D4 4E75                       		rts	
000175D6                            ; ===========================================================================
000175D6                            ; ---------------------------------------------------------------------------
000175D6                            ; Subroutine to	store information when you hit a lamppost
000175D6                            ; ---------------------------------------------------------------------------
000175D6                            
000175D6                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000175D6 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000175DC 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175E2 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175E8 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175EE 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175F4 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175FA 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017600 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017606 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001760C 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017612 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017618 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001761E 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017624 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001762A 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017630 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017636 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001763C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017642 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017648 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001764E 4E75                       		rts	
00017650                            
00017650                            ; ---------------------------------------------------------------------------
00017650                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017650                            ; ---------------------------------------------------------------------------
00017650                            
00017650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017650                            
00017650                            
00017650                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017650 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017656 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001765C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017662 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017668 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001766E 4278 FE20                  		clr.w	($FFFFFE20).w
00017672 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017676 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001767C 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017682 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017686 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001768C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017692 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017698 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001769E 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000176A4 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000176AA 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000176B0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000176B6 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000176BC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000176C2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000176C8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000176CE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000176D4 6600                       		bne.s	loc_170E4
000176D6 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000176DC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176E2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176E8                            
000176E8                            loc_170E4:
000176E8 4A38 FE30                  		tst.b	($FFFFFE30).w
000176EC 6A00                       		bpl.s	locret_170F6
000176EE 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176F2 0440 00A0                  		subi.w	#$A0,d0
000176F6 31C0 F728                  		move.w	d0,($FFFFF728).w
000176FA                            
000176FA                            locret_170F6:
000176FA 4E75                       		rts	
000176FC                            ; End of function Obj79_LoadInfo
000176FC                            
000176FC                            ; ===========================================================================
000176FC                            ; ---------------------------------------------------------------------------
000176FC                            ; Sprite mappings - lamppost
000176FC                            ; ---------------------------------------------------------------------------
000176FC                            Map_obj79:
000176FC                            	include "_maps\obj79.asm"
000176FC                            ; ---------------------------------------------------------------------------
000176FC                            ; Sprite mappings - lamppost
000176FC                            ; ---------------------------------------------------------------------------
000176FC 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017700 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017704 06                         byte_17100:	dc.b 6
00017705 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001770A E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001770F F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017714 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017719 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001771E D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017723 04                         byte_1711F:	dc.b 4
00017724 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017729 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001772E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017733 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017738 02                         byte_17134:	dc.b 2
00017739 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001773E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017743 06                         byte_1713F:	dc.b 6
00017744 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017749 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001774E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017753 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017758 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001775D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017762                            		even
00017762                            		even
00017762                            
00017762                            ; ===========================================================================
00017762                            ; ---------------------------------------------------------------------------
00017762                            ; Object 7D - hidden points at the end of a level
00017762                            ; ---------------------------------------------------------------------------
00017762                            
00017762                            Obj7D:					; XREF: Obj_Index
00017762 7000                       		moveq	#0,d0
00017764 1028 0024                  		move.b	$24(a0),d0
00017768 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001776C 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017770                            ; ===========================================================================
00017770 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017772 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017774                            ; ===========================================================================
00017774                            
00017774                            Obj7D_Main:				; XREF: Obj7D_Index
00017774 7410                       		moveq	#$10,d2
00017776 3602                       		move.w	d2,d3
00017778 D643                       		add.w	d3,d3
0001777A 43F8 D000                  		lea	($FFFFD000).w,a1
0001777E 3029 0008                  		move.w	8(a1),d0
00017782 9068 0008                  		sub.w	8(a0),d0
00017786 D042                       		add.w	d2,d0
00017788 B043                       		cmp.w	d3,d0
0001778A 6400                       		bcc.s	Obj7D_ChkDel
0001778C 3229 000C                  		move.w	$C(a1),d1
00017790 9268 000C                  		sub.w	$C(a0),d1
00017794 D242                       		add.w	d2,d1
00017796 B243                       		cmp.w	d3,d1
00017798 6400                       		bcc.s	Obj7D_ChkDel
0001779A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001779E 6600                       		bne.s	Obj7D_ChkDel
000177A0 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000177A4 6600                       		bne.s	Obj7D_ChkDel
000177A6 5428 0024                  		addq.b	#2,$24(a0)
000177AA 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000177B2 317C 84B6 0002             		move.w	#$84B6,2(a0)
000177B8 0028 0004 0001             		ori.b	#4,1(a0)
000177BE 117C 0000 0018             		move.b	#0,$18(a0)
000177C4 117C 0010 0019             		move.b	#$10,$19(a0)
000177CA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000177D0 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000177D6 303C 00C9                  		move.w	#$C9,d0
000177DA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000177E0 7000                       		moveq	#0,d0
000177E2 1028 0028                  		move.b	$28(a0),d0
000177E6 D040                       		add.w	d0,d0
000177E8 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177EC 4EB9 0000 0000             		jsr	AddPoints
000177F2                            
000177F2                            Obj7D_ChkDel:
000177F2 3028 0008                  		move.w	8(a0),d0
000177F6 0240 FF80                  		andi.w	#$FF80,d0
000177FA 3238 F700                  		move.w	($FFFFF700).w,d1
000177FE 0441 0080                  		subi.w	#$80,d1
00017802 0241 FF80                  		andi.w	#$FF80,d1
00017806 9041                       		sub.w	d1,d0
00017808 0C40 0280                  		cmpi.w	#$280,d0
0001780C 6200                       		bhi.s	Obj7D_Delete
0001780E 4E75                       		rts	
00017810                            ; ===========================================================================
00017810                            
00017810                            Obj7D_Delete:
00017810 4EF9 0000 DBB6             		jmp	DeleteObject
00017816                            ; ===========================================================================
00017816 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017818 03E8                       		dc.w 1000
0001781A 0064                       		dc.w 100
0001781C 0001                       		dc.w 1
0001781E                            ; ===========================================================================
0001781E                            
0001781E                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001781E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017822 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017824 3028 0008                  		move.w	8(a0),d0
00017828 0240 FF80                  		andi.w	#-$80,d0
0001782C 3238 F700                  		move.w	($FFFFF700).w,d1
00017830 0441 0080                  		subi.w	#$80,d1
00017834 0241 FF80                  		andi.w	#-$80,d1
00017838 9041                       		sub.w	d1,d0
0001783A 0C40 0280                  		cmpi.w	#$280,d0
0001783E 6200                       		bhi.s	Obj7D_Delete2
00017840 4EF9 0000 DB7A             		jmp	DisplaySprite
00017846                            ; ===========================================================================
00017846                            
00017846                            Obj7D_Delete2:
00017846 4EF9 0000 DBB6             		jmp	DeleteObject
0001784C                            ; ===========================================================================
0001784C                            ; ---------------------------------------------------------------------------
0001784C                            ; Sprite mappings - hidden points at the end of	a level
0001784C                            ; ---------------------------------------------------------------------------
0001784C                            Map_obj7D:
0001784C                            	include "_maps\obj7D.asm"
0001784C                            ; ---------------------------------------------------------------------------
0001784C                            ; Sprite mappings - hidden points at the end of	a level
0001784C                            ; ---------------------------------------------------------------------------
0001784C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017850 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017854 00                         byte_17250:	dc.b 0
00017855 01                         byte_17251:	dc.b 1
00017856 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001785B 01                         byte_17257:	dc.b 1
0001785C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017861 01                         byte_1725D:	dc.b 1
00017862 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017868 00                         		even
00017868 00                         		even
00017868                            
00017868                            ; ===========================================================================
00017868                            ; ---------------------------------------------------------------------------
00017868                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017868                            ; ---------------------------------------------------------------------------
00017868                            
00017868                            Obj8A:					; XREF: Obj_Index
00017868 7000                       		moveq	#0,d0
0001786A 1028 0024                  		move.b	$24(a0),d0
0001786E 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017872 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017876                            ; ===========================================================================
00017876 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017878 0000                       		dc.w Obj8A_Display-Obj8A_Index
0001787A                            ; ===========================================================================
0001787A                            
0001787A                            Obj8A_Main:				; XREF: Obj8A_Index
0001787A 5428 0024                  		addq.b	#2,$24(a0)
0001787E 317C 0120 0008             		move.w	#$120,8(a0)
00017884 317C 00F0 000A             		move.w	#$F0,$A(a0)
0001788A 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017892 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017898 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001789C 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000178A0 117C 0000 0001             		move.b	#0,1(a0)
000178A6 117C 0000 0018             		move.b	#0,$18(a0)
000178AC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000178B2 6600                       		bne.s	Obj8A_Display	; if not, branch
000178B4 317C 00A6 0002             		move.w	#$A6,2(a0)
000178BA 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000178C0 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000178C4 6700                       		beq.s	Obj8A_Display	; if not, branch
000178C6 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000178CC 6600                       		bne.s	Obj8A_Display	; if not, branch
000178CE 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000178D4 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000178DA 4EF9 0000 DBB6             		jmp	DeleteObject
000178E0                            ; ===========================================================================
000178E0                            
000178E0                            Obj8A_Display:				; XREF: Obj8A_Index
000178E0 4EF9 0000 DB7A             		jmp	DisplaySprite
000178E6                            ; ===========================================================================
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178E6                            ; ---------------------------------------------------------------------------
000178E6                            Map_obj8A:
000178E6                            	include "_maps\obj8A.asm"
000178E6                            ; --------------------------------------------------------------------------------
000178E6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178E6                            ; --------------------------------------------------------------------------------
000178E6                            
000178E6                            SME_MD8yg:	
000178E6 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178EA 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178EE 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178F2 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178F6 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178FA 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178FC 0E                         SME_MD8yg_16:	dc.b $E	
000178FD F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
00017902 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
00017907 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
0001790C F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
00017911 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
00017916 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
0001791B F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
00017920 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
00017925 F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
0001792A F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
0001792F F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
00017934 F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017939 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
0001793E F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017943 10                         SME_MD8yg_5D:	dc.b $10	
00017944 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017949 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
0001794E D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017953 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017958 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
0001795D D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017962 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017967 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
0001796C 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017971 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017976 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
0001797B 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017980 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
00017985 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
0001798A 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
0001798F 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
00017994 0A                         SME_MD8yg_AE:	dc.b $A	
00017995 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
0001799A D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
0001799F D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
000179A4 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
000179A9 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
000179AE D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
000179B3 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
000179B8 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
000179BD 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000179C2 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000179C7 18                         SME_MD8yg_E1:	dc.b $18	
000179C8 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000179CD D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
000179D2 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
000179D7 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000179DC D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000179E1 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179E6 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179EB D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179F0 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179F5 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179FA D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179FF D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
00017A04 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017A09 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017A0E D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017A13 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017A18 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017A1D 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017A22 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017A27 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017A2C 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017A31 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017A36 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A3B 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A40 14                         SME_MD8yg_15A:	dc.b $14	
00017A41 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A46 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A4B D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A50 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A55 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A5A D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A5F 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A64 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A69 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A6E 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A73 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A78 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A7D 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A82 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A87 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A8C 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A91 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A96 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A9B 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017AA0 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017AA5 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017AA6 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017AAB D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017AB0 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017AB5 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017ABA D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017ABF D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017AC4 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AC9 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017ACE D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017AD3 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017AD8 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017ADD D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017AE2 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017AE7 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017AEC 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AF1 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017AF6 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017AFB 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017B00 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017B05 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017B0A 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017B0F 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017B14 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017B19 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017B1E 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017B23 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017B28 17                         SME_MD8yg_242:	dc.b $17	
00017B29 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017B2E D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017B33 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017B38 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B3D D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B42 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B47 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B4C D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B51 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B56 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B5B D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B60 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B65 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B6A 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B6F 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B74 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B79 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B7E 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B83 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B88 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B8D 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B92 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B97 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B9C 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B9D D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017BA2 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017BA7 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017BAC D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017BB1 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017BB6 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017BBB D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017BC0 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017BC5 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017BCA D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017BCF D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017BD4 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017BD9 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017BDE 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BE3 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BE8 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BED 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BF2 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BF7 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BFC 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017C01 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017C06 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017C0B 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017C10 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017C15 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017C1A 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017C1F 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017C24 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017C29 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017C2E 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017C33 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017C38 0F                         SME_MD8yg_352:	dc.b $F	
00017C39 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C3E F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C43 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C48 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C4D F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C52 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C57 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C5C F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C61 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C66 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C6B F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C70 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C75 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C7A F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C7F F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C84 08                         SME_MD8yg_39E:	dc.b 8	
00017C85 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C8A 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C8F 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C94 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C99 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C9E 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017CA3 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017CA8 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017CAD 17                         SME_MD8yg_3C7:	dc.b $17	
00017CAE E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017CB3 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017CB8 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017CBD E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017CC2 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017CC7 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017CCC D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017CD1 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017CD6 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017CDB D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017CE0 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CE5 D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CEA D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CEF E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CF4 E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CF9 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CFE E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017D03 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017D08 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017D0D F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017D12 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017D17 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017D1C F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017D22 00                         		even
00017D22 00                         		even
00017D22                            
00017D22                            ; ===========================================================================
00017D22                            ; ---------------------------------------------------------------------------
00017D22                            ; Object 3D - Eggman (GHZ)
00017D22                            ; ---------------------------------------------------------------------------
00017D22                            
00017D22                            Obj3D:					; XREF: Obj_Index
00017D22 7000                       		moveq	#0,d0
00017D24 1028 0024                  		move.b	$24(a0),d0
00017D28 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017D2C 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017D30                            ; ===========================================================================
00017D30 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017D32 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017D34 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017D36 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017D38                            
00017D38 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D3A 0401                       		dc.b 4,	1
00017D3C 0607                       		dc.b 6,	7
00017D3E                            ; ===========================================================================
00017D3E                            
00017D3E                            Obj3D_Main:				; XREF: Obj3D_Index
00017D3E 45F9 0001 7D38             		lea	(Obj3D_ObjData).l,a2
00017D44 2248                       		movea.l	a0,a1
00017D46 7202                       		moveq	#2,d1
00017D48 6000                       		bra.s	Obj3D_LoadBoss
00017D4A                            ; ===========================================================================
00017D4A                            
00017D4A                            Obj3D_Loop:
00017D4A 4EB9 0000 E016             		jsr	SingleObjLoad2
00017D50 6600                       		bne.s	loc_17772
00017D52                            
00017D52                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D52 135A 0024                  		move.b	(a2)+,$24(a1)
00017D56 12BC 003D                  		move.b	#$3D,0(a1)
00017D5A 3368 0008 0008             		move.w	8(a0),8(a1)
00017D60 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D66 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D6E 337C 0400 0002             		move.w	#$400,2(a1)
00017D74 137C 0004 0001             		move.b	#4,1(a1)
00017D7A 137C 0020 0019             		move.b	#$20,$19(a1)
00017D80 137C 0003 0018             		move.b	#3,$18(a1)
00017D86 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D8A 2348 0034                  		move.l	a0,$34(a1)
00017D8E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D92                            
00017D92                            loc_17772:
00017D92 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D98 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D9E 117C 000F 0020             		move.b	#$F,$20(a0)
00017DA4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017DAA                            
00017DAA                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017DAA 7000                       		moveq	#0,d0
00017DAC 1028 0025                  		move.b	$25(a0),d0
00017DB0 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017DB4 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017DB8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017DBE 4EB9 0000 AC4A             		jsr	AnimateSprite
00017DC4 1028 0022                  		move.b	$22(a0),d0
00017DC8 0200 0003                  		andi.b	#3,d0
00017DCC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017DD2 8128 0001                  		or.b	d0,1(a0)
00017DD6 4EF9 0000 DB7A             		jmp	DisplaySprite
00017DDC                            ; ===========================================================================
00017DDC 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017DDE 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017DE0 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DE2 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DE4 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DE6 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DE8 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DEA                            ; ===========================================================================
00017DEA                            
00017DEA                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DEA 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017DF0 6100 0000                  		bsr.w	BossMove
00017DF4 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DFA 6600                       		bne.s	loc_177E6
00017DFC 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017E02 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017E06                            
00017E06                            loc_177E6:
00017E06 1028 003F                  		move.b	$3F(a0),d0
00017E0A 4EB9 0000 2C22             		jsr	(CalcSine).l
00017E10 EC40                       		asr.w	#6,d0
00017E12 D068 0038                  		add.w	$38(a0),d0
00017E16 3140 000C                  		move.w	d0,$C(a0)
00017E1A 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E20 5428 003F                  		addq.b	#2,$3F(a0)
00017E24 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017E2A 6400                       		bcc.s	locret_1784A
00017E2C 4A28 0022                  		tst.b	$22(a0)
00017E30 6B00                       		bmi.s	loc_1784C
00017E32 4A28 0020                  		tst.b	$20(a0)
00017E36 6600                       		bne.s	locret_1784A
00017E38 4A28 003E                  		tst.b	$3E(a0)
00017E3C 6600                       		bne.s	Obj3D_ShipFlash
00017E3E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E44 303C 00AC                  		move.w	#$AC,d0
00017E48 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E4E                            
00017E4E                            Obj3D_ShipFlash:
00017E4E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E52 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E54 4A51                       		tst.w	(a1)
00017E56 6600                       		bne.s	loc_1783C
00017E58 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E5C                            
00017E5C                            loc_1783C:
00017E5C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E5E 5328 003E                  		subq.b	#1,$3E(a0)
00017E62 6600                       		bne.s	locret_1784A
00017E64 117C 000F 0020             		move.b	#$F,$20(a0)
00017E6A                            
00017E6A                            locret_1784A:
00017E6A 4E75                       		rts	
00017E6C                            ; ===========================================================================
00017E6C                            
00017E6C                            loc_1784C:				; XREF: loc_177E6
00017E6C 7064                       		moveq	#100,d0
00017E6E 6100 0000                  		bsr.w	AddPoints
00017E72 117C 0008 0025             		move.b	#8,$25(a0)
00017E78 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E7E 4E75                       		rts	
00017E80                            
00017E80                            ; ---------------------------------------------------------------------------
00017E80                            ; Defeated boss	subroutine
00017E80                            ; ---------------------------------------------------------------------------
00017E80                            
00017E80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E80                            
00017E80                            
00017E80                            BossDefeated:
00017E80 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E84 0200 0007                  		andi.b	#7,d0
00017E88 6600                       		bne.s	locret_178A2
00017E8A 4EB9 0000 E000             		jsr	SingleObjLoad
00017E90 6600                       		bne.s	locret_178A2
00017E92 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E96 3368 0008 0008             		move.w	8(a0),8(a1)
00017E9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017EA2 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017EA8 3200                       		move.w	d0,d1
00017EAA 7200                       		moveq	#0,d1
00017EAC 1200                       		move.b	d0,d1
00017EAE E409                       		lsr.b	#2,d1
00017EB0 0441 0020                  		subi.w	#$20,d1
00017EB4 D369 0008                  		add.w	d1,8(a1)
00017EB8 E048                       		lsr.w	#8,d0
00017EBA E608                       		lsr.b	#3,d0
00017EBC D169 000C                  		add.w	d0,$C(a1)
00017EC0                            
00017EC0                            locret_178A2:
00017EC0 4E75                       		rts	
00017EC2                            ; End of function BossDefeated
00017EC2                            
00017EC2                            ; ---------------------------------------------------------------------------
00017EC2                            ; Subroutine to	move a boss
00017EC2                            ; ---------------------------------------------------------------------------
00017EC2                            
00017EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EC2                            
00017EC2                            
00017EC2                            BossMove:
00017EC2 2428 0030                  		move.l	$30(a0),d2
00017EC6 2628 0038                  		move.l	$38(a0),d3
00017ECA 3028 0010                  		move.w	$10(a0),d0
00017ECE 48C0                       		ext.l	d0
00017ED0 E180                       		asl.l	#8,d0
00017ED2 D480                       		add.l	d0,d2
00017ED4 3028 0012                  		move.w	$12(a0),d0
00017ED8 48C0                       		ext.l	d0
00017EDA E180                       		asl.l	#8,d0
00017EDC D680                       		add.l	d0,d3
00017EDE 2142 0030                  		move.l	d2,$30(a0)
00017EE2 2143 0038                  		move.l	d3,$38(a0)
00017EE6 4E75                       		rts	
00017EE8                            ; End of function BossMove
00017EE8                            
00017EE8                            ; ===========================================================================
00017EE8                            
00017EE8                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017EE8 317C FF00 0010             		move.w	#-$100,$10(a0)
00017EEE 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017EF4 6100 FFCC                  		bsr.w	BossMove
00017EF8 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EFE 6600                       		bne.s	loc_17916
00017F00 317C 0000 0010             		move.w	#0,$10(a0)
00017F06 317C 0000 0012             		move.w	#0,$12(a0)
00017F0C 5428 0025                  		addq.b	#2,$25(a0)
00017F10 4EB9 0000 E016             		jsr	SingleObjLoad2
00017F16 6600                       		bne.s	loc_17910
00017F18 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017F1C 3368 0030 0008             		move.w	$30(a0),8(a1)
00017F22 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017F28 2348 0034                  		move.l	a0,$34(a1)
00017F2C                            
00017F2C                            loc_17910:
00017F2C 317C 0077 003C             		move.w	#$77,$3C(a0)
00017F32                            
00017F32                            loc_17916:
00017F32 6000 FED2                  		bra.w	loc_177E6
00017F36                            ; ===========================================================================
00017F36                            
00017F36                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017F36 5368 003C                  		subq.w	#1,$3C(a0)
00017F3A 6A00                       		bpl.s	Obj3D_Reverse
00017F3C 5428 0025                  		addq.b	#2,$25(a0)
00017F40 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F46 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F4C 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F52 6600                       		bne.s	Obj3D_Reverse
00017F54 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F5A 317C 0040 0010             		move.w	#$40,$10(a0)
00017F60                            
00017F60                            Obj3D_Reverse:
00017F60 0828 0000 0022             		btst	#0,$22(a0)
00017F66 6600                       		bne.s	loc_17950
00017F68 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F6C                            
00017F6C                            loc_17950:
00017F6C 6000 FE98                  		bra.w	loc_177E6
00017F70                            ; ===========================================================================
00017F70                            
00017F70                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F70 5368 003C                  		subq.w	#1,$3C(a0)
00017F74 6B00                       		bmi.s	loc_17960
00017F76 6100 FF4A                  		bsr.w	BossMove
00017F7A 6000                       		bra.s	loc_17976
00017F7C                            ; ===========================================================================
00017F7C                            
00017F7C                            loc_17960:
00017F7C 0868 0000 0022             		bchg	#0,$22(a0)
00017F82 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F88 5528 0025                  		subq.b	#2,$25(a0)
00017F8C 317C 0000 0010             		move.w	#0,$10(a0)
00017F92                            
00017F92                            loc_17976:
00017F92 6000 FE72                  		bra.w	loc_177E6
00017F96                            ; ===========================================================================
00017F96                            
00017F96                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F96 5368 003C                  		subq.w	#1,$3C(a0)
00017F9A 6B00                       		bmi.s	loc_17984
00017F9C 6000 FEE2                  		bra.w	BossDefeated
00017FA0                            ; ===========================================================================
00017FA0                            
00017FA0                            loc_17984:
00017FA0 08E8 0000 0022             		bset	#0,$22(a0)
00017FA6 08A8 0007 0022             		bclr	#7,$22(a0)
00017FAC 4268 0010                  		clr.w	$10(a0)
00017FB0 5428 0025                  		addq.b	#2,$25(a0)
00017FB4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017FBA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017FBE 6600                       		bne.s	locret_179AA
00017FC0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FC6                            
00017FC6                            locret_179AA:
00017FC6 4E75                       		rts	
00017FC8                            ; ===========================================================================
00017FC8                            
00017FC8                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FC8 5268 003C                  		addq.w	#1,$3C(a0)
00017FCC 6700                       		beq.s	loc_179BC
00017FCE 6A00                       		bpl.s	loc_179C2
00017FD0 0668 0018 0012             		addi.w	#$18,$12(a0)
00017FD6 6000                       		bra.s	loc_179EE
00017FD8                            ; ===========================================================================
00017FD8                            
00017FD8                            loc_179BC:
00017FD8 4268 0012                  		clr.w	$12(a0)
00017FDC 6000                       		bra.s	loc_179EE
00017FDE                            ; ===========================================================================
00017FDE                            
00017FDE                            loc_179C2:
00017FDE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FE4 6500                       		bcs.s	loc_179DA
00017FE6 6700                       		beq.s	loc_179E0
00017FE8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FEE 6500                       		bcs.s	loc_179EE
00017FF0 5428 0025                  		addq.b	#2,$25(a0)
00017FF4 6000                       		bra.s	loc_179EE
00017FF6                            ; ===========================================================================
00017FF6                            
00017FF6                            loc_179DA:
00017FF6 5168 0012                  		subq.w	#8,$12(a0)
00017FFA 6000                       		bra.s	loc_179EE
00017FFC                            ; ===========================================================================
00017FFC                            
00017FFC                            loc_179E0:
00017FFC 4268 0012                  		clr.w	$12(a0)
00018000 303C 0081                  		move.w	#$81,d0
00018004 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
0001800A                            
0001800A                            loc_179EE:
0001800A 6100 FEB6                  		bsr.w	BossMove
0001800E 6000 FDF6                  		bra.w	loc_177E6
00018012                            ; ===========================================================================
00018012                            
00018012                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018012 317C 0400 0010             		move.w	#$400,$10(a0)
00018018 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001801E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018024 6700                       		beq.s	loc_17A10
00018026 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001802A 6000                       		bra.s	loc_17A16
0001802C                            ; ===========================================================================
0001802C                            
0001802C                            loc_17A10:
0001802C 4A28 0001                  		tst.b	1(a0)
00018030 6A00                       		bpl.s	Obj3D_ShipDel
00018032                            
00018032                            loc_17A16:
00018032 6100 FE8E                  		bsr.w	BossMove
00018036 6000 FDCE                  		bra.w	loc_177E6
0001803A                            ; ===========================================================================
0001803A                            
0001803A                            Obj3D_ShipDel:
0001803A 4EF9 0000 DBB6             		jmp	DeleteObject
00018040                            ; ===========================================================================
00018040                            
00018040                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018040 7000                       		moveq	#0,d0
00018042 7201                       		moveq	#1,d1
00018044 2268 0034                  		movea.l	$34(a0),a1
00018048 1029 0025                  		move.b	$25(a1),d0
0001804C 5900                       		subq.b	#4,d0
0001804E 6600                       		bne.s	loc_17A3E
00018050 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018056 6600                       		bne.s	loc_17A46
00018058 7204                       		moveq	#4,d1
0001805A                            
0001805A                            loc_17A3E:
0001805A 5D00                       		subq.b	#6,d0
0001805C 6B00                       		bmi.s	loc_17A46
0001805E 720A                       		moveq	#$A,d1
00018060 6000                       		bra.s	loc_17A5A
00018062                            ; ===========================================================================
00018062                            
00018062                            loc_17A46:
00018062 4A29 0020                  		tst.b	$20(a1)
00018066 6600                       		bne.s	loc_17A50
00018068 7205                       		moveq	#5,d1
0001806A 6000                       		bra.s	loc_17A5A
0001806C                            ; ===========================================================================
0001806C                            
0001806C                            loc_17A50:
0001806C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018072 6500                       		bcs.s	loc_17A5A
00018074 7204                       		moveq	#4,d1
00018076                            
00018076                            loc_17A5A:
00018076 1141 001C                  		move.b	d1,$1C(a0)
0001807A 5500                       		subq.b	#2,d0
0001807C 6600                       		bne.s	Obj3D_FaceDisp
0001807E 117C 0006 001C             		move.b	#6,$1C(a0)
00018084 4A28 0001                  		tst.b	1(a0)
00018088 6A00                       		bpl.s	Obj3D_FaceDel
0001808A                            
0001808A                            Obj3D_FaceDisp:
0001808A 6000                       		bra.s	Obj3D_Display
0001808C                            ; ===========================================================================
0001808C                            
0001808C                            Obj3D_FaceDel:
0001808C 4EF9 0000 DBB6             		jmp	DeleteObject
00018092                            ; ===========================================================================
00018092                            
00018092                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018092 117C 0007 001C             		move.b	#7,$1C(a0)
00018098 2268 0034                  		movea.l	$34(a0),a1
0001809C 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000180A2 6600                       		bne.s	loc_17A96
000180A4 117C 000B 001C             		move.b	#$B,$1C(a0)
000180AA 4A28 0001                  		tst.b	1(a0)
000180AE 6A00                       		bpl.s	Obj3D_FlameDel
000180B0 6000                       		bra.s	Obj3D_FlameDisp
000180B2                            ; ===========================================================================
000180B2                            
000180B2                            loc_17A96:
000180B2 3029 0010                  		move.w	$10(a1),d0
000180B6 6700                       		beq.s	Obj3D_FlameDisp
000180B8 117C 0008 001C             		move.b	#8,$1C(a0)
000180BE                            
000180BE                            Obj3D_FlameDisp:
000180BE 6000                       		bra.s	Obj3D_Display
000180C0                            ; ===========================================================================
000180C0                            
000180C0                            Obj3D_FlameDel:
000180C0 4EF9 0000 DBB6             		jmp	DeleteObject
000180C6                            ; ===========================================================================
000180C6                            
000180C6                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180C6 2268 0034                  		movea.l	$34(a0),a1
000180CA 3169 0008 0008             		move.w	8(a1),8(a0)
000180D0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000180D6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180DC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180E2 4EB9 0000 AC4A             		jsr	AnimateSprite
000180E8 1028 0022                  		move.b	$22(a0),d0
000180EC 0200 0003                  		andi.b	#3,d0
000180F0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180F6 8128 0001                  		or.b	d0,1(a0)
000180FA 4EF9 0000 DB7A             		jmp	DisplaySprite
00018100                            ; ===========================================================================
00018100                            ; ---------------------------------------------------------------------------
00018100                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018100                            ; ---------------------------------------------------------------------------
00018100                            
00018100                            Obj48:					; XREF: Obj_Index
00018100 7000                       		moveq	#0,d0
00018102 1028 0024                  		move.b	$24(a0),d0
00018106 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001810A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001810E                            ; ===========================================================================
0001810E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018110 0000                       		dc.w Obj48_Base-Obj48_Index
00018112 0000                       		dc.w Obj48_Display2-Obj48_Index
00018114 0000                       		dc.w loc_17C68-Obj48_Index
00018116 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018118                            ; ===========================================================================
00018118                            
00018118                            Obj48_Main:				; XREF: Obj48_Index
00018118 5428 0024                  		addq.b	#2,$24(a0)
0001811C 317C 4080 0026             		move.w	#$4080,$26(a0)
00018122 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018128 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018130 317C 046C 0002             		move.w	#$46C,2(a0)
00018136 45E8 0028                  		lea	$28(a0),a2
0001813A 14FC 0000                  		move.b	#0,(a2)+
0001813E 7205                       		moveq	#5,d1
00018140 2248                       		movea.l	a0,a1
00018142 6000                       		bra.s	loc_17B60
00018144                            ; ===========================================================================
00018144                            
00018144                            Obj48_MakeLinks:
00018144 4EB9 0000 E016             		jsr	SingleObjLoad2
0001814A 6600                       		bne.s	Obj48_MakeBall
0001814C 3368 0008 0008             		move.w	8(a0),8(a1)
00018152 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018158 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001815C 137C 0006 0024             		move.b	#6,$24(a1)
00018162 237C 0000 809E 0004        		move.l	#Map_obj15,4(a1)
0001816A 337C 0380 0002             		move.w	#$380,2(a1)
00018170 137C 0001 001A             		move.b	#1,$1A(a1)
00018176 5228 0028                  		addq.b	#1,$28(a0)
0001817A                            
0001817A                            loc_17B60:				; XREF: Obj48_Main
0001817A 3A09                       		move.w	a1,d5
0001817C 0445 D000                  		subi.w	#$D000,d5
00018180 EC4D                       		lsr.w	#6,d5
00018182 0245 007F                  		andi.w	#$7F,d5
00018186 14C5                       		move.b	d5,(a2)+
00018188 137C 0004 0001             		move.b	#4,1(a1)
0001818E 137C 0008 0019             		move.b	#8,$19(a1)
00018194 137C 0006 0018             		move.b	#6,$18(a1)
0001819A 2368 0034 0034             		move.l	$34(a0),$34(a1)
000181A0 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000181A4                            
000181A4                            Obj48_MakeBall:
000181A4 137C 0008 0024             		move.b	#8,$24(a1)
000181AA 237C 0000 85FC 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000181B2 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000181B8 137C 0001 001A             		move.b	#1,$1A(a1)
000181BE 137C 0005 0018             		move.b	#5,$18(a1)
000181C4 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181CA 4E75                       		rts	
000181CC                            ; ===========================================================================
000181CC                            
000181CC 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000181D2                            
000181D2                            ; ===========================================================================
000181D2                            
000181D2                            Obj48_Base:				; XREF: Obj48_Index
000181D2 47F9 0001 81CC             		lea	(Obj48_PosData).l,a3
000181D8 45E8 0028                  		lea	$28(a0),a2
000181DC 7C00                       		moveq	#0,d6
000181DE 1C1A                       		move.b	(a2)+,d6
000181E0                            
000181E0                            loc_17BC6:
000181E0 7800                       		moveq	#0,d4
000181E2 181A                       		move.b	(a2)+,d4
000181E4 ED4C                       		lsl.w	#6,d4
000181E6 0684 00FF D000             		addi.l	#$FFD000,d4
000181EC 2244                       		movea.l	d4,a1
000181EE 101B                       		move.b	(a3)+,d0
000181F0 B029 003C                  		cmp.b	$3C(a1),d0
000181F4 6700                       		beq.s	loc_17BE0
000181F6 5229 003C                  		addq.b	#1,$3C(a1)
000181FA                            
000181FA                            loc_17BE0:
000181FA 51CE FFE4                  		dbf	d6,loc_17BC6
000181FE                            
000181FE B029 003C                  		cmp.b	$3C(a1),d0
00018202 6600                       		bne.s	loc_17BFA
00018204 2268 0034                  		movea.l	$34(a0),a1
00018208 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001820E 6600                       		bne.s	loc_17BFA
00018210 5428 0024                  		addq.b	#2,$24(a0)
00018214                            
00018214                            loc_17BFA:
00018214 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001821A 6700                       		beq.s	Obj48_Display
0001821C 5268 0032                  		addq.w	#1,$32(a0)
00018220                            
00018220                            Obj48_Display:
00018220 6100 0000                  		bsr.w	sub_17C2A
00018224 1028 0026                  		move.b	$26(a0),d0
00018228 4EB9 0000 8010             		jsr	(Obj15_Move2).l
0001822E 4EF9 0000 DB7A             		jmp	DisplaySprite
00018234                            ; ===========================================================================
00018234                            
00018234                            Obj48_Display2:				; XREF: Obj48_Index
00018234 6100 0000                  		bsr.w	sub_17C2A
00018238 4EB9 0000 7FD0             		jsr	(Obj48_Move).l
0001823E 4EF9 0000 DB7A             		jmp	DisplaySprite
00018244                            
00018244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018244                            
00018244                            
00018244                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018244 2268 0034                  		movea.l	$34(a0),a1
00018248 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001824E 6400                       		bcc.s	loc_17C3C
00018250 0868 0000 001A             		bchg	#0,$1A(a0)
00018256                            
00018256                            loc_17C3C:
00018256 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001825C 3029 000C                  		move.w	$C(a1),d0
00018260 D068 0032                  		add.w	$32(a0),d0
00018264 3140 0038                  		move.w	d0,$38(a0)
00018268 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001826E 4A29 0022                  		tst.b	$22(a1)
00018272 6A00                       		bpl.s	locret_17C66
00018274 10BC 003F                  		move.b	#$3F,0(a0)
00018278 117C 0000 0024             		move.b	#0,$24(a0)
0001827E                            
0001827E                            locret_17C66:
0001827E 4E75                       		rts	
00018280                            ; End of function sub_17C2A
00018280                            
00018280                            ; ===========================================================================
00018280                            
00018280                            loc_17C68:				; XREF: Obj48_Index
00018280 2268 0034                  		movea.l	$34(a0),a1
00018284 4A29 0022                  		tst.b	$22(a1)
00018288 6A00                       		bpl.s	Obj48_Display3
0001828A 10BC 003F                  		move.b	#$3F,0(a0)
0001828E 117C 0000 0024             		move.b	#0,$24(a0)
00018294                            
00018294                            Obj48_Display3:
00018294 4EF9 0000 DB7A             		jmp	DisplaySprite
0001829A                            ; ===========================================================================
0001829A                            
0001829A                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001829A 7000                       		moveq	#0,d0
0001829C 4A28 001A                  		tst.b	$1A(a0)
000182A0 6600                       		bne.s	Obj48_Vanish
000182A2 5200                       		addq.b	#1,d0
000182A4                            
000182A4                            Obj48_Vanish:
000182A4 1140 001A                  		move.b	d0,$1A(a0)
000182A8 2268 0034                  		movea.l	$34(a0),a1
000182AC 4A29 0022                  		tst.b	$22(a1)
000182B0 6A00                       		bpl.s	Obj48_Display4
000182B2 117C 0000 0020             		move.b	#0,$20(a0)
000182B8 6100 FBC6                  		bsr.w	BossDefeated
000182BC 5328 003C                  		subq.b	#1,$3C(a0)
000182C0 6A00                       		bpl.s	Obj48_Display4
000182C2 10BC 003F                  		move.b	#$3F,(a0)
000182C6 117C 0000 0024             		move.b	#0,$24(a0)
000182CC                            
000182CC                            Obj48_Display4:
000182CC 4EF9 0000 DB7A             		jmp	DisplaySprite
000182D2                            ; ===========================================================================
000182D2                            Ani_Eggman:
000182D2                            	include "_anim\Eggman.asm"
000182D2                            ; ---------------------------------------------------------------------------
000182D2                            ; Animation script - Eggman (bosses)
000182D2                            ; ---------------------------------------------------------------------------
000182D2 0000                       		dc.w byte_17CD4-Ani_Eggman
000182D4 0000                       		dc.w byte_17CD8-Ani_Eggman
000182D6 0000                       		dc.w byte_17CDC-Ani_Eggman
000182D8 0000                       		dc.w byte_17CE0-Ani_Eggman
000182DA 0000                       		dc.w byte_17CE4-Ani_Eggman
000182DC 0000                       		dc.w byte_17CE8-Ani_Eggman
000182DE 0000                       		dc.w byte_17CEC-Ani_Eggman
000182E0 0000                       		dc.w byte_17CF0-Ani_Eggman
000182E2 0000                       		dc.w byte_17CF4-Ani_Eggman
000182E4 0000                       		dc.w byte_17CF8-Ani_Eggman
000182E6 0000                       		dc.w byte_17CFC-Ani_Eggman
000182E8 0000                       		dc.w byte_17D00-Ani_Eggman
000182EA 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182EE 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182F2 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182F6 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182FA 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182FE 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018302 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018306 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001830A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001830E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018312 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018316 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018322                            		even
00018322                            		even
00018322                            
00018322                            ; ---------------------------------------------------------------------------
00018322                            ; Sprite mappings - Eggman (boss levels)
00018322                            ; ---------------------------------------------------------------------------
00018322                            Map_Eggman:
00018322                            	include "_maps\Eggman.asm"
00018322                            Map_dc7e:
00018322 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018324 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018326 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018328 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001832A 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001832C 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001832E 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018330 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018332 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018334 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018336 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018338 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001833A 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001833C 06                         Map_dc7e_1A: 	dc.b $6
0001833D EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018342 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018347 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001834C FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018351 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018356 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001835B 02                         Map_dc7e_39: 	dc.b $2
0001835C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018361 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018366 02                         Map_dc7e_44: 	dc.b $2
00018367 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001836C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018371 03                         Map_dc7e_4F: 	dc.b $3
00018372 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018377 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001837C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018381 03                         Map_dc7e_5F: 	dc.b $3
00018382 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018387 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001838C EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018391 03                         Map_dc7e_6F: 	dc.b $3
00018392 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018397 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001839C EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183A1 03                         Map_dc7e_7F: 	dc.b $3
000183A2 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000183A7 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000183AC EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000183B1 04                         Map_dc7e_8F: 	dc.b $4
000183B2 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000183B7 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183BC EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183C1 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183C6 01                         Map_dc7e_A4: 	dc.b $1
000183C7 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183CC 01                         Map_dc7e_AA: 	dc.b $1
000183CD 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000183D2 00                         Map_dc7e_B0: 	dc.b $0
000183D3 02                         Map_dc7e_B1: 	dc.b $2
000183D4 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000183D9 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000183DE 02                         Map_dc7e_BC: 	dc.b $2
000183DF F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183E4 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183EA 00                         	even
000183EA 00                         	even
000183EA                            
000183EA                            ; ---------------------------------------------------------------------------
000183EA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183EA                            ; ---------------------------------------------------------------------------
000183EA                            Map_BossItems:
000183EA                            	include "_maps\Boss items.asm"
000183EA                            ; ---------------------------------------------------------------------------
000183EA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183EA                            ; ---------------------------------------------------------------------------
000183EA 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183EE 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183F2 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183F6 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183FA 01                         byte_17DE4:	dc.b 1
000183FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018400 02                         byte_17DEA:	dc.b 2
00018401 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018406 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001840B 00                         		dc.b 0
0001840C 01                         byte_17DF6:	dc.b 1
0001840D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018412 01                         byte_17DFC:	dc.b 1
00018413 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018418 01                         byte_17E02:	dc.b 1
00018419 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001841E 04                         byte_17E08:	dc.b 4
0001841F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018424 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018429 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001842E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018433 00                         		dc.b 0
00018434 02                         byte_17E1E:	dc.b 2
00018435 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001843A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001843F 00                         		dc.b 0
00018440 02                         byte_17E2A:	dc.b 2
00018441 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018446 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001844C 00                         		even
0001844C 00                         		even
0001844C                            
0001844C                            ; ===========================================================================
0001844C                            ; ---------------------------------------------------------------------------
0001844C                            ; Object 77 - Eggman (LZ)
0001844C                            ; ---------------------------------------------------------------------------
0001844C                            
0001844C                            Obj77:					; XREF: Obj_Index
0001844C 7000                       		moveq	#0,d0
0001844E 1028 0024                  		move.b	$24(a0),d0
00018452 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018456 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001845A                            ; ===========================================================================
0001845A 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001845C 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001845E 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018460 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018462                            
00018462 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018464 0401                       		dc.b 4,	1
00018466 0607                       		dc.b 6,	7
00018468                            ; ===========================================================================
00018468                            
00018468                            Obj77_Main:				; XREF: Obj77_Index
00018468 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001846E 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00018474 3168 0008 0030             		move.w	8(a0),$30(a0)
0001847A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018480 117C 000F 0020             		move.b	#$F,$20(a0)
00018486 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001848C 117C 0004 0018             		move.b	#4,$18(a0)
00018492 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00018496 2248                       		movea.l	a0,a1
00018498 7202                       		moveq	#2,d1
0001849A 6000                       		bra.s	Obj77_LoadBoss
0001849C                            ; ===========================================================================
0001849C                            
0001849C                            Obj77_Loop:
0001849C 4EB9 0000 E016             		jsr	SingleObjLoad2
000184A2 6600                       		bne.s	Obj77_ShipMain
000184A4 12BC 0077                  		move.b	#$77,0(a1)
000184A8 3368 0008 0008             		move.w	8(a0),8(a1)
000184AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184B4                            
000184B4                            Obj77_LoadBoss:				; XREF: Obj77_Main
000184B4 08A8 0000 0022             		bclr	#0,$22(a0)
000184BA 4229 0025                  		clr.b	$25(a1)
000184BE 135A 0024                  		move.b	(a2)+,$24(a1)
000184C2 135A 001C                  		move.b	(a2)+,$1C(a1)
000184C6 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184CC 237C 0001 8322 0004        		move.l	#Map_Eggman,4(a1)
000184D4 337C 0400 0002             		move.w	#$400,2(a1)
000184DA 137C 0004 0001             		move.b	#4,1(a1)
000184E0 137C 0020 0019             		move.b	#$20,$19(a1)
000184E6 2348 0034                  		move.l	a0,$34(a1)
000184EA 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184EE                            
000184EE                            Obj77_ShipMain:
000184EE 43F8 D000                  		lea	($FFFFD000).w,a1
000184F2 7000                       		moveq	#0,d0
000184F4 1028 0025                  		move.b	$25(a0),d0
000184F8 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184FC 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018500 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
00018506 4EB9 0000 AC4A             		jsr	AnimateSprite
0001850C 7003                       		moveq	#3,d0
0001850E C028 0022                  		and.b	$22(a0),d0
00018512 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018518 8128 0001                  		or.b	d0,1(a0)
0001851C 4EF9 0000 DB7A             		jmp	DisplaySprite
00018522                            ; ===========================================================================
00018522 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018526 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001852A 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001852E 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018532                            ; ===========================================================================
00018532                            
00018532                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018532 3029 0008                  		move.w	8(a1),d0
00018536 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001853A 6500                       		bcs.s	loc_17F38
0001853C 317C FE80 0012             		move.w	#-$180,$12(a0)
00018542 317C 0060 0010             		move.w	#$60,$10(a0)
00018548 5428 0025                  		addq.b	#2,$25(a0)
0001854C                            
0001854C                            loc_17F38:
0001854C 6100 F974                  		bsr.w	BossMove
00018550 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018556 3168 0030 0008             		move.w	$30(a0),8(a0)
0001855C                            
0001855C                            loc_17F48:
0001855C 4A28 003D                  		tst.b	$3D(a0)
00018560 6600                       		bne.s	loc_17F8E
00018562 4A28 0022                  		tst.b	$22(a0)
00018566 6B00                       		bmi.s	loc_17F92
00018568 4A28 0020                  		tst.b	$20(a0)
0001856C 6600                       		bne.s	locret_17F8C
0001856E 4A28 003E                  		tst.b	$3E(a0)
00018572 6600                       		bne.s	loc_17F70
00018574 117C 0020 003E             		move.b	#$20,$3E(a0)
0001857A 303C 00AC                  		move.w	#$AC,d0
0001857E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
00018584                            
00018584                            loc_17F70:
00018584 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018588 7000                       		moveq	#0,d0
0001858A 4A51                       		tst.w	(a1)
0001858C 6600                       		bne.s	loc_17F7E
0001858E 303C 0EEE                  		move.w	#$EEE,d0
00018592                            
00018592                            loc_17F7E:
00018592 3280                       		move.w	d0,(a1)
00018594 5328 003E                  		subq.b	#1,$3E(a0)
00018598 6600                       		bne.s	locret_17F8C
0001859A 117C 000F 0020             		move.b	#$F,$20(a0)
000185A0                            
000185A0                            locret_17F8C:
000185A0 4E75                       		rts	
000185A2                            ; ===========================================================================
000185A2                            
000185A2                            loc_17F8E:				; XREF: loc_17F48
000185A2 6000 F8DC                  		bra.w	BossDefeated
000185A6                            ; ===========================================================================
000185A6                            
000185A6                            loc_17F92:				; XREF: loc_17F48
000185A6 7064                       		moveq	#100,d0
000185A8 6100 0000                  		bsr.w	AddPoints
000185AC 117C 00FF 003D             		move.b	#-1,$3D(a0)
000185B2 4E75                       		rts	
000185B4                            ; ===========================================================================
000185B4                            
000185B4                            loc_17FA0:				; XREF: Obj77_ShipIndex
000185B4 70FE                       		moveq	#-2,d0
000185B6 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000185BC 6500                       		bcs.s	loc_17FB6
000185BE 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185C4 4268 0010                  		clr.w	$10(a0)
000185C8 5240                       		addq.w	#1,d0
000185CA                            
000185CA                            loc_17FB6:
000185CA 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185D0 6E00                       		bgt.s	loc_17FCA
000185D2 317C 0500 0038             		move.w	#$500,$38(a0)
000185D8 4268 0012                  		clr.w	$12(a0)
000185DC 5240                       		addq.w	#1,d0
000185DE                            
000185DE                            loc_17FCA:
000185DE 6600                       		bne.s	loc_17FDC
000185E0 317C 0140 0010             		move.w	#$140,$10(a0)
000185E6 317C FE00 0012             		move.w	#-$200,$12(a0)
000185EC 5428 0025                  		addq.b	#2,$25(a0)
000185F0                            
000185F0                            loc_17FDC:
000185F0 6000 FF5A                  		bra.w	loc_17F38
000185F4                            ; ===========================================================================
000185F4                            
000185F4                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185F4 70FE                       		moveq	#-2,d0
000185F6 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185FC 6500                       		bcs.s	loc_17FF6
000185FE 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018604 4268 0010                  		clr.w	$10(a0)
00018608 5240                       		addq.w	#1,d0
0001860A                            
0001860A                            loc_17FF6:
0001860A 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018610 6E00                       		bgt.s	loc_1800A
00018612 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018618 4268 0012                  		clr.w	$12(a0)
0001861C 5240                       		addq.w	#1,d0
0001861E                            
0001861E                            loc_1800A:
0001861E 6600                       		bne.s	loc_1801A
00018620 317C FE80 0012             		move.w	#-$180,$12(a0)
00018626 5428 0025                  		addq.b	#2,$25(a0)
0001862A 4228 003F                  		clr.b	$3F(a0)
0001862E                            
0001862E                            loc_1801A:
0001862E 6000 FF1C                  		bra.w	loc_17F38
00018632                            ; ===========================================================================
00018632                            
00018632                            loc_1801E:				; XREF: Obj77_ShipIndex
00018632 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018638 6E00                       		bgt.s	loc_1804E
0001863A 317C 0100 0038             		move.w	#$100,$38(a0)
00018640 317C 0140 0010             		move.w	#$140,$10(a0)
00018646 317C FF80 0012             		move.w	#-$80,$12(a0)
0001864C 4A28 003D                  		tst.b	$3D(a0)
00018650 6700                       		beq.s	loc_18046
00018652 E1E8 0010                  		asl	$10(a0)
00018656 E1E8 0012                  		asl	$12(a0)
0001865A                            
0001865A                            loc_18046:
0001865A 5428 0025                  		addq.b	#2,$25(a0)
0001865E 6000 FEEC                  		bra.w	loc_17F38
00018662                            ; ===========================================================================
00018662                            
00018662                            loc_1804E:
00018662 08E8 0000 0022             		bset	#0,$22(a0)
00018668 5428 003F                  		addq.b	#2,$3F(a0)
0001866C 1028 003F                  		move.b	$3F(a0),d0
00018670 4EB9 0000 2C22             		jsr	(CalcSine).l
00018676 4A41                       		tst.w	d1
00018678 6A00                       		bpl.s	loc_1806C
0001867A 08A8 0000 0022             		bclr	#0,$22(a0)
00018680                            
00018680                            loc_1806C:
00018680 E840                       		asr.w	#4,d0
00018682 4840                       		swap	d0
00018684 4240                       		clr.w	d0
00018686 D0A8 0030                  		add.l	$30(a0),d0
0001868A 4840                       		swap	d0
0001868C 3140 0008                  		move.w	d0,8(a0)
00018690 3028 0012                  		move.w	$12(a0),d0
00018694 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018698 9268 000C                  		sub.w	$C(a0),d1
0001869C 6500                       		bcs.s	loc_180A2
0001869E 0441 0048                  		subi.w	#$48,d1
000186A2 6500                       		bcs.s	loc_180A2
000186A4 E240                       		asr.w	#1,d0
000186A6 0441 0028                  		subi.w	#$28,d1
000186AA 6500                       		bcs.s	loc_180A2
000186AC E240                       		asr.w	#1,d0
000186AE 0441 0028                  		subi.w	#$28,d1
000186B2 6500                       		bcs.s	loc_180A2
000186B4 7000                       		moveq	#0,d0
000186B6                            
000186B6                            loc_180A2:
000186B6 48C0                       		ext.l	d0
000186B8 E180                       		asl.l	#8,d0
000186BA 4A28 003D                  		tst.b	$3D(a0)
000186BE 6700                       		beq.s	loc_180AE
000186C0 D080                       		add.l	d0,d0
000186C2                            
000186C2                            loc_180AE:
000186C2 D1A8 0038                  		add.l	d0,$38(a0)
000186C6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186CC 6000 FE8E                  		bra.w	loc_17F48
000186D0                            ; ===========================================================================
000186D0                            
000186D0                            loc_180BC:				; XREF: Obj77_ShipIndex
000186D0 70FE                       		moveq	#-2,d0
000186D2 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000186D8 6500                       		bcs.s	loc_180D2
000186DA 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000186E0 4268 0010                  		clr.w	$10(a0)
000186E4 5240                       		addq.w	#1,d0
000186E6                            
000186E6                            loc_180D2:
000186E6 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186EC 6E00                       		bgt.s	loc_180E6
000186EE 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186F4 4268 0012                  		clr.w	$12(a0)
000186F8 5240                       		addq.w	#1,d0
000186FA                            
000186FA                            loc_180E6:
000186FA 6600                       		bne.s	loc_180F2
000186FC 5428 0025                  		addq.b	#2,$25(a0)
00018700 08A8 0000 0022             		bclr	#0,$22(a0)
00018706                            
00018706                            loc_180F2:
00018706 6000 FE44                  		bra.w	loc_17F38
0001870A                            ; ===========================================================================
0001870A                            
0001870A                            loc_180F6:				; XREF: Obj77_ShipIndex
0001870A 4A28 003D                  		tst.b	$3D(a0)
0001870E 6600                       		bne.s	loc_18112
00018710 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018716 6D00                       		blt.s	loc_18126
00018718 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001871E 6E00                       		bgt.s	loc_18126
00018720 117C 0032 003C             		move.b	#$32,$3C(a0)
00018726                            
00018726                            loc_18112:
00018726 303C 0082                  		move.w	#$82,d0
0001872A 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
00018730 08E8 0000 0022             		bset	#0,$22(a0)
00018736 5428 0025                  		addq.b	#2,$25(a0)
0001873A                            
0001873A                            loc_18126:
0001873A 6000 FE10                  		bra.w	loc_17F38
0001873E                            ; ===========================================================================
0001873E                            
0001873E                            loc_1812A:				; XREF: Obj77_ShipIndex
0001873E 4A28 003D                  		tst.b	$3D(a0)
00018742 6600                       		bne.s	loc_18136
00018744 5328 003C                  		subq.b	#1,$3C(a0)
00018748 6600                       		bne.s	loc_1814E
0001874A                            
0001874A                            loc_18136:
0001874A 4228 003C                  		clr.b	$3C(a0)
0001874E 317C 0400 0010             		move.w	#$400,$10(a0)
00018754 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001875A 4228 003D                  		clr.b	$3D(a0)
0001875E 5428 0025                  		addq.b	#2,$25(a0)
00018762                            
00018762                            loc_1814E:
00018762 6000 FDE8                  		bra.w	loc_17F38
00018766                            ; ===========================================================================
00018766                            
00018766                            loc_18152:				; XREF: Obj77_ShipIndex
00018766 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001876C 6400                       		bcc.s	loc_18160
0001876E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018772 6000                       		bra.s	loc_18166
00018774                            ; ===========================================================================
00018774                            
00018774                            loc_18160:
00018774 4A28 0001                  		tst.b	1(a0)
00018778 6A00                       		bpl.s	Obj77_ShipDel
0001877A                            
0001877A                            loc_18166:
0001877A 6000 FDD0                  		bra.w	loc_17F38
0001877E                            ; ===========================================================================
0001877E                            
0001877E                            Obj77_ShipDel:
0001877E 4EF9 0000 DBB6             		jmp	DeleteObject
00018784                            ; ===========================================================================
00018784                            
00018784                            Obj77_FaceMain:				; XREF: Obj77_Index
00018784 2268 0034                  		movea.l	$34(a0),a1
00018788 1011                       		move.b	(a1),d0
0001878A B010                       		cmp.b	(a0),d0
0001878C 6600                       		bne.s	Obj77_FaceDel
0001878E 7000                       		moveq	#0,d0
00018790 1029 0025                  		move.b	$25(a1),d0
00018794 7201                       		moveq	#1,d1
00018796 4A28 003D                  		tst.b	$3D(a0)
0001879A 6700                       		beq.s	loc_1818C
0001879C 720A                       		moveq	#$A,d1
0001879E 6000                       		bra.s	loc_181A0
000187A0                            ; ===========================================================================
000187A0                            
000187A0                            loc_1818C:
000187A0 4A29 0020                  		tst.b	$20(a1)
000187A4 6600                       		bne.s	loc_18196
000187A6 7205                       		moveq	#5,d1
000187A8 6000                       		bra.s	loc_181A0
000187AA                            ; ===========================================================================
000187AA                            
000187AA                            loc_18196:
000187AA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187B0 6500                       		bcs.s	loc_181A0
000187B2 7204                       		moveq	#4,d1
000187B4                            
000187B4                            loc_181A0:
000187B4 1141 001C                  		move.b	d1,$1C(a0)
000187B8 0C00 000E                  		cmpi.b	#$E,d0
000187BC 6600                       		bne.s	loc_181B6
000187BE 117C 0006 001C             		move.b	#6,$1C(a0)
000187C4 4A28 0001                  		tst.b	1(a0)
000187C8 6A00                       		bpl.s	Obj77_FaceDel
000187CA                            
000187CA                            loc_181B6:
000187CA 6000                       		bra.s	Obj77_Display
000187CC                            ; ===========================================================================
000187CC                            
000187CC                            Obj77_FaceDel:
000187CC 4EF9 0000 DBB6             		jmp	DeleteObject
000187D2                            ; ===========================================================================
000187D2                            
000187D2                            Obj77_FlameMain:			; XREF: Obj77_Index
000187D2 117C 0007 001C             		move.b	#7,$1C(a0)
000187D8 2268 0034                  		movea.l	$34(a0),a1
000187DC 1011                       		move.b	(a1),d0
000187DE B010                       		cmp.b	(a0),d0
000187E0 6600                       		bne.s	Obj77_FlameDel
000187E2 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187E8 6600                       		bne.s	loc_181F0
000187EA 117C 000B 001C             		move.b	#$B,$1C(a0)
000187F0 4A28 0001                  		tst.b	1(a0)
000187F4 6A00                       		bpl.s	Obj77_FlameDel
000187F6 6000                       		bra.s	loc_181F0
000187F8                            ; ===========================================================================
000187F8 4A69 0010                  		tst.w	$10(a1)
000187FC 6700                       		beq.s	loc_181F0
000187FE 117C 0008 001C             		move.b	#8,$1C(a0)
00018804                            
00018804                            loc_181F0:
00018804 6000                       		bra.s	Obj77_Display
00018806                            ; ===========================================================================
00018806                            
00018806                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018806 4EF9 0000 DBB6             		jmp	DeleteObject
0001880C                            ; ===========================================================================
0001880C                            
0001880C                            Obj77_Display:
0001880C 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
00018812 4EB9 0000 AC4A             		jsr	AnimateSprite
00018818 2268 0034                  		movea.l	$34(a0),a1
0001881C 3169 0008 0008             		move.w	8(a1),8(a0)
00018822 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018828 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001882E 7003                       		moveq	#3,d0
00018830 C028 0022                  		and.b	$22(a0),d0
00018834 0228 00FC 0001             		andi.b	#-4,1(a0)
0001883A 8128 0001                  		or.b	d0,1(a0)
0001883E 4EF9 0000 DB7A             		jmp	DisplaySprite
00018844                            ; ===========================================================================
00018844                            ; ---------------------------------------------------------------------------
00018844                            ; Object 73 - Eggman (MZ)
00018844                            ; ---------------------------------------------------------------------------
00018844                            
00018844                            Obj73:					; XREF: Obj_Index
00018844 7000                       		moveq	#0,d0
00018846 1028 0024                  		move.b	$24(a0),d0
0001884A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001884E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018852                            ; ===========================================================================
00018852 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018854 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018856 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018858 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001885A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001885C                            
0001885C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001885F 0401 04                    		dc.b 4,	1, 4
00018862 0607 04                    		dc.b 6,	7, 4
00018865 0800 03                    		dc.b 8,	0, 3
00018868                            ; ===========================================================================
00018868                            
00018868                            Obj73_Main:				; XREF: Obj73_Index
00018868 3168 0008 0030             		move.w	8(a0),$30(a0)
0001886E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018874 117C 000F 0020             		move.b	#$F,$20(a0)
0001887A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018880 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018884 2248                       		movea.l	a0,a1
00018886 7203                       		moveq	#3,d1
00018888 6000                       		bra.s	Obj73_LoadBoss
0001888A                            ; ===========================================================================
0001888A                            
0001888A                            Obj73_Loop:
0001888A 4EB9 0000 E016             		jsr	SingleObjLoad2
00018890 6600                       		bne.s	Obj73_ShipMain
00018892 12BC 0073                  		move.b	#$73,0(a1)
00018896 3368 0008 0008             		move.w	8(a0),8(a1)
0001889C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188A2                            
000188A2                            Obj73_LoadBoss:				; XREF: Obj73_Main
000188A2 08A8 0000 0022             		bclr	#0,$22(a0)
000188A8 4229 0025                  		clr.b	$25(a1)
000188AC 135A 0024                  		move.b	(a2)+,$24(a1)
000188B0 135A 001C                  		move.b	(a2)+,$1C(a1)
000188B4 135A 0018                  		move.b	(a2)+,$18(a1)
000188B8 237C 0001 8322 0004        		move.l	#Map_Eggman,4(a1)
000188C0 337C 0400 0002             		move.w	#$400,2(a1)
000188C6 137C 0004 0001             		move.b	#4,1(a1)
000188CC 137C 0020 0019             		move.b	#$20,$19(a1)
000188D2 2348 0034                  		move.l	a0,$34(a1)
000188D6 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000188DA                            
000188DA                            Obj73_ShipMain:
000188DA 7000                       		moveq	#0,d0
000188DC 1028 0025                  		move.b	$25(a0),d0
000188E0 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188E4 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188E8 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
000188EE 4EB9 0000 AC4A             		jsr	AnimateSprite
000188F4 7003                       		moveq	#3,d0
000188F6 C028 0022                  		and.b	$22(a0),d0
000188FA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018900 8128 0001                  		or.b	d0,1(a0)
00018904 4EF9 0000 DB7A             		jmp	DisplaySprite
0001890A                            ; ===========================================================================
0001890A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001890C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001890E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018910 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018912 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018914                            ; ===========================================================================
00018914                            
00018914                            loc_18302:				; XREF: Obj73_ShipIndex
00018914 1028 003F                  		move.b	$3F(a0),d0
00018918 5428 003F                  		addq.b	#2,$3F(a0)
0001891C 4EB9 0000 2C22             		jsr	(CalcSine).l
00018922 E440                       		asr.w	#2,d0
00018924 3140 0012                  		move.w	d0,$12(a0)
00018928 317C FF00 0010             		move.w	#-$100,$10(a0)
0001892E 6100 F592                  		bsr.w	BossMove
00018932 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018938 6600                       		bne.s	loc_18334
0001893A 5428 0025                  		addq.b	#2,$25(a0)
0001893E 4228 0028                  		clr.b	$28(a0)
00018942 42A8 0010                  		clr.l	$10(a0)
00018946                            
00018946                            loc_18334:
00018946 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001894C 1140 0034                  		move.b	d0,$34(a0)
00018950                            
00018950                            loc_1833E:
00018950 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018956 3168 0030 0008             		move.w	$30(a0),8(a0)
0001895C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018962 6400                       		bcc.s	locret_18390
00018964 4A28 0022                  		tst.b	$22(a0)
00018968 6B00                       		bmi.s	loc_18392
0001896A 4A28 0020                  		tst.b	$20(a0)
0001896E 6600                       		bne.s	locret_18390
00018970 4A28 003E                  		tst.b	$3E(a0)
00018974 6600                       		bne.s	loc_18374
00018976 117C 0028 003E             		move.b	#$28,$3E(a0)
0001897C 303C 00AC                  		move.w	#$AC,d0
00018980 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018986                            
00018986                            loc_18374:
00018986 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001898A 7000                       		moveq	#0,d0
0001898C 4A51                       		tst.w	(a1)
0001898E 6600                       		bne.s	loc_18382
00018990 303C 0EEE                  		move.w	#$EEE,d0
00018994                            
00018994                            loc_18382:
00018994 3280                       		move.w	d0,(a1)
00018996 5328 003E                  		subq.b	#1,$3E(a0)
0001899A 6600                       		bne.s	locret_18390
0001899C 117C 000F 0020             		move.b	#$F,$20(a0)
000189A2                            
000189A2                            locret_18390:
000189A2 4E75                       		rts	
000189A4                            ; ===========================================================================
000189A4                            
000189A4                            loc_18392:				; XREF: loc_1833E
000189A4 7064                       		moveq	#100,d0
000189A6 6100 0000                  		bsr.w	AddPoints
000189AA 117C 0004 0025             		move.b	#4,$25(a0)
000189B0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000189B6 4268 0010                  		clr.w	$10(a0)
000189BA 4E75                       		rts	
000189BC                            ; ===========================================================================
000189BC                            
000189BC                            loc_183AA:				; XREF: Obj73_ShipIndex
000189BC 7000                       		moveq	#0,d0
000189BE 1028 0028                  		move.b	$28(a0),d0
000189C2 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189C6 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189CA 0228 0006 0028             		andi.b	#6,$28(a0)
000189D0 6000 FF7E                  		bra.w	loc_1833E
000189D4                            ; ===========================================================================
000189D4 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000189D6 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D8 0000                       		dc.w loc_183CA-off_183C2
000189DA 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189DC                            ; ===========================================================================
000189DC                            
000189DC                            loc_183CA:				; XREF: off_183C2
000189DC 4A68 0010                  		tst.w	$10(a0)
000189E0 6600                       		bne.s	loc_183FE
000189E2 7040                       		moveq	#$40,d0
000189E4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189EA 6700                       		beq.s	loc_183E6
000189EC 6500                       		bcs.s	loc_183DE
000189EE 4440                       		neg.w	d0
000189F0                            
000189F0                            loc_183DE:
000189F0 3140 0012                  		move.w	d0,$12(a0)
000189F4 6000 F4CC                  		bra.w	BossMove
000189F8                            ; ===========================================================================
000189F8                            
000189F8                            loc_183E6:
000189F8 317C 0200 0010             		move.w	#$200,$10(a0)
000189FE 317C 0100 0012             		move.w	#$100,$12(a0)
00018A04 0828 0000 0022             		btst	#0,$22(a0)
00018A0A 6600                       		bne.s	loc_183FE
00018A0C 4468 0010                  		neg.w	$10(a0)
00018A10                            
00018A10                            loc_183FE:
00018A10 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018A16 6400                       		bcc.s	Obj73_MakeLava
00018A18 6100 F4A8                  		bsr.w	BossMove
00018A1C 5968 0012                  		subq.w	#4,$12(a0)
00018A20                            
00018A20                            Obj73_MakeLava:
00018A20 5328 0034                  		subq.b	#1,$34(a0)
00018A24 6400                       		bcc.s	loc_1845C
00018A26 4EB9 0000 E000             		jsr	SingleObjLoad
00018A2C 6600                       		bne.s	loc_1844A
00018A2E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A32 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A38 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A3E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A44 80FC 0050                  		divu.w	#$50,d0
00018A48 4840                       		swap	d0
00018A4A 0640 1878                  		addi.w	#$1878,d0
00018A4E 3340 0008                  		move.w	d0,8(a1)
00018A52 EE09                       		lsr.b	#7,d1
00018A54 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A5A                            
00018A5A                            loc_1844A:
00018A5A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A60 0200 001F                  		andi.b	#$1F,d0
00018A64 0600 0040                  		addi.b	#$40,d0
00018A68 1140 0034                  		move.b	d0,$34(a0)
00018A6C                            
00018A6C                            loc_1845C:
00018A6C 0828 0000 0022             		btst	#0,$22(a0)
00018A72 6700                       		beq.s	loc_18474
00018A74 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A7A 6D00                       		blt.s	locret_1849C
00018A7C 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A82 6000                       		bra.s	loc_18482
00018A84                            ; ===========================================================================
00018A84                            
00018A84                            loc_18474:
00018A84 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A8A 6E00                       		bgt.s	locret_1849C
00018A8C 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A92                            
00018A92                            loc_18482:
00018A92 4268 0010                  		clr.w	$10(a0)
00018A96 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A9C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018AA2 6400                       		bcc.s	loc_18498
00018AA4 4468 0012                  		neg.w	$12(a0)
00018AA8                            
00018AA8                            loc_18498:
00018AA8 5428 0028                  		addq.b	#2,$28(a0)
00018AAC                            
00018AAC                            locret_1849C:
00018AAC 4E75                       		rts	
00018AAE                            ; ===========================================================================
00018AAE                            
00018AAE                            Obj73_MakeLava2:			; XREF: off_183C2
00018AAE 6100 F412                  		bsr.w	BossMove
00018AB2 3028 0038                  		move.w	$38(a0),d0
00018AB6 0440 022C                  		subi.w	#$22C,d0
00018ABA 6E00                       		bgt.s	locret_184F4
00018ABC 303C 022C                  		move.w	#$22C,d0
00018AC0 4A68 0012                  		tst.w	$12(a0)
00018AC4 6700                       		beq.s	loc_184EA
00018AC6 4268 0012                  		clr.w	$12(a0)
00018ACA 317C 0050 003C             		move.w	#$50,$3C(a0)
00018AD0 0868 0000 0022             		bchg	#0,$22(a0)
00018AD6 4EB9 0000 E000             		jsr	SingleObjLoad
00018ADC 6600                       		bne.s	loc_184EA
00018ADE 3368 0030 0008             		move.w	$30(a0),8(a1)
00018AE4 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018AEA 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AF0 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018AF4 137C 0001 0028             		move.b	#1,$28(a1)
00018AFA                            
00018AFA                            loc_184EA:
00018AFA 5368 003C                  		subq.w	#1,$3C(a0)
00018AFE 6600                       		bne.s	locret_184F4
00018B00 5428 0028                  		addq.b	#2,$28(a0)
00018B04                            
00018B04                            locret_184F4:
00018B04 4E75                       		rts	
00018B06                            ; ===========================================================================
00018B06                            
00018B06                            loc_184F6:				; XREF: Obj73_ShipIndex
00018B06 5368 003C                  		subq.w	#1,$3C(a0)
00018B0A 6B00                       		bmi.s	loc_18500
00018B0C 6000 F372                  		bra.w	BossDefeated
00018B10                            ; ===========================================================================
00018B10                            
00018B10                            loc_18500:
00018B10 08E8 0000 0022             		bset	#0,$22(a0)
00018B16 08A8 0007 0022             		bclr	#7,$22(a0)
00018B1C 4268 0010                  		clr.w	$10(a0)
00018B20 5428 0025                  		addq.b	#2,$25(a0)
00018B24 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B2A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B2E 6600                       		bne.s	locret_1852A
00018B30 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B36 4268 0012                  		clr.w	$12(a0)
00018B3A                            
00018B3A                            locret_1852A:
00018B3A 4E75                       		rts	
00018B3C                            ; ===========================================================================
00018B3C                            
00018B3C                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B3C 5268 003C                  		addq.w	#1,$3C(a0)
00018B40 6700                       		beq.s	loc_18544
00018B42 6A00                       		bpl.s	loc_1854E
00018B44 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B4A 6400                       		bcc.s	loc_18544
00018B4C 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B52 6000                       		bra.s	loc_1857A
00018B54                            ; ===========================================================================
00018B54                            
00018B54                            loc_18544:
00018B54 4268 0012                  		clr.w	$12(a0)
00018B58 4268 003C                  		clr.w	$3C(a0)
00018B5C 6000                       		bra.s	loc_1857A
00018B5E                            ; ===========================================================================
00018B5E                            
00018B5E                            loc_1854E:
00018B5E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B64 6500                       		bcs.s	loc_18566
00018B66 6700                       		beq.s	loc_1856C
00018B68 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B6E 6500                       		bcs.s	loc_1857A
00018B70 5428 0025                  		addq.b	#2,$25(a0)
00018B74 6000                       		bra.s	loc_1857A
00018B76                            ; ===========================================================================
00018B76                            
00018B76                            loc_18566:
00018B76 5168 0012                  		subq.w	#8,$12(a0)
00018B7A 6000                       		bra.s	loc_1857A
00018B7C                            ; ===========================================================================
00018B7C                            
00018B7C                            loc_1856C:
00018B7C 4268 0012                  		clr.w	$12(a0)
00018B80 303C 0083                  		move.w	#$83,d0
00018B84 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B8A                            
00018B8A                            loc_1857A:
00018B8A 6100 F336                  		bsr.w	BossMove
00018B8E 6000 FDC0                  		bra.w	loc_1833E
00018B92                            ; ===========================================================================
00018B92                            
00018B92                            loc_18582:				; XREF: Obj73_ShipIndex
00018B92 317C 0500 0010             		move.w	#$500,$10(a0)
00018B98 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B9E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018BA4 6400                       		bcc.s	loc_1859C
00018BA6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018BAA 6000                       		bra.s	loc_185A2
00018BAC                            ; ===========================================================================
00018BAC                            
00018BAC                            loc_1859C:
00018BAC 4A28 0001                  		tst.b	1(a0)
00018BB0 6A00                       		bpl.s	Obj73_ShipDel
00018BB2                            
00018BB2                            loc_185A2:
00018BB2 6100 F30E                  		bsr.w	BossMove
00018BB6 6000 FD98                  		bra.w	loc_1833E
00018BBA                            ; ===========================================================================
00018BBA                            
00018BBA                            Obj73_ShipDel:
00018BBA 4EF9 0000 DBB6             		jmp	DeleteObject
00018BC0                            ; ===========================================================================
00018BC0                            
00018BC0                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BC0 7000                       		moveq	#0,d0
00018BC2 7201                       		moveq	#1,d1
00018BC4 2268 0034                  		movea.l	$34(a0),a1
00018BC8 1029 0025                  		move.b	$25(a1),d0
00018BCC 5540                       		subq.w	#2,d0
00018BCE 6600                       		bne.s	loc_185D2
00018BD0 0829 0001 0028             		btst	#1,$28(a1)
00018BD6 6700                       		beq.s	loc_185DA
00018BD8 4A69 0012                  		tst.w	$12(a1)
00018BDC 6600                       		bne.s	loc_185DA
00018BDE 7204                       		moveq	#4,d1
00018BE0 6000                       		bra.s	loc_185EE
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            loc_185D2:
00018BE2 5500                       		subq.b	#2,d0
00018BE4 6B00                       		bmi.s	loc_185DA
00018BE6 720A                       		moveq	#$A,d1
00018BE8 6000                       		bra.s	loc_185EE
00018BEA                            ; ===========================================================================
00018BEA                            
00018BEA                            loc_185DA:
00018BEA 4A29 0020                  		tst.b	$20(a1)
00018BEE 6600                       		bne.s	loc_185E4
00018BF0 7205                       		moveq	#5,d1
00018BF2 6000                       		bra.s	loc_185EE
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            loc_185E4:
00018BF4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BFA 6500                       		bcs.s	loc_185EE
00018BFC 7204                       		moveq	#4,d1
00018BFE                            
00018BFE                            loc_185EE:
00018BFE 1141 001C                  		move.b	d1,$1C(a0)
00018C02 5900                       		subq.b	#4,d0
00018C04 6600                       		bne.s	loc_18602
00018C06 117C 0006 001C             		move.b	#6,$1C(a0)
00018C0C 4A28 0001                  		tst.b	1(a0)
00018C10 6A00                       		bpl.s	Obj73_FaceDel
00018C12                            
00018C12                            loc_18602:
00018C12 6000                       		bra.s	Obj73_Display
00018C14                            ; ===========================================================================
00018C14                            
00018C14                            Obj73_FaceDel:
00018C14 4EF9 0000 DBB6             		jmp	DeleteObject
00018C1A                            ; ===========================================================================
00018C1A                            
00018C1A                            Obj73_FlameMain:			; XREF: Obj73_Index
00018C1A 117C 0007 001C             		move.b	#7,$1C(a0)
00018C20 2268 0034                  		movea.l	$34(a0),a1
00018C24 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C2A 6D00                       		blt.s	loc_1862A
00018C2C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C32 4A28 0001                  		tst.b	1(a0)
00018C36 6A00                       		bpl.s	Obj73_FlameDel
00018C38 6000                       		bra.s	loc_18636
00018C3A                            ; ===========================================================================
00018C3A                            
00018C3A                            loc_1862A:
00018C3A 4A69 0010                  		tst.w	$10(a1)
00018C3E 6700                       		beq.s	loc_18636
00018C40 117C 0008 001C             		move.b	#8,$1C(a0)
00018C46                            
00018C46                            loc_18636:
00018C46 6000                       		bra.s	Obj73_Display
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C48 4EF9 0000 DBB6             		jmp	DeleteObject
00018C4E                            ; ===========================================================================
00018C4E                            
00018C4E                            Obj73_Display:
00018C4E 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
00018C54 4EB9 0000 AC4A             		jsr	AnimateSprite
00018C5A                            
00018C5A                            loc_1864A:
00018C5A 2268 0034                  		movea.l	$34(a0),a1
00018C5E 3169 0008 0008             		move.w	8(a1),8(a0)
00018C64 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C6A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C70 7003                       		moveq	#3,d0
00018C72 C028 0022                  		and.b	$22(a0),d0
00018C76 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C7C 8128 0001                  		or.b	d0,1(a0)
00018C80 4EF9 0000 DB7A             		jmp	DisplaySprite
00018C86                            ; ===========================================================================
00018C86                            
00018C86                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C86 2268 0034                  		movea.l	$34(a0),a1
00018C8A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C90 6600                       		bne.s	loc_18688
00018C92 4A28 0001                  		tst.b	1(a0)
00018C96 6A00                       		bpl.s	Obj73_TubeDel
00018C98                            
00018C98                            loc_18688:
00018C98 217C 0001 83EA 0004        		move.l	#Map_BossItems,4(a0)
00018CA0 317C 246C 0002             		move.w	#$246C,2(a0)
00018CA6 117C 0004 001A             		move.b	#4,$1A(a0)
00018CAC 60AC                       		bra.s	loc_1864A
00018CAE                            ; ===========================================================================
00018CAE                            
00018CAE                            Obj73_TubeDel:
00018CAE 4EF9 0000 DBB6             		jmp	DeleteObject
00018CB4                            ; ===========================================================================
00018CB4                            ; ---------------------------------------------------------------------------
00018CB4                            ; Object 74 - lava that	Eggman drops (MZ)
00018CB4                            ; ---------------------------------------------------------------------------
00018CB4                            
00018CB4                            Obj74:					; XREF: Obj_Index
00018CB4 7000                       		moveq	#0,d0
00018CB6 1028 0024                  		move.b	$24(a0),d0
00018CBA 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018CBE 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CC2 4EF9 0000 DB7A             		jmp	DisplaySprite
00018CC8                            ; ===========================================================================
00018CC8 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CCA 0000                       		dc.w Obj74_Action-Obj74_Index
00018CCC 0000                       		dc.w loc_18886-Obj74_Index
00018CCE 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CD0                            ; ===========================================================================
00018CD0                            
00018CD0                            Obj74_Main:				; XREF: Obj74_Index
00018CD0 117C 0008 0016             		move.b	#8,$16(a0)
00018CD6 117C 0008 0017             		move.b	#8,$17(a0)
00018CDC 217C 0000 B83E 0004        		move.l	#Map_obj14,4(a0)
00018CE4 317C 0345 0002             		move.w	#$345,2(a0)
00018CEA 117C 0004 0001             		move.b	#4,1(a0)
00018CF0 117C 0005 0018             		move.b	#5,$18(a0)
00018CF6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CFC 117C 0008 0019             		move.b	#8,$19(a0)
00018D02 5428 0024                  		addq.b	#2,$24(a0)
00018D06 4A28 0028                  		tst.b	$28(a0)
00018D0A 6600                       		bne.s	loc_1870A
00018D0C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D12 5428 0024                  		addq.b	#2,$24(a0)
00018D16 6000 0000                  		bra.w	loc_18886
00018D1A                            ; ===========================================================================
00018D1A                            
00018D1A                            loc_1870A:
00018D1A 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D20 303C 00AE                  		move.w	#$AE,d0
00018D24 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D2A                            
00018D2A                            Obj74_Action:				; XREF: Obj74_Index
00018D2A 7000                       		moveq	#0,d0
00018D2C 1028 0025                  		move.b	$25(a0),d0
00018D30 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D34 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D38 4EB9 0000 DB54             		jsr	SpeedToPos
00018D3E 43F9 0000 EA34             		lea	(Ani_obj14).l,a1
00018D44 4EB9 0000 AC4A             		jsr	AnimateSprite
00018D4A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D50 6200                       		bhi.s	Obj74_Delete
00018D52 4E75                       		rts	
00018D54                            ; ===========================================================================
00018D54                            
00018D54                            Obj74_Delete:
00018D54 4EF9 0000 DBB6             		jmp	DeleteObject
00018D5A                            ; ===========================================================================
00018D5A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D5C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D5E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D60 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D62                            ; ===========================================================================
00018D62                            
00018D62                            Obj74_Drop:				; XREF: Obj74_Index2
00018D62 08E8 0001 0022             		bset	#1,$22(a0)
00018D68 5328 0029                  		subq.b	#1,$29(a0)
00018D6C 6A00                       		bpl.s	locret_18780
00018D6E 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D74 4228 0028                  		clr.b	$28(a0)
00018D78 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D7E 08A8 0001 0022             		bclr	#1,$22(a0)
00018D84 6100 C698                  		bsr.w	ObjHitFloor
00018D88 4A41                       		tst.w	d1
00018D8A 6A00                       		bpl.s	locret_18780
00018D8C 5428 0025                  		addq.b	#2,$25(a0)
00018D90                            
00018D90                            locret_18780:
00018D90 4E75                       		rts	
00018D92                            ; ===========================================================================
00018D92                            
00018D92                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D92 5568 000C                  		subq.w	#2,$C(a0)
00018D96 08E8 0007 0002             		bset	#7,2(a0)
00018D9C 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018DA2 4268 0012                  		clr.w	$12(a0)
00018DA6 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DAC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018DB2 117C 0003 0029             		move.b	#3,$29(a0)
00018DB8 4EB9 0000 E016             		jsr	SingleObjLoad2
00018DBE 6600                       		bne.s	loc_187CA
00018DC0 47D1                       		lea	(a1),a3
00018DC2 45D0                       		lea	(a0),a2
00018DC4 7003                       		moveq	#3,d0
00018DC6                            
00018DC6                            Obj74_Loop:
00018DC6 26DA                       		move.l	(a2)+,(a3)+
00018DC8 26DA                       		move.l	(a2)+,(a3)+
00018DCA 26DA                       		move.l	(a2)+,(a3)+
00018DCC 26DA                       		move.l	(a2)+,(a3)+
00018DCE 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018DD2                            
00018DD2 4469 0010                  		neg.w	$10(a1)
00018DD6 5429 0025                  		addq.b	#2,$25(a1)
00018DDA                            
00018DDA                            loc_187CA:
00018DDA 5428 0025                  		addq.b	#2,$25(a0)
00018DDE 4E75                       		rts	
00018DE0                            
00018DE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DE0                            
00018DE0                            
00018DE0                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018DE0 4EB9 0000 E016             		jsr	SingleObjLoad2
00018DE6 6600                       		bne.s	locret_187EE
00018DE8 3368 0008 0008             		move.w	8(a0),8(a1)
00018DEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DF4 12BC 0074                  		move.b	#$74,(a1)
00018DF8 337C 0067 0028             		move.w	#$67,$28(a1)
00018DFE                            
00018DFE                            locret_187EE:
00018DFE 4E75                       		rts	
00018E00                            ; End of function Obj74_Duplicate2
00018E00                            
00018E00                            ; ===========================================================================
00018E00                            
00018E00                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018E00 6100 C61C                  		bsr.w	ObjHitFloor
00018E04 4A41                       		tst.w	d1
00018E06 6A00                       		bpl.s	loc_18826
00018E08 3028 0008                  		move.w	8(a0),d0
00018E0C 0C40 1940                  		cmpi.w	#$1940,d0
00018E10 6E00                       		bgt.s	loc_1882C
00018E12 3228 0030                  		move.w	$30(a0),d1
00018E16 B240                       		cmp.w	d0,d1
00018E18 6700                       		beq.s	loc_1881E
00018E1A 0240 0010                  		andi.w	#$10,d0
00018E1E 0241 0010                  		andi.w	#$10,d1
00018E22 B240                       		cmp.w	d0,d1
00018E24 6700                       		beq.s	loc_1881E
00018E26 61B8                       		bsr.s	Obj74_Duplicate2
00018E28 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E2E                            
00018E2E                            loc_1881E:
00018E2E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E34 4E75                       		rts	
00018E36                            ; ===========================================================================
00018E36                            
00018E36                            loc_18826:
00018E36 5428 0025                  		addq.b	#2,$25(a0)
00018E3A 4E75                       		rts	
00018E3C                            ; ===========================================================================
00018E3C                            
00018E3C                            loc_1882C:
00018E3C 5428 0024                  		addq.b	#2,$24(a0)
00018E40 4E75                       		rts	
00018E42                            ; ===========================================================================
00018E42                            
00018E42                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E42 08A8 0001 0022             		bclr	#1,$22(a0)
00018E48 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E4E 3028 0008                  		move.w	8(a0),d0
00018E52 9068 0032                  		sub.w	$32(a0),d0
00018E56 6A00                       		bpl.s	loc_1884A
00018E58 4440                       		neg.w	d0
00018E5A                            
00018E5A                            loc_1884A:
00018E5A 0C40 0012                  		cmpi.w	#$12,d0
00018E5E 6600                       		bne.s	loc_18856
00018E60 08A8 0007 0002             		bclr	#7,2(a0)
00018E66                            
00018E66                            loc_18856:
00018E66 6100 C5B6                  		bsr.w	ObjHitFloor
00018E6A 4A41                       		tst.w	d1
00018E6C 6A00                       		bpl.s	locret_1887E
00018E6E 5328 0029                  		subq.b	#1,$29(a0)
00018E72 6700                       		beq.s	Obj74_Delete2
00018E74 4268 0012                  		clr.w	$12(a0)
00018E78 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E7E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E84 08E8 0007 0002             		bset	#7,2(a0)
00018E8A 5528 0025                  		subq.b	#2,$25(a0)
00018E8E                            
00018E8E                            locret_1887E:
00018E8E 4E75                       		rts	
00018E90                            ; ===========================================================================
00018E90                            
00018E90                            Obj74_Delete2:
00018E90 4EF9 0000 DBB6             		jmp	DeleteObject
00018E96                            ; ===========================================================================
00018E96                            
00018E96                            loc_18886:				; XREF: Obj74_Index
00018E96 08E8 0007 0002             		bset	#7,2(a0)
00018E9C 5328 0029                  		subq.b	#1,$29(a0)
00018EA0 6600                       		bne.s	Obj74_Animate
00018EA2 117C 0001 001C             		move.b	#1,$1C(a0)
00018EA8 5968 000C                  		subq.w	#4,$C(a0)
00018EAC 4228 0020                  		clr.b	$20(a0)
00018EB0                            
00018EB0                            Obj74_Animate:
00018EB0 43F9 0000 EA34             		lea	(Ani_obj14).l,a1
00018EB6 4EF9 0000 AC4A             		jmp	AnimateSprite
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            Obj74_Delete3:				; XREF: Obj74_Index
00018EBC 4EF9 0000 DBB6             		jmp	DeleteObject
00018EC2                            ; ===========================================================================
00018EC2                            
00018EC2                            Obj7A_Delete:
00018EC2 4EF9 0000 DBB6             		jmp	DeleteObject
00018EC8                            ; ===========================================================================
00018EC8                            ; ---------------------------------------------------------------------------
00018EC8                            ; Object 7A - Eggman (SLZ)
00018EC8                            ; ---------------------------------------------------------------------------
00018EC8                            
00018EC8                            Obj7A:					; XREF: Obj_Index
00018EC8 7000                       		moveq	#0,d0
00018ECA 1028 0024                  		move.b	$24(a0),d0
00018ECE 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018ED2 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018ED6                            ; ===========================================================================
00018ED6 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018ED8 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018EDA 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018EDC 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018EDE 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018EE0                            
00018EE0 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EE3 0401 04                    		dc.b 4,	1, 4
00018EE6 0607 04                    		dc.b 6,	7, 4
00018EE9 0800 03                    		dc.b 8,	0, 3
00018EEC                            ; ===========================================================================
00018EEC                            
00018EEC                            Obj7A_Main:				; XREF: Obj7A_Index
00018EEC 317C 2188 0008             		move.w	#$2188,8(a0)
00018EF2 317C 0228 000C             		move.w	#$228,$C(a0)
00018EF8 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EFE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F04 117C 000F 0020             		move.b	#$F,$20(a0)
00018F0A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018F10 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018F14 2248                       		movea.l	a0,a1
00018F16 7203                       		moveq	#3,d1
00018F18 6000                       		bra.s	Obj7A_LoadBoss
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            Obj7A_Loop:
00018F1A 4EB9 0000 E016             		jsr	SingleObjLoad2
00018F20 6600                       		bne.s	loc_1895C
00018F22 12BC 007A                  		move.b	#$7A,0(a1)
00018F26 3368 0008 0008             		move.w	8(a0),8(a1)
00018F2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F32                            
00018F32                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F32 08A8 0000 0022             		bclr	#0,$22(a0)
00018F38 4229 0025                  		clr.b	$25(a1)
00018F3C 135A 0024                  		move.b	(a2)+,$24(a1)
00018F40 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F44 135A 0018                  		move.b	(a2)+,$18(a1)
00018F48 237C 0001 8322 0004        		move.l	#Map_Eggman,4(a1)
00018F50 337C 0400 0002             		move.w	#$400,2(a1)
00018F56 137C 0004 0001             		move.b	#4,1(a1)
00018F5C 137C 0020 0019             		move.b	#$20,$19(a1)
00018F62 2348 0034                  		move.l	a0,$34(a1)
00018F66 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F6A                            
00018F6A                            loc_1895C:
00018F6A 43F8 D040                  		lea	($FFFFD040).w,a1
00018F6E 45E8 002A                  		lea	$2A(a0),a2
00018F72 705E                       		moveq	#$5E,d0
00018F74 723E                       		moveq	#$3E,d1
00018F76                            
00018F76                            loc_18968:
00018F76 B011                       		cmp.b	(a1),d0
00018F78 6600                       		bne.s	loc_18974
00018F7A 4A29 0028                  		tst.b	$28(a1)
00018F7E 6700                       		beq.s	loc_18974
00018F80 34C9                       		move.w	a1,(a2)+
00018F82                            
00018F82                            loc_18974:
00018F82 D2FC 0040                  		adda.w	#$40,a1
00018F86 51C9 FFEE                  		dbf	d1,loc_18968
00018F8A                            
00018F8A                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F8A 7000                       		moveq	#0,d0
00018F8C 1028 0025                  		move.b	$25(a0),d0
00018F90 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F94 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F98 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
00018F9E 4EB9 0000 AC4A             		jsr	AnimateSprite
00018FA4 7003                       		moveq	#3,d0
00018FA6 C028 0022                  		and.b	$22(a0),d0
00018FAA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018FB0 8128 0001                  		or.b	d0,1(a0)
00018FB4 4EF9 0000 DB7A             		jmp	DisplaySprite
00018FBA                            ; ===========================================================================
00018FBA 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018FBC 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018FBE 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FC0 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FC2 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FC4 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FC6                            ; ===========================================================================
00018FC6                            
00018FC6                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FC6 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FCC 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018FD2 6400                       		bcc.s	loc_189CA
00018FD4 5428 0025                  		addq.b	#2,$25(a0)
00018FD8                            
00018FD8                            loc_189CA:
00018FD8 6100 EEE8                  		bsr.w	BossMove
00018FDC 1028 003F                  		move.b	$3F(a0),d0
00018FE0 5428 003F                  		addq.b	#2,$3F(a0)
00018FE4 4EB9 0000 2C22             		jsr	(CalcSine).l
00018FEA EC40                       		asr.w	#6,d0
00018FEC D068 0038                  		add.w	$38(a0),d0
00018FF0 3140 000C                  		move.w	d0,$C(a0)
00018FF4 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FFA 6000                       		bra.s	loc_189FE
00018FFC                            ; ===========================================================================
00018FFC                            
00018FFC                            loc_189EE:
00018FFC 6100 EEC4                  		bsr.w	BossMove
00019000 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019006 3168 0030 0008             		move.w	$30(a0),8(a0)
0001900C                            
0001900C                            loc_189FE:
0001900C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019012 6400                       		bcc.s	locret_18A44
00019014 4A28 0022                  		tst.b	$22(a0)
00019018 6B00                       		bmi.s	loc_18A46
0001901A 4A28 0020                  		tst.b	$20(a0)
0001901E 6600                       		bne.s	locret_18A44
00019020 4A28 003E                  		tst.b	$3E(a0)
00019024 6600                       		bne.s	loc_18A28
00019026 117C 0020 003E             		move.b	#$20,$3E(a0)
0001902C 303C 00AC                  		move.w	#$AC,d0
00019030 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019036                            
00019036                            loc_18A28:
00019036 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001903A 7000                       		moveq	#0,d0
0001903C 4A51                       		tst.w	(a1)
0001903E 6600                       		bne.s	loc_18A36
00019040 303C 0EEE                  		move.w	#$EEE,d0
00019044                            
00019044                            loc_18A36:
00019044 3280                       		move.w	d0,(a1)
00019046 5328 003E                  		subq.b	#1,$3E(a0)
0001904A 6600                       		bne.s	locret_18A44
0001904C 117C 000F 0020             		move.b	#$F,$20(a0)
00019052                            
00019052                            locret_18A44:
00019052 4E75                       		rts	
00019054                            ; ===========================================================================
00019054                            
00019054                            loc_18A46:
00019054 7064                       		moveq	#100,d0
00019056 6100 0000                  		bsr.w	AddPoints
0001905A 117C 0006 0025             		move.b	#6,$25(a0)
00019060 117C 0078 003C             		move.b	#$78,$3C(a0)
00019066 4268 0010                  		clr.w	$10(a0)
0001906A 4E75                       		rts	
0001906C                            ; ===========================================================================
0001906C                            
0001906C                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001906C 3028 0030                  		move.w	$30(a0),d0
00019070 317C 0200 0010             		move.w	#$200,$10(a0)
00019076 0828 0000 0022             		btst	#0,$22(a0)
0001907C 6600                       		bne.s	loc_18A7C
0001907E 4468 0010                  		neg.w	$10(a0)
00019082 0C40 2008                  		cmpi.w	#$2008,d0
00019086 6E00                       		bgt.s	loc_18A88
00019088 6000                       		bra.s	loc_18A82
0001908A                            ; ===========================================================================
0001908A                            
0001908A                            loc_18A7C:
0001908A 0C40 2138                  		cmpi.w	#$2138,d0
0001908E 6D00                       		blt.s	loc_18A88
00019090                            
00019090                            loc_18A82:
00019090 0868 0000 0022             		bchg	#0,$22(a0)
00019096                            
00019096                            loc_18A88:
00019096 3028 0008                  		move.w	8(a0),d0
0001909A 72FF                       		moveq	#-1,d1
0001909C 7402                       		moveq	#2,d2
0001909E 45E8 002A                  		lea	$2A(a0),a2
000190A2 7828                       		moveq	#$28,d4
000190A4 4A68 0010                  		tst.w	$10(a0)
000190A8 6A00                       		bpl.s	loc_18A9E
000190AA 4444                       		neg.w	d4
000190AC                            
000190AC                            loc_18A9E:
000190AC 321A                       		move.w	(a2)+,d1
000190AE 2641                       		movea.l	d1,a3
000190B0 082B 0003 0022             		btst	#3,$22(a3)
000190B6 6600                       		bne.s	loc_18AB4
000190B8 362B 0008                  		move.w	8(a3),d3
000190BC D644                       		add.w	d4,d3
000190BE 9640                       		sub.w	d0,d3
000190C0 6700                       		beq.s	loc_18AC0
000190C2                            
000190C2                            loc_18AB4:
000190C2 51CA FFE8                  		dbf	d2,loc_18A9E
000190C6                            
000190C6 1142 0028                  		move.b	d2,$28(a0)
000190CA 6000 FF0C                  		bra.w	loc_189CA
000190CE                            ; ===========================================================================
000190CE                            
000190CE                            loc_18AC0:
000190CE 1142 0028                  		move.b	d2,$28(a0)
000190D2 5428 0025                  		addq.b	#2,$25(a0)
000190D6 117C 0028 003C             		move.b	#$28,$3C(a0)
000190DC 6000 FEFA                  		bra.w	loc_189CA
000190E0                            ; ===========================================================================
000190E0                            
000190E0                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000190E0 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190E6 6600                       		bne.s	loc_18B36
000190E8 70FF                       		moveq	#-1,d0
000190EA 1028 0028                  		move.b	$28(a0),d0
000190EE 4880                       		ext.w	d0
000190F0 6B00                       		bmi.s	loc_18B40
000190F2 5540                       		subq.w	#2,d0
000190F4 4440                       		neg.w	d0
000190F6 D040                       		add.w	d0,d0
000190F8 43E8 002A                  		lea	$2A(a0),a1
000190FC 3031 0000                  		move.w	(a1,d0.w),d0
00019100 2440                       		movea.l	d0,a2
00019102 43F8 D040                  		lea	($FFFFD040).w,a1
00019106 723E                       		moveq	#$3E,d1
00019108                            
00019108                            loc_18AFA:
00019108 B0A9 003C                  		cmp.l	$3C(a1),d0
0001910C 6700                       		beq.s	loc_18B40
0001910E D2FC 0040                  		adda.w	#$40,a1
00019112 51C9 FFF4                  		dbf	d1,loc_18AFA
00019116                            
00019116 2F08                       		move.l	a0,-(sp)
00019118 41D2                       		lea	(a2),a0
0001911A 4EB9 0000 E016             		jsr	SingleObjLoad2
00019120 205F                       		movea.l	(sp)+,a0
00019122 6600                       		bne.s	loc_18B40
00019124 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019128 3368 0008 0008             		move.w	8(a0),8(a1)
0001912E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019134 0669 0020 000C             		addi.w	#$20,$C(a1)
0001913A 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019140 234A 003C                  		move.l	a2,$3C(a1)
00019144                            
00019144                            loc_18B36:
00019144 5328 003C                  		subq.b	#1,$3C(a0)
00019148 6700                       		beq.s	loc_18B40
0001914A 6000 FEC0                  		bra.w	loc_189FE
0001914E                            ; ===========================================================================
0001914E                            
0001914E                            loc_18B40:
0001914E 5528 0025                  		subq.b	#2,$25(a0)
00019152 6000 FE84                  		bra.w	loc_189CA
00019156                            ; ===========================================================================
00019156                            
00019156                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019156 5328 003C                  		subq.b	#1,$3C(a0)
0001915A 6B00                       		bmi.s	loc_18B52
0001915C 6000 ED22                  		bra.w	BossDefeated
00019160                            ; ===========================================================================
00019160                            
00019160                            loc_18B52:
00019160 5428 0025                  		addq.b	#2,$25(a0)
00019164 4268 0012                  		clr.w	$12(a0)
00019168 08E8 0000 0022             		bset	#0,$22(a0)
0001916E 08A8 0007 0022             		bclr	#7,$22(a0)
00019174 4268 0010                  		clr.w	$10(a0)
00019178 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001917E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019182 6600                       		bne.s	loc_18B7C
00019184 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001918A                            
0001918A                            loc_18B7C:
0001918A 6000 FE80                  		bra.w	loc_189FE
0001918E                            ; ===========================================================================
0001918E                            
0001918E                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001918E 5228 003C                  		addq.b	#1,$3C(a0)
00019192 6700                       		beq.s	loc_18B90
00019194 6A00                       		bpl.s	loc_18B96
00019196 0668 0018 0012             		addi.w	#$18,$12(a0)
0001919C 6000                       		bra.s	loc_18BC2
0001919E                            ; ===========================================================================
0001919E                            
0001919E                            loc_18B90:
0001919E 4268 0012                  		clr.w	$12(a0)
000191A2 6000                       		bra.s	loc_18BC2
000191A4                            ; ===========================================================================
000191A4                            
000191A4                            loc_18B96:
000191A4 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000191AA 6500                       		bcs.s	loc_18BAE
000191AC 6700                       		beq.s	loc_18BB4
000191AE 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000191B4 6500                       		bcs.s	loc_18BC2
000191B6 5428 0025                  		addq.b	#2,$25(a0)
000191BA 6000                       		bra.s	loc_18BC2
000191BC                            ; ===========================================================================
000191BC                            
000191BC                            loc_18BAE:
000191BC 5168 0012                  		subq.w	#8,$12(a0)
000191C0 6000                       		bra.s	loc_18BC2
000191C2                            ; ===========================================================================
000191C2                            
000191C2                            loc_18BB4:
000191C2 4268 0012                  		clr.w	$12(a0)
000191C6 303C 0084                  		move.w	#$84,d0
000191CA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191D0                            
000191D0                            loc_18BC2:
000191D0 6000 FE2A                  		bra.w	loc_189EE
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000191D4 317C 0400 0010             		move.w	#$400,$10(a0)
000191DA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000191E0 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191E6 6400                       		bcc.s	loc_18BE0
000191E8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191EC 6000                       		bra.s	loc_18BE8
000191EE                            ; ===========================================================================
000191EE                            
000191EE                            loc_18BE0:
000191EE 4A28 0001                  		tst.b	1(a0)
000191F2 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191F6                            
000191F6                            loc_18BE8:
000191F6 6100 ECCA                  		bsr.w	BossMove
000191FA 6000 FDDC                  		bra.w	loc_189CA
000191FE                            ; ===========================================================================
000191FE                            
000191FE                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191FE 7000                       		moveq	#0,d0
00019200 7201                       		moveq	#1,d1
00019202 2268 0034                  		movea.l	$34(a0),a1
00019206 1029 0025                  		move.b	$25(a1),d0
0001920A 0C00 0006                  		cmpi.b	#6,d0
0001920E 6B00                       		bmi.s	loc_18C06
00019210 720A                       		moveq	#$A,d1
00019212 6000                       		bra.s	loc_18C1A
00019214                            ; ===========================================================================
00019214                            
00019214                            loc_18C06:
00019214 4A29 0020                  		tst.b	$20(a1)
00019218 6600                       		bne.s	loc_18C10
0001921A 7205                       		moveq	#5,d1
0001921C 6000                       		bra.s	loc_18C1A
0001921E                            ; ===========================================================================
0001921E                            
0001921E                            loc_18C10:
0001921E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019224 6500                       		bcs.s	loc_18C1A
00019226 7204                       		moveq	#4,d1
00019228                            
00019228                            loc_18C1A:
00019228 1141 001C                  		move.b	d1,$1C(a0)
0001922C 0C00 000A                  		cmpi.b	#$A,d0
00019230 6600                       		bne.s	loc_18C32
00019232 117C 0006 001C             		move.b	#6,$1C(a0)
00019238 4A28 0001                  		tst.b	1(a0)
0001923C 6A00 FC84                  		bpl.w	Obj7A_Delete
00019240                            
00019240                            loc_18C32:
00019240 6000                       		bra.s	loc_18C6C
00019242                            ; ===========================================================================
00019242                            
00019242                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019242 117C 0008 001C             		move.b	#8,$1C(a0)
00019248 2268 0034                  		movea.l	$34(a0),a1
0001924C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019252 6600                       		bne.s	loc_18C56
00019254 4A28 0001                  		tst.b	1(a0)
00019258 6A00 FC68                  		bpl.w	Obj7A_Delete
0001925C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019262 6000                       		bra.s	loc_18C6C
00019264                            ; ===========================================================================
00019264                            
00019264                            loc_18C56:
00019264 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001926A 6E00                       		bgt.s	loc_18C6C
0001926C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019272 6D00                       		blt.s	loc_18C6C
00019274 117C 0007 001C             		move.b	#7,$1C(a0)
0001927A                            
0001927A                            loc_18C6C:
0001927A 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
00019280 4EB9 0000 AC4A             		jsr	AnimateSprite
00019286                            
00019286                            loc_18C78:
00019286 2268 0034                  		movea.l	$34(a0),a1
0001928A 3169 0008 0008             		move.w	8(a1),8(a0)
00019290 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019296 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001929C 7003                       		moveq	#3,d0
0001929E C028 0022                  		and.b	$22(a0),d0
000192A2 0228 00FC 0001             		andi.b	#-4,1(a0)
000192A8 8128 0001                  		or.b	d0,1(a0)
000192AC 4EF9 0000 DB7A             		jmp	DisplaySprite
000192B2                            ; ===========================================================================
000192B2                            
000192B2                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000192B2 2268 0034                  		movea.l	$34(a0),a1
000192B6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000192BC 6600                       		bne.s	loc_18CB8
000192BE 4A28 0001                  		tst.b	1(a0)
000192C2 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192C6                            
000192C6                            loc_18CB8:
000192C6 217C 0001 83EA 0004        		move.l	#Map_BossItems,4(a0)
000192CE 317C 246C 0002             		move.w	#$246C,2(a0)
000192D4 117C 0003 001A             		move.b	#3,$1A(a0)
000192DA 60AA                       		bra.s	loc_18C78
000192DC                            ; ===========================================================================
000192DC                            ; ---------------------------------------------------------------------------
000192DC                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000192DC                            ; ---------------------------------------------------------------------------
000192DC                            
000192DC                            Obj7B:					; XREF: Obj_Index
000192DC 7000                       		moveq	#0,d0
000192DE 1028 0024                  		move.b	$24(a0),d0
000192E2 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192E6 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192EA 3028 0030                  		move.w	$30(a0),d0
000192EE 0240 FF80                  		andi.w	#$FF80,d0
000192F2 3238 F700                  		move.w	($FFFFF700).w,d1
000192F6 0441 0080                  		subi.w	#$80,d1
000192FA 0241 FF80                  		andi.w	#$FF80,d1
000192FE 9041                       		sub.w	d1,d0
00019300 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019304 0C40 0280                  		cmpi.w	#$280,d0
00019308 6200 FBB8                  		bhi.w	Obj7A_Delete
0001930C 4EF9 0000 DB7A             		jmp	DisplaySprite
00019312                            ; ===========================================================================
00019312 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019314 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019316 0000                       		dc.w loc_18DC6-Obj7B_Index
00019318 0000                       		dc.w loc_18EAA-Obj7B_Index
0001931A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001931C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001931E                            ; ===========================================================================
0001931E                            
0001931E                            Obj7B_Main:				; XREF: Obj7B_Index
0001931E 217C 0001 1F40 0004        		move.l	#Map_obj5Ea,4(a0)
00019326 317C 0518 0002             		move.w	#$518,2(a0)
0001932C 117C 0001 001A             		move.b	#1,$1A(a0)
00019332 0028 0004 0001             		ori.b	#4,1(a0)
00019338 117C 0004 0018             		move.b	#4,$18(a0)
0001933E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019344 117C 000C 0019             		move.b	#$C,$19(a0)
0001934A 2268 003C                  		movea.l	$3C(a0),a1
0001934E 3169 0008 0030             		move.w	8(a1),$30(a0)
00019354 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001935A 08E8 0000 0022             		bset	#0,$22(a0)
00019360 3028 0008                  		move.w	8(a0),d0
00019364 B069 0008                  		cmp.w	8(a1),d0
00019368 6E00                       		bgt.s	loc_18D68
0001936A 08A8 0000 0022             		bclr	#0,$22(a0)
00019370 117C 0002 003A             		move.b	#2,$3A(a0)
00019376                            
00019376                            loc_18D68:
00019376 5428 0024                  		addq.b	#2,$24(a0)
0001937A                            
0001937A                            Obj7B_Fall:				; XREF: Obj7B_Index
0001937A 4EB9 0000 DB28             		jsr	ObjectFall
00019380 2268 003C                  		movea.l	$3C(a0),a1
00019384 45F9 0000 0000             		lea	(word_19018).l,a2
0001938A 7000                       		moveq	#0,d0
0001938C 1029 001A                  		move.b	$1A(a1),d0
00019390 3228 0008                  		move.w	8(a0),d1
00019394 9268 0030                  		sub.w	$30(a0),d1
00019398 6400                       		bcc.s	loc_18D8E
0001939A 5440                       		addq.w	#2,d0
0001939C                            
0001939C                            loc_18D8E:
0001939C D040                       		add.w	d0,d0
0001939E 3228 0034                  		move.w	$34(a0),d1
000193A2 D272 0000                  		add.w	(a2,d0.w),d1
000193A6 B268 000C                  		cmp.w	$C(a0),d1
000193AA 6E00                       		bgt.s	locret_18DC4
000193AC 2268 003C                  		movea.l	$3C(a0),a1
000193B0 7202                       		moveq	#2,d1
000193B2 0828 0000 0022             		btst	#0,$22(a0)
000193B8 6700                       		beq.s	loc_18DAE
000193BA 7200                       		moveq	#0,d1
000193BC                            
000193BC                            loc_18DAE:
000193BC 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193C2 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193C8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193CE 6000 0000                  		bra.w	loc_18FA2
000193D2                            ; ===========================================================================
000193D2                            
000193D2                            locret_18DC4:
000193D2 4E75                       		rts	
000193D4                            ; ===========================================================================
000193D4                            
000193D4                            loc_18DC6:				; XREF: Obj7B_Index
000193D4 2268 003C                  		movea.l	$3C(a0),a1
000193D8 7000                       		moveq	#0,d0
000193DA 1028 003A                  		move.b	$3A(a0),d0
000193DE 9029 003A                  		sub.b	$3A(a1),d0
000193E2 6700                       		beq.s	loc_18E2A
000193E4 6400                       		bcc.s	loc_18DDA
000193E6 4400                       		neg.b	d0
000193E8                            
000193E8                            loc_18DDA:
000193E8 323C F7E8                  		move.w	#-$818,d1
000193EC 343C FEEC                  		move.w	#-$114,d2
000193F0 0C00 0001                  		cmpi.b	#1,d0
000193F4 6700                       		beq.s	loc_18E00
000193F6 323C F6A0                  		move.w	#-$960,d1
000193FA 343C FF0C                  		move.w	#-$F4,d2
000193FE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019404 6D00                       		blt.s	loc_18E00
00019406 323C F5E0                  		move.w	#-$A20,d1
0001940A 343C FF80                  		move.w	#-$80,d2
0001940E                            
0001940E                            loc_18E00:
0001940E 3141 0012                  		move.w	d1,$12(a0)
00019412 3142 0010                  		move.w	d2,$10(a0)
00019416 3028 0008                  		move.w	8(a0),d0
0001941A 9068 0030                  		sub.w	$30(a0),d0
0001941E 6400                       		bcc.s	loc_18E16
00019420 4468 0010                  		neg.w	$10(a0)
00019424                            
00019424                            loc_18E16:
00019424 117C 0001 001A             		move.b	#1,$1A(a0)
0001942A 317C 0020 0028             		move.w	#$20,$28(a0)
00019430 5428 0024                  		addq.b	#2,$24(a0)
00019434 6000 0000                  		bra.w	loc_18EAA
00019438                            ; ===========================================================================
00019438                            
00019438                            loc_18E2A:				; XREF: loc_18DC6
00019438 45F9 0000 0000             		lea	(word_19018).l,a2
0001943E 7000                       		moveq	#0,d0
00019440 1029 001A                  		move.b	$1A(a1),d0
00019444 343C 0028                  		move.w	#$28,d2
00019448 3228 0008                  		move.w	8(a0),d1
0001944C 9268 0030                  		sub.w	$30(a0),d1
00019450 6400                       		bcc.s	loc_18E48
00019452 4442                       		neg.w	d2
00019454 5440                       		addq.w	#2,d0
00019456                            
00019456                            loc_18E48:
00019456 D040                       		add.w	d0,d0
00019458 3228 0034                  		move.w	$34(a0),d1
0001945C D272 0000                  		add.w	(a2,d0.w),d1
00019460 3141 000C                  		move.w	d1,$C(a0)
00019464 D468 0030                  		add.w	$30(a0),d2
00019468 3142 0008                  		move.w	d2,8(a0)
0001946C 4268 000E                  		clr.w	$E(a0)
00019470 4268 000A                  		clr.w	$A(a0)
00019474 5368 0028                  		subq.w	#1,$28(a0)
00019478 6600                       		bne.s	loc_18E7A
0001947A 317C 0020 0028             		move.w	#$20,$28(a0)
00019480 117C 0008 0024             		move.b	#8,$24(a0)
00019486 4E75                       		rts	
00019488                            ; ===========================================================================
00019488                            
00019488                            loc_18E7A:
00019488 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001948E 6600                       		bne.s	loc_18E88
00019490 117C 0005 001F             		move.b	#5,$1F(a0)
00019496                            
00019496                            loc_18E88:
00019496 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001949C 6600                       		bne.s	loc_18E96
0001949E 117C 0002 001F             		move.b	#2,$1F(a0)
000194A4                            
000194A4                            loc_18E96:
000194A4 5328 001E                  		subq.b	#1,$1E(a0)
000194A8 6E00                       		bgt.s	locret_18EA8
000194AA 0868 0000 001A             		bchg	#0,$1A(a0)
000194B0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194B6                            
000194B6                            locret_18EA8:
000194B6 4E75                       		rts	
000194B8                            ; ===========================================================================
000194B8                            
000194B8                            loc_18EAA:				; XREF: Obj7B_Index
000194B8 43F8 D040                  		lea	($FFFFD040).w,a1
000194BC 707A                       		moveq	#$7A,d0
000194BE 7240                       		moveq	#$40,d1
000194C0 743E                       		moveq	#$3E,d2
000194C2                            
000194C2                            loc_18EB4:
000194C2 B011                       		cmp.b	(a1),d0
000194C4 6700                       		beq.s	loc_18EC0
000194C6 D2C1                       		adda.w	d1,a1
000194C8 51CA FFF8                  		dbf	d2,loc_18EB4
000194CC                            
000194CC 6000                       		bra.s	loc_18F38
000194CE                            ; ===========================================================================
000194CE                            
000194CE                            loc_18EC0:
000194CE 3029 0008                  		move.w	8(a1),d0
000194D2 3229 000C                  		move.w	$C(a1),d1
000194D6 3428 0008                  		move.w	8(a0),d2
000194DA 3628 000C                  		move.w	$C(a0),d3
000194DE 45FA 0000                  		lea	byte_19022(pc),a2
000194E2 47FA 0000                  		lea	byte_19026(pc),a3
000194E6 181A                       		move.b	(a2)+,d4
000194E8 4884                       		ext.w	d4
000194EA D044                       		add.w	d4,d0
000194EC 181B                       		move.b	(a3)+,d4
000194EE 4884                       		ext.w	d4
000194F0 D444                       		add.w	d4,d2
000194F2 B440                       		cmp.w	d0,d2
000194F4 6500                       		bcs.s	loc_18F38
000194F6 181A                       		move.b	(a2)+,d4
000194F8 4884                       		ext.w	d4
000194FA D044                       		add.w	d4,d0
000194FC 181B                       		move.b	(a3)+,d4
000194FE 4884                       		ext.w	d4
00019500 D444                       		add.w	d4,d2
00019502 B042                       		cmp.w	d2,d0
00019504 6500                       		bcs.s	loc_18F38
00019506 181A                       		move.b	(a2)+,d4
00019508 4884                       		ext.w	d4
0001950A D244                       		add.w	d4,d1
0001950C 181B                       		move.b	(a3)+,d4
0001950E 4884                       		ext.w	d4
00019510 D644                       		add.w	d4,d3
00019512 B641                       		cmp.w	d1,d3
00019514 6500                       		bcs.s	loc_18F38
00019516 181A                       		move.b	(a2)+,d4
00019518 4884                       		ext.w	d4
0001951A D244                       		add.w	d4,d1
0001951C 181B                       		move.b	(a3)+,d4
0001951E 4884                       		ext.w	d4
00019520 D644                       		add.w	d4,d3
00019522 B243                       		cmp.w	d3,d1
00019524 6500                       		bcs.s	loc_18F38
00019526 5428 0024                  		addq.b	#2,$24(a0)
0001952A 4268 0028                  		clr.w	$28(a0)
0001952E 4229 0020                  		clr.b	$20(a1)
00019532 5329 0021                  		subq.b	#1,$21(a1)
00019536 6600                       		bne.s	loc_18F38
00019538 08E9 0007 0022             		bset	#7,$22(a1)
0001953E 4268 0010                  		clr.w	$10(a0)
00019542 4268 0012                  		clr.w	$12(a0)
00019546                            
00019546                            loc_18F38:
00019546 4A68 0012                  		tst.w	$12(a0)
0001954A 6A00                       		bpl.s	loc_18F5C
0001954C 4EB9 0000 DB28             		jsr	ObjectFall
00019552 3028 0034                  		move.w	$34(a0),d0
00019556 0440 002F                  		subi.w	#$2F,d0
0001955A B068 000C                  		cmp.w	$C(a0),d0
0001955E 6E00                       		bgt.s	loc_18F58
00019560 4EB9 0000 DB28             		jsr	ObjectFall
00019566                            
00019566                            loc_18F58:
00019566 6000 FF20                  		bra.w	loc_18E7A
0001956A                            ; ===========================================================================
0001956A                            
0001956A                            loc_18F5C:
0001956A 4EB9 0000 DB28             		jsr	ObjectFall
00019570 2268 003C                  		movea.l	$3C(a0),a1
00019574 45F9 0000 0000             		lea	(word_19018).l,a2
0001957A 7000                       		moveq	#0,d0
0001957C 1029 001A                  		move.b	$1A(a1),d0
00019580 3228 0008                  		move.w	8(a0),d1
00019584 9268 0030                  		sub.w	$30(a0),d1
00019588 6400                       		bcc.s	loc_18F7E
0001958A 5440                       		addq.w	#2,d0
0001958C                            
0001958C                            loc_18F7E:
0001958C D040                       		add.w	d0,d0
0001958E 3228 0034                  		move.w	$34(a0),d1
00019592 D272 0000                  		add.w	(a2,d0.w),d1
00019596 B268 000C                  		cmp.w	$C(a0),d1
0001959A 6ECA                       		bgt.s	loc_18F58
0001959C 2268 003C                  		movea.l	$3C(a0),a1
000195A0 7202                       		moveq	#2,d1
000195A2 4A68 0010                  		tst.w	$10(a0)
000195A6 6B00                       		bmi.s	loc_18F9C
000195A8 7200                       		moveq	#0,d1
000195AA                            
000195AA                            loc_18F9C:
000195AA 317C 0000 0028             		move.w	#0,$28(a0)
000195B0                            
000195B0                            loc_18FA2:
000195B0 1341 003A                  		move.b	d1,$3A(a1)
000195B4 1141 003A                  		move.b	d1,$3A(a0)
000195B8 B229 001A                  		cmp.b	$1A(a1),d1
000195BC 6700                       		beq.s	loc_19008
000195BE 08A9 0003 0022             		bclr	#3,$22(a1)
000195C4 6700                       		beq.s	loc_19008
000195C6 4229 0025                  		clr.b	$25(a1)
000195CA 137C 0002 0024             		move.b	#2,$24(a1)
000195D0 45F8 D000                  		lea	($FFFFD000).w,a2
000195D4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000195DA 446A 0012                  		neg.w	$12(a2)
000195DE 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195E4 6600                       		bne.s	loc_18FDC
000195E6 E0EA 0012                  		asr	$12(a2)
000195EA                            
000195EA                            loc_18FDC:
000195EA 08EA 0001 0022             		bset	#1,$22(a2)
000195F0 08AA 0003 0022             		bclr	#3,$22(a2)
000195F6 422A 003C                  		clr.b	$3C(a2)
000195FA 2F08                       		move.l	a0,-(sp)
000195FC 41D2                       		lea	(a2),a0
000195FE 4EBA A3A2                  		jsr	Obj01_ChkRoll
00019602 205F                       		movea.l	(sp)+,a0
00019604 157C 0002 0024             		move.b	#2,$24(a2)
0001960A 303C 00CC                  		move.w	#$CC,d0
0001960E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019614                            
00019614                            loc_19008:
00019614 4268 0010                  		clr.w	$10(a0)
00019618 4268 0012                  		clr.w	$12(a0)
0001961C 5428 0024                  		addq.b	#2,$24(a0)
00019620 6000 FE66                  		bra.w	loc_18E7A
00019624                            ; ===========================================================================
00019624 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001962E                            		even
0001962E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019632                            		even
00019632 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019636                            		even
00019636                            ; ===========================================================================
00019636                            
00019636                            Obj7B_Explode:				; XREF: Obj7B_Index
00019636 10BC 003F                  		move.b	#$3F,(a0)
0001963A 4228 0024                  		clr.b	$24(a0)
0001963E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019644 6700                       		beq.s	Obj7B_MakeFrag
00019646 4E75                       		rts	
00019648                            ; ===========================================================================
00019648                            
00019648                            Obj7B_MakeFrag:
00019648 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001964E 7203                       		moveq	#3,d1
00019650 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019654                            
00019654                            Obj7B_Loop:
00019654 4EB9 0000 E000             		jsr	SingleObjLoad
0001965A 6600                       		bne.s	loc_1909A
0001965C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019660 137C 000A 0024             		move.b	#$A,$24(a1)
00019666 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001966E 137C 0003 0018             		move.b	#3,$18(a1)
00019674 337C 0518 0002             		move.w	#$518,2(a1)
0001967A 3368 0008 0008             		move.w	8(a0),8(a1)
00019680 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019686 335A 0010                  		move.w	(a2)+,$10(a1)
0001968A 335A 0012                  		move.w	(a2)+,$12(a1)
0001968E 137C 0098 0020             		move.b	#$98,$20(a1)
00019694 0029 0004 0001             		ori.b	#4,1(a1)
0001969A 08E9 0007 0001             		bset	#7,1(a1)
000196A0 137C 000C 0019             		move.b	#$C,$19(a1)
000196A6                            
000196A6                            loc_1909A:
000196A6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000196AA                            
000196AA 4E75                       		rts	
000196AC                            ; ===========================================================================
000196AC FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000196B0 FF60 FDC0                  		dc.w $FF60, $FDC0
000196B4 0100 FCC0                  		dc.w $100, $FCC0
000196B8 00A0 FDC0                  		dc.w $A0, $FDC0
000196BC                            ; ===========================================================================
000196BC                            
000196BC                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000196BC 4EB9 0000 DB54             		jsr	SpeedToPos
000196C2 3168 0008 0030             		move.w	8(a0),$30(a0)
000196C8 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196CE 0668 0018 0012             		addi.w	#$18,$12(a0)
000196D4 7004                       		moveq	#4,d0
000196D6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000196DA E448                       		lsr.w	#2,d0
000196DC 1140 001A                  		move.b	d0,$1A(a0)
000196E0 4A28 0001                  		tst.b	1(a0)
000196E4 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196E8 4E75                       		rts	
000196EA                            ; ===========================================================================
000196EA                            ; ---------------------------------------------------------------------------
000196EA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196EA                            ; ---------------------------------------------------------------------------
000196EA                            Map_obj7B:
000196EA                            	include "_maps\obj7B.asm"
000196EA                            ; ---------------------------------------------------------------------------
000196EA                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196EA                            ; ---------------------------------------------------------------------------
000196EA 0000                       		dc.w byte_190E2-Map_obj7B
000196EC 0000                       		dc.w byte_190E8-Map_obj7B
000196EE 01                         byte_190E2:	dc.b 1
000196EF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196F4 01                         byte_190E8:	dc.b 1
000196F5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196FA                            		even
000196FA                            		even
000196FA                            
000196FA                            ; ===========================================================================
000196FA                            ; ---------------------------------------------------------------------------
000196FA                            ; Object 75 - Eggman (SYZ)
000196FA                            ; ---------------------------------------------------------------------------
000196FA                            
000196FA                            Obj75:					; XREF: Obj_Index
000196FA 7000                       		moveq	#0,d0
000196FC 1028 0024                  		move.b	$24(a0),d0
00019700 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019704 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019708                            ; ===========================================================================
00019708 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001970A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001970C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001970E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019710 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019712                            
00019712 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019715 0401 05                    		dc.b 4,	1, 5
00019718 0607 05                    		dc.b 6,	7, 5
0001971B 0800 05                    		dc.b 8,	0, 5
0001971E                            ; ===========================================================================
0001971E                            
0001971E                            Obj75_Main:				; XREF: Obj75_Index
0001971E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019724 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001972A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019730 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019736 117C 000F 0020             		move.b	#$F,$20(a0)
0001973C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019742 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019746 2248                       		movea.l	a0,a1
00019748 7203                       		moveq	#3,d1
0001974A 6000                       		bra.s	Obj75_LoadBoss
0001974C                            ; ===========================================================================
0001974C                            
0001974C                            Obj75_Loop:
0001974C 4EB9 0000 E016             		jsr	SingleObjLoad2
00019752 6600                       		bne.s	Obj75_ShipMain
00019754 12BC 0075                  		move.b	#$75,(a1)
00019758 3368 0008 0008             		move.w	8(a0),8(a1)
0001975E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019764                            
00019764                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019764 08A8 0000 0022             		bclr	#0,$22(a0)
0001976A 4229 0025                  		clr.b	$25(a1)
0001976E 135A 0024                  		move.b	(a2)+,$24(a1)
00019772 135A 001C                  		move.b	(a2)+,$1C(a1)
00019776 135A 0018                  		move.b	(a2)+,$18(a1)
0001977A 237C 0001 8322 0004        		move.l	#Map_Eggman,4(a1)
00019782 337C 0400 0002             		move.w	#$400,2(a1)
00019788 137C 0004 0001             		move.b	#4,1(a1)
0001978E 137C 0020 0019             		move.b	#$20,$19(a1)
00019794 2348 0034                  		move.l	a0,$34(a1)
00019798 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001979C                            
0001979C                            Obj75_ShipMain:				; XREF: Obj75_Index
0001979C 7000                       		moveq	#0,d0
0001979E 1028 0025                  		move.b	$25(a0),d0
000197A2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000197A6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000197AA 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
000197B0 4EB9 0000 AC4A             		jsr	AnimateSprite
000197B6 7003                       		moveq	#3,d0
000197B8 C028 0022                  		and.b	$22(a0),d0
000197BC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197C2 8128 0001                  		or.b	d0,1(a0)
000197C6 4EF9 0000 DB7A             		jmp	DisplaySprite
000197CC                            ; ===========================================================================
000197CC 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197D0 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000197D4 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000197D8                            ; ===========================================================================
000197D8                            
000197D8                            loc_191CC:				; XREF: Obj75_ShipIndex
000197D8 317C FF00 0010             		move.w	#-$100,$10(a0)
000197DE 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197E4 6400                       		bcc.s	loc_191DE
000197E6 5428 0025                  		addq.b	#2,$25(a0)
000197EA                            
000197EA                            loc_191DE:
000197EA 1028 003F                  		move.b	$3F(a0),d0
000197EE 5428 003F                  		addq.b	#2,$3F(a0)
000197F2 4EB9 0000 2C22             		jsr	(CalcSine).l
000197F8 E440                       		asr.w	#2,d0
000197FA 3140 0012                  		move.w	d0,$12(a0)
000197FE                            
000197FE                            loc_191F2:
000197FE 6100 E6C2                  		bsr.w	BossMove
00019802 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019808 3168 0030 0008             		move.w	$30(a0),8(a0)
0001980E                            
0001980E                            loc_19202:
0001980E 3028 0008                  		move.w	8(a0),d0
00019812 0440 2C00                  		subi.w	#$2C00,d0
00019816 EA48                       		lsr.w	#5,d0
00019818 1140 0034                  		move.b	d0,$34(a0)
0001981C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019822 6400                       		bcc.s	locret_19256
00019824 4A28 0022                  		tst.b	$22(a0)
00019828 6B00                       		bmi.s	loc_19258
0001982A 4A28 0020                  		tst.b	$20(a0)
0001982E 6600                       		bne.s	locret_19256
00019830 4A28 003E                  		tst.b	$3E(a0)
00019834 6600                       		bne.s	loc_1923A
00019836 117C 0020 003E             		move.b	#$20,$3E(a0)
0001983C 303C 00AC                  		move.w	#$AC,d0
00019840 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019846                            
00019846                            loc_1923A:
00019846 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001984A 7000                       		moveq	#0,d0
0001984C 4A51                       		tst.w	(a1)
0001984E 6600                       		bne.s	loc_19248
00019850 303C 0EEE                  		move.w	#$EEE,d0
00019854                            
00019854                            loc_19248:
00019854 3280                       		move.w	d0,(a1)
00019856 5328 003E                  		subq.b	#1,$3E(a0)
0001985A 6600                       		bne.s	locret_19256
0001985C 117C 000F 0020             		move.b	#$F,$20(a0)
00019862                            
00019862                            locret_19256:
00019862 4E75                       		rts	
00019864                            ; ===========================================================================
00019864                            
00019864                            loc_19258:				; XREF: loc_19202
00019864 7064                       		moveq	#100,d0
00019866 6100 0000                  		bsr.w	AddPoints
0001986A 117C 0006 0025             		move.b	#6,$25(a0)
00019870 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019876 4268 0010                  		clr.w	$10(a0)
0001987A 4E75                       		rts	
0001987C                            ; ===========================================================================
0001987C                            
0001987C                            loc_19270:				; XREF: Obj75_ShipIndex
0001987C 3028 0030                  		move.w	$30(a0),d0
00019880 317C 0140 0010             		move.w	#$140,$10(a0)
00019886 0828 0000 0022             		btst	#0,$22(a0)
0001988C 6600                       		bne.s	loc_1928E
0001988E 4468 0010                  		neg.w	$10(a0)
00019892 0C40 2C08                  		cmpi.w	#$2C08,d0
00019896 6E00                       		bgt.s	loc_1929E
00019898 6000                       		bra.s	loc_19294
0001989A                            ; ===========================================================================
0001989A                            
0001989A                            loc_1928E:
0001989A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001989E 6D00                       		blt.s	loc_1929E
000198A0                            
000198A0                            loc_19294:
000198A0 0868 0000 0022             		bchg	#0,$22(a0)
000198A6 4228 003D                  		clr.b	$3D(a0)
000198AA                            
000198AA                            loc_1929E:
000198AA 0440 2C10                  		subi.w	#$2C10,d0
000198AE 0240 001F                  		andi.w	#$1F,d0
000198B2 0440 001F                  		subi.w	#$1F,d0
000198B6 6A00                       		bpl.s	loc_192AE
000198B8 4440                       		neg.w	d0
000198BA                            
000198BA                            loc_192AE:
000198BA 5340                       		subq.w	#1,d0
000198BC 6E00                       		bgt.s	loc_192E8
000198BE 4A28 003D                  		tst.b	$3D(a0)
000198C2 6600                       		bne.s	loc_192E8
000198C4 3238 D008                  		move.w	($FFFFD008).w,d1
000198C8 0441 2C00                  		subi.w	#$2C00,d1
000198CC EA41                       		asr.w	#5,d1
000198CE B228 0034                  		cmp.b	$34(a0),d1
000198D2 6600                       		bne.s	loc_192E8
000198D4 7000                       		moveq	#0,d0
000198D6 1028 0034                  		move.b	$34(a0),d0
000198DA EB40                       		asl.w	#5,d0
000198DC 0640 2C10                  		addi.w	#$2C10,d0
000198E0 3140 0030                  		move.w	d0,$30(a0)
000198E4 6100 0000                  		bsr.w	Obj75_FindBlocks
000198E8 5428 0025                  		addq.b	#2,$25(a0)
000198EC 4268 0028                  		clr.w	$28(a0)
000198F0 4268 0010                  		clr.w	$10(a0)
000198F4                            
000198F4                            loc_192E8:
000198F4 6000 FEF4                  		bra.w	loc_191DE
000198F8                            ; ===========================================================================
000198F8                            
000198F8                            loc_192EC:				; XREF: Obj75_ShipIndex
000198F8 7000                       		moveq	#0,d0
000198FA 1028 0028                  		move.b	$28(a0),d0
000198FE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019902 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019906                            ; ===========================================================================
00019906 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019908 0000                       		dc.w loc_19348-off_192FA
0001990A 0000                       		dc.w loc_1938E-off_192FA
0001990C 0000                       		dc.w loc_193D0-off_192FA
0001990E                            ; ===========================================================================
0001990E                            
0001990E                            loc_19302:				; XREF: off_192FA
0001990E 317C 0180 0012             		move.w	#$180,$12(a0)
00019914 3028 0038                  		move.w	$38(a0),d0
00019918 0C40 0556                  		cmpi.w	#$556,d0
0001991C 6500                       		bcs.s	loc_19344
0001991E 317C 0556 0038             		move.w	#$556,$38(a0)
00019924 4268 003C                  		clr.w	$3C(a0)
00019928 70FF                       		moveq	#-1,d0
0001992A 3028 0036                  		move.w	$36(a0),d0
0001992E 6700                       		beq.s	loc_1933C
00019930 2240                       		movea.l	d0,a1
00019932 137C 00FF 0029             		move.b	#-1,$29(a1)
00019938 117C 00FF 0029             		move.b	#-1,$29(a0)
0001993E 2348 0034                  		move.l	a0,$34(a1)
00019942 317C 0032 003C             		move.w	#$32,$3C(a0)
00019948                            
00019948                            loc_1933C:
00019948 4268 0012                  		clr.w	$12(a0)
0001994C 5428 0028                  		addq.b	#2,$28(a0)
00019950                            
00019950                            loc_19344:
00019950 6000 FEAC                  		bra.w	loc_191F2
00019954                            ; ===========================================================================
00019954                            
00019954                            loc_19348:				; XREF: off_192FA
00019954 5368 003C                  		subq.w	#1,$3C(a0)
00019958 6A00                       		bpl.s	loc_19366
0001995A 5428 0028                  		addq.b	#2,$28(a0)
0001995E 317C F800 0012             		move.w	#-$800,$12(a0)
00019964 4A68 0036                  		tst.w	$36(a0)
00019968 6600                       		bne.s	loc_19362
0001996A E0E8 0012                  		asr	$12(a0)
0001996E                            
0001996E                            loc_19362:
0001996E 7000                       		moveq	#0,d0
00019970 6000                       		bra.s	loc_1937C
00019972                            ; ===========================================================================
00019972                            
00019972                            loc_19366:
00019972 7000                       		moveq	#0,d0
00019974 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001997A 6E00                       		bgt.s	loc_1937C
0001997C 7002                       		moveq	#2,d0
0001997E 0828 0001 003D             		btst	#1,$3D(a0)
00019984 6700                       		beq.s	loc_1937C
00019986 4440                       		neg.w	d0
00019988                            
00019988                            loc_1937C:
00019988 D068 0038                  		add.w	$38(a0),d0
0001998C 3140 000C                  		move.w	d0,$C(a0)
00019990 3168 0030 0008             		move.w	$30(a0),8(a0)
00019996 6000 FE76                  		bra.w	loc_19202
0001999A                            ; ===========================================================================
0001999A                            
0001999A                            loc_1938E:				; XREF: off_192FA
0001999A 303C 04DA                  		move.w	#$4DA,d0
0001999E 4A68 0036                  		tst.w	$36(a0)
000199A2 6700                       		beq.s	loc_1939C
000199A4 0440 0018                  		subi.w	#$18,d0
000199A8                            
000199A8                            loc_1939C:
000199A8 B068 0038                  		cmp.w	$38(a0),d0
000199AC 6D00                       		blt.s	loc_193BE
000199AE 317C 0008 003C             		move.w	#8,$3C(a0)
000199B4 4A68 0036                  		tst.w	$36(a0)
000199B8 6700                       		beq.s	loc_193B4
000199BA 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199C0                            
000199C0                            loc_193B4:
000199C0 5428 0028                  		addq.b	#2,$28(a0)
000199C4 4268 0012                  		clr.w	$12(a0)
000199C8 6000                       		bra.s	loc_193CC
000199CA                            ; ===========================================================================
000199CA                            
000199CA                            loc_193BE:
000199CA 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199D0 6C00                       		bge.s	loc_193CC
000199D2 0668 000C 0012             		addi.w	#$C,$12(a0)
000199D8                            
000199D8                            loc_193CC:
000199D8 6000 FE24                  		bra.w	loc_191F2
000199DC                            ; ===========================================================================
000199DC                            
000199DC                            loc_193D0:				; XREF: off_192FA
000199DC 5368 003C                  		subq.w	#1,$3C(a0)
000199E0 6E00                       		bgt.s	loc_19406
000199E2 6B00                       		bmi.s	loc_193EE
000199E4 70FF                       		moveq	#-1,d0
000199E6 3028 0036                  		move.w	$36(a0),d0
000199EA 6700                       		beq.s	loc_193E8
000199EC 2240                       		movea.l	d0,a1
000199EE 137C 000A 0029             		move.b	#$A,$29(a1)
000199F4                            
000199F4                            loc_193E8:
000199F4 4268 0036                  		clr.w	$36(a0)
000199F8 6000                       		bra.s	loc_19406
000199FA                            ; ===========================================================================
000199FA                            
000199FA                            loc_193EE:
000199FA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019A00 6600                       		bne.s	loc_19406
00019A02 4228 0029                  		clr.b	$29(a0)
00019A06 5528 0025                  		subq.b	#2,$25(a0)
00019A0A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019A10 6000                       		bra.s	loc_19446
00019A12                            ; ===========================================================================
00019A12                            
00019A12                            loc_19406:
00019A12 7001                       		moveq	#1,d0
00019A14 4A68 0036                  		tst.w	$36(a0)
00019A18 6700                       		beq.s	loc_19410
00019A1A 7002                       		moveq	#2,d0
00019A1C                            
00019A1C                            loc_19410:
00019A1C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A22 6700                       		beq.s	loc_19424
00019A24 6D00                       		blt.s	loc_1941C
00019A26 4440                       		neg.w	d0
00019A28                            
00019A28                            loc_1941C:
00019A28 4A68 0036                  		tst.w	$36(a0)
00019A2C D168 0038                  		add.w	d0,$38(a0)
00019A30                            
00019A30                            loc_19424:
00019A30 7000                       		moveq	#0,d0
00019A32 4A68 0036                  		tst.w	$36(a0)
00019A36 6700                       		beq.s	loc_19438
00019A38 7002                       		moveq	#2,d0
00019A3A 0828 0000 003D             		btst	#0,$3D(a0)
00019A40 6700                       		beq.s	loc_19438
00019A42 4440                       		neg.w	d0
00019A44                            
00019A44                            loc_19438:
00019A44 D068 0038                  		add.w	$38(a0),d0
00019A48 3140 000C                  		move.w	d0,$C(a0)
00019A4C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A52                            
00019A52                            loc_19446:
00019A52 6000 FDBA                  		bra.w	loc_19202
00019A56                            
00019A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A56                            
00019A56                            
00019A56                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A56 4268 0036                  		clr.w	$36(a0)
00019A5A 43F8 D040                  		lea	($FFFFD040).w,a1
00019A5E 703E                       		moveq	#$3E,d0
00019A60 7276                       		moveq	#$76,d1
00019A62 1428 0034                  		move.b	$34(a0),d2
00019A66                            
00019A66                            Obj75_FindLoop:
00019A66 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A68 6600                       		bne.s	loc_1946A	; if not, branch
00019A6A B429 0028                  		cmp.b	$28(a1),d2
00019A6E 6600                       		bne.s	loc_1946A
00019A70 3149 0036                  		move.w	a1,$36(a0)
00019A74 6000                       		bra.s	locret_19472
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            loc_1946A:
00019A76 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A7A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A7E                            
00019A7E                            locret_19472:
00019A7E 4E75                       		rts	
00019A80                            ; End of function Obj75_FindBlocks
00019A80                            
00019A80                            ; ===========================================================================
00019A80                            
00019A80                            loc_19474:				; XREF: Obj75_ShipIndex
00019A80 5368 003C                  		subq.w	#1,$3C(a0)
00019A84 6B00                       		bmi.s	loc_1947E
00019A86 6000 E3F8                  		bra.w	BossDefeated
00019A8A                            ; ===========================================================================
00019A8A                            
00019A8A                            loc_1947E:
00019A8A 5428 0025                  		addq.b	#2,$25(a0)
00019A8E 4268 0012                  		clr.w	$12(a0)
00019A92 08E8 0000 0022             		bset	#0,$22(a0)
00019A98 08A8 0007 0022             		bclr	#7,$22(a0)
00019A9E 4268 0010                  		clr.w	$10(a0)
00019AA2 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019AA8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019AAC 6600                       		bne.s	loc_194A8
00019AAE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AB4                            
00019AB4                            loc_194A8:
00019AB4 6000 FD58                  		bra.w	loc_19202
00019AB8                            ; ===========================================================================
00019AB8                            
00019AB8                            loc_194AC:				; XREF: Obj75_ShipIndex
00019AB8 5268 003C                  		addq.w	#1,$3C(a0)
00019ABC 6700                       		beq.s	loc_194BC
00019ABE 6A00                       		bpl.s	loc_194C2
00019AC0 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AC6 6000                       		bra.s	loc_194EE
00019AC8                            ; ===========================================================================
00019AC8                            
00019AC8                            loc_194BC:
00019AC8 4268 0012                  		clr.w	$12(a0)
00019ACC 6000                       		bra.s	loc_194EE
00019ACE                            ; ===========================================================================
00019ACE                            
00019ACE                            loc_194C2:
00019ACE 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019AD4 6500                       		bcs.s	loc_194DA
00019AD6 6700                       		beq.s	loc_194E0
00019AD8 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019ADE 6500                       		bcs.s	loc_194EE
00019AE0 5428 0025                  		addq.b	#2,$25(a0)
00019AE4 6000                       		bra.s	loc_194EE
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_194DA:
00019AE6 5168 0012                  		subq.w	#8,$12(a0)
00019AEA 6000                       		bra.s	loc_194EE
00019AEC                            ; ===========================================================================
00019AEC                            
00019AEC                            loc_194E0:
00019AEC 4268 0012                  		clr.w	$12(a0)
00019AF0 303C 0085                  		move.w	#$85,d0
00019AF4 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019AFA                            
00019AFA                            loc_194EE:
00019AFA 6000 FD02                  		bra.w	loc_191F2
00019AFE                            ; ===========================================================================
00019AFE                            
00019AFE                            loc_194F2:				; XREF: Obj75_ShipIndex
00019AFE 317C 0400 0010             		move.w	#$400,$10(a0)
00019B04 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B0A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019B10 6400                       		bcc.s	loc_1950C
00019B12 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B16 6000                       		bra.s	loc_19512
00019B18                            ; ===========================================================================
00019B18                            
00019B18                            loc_1950C:
00019B18 4A28 0001                  		tst.b	1(a0)
00019B1C 6A00                       		bpl.s	Obj75_ShipDelete
00019B1E                            
00019B1E                            loc_19512:
00019B1E 6100 E3A2                  		bsr.w	BossMove
00019B22 6000 FCC6                  		bra.w	loc_191DE
00019B26                            ; ===========================================================================
00019B26                            
00019B26                            Obj75_ShipDelete:
00019B26 4EF9 0000 DBB6             		jmp	DeleteObject
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B2C 7201                       		moveq	#1,d1
00019B2E 2268 0034                  		movea.l	$34(a0),a1
00019B32 7000                       		moveq	#0,d0
00019B34 1029 0025                  		move.b	$25(a1),d0
00019B38 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B3C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B40 1141 001C                  		move.b	d1,$1C(a0)
00019B44 1010                       		move.b	(a0),d0
00019B46 B011                       		cmp.b	(a1),d0
00019B48 6600                       		bne.s	Obj75_FaceDelete
00019B4A 6000                       		bra.s	loc_195BE
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            Obj75_FaceDelete:
00019B4C 4EF9 0000 DBB6             		jmp	DeleteObject
00019B52                            ; ===========================================================================
00019B52 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B56 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B5A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_19552:				; XREF: off_19546
00019B5E 720A                       		moveq	#$A,d1
00019B60 4E75                       		rts	
00019B62                            ; ===========================================================================
00019B62                            
00019B62                            loc_19556:				; XREF: off_19546
00019B62 7206                       		moveq	#6,d1
00019B64 4E75                       		rts	
00019B66                            ; ===========================================================================
00019B66                            
00019B66                            loc_1955A:				; XREF: off_19546
00019B66 7000                       		moveq	#0,d0
00019B68 1029 0028                  		move.b	$28(a1),d0
00019B6C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B70 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B74                            ; ===========================================================================
00019B74 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B78 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B7C                            ; ===========================================================================
00019B7C                            
00019B7C                            loc_19570:				; XREF: off_19568
00019B7C 6000                       		bra.s	loc_19574
00019B7E                            ; ===========================================================================
00019B7E                            
00019B7E                            loc_19572:				; XREF: off_19568
00019B7E 7206                       		moveq	#6,d1
00019B80                            
00019B80                            loc_19574:				; XREF: off_19546
00019B80 4A29 0020                  		tst.b	$20(a1)
00019B84 6600                       		bne.s	loc_1957E
00019B86 7205                       		moveq	#5,d1
00019B88 4E75                       		rts	
00019B8A                            ; ===========================================================================
00019B8A                            
00019B8A                            loc_1957E:
00019B8A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B90 6500                       		bcs.s	locret_19588
00019B92 7204                       		moveq	#4,d1
00019B94                            
00019B94                            locret_19588:
00019B94 4E75                       		rts	
00019B96                            ; ===========================================================================
00019B96                            
00019B96                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B96 117C 0007 001C             		move.b	#7,$1C(a0)
00019B9C 2268 0034                  		movea.l	$34(a0),a1
00019BA0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019BA6 6600                       		bne.s	loc_195AA
00019BA8 117C 000B 001C             		move.b	#$B,$1C(a0)
00019BAE 4A28 0001                  		tst.b	1(a0)
00019BB2 6A00                       		bpl.s	Obj75_FlameDelete
00019BB4 6000                       		bra.s	loc_195B6
00019BB6                            ; ===========================================================================
00019BB6                            
00019BB6                            loc_195AA:
00019BB6 4A69 0010                  		tst.w	$10(a1)
00019BBA 6700                       		beq.s	loc_195B6
00019BBC 117C 0008 001C             		move.b	#8,$1C(a0)
00019BC2                            
00019BC2                            loc_195B6:
00019BC2 6000                       		bra.s	loc_195BE
00019BC4                            ; ===========================================================================
00019BC4                            
00019BC4                            Obj75_FlameDelete:
00019BC4 4EF9 0000 DBB6             		jmp	DeleteObject
00019BCA                            ; ===========================================================================
00019BCA                            
00019BCA                            loc_195BE:
00019BCA 43F9 0001 82D2             		lea	(Ani_Eggman).l,a1
00019BD0 4EB9 0000 AC4A             		jsr	AnimateSprite
00019BD6 2268 0034                  		movea.l	$34(a0),a1
00019BDA 3169 0008 0008             		move.w	8(a1),8(a0)
00019BE0 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BE6                            
00019BE6                            loc_195DA:
00019BE6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BEC 7003                       		moveq	#3,d0
00019BEE C028 0022                  		and.b	$22(a0),d0
00019BF2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BF8 8128 0001                  		or.b	d0,1(a0)
00019BFC 4EF9 0000 DB7A             		jmp	DisplaySprite
00019C02                            ; ===========================================================================
00019C02                            
00019C02                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019C02 217C 0001 83EA 0004        		move.l	#Map_BossItems,4(a0)
00019C0A 317C 246C 0002             		move.w	#$246C,2(a0)
00019C10 117C 0005 001A             		move.b	#5,$1A(a0)
00019C16 2268 0034                  		movea.l	$34(a0),a1
00019C1A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C20 6600                       		bne.s	loc_1961C
00019C22 4A28 0001                  		tst.b	1(a0)
00019C26 6A00                       		bpl.s	Obj75_SpikeDelete
00019C28                            
00019C28                            loc_1961C:
00019C28 3169 0008 0008             		move.w	8(a1),8(a0)
00019C2E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C34 3028 003C                  		move.w	$3C(a0),d0
00019C38 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C3E 6600                       		bne.s	loc_19652
00019C40 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C46 6700                       		beq.s	loc_1964C
00019C48 4A29 0028                  		tst.b	$28(a1)
00019C4C 6600                       		bne.s	loc_19658
00019C4E 0C40 0094                  		cmpi.w	#$94,d0
00019C52 6C00                       		bge.s	loc_19658
00019C54 5E40                       		addq.w	#7,d0
00019C56 6000                       		bra.s	loc_19658
00019C58                            ; ===========================================================================
00019C58                            
00019C58                            loc_1964C:
00019C58 4A69 003C                  		tst.w	$3C(a1)
00019C5C 6A00                       		bpl.s	loc_19658
00019C5E                            
00019C5E                            loc_19652:
00019C5E 4A40                       		tst.w	d0
00019C60 6F00                       		ble.s	loc_19658
00019C62 5B40                       		subq.w	#5,d0
00019C64                            
00019C64                            loc_19658:
00019C64 3140 003C                  		move.w	d0,$3C(a0)
00019C68 E440                       		asr.w	#2,d0
00019C6A D168 000C                  		add.w	d0,$C(a0)
00019C6E 117C 0008 0019             		move.b	#8,$19(a0)
00019C74 117C 000C 0016             		move.b	#$C,$16(a0)
00019C7A 4228 0020                  		clr.b	$20(a0)
00019C7E 2268 0034                  		movea.l	$34(a0),a1
00019C82 4A29 0020                  		tst.b	$20(a1)
00019C86 6700                       		beq.s	loc_19688
00019C88 4A29 0029                  		tst.b	$29(a1)
00019C8C 6600                       		bne.s	loc_19688
00019C8E 117C 0084 0020             		move.b	#$84,$20(a0)
00019C94                            
00019C94                            loc_19688:
00019C94 6000 FF50                  		bra.w	loc_195DA
00019C98                            ; ===========================================================================
00019C98                            
00019C98                            Obj75_SpikeDelete:
00019C98 4EF9 0000 DBB6             		jmp	DeleteObject
00019C9E                            ; ===========================================================================
00019C9E                            ; ---------------------------------------------------------------------------
00019C9E                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C9E                            ; ---------------------------------------------------------------------------
00019C9E                            
00019C9E                            Obj76:					; XREF: Obj_Index
00019C9E 7000                       		moveq	#0,d0
00019CA0 1028 0024                  		move.b	$24(a0),d0
00019CA4 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019CA8 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019CAC                            ; ===========================================================================
00019CAC 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019CAE 0000                       		dc.w Obj76_Action-Obj76_Index
00019CB0 0000                       		dc.w loc_19762-Obj76_Index
00019CB2                            ; ===========================================================================
00019CB2                            
00019CB2                            Obj76_Main:				; XREF: Obj76_Index
00019CB2 7800                       		moveq	#0,d4
00019CB4 3A3C 2C10                  		move.w	#$2C10,d5
00019CB8 7C09                       		moveq	#9,d6
00019CBA 43D0                       		lea	(a0),a1
00019CBC 6000                       		bra.s	Obj76_MakeBlock
00019CBE                            ; ===========================================================================
00019CBE                            
00019CBE                            Obj76_Loop:
00019CBE 4EB9 0000 E000             		jsr	SingleObjLoad
00019CC4 6600                       		bne.s	Obj76_ExitLoop
00019CC6                            
00019CC6                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CC6 12BC 0076                  		move.b	#$76,(a1)
00019CCA 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019CD2 337C 4000 0002             		move.w	#$4000,2(a1)
00019CD8 137C 0004 0001             		move.b	#4,1(a1)
00019CDE 137C 0010 0019             		move.b	#$10,$19(a1)
00019CE4 137C 0010 0016             		move.b	#$10,$16(a1)
00019CEA 137C 0003 0018             		move.b	#3,$18(a1)
00019CF0 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CF4 337C 0582 000C             		move.w	#$582,$C(a1)
00019CFA 3344 0028                  		move.w	d4,$28(a1)
00019CFE 0644 0101                  		addi.w	#$101,d4
00019D02 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019D06 5429 0024                  		addq.b	#2,$24(a1)
00019D0A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019D0E                            
00019D0E                            Obj76_ExitLoop:
00019D0E 4E75                       		rts	
00019D10                            ; ===========================================================================
00019D10                            
00019D10                            Obj76_Action:				; XREF: Obj76_Index
00019D10 1028 0029                  		move.b	$29(a0),d0
00019D14 B028 0028                  		cmp.b	$28(a0),d0
00019D18 6700                       		beq.s	Obj76_Solid
00019D1A 4A00                       		tst.b	d0
00019D1C 6B00                       		bmi.s	loc_19718
00019D1E                            
00019D1E                            loc_19712:
00019D1E 6100 0000                  		bsr.w	Obj76_Break
00019D22 6000                       		bra.s	Obj76_Display
00019D24                            ; ===========================================================================
00019D24                            
00019D24                            loc_19718:
00019D24 2268 0034                  		movea.l	$34(a0),a1
00019D28 4A29 0021                  		tst.b	$21(a1)
00019D2C 67F0                       		beq.s	loc_19712
00019D2E 3169 0008 0008             		move.w	8(a1),8(a0)
00019D34 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D3A 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D40 B2C8                       		cmpa.w	a0,a1
00019D42 6500                       		bcs.s	Obj76_Display
00019D44 3029 0012                  		move.w	$12(a1),d0
00019D48 48C0                       		ext.l	d0
00019D4A E080                       		asr.l	#8,d0
00019D4C D168 000C                  		add.w	d0,$C(a0)
00019D50 6000                       		bra.s	Obj76_Display
00019D52                            ; ===========================================================================
00019D52                            
00019D52                            Obj76_Solid:				; XREF: Obj76_Action
00019D52 323C 001B                  		move.w	#$1B,d1
00019D56 343C 0010                  		move.w	#$10,d2
00019D5A 363C 0011                  		move.w	#$11,d3
00019D5E 3828 0008                  		move.w	8(a0),d4
00019D62 4EB9 0000 FF4A             		jsr	SolidObject
00019D68                            
00019D68                            Obj76_Display:				; XREF: Obj76_Action
00019D68 4EF9 0000 DB7A             		jmp	DisplaySprite
00019D6E                            ; ===========================================================================
00019D6E                            
00019D6E                            loc_19762:				; XREF: Obj76_Index
00019D6E 4A28 0001                  		tst.b	1(a0)
00019D72 6A00                       		bpl.s	Obj76_Delete
00019D74 4EB9 0000 DB28             		jsr	ObjectFall
00019D7A 4EF9 0000 DB7A             		jmp	DisplaySprite
00019D80                            ; ===========================================================================
00019D80                            
00019D80                            Obj76_Delete:
00019D80 4EF9 0000 DBB6             		jmp	DeleteObject
00019D86                            
00019D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D86                            
00019D86                            
00019D86                            Obj76_Break:				; XREF: Obj76_Action
00019D86 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D8A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D8E 7801                       		moveq	#1,d4
00019D90 7203                       		moveq	#3,d1
00019D92 7438                       		moveq	#$38,d2
00019D94 5428 0024                  		addq.b	#2,$24(a0)
00019D98 117C 0008 0019             		move.b	#8,$19(a0)
00019D9E 117C 0008 0016             		move.b	#8,$16(a0)
00019DA4 43D0                       		lea	(a0),a1
00019DA6 6000                       		bra.s	Obj76_MakeFrag
00019DA8                            ; ===========================================================================
00019DA8                            
00019DA8                            Obj76_LoopFrag:
00019DA8 4EB9 0000 E016             		jsr	SingleObjLoad2
00019DAE 6600                       		bne.s	loc_197D4
00019DB0                            
00019DB0                            Obj76_MakeFrag:
00019DB0 45D0                       		lea	(a0),a2
00019DB2 47D1                       		lea	(a1),a3
00019DB4 7603                       		moveq	#3,d3
00019DB6                            
00019DB6                            loc_197AA:
00019DB6 26DA                       		move.l	(a2)+,(a3)+
00019DB8 26DA                       		move.l	(a2)+,(a3)+
00019DBA 26DA                       		move.l	(a2)+,(a3)+
00019DBC 26DA                       		move.l	(a2)+,(a3)+
00019DBE 51CB FFF6                  		dbf	d3,loc_197AA
00019DC2                            
00019DC2 335C 0010                  		move.w	(a4)+,$10(a1)
00019DC6 335C 0012                  		move.w	(a4)+,$12(a1)
00019DCA 361D                       		move.w	(a5)+,d3
00019DCC D769 0008                  		add.w	d3,8(a1)
00019DD0 361D                       		move.w	(a5)+,d3
00019DD2 D769 000C                  		add.w	d3,$C(a1)
00019DD6 1344 001A                  		move.b	d4,$1A(a1)
00019DDA 5244                       		addq.w	#1,d4
00019DDC 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019DE0                            
00019DE0                            loc_197D4:
00019DE0 303C 00CB                  		move.w	#$CB,d0
00019DE4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DEA                            ; End of function Obj76_Break
00019DEA                            
00019DEA                            ; ===========================================================================
00019DEA FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DEE 0180 FE00                  		dc.w $180, $FE00
00019DF2 FF00 FF00                  		dc.w $FF00, $FF00
00019DF6 0100 FF00                  		dc.w $100, $FF00
00019DFA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DFE 0010 0000                  		dc.w $10, 0
00019E02 0000 0010                  		dc.w 0,	$10
00019E06 0010 0010                  		dc.w $10, $10
00019E0A                            ; ---------------------------------------------------------------------------
00019E0A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019E0A                            ; ---------------------------------------------------------------------------
00019E0A                            Map_obj76:
00019E0A                            	include "_maps\obj76.asm"
00019E0A                            ; ---------------------------------------------------------------------------
00019E0A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019E0A                            ; ---------------------------------------------------------------------------
00019E0A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019E0E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019E12 0000                       		dc.w byte_19826-Map_obj76
00019E14 02                         byte_19808:	dc.b 2
00019E15 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019E1A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019E1F 00                         		dc.b 0
00019E20 01                         byte_19814:	dc.b 1
00019E21 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E26 01                         byte_1981A:	dc.b 1
00019E27 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E2C 01                         byte_19820:	dc.b 1
00019E2D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E32 01                         byte_19826:	dc.b 1
00019E33 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E38                            		even
00019E38                            		even
00019E38                            
00019E38                            ; ===========================================================================
00019E38                            
00019E38                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E38 4EF9 0000 DBB6             		jmp	DeleteObject
00019E3E                            ; ===========================================================================
00019E3E                            ; ---------------------------------------------------------------------------
00019E3E                            ; Object 82 - Eggman (SBZ2)
00019E3E                            ; ---------------------------------------------------------------------------
00019E3E                            
00019E3E                            Obj82:					; XREF: Obj_Index
00019E3E 7000                       		moveq	#0,d0
00019E40 1028 0024                  		move.b	$24(a0),d0
00019E44 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E48 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E4C                            ; ===========================================================================
00019E4C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E4E 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E50 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E52                            
00019E52 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E55 0400 03                    		dc.b 4,	0, 3
00019E58                            ; ===========================================================================
00019E58                            
00019E58                            Obj82_Main:				; XREF: Obj82_Index
00019E58 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E5C 317C 2160 0008             		move.w	#$2160,8(a0)
00019E62 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E68 117C 000F 0020             		move.b	#$F,$20(a0)
00019E6E 117C 0010 0021             		move.b	#$10,$21(a0)
00019E74 08A8 0000 0022             		bclr	#0,$22(a0)
00019E7A 4228 0025                  		clr.b	$25(a0)
00019E7E 115A 0024                  		move.b	(a2)+,$24(a0)
00019E82 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E86 115A 0018                  		move.b	(a2)+,$18(a0)
00019E8A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E92 317C 0400 0002             		move.w	#$400,2(a0)
00019E98 117C 0004 0001             		move.b	#4,1(a0)
00019E9E 08E8 0007 0001             		bset	#7,1(a0)
00019EA4 117C 0020 0019             		move.b	#$20,$19(a0)
00019EAA 4EB9 0000 E016             		jsr	SingleObjLoad2
00019EB0 6600                       		bne.s	Obj82_Eggman
00019EB2 2348 0034                  		move.l	a0,$34(a1)
00019EB6 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019EBA 337C 2130 0008             		move.w	#$2130,8(a1)
00019EC0 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EC6 4228 0025                  		clr.b	$25(a0)
00019ECA 135A 0024                  		move.b	(a2)+,$24(a1)
00019ECE 135A 001C                  		move.b	(a2)+,$1C(a1)
00019ED2 135A 0018                  		move.b	(a2)+,$18(a1)
00019ED6 237C 0000 C36E 0004        		move.l	#Map_obj32,4(a1)
00019EDE 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019EE4 137C 0004 0001             		move.b	#4,1(a1)
00019EEA 08E9 0007 0001             		bset	#7,1(a1)
00019EF0 137C 0010 0019             		move.b	#$10,$19(a1)
00019EF6 137C 0000 001A             		move.b	#0,$1A(a1)
00019EFC                            
00019EFC                            Obj82_Eggman:				; XREF: Obj82_Index
00019EFC 7000                       		moveq	#0,d0
00019EFE 1028 0025                  		move.b	$25(a0),d0
00019F02 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019F06 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019F0A 43FA 0000                  		lea	Ani_obj82(pc),a1
00019F0E 4EB9 0000 AC4A             		jsr	AnimateSprite
00019F14 4EF9 0000 DB7A             		jmp	DisplaySprite
00019F1A                            ; ===========================================================================
00019F1A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019F1C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019F1E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F20 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F22                            ; ===========================================================================
00019F22                            
00019F22                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F22 3028 0008                  		move.w	8(a0),d0
00019F26 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F2A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F2E 6400                       		bcc.s	loc_19934	; if not, branch
00019F30 5428 0025                  		addq.b	#2,$25(a0)
00019F34 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F3A 117C 0001 001C             		move.b	#1,$1C(a0)
00019F40                            
00019F40                            loc_19934:				; XREF: Obj82_EggIndex
00019F40 4EF9 0000 DB54             		jmp	SpeedToPos
00019F46                            ; ===========================================================================
00019F46                            
00019F46                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F46 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F4A 6600                       		bne.s	loc_19954	; if time remains, branch
00019F4C 5428 0025                  		addq.b	#2,$25(a0)
00019F50 117C 0002 001C             		move.b	#2,$1C(a0)
00019F56 5868 000C                  		addq.w	#4,$C(a0)
00019F5A 317C 000F 003C             		move.w	#15,$3C(a0)
00019F60                            
00019F60                            loc_19954:
00019F60 60DE                       		bra.s	loc_19934
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F62 5368 003C                  		subq.w	#1,$3C(a0)
00019F66 6E00                       		bgt.s	loc_199D0
00019F68 6600                       		bne.s	loc_1996A
00019F6A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F70 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F76                            
00019F76                            loc_1996A:
00019F76 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F7C 6E00                       		bgt.s	loc_19976
00019F7E 4268 0010                  		clr.w	$10(a0)
00019F82                            
00019F82                            loc_19976:
00019F82 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F88 4A68 0012                  		tst.w	$12(a0)
00019F8C 6B00                       		bmi.s	Obj82_FindBlocks
00019F8E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F94 6500                       		bcs.s	Obj82_FindBlocks
00019F96 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F9C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019FA2 6500                       		bcs.s	Obj82_FindBlocks
00019FA4 317C 059B 000C             		move.w	#$59B,$C(a0)
00019FAA 4268 0012                  		clr.w	$12(a0)
00019FAE                            
00019FAE                            Obj82_FindBlocks:
00019FAE 3028 0010                  		move.w	$10(a0),d0
00019FB2 8068 0012                  		or.w	$12(a0),d0
00019FB6 6600                       		bne.s	loc_199D0
00019FB8 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019FBC 703E                       		moveq	#$3E,d0
00019FBE 7240                       		moveq	#$40,d1
00019FC0                            
00019FC0                            Obj82_FindLoop:	
00019FC0 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FC2 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FC6 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FCA                            
00019FCA 6600                       		bne.s	loc_199D0
00019FCC 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019FD2 5428 0025                  		addq.b	#2,$25(a0)
00019FD6 117C 0001 001C             		move.b	#1,$1C(a0)
00019FDC                            
00019FDC                            loc_199D0:
00019FDC 6000 FF62                  		bra.w	loc_19934
00019FE0                            ; ===========================================================================
00019FE0                            
00019FE0                            Obj82_Switch:				; XREF: Obj82_Index
00019FE0 7000                       		moveq	#0,d0
00019FE2 1028 0025                  		move.b	$25(a0),d0
00019FE6 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FEA 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FEE                            ; ===========================================================================
00019FEE 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FF0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FF2                            ; ===========================================================================
00019FF2                            
00019FF2                            loc_199E6:				; XREF: Obj82_SwIndex
00019FF2 2268 0034                  		movea.l	$34(a0),a1
00019FF6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FFC 6600                       		bne.s	Obj82_SwDisplay
00019FFE 117C 0001 001A             		move.b	#1,$1A(a0)
0001A004 5428 0025                  		addq.b	#2,$25(a0)
0001A008                            
0001A008                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A008 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A00E                            ; ===========================================================================
0001A00E                            Ani_obj82:
0001A00E                            	include "_anim\obj82.asm"
0001A00E                            ; ---------------------------------------------------------------------------
0001A00E                            ; Animation script - Eggman (SBZ2)
0001A00E                            ; ---------------------------------------------------------------------------
0001A00E 0000                       		dc.w byte_19A10-Ani_obj82
0001A010 0000                       		dc.w byte_19A14-Ani_obj82
0001A012 0000                       		dc.w byte_19A18-Ani_obj82
0001A014 0000                       		dc.w byte_19A20-Ani_obj82
0001A016 0000                       		dc.w byte_19A24-Ani_obj82
0001A018 0000                       		dc.w byte_19A2A-Ani_obj82
0001A01A 0000                       		dc.w byte_19A30-Ani_obj82
0001A01C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A020 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A024 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A02C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A030 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A036 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A03C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A040                            		even
0001A040                            		even
0001A040                            
0001A040                            ; ---------------------------------------------------------------------------
0001A040                            ; Sprite mappings - Eggman (SBZ2)
0001A040                            ; ---------------------------------------------------------------------------
0001A040                            Map_obj82:
0001A040                            	include "_maps\obj82.asm"
0001A040                            ; ================================================================================
0001A040                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A040                            ; ================================================================================
0001A040                            
0001A040                            DATAA16Z12RYSAF:
0001A040 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A044 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A048 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A04C 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A050 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A054 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A056 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A057 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A05C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A061 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A066 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A067 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A06C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A071 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A076 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A07B 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A07C E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A081 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A086 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A08B FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A090 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A091 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A096 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A09B F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A0A0 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A0A1 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A0A6 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A0AB 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A0B0 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A0B5 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A0B6 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0BB E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0C0 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0C5 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0CA 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0CB E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0D0 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0D5 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A0DA 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A0DF F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0E4 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0E9 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0EE 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0EF 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0F4 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0F9 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0FE F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A103 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A104 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A109 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A10E 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A113 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A118 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A11D 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A11E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A123 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A128 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A12D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A132 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A137 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A13C 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A141 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A146 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A147 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A14C F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A151 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A156                            	even
0001A156                            	even
0001A156                            
0001A156                            ; ===========================================================================
0001A156                            ; ---------------------------------------------------------------------------
0001A156                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A156                            ; ---------------------------------------------------------------------------
0001A156                            
0001A156                            Obj83:					; XREF: Obj_Index
0001A156 7000                       		moveq	#0,d0
0001A158 1028 0024                  		move.b	$24(a0),d0
0001A15C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A160 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A164                            ; ===========================================================================
0001A164 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A166 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A168 0000                       		dc.w loc_19C36-Obj83_Index
0001A16A 0000                       		dc.w loc_19C62-Obj83_Index
0001A16C 0000                       		dc.w loc_19C72-Obj83_Index
0001A16E 0000                       		dc.w loc_19C80-Obj83_Index
0001A170                            ; ===========================================================================
0001A170                            
0001A170                            Obj83_Main:				; XREF: Obj83_Index
0001A170 317C 2080 0008             		move.w	#$2080,8(a0)
0001A176 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A17C 117C 0080 0019             		move.b	#$80,$19(a0)
0001A182 117C 0010 0016             		move.b	#$10,$16(a0)
0001A188 117C 0004 0001             		move.b	#4,1(a0)
0001A18E 08E8 0007 0001             		bset	#7,1(a0)
0001A194 7800                       		moveq	#0,d4
0001A196 3A3C 2010                  		move.w	#$2010,d5
0001A19A 7C07                       		moveq	#7,d6
0001A19C 45E8 0030                  		lea	$30(a0),a2
0001A1A0                            
0001A1A0                            Obj83_MakeBlock:
0001A1A0 4EB9 0000 E000             		jsr	SingleObjLoad
0001A1A6 6600                       		bne.s	Obj83_ExitMake
0001A1A8 34C9                       		move.w	a1,(a2)+
0001A1AA 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A1AE 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A1B6 337C 4518 0002             		move.w	#$4518,2(a1)
0001A1BC 137C 0004 0001             		move.b	#4,1(a1)
0001A1C2 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1C8 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1CE 137C 0003 0018             		move.b	#3,$18(a1)
0001A1D4 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A1D8 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A1DE 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1E2 137C 0008 0024             		move.b	#8,$24(a1)
0001A1E8 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1EC                            
0001A1EC                            Obj83_ExitMake:
0001A1EC 5428 0024                  		addq.b	#2,$24(a0)
0001A1F0 4E75                       		rts	
0001A1F2                            ; ===========================================================================
0001A1F2                            
0001A1F2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1F2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1F8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1FA 4228 001A                  		clr.b	$1A(a0)
0001A1FE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A202                            
0001A202                            Obj83_Solid:
0001A202 7000                       		moveq	#0,d0
0001A204 1028 001A                  		move.b	$1A(a0),d0
0001A208 4400                       		neg.b	d0
0001A20A 4880                       		ext.w	d0
0001A20C 5040                       		addq.w	#8,d0
0001A20E E940                       		asl.w	#4,d0
0001A210 383C 2100                  		move.w	#$2100,d4
0001A214 9840                       		sub.w	d0,d4
0001A216 1140 0019                  		move.b	d0,$19(a0)
0001A21A 3144 0008                  		move.w	d4,8(a0)
0001A21E 720B                       		moveq	#$B,d1
0001A220 D240                       		add.w	d0,d1
0001A222 7410                       		moveq	#$10,d2
0001A224 7611                       		moveq	#$11,d3
0001A226 4EF9 0000 FF4A             		jmp	SolidObject
0001A22C                            ; ===========================================================================
0001A22C                            
0001A22C                            loc_19C36:				; XREF: Obj83_Index
0001A22C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A232 6400                       		bcc.s	Obj83_Solid2
0001A234 70FF                       		moveq	#-1,d0
0001A236 1028 001A                  		move.b	$1A(a0),d0
0001A23A 4880                       		ext.w	d0
0001A23C D040                       		add.w	d0,d0
0001A23E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A242 2240                       		movea.l	d0,a1
0001A244 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A24A 5228 001A                  		addq.b	#1,$1A(a0)
0001A24E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A254 6700                       		beq.s	loc_19C62
0001A256                            
0001A256                            Obj83_Solid2:
0001A256 60AA                       		bra.s	Obj83_Solid
0001A258                            ; ===========================================================================
0001A258                            
0001A258                            loc_19C62:				; XREF: Obj83_Index
0001A258 08A8 0003 0022             		bclr	#3,$22(a0)
0001A25E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A264 6000 FBD2                  		bra.w	loc_1982C
0001A268                            ; ===========================================================================
0001A268                            
0001A268                            loc_19C72:				; XREF: Obj83_Index
0001A268 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A26E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A270 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A276                            ; ===========================================================================
0001A276                            
0001A276                            loc_19C80:				; XREF: Obj83_Index
0001A276 4A28 0001                  		tst.b	1(a0)
0001A27A 6A00 FBBC                  		bpl.w	loc_1982C
0001A27E 4EB9 0000 DB28             		jsr	ObjectFall
0001A284 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A28A                            ; ===========================================================================
0001A28A                            
0001A28A                            Obj83_Break:				; XREF: loc_19C72
0001A28A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A28E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A292 7801                       		moveq	#1,d4
0001A294 7203                       		moveq	#3,d1
0001A296 7438                       		moveq	#$38,d2
0001A298 5428 0024                  		addq.b	#2,$24(a0)
0001A29C 117C 0008 0019             		move.b	#8,$19(a0)
0001A2A2 117C 0008 0016             		move.b	#8,$16(a0)
0001A2A8 43D0                       		lea	(a0),a1
0001A2AA 6000                       		bra.s	Obj83_MakeFrag
0001A2AC                            ; ===========================================================================
0001A2AC                            
0001A2AC                            Obj83_LoopFrag:
0001A2AC 4EB9 0000 E016             		jsr	SingleObjLoad2
0001A2B2 6600                       		bne.s	Obj83_BreakSnd
0001A2B4                            
0001A2B4                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A2B4 45D0                       		lea	(a0),a2
0001A2B6 47D1                       		lea	(a1),a3
0001A2B8 7603                       		moveq	#3,d3
0001A2BA                            
0001A2BA                            loc_19CC4:
0001A2BA 26DA                       		move.l	(a2)+,(a3)+
0001A2BC 26DA                       		move.l	(a2)+,(a3)+
0001A2BE 26DA                       		move.l	(a2)+,(a3)+
0001A2C0 26DA                       		move.l	(a2)+,(a3)+
0001A2C2 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2C6                            
0001A2C6 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2CA 361D                       		move.w	(a5)+,d3
0001A2CC D769 0008                  		add.w	d3,8(a1)
0001A2D0 361D                       		move.w	(a5)+,d3
0001A2D2 D769 000C                  		add.w	d3,$C(a1)
0001A2D6 1344 001A                  		move.b	d4,$1A(a1)
0001A2DA 5244                       		addq.w	#1,d4
0001A2DC 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A2E0                            
0001A2E0                            Obj83_BreakSnd:
0001A2E0 303C 00CB                  		move.w	#$CB,d0
0001A2E4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2EA 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A2F0                            ; ===========================================================================
0001A2F0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2F4 0120 00C0                  		dc.w $120, $C0
0001A2F8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2FC 0010 0000                  		dc.w $10, 0
0001A300 0000 0010                  		dc.w 0,	$10
0001A304 0010 0010                  		dc.w $10, $10
0001A308                            ; ---------------------------------------------------------------------------
0001A308                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A308                            ; ---------------------------------------------------------------------------
0001A308                            Map_obj83:
0001A308                            	include "_maps\obj83.asm"
0001A308                            ; ---------------------------------------------------------------------------
0001A308                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A308                            ; ---------------------------------------------------------------------------
0001A308 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A30C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A310 0000                       		dc.w byte_19D46-Map_obj83
0001A312 01                         byte_19D1C:	dc.b 1
0001A313 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A318 02                         byte_19D22:	dc.b 2
0001A319 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A31E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A323 00                         		dc.b 0
0001A324 02                         byte_19D2E:	dc.b 2
0001A325 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A32A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A32F 00                         		dc.b 0
0001A330 02                         byte_19D3A:	dc.b 2
0001A331 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A336 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A33B 00                         		dc.b 0
0001A33C 02                         byte_19D46:	dc.b 2
0001A33D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A342 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A348 00                         		even
0001A348 00                         		even
0001A348                            
0001A348                            ; ===========================================================================
0001A348                            ; ---------------------------------------------------------------------------
0001A348                            ; Object 85 - Eggman (FZ)
0001A348                            ; ---------------------------------------------------------------------------
0001A348                            
0001A348                            Obj85_Delete:
0001A348 4EF9 0000 DBB6             		jmp	DeleteObject
0001A34E                            ; ===========================================================================
0001A34E                            
0001A34E                            Obj85:					; XREF: Obj_Index
0001A34E 7000                       		moveq	#0,d0
0001A350 1028 0024                  		move.b	$24(a0),d0
0001A354 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A358 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A35C                            ; ===========================================================================
0001A35C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A35E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A360 0000                       		dc.w loc_1A38E-Obj85_Index
0001A362 0000                       		dc.w loc_1A346-Obj85_Index
0001A364 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A366 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A368 0000                       		dc.w loc_1A264-Obj85_Index
0001A36A                            
0001A36A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A370 0001 A040                  		dc.l Map_obj82		; mappings pointer
0001A374 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A37A 0000 0000                  		dc.l Map_obj84
0001A37E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A384 0000 0000                  		dc.l Map_FZBoss
0001A388 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A38E 0001 A040                  		dc.l Map_obj82
0001A392 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A398 0001 8322                  		dc.l Map_Eggman
0001A39C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A3A2 0001 8322                  		dc.l Map_Eggman
0001A3A6                            
0001A3A6 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A3AB 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A3B0 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A3B5 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A3BA 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A3BF 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3C4                            ; ===========================================================================
0001A3C4                            
0001A3C4                            Obj85_Main:				; XREF: Obj85_Index
0001A3C4 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3C8 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3CC 2248                       		movea.l	a0,a1
0001A3CE 7205                       		moveq	#5,d1
0001A3D0 6000                       		bra.s	Obj85_LoadBoss
0001A3D2                            ; ===========================================================================
0001A3D2                            
0001A3D2                            Obj85_Loop:
0001A3D2 4EB9 0000 E016             		jsr	SingleObjLoad2
0001A3D8 6600                       		bne.s	loc_19E20
0001A3DA                            
0001A3DA                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A3DA 12BC 0085                  		move.b	#$85,(a1)
0001A3DE 335A 0008                  		move.w	(a2)+,8(a1)
0001A3E2 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3E6 335A 0002                  		move.w	(a2)+,2(a1)
0001A3EA 235A 0004                  		move.l	(a2)+,4(a1)
0001A3EE 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3F2 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3F6 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3FA 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3FE 135B 0016                  		move.b	(a3)+,$16(a1)
0001A402 137C 0004 0001             		move.b	#4,1(a1)
0001A408 08E8 0007 0001             		bset	#7,1(a0)
0001A40E 2348 0034                  		move.l	a0,$34(a1)
0001A412 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A416                            
0001A416                            loc_19E20:
0001A416 45E8 0036                  		lea	$36(a0),a2
0001A41A 4EB9 0000 E000             		jsr	SingleObjLoad
0001A420 6600                       		bne.s	loc_19E5A
0001A422 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A426 3489                       		move.w	a1,(a2)
0001A428 2348 0034                  		move.l	a0,$34(a1)
0001A42C 45E8 0038                  		lea	$38(a0),a2
0001A430 7400                       		moveq	#0,d2
0001A432 7203                       		moveq	#3,d1
0001A434                            
0001A434                            loc_19E3E:
0001A434 4EB9 0000 E016             		jsr	SingleObjLoad2
0001A43A 6600                       		bne.s	loc_19E5A
0001A43C 34C9                       		move.w	a1,(a2)+
0001A43E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A442 2348 0034                  		move.l	a0,$34(a1)
0001A446 1342 0028                  		move.b	d2,$28(a1)
0001A44A 5442                       		addq.w	#2,d2
0001A44C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A450                            
0001A450                            loc_19E5A:
0001A450 317C 0000 0034             		move.w	#0,$34(a0)
0001A456 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A45C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A462                            
0001A462                            Obj85_Eggman:				; XREF: Obj85_Index
0001A462 7000                       		moveq	#0,d0
0001A464 1028 0034                  		move.b	$34(a0),d0
0001A468 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A46C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A470 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A476                            ; ===========================================================================
0001A476 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A47A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A47E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A482 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A486                            ; ===========================================================================
0001A486                            
0001A486                            loc_19E90:				; XREF: off_19E80
0001A486 4AB8 F680                  		tst.l	($FFFFF680).w
0001A48A 6600                       		bne.s	loc_19EA2
0001A48C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A492 6500                       		bcs.s	loc_19EA2
0001A494 5428 0034                  		addq.b	#2,$34(a0)
0001A498                            
0001A498                            loc_19EA2:
0001A498 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A49C 4E75                       		rts	
0001A49E                            ; ===========================================================================
0001A49E                            
0001A49E                            loc_19EA8:				; XREF: off_19E80
0001A49E 4A68 0030                  		tst.w	$30(a0)
0001A4A2 6A00                       		bpl.s	loc_19F10
0001A4A4 4268 0030                  		clr.w	$30(a0)
0001A4A8 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A4AE 0240 000C                  		andi.w	#$C,d0
0001A4B2 3200                       		move.w	d0,d1
0001A4B4 5441                       		addq.w	#2,d1
0001A4B6 4A80                       		tst.l	d0
0001A4B8 6A00                       		bpl.s	loc_19EC6
0001A4BA C141                       		exg	d1,d0
0001A4BC                            
0001A4BC                            loc_19EC6:
0001A4BC 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4C0 3031 0000                  		move.w	(a1,d0.w),d0
0001A4C4 3231 1000                  		move.w	(a1,d1.w),d1
0001A4C8 3140 0030                  		move.w	d0,$30(a0)
0001A4CC 74FF                       		moveq	#-1,d2
0001A4CE 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A4D2 2242                       		movea.l	d2,a1
0001A4D4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A4DA 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A4E0 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4E4 2242                       		movea.l	d2,a1
0001A4E6 137C 0001 0029             		move.b	#1,$29(a1)
0001A4EC 337C 0000 0030             		move.w	#0,$30(a1)
0001A4F2 317C 0001 0032             		move.w	#1,$32(a0)
0001A4F8 4228 0035                  		clr.b	$35(a0)
0001A4FC 303C 00B7                  		move.w	#$B7,d0
0001A500 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A506                            
0001A506                            loc_19F10:
0001A506 4A68 0032                  		tst.w	$32(a0)
0001A50A 6B00 0000                  		bmi.w	loc_19FA6
0001A50E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A514 3038 D008                  		move.w	($FFFFD008).w,d0
0001A518 9068 0008                  		sub.w	8(a0),d0
0001A51C 6500                       		bcs.s	loc_19F2E
0001A51E 08E8 0000 0022             		bset	#0,$22(a0)
0001A524                            
0001A524                            loc_19F2E:
0001A524 323C 002B                  		move.w	#$2B,d1
0001A528 343C 0014                  		move.w	#$14,d2
0001A52C 363C 0014                  		move.w	#$14,d3
0001A530 3828 0008                  		move.w	8(a0),d4
0001A534 4EB9 0000 FF4A             		jsr	SolidObject
0001A53A 4A44                       		tst.w	d4
0001A53C 6E00                       		bgt.s	loc_19F50
0001A53E                            
0001A53E                            loc_19F48:
0001A53E 4A28 0035                  		tst.b	$35(a0)
0001A542 6600                       		bne.s	loc_19F88
0001A544 6000                       		bra.s	loc_19F96
0001A546                            ; ===========================================================================
0001A546                            
0001A546                            loc_19F50:
0001A546 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A54A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A550 66EC                       		bne.s	loc_19F48
0001A552 303C 0300                  		move.w	#$300,d0
0001A556 0828 0000 0022             		btst	#0,$22(a0)
0001A55C 6600                       		bne.s	loc_19F6A
0001A55E 4440                       		neg.w	d0
0001A560                            
0001A560                            loc_19F6A:
0001A560 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A564 4A28 0035                  		tst.b	$35(a0)
0001A568 6600                       		bne.s	loc_19F88
0001A56A 5328 0021                  		subq.b	#1,$21(a0)
0001A56E 117C 0064 0035             		move.b	#$64,$35(a0)
0001A574 303C 00AC                  		move.w	#$AC,d0
0001A578 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A57E                            
0001A57E                            loc_19F88:
0001A57E 5328 0035                  		subq.b	#1,$35(a0)
0001A582 6700                       		beq.s	loc_19F96
0001A584 117C 0003 001C             		move.b	#3,$1C(a0)
0001A58A 6000                       		bra.s	loc_19F9C
0001A58C                            ; ===========================================================================
0001A58C                            
0001A58C                            loc_19F96:
0001A58C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A592                            
0001A592                            loc_19F9C:
0001A592 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A596 4EF9 0000 AC4A             		jmp	AnimateSprite
0001A59C                            ; ===========================================================================
0001A59C                            
0001A59C                            loc_19FA6:
0001A59C 4A28 0021                  		tst.b	$21(a0)
0001A5A0 6700                       		beq.s	loc_19FBC
0001A5A2 5428 0034                  		addq.b	#2,$34(a0)
0001A5A6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5AC 4268 0032                  		clr.w	$32(a0)
0001A5B0 4E75                       		rts	
0001A5B2                            ; ===========================================================================
0001A5B2                            
0001A5B2                            loc_19FBC:
0001A5B2 117C 0006 0034             		move.b	#6,$34(a0)
0001A5B8 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A5BE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5C4 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5CA 4E75                       		rts	
0001A5CC                            ; ===========================================================================
0001A5CC 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A5DC                            ; ===========================================================================
0001A5DC                            
0001A5DC                            loc_19FE6:				; XREF: off_19E80
0001A5DC 70FF                       		moveq	#-1,d0
0001A5DE 3028 0036                  		move.w	$36(a0),d0
0001A5E2 2240                       		movea.l	d0,a1
0001A5E4 4A68 0030                  		tst.w	$30(a0)
0001A5E8 6A00                       		bpl.s	loc_1A000
0001A5EA 4268 0030                  		clr.w	$30(a0)
0001A5EE 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5F4 6100                       		bsr.s	loc_1A020
0001A5F6                            
0001A5F6                            loc_1A000:
0001A5F6 700F                       		moveq	#$F,d0
0001A5F8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5FC 6600                       		bne.s	loc_1A00A
0001A5FE 6100                       		bsr.s	loc_1A020
0001A600                            
0001A600                            loc_1A00A:
0001A600 4A68 0032                  		tst.w	$32(a0)
0001A604 6700                       		beq.s	locret_1A01E
0001A606 5528 0034                  		subq.b	#2,$34(a0)
0001A60A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A610 4268 0032                  		clr.w	$32(a0)
0001A614                            
0001A614                            locret_1A01E:
0001A614 4E75                       		rts	
0001A616                            ; ===========================================================================
0001A616                            
0001A616                            loc_1A020:
0001A616 303C 00B1                  		move.w	#$B1,d0
0001A61A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A620                            ; ===========================================================================
0001A620                            
0001A620                            loc_1A02A:				; XREF: off_19E80
0001A620 117C 0030 0017             		move.b	#$30,$17(a0)
0001A626 08E8 0000 0022             		bset	#0,$22(a0)
0001A62C 4EB9 0000 DB54             		jsr	SpeedToPos
0001A632 117C 0006 001A             		move.b	#6,$1A(a0)
0001A638 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A63E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A644 6500                       		bcs.s	loc_1A070
0001A646 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A64C 5428 0034                  		addq.b	#2,$34(a0)
0001A650 117C 0020 0017             		move.b	#$20,$17(a0)
0001A656 317C 0100 0010             		move.w	#$100,$10(a0)
0001A65C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A662 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A666                            
0001A666                            loc_1A070:
0001A666 6000 0000                  		bra.w	loc_1A166
0001A66A                            ; ===========================================================================
0001A66A                            
0001A66A                            loc_1A074:				; XREF: off_19E80
0001A66A 08E8 0000 0022             		bset	#0,$22(a0)
0001A670 117C 0004 001C             		move.b	#4,$1C(a0)
0001A676 4EB9 0000 DB54             		jsr	SpeedToPos
0001A67C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A682 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A688 6500                       		bcs.s	loc_1A09A
0001A68A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A690                            
0001A690                            loc_1A09A:
0001A690 317C 0400 0010             		move.w	#$400,$10(a0)
0001A696 3028 0008                  		move.w	8(a0),d0
0001A69A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A69E 6A00                       		bpl.s	loc_1A0B4
0001A6A0 317C 0500 0010             		move.w	#$500,$10(a0)
0001A6A6 6000 0000                  		bra.w	loc_1A0F2
0001A6AA                            ; ===========================================================================
0001A6AA                            
0001A6AA                            loc_1A0B4:
0001A6AA 0440 0070                  		subi.w	#$70,d0
0001A6AE 6500                       		bcs.s	loc_1A0F2
0001A6B0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6B6 5140                       		subq.w	#8,d0
0001A6B8 6500                       		bcs.s	loc_1A0F2
0001A6BA 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6C0 5140                       		subq.w	#8,d0
0001A6C2 6500                       		bcs.s	loc_1A0F2
0001A6C4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6CA 5140                       		subq.w	#8,d0
0001A6CC 6500                       		bcs.s	loc_1A0F2
0001A6CE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6D4 5140                       		subq.w	#8,d0
0001A6D6 6500                       		bcs.s	loc_1A0F2
0001A6D8 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6DE 0440 0038                  		subi.w	#$38,d0
0001A6E2 6500                       		bcs.s	loc_1A0F2
0001A6E4 4268 0010                  		clr.w	$10(a0)
0001A6E8                            
0001A6E8                            loc_1A0F2:
0001A6E8 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6EE 6500                       		bcs.s	loc_1A110
0001A6F0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6F6 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6FC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A702 5428 0034                  		addq.b	#2,$34(a0)
0001A706                            
0001A706                            loc_1A110:
0001A706 6000                       		bra.s	loc_1A15C
0001A708                            ; ===========================================================================
0001A708                            
0001A708                            loc_1A112:				; XREF: off_19E80
0001A708 4EB9 0000 DB54             		jsr	SpeedToPos
0001A70E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A714 6500                       		bcs.s	loc_1A124
0001A716 4268 0010                  		clr.w	$10(a0)
0001A71A                            
0001A71A                            loc_1A124:
0001A71A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A720 4A68 0012                  		tst.w	$12(a0)
0001A724 6B00                       		bmi.s	loc_1A142
0001A726 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A72C 6500                       		bcs.s	loc_1A142
0001A72E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A734 4268 0012                  		clr.w	$12(a0)
0001A738                            
0001A738                            loc_1A142:
0001A738 3028 0010                  		move.w	$10(a0),d0
0001A73C 8068 0012                  		or.w	$12(a0),d0
0001A740 6600                       		bne.s	loc_1A15C
0001A742 5428 0034                  		addq.b	#2,$34(a0)
0001A746 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A74C 117C 0001 0021             		move.b	#1,$21(a0)
0001A752                            
0001A752                            loc_1A15C:
0001A752 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A756 4EB9 0000 AC4A             		jsr	AnimateSprite
0001A75C                            
0001A75C                            loc_1A166:
0001A75C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A762 6C00                       		bge.s	loc_1A172
0001A764 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A768                            
0001A768                            loc_1A172:
0001A768 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A76E 6C00                       		bge.s	locret_1A190
0001A770 323C 001B                  		move.w	#$1B,d1
0001A774 343C 0070                  		move.w	#$70,d2
0001A778 363C 0071                  		move.w	#$71,d3
0001A77C 3828 0008                  		move.w	8(a0),d4
0001A780 4EF9 0000 FF4A             		jmp	SolidObject
0001A786                            ; ===========================================================================
0001A786                            
0001A786                            locret_1A190:
0001A786 4E75                       		rts	
0001A788                            ; ===========================================================================
0001A788                            
0001A788                            loc_1A192:				; XREF: off_19E80
0001A788 217C 0001 8322 0004        		move.l	#Map_Eggman,4(a0)
0001A790 317C 0400 0002             		move.w	#$400,2(a0)
0001A796 117C 0000 001C             		move.b	#0,$1C(a0)
0001A79C 08E8 0000 0022             		bset	#0,$22(a0)
0001A7A2 4EB9 0000 DB54             		jsr	SpeedToPos
0001A7A8 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A7AE 6400                       		bcc.s	loc_1A1D0
0001A7B0 317C 0180 0010             		move.w	#$180,$10(a0)
0001A7B6 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A7BC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7C2 5428 0034                  		addq.b	#2,$34(a0)
0001A7C6                            
0001A7C6                            loc_1A1D0:
0001A7C6 6000 FF8A                  		bra.w	loc_1A15C
0001A7CA                            ; ===========================================================================
0001A7CA                            
0001A7CA                            loc_1A1D4:				; XREF: off_19E80
0001A7CA 08E8 0000 0022             		bset	#0,$22(a0)
0001A7D0 4EB9 0000 DB54             		jsr	SpeedToPos
0001A7D6 4A68 0030                  		tst.w	$30(a0)
0001A7DA 6600                       		bne.s	loc_1A1FC
0001A7DC 4A28 0020                  		tst.b	$20(a0)
0001A7E0 6600                       		bne.s	loc_1A216
0001A7E2 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7E8 303C 00AC                  		move.w	#$AC,d0
0001A7EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7F2                            
0001A7F2                            loc_1A1FC:
0001A7F2 5368 0030                  		subq.w	#1,$30(a0)
0001A7F6 6600                       		bne.s	loc_1A216
0001A7F8 4A28 0022                  		tst.b	$22(a0)
0001A7FC 6A00                       		bpl.s	loc_1A210
0001A7FE 317C 0060 0012             		move.w	#$60,$12(a0)
0001A804 6000                       		bra.s	loc_1A216
0001A806                            ; ===========================================================================
0001A806                            
0001A806                            loc_1A210:
0001A806 117C 000F 0020             		move.b	#$F,$20(a0)
0001A80C                            
0001A80C                            loc_1A216:
0001A80C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A812 6D00                       		blt.s	loc_1A23A
0001A814 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A81A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A820 4278 D014                  		clr.w	($FFFFD014).w
0001A824 4A68 0012                  		tst.w	$12(a0)
0001A828 6A00                       		bpl.s	loc_1A248
0001A82A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A830                            
0001A830                            loc_1A23A:
0001A830 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A836 6D00                       		blt.s	loc_1A248
0001A838 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A83E                            
0001A83E                            loc_1A248:
0001A83E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A844 6500                       		bcs.s	loc_1A260
0001A846 4A28 0001                  		tst.b	1(a0)
0001A84A 6B00                       		bmi.s	loc_1A260
0001A84C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A852 6000 FAF4                  		bra.w	Obj85_Delete
0001A856                            ; ===========================================================================
0001A856                            
0001A856                            loc_1A260:
0001A856 6000 FEFA                  		bra.w	loc_1A15C
0001A85A                            ; ===========================================================================
0001A85A                            
0001A85A                            loc_1A264:				; XREF: Obj85_Index
0001A85A 2268 0034                  		movea.l	$34(a0),a1
0001A85E 1011                       		move.b	(a1),d0
0001A860 B010                       		cmp.b	(a0),d0
0001A862 6600 FAE4                  		bne.w	Obj85_Delete
0001A866 117C 0007 001C             		move.b	#7,$1C(a0)
0001A86C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A872 6C00                       		bge.s	loc_1A280
0001A874 6000                       		bra.s	loc_1A2A6
0001A876                            ; ===========================================================================
0001A876                            
0001A876                            loc_1A280:
0001A876 4A69 0010                  		tst.w	$10(a1)
0001A87A 6700                       		beq.s	loc_1A28C
0001A87C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A882                            
0001A882                            loc_1A28C:
0001A882 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A886 4EB9 0000 AC4A             		jsr	AnimateSprite
0001A88C                            
0001A88C                            loc_1A296:
0001A88C 2268 0034                  		movea.l	$34(a0),a1
0001A890 3169 0008 0008             		move.w	8(a1),8(a0)
0001A896 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A89C                            
0001A89C                            loc_1A2A6:
0001A89C 2268 0034                  		movea.l	$34(a0),a1
0001A8A0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A8A6 7003                       		moveq	#3,d0
0001A8A8 C028 0022                  		and.b	$22(a0),d0
0001A8AC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A8B2 8128 0001                  		or.b	d0,1(a0)
0001A8B6 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A8BC                            ; ===========================================================================
0001A8BC                            
0001A8BC                            loc_1A2C6:				; XREF: Obj85_Index
0001A8BC 2268 0034                  		movea.l	$34(a0),a1
0001A8C0 1011                       		move.b	(a1),d0
0001A8C2 B010                       		cmp.b	(a0),d0
0001A8C4 6600 FA82                  		bne.w	Obj85_Delete
0001A8C8 0CA9 0001 8322 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8D0 6700                       		beq.s	loc_1A2E4
0001A8D2 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A8D8 60C2                       		bra.s	loc_1A2A6
0001A8DA                            ; ===========================================================================
0001A8DA                            
0001A8DA                            loc_1A2E4:
0001A8DA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8E0 4A29 0021                  		tst.b	$21(a1)
0001A8E4 6F00                       		ble.s	loc_1A312
0001A8E6 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8EC 217C 0001 8322 0004        		move.l	#Map_Eggman,4(a0)
0001A8F4 317C 0400 0002             		move.w	#$400,2(a0)
0001A8FA 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8FE 4EB9 0000 AC4A             		jsr	AnimateSprite
0001A904 6000 FF86                  		bra.w	loc_1A296
0001A908                            ; ===========================================================================
0001A908                            
0001A908                            loc_1A312:
0001A908 4A28 0001                  		tst.b	1(a0)
0001A90C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A910 6100 D56E                  		bsr.w	BossDefeated
0001A914 117C 0002 0018             		move.b	#2,$18(a0)
0001A91A 117C 0000 001C             		move.b	#0,$1C(a0)
0001A920 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A928 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A92E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A932 4EB9 0000 AC4A             		jsr	AnimateSprite
0001A938 6000 FF52                  		bra.w	loc_1A296
0001A93C                            ; ===========================================================================
0001A93C                            
0001A93C                            loc_1A346:				; XREF: Obj85_Index
0001A93C 08E8 0000 0022             		bset	#0,$22(a0)
0001A942 2268 0034                  		movea.l	$34(a0),a1
0001A946 0CA9 0001 8322 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A94E 6700                       		beq.s	loc_1A35E
0001A950 6000 FF4A                  		bra.w	loc_1A2A6
0001A954                            ; ===========================================================================
0001A954                            
0001A954                            loc_1A35E:
0001A954 3169 0008 0008             		move.w	8(a1),8(a0)
0001A95A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A960 4A28 001E                  		tst.b	$1E(a0)
0001A964 6600                       		bne.s	loc_1A376
0001A966 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A96C                            
0001A96C                            loc_1A376:
0001A96C 5328 001E                  		subq.b	#1,$1E(a0)
0001A970 6E00                       		bgt.s	loc_1A38A
0001A972 5228 001A                  		addq.b	#1,$1A(a0)
0001A976 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A97C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A980                            
0001A980                            loc_1A38A:
0001A980 6000 FF0A                  		bra.w	loc_1A296
0001A984                            ; ===========================================================================
0001A984                            
0001A984                            loc_1A38E:				; XREF: Obj85_Index
0001A984 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A98A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A98E 9068 0008                  		sub.w	8(a0),d0
0001A992 6500                       		bcs.s	loc_1A3A6
0001A994 4A28 0001                  		tst.b	1(a0)
0001A998 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A99C                            
0001A99C                            loc_1A3A6:
0001A99C 4EF9 0000 DB7A             		jmp	DisplaySprite
0001A9A2                            ; ===========================================================================
0001A9A2                            
0001A9A2                            loc_1A3AC:				; XREF: Obj85_Index
0001A9A2 117C 0000 001A             		move.b	#0,$1A(a0)
0001A9A8 08E8 0000 0022             		bset	#0,$22(a0)
0001A9AE 2268 0034                  		movea.l	$34(a0),a1
0001A9B2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A9B8 6600                       		bne.s	loc_1A3D0
0001A9BA 0CA9 0001 8322 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9C2 6700 F984                  		beq.w	Obj85_Delete
0001A9C6                            
0001A9C6                            loc_1A3D0:
0001A9C6 6000 FED4                  		bra.w	loc_1A2A6
0001A9CA                            ; ===========================================================================
0001A9CA                            Ani_obj85:
0001A9CA                            	include "_anim\obj85.asm"
0001A9CA                            ; ---------------------------------------------------------------------------
0001A9CA                            ; Animation script - Eggman (FZ)
0001A9CA                            ; ---------------------------------------------------------------------------
0001A9CA 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9CC 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9D0                            		even
0001A9D0                            		even
0001A9D0                            
0001A9D0                            Map_Eggman2:
0001A9D0                            	include "_maps\Eggman2.asm"
0001A9D0                            ; ---------------------------------------------------------------------------
0001A9D0                            ; Sprite mappings - Eggman (FZ)
0001A9D0                            ; ---------------------------------------------------------------------------
0001A9D0 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A9D2 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A9D4 06                         byte_1A3DE:	dc.b 6
0001A9D5 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A9DA EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A9DF EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9E4 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9E9 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9EE 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9F3 06                         byte_1A3FD:	dc.b 6
0001A9F4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9F9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9FE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AA03 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AA08 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AA0D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AA12                            		even
0001AA12                            		even
0001AA12                            
0001AA12                            Map_FZBoss:
0001AA12                            	include "_maps\FZ boss.asm"
0001AA12                            ; ---------------------------------------------------------------------------
0001AA12                            ; Sprite mappings - boss (FZ)
0001AA12                            ; ---------------------------------------------------------------------------
0001AA12 0000                       		dc.w byte_1A422-Map_FZBoss
0001AA14 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AA16 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AA18 02                         byte_1A422:	dc.b 2
0001AA19 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AA1E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA23 03                         byte_1A42D:	dc.b 3
0001AA24 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA29 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA2E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA33 02                         byte_1A43D:	dc.b 2
0001AA34 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA39 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA3E                            		even
0001AA3E                            		even
0001AA3E                            
0001AA3E                            ; ===========================================================================
0001AA3E                            
0001AA3E                            Obj84_Delete:
0001AA3E 4EF9 0000 DBB6             		jmp	DeleteObject
0001AA44                            ; ===========================================================================
0001AA44                            ; ---------------------------------------------------------------------------
0001AA44                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA44                            ; ---------------------------------------------------------------------------
0001AA44                            
0001AA44                            Obj84:					; XREF: Obj_Index
0001AA44 7000                       		moveq	#0,d0
0001AA46 1028 0024                  		move.b	$24(a0),d0
0001AA4A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA4E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA52                            ; ===========================================================================
0001AA52 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA54 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA56 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA58                            
0001AA58 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA5C 2550 0620                  		dc.w $2550, $620
0001AA60 2490 04C0                  		dc.w $2490, $4C0
0001AA64 2510 04C0                  		dc.w $2510, $4C0
0001AA68                            ; ===========================================================================
0001AA68                            
0001AA68                            Obj84_Main:				; XREF: Obj84_Index
0001AA68 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA6C 7000                       		moveq	#0,d0
0001AA6E 1028 0028                  		move.b	$28(a0),d0
0001AA72 D040                       		add.w	d0,d0
0001AA74 D2C0                       		adda.w	d0,a1
0001AA76 117C 0004 0001             		move.b	#4,1(a0)
0001AA7C 08E8 0007 0001             		bset	#7,1(a0)
0001AA82 08E8 0004 0001             		bset	#4,1(a0)
0001AA88 317C 0300 0002             		move.w	#$300,2(a0)
0001AA8E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA96 3159 0008                  		move.w	(a1)+,8(a0)
0001AA9A 3151 000C                  		move.w	(a1),$C(a0)
0001AA9E 3159 0038                  		move.w	(a1)+,$38(a0)
0001AAA2 117C 0020 0016             		move.b	#$20,$16(a0)
0001AAA8 117C 0060 0017             		move.b	#$60,$17(a0)
0001AAAE 117C 0020 0019             		move.b	#$20,$19(a0)
0001AAB4 117C 0060 0016             		move.b	#$60,$16(a0)
0001AABA 117C 0003 0018             		move.b	#3,$18(a0)
0001AAC0 5428 0024                  		addq.b	#2,$24(a0)
0001AAC4                            
0001AAC4                            loc_1A4CE:				; XREF: Obj84_Index
0001AAC4 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AACA 6F00                       		ble.s	loc_1A4DC
0001AACC 08E8 0001 0001             		bset	#1,1(a0)
0001AAD2                            
0001AAD2                            loc_1A4DC:
0001AAD2 42A8 003C                  		clr.l	$3C(a0)
0001AAD6 4A28 0029                  		tst.b	$29(a0)
0001AADA 6700                       		beq.s	loc_1A4EA
0001AADC 5428 0024                  		addq.b	#2,$24(a0)
0001AAE0                            
0001AAE0                            loc_1A4EA:
0001AAE0 2028 003C                  		move.l	$3C(a0),d0
0001AAE4 2228 0038                  		move.l	$38(a0),d1
0001AAE8 D280                       		add.l	d0,d1
0001AAEA 4841                       		swap	d1
0001AAEC 3141 000C                  		move.w	d1,$C(a0)
0001AAF0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AAF6 6600                       		bne.s	loc_1A524
0001AAF8 4A68 0030                  		tst.w	$30(a0)
0001AAFC 6A00                       		bpl.s	loc_1A524
0001AAFE 70F6                       		moveq	#-$A,d0
0001AB00 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AB06 6F00                       		ble.s	loc_1A514
0001AB08 700E                       		moveq	#$E,d0
0001AB0A                            
0001AB0A                            loc_1A514:
0001AB0A D240                       		add.w	d0,d1
0001AB0C 2268 0034                  		movea.l	$34(a0),a1
0001AB10 3341 000C                  		move.w	d1,$C(a1)
0001AB14 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB1A                            
0001AB1A                            loc_1A524:
0001AB1A 323C 002B                  		move.w	#$2B,d1
0001AB1E 343C 0060                  		move.w	#$60,d2
0001AB22 363C 0061                  		move.w	#$61,d3
0001AB26 3828 0008                  		move.w	8(a0),d4
0001AB2A 4EB9 0000 FF4A             		jsr	SolidObject
0001AB30 7000                       		moveq	#0,d0
0001AB32 3228 003C                  		move.w	$3C(a0),d1
0001AB36 6A00                       		bpl.s	loc_1A550
0001AB38 4441                       		neg.w	d1
0001AB3A 5141                       		subq.w	#8,d1
0001AB3C 6500                       		bcs.s	loc_1A55C
0001AB3E 5200                       		addq.b	#1,d0
0001AB40 E841                       		asr.w	#4,d1
0001AB42 D041                       		add.w	d1,d0
0001AB44 6000                       		bra.s	loc_1A55C
0001AB46                            ; ===========================================================================
0001AB46                            
0001AB46                            loc_1A550:
0001AB46 0441 0027                  		subi.w	#$27,d1
0001AB4A 6500                       		bcs.s	loc_1A55C
0001AB4C 5200                       		addq.b	#1,d0
0001AB4E E841                       		asr.w	#4,d1
0001AB50 D041                       		add.w	d1,d0
0001AB52                            
0001AB52                            loc_1A55C:
0001AB52 1140 001A                  		move.b	d0,$1A(a0)
0001AB56 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB5A 9068 0008                  		sub.w	8(a0),d0
0001AB5E 6B00                       		bmi.s	loc_1A578
0001AB60 0440 0140                  		subi.w	#$140,d0
0001AB64 6B00                       		bmi.s	loc_1A578
0001AB66 4A28 0001                  		tst.b	1(a0)
0001AB6A 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB6E                            
0001AB6E                            loc_1A578:
0001AB6E 4EF9 0000 DB7A             		jmp	DisplaySprite
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            loc_1A57E:				; XREF: Obj84_Index
0001AB74 7000                       		moveq	#0,d0
0001AB76 1028 0028                  		move.b	$28(a0),d0
0001AB7A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB7E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB82 6000 FF5C                  		bra.w	loc_1A4EA
0001AB86                            ; ===========================================================================
0001AB86 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB88 0000                       		dc.w loc_1A598-off_1A590
0001AB8A 0000                       		dc.w loc_1A604-off_1A590
0001AB8C 0000                       		dc.w loc_1A604-off_1A590
0001AB8E                            ; ===========================================================================
0001AB8E                            
0001AB8E                            loc_1A598:				; XREF: off_1A590
0001AB8E 4A28 0029                  		tst.b	$29(a0)
0001AB92 6600                       		bne.s	loc_1A5D4
0001AB94 2268 0034                  		movea.l	$34(a0),a1
0001AB98 4A29 0021                  		tst.b	$21(a1)
0001AB9C 6600                       		bne.s	loc_1A5B4
0001AB9E 6100 D2E0                  		bsr.w	BossDefeated
0001ABA2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ABAA                            
0001ABAA                            loc_1A5B4:
0001ABAA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ABB2 6400                       		bcc.s	locret_1A602
0001ABB4 42A8 003C                  		clr.l	$3C(a0)
0001ABB8 2268 0034                  		movea.l	$34(a0),a1
0001ABBC 5369 0032                  		subq.w	#1,$32(a1)
0001ABC0 4269 0030                  		clr.w	$30(a1)
0001ABC4 5528 0024                  		subq.b	#2,$24(a0)
0001ABC8 4E75                       		rts	
0001ABCA                            ; ===========================================================================
0001ABCA                            
0001ABCA                            loc_1A5D4:
0001ABCA 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABD0 6C00                       		bge.s	loc_1A5E4
0001ABD2 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ABDA                            
0001ABDA                            loc_1A5E4:
0001ABDA 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABE2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABE8 6E00                       		bgt.s	locret_1A602
0001ABEA 4268 003E                  		clr.w	$3E(a0)
0001ABEE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABF4 4228 0029                  		clr.b	$29(a0)
0001ABF8                            
0001ABF8                            locret_1A602:
0001ABF8 4E75                       		rts	
0001ABFA                            ; ===========================================================================
0001ABFA                            
0001ABFA                            loc_1A604:				; XREF: off_1A590
0001ABFA 08E8 0001 0001             		bset	#1,1(a0)
0001AC00 4A28 0029                  		tst.b	$29(a0)
0001AC04 6600                       		bne.s	loc_1A646
0001AC06 2268 0034                  		movea.l	$34(a0),a1
0001AC0A 4A29 0021                  		tst.b	$21(a1)
0001AC0E 6600                       		bne.s	loc_1A626
0001AC10 6100 D26E                  		bsr.w	BossDefeated
0001AC14 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AC1C                            
0001AC1C                            loc_1A626:
0001AC1C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC24 6400                       		bcc.s	locret_1A674
0001AC26 42A8 003C                  		clr.l	$3C(a0)
0001AC2A 2268 0034                  		movea.l	$34(a0),a1
0001AC2E 5369 0032                  		subq.w	#1,$32(a1)
0001AC32 4269 0030                  		clr.w	$30(a1)
0001AC36 5528 0024                  		subq.b	#2,$24(a0)
0001AC3A 4E75                       		rts	
0001AC3C                            ; ===========================================================================
0001AC3C                            
0001AC3C                            loc_1A646:
0001AC3C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC42 6D00                       		blt.s	loc_1A656
0001AC44 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC4C                            
0001AC4C                            loc_1A656:
0001AC4C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC54 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC5A 6D00                       		blt.s	locret_1A674
0001AC5C 4268 003E                  		clr.w	$3E(a0)
0001AC60 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC66 4228 0029                  		clr.b	$29(a0)
0001AC6A                            
0001AC6A                            locret_1A674:
0001AC6A 4E75                       		rts	
0001AC6C                            ; ===========================================================================
0001AC6C                            ; ---------------------------------------------------------------------------
0001AC6C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC6C                            ; ---------------------------------------------------------------------------
0001AC6C                            Map_obj84:
0001AC6C                            	include "_maps\obj84.asm"
0001AC6C                            ; ---------------------------------------------------------------------------
0001AC6C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC6C                            ; ---------------------------------------------------------------------------
0001AC6C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC70 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC74 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC78 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC7C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC80 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC84 06                         byte_1A68E:	dc.b 6
0001AC85 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC8A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC8F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC94 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC99 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC9E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACA3 08                         byte_1A6AD:	dc.b 8
0001ACA4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACA9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACAE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACB3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACB8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACBD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACC2 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACC7 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACCC 0A                         byte_1A6D6:	dc.b $A
0001ACCD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACD2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACD7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACDC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACE1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACE6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACEB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACF0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACF5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACFA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACFF 0C                         byte_1A709:	dc.b $C
0001AD00 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD05 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD0A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD0F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD14 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD19 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD1E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD23 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD28 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD2D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD32 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD37 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD3C 0D                         byte_1A746:	dc.b $D
0001AD3D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD42 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD47 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD4C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD51 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD56 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD5B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD60 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD65 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD6A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD6F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD74 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD79 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD7E 0E                         byte_1A788:	dc.b $E
0001AD7F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD84 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD89 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD8E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD93 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD98 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD9D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADA2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADA7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ADAC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ADB1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ADB6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADBB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADC0 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADC5 02                         byte_1A7CF:	dc.b 2
0001ADC6 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADCB 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADD0                            		even
0001ADD0                            		even
0001ADD0                            
0001ADD0                            ; ===========================================================================
0001ADD0                            ; ---------------------------------------------------------------------------
0001ADD0                            ; Object 86 - energy balls (FZ)
0001ADD0                            ; ---------------------------------------------------------------------------
0001ADD0                            
0001ADD0                            Obj86:					; XREF: Obj_Index
0001ADD0 7000                       		moveq	#0,d0
0001ADD2 1028 0024                  		move.b	$24(a0),d0
0001ADD6 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ADDA 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ADDE                            ; ===========================================================================
0001ADDE 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ADE0 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADE2 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADE4 0000                       		dc.w loc_1A962-Obj86_Index
0001ADE6 0000                       		dc.w loc_1A982-Obj86_Index
0001ADE8                            ; ===========================================================================
0001ADE8                            
0001ADE8                            Obj86_Main:				; XREF: Obj86_Index
0001ADE8 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADEE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADF4 317C 0300 0002             		move.w	#$300,2(a0)
0001ADFA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AE02 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE08 117C 0003 0018             		move.b	#3,$18(a0)
0001AE0E 117C 0008 0017             		move.b	#8,$17(a0)
0001AE14 117C 0008 0016             		move.b	#8,$16(a0)
0001AE1A 117C 0004 0001             		move.b	#4,1(a0)
0001AE20 08E8 0007 0001             		bset	#7,1(a0)
0001AE26 5428 0024                  		addq.b	#2,$24(a0)
0001AE2A                            
0001AE2A                            Obj86_Generator:			; XREF: Obj86_Index
0001AE2A 2268 0034                  		movea.l	$34(a0),a1
0001AE2E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE34 6600                       		bne.s	loc_1A850
0001AE36 10BC 003F                  		move.b	#$3F,(a0)
0001AE3A 117C 0000 0024             		move.b	#0,$24(a0)
0001AE40 4EF9 0000 DB7A             		jmp	DisplaySprite
0001AE46                            ; ===========================================================================
0001AE46                            
0001AE46                            loc_1A850:
0001AE46 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE4C 4A28 0029                  		tst.b	$29(a0)
0001AE50 6700                       		beq.s	loc_1A86C
0001AE52 5428 0024                  		addq.b	#2,$24(a0)
0001AE56 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE5C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE62                            
0001AE62                            loc_1A86C:
0001AE62 323C 0013                  		move.w	#$13,d1
0001AE66 343C 0008                  		move.w	#8,d2
0001AE6A 363C 0011                  		move.w	#$11,d3
0001AE6E 3828 0008                  		move.w	8(a0),d4
0001AE72 4EB9 0000 FF4A             		jsr	SolidObject
0001AE78 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE7C 9068 0008                  		sub.w	8(a0),d0
0001AE80 6B00                       		bmi.s	loc_1A89A
0001AE82 0440 0140                  		subi.w	#$140,d0
0001AE86 6B00                       		bmi.s	loc_1A89A
0001AE88 4A28 0001                  		tst.b	1(a0)
0001AE8C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE90                            
0001AE90                            loc_1A89A:
0001AE90 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE94 4EB9 0000 AC4A             		jsr	AnimateSprite
0001AE9A 4EF9 0000 DB7A             		jmp	DisplaySprite
0001AEA0                            ; ===========================================================================
0001AEA0                            
0001AEA0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AEA0 4A28 0029                  		tst.b	$29(a0)
0001AEA4 6700 0000                  		beq.w	loc_1A954
0001AEA8 4228 0029                  		clr.b	$29(a0)
0001AEAC D068 0030                  		add.w	$30(a0),d0
0001AEB0 0240 001E                  		andi.w	#$1E,d0
0001AEB4 D4C0                       		adda.w	d0,a2
0001AEB6 5868 0030                  		addq.w	#4,$30(a0)
0001AEBA 4268 0032                  		clr.w	$32(a0)
0001AEBE 7403                       		moveq	#3,d2
0001AEC0                            
0001AEC0                            Obj86_Loop:
0001AEC0 4EB9 0000 E016             		jsr	SingleObjLoad2
0001AEC6 6600 0000                  		bne.w	loc_1A954
0001AECA 12BC 0086                  		move.b	#$86,(a1)
0001AECE 3368 0008 0008             		move.w	8(a0),8(a1)
0001AED4 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AEDA 137C 0008 0024             		move.b	#8,$24(a1)
0001AEE0 337C 2300 0002             		move.w	#$2300,2(a1)
0001AEE6 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AEEE 137C 000C 0016             		move.b	#$C,$16(a1)
0001AEF4 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEFA 137C 0000 0020             		move.b	#0,$20(a1)
0001AF00 137C 0003 0018             		move.b	#3,$18(a1)
0001AF06 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AF0C 137C 0004 0001             		move.b	#4,1(a1)
0001AF12 08E9 0007 0001             		bset	#7,1(a1)
0001AF18 2348 0034                  		move.l	a0,$34(a1)
0001AF1C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AF22 3228 0032                  		move.w	$32(a0),d1
0001AF26 C3FC FFB1                  		muls.w	#-$4F,d1
0001AF2A 0641 2578                  		addi.w	#$2578,d1
0001AF2E 0240 001F                  		andi.w	#$1F,d0
0001AF32 0440 0010                  		subi.w	#$10,d0
0001AF36 D041                       		add.w	d1,d0
0001AF38 3340 0030                  		move.w	d0,$30(a1)
0001AF3C 5268 0032                  		addq.w	#1,$32(a0)
0001AF40 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF46 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF4A                            
0001AF4A                            loc_1A954:
0001AF4A 4A68 0032                  		tst.w	$32(a0)
0001AF4E 6600                       		bne.s	loc_1A95E
0001AF50 5428 0024                  		addq.b	#2,$24(a0)
0001AF54                            
0001AF54                            loc_1A95E:
0001AF54 6000 FF0C                  		bra.w	loc_1A86C
0001AF58                            ; ===========================================================================
0001AF58                            
0001AF58                            loc_1A962:				; XREF: Obj86_Index
0001AF58 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF5E 4A68 0038                  		tst.w	$38(a0)
0001AF62 6600                       		bne.s	loc_1A97E
0001AF64 117C 0002 0024             		move.b	#2,$24(a0)
0001AF6A 2268 0034                  		movea.l	$34(a0),a1
0001AF6E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF74                            
0001AF74                            loc_1A97E:
0001AF74 6000 FEEC                  		bra.w	loc_1A86C
0001AF78                            ; ===========================================================================
0001AF78                            
0001AF78                            loc_1A982:				; XREF: Obj86_Index
0001AF78 7000                       		moveq	#0,d0
0001AF7A 1028 0025                  		move.b	$25(a0),d0
0001AF7E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF82 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF86 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF8A 4EB9 0000 AC4A             		jsr	AnimateSprite
0001AF90 4EF9 0000 DB7A             		jmp	DisplaySprite
0001AF96                            ; ===========================================================================
0001AF96 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF98 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF9A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF9C                            ; ===========================================================================
0001AF9C                            
0001AF9C                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF9C 3028 0030                  		move.w	$30(a0),d0
0001AFA0 9068 0008                  		sub.w	8(a0),d0
0001AFA4 E940                       		asl.w	#4,d0
0001AFA6 3140 0010                  		move.w	d0,$10(a0)
0001AFAA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFB0 5428 0025                  		addq.b	#2,$25(a0)
0001AFB4 4E75                       		rts	
0001AFB6                            ; ===========================================================================
0001AFB6                            
0001AFB6                            loc_1A9C0:				; XREF: Obj86_Index2
0001AFB6 4A68 0010                  		tst.w	$10(a0)
0001AFBA 6700                       		beq.s	loc_1A9E6
0001AFBC 4EB9 0000 DB54             		jsr	SpeedToPos
0001AFC2 3028 0008                  		move.w	8(a0),d0
0001AFC6 9068 0030                  		sub.w	$30(a0),d0
0001AFCA 6400                       		bcc.s	loc_1A9E6
0001AFCC 4268 0010                  		clr.w	$10(a0)
0001AFD0 D168 0008                  		add.w	d0,8(a0)
0001AFD4 2268 0034                  		movea.l	$34(a0),a1
0001AFD8 5369 0032                  		subq.w	#1,$32(a1)
0001AFDC                            
0001AFDC                            loc_1A9E6:
0001AFDC 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFE2 5368 0028                  		subq.w	#1,$28(a0)
0001AFE6 6600                       		bne.s	locret_1AA1C
0001AFE8 5428 0025                  		addq.b	#2,$25(a0)
0001AFEC 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFF2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFF8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFFE 7000                       		moveq	#0,d0
0001B000 3038 D008                  		move.w	($FFFFD008).w,d0
0001B004 9068 0008                  		sub.w	8(a0),d0
0001B008 3140 0010                  		move.w	d0,$10(a0)
0001B00C 317C 0140 0012             		move.w	#$140,$12(a0)
0001B012                            
0001B012                            locret_1AA1C:
0001B012 4E75                       		rts	
0001B014                            ; ===========================================================================
0001B014                            
0001B014                            loc_1AA1E:				; XREF: Obj86_Index2
0001B014 4EB9 0000 DB54             		jsr	SpeedToPos
0001B01A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B020 6400                       		bcc.s	loc_1AA34
0001B022 5368 0028                  		subq.w	#1,$28(a0)
0001B026 6700                       		beq.s	loc_1AA34
0001B028 4E75                       		rts	
0001B02A                            ; ===========================================================================
0001B02A                            
0001B02A                            loc_1AA34:
0001B02A 2268 0034                  		movea.l	$34(a0),a1
0001B02E 5369 0038                  		subq.w	#1,$38(a1)
0001B032 6000 FA0A                  		bra.w	Obj84_Delete
0001B036                            ; ===========================================================================
0001B036                            Ani_obj86:
0001B036                            	include "_anim\obj86.asm"
0001B036                            ; ---------------------------------------------------------------------------
0001B036                            ; Animation script - energy ball launcher (FZ)
0001B036                            ; ---------------------------------------------------------------------------
0001B036 0000                       		dc.w byte_1AA46-Ani_obj86
0001B038 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B03A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B03C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B040 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B046 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B04C                            		even
0001B04C                            		even
0001B04C                            
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C                            Map_obj86:
0001B04C                            	include "_maps\obj86.asm"
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B050 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B054 01                         byte_1AA5E:	dc.b 1
0001B055 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B05A 01                         byte_1AA64:	dc.b 1
0001B05B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B060 01                         byte_1AA6A:	dc.b 1
0001B061 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B066 01                         byte_1AA70:	dc.b 1
0001B067 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B06C                            		even
0001B06C                            		even
0001B06C                            
0001B06C                            Ani_obj86a:
0001B06C                            	include "_anim\obj86a.asm"
0001B06C                            ; ---------------------------------------------------------------------------
0001B06C                            ; Animation script - energy balls (FZ)
0001B06C                            ; ---------------------------------------------------------------------------
0001B06C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B06E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B070 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B07F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B08E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B092 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B09C                            		even
0001B09C                            		even
0001B09C                            
0001B09C                            ; ---------------------------------------------------------------------------
0001B09C                            ; Sprite mappings - energy balls (FZ)
0001B09C                            ; ---------------------------------------------------------------------------
0001B09C                            Map_obj86a:
0001B09C                            	include "_maps\obj86a.asm"
0001B09C                            ; ---------------------------------------------------------------------------
0001B09C                            ; Sprite mappings - energy balls (FZ)
0001B09C                            ; ---------------------------------------------------------------------------
0001B09C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B0A0 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B0A4 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B0A8 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B0AC 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B0B0 0000                       		dc.w byte_1AB20-Map_obj86a
0001B0B2 02                         byte_1AABC:	dc.b 2
0001B0B3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B0B8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B0BD 02                         byte_1AAC7:	dc.b 2
0001B0BE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0C3 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0C8 02                         byte_1AAD2:	dc.b 2
0001B0C9 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0CE 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B0D3 02                         byte_1AADD:	dc.b 2
0001B0D4 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B0D9 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B0DE 02                         byte_1AAE8:	dc.b 2
0001B0DF F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0E4 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0E9 02                         byte_1AAF3:	dc.b 2
0001B0EA F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0EF F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0F4 01                         byte_1AAFE:	dc.b 1
0001B0F5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0FA 01                         byte_1AB04:	dc.b 1
0001B0FB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B100 02                         byte_1AB0A:	dc.b 2
0001B101 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B106 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B10B 02                         byte_1AB15:	dc.b 2
0001B10C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B111 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B116 00                         byte_1AB20:	dc.b 0
0001B118 00                         		even
0001B118 00                         		even
0001B118                            
0001B118                            ; ===========================================================================
0001B118                            ; ---------------------------------------------------------------------------
0001B118                            ; Object 3E - prison capsule
0001B118                            ; ---------------------------------------------------------------------------
0001B118                            
0001B118                            Obj3E:					; XREF: Obj_Index
0001B118 7000                       		moveq	#0,d0
0001B11A 1028 0024                  		move.b	$24(a0),d0
0001B11E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B122 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B126 3028 0008                  		move.w	8(a0),d0
0001B12A 0240 FF80                  		andi.w	#$FF80,d0
0001B12E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B132 0441 0080                  		subi.w	#$80,d1
0001B136 0241 FF80                  		andi.w	#$FF80,d1
0001B13A 9041                       		sub.w	d1,d0
0001B13C 0C40 0280                  		cmpi.w	#$280,d0
0001B140 6200                       		bhi.s	Obj3E_Delete
0001B142 4EF9 0000 DB7A             		jmp	DisplaySprite
0001B148                            ; ===========================================================================
0001B148                            
0001B148                            Obj3E_Delete:
0001B148 4EF9 0000 DBB6             		jmp	DeleteObject
0001B14E                            ; ===========================================================================
0001B14E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B150 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B152 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B154 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B156 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B158 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B15A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B15C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B15E                            
0001B15E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B162 040C 0501                  		dc.b 4,	$C, 5, 1
0001B166 0610 0403                  		dc.b 6,	$10, 4,	3
0001B16A 0810 0305                  		dc.b 8,	$10, 3,	5
0001B16E                            ; ===========================================================================
0001B16E                            
0001B16E                            Obj3E_Main:				; XREF: Obj3E_Index
0001B16E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B176 317C 049D 0002             		move.w	#$49D,2(a0)
0001B17C 117C 0004 0001             		move.b	#4,1(a0)
0001B182 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B188 7000                       		moveq	#0,d0
0001B18A 1028 0028                  		move.b	$28(a0),d0
0001B18E E548                       		lsl.w	#2,d0
0001B190 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B194 1159 0024                  		move.b	(a1)+,$24(a0)
0001B198 1159 0019                  		move.b	(a1)+,$19(a0)
0001B19C 1159 0018                  		move.b	(a1)+,$18(a0)
0001B1A0 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B1A4 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B1A8 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B1AA 117C 0006 0020             		move.b	#6,$20(a0)
0001B1B0 117C 0008 0021             		move.b	#8,$21(a0)
0001B1B6                            
0001B1B6                            Obj3E_Not02:
0001B1B6 4E75                       		rts	
0001B1B8                            ; ===========================================================================
0001B1B8                            
0001B1B8                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B1B8 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B1BE 6700                       		beq.s	Obj3E_ChkOpened
0001B1C0 323C 002B                  		move.w	#$2B,d1
0001B1C4 343C 0018                  		move.w	#$18,d2
0001B1C8 363C 0018                  		move.w	#$18,d3
0001B1CC 3828 0008                  		move.w	8(a0),d4
0001B1D0 4EF9 0000 FF4A             		jmp	SolidObject
0001B1D6                            ; ===========================================================================
0001B1D6                            
0001B1D6                            Obj3E_ChkOpened:
0001B1D6 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B1DA 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B1DC 4228 0025                  		clr.b	$25(a0)
0001B1E0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1E6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1EC                            
0001B1EC                            Obj3E_DoOpen:
0001B1EC 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1F2 4E75                       		rts	
0001B1F4                            ; ===========================================================================
0001B1F4                            
0001B1F4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1F4 323C 0017                  		move.w	#$17,d1
0001B1F8 343C 0008                  		move.w	#8,d2
0001B1FC 363C 0008                  		move.w	#8,d3
0001B200 3828 0008                  		move.w	8(a0),d4
0001B204 4EB9 0000 FF4A             		jsr	SolidObject
0001B20A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B210 4EB9 0000 AC4A             		jsr	AnimateSprite
0001B216 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B21C 4A28 0025                  		tst.b	$25(a0)
0001B220 6700                       		beq.s	locret_1AC60
0001B222 5068 000C                  		addq.w	#8,$C(a0)
0001B226 117C 000A 0024             		move.b	#$A,$24(a0)
0001B22C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B232 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B236 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B23A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B240 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B246 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B248 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B24E 6000                       		bra.s	Obj3E_ContinueCode
0001B250                            
0001B250                            Obj3E_MoveLeft:
0001B250 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B256                            
0001B256                            Obj3E_ContinueCode:
0001B256 4228 0025                  		clr.b	$25(a0)
0001B25A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B260 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B266                            
0001B266                            locret_1AC60:
0001B266 4E75                       		rts	
0001B268                            ; ===========================================================================
0001B268                            
0001B268                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B268 7007                       		moveq	#7,d0
0001B26A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B26E 6600                       		bne.s	loc_1ACA0
0001B270 4EB9 0000 E000             		jsr	SingleObjLoad
0001B276 6600                       		bne.s	loc_1ACA0
0001B278 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B27C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B282 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B288 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B28E 7200                       		moveq	#0,d1
0001B290 1200                       		move.b	d0,d1
0001B292 E409                       		lsr.b	#2,d1
0001B294 0441 0020                  		subi.w	#$20,d1
0001B298 D369 0008                  		add.w	d1,8(a1)
0001B29C E048                       		lsr.w	#8,d0
0001B29E E608                       		lsr.b	#3,d0
0001B2A0 D169 000C                  		add.w	d0,$C(a1)
0001B2A4                            
0001B2A4                            loc_1ACA0:
0001B2A4 5368 001E                  		subq.w	#1,$1E(a0)
0001B2A8 6700                       		beq.s	Obj3E_MakeAnimal
0001B2AA 4E75                       		rts	
0001B2AC                            ; ===========================================================================
0001B2AC                            
0001B2AC                            Obj3E_MakeAnimal:
0001B2AC 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B2B2 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B2B8 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2BE 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2C4 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2CA 7C07                       		moveq	#7,d6
0001B2CC 3A3C 009A                  		move.w	#$9A,d5
0001B2D0 78E4                       		moveq	#-$1C,d4
0001B2D2                            
0001B2D2                            Obj3E_Loop:
0001B2D2 4EB9 0000 E000             		jsr	SingleObjLoad
0001B2D8 6600                       		bne.s	locret_1ACF8
0001B2DA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2EA D969 0008                  		add.w	d4,8(a1)
0001B2EE 5E44                       		addq.w	#7,d4
0001B2F0 3345 0036                  		move.w	d5,$36(a1)
0001B2F4 5145                       		subq.w	#8,d5
0001B2F6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2FA                            
0001B2FA                            locret_1ACF8:
0001B2FA 4E75                       		rts	
0001B2FC                            ; ===========================================================================
0001B2FC                            
0001B2FC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2FC 7007                       		moveq	#7,d0
0001B2FE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B302 6600                       		bne.s	loc_1AD38
0001B304 4EB9 0000 E000             		jsr	SingleObjLoad
0001B30A 6600                       		bne.s	loc_1AD38
0001B30C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B310 3368 0008 0008             		move.w	8(a0),8(a1)
0001B316 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B31C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B322 0240 001F                  		andi.w	#$1F,d0
0001B326 5D40                       		subq.w	#6,d0
0001B328 4A41                       		tst.w	d1
0001B32A 6A00                       		bpl.s	loc_1AD2E
0001B32C 4440                       		neg.w	d0
0001B32E                            
0001B32E                            loc_1AD2E:
0001B32E D169 0008                  		add.w	d0,8(a1)
0001B332 337C 000C 0036             		move.w	#$C,$36(a1)
0001B338                            
0001B338                            loc_1AD38:
0001B338 5368 001E                  		subq.w	#1,$1E(a0)
0001B33C 6600                       		bne.s	locret_1AD48
0001B33E 5428 0024                  		addq.b	#2,$24(a0)
0001B342 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B348                            
0001B348                            locret_1AD48:
0001B348 4E75                       		rts	
0001B34A                            ; ===========================================================================
0001B34A                            
0001B34A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B34A 703E                       		moveq	#$3E,d0
0001B34C 7228                       		moveq	#$28,d1
0001B34E 7440                       		moveq	#$40,d2
0001B350 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B354                            
0001B354                            Obj3E_FindObj28:
0001B354 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B356 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B358 D2C2                       		adda.w	d2,a1		; next object RAM
0001B35A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B35E                            
0001B35E 4EB9 0000 F206             		jsr	GotThroughAct
0001B364 4EF9 0000 DBB6             		jmp	DeleteObject
0001B36A                            ; ===========================================================================
0001B36A                            
0001B36A                            Obj3E_Obj28Found:
0001B36A 4E75                       		rts	
0001B36C                            ; ===========================================================================
0001B36C                            Ani_obj3E:
0001B36C                            	include "_anim\obj3E.asm"
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            ; Animation script - prison capsule
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B36E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B370 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B374                            		even
0001B374                            		even
0001B374                            
0001B374                            ; ---------------------------------------------------------------------------
0001B374                            ; Sprite mappings - prison capsule
0001B374                            ; ---------------------------------------------------------------------------
0001B374                            Map_obj3E:
0001B374                            	include "_maps\obj3E.asm"
0001B374                            ; ---------------------------------------------------------------------------
0001B374                            ; Sprite mappings - prison capsule
0001B374                            ; ---------------------------------------------------------------------------
0001B374 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B378 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B37C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B380 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B382 07                         byte_1AD82:	dc.b 7
0001B383 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B388 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B38D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B392 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B397 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B39C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3A1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3A6 01                         byte_1ADA6:	dc.b 1
0001B3A7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B3AC 06                         byte_1ADAC:	dc.b 6
0001B3AD 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B3B2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B3B7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B3BC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3C1 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3C6 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3CB 01                         byte_1ADCB:	dc.b 1
0001B3CC F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3D1 02                         byte_1ADD1:	dc.b 2
0001B3D2 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B3D7 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B3DC 01                         byte_1ADDC:	dc.b 1
0001B3DD F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3E2 00                         byte_1ADE2:	dc.b 0
0001B3E4 00                         		even
0001B3E4 00                         		even
0001B3E4                            
0001B3E4                            ; ---------------------------------------------------------------------------
0001B3E4                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3E4                            ; ---------------------------------------------------------------------------
0001B3E4                            
0001B3E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3E4                            
0001B3E4                            
0001B3E4                            TouchResponse:				; XREF: Obj01
0001B3E4 4E71                       		nop	
0001B3E6 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3EA 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3EE 5142                       		subq.w	#8,d2
0001B3F0 7A00                       		moveq	#0,d5
0001B3F2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3F6 5705                       		subq.b	#3,d5
0001B3F8 9645                       		sub.w	d5,d3
0001B3FA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B400 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B402 0643 000C                  		addi.w	#$C,d3
0001B406 7A0A                       		moveq	#$A,d5
0001B408                            
0001B408                            Touch_NoDuck:
0001B408 383C 0010                  		move.w	#$10,d4
0001B40C DA45                       		add.w	d5,d5
0001B40E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B412 3C3C 005F                  		move.w	#$5F,d6
0001B416                            
0001B416                            Touch_Loop:
0001B416 4A29 0001                  		tst.b	1(a1)
0001B41A 6A00                       		bpl.s	Touch_NextObj
0001B41C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B420 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B422                            
0001B422                            Touch_NextObj:
0001B422 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B426 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B42A                            
0001B42A 7000                       		moveq	#0,d0
0001B42C 4E75                       		rts	
0001B42E                            ; ===========================================================================
0001B42E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B430 0C14                       		dc.b   $C, $14
0001B432 140C                       		dc.b  $14,  $C
0001B434 0410                       		dc.b	4, $10
0001B436 0C12                       		dc.b   $C, $12
0001B438 1010                       		dc.b  $10, $10
0001B43A 0606                       		dc.b	6,   6
0001B43C 180C                       		dc.b  $18,  $C
0001B43E 0C10                       		dc.b   $C, $10
0001B440 100C                       		dc.b  $10,  $C
0001B442 0808                       		dc.b	8,   8
0001B444 1410                       		dc.b  $14, $10
0001B446 1408                       		dc.b  $14,   8
0001B448 0E0E                       		dc.b   $E,  $E
0001B44A 1818                       		dc.b  $18, $18
0001B44C 2810                       		dc.b  $28, $10
0001B44E 1018                       		dc.b  $10, $18
0001B450 0810                       		dc.b	8, $10
0001B452 2070                       		dc.b  $20, $70
0001B454 4020                       		dc.b  $40, $20
0001B456 8020                       		dc.b  $80, $20
0001B458 2020                       		dc.b  $20, $20
0001B45A 0808                       		dc.b	8,   8
0001B45C 0404                       		dc.b	4,   4
0001B45E 2008                       		dc.b  $20,   8
0001B460 0C0C                       		dc.b   $C,  $C
0001B462 0804                       		dc.b	8,   4
0001B464 1804                       		dc.b  $18,   4
0001B466 2804                       		dc.b  $28,   4
0001B468 0408                       		dc.b	4,   8
0001B46A 0418                       		dc.b	4, $18
0001B46C 0428                       		dc.b	4, $28
0001B46E 0420                       		dc.b	4, $20
0001B470 1818                       		dc.b  $18, $18
0001B472 0C18                       		dc.b   $C, $18
0001B474 4808                       		dc.b  $48,   8
0001B476                            ; ===========================================================================
0001B476                            
0001B476                            Touch_Height:				; XREF: TouchResponse
0001B476 0240 003F                  		andi.w	#$3F,d0
0001B47A D040                       		add.w	d0,d0
0001B47C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B480 7200                       		moveq	#0,d1
0001B482 121A                       		move.b	(a2)+,d1
0001B484 3029 0008                  		move.w	8(a1),d0
0001B488 9041                       		sub.w	d1,d0
0001B48A 9042                       		sub.w	d2,d0
0001B48C 6400                       		bcc.s	loc_1AE98
0001B48E D241                       		add.w	d1,d1
0001B490 D041                       		add.w	d1,d0
0001B492 6500                       		bcs.s	Touch_Width
0001B494 6000 FF8C                  		bra.w	Touch_NextObj
0001B498                            ; ===========================================================================
0001B498                            
0001B498                            loc_1AE98:
0001B498 B044                       		cmp.w	d4,d0
0001B49A 6200 FF86                  		bhi.w	Touch_NextObj
0001B49E                            
0001B49E                            Touch_Width:
0001B49E 7200                       		moveq	#0,d1
0001B4A0 121A                       		move.b	(a2)+,d1
0001B4A2 3029 000C                  		move.w	$C(a1),d0
0001B4A6 9041                       		sub.w	d1,d0
0001B4A8 9043                       		sub.w	d3,d0
0001B4AA 6400                       		bcc.s	loc_1AEB6
0001B4AC D241                       		add.w	d1,d1
0001B4AE D240                       		add.w	d0,d1
0001B4B0 6500                       		bcs.s	Touch_ChkValue
0001B4B2 6000 FF6E                  		bra.w	Touch_NextObj
0001B4B6                            ; ===========================================================================
0001B4B6                            
0001B4B6                            loc_1AEB6:
0001B4B6 B045                       		cmp.w	d5,d0
0001B4B8 6200 FF68                  		bhi.w	Touch_NextObj
0001B4BC                            
0001B4BC                            Touch_ChkValue:
0001B4BC 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4C0 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4C4 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4C8 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4CC 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4D0 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B4D2 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B4D6                            
0001B4D6                            ; touch	response is $40-$7F
0001B4D6                            
0001B4D6 1029 0020                  		move.b	$20(a1),d0
0001B4DA 0200 003F                  		andi.b	#$3F,d0
0001B4DE 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4E2 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4E4 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4EA 6400 0000                  		bcc.w	locret_1AEF2
0001B4EE 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4F2                            
0001B4F2                            locret_1AEF2:
0001B4F2 4E75                       		rts	
0001B4F4                            ; ===========================================================================
0001B4F4                            
0001B4F4                            Touch_Monitor:
0001B4F4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4F8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4FA 3028 000C                  		move.w	$C(a0),d0
0001B4FE 0440 0010                  		subi.w	#$10,d0
0001B502 B069 000C                  		cmp.w	$C(a1),d0
0001B506 6500                       		bcs.s	locret_1AF2E
0001B508 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B50C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B512 4A29 0025                  		tst.b	$25(a1)
0001B516 6600                       		bne.s	locret_1AF2E
0001B518 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B51C 4E75                       		rts	
0001B51E                            ; ===========================================================================
0001B51E                            
0001B51E                            loc_1AF1E:
0001B51E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B524 6600                       		bne.s	locret_1AF2E
0001B526 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B52A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B52E                            
0001B52E                            locret_1AF2E:
0001B52E 4E75                       		rts	
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B530 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B534 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B536 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B53C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B540                            
0001B540                            loc_1AF40:
0001B540 4A29 0021                  		tst.b	$21(a1)
0001B544 6700                       		beq.s	Touch_KillEnemy
0001B546 4468 0010                  		neg.w	$10(a0)
0001B54A 4468 0012                  		neg.w	$12(a0)
0001B54E E0E8 0010                  		asr	$10(a0)
0001B552 E0E8 0012                  		asr	$12(a0)
0001B556 137C 0000 0020             		move.b	#0,$20(a1)
0001B55C 5329 0021                  		subq.b	#1,$21(a1)
0001B560 6600                       		bne.s	locret_1AF68
0001B562 08E9 0007 0022             		bset	#7,$22(a1)
0001B568                            
0001B568                            locret_1AF68:
0001B568 4E75                       		rts	
0001B56A                            ; ===========================================================================
0001B56A                            
0001B56A                            Touch_KillEnemy:
0001B56A 08E9 0007 0022             		bset	#7,$22(a1)
0001B570 7000                       		moveq	#0,d0
0001B572 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B576 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B57A 0C40 0006                  		cmpi.w	#6,d0
0001B57E 6500                       		bcs.s	loc_1AF82
0001B580 7006                       		moveq	#6,d0
0001B582                            
0001B582                            loc_1AF82:
0001B582 3340 003E                  		move.w	d0,$3E(a1)
0001B586 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B58A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B590 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B592 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B596 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B59C                            
0001B59C                            loc_1AF9C:
0001B59C 6100 0000                  		bsr.w	AddPoints
0001B5A0 7400                       		moveq	#0,d2	; GMZ
0001B5A2 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B5A4 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B5A6                            
0001B5A6                            TouchKE_Explode:
0001B5A6 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B5AA 137C 0000 0024             		move.b	#0,$24(a1)
0001B5B0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B5B4                            
0001B5B4                            TouchKE_NextExplosion:
0001B5B4 5802                       		addq.b	#4,d2
0001B5B6 4EB9 0000 E000             		jsr	SingleObjLoad
0001B5BC 6600                       		bne.s	TouchKE_NoExplosion
0001B5BE 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5C4 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5CA 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5CE                            
0001B5CE                            TouchKE_NoExplosion:
0001B5CE 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5D0 4A68 0012                  		tst.w	$12(a0)
0001B5D4 6B00                       		bmi.s	loc_1AFC2
0001B5D6 3028 000C                  		move.w	$C(a0),d0
0001B5DA B069 000C                  		cmp.w	$C(a1),d0
0001B5DE 6400                       		bcc.s	loc_1AFCA
0001B5E0 4468 0012                  		neg.w	$12(a0)
0001B5E4 4E75                       		rts	
0001B5E6                            ; ===========================================================================
0001B5E6                            
0001B5E6                            loc_1AFC2:
0001B5E6 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5EC 4E75                       		rts	
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_1AFCA:
0001B5EE 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5F4 4E75                       		rts	
0001B5F6                            ; ===========================================================================
0001B5F6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5FE                            ; ===========================================================================
0001B5FE                            
0001B5FE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5FE 08E9 0007 0022             		bset	#7,$22(a1)
0001B604                            
0001B604                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B604 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B608 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B60A                            
0001B60A                            loc_1AFE6:				; XREF: Touch_Hurt
0001B60A 70FF                       		moveq	#-1,d0
0001B60C 4E75                       		rts	
0001B60E                            ; ===========================================================================
0001B60E                            
0001B60E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B60E 4E71                       		nop	
0001B610 4A68 0030                  		tst.w	$30(a0)
0001B614 66F4                       		bne.s	loc_1AFE6
0001B616 2449                       		movea.l	a1,a2
0001B618                            
0001B618                            ; End of function TouchResponse
0001B618                            ; continue straight to HurtSonic
0001B618                            
0001B618                            ; ---------------------------------------------------------------------------
0001B618                            ; Hurting Sonic	subroutine
0001B618                            ; ---------------------------------------------------------------------------
0001B618                            
0001B618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B618                            
0001B618                            
0001B618                            HurtSonic:
0001B618 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B61C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B61E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B622 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B626 4EB9 0000 E000             		jsr	SingleObjLoad
0001B62C 6600                       		bne.s	Hurt_Shield
0001B62E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B632 3368 0008 0008             		move.w	8(a0),8(a1)
0001B638 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B63E                            
0001B63E                            Hurt_Shield:
0001B63E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B644 117C 0004 0024             		move.b	#4,$24(a0)
0001B64A 6100 8750                  		bsr.w	Sonic_ResetOnFloor
0001B64E 08E8 0001 0022             		bset	#1,$22(a0)
0001B654 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B65A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B660 0828 0006 0022             		btst	#6,$22(a0)
0001B666 6700                       		beq.s	Hurt_Reverse
0001B668 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B66E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B674                            
0001B674                            Hurt_Reverse:
0001B674 3028 0008                  		move.w	8(a0),d0
0001B678 B06A 0008                  		cmp.w	8(a2),d0
0001B67C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B67E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B682                            
0001B682                            Hurt_ChkSpikes:
0001B682 317C 0000 0014             		move.w	#0,$14(a0)
0001B688 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B68E 317C 0078 0030             		move.w	#$78,$30(a0)
0001B694 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B698 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B69C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B69E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B6A2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B6A4 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B6A8                            
0001B6A8                            Hurt_Sound:
0001B6A8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6AE 70FF                       		moveq	#-1,d0
0001B6B0 4E75                       		rts	
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            Hurt_NoRings:
0001B6B2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B6B6 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B6BA                            ; End of function HurtSonic
0001B6BA                            
0001B6BA                            ; ---------------------------------------------------------------------------
0001B6BA                            ; Subroutine to	kill Sonic
0001B6BA                            ; ---------------------------------------------------------------------------
0001B6BA                            
0001B6BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6BA                            
0001B6BA                            
0001B6BA                            KillSonic:
0001B6BA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B6BE 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6C0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6C6 117C 0006 0024             		move.b	#6,$24(a0)
0001B6CC 6100 86CE                  		bsr.w	Sonic_ResetOnFloor
0001B6D0 08E8 0001 0022             		bset	#1,$22(a0)
0001B6D6 317C F900 0012             		move.w	#-$700,$12(a0)
0001B6DC 317C 0000 0010             		move.w	#0,$10(a0)
0001B6E2 317C 0000 0014             		move.w	#0,$14(a0)
0001B6E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6EE 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6F4 08E8 0007 0002             		bset	#7,2(a0)
0001B6FA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6FE 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B702 6600                       		bne.s	Kill_Sound
0001B704 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B708                            
0001B708                            Kill_Sound:
0001B708 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B70E                            
0001B70E                            Kill_NoDeath:
0001B70E 70FF                       		moveq	#-1,d0
0001B710 4E75                       		rts	
0001B712                            ; End of function KillSonic
0001B712                            
0001B712                            
0001B712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B712                            
0001B712                            
0001B712                            Touch_Special:				; XREF: Touch_ChkValue
0001B712 1229 0020                  		move.b	$20(a1),d1
0001B716 0201 003F                  		andi.b	#$3F,d1
0001B71A 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B71E 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B720 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B724 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B726 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B72A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B72C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B730 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B732 4E75                       		rts	
0001B734                            ; ===========================================================================
0001B734                            
0001B734                            Touch_CatKiller:			; XREF: Touch_Special
0001B734 6000 FEC8                  		bra.w	loc_1AFDA
0001B738                            ; ===========================================================================
0001B738                            
0001B738                            Touch_Yadrin:				; XREF: Touch_Special
0001B738 9A40                       		sub.w	d0,d5
0001B73A 0C45 0008                  		cmpi.w	#8,d5
0001B73E 6400                       		bcc.s	loc_1B144
0001B740 3029 0008                  		move.w	8(a1),d0
0001B744 5940                       		subq.w	#4,d0
0001B746 0829 0000 0022             		btst	#0,$22(a1)
0001B74C 6700                       		beq.s	loc_1B130
0001B74E 0440 0010                  		subi.w	#$10,d0
0001B752                            
0001B752                            loc_1B130:
0001B752 9042                       		sub.w	d2,d0
0001B754 6400                       		bcc.s	loc_1B13C
0001B756 0640 0018                  		addi.w	#$18,d0
0001B75A 6500                       		bcs.s	loc_1B140
0001B75C 6000                       		bra.s	loc_1B144
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_1B13C:
0001B75E B044                       		cmp.w	d4,d0
0001B760 6200                       		bhi.s	loc_1B144
0001B762                            
0001B762                            loc_1B140:
0001B762 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            loc_1B144:
0001B766 6000 FDC8                  		bra.w	Touch_Enemy
0001B76A                            ; ===========================================================================
0001B76A                            
0001B76A                            Touch_D7orE1:				; XREF: Touch_Special
0001B76A 5229 0021                  		addq.b	#1,$21(a1)
0001B76E 4E75                       		rts	
0001B770                            ; End of function Touch_Special
0001B770                            
0001B770                            ; ---------------------------------------------------------------------------
0001B770                            ; Subroutine to	show the special stage layout
0001B770                            ; ---------------------------------------------------------------------------
0001B770                            
0001B770                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B770                            
0001B770                            
0001B770                            SS_ShowLayout:				; XREF: SpecialStage
0001B770 6100 0000                  		bsr.w	SS_AniWallsRings
0001B774 6100 0000                  		bsr.w	SS_AniItems
0001B778 3F05                       		move.w	d5,-(sp)
0001B77A 43F8 8000                  		lea	($FFFF8000).w,a1
0001B77E 1038 F780                  		move.b	($FFFFF780).w,d0
0001B782 0200 00FC                  		andi.b	#$FC,d0
0001B786 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B78C 3800                       		move.w	d0,d4
0001B78E 3A01                       		move.w	d1,d5
0001B790 C9FC 0018                  		muls.w	#$18,d4
0001B794 CBFC 0018                  		muls.w	#$18,d5
0001B798 7400                       		moveq	#0,d2
0001B79A 3438 F700                  		move.w	($FFFFF700).w,d2
0001B79E 84FC 0018                  		divu.w	#$18,d2
0001B7A2 4842                       		swap	d2
0001B7A4 4442                       		neg.w	d2
0001B7A6 0642 FF4C                  		addi.w	#-$B4,d2
0001B7AA 7600                       		moveq	#0,d3
0001B7AC 3638 F704                  		move.w	($FFFFF704).w,d3
0001B7B0 86FC 0018                  		divu.w	#$18,d3
0001B7B4 4843                       		swap	d3
0001B7B6 4443                       		neg.w	d3
0001B7B8 0643 FF4C                  		addi.w	#-$B4,d3
0001B7BC 3E3C 000F                  		move.w	#$F,d7
0001B7C0                            
0001B7C0                            loc_1B19E:
0001B7C0 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7C4 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7C8 4440                       		neg.w	d0
0001B7CA C3C2                       		muls.w	d2,d1
0001B7CC C1C3                       		muls.w	d3,d0
0001B7CE 2C00                       		move.l	d0,d6
0001B7D0 DC81                       		add.l	d1,d6
0001B7D2 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B7D6 C1C2                       		muls.w	d2,d0
0001B7D8 C3C3                       		muls.w	d3,d1
0001B7DA D280                       		add.l	d0,d1
0001B7DC 2406                       		move.l	d6,d2
0001B7DE 3C3C 000F                  		move.w	#$F,d6
0001B7E2                            
0001B7E2                            loc_1B1C0:
0001B7E2 2002                       		move.l	d2,d0
0001B7E4 E080                       		asr.l	#8,d0
0001B7E6 32C0                       		move.w	d0,(a1)+
0001B7E8 2001                       		move.l	d1,d0
0001B7EA E080                       		asr.l	#8,d0
0001B7EC 32C0                       		move.w	d0,(a1)+
0001B7EE D485                       		add.l	d5,d2
0001B7F0 D284                       		add.l	d4,d1
0001B7F2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7F6                            
0001B7F6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7FA 0643 0018                  		addi.w	#$18,d3
0001B7FE 51CF FFC0                  		dbf	d7,loc_1B19E
0001B802                            
0001B802 3A1F                       		move.w	(sp)+,d5
0001B804 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B80A 7000                       		moveq	#0,d0
0001B80C 3038 F704                  		move.w	($FFFFF704).w,d0
0001B810 80FC 0018                  		divu.w	#$18,d0
0001B814 C0FC 0080                  		mulu.w	#$80,d0
0001B818 D1C0                       		adda.l	d0,a0
0001B81A 7000                       		moveq	#0,d0
0001B81C 3038 F700                  		move.w	($FFFFF700).w,d0
0001B820 80FC 0018                  		divu.w	#$18,d0
0001B824 D0C0                       		adda.w	d0,a0
0001B826 49F8 8000                  		lea	($FFFF8000).w,a4
0001B82A 3E3C 000F                  		move.w	#$F,d7
0001B82E                            
0001B82E                            loc_1B20C:
0001B82E 3C3C 000F                  		move.w	#$F,d6
0001B832                            
0001B832                            loc_1B210:
0001B832 7000                       		moveq	#0,d0
0001B834 1018                       		move.b	(a0)+,d0
0001B836 6700                       		beq.s	loc_1B268
0001B838 0C00 004E                  		cmpi.b	#$4E,d0
0001B83C 6200                       		bhi.s	loc_1B268
0001B83E 3614                       		move.w	(a4),d3
0001B840 0643 0120                  		addi.w	#$120,d3
0001B844 0C43 0070                  		cmpi.w	#$70,d3
0001B848 6500                       		bcs.s	loc_1B268
0001B84A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B84E 6400                       		bcc.s	loc_1B268
0001B850 342C 0002                  		move.w	2(a4),d2
0001B854 0642 00F0                  		addi.w	#$F0,d2
0001B858 0C42 0070                  		cmpi.w	#$70,d2
0001B85C 6500                       		bcs.s	loc_1B268
0001B85E 0C42 0170                  		cmpi.w	#$170,d2
0001B862 6400                       		bcc.s	loc_1B268
0001B864 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B86A E748                       		lsl.w	#3,d0
0001B86C 4BF5 0000                  		lea	(a5,d0.w),a5
0001B870 225D                       		movea.l	(a5)+,a1
0001B872 321D                       		move.w	(a5)+,d1
0001B874 D241                       		add.w	d1,d1
0001B876 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B87A 365D                       		movea.w	(a5)+,a3
0001B87C 7200                       		moveq	#0,d1
0001B87E 1219                       		move.b	(a1)+,d1
0001B880 5301                       		subq.b	#1,d1
0001B882 6B00                       		bmi.s	loc_1B268
0001B884 4EB9 0000 DCD8             		jsr	sub_D762
0001B88A                            
0001B88A                            loc_1B268:
0001B88A 584C                       		addq.w	#4,a4
0001B88C 51CE FFA4                  		dbf	d6,loc_1B210
0001B890                            
0001B890 41E8 0070                  		lea	$70(a0),a0
0001B894 51CF FF98                  		dbf	d7,loc_1B20C
0001B898                            
0001B898 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B89C 0C05 0050                  		cmpi.b	#$50,d5
0001B8A0 6700                       		beq.s	loc_1B288
0001B8A2 24BC 0000 0000             		move.l	#0,(a2)
0001B8A8 4E75                       		rts	
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            loc_1B288:
0001B8AA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B8B0 4E75                       		rts	
0001B8B2                            ; End of function SS_ShowLayout
0001B8B2                            
0001B8B2                            ; ---------------------------------------------------------------------------
0001B8B2                            ; Subroutine to	animate	walls and rings	in the special stage
0001B8B2                            ; ---------------------------------------------------------------------------
0001B8B2                            
0001B8B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8B2                            
0001B8B2                            
0001B8B2                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B8B2 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B8B8 7000                       		moveq	#0,d0
0001B8BA 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8BE E408                       		lsr.b	#2,d0
0001B8C0 0240 000F                  		andi.w	#$F,d0
0001B8C4 7223                       		moveq	#$23,d1
0001B8C6                            
0001B8C6                            loc_1B2A4:
0001B8C6 3280                       		move.w	d0,(a1)
0001B8C8 5049                       		addq.w	#8,a1
0001B8CA 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8CE                            
0001B8CE 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B8D4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B8D8 6A00                       		bpl.s	loc_1B2C8
0001B8DA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B8E0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8E4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8EA                            
0001B8EA                            loc_1B2C8:
0001B8EA 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8F0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8F4 6A00                       		bpl.s	loc_1B2E4
0001B8F6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8FC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B900 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B906                            
0001B906                            loc_1B2E4:
0001B906 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B90A 1340 0138                  		move.b	d0,$138(a1)
0001B90E 1340 0160                  		move.b	d0,$160(a1)
0001B912 1340 0148                  		move.b	d0,$148(a1)
0001B916 1340 0150                  		move.b	d0,$150(a1)
0001B91A 1340 01D8                  		move.b	d0,$1D8(a1)
0001B91E 1340 01E0                  		move.b	d0,$1E0(a1)
0001B922 1340 01E8                  		move.b	d0,$1E8(a1)
0001B926 1340 01F0                  		move.b	d0,$1F0(a1)
0001B92A 1340 01F8                  		move.b	d0,$1F8(a1)
0001B92E 1340 0200                  		move.b	d0,$200(a1)
0001B932 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B936 6A00                       		bpl.s	loc_1B326
0001B938 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B93E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B942 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B948                            
0001B948                            loc_1B326:
0001B948 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B94C 1340 0168                  		move.b	d0,$168(a1)
0001B950 1340 0170                  		move.b	d0,$170(a1)
0001B954 1340 0178                  		move.b	d0,$178(a1)
0001B958 1340 0180                  		move.b	d0,$180(a1)
0001B95C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B960 6A00                       		bpl.s	loc_1B350
0001B962 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B968 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B96C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B972                            
0001B972                            loc_1B350:
0001B972 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B978 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B97E 7000                       		moveq	#0,d0
0001B980 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B984 D040                       		add.w	d0,d0
0001B986 41F0 0000                  		lea	(a0,d0.w),a0
0001B98A 3290                       		move.w	(a0),(a1)
0001B98C 3368 0002 0008             		move.w	2(a0),8(a1)
0001B992 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B998 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B99E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9A4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9AA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9B0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9B6 D0FC 0020                  		adda.w	#$20,a0
0001B9BA D2FC 0048                  		adda.w	#$48,a1
0001B9BE 3290                       		move.w	(a0),(a1)
0001B9C0 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9C6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9CC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9D2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9D8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9DE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9E4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9EA D0FC 0020                  		adda.w	#$20,a0
0001B9EE D2FC 0048                  		adda.w	#$48,a1
0001B9F2 3290                       		move.w	(a0),(a1)
0001B9F4 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9FA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA00 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA06 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA0C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA12 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA18 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA1E D0FC 0020                  		adda.w	#$20,a0
0001BA22 D2FC 0048                  		adda.w	#$48,a1
0001BA26 3290                       		move.w	(a0),(a1)
0001BA28 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA2E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA34 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA3A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA40 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA46 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA4C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA52 D0FC 0020                  		adda.w	#$20,a0
0001BA56 D2FC 0048                  		adda.w	#$48,a1
0001BA5A 4E75                       		rts	
0001BA5C                            ; End of function SS_AniWallsRings
0001BA5C                            
0001BA5C                            ; ===========================================================================
0001BA5C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA6C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA7C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA8C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA9C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAAC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BABC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BACC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BADC                            ; ---------------------------------------------------------------------------
0001BADC                            ; Subroutine to	remove items when you collect them in the special stage
0001BADC                            ; ---------------------------------------------------------------------------
0001BADC                            
0001BADC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BADC                            
0001BADC                            
0001BADC                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BADC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BAE2 303C 001F                  		move.w	#$1F,d0
0001BAE6                            
0001BAE6                            loc_1B4C4:
0001BAE6 4A12                       		tst.b	(a2)
0001BAE8 6700                       		beq.s	locret_1B4CE
0001BAEA 504A                       		addq.w	#8,a2
0001BAEC 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAF0                            
0001BAF0                            locret_1B4CE:
0001BAF0 4E75                       		rts	
0001BAF2                            ; End of function SS_RemoveCollectedItem
0001BAF2                            
0001BAF2                            ; ---------------------------------------------------------------------------
0001BAF2                            ; Subroutine to	animate	special	stage items when you touch them
0001BAF2                            ; ---------------------------------------------------------------------------
0001BAF2                            
0001BAF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAF2                            
0001BAF2                            
0001BAF2                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAF2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BAF8 3E3C 001F                  		move.w	#$1F,d7
0001BAFC                            
0001BAFC                            loc_1B4DA:
0001BAFC 7000                       		moveq	#0,d0
0001BAFE 1010                       		move.b	(a0),d0
0001BB00 6700                       		beq.s	loc_1B4E8
0001BB02 E548                       		lsl.w	#2,d0
0001BB04 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BB08 4E91                       		jsr	(a1)
0001BB0A                            
0001BB0A                            loc_1B4E8:
0001BB0A 5048                       		addq.w	#8,a0
0001BB0C                            
0001BB0C                            loc_1B4EA:
0001BB0C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BB10                            
0001BB10 4E75                       		rts	
0001BB12                            ; End of function SS_AniItems
0001BB12                            
0001BB12                            ; ===========================================================================
0001BB12 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BB16 0000 0000                  		dc.l SS_AniBumper
0001BB1A 0000 0000                  		dc.l SS_Ani1Up
0001BB1E 0000 0000                  		dc.l SS_AniReverse
0001BB22 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB26 0000 0000                  		dc.l SS_AniGlassBlock
0001BB2A                            ; ===========================================================================
0001BB2A                            
0001BB2A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB2A 5328 0002                  		subq.b	#1,2(a0)
0001BB2E 6A00                       		bpl.s	locret_1B530
0001BB30 117C 0005 0002             		move.b	#5,2(a0)
0001BB36 7000                       		moveq	#0,d0
0001BB38 1028 0003                  		move.b	3(a0),d0
0001BB3C 5228 0003                  		addq.b	#1,3(a0)
0001BB40 2268 0004                  		movea.l	4(a0),a1
0001BB44 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB48 1280                       		move.b	d0,(a1)
0001BB4A 6600                       		bne.s	locret_1B530
0001BB4C 4290                       		clr.l	(a0)
0001BB4E 42A8 0004                  		clr.l	4(a0)
0001BB52                            
0001BB52                            locret_1B530:
0001BB52 4E75                       		rts	
0001BB54                            ; ===========================================================================
0001BB54 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB5A                            ; ===========================================================================
0001BB5A                            
0001BB5A                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB5A 5328 0002                  		subq.b	#1,2(a0)
0001BB5E 6A00                       		bpl.s	locret_1B566
0001BB60 117C 0007 0002             		move.b	#7,2(a0)
0001BB66 7000                       		moveq	#0,d0
0001BB68 1028 0003                  		move.b	3(a0),d0
0001BB6C 5228 0003                  		addq.b	#1,3(a0)
0001BB70 2268 0004                  		movea.l	4(a0),a1
0001BB74 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB78 6600                       		bne.s	loc_1B564
0001BB7A 4290                       		clr.l	(a0)
0001BB7C 42A8 0004                  		clr.l	4(a0)
0001BB80 12BC 0025                  		move.b	#$25,(a1)
0001BB84 4E75                       		rts	
0001BB86                            ; ===========================================================================
0001BB86                            
0001BB86                            loc_1B564:
0001BB86 1280                       		move.b	d0,(a1)
0001BB88                            
0001BB88                            locret_1B566:
0001BB88 4E75                       		rts	
0001BB8A                            ; ===========================================================================
0001BB8A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB90                            ; ===========================================================================
0001BB90                            
0001BB90                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB90 5328 0002                  		subq.b	#1,2(a0)
0001BB94 6A00                       		bpl.s	locret_1B596
0001BB96 117C 0005 0002             		move.b	#5,2(a0)
0001BB9C 7000                       		moveq	#0,d0
0001BB9E 1028 0003                  		move.b	3(a0),d0
0001BBA2 5228 0003                  		addq.b	#1,3(a0)
0001BBA6 2268 0004                  		movea.l	4(a0),a1
0001BBAA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BBAE 1280                       		move.b	d0,(a1)
0001BBB0 6600                       		bne.s	locret_1B596
0001BBB2 4290                       		clr.l	(a0)
0001BBB4 42A8 0004                  		clr.l	4(a0)
0001BBB8                            
0001BBB8                            locret_1B596:
0001BBB8 4E75                       		rts	
0001BBBA                            ; ===========================================================================
0001BBBA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBC0                            ; ===========================================================================
0001BBC0                            
0001BBC0                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBC0 5328 0002                  		subq.b	#1,2(a0)
0001BBC4 6A00                       		bpl.s	locret_1B5CC
0001BBC6 117C 0007 0002             		move.b	#7,2(a0)
0001BBCC 7000                       		moveq	#0,d0
0001BBCE 1028 0003                  		move.b	3(a0),d0
0001BBD2 5228 0003                  		addq.b	#1,3(a0)
0001BBD6 2268 0004                  		movea.l	4(a0),a1
0001BBDA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BBDE 6600                       		bne.s	loc_1B5CA
0001BBE0 4290                       		clr.l	(a0)
0001BBE2 42A8 0004                  		clr.l	4(a0)
0001BBE6 12BC 002B                  		move.b	#$2B,(a1)
0001BBEA 4E75                       		rts	
0001BBEC                            ; ===========================================================================
0001BBEC                            
0001BBEC                            loc_1B5CA:
0001BBEC 1280                       		move.b	d0,(a1)
0001BBEE                            
0001BBEE                            locret_1B5CC:
0001BBEE 4E75                       		rts	
0001BBF0                            ; ===========================================================================
0001BBF0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBF6                            ; ===========================================================================
0001BBF6                            
0001BBF6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBF6 5328 0002                  		subq.b	#1,2(a0)
0001BBFA 6A00                       		bpl.s	locret_1B60C
0001BBFC 117C 0005 0002             		move.b	#5,2(a0)
0001BC02 7000                       		moveq	#0,d0
0001BC04 1028 0003                  		move.b	3(a0),d0
0001BC08 5228 0003                  		addq.b	#1,3(a0)
0001BC0C 2268 0004                  		movea.l	4(a0),a1
0001BC10 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BC14 1280                       		move.b	d0,(a1)
0001BC16 6600                       		bne.s	locret_1B60C
0001BC18 4290                       		clr.l	(a0)
0001BC1A 42A8 0004                  		clr.l	4(a0)
0001BC1E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC24 303C 00A8                  		move.w	#$A8,d0
0001BC28 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC2E                            
0001BC2E                            locret_1B60C:
0001BC2E 4E75                       		rts	
0001BC30                            ; ===========================================================================
0001BC30 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC36                            ; ===========================================================================
0001BC36                            
0001BC36                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC36 5328 0002                  		subq.b	#1,2(a0)
0001BC3A 6A00                       		bpl.s	locret_1B640
0001BC3C 117C 0001 0002             		move.b	#1,2(a0)
0001BC42 7000                       		moveq	#0,d0
0001BC44 1028 0003                  		move.b	3(a0),d0
0001BC48 5228 0003                  		addq.b	#1,3(a0)
0001BC4C 2268 0004                  		movea.l	4(a0),a1
0001BC50 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC54 1280                       		move.b	d0,(a1)
0001BC56 6600                       		bne.s	locret_1B640
0001BC58 12A8 0004                  		move.b	4(a0),(a1)
0001BC5C 4290                       		clr.l	(a0)
0001BC5E 42A8 0004                  		clr.l	4(a0)
0001BC62                            
0001BC62                            locret_1B640:
0001BC62 4E75                       		rts	
0001BC64                            ; ===========================================================================
0001BC64 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC6E                            ; ---------------------------------------------------------------------------
0001BC6E                            ; Special stage	layout pointers
0001BC6E                            ; ---------------------------------------------------------------------------
0001BC6E                            SS_LayoutIndex:
0001BC6E                            	include "_inc\Special stage layout pointers.asm"
0001BC6E                            ; ---------------------------------------------------------------------------
0001BC6E                            ; Special stage	layout pointers
0001BC6E                            ; ---------------------------------------------------------------------------
0001BC6E 0000 0000                  	dc.l SS_1
0001BC72 0000 0000                  	dc.l SS_2
0001BC76 0000 0000                  	dc.l SS_3
0001BC7A 0000 0000                  	dc.l SS_4
0001BC7E 0000 0000                  	dc.l SS_5
0001BC82 0000 0000                  	dc.l SS_6
0001BC86                            	even
0001BC86                            	even
0001BC86                            
0001BC86                            ; ---------------------------------------------------------------------------
0001BC86                            ; Special stage	start locations
0001BC86                            ; ---------------------------------------------------------------------------
0001BC86                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC9E                            		even
0001BC9E                            
0001BC9E                            ; ---------------------------------------------------------------------------
0001BC9E                            ; Subroutine to	load special stage layout
0001BC9E                            ; ---------------------------------------------------------------------------
0001BC9E                            
0001BC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC9E                            
0001BC9E                            
0001BC9E                            SS_Load:				; XREF: SpecialStage
0001BC9E 7000                       		moveq	#0,d0
0001BCA0 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BCA4 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BCA8 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BCAE 6500                       		bcs.s	SS_ChkEmldNum
0001BCB0 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BCB6                            
0001BCB6                            SS_ChkEmldNum:
0001BCB6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BCBC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BCBE 7200                       		moveq	#0,d1
0001BCC0 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCC4 5301                       		subq.b	#1,d1
0001BCC6 6500                       		bcs.s	SS_LoadData
0001BCC8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCCC                            
0001BCCC                            SS_ChkEmldLoop:	
0001BCCC B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCD0 6600                       		bne.s	SS_ChkEmldRepeat
0001BCD2 60CA                       		bra.s	SS_Load
0001BCD4                            ; ===========================================================================
0001BCD4                            
0001BCD4                            SS_ChkEmldRepeat:
0001BCD4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BCD8                            
0001BCD8                            SS_LoadData:
0001BCD8 E548                       		lsl.w	#2,d0
0001BCDA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BCDE 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCE2 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCE6 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCEA 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCF0 303C 0000                  		move.w	#0,d0
0001BCF4 4EB9 0000 193E             		jsr	(EniDec).l
0001BCFA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BD00 303C 0FFF                  		move.w	#$FFF,d0
0001BD04                            
0001BD04                            SS_ClrRAM3:
0001BD04 4299                       		clr.l	(a1)+
0001BD06 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BD0A                            
0001BD0A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD10 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BD16 723F                       		moveq	#$3F,d1
0001BD18                            
0001BD18                            loc_1B6F6:
0001BD18 743F                       		moveq	#$3F,d2
0001BD1A                            
0001BD1A                            loc_1B6F8:
0001BD1A 12D8                       		move.b	(a0)+,(a1)+
0001BD1C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD20                            
0001BD20 43E9 0040                  		lea	$40(a1),a1
0001BD24 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD28                            
0001BD28 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD2E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD34 724D                       		moveq	#$4D,d1
0001BD36                            
0001BD36                            loc_1B714:
0001BD36 22D8                       		move.l	(a0)+,(a1)+
0001BD38 32FC 0000                  		move.w	#0,(a1)+
0001BD3C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD42 32D8                       		move.w	(a0)+,(a1)+
0001BD44 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD48                            
0001BD48 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD4E 323C 003F                  		move.w	#$3F,d1
0001BD52                            
0001BD52                            loc_1B730:
0001BD52                            
0001BD52 4299                       		clr.l	(a1)+
0001BD54 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD58                            
0001BD58 4E75                       		rts	
0001BD5A                            ; End of function SS_Load
0001BD5A                            
0001BD5A                            ; ===========================================================================
0001BD5A                            ; ---------------------------------------------------------------------------
0001BD5A                            ; Special stage	mappings and VRAM pointers
0001BD5A                            ; ---------------------------------------------------------------------------
0001BD5A                            SS_MapIndex:
0001BD5A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD5A                            ; ---------------------------------------------------------------------------
0001BD5A                            ; Special stage	mappings and VRAM pointers
0001BD5A                            ; ---------------------------------------------------------------------------
0001BD5A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD5E 0142                       	dc.w $142		; VRAM setting
0001BD60 0000 0000                  	dc.l Map_SSWalls
0001BD64 0142                       	dc.w $142
0001BD66 0000 0000                  	dc.l Map_SSWalls
0001BD6A 0142                       	dc.w $142
0001BD6C 0000 0000                  	dc.l Map_SSWalls
0001BD70 0142                       	dc.w $142
0001BD72 0000 0000                  	dc.l Map_SSWalls
0001BD76 0142                       	dc.w $142
0001BD78 0000 0000                  	dc.l Map_SSWalls
0001BD7C 0142                       	dc.w $142
0001BD7E 0000 0000                  	dc.l Map_SSWalls
0001BD82 0142                       	dc.w $142
0001BD84 0000 0000                  	dc.l Map_SSWalls
0001BD88 0142                       	dc.w $142
0001BD8A 0000 0000                  	dc.l Map_SSWalls
0001BD8E 0142                       	dc.w $142
0001BD90 0000 0000                  	dc.l Map_SSWalls
0001BD94 2142                       	dc.w $2142
0001BD96 0000 0000                  	dc.l Map_SSWalls
0001BD9A 2142                       	dc.w $2142
0001BD9C 0000 0000                  	dc.l Map_SSWalls
0001BDA0 2142                       	dc.w $2142
0001BDA2 0000 0000                  	dc.l Map_SSWalls
0001BDA6 2142                       	dc.w $2142
0001BDA8 0000 0000                  	dc.l Map_SSWalls
0001BDAC 2142                       	dc.w $2142
0001BDAE 0000 0000                  	dc.l Map_SSWalls
0001BDB2 2142                       	dc.w $2142
0001BDB4 0000 0000                  	dc.l Map_SSWalls
0001BDB8 2142                       	dc.w $2142
0001BDBA 0000 0000                  	dc.l Map_SSWalls
0001BDBE 2142                       	dc.w $2142
0001BDC0 0000 0000                  	dc.l Map_SSWalls
0001BDC4 2142                       	dc.w $2142
0001BDC6 0000 0000                  	dc.l Map_SSWalls
0001BDCA 4142                       	dc.w $4142
0001BDCC 0000 0000                  	dc.l Map_SSWalls
0001BDD0 4142                       	dc.w $4142
0001BDD2 0000 0000                  	dc.l Map_SSWalls
0001BDD6 4142                       	dc.w $4142
0001BDD8 0000 0000                  	dc.l Map_SSWalls
0001BDDC 4142                       	dc.w $4142
0001BDDE 0000 0000                  	dc.l Map_SSWalls
0001BDE2 4142                       	dc.w $4142
0001BDE4 0000 0000                  	dc.l Map_SSWalls
0001BDE8 4142                       	dc.w $4142
0001BDEA 0000 0000                  	dc.l Map_SSWalls
0001BDEE 4142                       	dc.w $4142
0001BDF0 0000 0000                  	dc.l Map_SSWalls
0001BDF4 4142                       	dc.w $4142
0001BDF6 0000 0000                  	dc.l Map_SSWalls
0001BDFA 4142                       	dc.w $4142
0001BDFC 0000 0000                  	dc.l Map_SSWalls
0001BE00 6142                       	dc.w $6142
0001BE02 0000 0000                  	dc.l Map_SSWalls
0001BE06 6142                       	dc.w $6142
0001BE08 0000 0000                  	dc.l Map_SSWalls
0001BE0C 6142                       	dc.w $6142
0001BE0E 0000 0000                  	dc.l Map_SSWalls
0001BE12 6142                       	dc.w $6142
0001BE14 0000 0000                  	dc.l Map_SSWalls
0001BE18 6142                       	dc.w $6142
0001BE1A 0000 0000                  	dc.l Map_SSWalls
0001BE1E 6142                       	dc.w $6142
0001BE20 0000 0000                  	dc.l Map_SSWalls
0001BE24 6142                       	dc.w $6142
0001BE26 0000 0000                  	dc.l Map_SSWalls
0001BE2A 6142                       	dc.w $6142
0001BE2C 0000 0000                  	dc.l Map_SSWalls
0001BE30 6142                       	dc.w $6142
0001BE32 0000 F06E                  	dc.l Map_obj47
0001BE36 023B                       	dc.w $23B
0001BE38 0000 0000                  	dc.l Map_SS_R
0001BE3C 0570                       	dc.w $570
0001BE3E 0000 0000                  	dc.l Map_SS_R
0001BE42 0251                       	dc.w $251
0001BE44 0000 0000                  	dc.l Map_SS_R
0001BE48 0370                       	dc.w $370
0001BE4A 0000 0000                  	dc.l Map_SS_Up
0001BE4E 0263                       	dc.w $263
0001BE50 0000 0000                  	dc.l Map_SS_Down
0001BE54 0263                       	dc.w $263
0001BE56 0000 0000                  	dc.l Map_SS_R
0001BE5A 22F0                       	dc.w $22F0
0001BE5C 0000 0000                  	dc.l Map_SS_Glass
0001BE60 0470                       	dc.w $470
0001BE62 0000 0000                  	dc.l Map_SS_Glass
0001BE66 05F0                       	dc.w $5F0
0001BE68 0000 0000                  	dc.l Map_SS_Glass
0001BE6C 65F0                       	dc.w $65F0
0001BE6E 0000 0000                  	dc.l Map_SS_Glass
0001BE72 25F0                       	dc.w $25F0
0001BE74 0000 0000                  	dc.l Map_SS_Glass
0001BE78 45F0                       	dc.w $45F0
0001BE7A 0000 0000                  	dc.l Map_SS_R
0001BE7E 02F0                       	dc.w $2F0
0001BE80 0100 F06E                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE84 023B                       	dc.w $23B
0001BE86 0200 F06E                  	dc.l Map_obj47+$2000000
0001BE8A 023B                       	dc.w $23B
0001BE8C 0000 0000                  	dc.l Map_SS_R
0001BE90 0797                       	dc.w $797
0001BE92 0000 0000                  	dc.l Map_SS_R
0001BE96 07A0                       	dc.w $7A0
0001BE98 0000 0000                  	dc.l Map_SS_R
0001BE9C 07A9                       	dc.w $7A9
0001BE9E 0000 0000                  	dc.l Map_SS_R
0001BEA2 0797                       	dc.w $797
0001BEA4 0000 0000                  	dc.l Map_SS_R
0001BEA8 07A0                       	dc.w $7A0
0001BEAA 0000 0000                  	dc.l Map_SS_R
0001BEAE 07A9                       	dc.w $7A9
0001BEB0 0000 A3E8                  	dc.l Map_obj25
0001BEB4 27B2                       	dc.w $27B2
0001BEB6 0000 0000                  	dc.l Map_SS_Chaos3
0001BEBA 0770                       	dc.w $770
0001BEBC 0000 0000                  	dc.l Map_SS_Chaos3
0001BEC0 2770                       	dc.w $2770
0001BEC2 0000 0000                  	dc.l Map_SS_Chaos3
0001BEC6 4770                       	dc.w $4770
0001BEC8 0000 0000                  	dc.l Map_SS_Chaos3
0001BECC 6770                       	dc.w $6770
0001BECE 0000 0000                  	dc.l Map_SS_Chaos1
0001BED2 0770                       	dc.w $770
0001BED4 0000 0000                  	dc.l Map_SS_Chaos2
0001BED8 0770                       	dc.w $770
0001BEDA 0000 0000                  	dc.l Map_SS_R
0001BEDE 04F0                       	dc.w $4F0
0001BEE0 0400 A3E8                  	dc.l Map_obj25+$4000000
0001BEE4 27B2                       	dc.w $27B2
0001BEE6 0500 A3E8                  	dc.l Map_obj25+$5000000
0001BEEA 27B2                       	dc.w $27B2
0001BEEC 0600 A3E8                  	dc.l Map_obj25+$6000000
0001BEF0 27B2                       	dc.w $27B2
0001BEF2 0700 A3E8                  	dc.l Map_obj25+$7000000
0001BEF6 27B2                       	dc.w $27B2
0001BEF8 0000 0000                  	dc.l Map_SS_Glass
0001BEFC 23F0                       	dc.w $23F0
0001BEFE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BF02 23F0                       	dc.w $23F0
0001BF04 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BF08 23F0                       	dc.w $23F0
0001BF0A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BF0E 23F0                       	dc.w $23F0
0001BF10 0000 0000                  	dc.l Map_SS_R+$2000000
0001BF14 04F0                       	dc.w $4F0
0001BF16 0000 0000                  	dc.l Map_SS_Glass
0001BF1A 05F0                       	dc.w $5F0
0001BF1C 0000 0000                  	dc.l Map_SS_Glass
0001BF20 65F0                       	dc.w $65F0
0001BF22 0000 0000                  	dc.l Map_SS_Glass
0001BF26 25F0                       	dc.w $25F0
0001BF28 0000 0000                  	dc.l Map_SS_Glass
0001BF2C 45F0                       	dc.w $45F0
0001BF2C 45F0                       	dc.w $45F0
0001BF2E                            
0001BF2E                            ; ---------------------------------------------------------------------------
0001BF2E                            ; Sprite mappings - special stage "R" block
0001BF2E                            ; ---------------------------------------------------------------------------
0001BF2E                            Map_SS_R:
0001BF2E                            	include "_maps\SSRblock.asm"
0001BF2E                            ; ---------------------------------------------------------------------------
0001BF2E                            ; Sprite mappings - special stage "R" block
0001BF2E                            ; ---------------------------------------------------------------------------
0001BF2E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF32 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF34 01                         byte_1B912:	dc.b 1
0001BF35 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF3A 01                         byte_1B918:	dc.b 1
0001BF3B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF40 00                         byte_1B91E:	dc.b 0
0001BF42 00                         		even
0001BF42 00                         		even
0001BF42                            
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42                            Map_SS_Glass:
0001BF42                            	include "_maps\SSglassblock.asm"
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF42                            ; ---------------------------------------------------------------------------
0001BF42 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF46 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF4A 01                         byte_1B928:	dc.b 1
0001BF4B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF50 01                         byte_1B92E:	dc.b 1
0001BF51 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF56 01                         byte_1B934:	dc.b 1
0001BF57 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF5C 01                         byte_1B93A:	dc.b 1
0001BF5D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF62                            		even
0001BF62                            		even
0001BF62                            
0001BF62                            ; ---------------------------------------------------------------------------
0001BF62                            ; Sprite mappings - special stage "UP" block
0001BF62                            ; ---------------------------------------------------------------------------
0001BF62                            Map_SS_Up:
0001BF62                            	include "_maps\SSUPblock.asm"
0001BF62                            ; ---------------------------------------------------------------------------
0001BF62                            ; Sprite mappings - special stage "UP" block
0001BF62                            ; ---------------------------------------------------------------------------
0001BF62 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF64 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF66 01                         byte_1B944:	dc.b 1
0001BF67 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF6C 01                         byte_1B94A:	dc.b 1
0001BF6D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF72                            		even
0001BF72                            		even
0001BF72                            
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            ; Sprite mappings - special stage "DOWN" block
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            Map_SS_Down:
0001BF72                            	include "_maps\SSDOWNblock.asm"
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            ; Sprite mappings - special stage "DOWN" block
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF74 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF76 01                         byte_1B954:	dc.b 1
0001BF77 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF7C 01                         byte_1B95A:	dc.b 1
0001BF7D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF82                            		even
0001BF82                            		even
0001BF82                            
0001BF82                            ; ---------------------------------------------------------------------------
0001BF82                            ; Sprite mappings - special stage chaos	emeralds
0001BF82                            ; ---------------------------------------------------------------------------
0001BF82 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF84 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF86 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF88 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF8A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF8C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF8E 01                         byte_1B96C:	dc.b 1
0001BF8F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF94 01                         byte_1B972:	dc.b 1
0001BF95 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF9A 01                         byte_1B978:	dc.b 1
0001BF9B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BFA0 01                         byte_1B97E:	dc.b 1
0001BFA1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BFA6                            		even
0001BFA6                            ; ===========================================================================
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            ; Object 09 - Sonic (special stage)
0001BFA6                            ; ---------------------------------------------------------------------------
0001BFA6                            
0001BFA6                            Obj09:					; XREF: Obj_Index
0001BFA6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BFAA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BFAC 6100 0000                  		bsr.w	SS_FixCamera
0001BFB0 6000 0000                  		bra.w	DebugMode
0001BFB4                            ; ===========================================================================
0001BFB4                            
0001BFB4                            Obj09_Normal:
0001BFB4 7000                       		moveq	#0,d0
0001BFB6 1028 0024                  		move.b	$24(a0),d0
0001BFBA 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BFBE 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFC2                            ; ===========================================================================
0001BFC2 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFC4 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFC6 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFC8 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFCA                            ; ===========================================================================
0001BFCA                            
0001BFCA                            Obj09_Main:				; XREF: Obj09_Index
0001BFCA 5428 0024                  		addq.b	#2,$24(a0)
0001BFCE 117C 000E 0016             		move.b	#$E,$16(a0)
0001BFD4 117C 0007 0017             		move.b	#7,$17(a0)
0001BFDA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFE2 317C 0780 0002             		move.w	#$780,2(a0)
0001BFE8 117C 0004 0001             		move.b	#4,1(a0)
0001BFEE 117C 0000 0018             		move.b	#0,$18(a0)
0001BFF4 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFFA 08E8 0002 0022             		bset	#2,$22(a0)
0001C000 08E8 0001 0022             		bset	#1,$22(a0)
0001C006                            
0001C006                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C006 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C00A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C00C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C012 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C014 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C01A                            
0001C01A                            Obj09_NoDebug:
0001C01A 117C 0000 0030             		move.b	#0,$30(a0)
0001C020 7000                       		moveq	#0,d0
0001C022 1028 0022                  		move.b	$22(a0),d0
0001C026 0240 0002                  		andi.w	#2,d0
0001C02A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C02E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C032 4EBA 8200                  		jsr	LoadSonicDynPLC
0001C036 4EF9 0000 DB7A             		jmp	DisplaySprite
0001C03C                            ; ===========================================================================
0001C03C 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C03E 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C040                            ; ===========================================================================
0001C040                            
0001C040                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C040 6100 0000                  		bsr.w	Obj09_Jump
0001C044 6100 0000                  		bsr.w	Obj09_Move
0001C048 6100 0000                  		bsr.w	Obj09_Fall
0001C04C 6000                       		bra.s	Obj09_Display
0001C04E                            ; ===========================================================================
0001C04E                            
0001C04E                            Obj09_InAir:				; XREF: Obj09_Modes
0001C04E 6100 0000                  		bsr.w	nullsub_2
0001C052 6100 0000                  		bsr.w	Obj09_Move
0001C056 6100 0000                  		bsr.w	Obj09_Fall
0001C05A                            
0001C05A                            Obj09_Display:				; XREF: Obj09_OnWall
0001C05A 6100 0000                  		bsr.w	Obj09_ChkItems
0001C05E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C062 4EB9 0000 DB54             		jsr	SpeedToPos
0001C068 6100 0000                  		bsr.w	SS_FixCamera
0001C06C 3038 F780                  		move.w	($FFFFF780).w,d0
0001C070 D078 F782                  		add.w	($FFFFF782).w,d0
0001C074 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C078 4EB9 0001 3FB8             		jsr	Sonic_Animate
0001C07E 4E75                       		rts	
0001C080                            
0001C080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C080                            
0001C080                            
0001C080                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C080 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C086 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C088 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C08C                            
0001C08C                            Obj09_ChkRight:
0001C08C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C092 6700                       		beq.s	loc_1BA78	; if not, branch
0001C094 6100 0000                  		bsr.w	Obj09_MoveRight
0001C098                            
0001C098                            loc_1BA78:
0001C098 1038 F602                  		move.b	($FFFFF602).w,d0
0001C09C 0200 000C                  		andi.b	#$C,d0
0001C0A0 6600                       		bne.s	loc_1BAA8
0001C0A2 3028 0014                  		move.w	$14(a0),d0
0001C0A6 6700                       		beq.s	loc_1BAA8
0001C0A8 6B00                       		bmi.s	loc_1BA9A
0001C0AA 0440 000C                  		subi.w	#$C,d0
0001C0AE 6400                       		bcc.s	loc_1BA94
0001C0B0 303C 0000                  		move.w	#0,d0
0001C0B4                            
0001C0B4                            loc_1BA94:
0001C0B4 3140 0014                  		move.w	d0,$14(a0)
0001C0B8 6000                       		bra.s	loc_1BAA8
0001C0BA                            ; ===========================================================================
0001C0BA                            
0001C0BA                            loc_1BA9A:
0001C0BA 0640 000C                  		addi.w	#$C,d0
0001C0BE 6400                       		bcc.s	loc_1BAA4
0001C0C0 303C 0000                  		move.w	#0,d0
0001C0C4                            
0001C0C4                            loc_1BAA4:
0001C0C4 3140 0014                  		move.w	d0,$14(a0)
0001C0C8                            
0001C0C8                            loc_1BAA8:
0001C0C8 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0CC 0600 0020                  		addi.b	#$20,d0
0001C0D0 0200 00C0                  		andi.b	#$C0,d0
0001C0D4 4400                       		neg.b	d0
0001C0D6 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C0DC C3E8 0014                  		muls.w	$14(a0),d1
0001C0E0 D3A8 0008                  		add.l	d1,8(a0)
0001C0E4 C1E8 0014                  		muls.w	$14(a0),d0
0001C0E8 D1A8 000C                  		add.l	d0,$C(a0)
0001C0EC 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0F0 2428 000C                  		move.l	$C(a0),d2
0001C0F4 2628 0008                  		move.l	8(a0),d3
0001C0F8 6100 0000                  		bsr.w	sub_1BCE8
0001C0FC 6700                       		beq.s	loc_1BAF2
0001C0FE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C102 93A8 0008                  		sub.l	d1,8(a0)
0001C106 91A8 000C                  		sub.l	d0,$C(a0)
0001C10A 317C 0000 0014             		move.w	#0,$14(a0)
0001C110 4E75                       		rts	
0001C112                            ; ===========================================================================
0001C112                            
0001C112                            loc_1BAF2:
0001C112 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C116 4E75                       		rts	
0001C118                            ; End of function Obj09_Move
0001C118                            
0001C118                            
0001C118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C118                            
0001C118                            
0001C118                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C118 08E8 0000 0022             		bset	#0,$22(a0)
0001C11E 3028 0014                  		move.w	$14(a0),d0
0001C122 6700                       		beq.s	loc_1BB06
0001C124 6A00                       		bpl.s	loc_1BB1A
0001C126                            
0001C126                            loc_1BB06:
0001C126 0440 000C                  		subi.w	#$C,d0
0001C12A 0C40 F800                  		cmpi.w	#-$800,d0
0001C12E 6E00                       		bgt.s	loc_1BB14
0001C130 303C F800                  		move.w	#-$800,d0
0001C134                            
0001C134                            loc_1BB14:
0001C134 3140 0014                  		move.w	d0,$14(a0)
0001C138 4E75                       		rts	
0001C13A                            ; ===========================================================================
0001C13A                            
0001C13A                            loc_1BB1A:
0001C13A 0440 0040                  		subi.w	#$40,d0
0001C13E 6400                       		bcc.s	loc_1BB22
0001C140 4E71                       		nop	
0001C142                            
0001C142                            loc_1BB22:
0001C142 3140 0014                  		move.w	d0,$14(a0)
0001C146 4E75                       		rts	
0001C148                            ; End of function Obj09_MoveLeft
0001C148                            
0001C148                            
0001C148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C148                            
0001C148                            
0001C148                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C148 08A8 0000 0022             		bclr	#0,$22(a0)
0001C14E 3028 0014                  		move.w	$14(a0),d0
0001C152 6B00                       		bmi.s	loc_1BB48
0001C154 0640 000C                  		addi.w	#$C,d0
0001C158 0C40 0800                  		cmpi.w	#$800,d0
0001C15C 6D00                       		blt.s	loc_1BB42
0001C15E 303C 0800                  		move.w	#$800,d0
0001C162                            
0001C162                            loc_1BB42:
0001C162 3140 0014                  		move.w	d0,$14(a0)
0001C166 6000                       		bra.s	locret_1BB54
0001C168                            ; ===========================================================================
0001C168                            
0001C168                            loc_1BB48:
0001C168 0640 0040                  		addi.w	#$40,d0
0001C16C 6400                       		bcc.s	loc_1BB50
0001C16E 4E71                       		nop	
0001C170                            
0001C170                            loc_1BB50:
0001C170 3140 0014                  		move.w	d0,$14(a0)
0001C174                            
0001C174                            locret_1BB54:
0001C174 4E75                       		rts	
0001C176                            ; End of function Obj09_MoveRight
0001C176                            
0001C176                            
0001C176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C176                            
0001C176                            
0001C176                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C176 1038 F603                  		move.b	($FFFFF603).w,d0
0001C17A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C17E 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C180 1038 F780                  		move.b	($FFFFF780).w,d0
0001C184 0200 00FC                  		andi.b	#$FC,d0
0001C188 4400                       		neg.b	d0
0001C18A 0400 0040                  		subi.b	#$40,d0
0001C18E 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C194 C3FC 0680                  		muls.w	#$680,d1
0001C198 E081                       		asr.l	#8,d1
0001C19A 3141 0010                  		move.w	d1,$10(a0)
0001C19E C1FC 0680                  		muls.w	#$680,d0
0001C1A2 E080                       		asr.l	#8,d0
0001C1A4 3140 0012                  		move.w	d0,$12(a0)
0001C1A8 08E8 0001 0022             		bset	#1,$22(a0)
0001C1AE 303C 00A0                  		move.w	#$A0,d0
0001C1B2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C1B8                            
0001C1B8                            Obj09_NoJump:
0001C1B8 4E75                       		rts	
0001C1BA                            ; End of function Obj09_Jump
0001C1BA                            
0001C1BA                            
0001C1BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1BA                            
0001C1BA                            
0001C1BA                            nullsub_2:				; XREF: Obj09_InAir
0001C1BA 4E75                       		rts	
0001C1BC                            ; End of function nullsub_2
0001C1BC                            
0001C1BC                            ; ===========================================================================
0001C1BC                            ; ---------------------------------------------------------------------------
0001C1BC                            ; unused subroutine to limit Sonic's upward vertical speed
0001C1BC                            ; ---------------------------------------------------------------------------
0001C1BC 323C FC00                  		move.w	#-$400,d1
0001C1C0 B268 0012                  		cmp.w	$12(a0),d1
0001C1C4 6F00                       		ble.s	locret_1BBB4
0001C1C6 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1CA 0200 0070                  		andi.b	#$70,d0
0001C1CE 6600                       		bne.s	locret_1BBB4
0001C1D0 3141 0012                  		move.w	d1,$12(a0)
0001C1D4                            
0001C1D4                            locret_1BBB4:
0001C1D4 4E75                       		rts	
0001C1D6                            ; ---------------------------------------------------------------------------
0001C1D6                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C1D6                            ; ---------------------------------------------------------------------------
0001C1D6                            
0001C1D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1D6                            
0001C1D6                            
0001C1D6                            SS_FixCamera:				; XREF: Obj09
0001C1D6 3428 000C                  		move.w	$C(a0),d2
0001C1DA 3628 0008                  		move.w	8(a0),d3
0001C1DE 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1E2 0443 00A0                  		subi.w	#$A0,d3
0001C1E6 6500                       		bcs.s	loc_1BBCE
0001C1E8 9043                       		sub.w	d3,d0
0001C1EA 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1EE                            
0001C1EE                            loc_1BBCE:
0001C1EE 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1F2 0442 0070                  		subi.w	#$70,d2
0001C1F6 6500                       		bcs.s	locret_1BBDE
0001C1F8 9042                       		sub.w	d2,d0
0001C1FA 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1FE                            
0001C1FE                            locret_1BBDE:
0001C1FE 4E75                       		rts	
0001C200                            ; End of function SS_FixCamera
0001C200                            
0001C200                            ; ===========================================================================
0001C200                            
0001C200                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C200 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C206 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C20C 6600                       		bne.s	loc_1BBF4
0001C20E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C214                            
0001C214                            loc_1BBF4:
0001C214 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C21A 6D00                       		blt.s	loc_1BC12
0001C21C 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C222 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C228 5428 0024                  		addq.b	#2,$24(a0)
0001C22C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C232                            
0001C232                            loc_1BC12:
0001C232 3038 F780                  		move.w	($FFFFF780).w,d0
0001C236 D078 F782                  		add.w	($FFFFF782).w,d0
0001C23A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C23E 4EB9 0001 3FB8             		jsr	Sonic_Animate
0001C244 4EB9 0001 4234             		jsr	LoadSonicDynPLC
0001C24A 6100 FF8A                  		bsr.w	SS_FixCamera
0001C24E 4EF9 0000 DB7A             		jmp	DisplaySprite
0001C254                            ; ===========================================================================
0001C254                            
0001C254                            Obj09_Exit2:				; XREF: Obj09_Index
0001C254 5368 0038                  		subq.w	#1,$38(a0)
0001C258 6600                       		bne.s	loc_1BC40
0001C25A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C260                            
0001C260                            loc_1BC40:
0001C260 4EB9 0001 3FB8             		jsr	Sonic_Animate
0001C266 4EB9 0001 4234             		jsr	LoadSonicDynPLC
0001C26C 6100 FF68                  		bsr.w	SS_FixCamera
0001C270 4EF9 0000 DB7A             		jmp	DisplaySprite
0001C276                            
0001C276                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C276                            
0001C276                            
0001C276                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C276 2428 000C                  		move.l	$C(a0),d2
0001C27A 2628 0008                  		move.l	8(a0),d3
0001C27E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C282 0200 00FC                  		andi.b	#$FC,d0
0001C286 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C28C 3828 0010                  		move.w	$10(a0),d4
0001C290 48C4                       		ext.l	d4
0001C292 E184                       		asl.l	#8,d4
0001C294 C1FC 002A                  		muls.w	#$2A,d0
0001C298 D084                       		add.l	d4,d0
0001C29A 3828 0012                  		move.w	$12(a0),d4
0001C29E 48C4                       		ext.l	d4
0001C2A0 E184                       		asl.l	#8,d4
0001C2A2 C3FC 002A                  		muls.w	#$2A,d1
0001C2A6 D284                       		add.l	d4,d1
0001C2A8 D680                       		add.l	d0,d3
0001C2AA 6100 0000                  		bsr.w	sub_1BCE8
0001C2AE 6700                       		beq.s	loc_1BCB0
0001C2B0 9680                       		sub.l	d0,d3
0001C2B2 7000                       		moveq	#0,d0
0001C2B4 3140 0010                  		move.w	d0,$10(a0)
0001C2B8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2BE D481                       		add.l	d1,d2
0001C2C0 6100 0000                  		bsr.w	sub_1BCE8
0001C2C4 6700                       		beq.s	loc_1BCC6
0001C2C6 9481                       		sub.l	d1,d2
0001C2C8 7200                       		moveq	#0,d1
0001C2CA 3141 0012                  		move.w	d1,$12(a0)
0001C2CE 4E75                       		rts	
0001C2D0                            ; ===========================================================================
0001C2D0                            
0001C2D0                            loc_1BCB0:
0001C2D0 D481                       		add.l	d1,d2
0001C2D2 6100 0000                  		bsr.w	sub_1BCE8
0001C2D6 6700                       		beq.s	loc_1BCD4
0001C2D8 9481                       		sub.l	d1,d2
0001C2DA 7200                       		moveq	#0,d1
0001C2DC 3141 0012                  		move.w	d1,$12(a0)
0001C2E0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2E6                            
0001C2E6                            loc_1BCC6:
0001C2E6 E080                       		asr.l	#8,d0
0001C2E8 E081                       		asr.l	#8,d1
0001C2EA 3140 0010                  		move.w	d0,$10(a0)
0001C2EE 3141 0012                  		move.w	d1,$12(a0)
0001C2F2 4E75                       		rts	
0001C2F4                            ; ===========================================================================
0001C2F4                            
0001C2F4                            loc_1BCD4:
0001C2F4 E080                       		asr.l	#8,d0
0001C2F6 E081                       		asr.l	#8,d1
0001C2F8 3140 0010                  		move.w	d0,$10(a0)
0001C2FC 3141 0012                  		move.w	d1,$12(a0)
0001C300 08E8 0001 0022             		bset	#1,$22(a0)
0001C306 4E75                       		rts	
0001C308                            ; End of function Obj09_Fall
0001C308                            
0001C308                            
0001C308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C308                            
0001C308                            
0001C308                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C308 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C30E 7800                       		moveq	#0,d4
0001C310 4842                       		swap	d2
0001C312 3802                       		move.w	d2,d4
0001C314 4842                       		swap	d2
0001C316 0644 0044                  		addi.w	#$44,d4
0001C31A 88FC 0018                  		divu.w	#$18,d4
0001C31E C8FC 0080                  		mulu.w	#$80,d4
0001C322 D3C4                       		adda.l	d4,a1
0001C324 7800                       		moveq	#0,d4
0001C326 4843                       		swap	d3
0001C328 3803                       		move.w	d3,d4
0001C32A 4843                       		swap	d3
0001C32C 0644 0014                  		addi.w	#$14,d4
0001C330 88FC 0018                  		divu.w	#$18,d4
0001C334 D2C4                       		adda.w	d4,a1
0001C336 7A00                       		moveq	#0,d5
0001C338 1819                       		move.b	(a1)+,d4
0001C33A 6100                       		bsr.s	sub_1BD30
0001C33C 1819                       		move.b	(a1)+,d4
0001C33E 6100                       		bsr.s	sub_1BD30
0001C340 D2FC 007E                  		adda.w	#$7E,a1
0001C344 1819                       		move.b	(a1)+,d4
0001C346 6100                       		bsr.s	sub_1BD30
0001C348 1819                       		move.b	(a1)+,d4
0001C34A 6100                       		bsr.s	sub_1BD30
0001C34C 4A05                       		tst.b	d5
0001C34E 4E75                       		rts	
0001C350                            ; End of function sub_1BCE8
0001C350                            
0001C350                            
0001C350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C350                            
0001C350                            
0001C350                            sub_1BD30:				; XREF: sub_1BCE8
0001C350 6700                       		beq.s	locret_1BD44
0001C352 0C04 0028                  		cmpi.b	#$28,d4
0001C356 6700                       		beq.s	locret_1BD44
0001C358 0C04 003A                  		cmpi.b	#$3A,d4
0001C35C 6500                       		bcs.s	loc_1BD46
0001C35E 0C04 004B                  		cmpi.b	#$4B,d4
0001C362 6400                       		bcc.s	loc_1BD46
0001C364                            
0001C364                            locret_1BD44:
0001C364 4E75                       		rts	
0001C366                            ; ===========================================================================
0001C366                            
0001C366                            loc_1BD46:
0001C366 1144 0030                  		move.b	d4,$30(a0)
0001C36A 2149 0032                  		move.l	a1,$32(a0)
0001C36E 7AFF                       		moveq	#-1,d5
0001C370 4E75                       		rts	
0001C372                            ; End of function sub_1BD30
0001C372                            
0001C372                            
0001C372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C372                            
0001C372                            
0001C372                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C372 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C378 7800                       		moveq	#0,d4
0001C37A 3828 000C                  		move.w	$C(a0),d4
0001C37E 0644 0050                  		addi.w	#$50,d4
0001C382 88FC 0018                  		divu.w	#$18,d4
0001C386 C8FC 0080                  		mulu.w	#$80,d4
0001C38A D3C4                       		adda.l	d4,a1
0001C38C 7800                       		moveq	#0,d4
0001C38E 3828 0008                  		move.w	8(a0),d4
0001C392 0644 0020                  		addi.w	#$20,d4
0001C396 88FC 0018                  		divu.w	#$18,d4
0001C39A D2C4                       		adda.w	d4,a1
0001C39C 1811                       		move.b	(a1),d4
0001C39E 6600                       		bne.s	Obj09_ChkCont
0001C3A0 4A28 003A                  		tst.b	$3A(a0)
0001C3A4 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C3A8 7800                       		moveq	#0,d4
0001C3AA 4E75                       		rts	
0001C3AC                            ; ===========================================================================
0001C3AC                            
0001C3AC                            Obj09_ChkCont:
0001C3AC 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C3B0 6600                       		bne.s	Obj09_Chk1Up
0001C3B2 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C3B6 6600                       		bne.s	Obj09_GetCont
0001C3B8 14BC 0001                  		move.b	#1,(a2)
0001C3BC 2549 0004                  		move.l	a1,4(a2)
0001C3C0                            
0001C3C0                            Obj09_GetCont:
0001C3C0 4EB9 0000 A0D0             		jsr	CollectRing
0001C3C6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3CC 6500                       		bcs.s	Obj09_NoCont
0001C3CE 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C3D4 6600                       		bne.s	Obj09_NoCont
0001C3D6 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C3DA 303C 00BF                  		move.w	#$BF,d0
0001C3DE 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3E4                            
0001C3E4                            Obj09_NoCont:
0001C3E4 7800                       		moveq	#0,d4
0001C3E6 4E75                       		rts	
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            Obj09_Chk1Up:
0001C3E8 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3EC 6600                       		bne.s	Obj09_ChkEmer
0001C3EE 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3F2 6600                       		bne.s	Obj09_Get1Up
0001C3F4 14BC 0003                  		move.b	#3,(a2)
0001C3F8 2549 0004                  		move.l	a1,4(a2)
0001C3FC                            
0001C3FC                            Obj09_Get1Up:
0001C3FC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C400 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C404 303C 0088                  		move.w	#$88,d0
0001C408 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C40E 7800                       		moveq	#0,d4
0001C410 4E75                       		rts	
0001C412                            ; ===========================================================================
0001C412                            
0001C412                            Obj09_ChkEmer:
0001C412 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C416 6500                       		bcs.s	Obj09_ChkGhost
0001C418 0C04 0040                  		cmpi.b	#$40,d4
0001C41C 6200                       		bhi.s	Obj09_ChkGhost
0001C41E 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C422 6600                       		bne.s	Obj09_GetEmer
0001C424 14BC 0005                  		move.b	#5,(a2)
0001C428 2549 0004                  		move.l	a1,4(a2)
0001C42C                            
0001C42C                            Obj09_GetEmer:
0001C42C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C432 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C434 0404 003B                  		subi.b	#$3B,d4
0001C438 7000                       		moveq	#0,d0
0001C43A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C43E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C442 1584 0000                  		move.b	d4,(a2,d0.w)
0001C446 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C44A                            
0001C44A                            Obj09_NoEmer:
0001C44A 303C 0093                  		move.w	#$93,d0
0001C44E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C454 7800                       		moveq	#0,d4
0001C456 4E75                       		rts	
0001C458                            ; ===========================================================================
0001C458                            
0001C458                            Obj09_ChkGhost:
0001C458 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C45C 6600                       		bne.s	Obj09_ChkGhostTag
0001C45E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C464                            
0001C464                            Obj09_ChkGhostTag:
0001C464 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C468 6600                       		bne.s	Obj09_NoGhost
0001C46A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C470 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C472 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C478                            
0001C478                            Obj09_NoGhost:
0001C478 78FF                       		moveq	#-1,d4
0001C47A 4E75                       		rts	
0001C47C                            ; ===========================================================================
0001C47C                            
0001C47C                            Obj09_MakeGhostSolid:
0001C47C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C482 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C484 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C48A 723F                       		moveq	#$3F,d1
0001C48C                            
0001C48C                            Obj09_GhostLoop2:
0001C48C 743F                       		moveq	#$3F,d2
0001C48E                            
0001C48E                            Obj09_GhostLoop:
0001C48E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C492 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C494 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C498                            
0001C498                            Obj09_NoReplace:
0001C498 5249                       		addq.w	#1,a1
0001C49A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C49E 43E9 0040                  		lea	$40(a1),a1
0001C4A2 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C4A6                            
0001C4A6                            Obj09_GhostNotSolid:
0001C4A6 4228 003A                  		clr.b	$3A(a0)
0001C4AA 7800                       		moveq	#0,d4
0001C4AC 4E75                       		rts	
0001C4AE                            ; End of function Obj09_ChkItems
0001C4AE                            
0001C4AE                            
0001C4AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4AE                            
0001C4AE                            
0001C4AE                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C4AE 1028 0030                  		move.b	$30(a0),d0
0001C4B2 6600                       		bne.s	Obj09_ChkBumper
0001C4B4 5328 0036                  		subq.b	#1,$36(a0)
0001C4B8 6A00                       		bpl.s	loc_1BEA0
0001C4BA 117C 0000 0036             		move.b	#0,$36(a0)
0001C4C0                            
0001C4C0                            loc_1BEA0:
0001C4C0 5328 0037                  		subq.b	#1,$37(a0)
0001C4C4 6A00                       		bpl.s	locret_1BEAC
0001C4C6 117C 0000 0037             		move.b	#0,$37(a0)
0001C4CC                            
0001C4CC                            locret_1BEAC:
0001C4CC 4E75                       		rts	
0001C4CE                            ; ===========================================================================
0001C4CE                            
0001C4CE                            Obj09_ChkBumper:
0001C4CE 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C4D2 6600                       		bne.s	Obj09_GOAL
0001C4D4 2228 0032                  		move.l	$32(a0),d1
0001C4D8 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C4DE 3401                       		move.w	d1,d2
0001C4E0 0241 007F                  		andi.w	#$7F,d1
0001C4E4 C2FC 0018                  		mulu.w	#$18,d1
0001C4E8 0441 0014                  		subi.w	#$14,d1
0001C4EC EE4A                       		lsr.w	#7,d2
0001C4EE 0242 007F                  		andi.w	#$7F,d2
0001C4F2 C4FC 0018                  		mulu.w	#$18,d2
0001C4F6 0442 0044                  		subi.w	#$44,d2
0001C4FA 9268 0008                  		sub.w	8(a0),d1
0001C4FE 9468 000C                  		sub.w	$C(a0),d2
0001C502 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C508 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C50E C3FC F900                  		muls.w	#-$700,d1
0001C512 E081                       		asr.l	#8,d1
0001C514 3141 0010                  		move.w	d1,$10(a0)
0001C518 C1FC F900                  		muls.w	#-$700,d0
0001C51C E080                       		asr.l	#8,d0
0001C51E 3140 0012                  		move.w	d0,$12(a0)
0001C522 08E8 0001 0022             		bset	#1,$22(a0)
0001C528 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C52C 6600                       		bne.s	Obj09_BumpSnd
0001C52E 14BC 0002                  		move.b	#2,(a2)
0001C532 2028 0032                  		move.l	$32(a0),d0
0001C536 5380                       		subq.l	#1,d0
0001C538 2540 0004                  		move.l	d0,4(a2)
0001C53C                            
0001C53C                            Obj09_BumpSnd:
0001C53C 303C 00B4                  		move.w	#$B4,d0
0001C540 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C546                            ; ===========================================================================
0001C546                            
0001C546                            Obj09_GOAL:
0001C546 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C54A 6600                       		bne.s	Obj09_UPblock
0001C54C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C550 303C 00A8                  		move.w	#$A8,d0		; change item
0001C554 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C55A 4E75                       		rts	
0001C55C                            ; ===========================================================================
0001C55C                            
0001C55C                            Obj09_UPblock:
0001C55C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C560 6600                       		bne.s	Obj09_DOWNblock
0001C562 4A28 0036                  		tst.b	$36(a0)
0001C566 6600 0000                  		bne.w	Obj09_NoGlass
0001C56A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C570 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C576 6700                       		beq.s	Obj09_UPsnd
0001C578 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C57C 2268 0032                  		movea.l	$32(a0),a1
0001C580 5389                       		subq.l	#1,a1
0001C582 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C586                            
0001C586                            Obj09_UPsnd:
0001C586 303C 00A9                  		move.w	#$A9,d0
0001C58A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C590                            ; ===========================================================================
0001C590                            
0001C590                            Obj09_DOWNblock:
0001C590 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C594 6600                       		bne.s	Obj09_Rblock
0001C596 4A28 0036                  		tst.b	$36(a0)
0001C59A 6600 0000                  		bne.w	Obj09_NoGlass
0001C59E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C5A4 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C5AA 6600                       		bne.s	Obj09_DOWNsnd
0001C5AC E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C5B0 2268 0032                  		movea.l	$32(a0),a1
0001C5B4 5389                       		subq.l	#1,a1
0001C5B6 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C5BA                            
0001C5BA                            Obj09_DOWNsnd:
0001C5BA 303C 00A9                  		move.w	#$A9,d0
0001C5BE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5C4                            ; ===========================================================================
0001C5C4                            
0001C5C4                            Obj09_Rblock:
0001C5C4 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5C8 6600                       		bne.s	Obj09_ChkGlass
0001C5CA 4A28 0037                  		tst.b	$37(a0)
0001C5CE 6600 0000                  		bne.w	Obj09_NoGlass
0001C5D2 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C5D8 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C5DC 6600                       		bne.s	Obj09_RevStage
0001C5DE 14BC 0004                  		move.b	#4,(a2)
0001C5E2 2028 0032                  		move.l	$32(a0),d0
0001C5E6 5380                       		subq.l	#1,d0
0001C5E8 2540 0004                  		move.l	d0,4(a2)
0001C5EC                            
0001C5EC                            Obj09_RevStage:
0001C5EC 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5F0 303C 00A9                  		move.w	#$A9,d0
0001C5F4 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5FA                            ; ===========================================================================
0001C5FA                            
0001C5FA                            Obj09_ChkGlass:
0001C5FA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5FE 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C600 0C00 002E                  		cmpi.b	#$2E,d0
0001C604 6700                       		beq.s	Obj09_Glass
0001C606 0C00 002F                  		cmpi.b	#$2F,d0
0001C60A 6700                       		beq.s	Obj09_Glass
0001C60C 0C00 0030                  		cmpi.b	#$30,d0
0001C610 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C612                            
0001C612                            Obj09_Glass:
0001C612 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C616 6600                       		bne.s	Obj09_GlassSnd
0001C618 14BC 0006                  		move.b	#6,(a2)
0001C61C 2268 0032                  		movea.l	$32(a0),a1
0001C620 5389                       		subq.l	#1,a1
0001C622 2549 0004                  		move.l	a1,4(a2)
0001C626 1011                       		move.b	(a1),d0
0001C628 5200                       		addq.b	#1,d0		; change glass type when touched
0001C62A 0C00 0030                  		cmpi.b	#$30,d0
0001C62E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C630 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C632                            
0001C632                            Obj09_GlassUpdate:
0001C632 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C636                            
0001C636                            Obj09_GlassSnd:
0001C636 303C 00BA                  		move.w	#$BA,d0
0001C63A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C640                            ; ===========================================================================
0001C640                            
0001C640                            Obj09_NoGlass:
0001C640 4E75                       		rts	
0001C642                            ; End of function Obj09_ChkItems2
0001C642                            
0001C642                            ; ===========================================================================
0001C642                            ; ---------------------------------------------------------------------------
0001C642                            ; Object 10 - blank
0001C642                            ; ---------------------------------------------------------------------------
0001C642                            
0001C642                            Obj10:					; XREF: Obj_Index
0001C642 4E75                       		rts	
0001C644                            ; ---------------------------------------------------------------------------
0001C644                            ; Subroutine to	animate	level graphics
0001C644                            ; ---------------------------------------------------------------------------
0001C644                            
0001C644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C644                            
0001C644                            
0001C644                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C644 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C648 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C64A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C650 6100 0000                  		bsr.w	AniArt_GiantRing
0001C654 7000                       		moveq	#0,d0
0001C656 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C65A D040                       		add.w	d0,d0
0001C65C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C660 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C664                            ; ===========================================================================
0001C664                            
0001C664                            AniArt_Pause:
0001C664 4E75                       		rts	
0001C666                            ; End of function AniArt_Load
0001C666                            
0001C666                            ; ===========================================================================
0001C666 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C66A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C66E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C672 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C674                            ; ===========================================================================
0001C674                            ; ---------------------------------------------------------------------------
0001C674                            ; Animated pattern routine - Green Hill
0001C674                            ; ---------------------------------------------------------------------------
0001C674                            
0001C674                            AniArt_GHZ:				; XREF: AniArt_Index
0001C674 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C678 6A00                       		bpl.s	loc_1C08A
0001C67A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C680 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C686 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C68A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C68E 0240 0001                  		andi.w	#1,d0
0001C692 6700                       		beq.s	loc_1C078
0001C694 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C698                            
0001C698                            loc_1C078:
0001C698 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C6A2 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C6A6 6000 0000                  		bra.w	LoadTiles
0001C6AA                            ; ===========================================================================
0001C6AA                            
0001C6AA                            loc_1C08A:
0001C6AA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6AE 6A00                       		bpl.s	loc_1C0C0
0001C6B0 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C6B6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6BC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6C0 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6C4 0240 0001                  		andi.w	#1,d0
0001C6C8 6700                       		beq.s	loc_1C0AE
0001C6CA 43E9 0200                  		lea	$200(a1),a1
0001C6CE                            
0001C6CE                            loc_1C0AE:
0001C6CE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C6D8 323C 000F                  		move.w	#$F,d1
0001C6DC 6000 0000                  		bra.w	LoadTiles
0001C6E0                            ; ===========================================================================
0001C6E0                            
0001C6E0                            loc_1C0C0:
0001C6E0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6E4 6A00                       		bpl.s	locret_1C10C
0001C6E6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6EC 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6F0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6F4 0240 0003                  		andi.w	#3,d0
0001C6F8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6FC 0800 0000                  		btst	#0,d0
0001C700 6600                       		bne.s	loc_1C0E8
0001C702 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C708                            
0001C708                            loc_1C0E8:
0001C708 EF48                       		lsl.w	#7,d0
0001C70A 3200                       		move.w	d0,d1
0001C70C D040                       		add.w	d0,d0
0001C70E D041                       		add.w	d1,d0
0001C710 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C71A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C720 43F1 0000                  		lea	(a1,d0.w),a1
0001C724 323C 000B                  		move.w	#$B,d1
0001C728 6100 0000                  		bsr.w	LoadTiles
0001C72C                            
0001C72C                            locret_1C10C:
0001C72C 4E75                       		rts	
0001C72E                            ; ===========================================================================
0001C72E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C732                            ; ===========================================================================
0001C732                            ; ---------------------------------------------------------------------------
0001C732                            ; Animated pattern routine - Marble
0001C732                            ; ---------------------------------------------------------------------------
0001C732                            
0001C732                            AniArt_MZ:				; XREF: AniArt_Index
0001C732 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C736 6A00                       		bpl.s	loc_1C150
0001C738 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C73E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C744 7000                       		moveq	#0,d0
0001C746 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C74A 5200                       		addq.b	#1,d0
0001C74C 0C00 0003                  		cmpi.b	#3,d0
0001C750 6600                       		bne.s	loc_1C134
0001C752 7000                       		moveq	#0,d0
0001C754                            
0001C754                            loc_1C134:
0001C754 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C758 C0FC 0100                  		mulu.w	#$100,d0
0001C75C D2C0                       		adda.w	d0,a1
0001C75E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C768 323C 0007                  		move.w	#7,d1
0001C76C 6100 0000                  		bsr.w	LoadTiles
0001C770                            
0001C770                            loc_1C150:
0001C770 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C774 6A00                       		bpl.s	loc_1C1AE
0001C776 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C77C 7000                       		moveq	#0,d0
0001C77E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C782 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C788 EE58                       		ror.w	#7,d0
0001C78A D8C0                       		adda.w	d0,a4
0001C78C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C796 7600                       		moveq	#0,d3
0001C798 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C79C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C7A0 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C7A4 343C 0003                  		move.w	#3,d2
0001C7A8                            
0001C7A8                            loc_1C188:
0001C7A8 3003                       		move.w	d3,d0
0001C7AA D040                       		add.w	d0,d0
0001C7AC 0240 001E                  		andi.w	#$1E,d0
0001C7B0 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C7B6 3033 0000                  		move.w	(a3,d0.w),d0
0001C7BA 47F3 0000                  		lea	(a3,d0.w),a3
0001C7BE 224C                       		movea.l	a4,a1
0001C7C0 323C 001F                  		move.w	#$1F,d1
0001C7C4 4E93                       		jsr	(a3)
0001C7C6 5843                       		addq.w	#4,d3
0001C7C8 51CA FFDE                  		dbf	d2,loc_1C188
0001C7CC 4E75                       		rts	
0001C7CE                            ; ===========================================================================
0001C7CE                            
0001C7CE                            loc_1C1AE:
0001C7CE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7D2 6A00 0000                  		bpl.w	locret_1C1EA
0001C7D6 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7DC 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7E2 7000                       		moveq	#0,d0
0001C7E4 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7E8 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7EC 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7F2 C0FC 00C0                  		mulu.w	#$C0,d0
0001C7F6 D2C0                       		adda.w	d0,a1
0001C7F8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C802 323C 0005                  		move.w	#5,d1
0001C806 6000 0000                  		bra.w	LoadTiles
0001C80A                            ; ===========================================================================
0001C80A                            
0001C80A                            locret_1C1EA:
0001C80A 4E75                       		rts	
0001C80C                            ; ===========================================================================
0001C80C                            ; ---------------------------------------------------------------------------
0001C80C                            ; Animated pattern routine - Scrap Brain
0001C80C                            ; ---------------------------------------------------------------------------
0001C80C                            
0001C80C                            AniArt_SBZ:				; XREF: AniArt_Index
0001C80C 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C810 6700                       		beq.s	loc_1C1F8
0001C812 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C816 6000                       		bra.s	loc_1C250
0001C818                            ; ===========================================================================
0001C818                            
0001C818                            loc_1C1F8:
0001C818 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C81C 6A00                       		bpl.s	loc_1C250
0001C81E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C824 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C82A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C834 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C838 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C83C 0240 0007                  		andi.w	#7,d0
0001C840 6700                       		beq.s	loc_1C234
0001C842 5340                       		subq.w	#1,d0
0001C844 C0FC 0180                  		mulu.w	#$180,d0
0001C848 43F1 0000                  		lea	(a1,d0.w),a1
0001C84C 323C 000B                  		move.w	#$B,d1
0001C850 6000 0000                  		bra.w	LoadTiles
0001C854                            ; ===========================================================================
0001C854                            
0001C854                            loc_1C234:
0001C854 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C85A                            
0001C85A                            loc_1C23A:
0001C85A 323C 0005                  		move.w	#5,d1
0001C85E 6100 0000                  		bsr.w	LoadTiles
0001C862 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C868 323C 0005                  		move.w	#5,d1
0001C86C 6000 0000                  		bra.w	LoadTiles
0001C870                            ; ===========================================================================
0001C870                            
0001C870                            loc_1C250:
0001C870 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C874 6700                       		beq.s	loc_1C25C
0001C876 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C87A 6000                       		bra.s	locret_1C2A0
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            loc_1C25C:
0001C87C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C880 6A00                       		bpl.s	locret_1C2A0
0001C882 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C888 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C88E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C898 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C89C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8A0 0240 0007                  		andi.w	#7,d0
0001C8A4 6700                       		beq.s	loc_1C298
0001C8A6 5340                       		subq.w	#1,d0
0001C8A8 C0FC 0180                  		mulu.w	#$180,d0
0001C8AC 43F1 0000                  		lea	(a1,d0.w),a1
0001C8B0 323C 000B                  		move.w	#$B,d1
0001C8B4 6000 0000                  		bra.w	LoadTiles
0001C8B8                            ; ===========================================================================
0001C8B8                            
0001C8B8                            loc_1C298:
0001C8B8 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C8BE 609A                       		bra.s	loc_1C23A
0001C8C0                            ; ===========================================================================
0001C8C0                            
0001C8C0                            locret_1C2A0:
0001C8C0 4E75                       		rts	
0001C8C2                            ; ===========================================================================
0001C8C2                            ; ---------------------------------------------------------------------------
0001C8C2                            ; Animated pattern routine - ending sequence
0001C8C2                            ; ---------------------------------------------------------------------------
0001C8C2                            
0001C8C2                            AniArt_Ending:				; XREF: AniArt_Index
0001C8C2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8C6 6A00                       		bpl.s	loc_1C2F4
0001C8C8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8CE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8D4 45F8 9400                  		lea	($FFFF9400).w,a2
0001C8D8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8DC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8E0 0240 0001                  		andi.w	#1,d0
0001C8E4 6700                       		beq.s	loc_1C2CE
0001C8E6 43E9 0200                  		lea	$200(a1),a1
0001C8EA 45EA 0200                  		lea	$200(a2),a2
0001C8EE                            
0001C8EE                            loc_1C2CE:
0001C8EE 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8F8 323C 000F                  		move.w	#$F,d1
0001C8FC 6100 0000                  		bsr.w	LoadTiles
0001C900 224A                       		movea.l	a2,a1
0001C902 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C90C 323C 000F                  		move.w	#$F,d1
0001C910 6000 0000                  		bra.w	LoadTiles
0001C914                            ; ===========================================================================
0001C914                            
0001C914                            loc_1C2F4:
0001C914 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C918 6A00                       		bpl.s	loc_1C33C
0001C91A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C920 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C924 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C928 0240 0007                  		andi.w	#7,d0
0001C92C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C930 EF48                       		lsl.w	#7,d0
0001C932 3200                       		move.w	d0,d1
0001C934 D040                       		add.w	d0,d0
0001C936 D041                       		add.w	d1,d0
0001C938 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C942 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C948 43F1 0000                  		lea	(a1,d0.w),a1
0001C94C 323C 000B                  		move.w	#$B,d1
0001C950 6000 0000                  		bra.w	LoadTiles
0001C954                            ; ===========================================================================
0001C954 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C95C                            ; ===========================================================================
0001C95C                            
0001C95C                            loc_1C33C:
0001C95C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C960 6A00                       		bpl.s	loc_1C37A
0001C962 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C968 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C96C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C970 0240 0003                  		andi.w	#3,d0
0001C974 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C978 E148                       		lsl.w	#8,d0
0001C97A D040                       		add.w	d0,d0
0001C97C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C986 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C98A 43F1 0000                  		lea	(a1,d0.w),a1
0001C98E 323C 000F                  		move.w	#$F,d1
0001C992 6000 0000                  		bra.w	LoadTiles
0001C996                            ; ===========================================================================
0001C996 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C99A                            ; ===========================================================================
0001C99A                            
0001C99A                            loc_1C37A:
0001C99A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C99E 6A00                       		bpl.s	locret_1C3B4
0001C9A0 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C9A6 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C9AA 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C9AE 0240 0003                  		andi.w	#3,d0
0001C9B2 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C9B6 E148                       		lsl.w	#8,d0
0001C9B8 D040                       		add.w	d0,d0
0001C9BA 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9C4 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9C8 43F1 0000                  		lea	(a1,d0.w),a1
0001C9CC 323C 000F                  		move.w	#$F,d1
0001C9D0 6000 0000                  		bra.w	LoadTiles
0001C9D4                            ; ===========================================================================
0001C9D4                            
0001C9D4                            locret_1C3B4:
0001C9D4 4E75                       		rts	
0001C9D6                            ; ===========================================================================
0001C9D6                            
0001C9D6                            AniArt_none:				; XREF: AniArt_Index
0001C9D6 4E75                       		rts	
0001C9D8                            
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C9D8                            ; ---------------------------------------------------------------------------
0001C9D8                            
0001C9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9D8                            
0001C9D8                            
0001C9D8                            LoadTiles:
0001C9D8 2C99                       		move.l	(a1)+,(a6)
0001C9DA 2C99                       		move.l	(a1)+,(a6)
0001C9DC 2C99                       		move.l	(a1)+,(a6)
0001C9DE 2C99                       		move.l	(a1)+,(a6)
0001C9E0 2C99                       		move.l	(a1)+,(a6)
0001C9E2 2C99                       		move.l	(a1)+,(a6)
0001C9E4 2C99                       		move.l	(a1)+,(a6)
0001C9E6 2C99                       		move.l	(a1)+,(a6)
0001C9E8 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9EC 4E75                       		rts	
0001C9EE                            ; End of function LoadTiles
0001C9EE                            
0001C9EE                            ; ===========================================================================
0001C9EE                            ; ---------------------------------------------------------------------------
0001C9EE                            ; Animated pattern routine - more Marble Zone
0001C9EE                            ; ---------------------------------------------------------------------------
0001C9EE 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9F2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9F6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9FA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9FE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CA02 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CA06 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CA0A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CA0E                            ; ===========================================================================
0001CA0E                            
0001CA0E                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CA0E 2C91                       		move.l	(a1),(a6)
0001CA10 43E9 0010                  		lea	$10(a1),a1
0001CA14 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CA18 4E75                       		rts	
0001CA1A                            ; ===========================================================================
0001CA1A                            
0001CA1A                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CA1A 2029 0002                  		move.l	2(a1),d0
0001CA1E 1029 0001                  		move.b	1(a1),d0
0001CA22 E098                       		ror.l	#8,d0
0001CA24 2C80                       		move.l	d0,(a6)
0001CA26 43E9 0010                  		lea	$10(a1),a1
0001CA2A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA2E 4E75                       		rts	
0001CA30                            ; ===========================================================================
0001CA30                            
0001CA30                            loc_1C410:				; XREF: AniArt_MZextra
0001CA30 2CA9 0002                  		move.l	2(a1),(a6)
0001CA34 43E9 0010                  		lea	$10(a1),a1
0001CA38 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA3C 4E75                       		rts	
0001CA3E                            ; ===========================================================================
0001CA3E                            
0001CA3E                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA3E 2029 0004                  		move.l	4(a1),d0
0001CA42 1029 0003                  		move.b	3(a1),d0
0001CA46 E098                       		ror.l	#8,d0
0001CA48 2C80                       		move.l	d0,(a6)
0001CA4A 43E9 0010                  		lea	$10(a1),a1
0001CA4E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA52 4E75                       		rts	
0001CA54                            ; ===========================================================================
0001CA54                            
0001CA54                            loc_1C434:				; XREF: AniArt_MZextra
0001CA54 2CA9 0004                  		move.l	4(a1),(a6)
0001CA58 43E9 0010                  		lea	$10(a1),a1
0001CA5C 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA60 4E75                       		rts	
0001CA62                            ; ===========================================================================
0001CA62                            
0001CA62                            loc_1C442:				; XREF: AniArt_MZextra
0001CA62 2029 0006                  		move.l	6(a1),d0
0001CA66 1029 0005                  		move.b	5(a1),d0
0001CA6A E098                       		ror.l	#8,d0
0001CA6C 2C80                       		move.l	d0,(a6)
0001CA6E 43E9 0010                  		lea	$10(a1),a1
0001CA72 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA76 4E75                       		rts	
0001CA78                            ; ===========================================================================
0001CA78                            
0001CA78                            loc_1C458:				; XREF: AniArt_MZextra
0001CA78 2CA9 0006                  		move.l	6(a1),(a6)
0001CA7C 43E9 0010                  		lea	$10(a1),a1
0001CA80 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA84 4E75                       		rts	
0001CA86                            ; ===========================================================================
0001CA86                            
0001CA86                            loc_1C466:				; XREF: AniArt_MZextra
0001CA86 2029 0008                  		move.l	8(a1),d0
0001CA8A 1029 0007                  		move.b	7(a1),d0
0001CA8E E098                       		ror.l	#8,d0
0001CA90 2C80                       		move.l	d0,(a6)
0001CA92 43E9 0010                  		lea	$10(a1),a1
0001CA96 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA9A 4E75                       		rts	
0001CA9C                            ; ===========================================================================
0001CA9C                            
0001CA9C                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA9C 2CA9 0008                  		move.l	8(a1),(a6)
0001CAA0 43E9 0010                  		lea	$10(a1),a1
0001CAA4 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CAA8 4E75                       		rts	
0001CAAA                            ; ===========================================================================
0001CAAA                            
0001CAAA                            loc_1C48A:				; XREF: AniArt_MZextra
0001CAAA 2029 000A                  		move.l	$A(a1),d0
0001CAAE 1029 0009                  		move.b	9(a1),d0
0001CAB2 E098                       		ror.l	#8,d0
0001CAB4 2C80                       		move.l	d0,(a6)
0001CAB6 43E9 0010                  		lea	$10(a1),a1
0001CABA 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CABE 4E75                       		rts	
0001CAC0                            ; ===========================================================================
0001CAC0                            
0001CAC0                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CAC0 2CA9 000A                  		move.l	$A(a1),(a6)
0001CAC4 43E9 0010                  		lea	$10(a1),a1
0001CAC8 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CACC 4E75                       		rts	
0001CACE                            ; ===========================================================================
0001CACE                            
0001CACE                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CACE 2029 000C                  		move.l	$C(a1),d0
0001CAD2 1029 000B                  		move.b	$B(a1),d0
0001CAD6 E098                       		ror.l	#8,d0
0001CAD8 2C80                       		move.l	d0,(a6)
0001CADA 43E9 0010                  		lea	$10(a1),a1
0001CADE 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CAE2 4E75                       		rts	
0001CAE4                            ; ===========================================================================
0001CAE4                            
0001CAE4                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CAE4 2CA9 000C                  		move.l	$C(a1),(a6)
0001CAE8 43E9 0010                  		lea	$10(a1),a1
0001CAEC 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAF0 4E75                       		rts	
0001CAF2                            ; ===========================================================================
0001CAF2                            
0001CAF2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAF2 2029 000C                  		move.l	$C(a1),d0
0001CAF6 E198                       		rol.l	#8,d0
0001CAF8 1011                       		move.b	0(a1),d0
0001CAFA 2C80                       		move.l	d0,(a6)
0001CAFC 43E9 0010                  		lea	$10(a1),a1
0001CB00 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CB04 4E75                       		rts	
0001CB06                            ; ===========================================================================
0001CB06                            
0001CB06                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CB06 3CA9 000E                  		move.w	$E(a1),(a6)
0001CB0A 3C91                       		move.w	0(a1),(a6)
0001CB0C 43E9 0010                  		lea	$10(a1),a1
0001CB10 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CB14 4E75                       		rts	
0001CB16                            ; ===========================================================================
0001CB16                            
0001CB16                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CB16 2011                       		move.l	0(a1),d0
0001CB18 1029 000F                  		move.b	$F(a1),d0
0001CB1C E098                       		ror.l	#8,d0
0001CB1E 2C80                       		move.l	d0,(a6)
0001CB20 43E9 0010                  		lea	$10(a1),a1
0001CB24 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB28 4E75                       		rts	
0001CB2A                            
0001CB2A                            ; ---------------------------------------------------------------------------
0001CB2A                            ; Animated pattern routine - giant ring
0001CB2A                            ; ---------------------------------------------------------------------------
0001CB2A                            
0001CB2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB2A                            
0001CB2A                            
0001CB2A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB2A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB2E 6600                       		bne.s	loc_1C518
0001CB30 4E75                       		rts	
0001CB32                            ; ===========================================================================
0001CB32                            
0001CB32                            loc_1C518:
0001CB32 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB38 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB3E 7000                       		moveq	#0,d0
0001CB40 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB44 43F1 0000                  		lea	(a1,d0.w),a1
0001CB48 0640 8000                  		addi.w	#$8000,d0
0001CB4C E588                       		lsl.l	#2,d0
0001CB4E E448                       		lsr.w	#2,d0
0001CB50 0040 4000                  		ori.w	#$4000,d0
0001CB54 4840                       		swap	d0
0001CB56 2D40 0004                  		move.l	d0,4(a6)
0001CB5A 323C 000D                  		move.w	#$D,d1
0001CB5E 6000 FE78                  		bra.w	LoadTiles
0001CB62                            ; End of function AniArt_GiantRing
0001CB62                            
0001CB62                            ; ===========================================================================
0001CB62                            ; ---------------------------------------------------------------------------
0001CB62                            ; Object 21 - SCORE, TIME, RINGS
0001CB62                            ; ---------------------------------------------------------------------------
0001CB62                            
0001CB62                            Obj21:					; XREF: Obj_Index
0001CB62 7000                       		moveq	#0,d0
0001CB64 1028 0024                  		move.b	$24(a0),d0
0001CB68 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB6C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB70                            ; ===========================================================================
0001CB70 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB72 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB74                            ; ===========================================================================
0001CB74                            
0001CB74                            Obj21_Main:				; XREF: Obj21_Main
0001CB74 5428 0024                  		addq.b	#2,$24(a0)
0001CB78 317C 0090 0008             		move.w	#$90,8(a0)
0001CB7E 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB84 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB8C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB92 117C 0000 0001             		move.b	#0,1(a0)
0001CB98 117C 0000 0018             		move.b	#0,$18(a0)
0001CB9E                            
0001CB9E                            Obj21_Flash:				; XREF: Obj21_Main
0001CB9E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CBA2 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CBA4 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CBA8 4EF9 0000 DB7A             		jmp	DisplaySprite
0001CBAE                            ; ===========================================================================
0001CBAE                            
0001CBAE                            Obj21_Flash2:
0001CBAE 7000                       		moveq	#0,d0
0001CBB0 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CBB6 6600                       		bne.s	Obj21_Display
0001CBB8 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CBBA 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBC0 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBC2 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBC4                            
0001CBC4                            Obj21_Display:
0001CBC4 1140 001A                  		move.b	d0,$1A(a0)
0001CBC8 4EF9 0000 DB7A             		jmp	DisplaySprite
0001CBCE                            ; ===========================================================================
0001CBCE                            ; ---------------------------------------------------------------------------
0001CBCE                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBCE                            ; ---------------------------------------------------------------------------
0001CBCE                            Map_obj21:
0001CBCE                            	include "_maps\obj21.asm"
0001CBCE                            ; ---------------------------------------------------------------------------
0001CBCE                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBCE                            ; ---------------------------------------------------------------------------
0001CBCE 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CBD2 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CBD6 0A                         byte_1C5BC:	dc.b $A
0001CBD7 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBDC 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBE1 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBE6 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBEB 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBF0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBF5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBFA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBFF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC04 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC09 00                         		dc.b 0
0001CC0A 0A                         byte_1C5F0:	dc.b $A
0001CC0B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC10 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC15 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC1A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC1F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC24 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC29 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC2E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC33 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC38 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC3D 00                         		dc.b 0
0001CC3E 0A                         byte_1C624:	dc.b $A
0001CC3F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC44 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC49 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC4E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC53 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC58 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC5D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC62 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC67 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC6C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC71 00                         		dc.b 0
0001CC72 0A                         byte_1C658:	dc.b $A
0001CC73 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC78 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC7D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC82 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC87 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC8C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC91 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC96 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC9B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CCA0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CCA6 00                         		even
0001CCA6 00                         		even
0001CCA6                            
0001CCA6                            ; ---------------------------------------------------------------------------
0001CCA6                            ; Add points subroutine
0001CCA6                            ; ---------------------------------------------------------------------------
0001CCA6                            
0001CCA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCA6                            
0001CCA6                            
0001CCA6                            AddPoints:
0001CCA6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CCAC 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CCB0 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CCB4 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CCB6 223C 000F 423F             		move.l	#999999,d1
0001CCBC B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CCBE 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCC2 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCC4 2481                       		move.l	d1,(a2)
0001CCC6                            
0001CCC6                            loc_1C6AC:
0001CCC6 2013                       		move.l	(a3),d0
0001CCC8 B092                       		cmp.l	(a2),d0
0001CCCA 6500 0000                  		bcs.w	locret_1C6B6
0001CCCE 2480                       		move.l	d0,(a2)
0001CCD0                            
0001CCD0                            locret_1C6B6:
0001CCD0 4E75                       		rts	
0001CCD2                            ; End of function AddPoints
0001CCD2                            
0001CCD2                            ; ---------------------------------------------------------------------------
0001CCD2                            ; Subroutine to	update the HUD
0001CCD2                            ; ---------------------------------------------------------------------------
0001CCD2                            
0001CCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCD2                            
0001CCD2                            
0001CCD2                            HudUpdate:
0001CCD2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CCD6 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CCDA 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CCDE 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CCE0 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCE4 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCEA 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCEE 6100 0000                  		bsr.w	Hud_Score
0001CCF2                            
0001CCF2                            Hud_ChkRings:
0001CCF2 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCF6 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCF8 6A00                       		bpl.s	loc_1C6E4
0001CCFA 6100 0000                  		bsr.w	Hud_LoadZero
0001CCFE                            
0001CCFE                            loc_1C6E4:
0001CCFE 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CD02 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD08 7200                       		moveq	#0,d1
0001CD0A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD0E 6100 0000                  		bsr.w	Hud_Rings
0001CD12                            
0001CD12                            Hud_ChkTime:
0001CD12 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CD16 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CD18 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CD1C 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CD1E 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD22 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD28 6700                       		beq.s	TimeOver	; if yes, branch
0001CD2A 5221                       		addq.b	#1,-(a1)
0001CD2C 0C11 003C                  		cmpi.b	#60,(a1)
0001CD30 6500                       		bcs.s	Hud_ChkLives
0001CD32 12BC 0000                  		move.b	#0,(a1)
0001CD36 5221                       		addq.b	#1,-(a1)
0001CD38 0C11 003C                  		cmpi.b	#60,(a1)
0001CD3C 6500                       		bcs.s	loc_1C734
0001CD3E 12BC 0000                  		move.b	#0,(a1)
0001CD42 5221                       		addq.b	#1,-(a1)
0001CD44 0C11 0009                  		cmpi.b	#9,(a1)
0001CD48 6500                       		bcs.s	loc_1C734
0001CD4A 12BC 0009                  		move.b	#9,(a1)
0001CD4E                            
0001CD4E                            loc_1C734:
0001CD4E 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD54 7200                       		moveq	#0,d1
0001CD56 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD5A 6100 0000                  		bsr.w	Hud_Mins
0001CD5E 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD64 7200                       		moveq	#0,d1
0001CD66 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD6A 6100 0000                  		bsr.w	Hud_Secs
0001CD6E                            
0001CD6E                            Hud_ChkLives:
0001CD6E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD72 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD74 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD78 6100 0000                  		bsr.w	Hud_Lives
0001CD7C                            
0001CD7C                            Hud_ChkBonus:
0001CD7C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD80 6700                       		beq.s	Hud_End		; if not, branch
0001CD82 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD86 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD90 7200                       		moveq	#0,d1
0001CD92 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD96 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD9A 7200                       		moveq	#0,d1
0001CD9C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CDA0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDA4                            
0001CDA4                            Hud_End:
0001CDA4 4E75                       		rts	
0001CDA6                            ; ===========================================================================
0001CDA6                            
0001CDA6                            TimeOver:				; XREF: Hud_ChkTime
0001CDA6 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CDAA 41F8 D000                  		lea	($FFFFD000).w,a0
0001CDAE 2448                       		movea.l	a0,a2
0001CDB0 6100 E908                  		bsr.w	KillSonic
0001CDB4 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CDBA 4E75                       		rts	
0001CDBC                            ; ===========================================================================
0001CDBC                            
0001CDBC                            HudDebug:				; XREF: HudUpdate
0001CDBC 6100 0000                  		bsr.w	HudDb_XY
0001CDC0 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDC4 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDC6 6A00                       		bpl.s	HudDb_Rings
0001CDC8 6100 0000                  		bsr.w	Hud_LoadZero
0001CDCC                            
0001CDCC                            HudDb_Rings:
0001CDCC 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDD0 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CDD6 7200                       		moveq	#0,d1
0001CDD8 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CDDC 6100 0000                  		bsr.w	Hud_Rings
0001CDE0                            
0001CDE0                            HudDb_ObjCount:
0001CDE0 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDE6 7200                       		moveq	#0,d1
0001CDE8 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDEC 6100 0000                  		bsr.w	Hud_Secs
0001CDF0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDF4 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDF6 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDFA 6100 0000                  		bsr.w	Hud_Lives
0001CDFE                            
0001CDFE                            HudDb_ChkBonus:
0001CDFE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CE02 6700                       		beq.s	HudDb_End	; if not, branch
0001CE04 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE08 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CE12 7200                       		moveq	#0,d1
0001CE14 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE18 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE1C 7200                       		moveq	#0,d1
0001CE1E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE22 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE26                            
0001CE26                            HudDb_End:
0001CE26 4E75                       		rts	
0001CE28                            ; End of function HudUpdate
0001CE28                            
0001CE28                            ; ---------------------------------------------------------------------------
0001CE28                            ; Subroutine to	load "0" on the	HUD
0001CE28                            ; ---------------------------------------------------------------------------
0001CE28                            
0001CE28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE28                            
0001CE28                            
0001CE28                            Hud_LoadZero:				; XREF: HudUpdate
0001CE28 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE32 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE36 343C 0002                  		move.w	#2,d2
0001CE3A 6000                       		bra.s	loc_1C83E
0001CE3C                            ; End of function Hud_LoadZero
0001CE3C                            
0001CE3C                            ; ---------------------------------------------------------------------------
0001CE3C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE3C                            ; ---------------------------------------------------------------------------
0001CE3C                            
0001CE3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE3C                            
0001CE3C                            
0001CE3C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE3C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE42 6100 0000                  		bsr.w	Hud_Lives
0001CE46 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE50 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE54 343C 000E                  		move.w	#$E,d2
0001CE58                            
0001CE58                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE58 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE5C                            
0001CE5C                            loc_1C842:
0001CE5C 323C 000F                  		move.w	#$F,d1
0001CE60 101A                       		move.b	(a2)+,d0
0001CE62 6B00                       		bmi.s	loc_1C85E
0001CE64 4880                       		ext.w	d0
0001CE66 EB48                       		lsl.w	#5,d0
0001CE68 47F1 0000                  		lea	(a1,d0.w),a3
0001CE6C                            
0001CE6C                            loc_1C852:
0001CE6C 2C9B                       		move.l	(a3)+,(a6)
0001CE6E 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE72                            
0001CE72                            loc_1C858:
0001CE72 51CA FFE8                  		dbf	d2,loc_1C842
0001CE76                            
0001CE76 4E75                       		rts	
0001CE78                            ; ===========================================================================
0001CE78                            
0001CE78                            loc_1C85E:
0001CE78 2CBC 0000 0000             		move.l	#0,(a6)
0001CE7E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE82                            
0001CE82 60EE                       		bra.s	loc_1C858
0001CE84                            ; End of function Hud_Base
0001CE84                            
0001CE84                            ; ===========================================================================
0001CE84 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE90 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            ; Subroutine to	load debug mode	numbers	patterns
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            
0001CE94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE94                            
0001CE94                            
0001CE94                            HudDb_XY:				; XREF: HudDebug
0001CE94 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE9E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CEA2 4841                       		swap	d1
0001CEA4 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CEA8 6100                       		bsr.s	HudDb_XY2
0001CEAA 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CEAE 4841                       		swap	d1
0001CEB0 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CEB4                            ; End of function HudDb_XY
0001CEB4                            
0001CEB4                            
0001CEB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEB4                            
0001CEB4                            
0001CEB4                            HudDb_XY2:
0001CEB4 7C07                       		moveq	#7,d6
0001CEB6 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CEBC                            
0001CEBC                            HudDb_XYLoop:
0001CEBC E959                       		rol.w	#4,d1
0001CEBE 3401                       		move.w	d1,d2
0001CEC0 0242 000F                  		andi.w	#$F,d2
0001CEC4 0C42 000A                  		cmpi.w	#$A,d2
0001CEC8 6500                       		bcs.s	loc_1C8B2
0001CECA 5E42                       		addq.w	#7,d2
0001CECC                            
0001CECC                            loc_1C8B2:
0001CECC EB4A                       		lsl.w	#5,d2
0001CECE 47F1 2000                  		lea	(a1,d2.w),a3
0001CED2 2C9B                       		move.l	(a3)+,(a6)
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 2C9B                       		move.l	(a3)+,(a6)
0001CEDC 2C9B                       		move.l	(a3)+,(a6)
0001CEDE 2C9B                       		move.l	(a3)+,(a6)
0001CEE0 2C9B                       		move.l	(a3)+,(a6)
0001CEE2 4841                       		swap	d1
0001CEE4 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CEE8                            
0001CEE8 4E75                       		rts	
0001CEEA                            ; End of function HudDb_XY2
0001CEEA                            
0001CEEA                            ; ---------------------------------------------------------------------------
0001CEEA                            ; Subroutine to	load rings numbers patterns
0001CEEA                            ; ---------------------------------------------------------------------------
0001CEEA                            
0001CEEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEEA                            
0001CEEA                            
0001CEEA                            Hud_Rings:				; XREF: HudUpdate
0001CEEA 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CEF0 7C02                       		moveq	#2,d6
0001CEF2 6000                       		bra.s	Hud_LoadArt
0001CEF4                            ; End of function Hud_Rings
0001CEF4                            
0001CEF4                            ; ---------------------------------------------------------------------------
0001CEF4                            ; Subroutine to	load score numbers patterns
0001CEF4                            ; ---------------------------------------------------------------------------
0001CEF4                            
0001CEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEF4                            
0001CEF4                            
0001CEF4                            Hud_Score:				; XREF: HudUpdate
0001CEF4 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEFA 7C05                       		moveq	#5,d6
0001CEFC                            
0001CEFC                            Hud_LoadArt:
0001CEFC 7800                       		moveq	#0,d4
0001CEFE 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF02                            
0001CF02                            Hud_ScoreLoop:
0001CF02 7400                       		moveq	#0,d2
0001CF04 261A                       		move.l	(a2)+,d3
0001CF06                            
0001CF06                            loc_1C8EC:
0001CF06 9283                       		sub.l	d3,d1
0001CF08 6500                       		bcs.s	loc_1C8F4
0001CF0A 5242                       		addq.w	#1,d2
0001CF0C 60F8                       		bra.s	loc_1C8EC
0001CF0E                            ; ===========================================================================
0001CF0E                            
0001CF0E                            loc_1C8F4:
0001CF0E D283                       		add.l	d3,d1
0001CF10 4A42                       		tst.w	d2
0001CF12 6700                       		beq.s	loc_1C8FE
0001CF14 383C 0001                  		move.w	#1,d4
0001CF18                            
0001CF18                            loc_1C8FE:
0001CF18 4A44                       		tst.w	d4
0001CF1A 6700                       		beq.s	loc_1C92C
0001CF1C ED4A                       		lsl.w	#6,d2
0001CF1E 2D40 0004                  		move.l	d0,4(a6)
0001CF22 47F1 2000                  		lea	(a1,d2.w),a3
0001CF26 2C9B                       		move.l	(a3)+,(a6)
0001CF28 2C9B                       		move.l	(a3)+,(a6)
0001CF2A 2C9B                       		move.l	(a3)+,(a6)
0001CF2C 2C9B                       		move.l	(a3)+,(a6)
0001CF2E 2C9B                       		move.l	(a3)+,(a6)
0001CF30 2C9B                       		move.l	(a3)+,(a6)
0001CF32 2C9B                       		move.l	(a3)+,(a6)
0001CF34 2C9B                       		move.l	(a3)+,(a6)
0001CF36 2C9B                       		move.l	(a3)+,(a6)
0001CF38 2C9B                       		move.l	(a3)+,(a6)
0001CF3A 2C9B                       		move.l	(a3)+,(a6)
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E 2C9B                       		move.l	(a3)+,(a6)
0001CF40 2C9B                       		move.l	(a3)+,(a6)
0001CF42 2C9B                       		move.l	(a3)+,(a6)
0001CF44 2C9B                       		move.l	(a3)+,(a6)
0001CF46                            
0001CF46                            loc_1C92C:
0001CF46 0680 0040 0000             		addi.l	#$400000,d0
0001CF4C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF50                            
0001CF50 4E75                       		rts	
0001CF52                            ; End of function Hud_Score
0001CF52                            
0001CF52                            ; ---------------------------------------------------------------------------
0001CF52                            ; Subroutine to	load countdown numbers on the continue screen
0001CF52                            ; ---------------------------------------------------------------------------
0001CF52                            
0001CF52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF52                            
0001CF52                            
0001CF52                            ContScrCounter:				; XREF: ContinueScreen
0001CF52 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF5C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF62 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF68 7C01                       		moveq	#1,d6
0001CF6A 7800                       		moveq	#0,d4
0001CF6C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF70                            
0001CF70                            ContScr_Loop:
0001CF70 7400                       		moveq	#0,d2
0001CF72 261A                       		move.l	(a2)+,d3
0001CF74                            
0001CF74                            loc_1C95A:
0001CF74 9283                       		sub.l	d3,d1
0001CF76 6500                       		bcs.s	loc_1C962
0001CF78 5242                       		addq.w	#1,d2
0001CF7A 60F8                       		bra.s	loc_1C95A
0001CF7C                            ; ===========================================================================
0001CF7C                            
0001CF7C                            loc_1C962:
0001CF7C D283                       		add.l	d3,d1
0001CF7E ED4A                       		lsl.w	#6,d2
0001CF80 47F1 2000                  		lea	(a1,d2.w),a3
0001CF84 2C9B                       		move.l	(a3)+,(a6)
0001CF86 2C9B                       		move.l	(a3)+,(a6)
0001CF88 2C9B                       		move.l	(a3)+,(a6)
0001CF8A 2C9B                       		move.l	(a3)+,(a6)
0001CF8C 2C9B                       		move.l	(a3)+,(a6)
0001CF8E 2C9B                       		move.l	(a3)+,(a6)
0001CF90 2C9B                       		move.l	(a3)+,(a6)
0001CF92 2C9B                       		move.l	(a3)+,(a6)
0001CF94 2C9B                       		move.l	(a3)+,(a6)
0001CF96 2C9B                       		move.l	(a3)+,(a6)
0001CF98 2C9B                       		move.l	(a3)+,(a6)
0001CF9A 2C9B                       		move.l	(a3)+,(a6)
0001CF9C 2C9B                       		move.l	(a3)+,(a6)
0001CF9E 2C9B                       		move.l	(a3)+,(a6)
0001CFA0 2C9B                       		move.l	(a3)+,(a6)
0001CFA2 2C9B                       		move.l	(a3)+,(a6)
0001CFA4 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CFA8                            
0001CFA8 4E75                       		rts	
0001CFAA                            ; End of function ContScrCounter
0001CFAA                            
0001CFAA                            ; ===========================================================================
0001CFAA                            ; ---------------------------------------------------------------------------
0001CFAA                            ; HUD counter sizes
0001CFAA                            ; ---------------------------------------------------------------------------
0001CFAA 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CFAE 0000 2710                  Hud_10000:	dc.l 10000
0001CFB2 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CFB6 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CFBA 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CFBE 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFC2                            
0001CFC2                            ; ---------------------------------------------------------------------------
0001CFC2                            ; Subroutine to	load time numbers patterns
0001CFC2                            ; ---------------------------------------------------------------------------
0001CFC2                            
0001CFC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFC2                            
0001CFC2                            
0001CFC2                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFC2 45F9 0001 CFBE             		lea	(Hud_1).l,a2
0001CFC8 7C00                       		moveq	#0,d6
0001CFCA 6000                       		bra.s	loc_1C9BA
0001CFCC                            ; End of function Hud_Mins
0001CFCC                            
0001CFCC                            
0001CFCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFCC                            
0001CFCC                            
0001CFCC                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFCC 45F9 0001 CFBA             		lea	(Hud_10).l,a2
0001CFD2 7C01                       		moveq	#1,d6
0001CFD4                            
0001CFD4                            loc_1C9BA:
0001CFD4 7800                       		moveq	#0,d4
0001CFD6 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFDA                            
0001CFDA                            Hud_TimeLoop:
0001CFDA 7400                       		moveq	#0,d2
0001CFDC 261A                       		move.l	(a2)+,d3
0001CFDE                            
0001CFDE                            loc_1C9C4:
0001CFDE 9283                       		sub.l	d3,d1
0001CFE0 6500                       		bcs.s	loc_1C9CC
0001CFE2 5242                       		addq.w	#1,d2
0001CFE4 60F8                       		bra.s	loc_1C9C4
0001CFE6                            ; ===========================================================================
0001CFE6                            
0001CFE6                            loc_1C9CC:
0001CFE6 D283                       		add.l	d3,d1
0001CFE8 4A42                       		tst.w	d2
0001CFEA 6700                       		beq.s	loc_1C9D6
0001CFEC 383C 0001                  		move.w	#1,d4
0001CFF0                            
0001CFF0                            loc_1C9D6:
0001CFF0 ED4A                       		lsl.w	#6,d2
0001CFF2 2D40 0004                  		move.l	d0,4(a6)
0001CFF6 47F1 2000                  		lea	(a1,d2.w),a3
0001CFFA 2C9B                       		move.l	(a3)+,(a6)
0001CFFC 2C9B                       		move.l	(a3)+,(a6)
0001CFFE 2C9B                       		move.l	(a3)+,(a6)
0001D000 2C9B                       		move.l	(a3)+,(a6)
0001D002 2C9B                       		move.l	(a3)+,(a6)
0001D004 2C9B                       		move.l	(a3)+,(a6)
0001D006 2C9B                       		move.l	(a3)+,(a6)
0001D008 2C9B                       		move.l	(a3)+,(a6)
0001D00A 2C9B                       		move.l	(a3)+,(a6)
0001D00C 2C9B                       		move.l	(a3)+,(a6)
0001D00E 2C9B                       		move.l	(a3)+,(a6)
0001D010 2C9B                       		move.l	(a3)+,(a6)
0001D012 2C9B                       		move.l	(a3)+,(a6)
0001D014 2C9B                       		move.l	(a3)+,(a6)
0001D016 2C9B                       		move.l	(a3)+,(a6)
0001D018 2C9B                       		move.l	(a3)+,(a6)
0001D01A 0680 0040 0000             		addi.l	#$400000,d0
0001D020 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D024                            
0001D024 4E75                       		rts	
0001D026                            ; End of function Hud_Secs
0001D026                            
0001D026                            ; ---------------------------------------------------------------------------
0001D026                            ; Subroutine to	load time/ring bonus numbers patterns
0001D026                            ; ---------------------------------------------------------------------------
0001D026                            
0001D026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D026                            
0001D026                            
0001D026                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D026 45F9 0001 CFB2             		lea	(Hud_1000).l,a2
0001D02C 7C03                       		moveq	#3,d6
0001D02E 7800                       		moveq	#0,d4
0001D030 43FA 0000                  		lea	Art_Hud(pc),a1
0001D034                            
0001D034                            Hud_BonusLoop:
0001D034 7400                       		moveq	#0,d2
0001D036 261A                       		move.l	(a2)+,d3
0001D038                            
0001D038                            loc_1CA1E:
0001D038 9283                       		sub.l	d3,d1
0001D03A 6500                       		bcs.s	loc_1CA26
0001D03C 5242                       		addq.w	#1,d2
0001D03E 60F8                       		bra.s	loc_1CA1E
0001D040                            ; ===========================================================================
0001D040                            
0001D040                            loc_1CA26:
0001D040 D283                       		add.l	d3,d1
0001D042 4A42                       		tst.w	d2
0001D044 6700                       		beq.s	loc_1CA30
0001D046 383C 0001                  		move.w	#1,d4
0001D04A                            
0001D04A                            loc_1CA30:
0001D04A 4A44                       		tst.w	d4
0001D04C 6700                       		beq.s	Hud_ClrBonus
0001D04E ED4A                       		lsl.w	#6,d2
0001D050 47F1 2000                  		lea	(a1,d2.w),a3
0001D054 2C9B                       		move.l	(a3)+,(a6)
0001D056 2C9B                       		move.l	(a3)+,(a6)
0001D058 2C9B                       		move.l	(a3)+,(a6)
0001D05A 2C9B                       		move.l	(a3)+,(a6)
0001D05C 2C9B                       		move.l	(a3)+,(a6)
0001D05E 2C9B                       		move.l	(a3)+,(a6)
0001D060 2C9B                       		move.l	(a3)+,(a6)
0001D062 2C9B                       		move.l	(a3)+,(a6)
0001D064 2C9B                       		move.l	(a3)+,(a6)
0001D066 2C9B                       		move.l	(a3)+,(a6)
0001D068 2C9B                       		move.l	(a3)+,(a6)
0001D06A 2C9B                       		move.l	(a3)+,(a6)
0001D06C 2C9B                       		move.l	(a3)+,(a6)
0001D06E 2C9B                       		move.l	(a3)+,(a6)
0001D070 2C9B                       		move.l	(a3)+,(a6)
0001D072 2C9B                       		move.l	(a3)+,(a6)
0001D074                            
0001D074                            loc_1CA5A:
0001D074 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D078                            
0001D078 4E75                       		rts	
0001D07A                            ; ===========================================================================
0001D07A                            
0001D07A                            Hud_ClrBonus:
0001D07A 7A0F                       		moveq	#$F,d5
0001D07C                            
0001D07C                            Hud_ClrBonusLoop:
0001D07C 2CBC 0000 0000             		move.l	#0,(a6)
0001D082 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D086                            
0001D086 60EC                       		bra.s	loc_1CA5A
0001D088                            ; End of function Hud_TimeRingBonus
0001D088                            
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            
0001D088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D088                            
0001D088                            
0001D088                            Hud_Lives:				; XREF: Hud_ChkLives
0001D088 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D08E 7200                       		moveq	#0,d1
0001D090 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D094 45F9 0001 CFBA             		lea	(Hud_10).l,a2
0001D09A 7C01                       		moveq	#1,d6
0001D09C 7800                       		moveq	#0,d4
0001D09E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D0A2                            
0001D0A2                            Hud_LivesLoop:
0001D0A2 2D40 0004                  		move.l	d0,4(a6)
0001D0A6 7400                       		moveq	#0,d2
0001D0A8 261A                       		move.l	(a2)+,d3
0001D0AA                            
0001D0AA                            loc_1CA90:
0001D0AA 9283                       		sub.l	d3,d1
0001D0AC 6500                       		bcs.s	loc_1CA98
0001D0AE 5242                       		addq.w	#1,d2
0001D0B0 60F8                       		bra.s	loc_1CA90
0001D0B2                            ; ===========================================================================
0001D0B2                            
0001D0B2                            loc_1CA98:
0001D0B2 D283                       		add.l	d3,d1
0001D0B4 4A42                       		tst.w	d2
0001D0B6 6700                       		beq.s	loc_1CAA2
0001D0B8 383C 0001                  		move.w	#1,d4
0001D0BC                            
0001D0BC                            loc_1CAA2:
0001D0BC 4A44                       		tst.w	d4
0001D0BE 6700                       		beq.s	Hud_ClrLives
0001D0C0                            
0001D0C0                            loc_1CAA6:
0001D0C0 EB4A                       		lsl.w	#5,d2
0001D0C2 47F1 2000                  		lea	(a1,d2.w),a3
0001D0C6 2C9B                       		move.l	(a3)+,(a6)
0001D0C8 2C9B                       		move.l	(a3)+,(a6)
0001D0CA 2C9B                       		move.l	(a3)+,(a6)
0001D0CC 2C9B                       		move.l	(a3)+,(a6)
0001D0CE 2C9B                       		move.l	(a3)+,(a6)
0001D0D0 2C9B                       		move.l	(a3)+,(a6)
0001D0D2 2C9B                       		move.l	(a3)+,(a6)
0001D0D4 2C9B                       		move.l	(a3)+,(a6)
0001D0D6                            
0001D0D6                            loc_1CABC:
0001D0D6 0680 0040 0000             		addi.l	#$400000,d0
0001D0DC 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D0E0                            
0001D0E0 4E75                       		rts	
0001D0E2                            ; ===========================================================================
0001D0E2                            
0001D0E2                            Hud_ClrLives:
0001D0E2 4A46                       		tst.w	d6
0001D0E4 67DA                       		beq.s	loc_1CAA6
0001D0E6 7A07                       		moveq	#7,d5
0001D0E8                            
0001D0E8                            Hud_ClrLivesLoop:
0001D0E8 2CBC 0000 0000             		move.l	#0,(a6)
0001D0EE 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0F2 60E2                       		bra.s	loc_1CABC
0001D0F4                            ; End of function Hud_Lives
0001D0F4                            
0001D0F4                            ; ===========================================================================
0001D0F4                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3F4                            		even
0001D3F4                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D534                            		even
0001D534                            ; ===========================================================================
0001D534                            ; ---------------------------------------------------------------------------
0001D534                            ; When debug mode is currently in use
0001D534                            ; ---------------------------------------------------------------------------
0001D534                            
0001D534                            DebugMode:				; XREF: Obj01; Obj09
0001D534 7000                       		moveq	#0,d0
0001D536 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D53A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D53E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D542                            ; ===========================================================================
0001D542 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D544 0000                       		dc.w Debug_Skip-Debug_Index
0001D546                            ; ===========================================================================
0001D546                            
0001D546                            Debug_Main:				; XREF: Debug_Index
0001D546 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D54A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D550 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D556 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D55C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D562 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D568 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D56E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D574 117C 0000 001A             		move.b	#0,$1A(a0)
0001D57A 117C 0000 001C             		move.b	#0,$1C(a0)
0001D580 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D586 6600                       		bne.s	Debug_Zone	; if not, branch
0001D588 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D58E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D594 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D596 6000                       		bra.s	Debug_UseList
0001D598                            ; ===========================================================================
0001D598                            
0001D598                            Debug_Zone:
0001D598 7000                       		moveq	#0,d0
0001D59A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D59E                            
0001D59E                            Debug_UseList:
0001D59E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5A4 D040                       		add.w	d0,d0
0001D5A6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5AA 3C1A                       		move.w	(a2)+,d6
0001D5AC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D5B0 6200                       		bhi.s	loc_1CF9E
0001D5B2 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D5B8                            
0001D5B8                            loc_1CF9E:
0001D5B8 6100 0000                  		bsr.w	Debug_ShowItem
0001D5BC 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5C2 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5C8                            
0001D5C8                            Debug_Skip:				; XREF: Debug_Index
0001D5C8 7006                       		moveq	#6,d0
0001D5CA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5D0 6700                       		beq.s	loc_1CFBE
0001D5D2 7000                       		moveq	#0,d0
0001D5D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5D8                            
0001D5D8                            loc_1CFBE:
0001D5D8 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5DE D040                       		add.w	d0,d0
0001D5E0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5E4 3C1A                       		move.w	(a2)+,d6
0001D5E6 6100 0000                  		bsr.w	Debug_Control
0001D5EA 4EF9 0000 DB7A             		jmp	DisplaySprite
0001D5F0                            
0001D5F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5F0                            
0001D5F0                            
0001D5F0                            Debug_Control:
0001D5F0 7800                       		moveq	#0,d4
0001D5F2 323C 0001                  		move.w	#1,d1
0001D5F6 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5FA 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5FE 6600                       		bne.s	loc_1D018	; if yes, branch
0001D600 1038 F604                  		move.b	($FFFFF604).w,d0
0001D604 0240 000F                  		andi.w	#$F,d0
0001D608 6600                       		bne.s	loc_1D000
0001D60A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D610 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D616 6000 0000                  		bra.w	Debug_BackItem
0001D61A                            ; ===========================================================================
0001D61A                            
0001D61A                            loc_1D000:
0001D61A 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D61E 6600                       		bne.s	loc_1D01C
0001D620 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D626 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D62A 6600                       		bne.s	loc_1D018
0001D62C 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D632                            
0001D632                            loc_1D018:
0001D632 1838 F604                  		move.b	($FFFFF604).w,d4
0001D636                            
0001D636                            loc_1D01C:
0001D636 7200                       		moveq	#0,d1
0001D638 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D63C 5241                       		addq.w	#1,d1
0001D63E 4841                       		swap	d1
0001D640 E881                       		asr.l	#4,d1
0001D642 2428 000C                  		move.l	$C(a0),d2
0001D646 2628 0008                  		move.l	8(a0),d3
0001D64A 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D64E 6700                       		beq.s	loc_1D03C	; if not, branch
0001D650 9481                       		sub.l	d1,d2
0001D652 6400                       		bcc.s	loc_1D03C
0001D654 7400                       		moveq	#0,d2
0001D656                            
0001D656                            loc_1D03C:
0001D656 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D65A 6700                       		beq.s	loc_1D052	; if not, branch
0001D65C D481                       		add.l	d1,d2
0001D65E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D664 6500                       		bcs.s	loc_1D052
0001D666 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D66C                            
0001D66C                            loc_1D052:
0001D66C 0804 0002                  		btst	#2,d4
0001D670 6700                       		beq.s	loc_1D05E
0001D672 9681                       		sub.l	d1,d3
0001D674 6400                       		bcc.s	loc_1D05E
0001D676 7600                       		moveq	#0,d3
0001D678                            
0001D678                            loc_1D05E:
0001D678 0804 0003                  		btst	#3,d4
0001D67C 6700                       		beq.s	loc_1D066
0001D67E D681                       		add.l	d1,d3
0001D680                            
0001D680                            loc_1D066:
0001D680 2142 000C                  		move.l	d2,$C(a0)
0001D684 2143 0008                  		move.l	d3,8(a0)
0001D688                            
0001D688                            Debug_BackItem:
0001D688 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D68E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D690 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D696 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D698 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D69C 6400                       		bcc.s	Debug_NoLoop
0001D69E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D6A2 6000                       		bra.s	Debug_NoLoop
0001D6A4                            ; ===========================================================================
0001D6A4                            
0001D6A4                            Debug_NextItem:
0001D6A4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D6AA 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D6AC 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D6B0 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6B4 6200                       		bhi.s	Debug_NoLoop
0001D6B6 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D6BC                            
0001D6BC                            Debug_NoLoop:
0001D6BC 6000 0000                  		bra.w	Debug_ShowItem
0001D6C0                            ; ===========================================================================
0001D6C0                            
0001D6C0                            Debug_MakeItem:
0001D6C0 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6C6 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6C8 4EB9 0000 E000             		jsr	SingleObjLoad
0001D6CE 6600                       		bne.s	Debug_Exit
0001D6D0 3368 0008 0008             		move.w	8(a0),8(a1)
0001D6D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6DC 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D6E0 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6E6 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6EC 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6F2 7000                       		moveq	#0,d0
0001D6F4 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6F8 E748                       		lsl.w	#3,d0
0001D6FA 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D700 4E75                       		rts	
0001D702                            ; ===========================================================================
0001D702                            
0001D702                            Debug_Exit:
0001D702 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D708 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D70A 7000                       		moveq	#0,d0
0001D70C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D710 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D718 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D71E 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D722 3140 000A                  		move.w	d0,$A(a0)
0001D726 3140 000E                  		move.w	d0,$E(a0)
0001D72A 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D730 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D736 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D73C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D73E 4278 F780                  		clr.w	($FFFFF780).w
0001D742 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D748 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D750 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D756 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D75C 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D762 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D768                            
0001D768                            Debug_DoNothing:
0001D768 4E75                       		rts	
0001D76A                            ; End of function Debug_Control
0001D76A                            
0001D76A                            
0001D76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D76A                            
0001D76A                            
0001D76A                            Debug_ShowItem:				; XREF: Debug_Main
0001D76A 7000                       		moveq	#0,d0
0001D76C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D770 E748                       		lsl.w	#3,d0
0001D772 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D778 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D77E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D784 4E75                       		rts	
0001D786                            ; End of function Debug_ShowItem
0001D786                            
0001D786                            ; ===========================================================================
0001D786                            ; ---------------------------------------------------------------------------
0001D786                            ; Debug	list pointers
0001D786                            ; ---------------------------------------------------------------------------
0001D786                            DebugList:
0001D786                            	include "_inc\Debug list pointers.asm"
0001D786                            ; ---------------------------------------------------------------------------
0001D786                            ; Debug	list pointers
0001D786                            ; ---------------------------------------------------------------------------
0001D786 0000                       	dc.w Debug_GHZ-DebugList
0001D788 0000                       	dc.w Debug_LZ-DebugList
0001D78A 0000                       	dc.w Debug_MZ-DebugList
0001D78C 0000                       	dc.w Debug_SLZ-DebugList
0001D78E 0000                       	dc.w Debug_SYZ-DebugList
0001D790 0000                       	dc.w Debug_SBZ-DebugList
0001D792 0000                       	dc.w Debug_Ending-DebugList
0001D792 0000                       	dc.w Debug_Ending-DebugList
0001D794                            
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            ; Debug	list - Green Hill
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            Debug_GHZ:
0001D794                            	include "_inc\Debug list - GHZ.asm"
0001D794                            ; ---------------------------------------------------------------------------
0001D794                            ; Debug	list - Green Hill
0001D794                            ; ---------------------------------------------------------------------------
0001D794 0010                       	dc.w $10			; number of items in list
0001D796 2500 A3E8                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D79A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D79E 2600 A9EE                  	dc.l Map_obj26+$26000000
0001D7A2 0000 0680                  	dc.b 0,	0, 6, $80
0001D7A6 1F00 9BE0                  	dc.l Map_obj1F+$1F000000
0001D7AA 0000 0400                  	dc.b 0,	0, 4, 0
0001D7AE 2200 9E9C                  	dc.l Map_obj22+$22000000
0001D7B2 0000 0444                  	dc.b 0,	0, 4, $44
0001D7B6 2B00 B062                  	dc.l Map_obj2B+$2B000000
0001D7BA 0000 047B                  	dc.b 0,	0, 4, $7B
0001D7BE 3600 D562                  	dc.l Map_obj36+$36000000
0001D7C2 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7C6 1800 858E                  	dc.l Map_obj18+$18000000
0001D7CA 0000 4000                  	dc.b 0,	0, $40,	0
0001D7CE 3B00 D688                  	dc.l Map_obj3B+$3B000000
0001D7D2 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D7D6 4000 FD14                  	dc.l Map_obj40+$40000000
0001D7DA 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D7DE 4100 E28E                  	dc.l Map_obj41+$41000000
0001D7E2 0000 0523                  	dc.b 0,	0, 5, $23
0001D7E6 4200 E4B4                  	dc.l Map_obj42+$42000000
0001D7EA 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7EE 4400 E7C2                  	dc.l Map_obj44+$44000000
0001D7F2 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7F6 1900 85FC                  	dc.l Map_obj48+$19000000
0001D7FA 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7FE 7901 76FC                  	dc.l Map_obj79+$79000000
0001D802 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D806 4B00 A428                  	dc.l Map_obj4B+$4B000000
0001D80A 0000 2400                  	dc.b 0,	0, $24,	0
0001D80E 7D01 784C                  	dc.l Map_obj7D+$7D000000
0001D812 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D816                            	even
0001D816                            	even
0001D816                            
0001D816                            ; ---------------------------------------------------------------------------
0001D816                            ; Debug	list - Labyrinth
0001D816                            ; ---------------------------------------------------------------------------
0001D816                            Debug_LZ:
0001D816                            	include "_inc\Debug list - LZ.asm"
0001D816                            ; ---------------------------------------------------------------------------
0001D816                            ; Debug	list - Labyrinth
0001D816                            ; ---------------------------------------------------------------------------
0001D816 0019                       	dc.w $19
0001D818 2500 A3E8                  	dc.l Map_obj25+$25000000
0001D81C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D820 2600 A9EE                  	dc.l Map_obj26+$26000000
0001D824 0000 0680                  	dc.b 0,	0, 6, $80
0001D828 4100 E28E                  	dc.l Map_obj41+$41000000
0001D82C 0000 0523                  	dc.b 0,	0, 5, $23
0001D830 2C00 B108                  	dc.l Map_obj2C+$2C000000
0001D834 0800 2486                  	dc.b 8,	0, $24,	$86
0001D838 2D00 B2FC                  	dc.l Map_obj2D+$2D000000
0001D83C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D840 1601 24E8                  	dc.l Map_obj16+$16000000
0001D844 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D848 1601 24E8                  	dc.l Map_obj16+$16000000
0001D84C 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D850 3300 C7AE                  	dc.l Map_obj33+$33000000
0001D854 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D858 3200 C36E                  	dc.l Map_obj32+$32000000
0001D85C 0000 0513                  	dc.b 0,	0, 5, $13
0001D860 3600 D562                  	dc.l Map_obj36+$36000000
0001D864 0000 051B                  	dc.b 0,	0, 5, $1B
0001D868 5201 060A                  	dc.l Map_obj52a+$52000000
0001D86C 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D870 6101 2710                  	dc.l Map_obj61+$61000000
0001D874 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D878 6101 2710                  	dc.l Map_obj61+$61000000
0001D87C 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D880 6101 2710                  	dc.l Map_obj61+$61000000
0001D884 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D888 6201 2864                  	dc.l Map_obj62+$62000000
0001D88C 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D890 6101 2710                  	dc.l Map_obj61+$61000000
0001D894 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D898 6101 2710                  	dc.l Map_obj61+$61000000
0001D89C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D8A0 6301 2BC6                  	dc.l Map_obj63+$63000000
0001D8A4 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D8A8 6001 2432                  	dc.l Map_obj60+$60000000
0001D8AC 0000 0467                  	dc.b 0,	0, 4, $67
0001D8B0 6401 2F0C                  	dc.l Map_obj64+$64000000
0001D8B4 8413 8348                  	dc.b $84, $13, $83, $48
0001D8B8 6501 3094                  	dc.l Map_obj65+$65000000
0001D8BC 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8C0 6501 3094                  	dc.l Map_obj65+$65000000
0001D8C4 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8C8 0B01 1882                  	dc.l Map_obj0B+$B000000
0001D8CC 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8D0 0C01 1952                  	dc.l Map_obj0C+$C000000
0001D8D4 0200 4328                  	dc.b 2,	0, $43,	$28
0001D8D8 7901 76FC                  	dc.l Map_obj79+$79000000
0001D8DC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8E0                            	even
0001D8E0                            	even
0001D8E0                            
0001D8E0                            ; ---------------------------------------------------------------------------
0001D8E0                            ; Debug	list - Marble
0001D8E0                            ; ---------------------------------------------------------------------------
0001D8E0                            Debug_MZ:
0001D8E0                            	include "_inc\Debug list - MZ.asm"
0001D8E0                            ; ---------------------------------------------------------------------------
0001D8E0                            ; Debug	list - Marble
0001D8E0                            ; ---------------------------------------------------------------------------
0001D8E0 0012                       	dc.w $12
0001D8E2 2500 A3E8                  	dc.l Map_obj25+$25000000
0001D8E6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8EA 2600 A9EE                  	dc.l Map_obj26+$26000000
0001D8EE 0000 0680                  	dc.b 0,	0, 6, $80
0001D8F2 2200 9E9C                  	dc.l Map_obj22+$22000000
0001D8F6 0000 0444                  	dc.b 0,	0, 4, $44
0001D8FA 3600 D562                  	dc.l Map_obj36+$36000000
0001D8FE 0000 051B                  	dc.b 0,	0, 5, $1B
0001D902 4100 E28E                  	dc.l Map_obj41+$41000000
0001D906 0000 0523                  	dc.b 0,	0, 5, $23
0001D90A 1300 B83E                  	dc.l Map_obj14+$13000000
0001D90E 0000 0345                  	dc.b 0,	0, 3, $45
0001D912 4600 EE74                  	dc.l Map_obj46+$46000000
0001D916 0000 4000                  	dc.b 0,	0, $40,	0
0001D91A 4C00 F7C0                  	dc.l Map_obj4C+$4C000000
0001D91E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D922 4E00 FAA4                  	dc.l Map_obj4E+$4E000000
0001D926 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D92A 3300 C7AE                  	dc.l Map_obj33+$33000000
0001D92E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D932 5000 FEA2                  	dc.l Map_obj50+$50000000
0001D936 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D93A 5101 033E                  	dc.l Map_obj51+$51000000
0001D93E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D942 5201 05B4                  	dc.l Map_obj52+$52000000
0001D946 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D94A 5300 8B94                  	dc.l Map_obj53+$53000000
0001D94E 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D952 5400 F786                  	dc.l Map_obj54+$54000000
0001D956 0000 8680                  	dc.b 0,	0, $86,	$80
0001D95A 5501 07A8                  	dc.l Map_obj55+$55000000
0001D95E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D962 7801 7376                  	dc.l Map_obj78+$78000000
0001D966 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D96A 7901 76FC                  	dc.l Map_obj79+$79000000
0001D96E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D972                            	even
0001D972                            	even
0001D972                            
0001D972                            ; ---------------------------------------------------------------------------
0001D972                            ; Debug	list - Star Light
0001D972                            ; ---------------------------------------------------------------------------
0001D972                            Debug_SLZ:
0001D972                            	include "_inc\Debug list - SLZ.asm"
0001D972                            ; ---------------------------------------------------------------------------
0001D972                            ; Debug	list - Star Light
0001D972                            ; ---------------------------------------------------------------------------
0001D972 000F                       	dc.w $F
0001D974 2500 A3E8                  	dc.l Map_obj25+$25000000
0001D978 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D97C 2600 A9EE                  	dc.l Map_obj26+$26000000
0001D980 0000 0680                  	dc.b 0,	0, 6, $80
0001D984 5901 12AA                  	dc.l Map_obj59+$59000000
0001D988 0000 4000                  	dc.b 0,	0, $40,	0
0001D98C 5300 8B94                  	dc.l Map_obj53+$53000000
0001D990 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D994 1800 85EC                  	dc.l Map_obj18b+$18000000
0001D998 0000 4000                  	dc.b 0,	0, $40,	0
0001D99C 5A01 13E4                  	dc.l Map_obj5A+$5A000000
0001D9A0 0000 4000                  	dc.b 0,	0, $40,	0
0001D9A4 5B01 159C                  	dc.l Map_obj5B+$5B000000
0001D9A8 0000 4000                  	dc.b 0,	0, $40,	0
0001D9AC 5D01 1B6C                  	dc.l Map_obj5D+$5D000000
0001D9B0 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D9B4 5E01 1EFE                  	dc.l Map_obj5E+$5E000000
0001D9B8 0000 0374                  	dc.b 0,	0, 3, $74
0001D9BC 4100 E28E                  	dc.l Map_obj41+$41000000
0001D9C0 0000 0523                  	dc.b 0,	0, 5, $23
0001D9C4 1300 B83E                  	dc.l Map_obj14+$13000000
0001D9C8 0000 0480                  	dc.b 0,	0, 4, $80
0001D9CC 1C00 8CA4                  	dc.l Map_obj1C+$1C000000
0001D9D0 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D9D4 5F01 217C                  	dc.l Map_obj5F+$5F000000
0001D9D8 0000 0400                  	dc.b 0,	0, 4, 0
0001D9DC 6001 2432                  	dc.l Map_obj60+$60000000
0001D9E0 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9E4 7901 76FC                  	dc.l Map_obj79+$79000000
0001D9E8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9EC                            	even
0001D9EC                            	even
0001D9EC                            
0001D9EC                            ; ---------------------------------------------------------------------------
0001D9EC                            ; Debug	list - Spring Yard
0001D9EC                            ; ---------------------------------------------------------------------------
0001D9EC                            Debug_SYZ:
0001D9EC                            	include "_inc\Debug list - SYZ.asm"
0001D9EC                            ; ---------------------------------------------------------------------------
0001D9EC                            ; Debug	list - Spring Yard
0001D9EC                            ; ---------------------------------------------------------------------------
0001D9EC 000F                       	dc.w $F
0001D9EE 2500 A3E8                  	dc.l Map_obj25+$25000000
0001D9F2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9F6 2600 A9EE                  	dc.l Map_obj26+$26000000
0001D9FA 0000 0680                  	dc.b 0,	0, 6, $80
0001D9FE 3600 D562                  	dc.l Map_obj36+$36000000
0001DA02 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA06 4100 E28E                  	dc.l Map_obj41+$41000000
0001DA0A 0000 0523                  	dc.b 0,	0, 5, $23
0001DA0E 4300 E714                  	dc.l Map_obj43+$43000000
0001DA12 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA16 1200 EEF2                  	dc.l Map_obj12+$12000000
0001DA1A 0000 0000                  	dc.b 0,	0, 0, 0
0001DA1E 4700 F06E                  	dc.l Map_obj47+$47000000
0001DA22 0000 0380                  	dc.b 0,	0, 3, $80
0001DA26 1F00 9BE0                  	dc.l Map_obj1F+$1F000000
0001DA2A 0000 0400                  	dc.b 0,	0, 4, 0
0001DA2E 2200 9E9C                  	dc.l Map_obj22+$22000000
0001DA32 0000 0444                  	dc.b 0,	0, 4, $44
0001DA36 5000 FEA2                  	dc.l Map_obj50+$50000000
0001DA3A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA3E 1800 85DA                  	dc.l Map_obj18a+$18000000
0001DA42 0000 4000                  	dc.b 0,	0, $40,	0
0001DA46 5601 0C6A                  	dc.l Map_obj56+$56000000
0001DA4A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA4E 3200 C36E                  	dc.l Map_obj32+$32000000
0001DA52 0000 0513                  	dc.b 0,	0, 5, $13
0001DA56 7801 7376                  	dc.l Map_obj78+$78000000
0001DA5A 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA5E 7901 76FC                  	dc.l Map_obj79+$79000000
0001DA62 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA66                            	even
0001DA66                            	even
0001DA66                            
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            ; Debug	list - Scrap Brain
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            Debug_SBZ:
0001DA66                            	include "_inc\Debug list - SBZ.asm"
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66                            ; Debug	list - Scrap Brain
0001DA66                            ; ---------------------------------------------------------------------------
0001DA66 001D                       	dc.w $1D
0001DA68 2500 A3E8                  	dc.l Map_obj25+$25000000
0001DA6C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA70 2600 A9EE                  	dc.l Map_obj26+$26000000
0001DA74 0000 0680                  	dc.b 0,	0, 6, $80
0001DA78 5F01 217C                  	dc.l Map_obj5F+$5F000000
0001DA7C 0000 0400                  	dc.b 0,	0, 4, 0
0001DA80 6001 2432                  	dc.l Map_obj60+$60000000
0001DA84 0000 0429                  	dc.b 0,	0, 4, $29
0001DA88 7801 7376                  	dc.l Map_obj78+$78000000
0001DA8C 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA90 1501 1006                  	dc.l Map_obj15b+$15000000
0001DA94 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA98 6701 5C8A                  	dc.l Map_obj67+$67000000
0001DA9C E000 C344                  	dc.b $E0, 0, $C3, $44
0001DAA0 5201 05B4                  	dc.l Map_obj52+$52000000
0001DAA4 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DAA8 3200 C36E                  	dc.l Map_obj32+$32000000
0001DAAC 0000 0513                  	dc.b 0,	0, 5, $13
0001DAB0 6901 5EE4                  	dc.l Map_obj69+$69000000
0001DAB4 0300 4492                  	dc.b 3,	0, $44,	$92
0001DAB8 6901 5F3E                  	dc.l Map_obj69a+$69000000
0001DABC 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DAC0 6A01 619C                  	dc.l Map_obj6A+$6A000000
0001DAC4 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAC8 5300 8B94                  	dc.l Map_obj53+$53000000
0001DACC 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DAD0 5201 05B4                  	dc.l Map_obj52+$52000000
0001DAD4 3903 4460                  	dc.b $39, 3, $44, $60
0001DAD8 6B01 656C                  	dc.l Map_obj6B+$6B000000
0001DADC 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DAE0 2A00 8E3A                  	dc.l Map_obj2A+$2A000000
0001DAE4 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DAE8 6B01 656C                  	dc.l Map_obj6B+$6B000000
0001DAEC 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAF0 6A01 619C                  	dc.l Map_obj6A+$6A000000
0001DAF4 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DAF8 6B01 656C                  	dc.l Map_obj6B+$6B000000
0001DAFC 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DB00 6A01 619C                  	dc.l Map_obj6A+$6A000000
0001DB04 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DB08 6B01 656C                  	dc.l Map_obj6B+$6B000000
0001DB0C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DB10 6C01 672E                  	dc.l Map_obj6C+$6C000000
0001DB14 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DB18 6D00 EB64                  	dc.l Map_obj6D+$6D000000
0001DB1C 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB20 6D00 EB64                  	dc.l Map_obj6D+$6D000000
0001DB24 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB28 6E01 67E4                  	dc.l Map_obj6E+$6E000000
0001DB2C 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB30 7001 6C3A                  	dc.l Map_obj70+$70000000
0001DB34 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB38 7101 1A12                  	dc.l Map_obj71+$71000000
0001DB3C 1100 8680                  	dc.b $11, 0, $86, $80
0001DB40 1E00 92F8                  	dc.l Map_obj1E+$1E000000
0001DB44 0400 2302                  	dc.b 4,	0, $23,	2
0001DB48 7901 76FC                  	dc.l Map_obj79+$79000000
0001DB4C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB50                            	even
0001DB50                            	even
0001DB50                            
0001DB50                            ; ---------------------------------------------------------------------------
0001DB50                            ; Debug	list - ending sequence / special stage
0001DB50                            ; ---------------------------------------------------------------------------
0001DB50                            Debug_Ending:
0001DB50                            	include "_inc\Debug list - Ending and SS.asm"
0001DB50                            ; ---------------------------------------------------------------------------
0001DB50                            ; Debug	list - ending sequence / special stage
0001DB50                            ; ---------------------------------------------------------------------------
0001DB50 000D                       	dc.w $D
0001DB52 2500 A3E8                  	dc.l Map_obj25+$25000000
0001DB56 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB5A 4700 F06E                  	dc.l Map_obj47+$47000000
0001DB5E 0000 0380                  	dc.b 0,	0, 3, $80
0001DB62 2800 9912                  	dc.l Map_obj28a+$28000000
0001DB66 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB6A 2800 9912                  	dc.l Map_obj28a+$28000000
0001DB6E 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB72 2800 9912                  	dc.l Map_obj28a+$28000000
0001DB76 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB7A 2800 98FA                  	dc.l Map_obj28+$28000000
0001DB7E 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB82 2800 98FA                  	dc.l Map_obj28+$28000000
0001DB86 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB8A 2800 98FA                  	dc.l Map_obj28+$28000000
0001DB8E 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB92 2800 98FA                  	dc.l Map_obj28+$28000000
0001DB96 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB9A 2800 9912                  	dc.l Map_obj28a+$28000000
0001DB9E 1100 0585                  	dc.b $11, 0, 5,	$85
0001DBA2 2800 992A                  	dc.l Map_obj28b+$28000000
0001DBA6 1200 0593                  	dc.b $12, 0, 5,	$93
0001DBAA 2800 9912                  	dc.l Map_obj28a+$28000000
0001DBAE 1300 0565                  	dc.b $13, 0, 5,	$65
0001DBB2 2800 992A                  	dc.l Map_obj28b+$28000000
0001DBB6 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DBBA                            	even
0001DBBA                            	even
0001DBBA                            
0001DBBA                            ; ---------------------------------------------------------------------------
0001DBBA                            ; Main level load blocks
0001DBBA                            ; ---------------------------------------------------------------------------
0001DBBA                            MainLoadBlocks:
0001DBBA                            	include "_inc\Main level load blocks.asm"
0001DBBA                            ; ---------------------------------------------------------------------------
0001DBBA                            ; Main level load blocks
0001DBBA                            ;
0001DBBA                            ; ===FORMAT===
0001DBBA                            ; level	patterns + (1st	PLC num	* 10^6)
0001DBBA                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DBBA                            ; 256x256 mappings
0001DBBA                            ; blank, music (unused), pal index (unused), pal index
0001DBBA                            ; ---------------------------------------------------------------------------
0001DBBA 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DBBE 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBC2 0000 0000                  	dc.l Blk256_GHZ
0001DBC6 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBCA 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBCE 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DBD2 0000 0000                  	dc.l Blk256_LZ
0001DBD6 0082 0505                  	dc.b 0,	$82, 5,	5
0001DBDA 0000 0000                  	dc.l Nem_MZ+$8000000
0001DBDE 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBE2 0000 0000                  	dc.l Blk256_MZ
0001DBE6 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBEA 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBEE 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBF2 0000 0000                  	dc.l Blk256_SLZ
0001DBF6 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBFA 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBFE 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DC02 0000 0000                  	dc.l Blk256_SYZ
0001DC06 0085 0808                  	dc.b 0,	$85, 8,	8
0001DC0A 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DC0E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DC12 0000 0000                  	dc.l Blk256_SBZ
0001DC16 0086 0909                  	dc.b 0,	$86, 9,	9
0001DC1A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DC1E 0000 0000                  	dc.l Blk16_GHZ
0001DC22 0000 0000                  	dc.l Blk256_GHZ
0001DC26 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC2A                            	even
0001DC2A                            	even
0001DC2A                            
0001DC2A                            ; ---------------------------------------------------------------------------
0001DC2A                            ; Pattern load cues
0001DC2A                            ; ---------------------------------------------------------------------------
0001DC2A                            ArtLoadCues:
0001DC2A                            	include "_inc\Pattern load cues.asm"
0001DC2A                            ; ---------------------------------------------------------------------------
0001DC2A                            ; Pattern load cues - index
0001DC2A                            ; ---------------------------------------------------------------------------
0001DC2A 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC2E 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC32 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC36 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC3A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC3E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC42 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC46 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC4A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC4E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC52 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC56 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC5A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC5E 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC62 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC66 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC6A                            ; ---------------------------------------------------------------------------
0001DC6A                            ; Pattern load cues - standard block 1
0001DC6A                            ; ---------------------------------------------------------------------------
0001DC6A 0004                       PLC_Main:	dc.w 4
0001DC6C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC70 F400                       		dc.w $F400
0001DC72 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC76 D940                       		dc.w $D940
0001DC78 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC7C FA80                       		dc.w $FA80
0001DC7E 0000 0000                  		dc.l Nem_Ring		; rings
0001DC82 F640                       		dc.w $F640
0001DC84 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC88 F2E0                       		dc.w $F2E0
0001DC8A                            ; ---------------------------------------------------------------------------
0001DC8A                            ; Pattern load cues - standard block 2
0001DC8A                            ; ---------------------------------------------------------------------------
0001DC8A 0002                       PLC_Main2:	dc.w 2
0001DC8C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC90 D000                       		dc.w $D000
0001DC92 0000 0000                  		dc.l Nem_Shield		; shield
0001DC96 A820                       		dc.w $A820
0001DC98 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC9C AB80                       		dc.w $AB80
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            ; Pattern load cues - explosion
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E 0000                       PLC_Explode:	dc.w 0
0001DCA0 0000 0000                  		dc.l Nem_Explode	; explosion
0001DCA4 B400                       		dc.w $B400
0001DCA6                            ; ---------------------------------------------------------------------------
0001DCA6                            ; Pattern load cues - game/time	over
0001DCA6                            ; ---------------------------------------------------------------------------
0001DCA6 0000                       PLC_GameOver:	dc.w 0
0001DCA8 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DCAC ABC0                       		dc.w $ABC0
0001DCAE                            ; ---------------------------------------------------------------------------
0001DCAE                            ; Pattern load cues - Green Hill
0001DCAE                            ; ---------------------------------------------------------------------------
0001DCAE 000B                       PLC_GHZ:	dc.w $B
0001DCB0 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DCB4 0000                       		dc.w 0
0001DCB6 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DCBA 39A0                       		dc.w $39A0
0001DCBC 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCC0 6B00                       		dc.w $6B00
0001DCC2 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCC6 7A00                       		dc.w $7A00
0001DCC8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCCC 8000                       		dc.w $8000
0001DCCE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCD2 8880                       		dc.w $8880
0001DCD4 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DCD8 8F60                       		dc.w $8F60
0001DCDA 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DCDE 9360                       		dc.w $9360
0001DCE0 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCE4 9E00                       		dc.w $9E00
0001DCE6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCEA A360                       		dc.w $A360
0001DCEC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCF0 A460                       		dc.w $A460
0001DCF2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCF6 A660                       		dc.w $A660
0001DCF8 0005                       PLC_GHZ2:	dc.w 5
0001DCFA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCFE 7000                       		dc.w $7000
0001DD00 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DD04 71C0                       		dc.w $71C0
0001DD06 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DD0A 7300                       		dc.w $7300
0001DD0C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DD10 7540                       		dc.w $7540
0001DD12 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DD16 A1E0                       		dc.w $A1E0
0001DD18 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DD1C 6980                       		dc.w $6980
0001DD1E                            ; ---------------------------------------------------------------------------
0001DD1E                            ; Pattern load cues - Labyrinth
0001DD1E                            ; ---------------------------------------------------------------------------
0001DD1E 000B                       PLC_LZ:		dc.w $B
0001DD20 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD24 0000                       		dc.w 0
0001DD26 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD2A 3C00                       		dc.w $3C00
0001DD2C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD30 3E00                       		dc.w $3E00
0001DD32 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD36 4B20                       		dc.w $4B20
0001DD38 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD3C 6000                       		dc.w $6000
0001DD3E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD42 6200                       		dc.w $6200
0001DD44 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD48 6500                       		dc.w $6500
0001DD4A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD4E 6900                       		dc.w $6900
0001DD50 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD54 7780                       		dc.w $7780
0001DD56 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD5A 7880                       		dc.w $7880
0001DD5C 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD60 7980                       		dc.w $7980
0001DD62 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD66 94C0                       		dc.w $94C0
0001DD68 000C                       PLC_LZ2:	dc.w $C
0001DD6A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD6E 7BC0                       		dc.w $7BC0
0001DD70 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD74 7CC0                       		dc.w $7CC0
0001DD76 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD7A 7EC0                       		dc.w $7EC0
0001DD7C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD80 5D20                       		dc.w $5D20
0001DD82 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD86 8800                       		dc.w $8800
0001DD88 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD8C 89E0                       		dc.w $89E0
0001DD8E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD92 8CE0                       		dc.w $8CE0
0001DD94 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD98 90C0                       		dc.w $90C0
0001DD9A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD9E A1E0                       		dc.w $A1E0
0001DDA0 0000 0000                  		dc.l Nem_Cork		; cork block
0001DDA4 A000                       		dc.w $A000
0001DDA6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDAA A360                       		dc.w $A360
0001DDAC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDB0 A460                       		dc.w $A460
0001DDB2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDB6 A660                       		dc.w $A660
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8                            ; Pattern load cues - Marble
0001DDB8                            ; ---------------------------------------------------------------------------
0001DDB8 0009                       PLC_MZ:		dc.w 9
0001DDBA 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DDBE 0000                       		dc.w 0
0001DDC0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDC4 6000                       		dc.w $6000
0001DDC6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDCA 68A0                       		dc.w $68A0
0001DDCC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDD0 7000                       		dc.w $7000
0001DDD2 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DDD6 71C0                       		dc.w $71C0
0001DDD8 0000 0000                  		dc.l Nem_Lava		; lava
0001DDDC 7500                       		dc.w $7500
0001DDDE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDE2 8880                       		dc.w $8880
0001DDE4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDE8 8F60                       		dc.w $8F60
0001DDEA 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDEE 9700                       		dc.w $9700
0001DDF0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDF4 9FE0                       		dc.w $9FE0
0001DDF6 0004                       PLC_MZ2:	dc.w 4
0001DDF8 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDFC A260                       		dc.w $A260
0001DDFE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE02 A360                       		dc.w $A360
0001DE04 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE08 A460                       		dc.w $A460
0001DE0A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE0E A660                       		dc.w $A660
0001DE10 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DE14 5700                       		dc.w $5700
0001DE16                            ; ---------------------------------------------------------------------------
0001DE16                            ; Pattern load cues - Star Light
0001DE16                            ; ---------------------------------------------------------------------------
0001DE16 0008                       PLC_SLZ:	dc.w 8
0001DE18 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DE1C 0000                       		dc.w 0
0001DE1E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE22 8000                       		dc.w $8000
0001DE24 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE28 8520                       		dc.w $8520
0001DE2A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE2E 9000                       		dc.w $9000
0001DE30 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE34 9C00                       		dc.w $9C00
0001DE36 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE3A A260                       		dc.w $A260
0001DE3C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE40 A360                       		dc.w $A360
0001DE42 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE46 A460                       		dc.w $A460
0001DE48 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE4C A660                       		dc.w $A660
0001DE4E 0005                       PLC_SLZ2:	dc.w 5
0001DE50 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE54 6E80                       		dc.w $6E80
0001DE56 0000 0000                  		dc.l Nem_Fan		; fan
0001DE5A 7400                       		dc.w $7400
0001DE5C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE60 7980                       		dc.w $7980
0001DE62 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE66 7B80                       		dc.w $7B80
0001DE68 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE6C 9B00                       		dc.w $9B00
0001DE6E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE72 9E00                       		dc.w $9E00
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74                            ; Pattern load cues - Spring Yard
0001DE74                            ; ---------------------------------------------------------------------------
0001DE74 0004                       PLC_SYZ:	dc.w 4
0001DE76 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE7A 0000                       		dc.w 0
0001DE7C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE80 8000                       		dc.w $8000
0001DE82 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE86 8880                       		dc.w $8880
0001DE88 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE8C 8F60                       		dc.w $8F60
0001DE8E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE92 9700                       		dc.w $9700
0001DE94 0007                       PLC_SYZ2:	dc.w 7
0001DE96 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE9A 7000                       		dc.w $7000
0001DE9C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEA0 72C0                       		dc.w $72C0
0001DEA2 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DEA6 7740                       		dc.w $7740
0001DEA8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEAC 9FE0                       		dc.w $9FE0
0001DEAE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEB2 A1E0                       		dc.w $A1E0
0001DEB4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEB8 A360                       		dc.w $A360
0001DEBA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEBE A460                       		dc.w $A460
0001DEC0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEC4 A660                       		dc.w $A660
0001DEC6                            ; ---------------------------------------------------------------------------
0001DEC6                            ; Pattern load cues - Scrap Brain
0001DEC6                            ; ---------------------------------------------------------------------------
0001DEC6 000B                       PLC_SBZ:	dc.w $B
0001DEC8 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DECC 0000                       		dc.w 0
0001DECE 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DED2 5800                       		dc.w $5800
0001DED4 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DED8 5D00                       		dc.w $5D00
0001DEDA 0000 0000                  		dc.l Nem_Girder		; girder
0001DEDE 5E00                       		dc.w $5E00
0001DEE0 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DEE4 6040                       		dc.w $6040
0001DEE6 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DEEA 6880                       		dc.w $6880
0001DEEC 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DEF0 6900                       		dc.w $6900
0001DEF2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEF6 7220                       		dc.w $7220
0001DEF8 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEFC 76A0                       		dc.w $76A0
0001DEFE 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DF02 7B20                       		dc.w $7B20
0001DF04 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF08 7EA0                       		dc.w $7EA0
0001DF0A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DF0E 9860                       		dc.w $9860
0001DF10 000C                       PLC_SBZ2:	dc.w $C
0001DF12 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DF16 5600                       		dc.w $5600
0001DF18 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF1C 8000                       		dc.w $8000
0001DF1E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF22 8520                       		dc.w $8520
0001DF24 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF28 8C00                       		dc.w $8C00
0001DF2A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF2E 8DE0                       		dc.w $8DE0
0001DF30 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF34 8FC0                       		dc.w $8FC0
0001DF36 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF3A 9240                       		dc.w $9240
0001DF3C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF40 7F20                       		dc.w $7F20
0001DF42 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF46 9BE0                       		dc.w $9BE0
0001DF48 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF4C A1E0                       		dc.w $A1E0
0001DF4E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF52 A360                       		dc.w $A360
0001DF54 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF58 A460                       		dc.w $A460
0001DF5A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF5E A660                       		dc.w $A660
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60                            ; Pattern load cues - title card
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60 0000                       PLC_TitleCard:	dc.w 0
0001DF62 0000 0000                  		dc.l Nem_TitleCard
0001DF66 B000                       		dc.w $B000
0001DF68                            ; ---------------------------------------------------------------------------
0001DF68                            ; Pattern load cues - act 3 boss
0001DF68                            ; ---------------------------------------------------------------------------
0001DF68 0005                       PLC_Boss:	dc.w 5
0001DF6A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF6E 8000                       		dc.w $8000
0001DF70 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF74 8D80                       		dc.w $8D80
0001DF76 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF7A 93A0                       		dc.w $93A0
0001DF7C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF80 A300                       		dc.w $A300
0001DF82 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF86 A300                       		dc.w $A300
0001DF88 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF8C A540                       		dc.w $A540
0001DF8E                            ; ---------------------------------------------------------------------------
0001DF8E                            ; Pattern load cues - act 1/2 signpost
0001DF8E                            ; ---------------------------------------------------------------------------
0001DF8E 0002                       PLC_Signpost:	dc.w 2
0001DF90 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF94 D000                       		dc.w $D000
0001DF96 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF9A 96C0                       		dc.w $96C0
0001DF9C 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DFA0 8C40                       		dc.w $8C40
0001DFA2                            ; ---------------------------------------------------------------------------
0001DFA2                            ; Pattern load cues - beta special stage warp effect
0001DFA2                            ; ---------------------------------------------------------------------------
0001DFA2 0000                       PLC_Warp:	dc.w 0
0001DFA4 0000 0000                  		dc.l Nem_Warp
0001DFA8 A820                       		dc.w $A820
0001DFAA                            ; ---------------------------------------------------------------------------
0001DFAA                            ; Pattern load cues - special stage
0001DFAA                            ; ---------------------------------------------------------------------------
0001DFAA 0010                       PLC_SpeStage:	dc.w $10
0001DFAC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DFB0 0000                       		dc.w 0
0001DFB2 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DFB6 0A20                       		dc.w $A20
0001DFB8 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DFBC 2840                       		dc.w $2840
0001DFBE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFC2 4760                       		dc.w $4760
0001DFC4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFC8 4A20                       		dc.w $4A20
0001DFCA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFCE 4C60                       		dc.w $4C60
0001DFD0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DFD4 5E00                       		dc.w $5E00
0001DFD6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DFDA 6E00                       		dc.w $6E00
0001DFDC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DFE0 7E00                       		dc.w $7E00
0001DFE2 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFE6 8E00                       		dc.w $8E00
0001DFE8 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFEC 9E00                       		dc.w $9E00
0001DFEE 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFF2 AE00                       		dc.w $AE00
0001DFF4 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFF8 BE00                       		dc.w $BE00
0001DFFA 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFFE EE00                       		dc.w $EE00
0001E000 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E004 F2E0                       		dc.w $F2E0
0001E006 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E00A F400                       		dc.w $F400
0001E00C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E010 F520                       		dc.w $F520
0001E012 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E016 F2E0                       		dc.w $F2E0
0001E018 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E01C F400                       		dc.w $F400
0001E01E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E022 F520                       		dc.w $F520
0001E024                            ; ---------------------------------------------------------------------------
0001E024                            ; Pattern load cues - GHZ animals
0001E024                            ; ---------------------------------------------------------------------------
0001E024 0001                       PLC_GHZAnimals:	dc.w 1
0001E026 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E02A B000                       		dc.w $B000
0001E02C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E030 B240                       		dc.w $B240
0001E032                            ; ---------------------------------------------------------------------------
0001E032                            ; Pattern load cues - LZ animals
0001E032                            ; ---------------------------------------------------------------------------
0001E032 0001                       PLC_LZAnimals:	dc.w 1
0001E034 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E038 B000                       		dc.w $B000
0001E03A 0000 0000                  		dc.l Nem_Seal		; seal
0001E03E B240                       		dc.w $B240
0001E040                            ; ---------------------------------------------------------------------------
0001E040                            ; Pattern load cues - MZ animals
0001E040                            ; ---------------------------------------------------------------------------
0001E040 0001                       PLC_MZAnimals:	dc.w 1
0001E042 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E046 B000                       		dc.w $B000
0001E048 0000 0000                  		dc.l Nem_Seal		; seal
0001E04C B240                       		dc.w $B240
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E                            ; Pattern load cues - SLZ animals
0001E04E                            ; ---------------------------------------------------------------------------
0001E04E 0001                       PLC_SLZAnimals:	dc.w 1
0001E050 0000 0000                  		dc.l Nem_Pig		; pig
0001E054 B000                       		dc.w $B000
0001E056 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E05A B240                       		dc.w $B240
0001E05C                            ; ---------------------------------------------------------------------------
0001E05C                            ; Pattern load cues - SYZ animals
0001E05C                            ; ---------------------------------------------------------------------------
0001E05C 0001                       PLC_SYZAnimals:	dc.w 1
0001E05E 0000 0000                  		dc.l Nem_Pig		; pig
0001E062 B000                       		dc.w $B000
0001E064 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E068 B240                       		dc.w $B240
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            ; Pattern load cues - SBZ animals
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A 0001                       PLC_SBZAnimals:	dc.w 1
0001E06C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E070 B000                       		dc.w $B000
0001E072 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E076 B240                       		dc.w $B240
0001E078                            ; ---------------------------------------------------------------------------
0001E078                            ; Pattern load cues - special stage results screen
0001E078                            ; ---------------------------------------------------------------------------
0001E078 0001                       PLC_SpeStResult:dc.w 1
0001E07A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E07E A820                       		dc.w $A820
0001E080 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E084 AA20                       		dc.w $AA20
0001E086                            ; ---------------------------------------------------------------------------
0001E086                            ; Pattern load cues - ending sequence
0001E086                            ; ---------------------------------------------------------------------------
0001E086 000E                       PLC_Ending:	dc.w $E
0001E088 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E08C 0000                       		dc.w 0
0001E08E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E092 39A0                       		dc.w $39A0
0001E094 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E098 6B00                       		dc.w $6B00
0001E09A 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E09E 7400                       		dc.w $7400
0001E0A0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0A4 78A0                       		dc.w $78A0
0001E0A6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E0AA 7C20                       		dc.w $7C20
0001E0AC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E0B0 A480                       		dc.w $A480
0001E0B2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E0B6 AA60                       		dc.w $AA60
0001E0B8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0BC ACA0                       		dc.w $ACA0
0001E0BE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0C2 AE60                       		dc.w $AE60
0001E0C4 0000 0000                  		dc.l Nem_Seal		; seal
0001E0C8 B0A0                       		dc.w $B0A0
0001E0CA 0000 0000                  		dc.l Nem_Pig		; pig
0001E0CE B260                       		dc.w $B260
0001E0D0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E0D4 B4A0                       		dc.w $B4A0
0001E0D6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E0DA B660                       		dc.w $B660
0001E0DC 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E0E0 B8A0                       		dc.w $B8A0
0001E0E2                            ; ---------------------------------------------------------------------------
0001E0E2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0E2                            ; ---------------------------------------------------------------------------
0001E0E2 0002                       PLC_TryAgain:	dc.w 2
0001E0E4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0E8 78A0                       		dc.w $78A0
0001E0EA 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0EE 7C20                       		dc.w $7C20
0001E0F0 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0F4 B400                       		dc.w $B400
0001E0F6                            ; ---------------------------------------------------------------------------
0001E0F6                            ; Pattern load cues - Eggman on SBZ 2
0001E0F6                            ; ---------------------------------------------------------------------------
0001E0F6 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0F8 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0FC A300                       		dc.w $A300
0001E0FE 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E102 8000                       		dc.w $8000
0001E104 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E108 9400                       		dc.w $9400
0001E10A                            ; ---------------------------------------------------------------------------
0001E10A                            ; Pattern load cues - final boss
0001E10A                            ; ---------------------------------------------------------------------------
0001E10A 0004                       PLC_FZBoss:	dc.w 4
0001E10C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E110 7400                       		dc.w $7400
0001E112 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E116 6000                       		dc.w $6000
0001E118 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E11C 8000                       		dc.w $8000
0001E11E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E122 8E00                       		dc.w $8E00
0001E124 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E128 A540                       		dc.w $A540
0001E12A                            		even
0001E12A                            		even
0001E12A                            
0001E12A                            		incbin	misc\padding.bin
0001E218                            		even
0001E218                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E67A                            		even
0001E67A                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E772                            		even
0001E772                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E886                            		even
0001E886                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F892                            		even
0001F892                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023998                            		even
00023998                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000239CC                            		even
000239CC                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023A8A                            		even
00023A8A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023F32                            		even
00023F32                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00023F90                            		even
00023F90                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024B96                            		even
00024B96                            ; ---------------------------------------------------------------------------
00024B96                            ; Sprite mappings - Sonic
00024B96                            ; ---------------------------------------------------------------------------
00024B96                            Map_Sonic:
00024B96                            	include "_maps\Sonic.asm"
00024B96                            Map_d54c:
00024B96 0000                       Map_d54c_0: 	dc.w Map_d54c_B8-Map_d54c
00024B98 0000                       Map_d54c_2: 	dc.w Map_d54c_B9-Map_d54c
00024B9A 0000                       Map_d54c_4: 	dc.w Map_d54c_C4-Map_d54c
00024B9C 0000                       Map_d54c_6: 	dc.w Map_d54c_D4-Map_d54c
00024B9E 0000                       Map_d54c_8: 	dc.w Map_d54c_E4-Map_d54c
00024BA0 0000                       Map_d54c_A: 	dc.w Map_d54c_F4-Map_d54c
00024BA2 0000                       Map_d54c_C: 	dc.w Map_d54c_104-Map_d54c
00024BA4 0000                       Map_d54c_E: 	dc.w Map_d54c_119-Map_d54c
00024BA6 0000                       Map_d54c_10: 	dc.w Map_d54c_124-Map_d54c
00024BA8 0000                       Map_d54c_12: 	dc.w Map_d54c_12F-Map_d54c
00024BAA 0000                       Map_d54c_14: 	dc.w Map_d54c_144-Map_d54c
00024BAC 0000                       Map_d54c_16: 	dc.w Map_d54c_14F-Map_d54c
00024BAE 0000                       Map_d54c_18: 	dc.w Map_d54c_15F-Map_d54c
00024BB0 0000                       Map_d54c_1A: 	dc.w Map_d54c_179-Map_d54c
00024BB2 0000                       Map_d54c_1C: 	dc.w Map_d54c_198-Map_d54c
00024BB4 0000                       Map_d54c_1E: 	dc.w Map_d54c_1AD-Map_d54c
00024BB6 0000                       Map_d54c_20: 	dc.w Map_d54c_1C7-Map_d54c
00024BB8 0000                       Map_d54c_22: 	dc.w Map_d54c_1DC-Map_d54c
00024BBA 0000                       Map_d54c_24: 	dc.w Map_d54c_1F6-Map_d54c
00024BBC 0000                       Map_d54c_26: 	dc.w Map_d54c_20B-Map_d54c
00024BBE 0000                       Map_d54c_28: 	dc.w Map_d54c_216-Map_d54c
00024BC0 0000                       Map_d54c_2A: 	dc.w Map_d54c_221-Map_d54c
00024BC2 0000                       Map_d54c_2C: 	dc.w Map_d54c_236-Map_d54c
00024BC4 0000                       Map_d54c_2E: 	dc.w Map_d54c_241-Map_d54c
00024BC6 0000                       Map_d54c_30: 	dc.w Map_d54c_251-Map_d54c
00024BC8 0000                       Map_d54c_32: 	dc.w Map_d54c_270-Map_d54c
00024BCA 0000                       Map_d54c_34: 	dc.w Map_d54c_28F-Map_d54c
00024BCC 0000                       Map_d54c_36: 	dc.w Map_d54c_2A4-Map_d54c
00024BCE 0000                       Map_d54c_38: 	dc.w Map_d54c_2BE-Map_d54c
00024BD0 0000                       Map_d54c_3A: 	dc.w Map_d54c_2D3-Map_d54c
00024BD2 0000                       Map_d54c_3C: 	dc.w Map_d54c_2ED-Map_d54c
00024BD4 0000                       Map_d54c_3E: 	dc.w Map_d54c_2F8-Map_d54c
00024BD6 0000                       Map_d54c_40: 	dc.w Map_d54c_303-Map_d54c
00024BD8 0000                       Map_d54c_42: 	dc.w Map_d54c_30E-Map_d54c
00024BDA 0000                       Map_d54c_44: 	dc.w Map_d54c_319-Map_d54c
00024BDC 0000                       Map_d54c_46: 	dc.w Map_d54c_32E-Map_d54c
00024BDE 0000                       Map_d54c_48: 	dc.w Map_d54c_33E-Map_d54c
00024BE0 0000                       Map_d54c_4A: 	dc.w Map_d54c_353-Map_d54c
00024BE2 0000                       Map_d54c_4C: 	dc.w Map_d54c_363-Map_d54c
00024BE4 0000                       Map_d54c_4E: 	dc.w Map_d54c_36E-Map_d54c
00024BE6 0000                       Map_d54c_50: 	dc.w Map_d54c_379-Map_d54c
00024BE8 0000                       Map_d54c_52: 	dc.w Map_d54c_384-Map_d54c
00024BEA 0000                       Map_d54c_54: 	dc.w Map_d54c_38F-Map_d54c
00024BEC 0000                       Map_d54c_56: 	dc.w Map_d54c_3A4-Map_d54c
00024BEE 0000                       Map_d54c_58: 	dc.w Map_d54c_3AF-Map_d54c
00024BF0 0000                       Map_d54c_5A: 	dc.w Map_d54c_3C4-Map_d54c
00024BF2 0000                       Map_d54c_5C: 	dc.w Map_d54c_3CF-Map_d54c
00024BF4 0000                       Map_d54c_5E: 	dc.w Map_d54c_3D5-Map_d54c
00024BF6 0000                       Map_d54c_60: 	dc.w Map_d54c_3DB-Map_d54c
00024BF8 0000                       Map_d54c_62: 	dc.w Map_d54c_3E1-Map_d54c
00024BFA 0000                       Map_d54c_64: 	dc.w Map_d54c_3E7-Map_d54c
00024BFC 0000                       Map_d54c_66: 	dc.w Map_d54c_3ED-Map_d54c
00024BFE 0000                       Map_d54c_68: 	dc.w Map_d54c_3F8-Map_d54c
00024C00 0000                       Map_d54c_6A: 	dc.w Map_d54c_3FE-Map_d54c
00024C02 0000                       Map_d54c_6C: 	dc.w Map_d54c_409-Map_d54c
00024C04 0000                       Map_d54c_6E: 	dc.w Map_d54c_40F-Map_d54c
00024C06 0000                       Map_d54c_70: 	dc.w Map_d54c_41A-Map_d54c
00024C08 0000                       Map_d54c_72: 	dc.w Map_d54c_42F-Map_d54c
00024C0A 0000                       Map_d54c_74: 	dc.w Map_d54c_44E-Map_d54c
00024C0C 0000                       Map_d54c_76: 	dc.w Map_d54c_459-Map_d54c
00024C0E 0000                       Map_d54c_78: 	dc.w Map_d54c_464-Map_d54c
00024C10 0000                       Map_d54c_7A: 	dc.w Map_d54c_479-Map_d54c
00024C12 0000                       Map_d54c_7C: 	dc.w Map_d54c_484-Map_d54c
00024C14 0000                       Map_d54c_7E: 	dc.w Map_d54c_494-Map_d54c
00024C16 0000                       Map_d54c_80: 	dc.w Map_d54c_4A9-Map_d54c
00024C18 0000                       Map_d54c_82: 	dc.w Map_d54c_4B9-Map_d54c
00024C1A 0000                       Map_d54c_84: 	dc.w Map_d54c_4CE-Map_d54c
00024C1C 0000                       Map_d54c_86: 	dc.w Map_d54c_4E3-Map_d54c
00024C1E 0000                       Map_d54c_88: 	dc.w Map_d54c_4FD-Map_d54c
00024C20 0000                       Map_d54c_8A: 	dc.w Map_d54c_517-Map_d54c
00024C22 0000                       Map_d54c_8C: 	dc.w Map_d54c_522-Map_d54c
00024C24 0000                       Map_d54c_8E: 	dc.w Map_d54c_532-Map_d54c
00024C26 0000                       Map_d54c_90: 	dc.w Map_d54c_53D-Map_d54c
00024C28 0000                       Map_d54c_92: 	dc.w Map_d54c_54D-Map_d54c
00024C2A 0000                       Map_d54c_94: 	dc.w Map_d54c_558-Map_d54c
00024C2C 0000                       Map_d54c_96: 	dc.w Map_d54c_568-Map_d54c
00024C2E 0000                       Map_d54c_98: 	dc.w Map_d54c_578-Map_d54c
00024C30 0000                       Map_d54c_9A: 	dc.w Map_d54c_592-Map_d54c
00024C32 0000                       Map_d54c_9C: 	dc.w Map_d54c_5AC-Map_d54c
00024C34 0000                       Map_d54c_9E: 	dc.w Map_d54c_5B7-Map_d54c
00024C36 0000                       Map_d54c_A0: 	dc.w Map_d54c_5C7-Map_d54c
00024C38 0000                       Map_d54c_A2: 	dc.w Map_d54c_5CD-Map_d54c
00024C3A 0000                       Map_d54c_A4: 	dc.w Map_d54c_5D3-Map_d54c
00024C3C 0000                       Map_d54c_A6: 	dc.w Map_d54c_5D9-Map_d54c
00024C3E 0000                       Map_d54c_A8: 	dc.w Map_d54c_5EE-Map_d54c
00024C40 0000                       Map_d54c_AA: 	dc.w Map_d54c_5FE-Map_d54c
00024C42 0000                       Map_d54c_AC: 	dc.w Map_d54c_60E-Map_d54c
00024C44 0000                       Map_d54c_AE: 	dc.w Map_d54c_61E-Map_d54c
00024C46 0000                       Map_d54c_B0: 	dc.w Map_d54c_629-Map_d54c
00024C48 0000                       Map_d54c_B2: 	dc.w Map_d54c_634-Map_d54c
00024C4A 0000                       Map_d54c_B4: 	dc.w Map_d54c_644-Map_d54c
00024C4C 0000                       Map_d54c_B6: 	dc.w Map_d54c_64F-Map_d54c
00024C4E 00                         Map_d54c_B8: 	dc.b $0
00024C4F 02                         Map_d54c_B9: 	dc.b $2
00024C50 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024C55 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024C5A 03                         Map_d54c_C4: 	dc.b $3
00024C5B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C60 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C65 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C6A 03                         Map_d54c_D4: 	dc.b $3
00024C6B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C70 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C75 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C7A 03                         Map_d54c_E4: 	dc.b $3
00024C7B EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C80 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C85 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C8A 03                         Map_d54c_F4: 	dc.b $3
00024C8B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024C90 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024C95 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C9A 04                         Map_d54c_104: 	dc.b $4
00024C9B EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024CA0 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024CA5 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024CAA 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024CAF 02                         Map_d54c_119: 	dc.b $2
00024CB0 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024CB5 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024CBA 02                         Map_d54c_124: 	dc.b $2
00024CBB ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024CC0 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024CC5 04                         Map_d54c_12F: 	dc.b $4
00024CC6 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024CCB FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024CD0 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024CD5 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024CDA 02                         Map_d54c_144: 	dc.b $2
00024CDB FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024CE0 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024CE5 03                         Map_d54c_14F: 	dc.b $3
00024CE6 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024CEB FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024CF0 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024CF5 05                         Map_d54c_15F: 	dc.b $5
00024CF6 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024CFB EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024D00 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024D05 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024D0A 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024D0F 06                         Map_d54c_179: 	dc.b $6
00024D10 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D15 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D1A FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024D1F 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024D24 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024D29 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024D2E 04                         Map_d54c_198: 	dc.b $4
00024D2F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D34 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D39 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024D3E 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024D43 05                         Map_d54c_1AD: 	dc.b $5
00024D44 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024D49 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024D4E FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024D53 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024D58 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024D5D 04                         Map_d54c_1C7: 	dc.b $4
00024D5E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D63 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D68 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024D6D 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024D72 05                         Map_d54c_1DC: 	dc.b $5
00024D73 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D78 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D7D FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024D82 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024D87 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024D8C 04                         Map_d54c_1F6: 	dc.b $4
00024D8D F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024D92 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024D97 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024D9C 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024DA1 02                         Map_d54c_20B: 	dc.b $2
00024DA2 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024DA7 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024DAC 02                         Map_d54c_216: 	dc.b $2
00024DAD F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024DB2 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024DB7 04                         Map_d54c_221: 	dc.b $4
00024DB8 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024DBD EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024DC2 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024DC7 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024DCC 02                         Map_d54c_236: 	dc.b $2
00024DCD F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024DD2 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024DD7 03                         Map_d54c_241: 	dc.b $3
00024DD8 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024DDD EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024DE2 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024DE7 06                         Map_d54c_251: 	dc.b $6
00024DE8 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024DED ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024DF2 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024DF7 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024DFC 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024E01 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024E06 06                         Map_d54c_270: 	dc.b $6
00024E07 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E0C E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024E11 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024E16 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024E1B F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024E20 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024E25 04                         Map_d54c_28F: 	dc.b $4
00024E26 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E2B F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024E30 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024E35 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E3A 05                         Map_d54c_2A4: 	dc.b $5
00024E3B FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024E40 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024E45 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024E4A F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024E4F 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024E54 04                         Map_d54c_2BE: 	dc.b $4
00024E55 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E5A F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024E5F EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024E64 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024E69 05                         Map_d54c_2D3: 	dc.b $5
00024E6A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E6F EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024E74 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024E79 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E7E 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024E83 02                         Map_d54c_2ED: 	dc.b $2
00024E84 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E89 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E8E 02                         Map_d54c_2F8: 	dc.b $2
00024E8F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E94 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E99 02                         Map_d54c_303: 	dc.b $2
00024E9A EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E9F FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024EA4 02                         Map_d54c_30E: 	dc.b $2
00024EA5 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024EAA FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024EAF 04                         Map_d54c_319: 	dc.b $4
00024EB0 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EB5 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EBA FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EBF FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EC4 03                         Map_d54c_32E: 	dc.b $3
00024EC5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024ECA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024ECF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024ED4 04                         Map_d54c_33E: 	dc.b $4
00024ED5 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EDA EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EDF FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EE4 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EE9 03                         Map_d54c_353: 	dc.b $3
00024EEA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EEF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EF4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EF9 02                         Map_d54c_363: 	dc.b $2
00024EFA F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024EFF F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F04 02                         Map_d54c_36E: 	dc.b $2
00024F05 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F0A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F0F 02                         Map_d54c_379: 	dc.b $2
00024F10 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F15 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F1A 02                         Map_d54c_384: 	dc.b $2
00024F1B F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F20 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F25 04                         Map_d54c_38F: 	dc.b $4
00024F26 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F2B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F30 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F35 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F3A 02                         Map_d54c_3A4: 	dc.b $2
00024F3B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F40 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F45 04                         Map_d54c_3AF: 	dc.b $4
00024F46 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F4B F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F50 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F55 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F5A 02                         Map_d54c_3C4: 	dc.b $2
00024F5B F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F60 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F65 01                         Map_d54c_3CF: 	dc.b $1
00024F66 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F6B 01                         Map_d54c_3D5: 	dc.b $1
00024F6C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F71 01                         Map_d54c_3DB: 	dc.b $1
00024F72 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F77 01                         Map_d54c_3E1: 	dc.b $1
00024F78 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F7D 01                         Map_d54c_3E7: 	dc.b $1
00024F7E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F83 02                         Map_d54c_3ED: 	dc.b $2
00024F84 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024F89 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00024F8E 01                         Map_d54c_3F8: 	dc.b $1
00024F8F F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F94 02                         Map_d54c_3FE: 	dc.b $2
00024F95 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024F9A 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00024F9F 01                         Map_d54c_409: 	dc.b $1
00024FA0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024FA5 02                         Map_d54c_40F: 	dc.b $2
00024FA6 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FAB FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00024FB0 04                         Map_d54c_41A: 	dc.b $4
00024FB1 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FB6 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024FBB 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00024FC0 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00024FC5 06                         Map_d54c_42F: 	dc.b $6
00024FC6 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024FCB FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024FD0 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024FD5 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024FDA FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024FDF F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024FE4 02                         Map_d54c_44E: 	dc.b $2
00024FE5 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00024FEA EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00024FEF 02                         Map_d54c_459: 	dc.b $2
00024FF0 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00024FF5 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00024FFA 04                         Map_d54c_464: 	dc.b $4
00024FFB F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025000 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025005 0408 000C 03               	dc.b $4, $8, $0, $C, $3
0002500A 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002500F 02                         Map_d54c_479: 	dc.b $2
00025010 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025015 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
0002501A 03                         Map_d54c_484: 	dc.b $3
0002501B F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025020 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025025 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
0002502A 04                         Map_d54c_494: 	dc.b $4
0002502B F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025030 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025035 0408 000C 02               	dc.b $4, $8, $0, $C, $2
0002503A 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002503F 03                         Map_d54c_4A9: 	dc.b $3
00025040 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025045 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
0002504A 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002504F 04                         Map_d54c_4B9: 	dc.b $4
00025050 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025055 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002505A F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002505F F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025064 04                         Map_d54c_4CE: 	dc.b $4
00025065 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002506A 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002506F F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025074 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025079 05                         Map_d54c_4E3: 	dc.b $5
0002507A E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002507F F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025084 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025089 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002508E 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025093 05                         Map_d54c_4FD: 	dc.b $5
00025094 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025099 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002509E 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000250A3 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000250A8 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000250AD 02                         Map_d54c_517: 	dc.b $2
000250AE ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250B3 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250B8 03                         Map_d54c_522: 	dc.b $3
000250B9 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250BE 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250C3 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250C8 02                         Map_d54c_532: 	dc.b $2
000250C9 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250CE 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250D3 03                         Map_d54c_53D: 	dc.b $3
000250D4 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250D9 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250DE 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250E3 02                         Map_d54c_54D: 	dc.b $2
000250E4 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000250E9 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000250EE 03                         Map_d54c_558: 	dc.b $3
000250EF EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000250F4 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000250F9 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000250FE 03                         Map_d54c_568: 	dc.b $3
000250FF E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025104 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025109 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002510E 05                         Map_d54c_578: 	dc.b $5
0002510F E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025114 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025119 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002511E 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025123 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025128 05                         Map_d54c_592: 	dc.b $5
00025129 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002512E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025133 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025138 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002513D 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025142 02                         Map_d54c_5AC: 	dc.b $2
00025143 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025148 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
0002514D 03                         Map_d54c_5B7: 	dc.b $3
0002514E EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025153 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025158 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
0002515D 01                         Map_d54c_5C7: 	dc.b $1
0002515E F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025163 01                         Map_d54c_5CD: 	dc.b $1
00025164 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025169 01                         Map_d54c_5D3: 	dc.b $1
0002516A F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002516F 04                         Map_d54c_5D9: 	dc.b $4
00025170 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025175 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
0002517A 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002517F 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025184 03                         Map_d54c_5EE: 	dc.b $3
00025185 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
0002518A FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002518F 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025194 03                         Map_d54c_5FE: 	dc.b $3
00025195 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002519A F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002519F 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000251A4 03                         Map_d54c_60E: 	dc.b $3
000251A5 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000251AA FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000251AF 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000251B4 02                         Map_d54c_61E: 	dc.b $2
000251B5 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000251BA F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000251BF 02                         Map_d54c_629: 	dc.b $2
000251C0 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000251C5 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000251CA 03                         Map_d54c_634: 	dc.b $3
000251CB ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000251D0 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000251D5 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000251DA 02                         Map_d54c_644: 	dc.b $2
000251DB F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000251E0 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000251E5 04                         Map_d54c_64F: 	dc.b $4
000251E6 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000251EB F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000251F0 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000251F5 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000251FA                            	even
000251FA                            	even
000251FA                            
000251FA                            ; ---------------------------------------------------------------------------
000251FA                            ; Uncompressed graphics	loading	array for Sonic
000251FA                            ; ---------------------------------------------------------------------------
000251FA                            SonicDynPLC:
000251FA                            	include "_inc\Sonic dynamic pattern load cues.asm"
000251FA                            DPLC_e3d5:
000251FA 0000                       DPLC_e3d5_0: 	dc.w DPLC_e3d5_B8-DPLC_e3d5
000251FC 0000                       DPLC_e3d5_2: 	dc.w DPLC_e3d5_B9-DPLC_e3d5
000251FE 0000                       DPLC_e3d5_4: 	dc.w DPLC_e3d5_BE-DPLC_e3d5
00025200 0000                       DPLC_e3d5_6: 	dc.w DPLC_e3d5_C5-DPLC_e3d5
00025202 0000                       DPLC_e3d5_8: 	dc.w DPLC_e3d5_CC-DPLC_e3d5
00025204 0000                       DPLC_e3d5_A: 	dc.w DPLC_e3d5_D3-DPLC_e3d5
00025206 0000                       DPLC_e3d5_C: 	dc.w DPLC_e3d5_DA-DPLC_e3d5
00025208 0000                       DPLC_e3d5_E: 	dc.w DPLC_e3d5_E3-DPLC_e3d5
0002520A 0000                       DPLC_e3d5_10: 	dc.w DPLC_e3d5_E8-DPLC_e3d5
0002520C 0000                       DPLC_e3d5_12: 	dc.w DPLC_e3d5_ED-DPLC_e3d5
0002520E 0000                       DPLC_e3d5_14: 	dc.w DPLC_e3d5_F6-DPLC_e3d5
00025210 0000                       DPLC_e3d5_16: 	dc.w DPLC_e3d5_FB-DPLC_e3d5
00025212 0000                       DPLC_e3d5_18: 	dc.w DPLC_e3d5_102-DPLC_e3d5
00025214 0000                       DPLC_e3d5_1A: 	dc.w DPLC_e3d5_10D-DPLC_e3d5
00025216 0000                       DPLC_e3d5_1C: 	dc.w DPLC_e3d5_11A-DPLC_e3d5
00025218 0000                       DPLC_e3d5_1E: 	dc.w DPLC_e3d5_123-DPLC_e3d5
0002521A 0000                       DPLC_e3d5_20: 	dc.w DPLC_e3d5_12E-DPLC_e3d5
0002521C 0000                       DPLC_e3d5_22: 	dc.w DPLC_e3d5_137-DPLC_e3d5
0002521E 0000                       DPLC_e3d5_24: 	dc.w DPLC_e3d5_142-DPLC_e3d5
00025220 0000                       DPLC_e3d5_26: 	dc.w DPLC_e3d5_14B-DPLC_e3d5
00025222 0000                       DPLC_e3d5_28: 	dc.w DPLC_e3d5_150-DPLC_e3d5
00025224 0000                       DPLC_e3d5_2A: 	dc.w DPLC_e3d5_155-DPLC_e3d5
00025226 0000                       DPLC_e3d5_2C: 	dc.w DPLC_e3d5_15E-DPLC_e3d5
00025228 0000                       DPLC_e3d5_2E: 	dc.w DPLC_e3d5_163-DPLC_e3d5
0002522A 0000                       DPLC_e3d5_30: 	dc.w DPLC_e3d5_16A-DPLC_e3d5
0002522C 0000                       DPLC_e3d5_32: 	dc.w DPLC_e3d5_177-DPLC_e3d5
0002522E 0000                       DPLC_e3d5_34: 	dc.w DPLC_e3d5_184-DPLC_e3d5
00025230 0000                       DPLC_e3d5_36: 	dc.w DPLC_e3d5_18D-DPLC_e3d5
00025232 0000                       DPLC_e3d5_38: 	dc.w DPLC_e3d5_198-DPLC_e3d5
00025234 0000                       DPLC_e3d5_3A: 	dc.w DPLC_e3d5_1A1-DPLC_e3d5
00025236 0000                       DPLC_e3d5_3C: 	dc.w DPLC_e3d5_1AC-DPLC_e3d5
00025238 0000                       DPLC_e3d5_3E: 	dc.w DPLC_e3d5_1B1-DPLC_e3d5
0002523A 0000                       DPLC_e3d5_40: 	dc.w DPLC_e3d5_1B6-DPLC_e3d5
0002523C 0000                       DPLC_e3d5_42: 	dc.w DPLC_e3d5_1BB-DPLC_e3d5
0002523E 0000                       DPLC_e3d5_44: 	dc.w DPLC_e3d5_1C0-DPLC_e3d5
00025240 0000                       DPLC_e3d5_46: 	dc.w DPLC_e3d5_1C9-DPLC_e3d5
00025242 0000                       DPLC_e3d5_48: 	dc.w DPLC_e3d5_1D0-DPLC_e3d5
00025244 0000                       DPLC_e3d5_4A: 	dc.w DPLC_e3d5_1D9-DPLC_e3d5
00025246 0000                       DPLC_e3d5_4C: 	dc.w DPLC_e3d5_1E0-DPLC_e3d5
00025248 0000                       DPLC_e3d5_4E: 	dc.w DPLC_e3d5_1E5-DPLC_e3d5
0002524A 0000                       DPLC_e3d5_50: 	dc.w DPLC_e3d5_1EA-DPLC_e3d5
0002524C 0000                       DPLC_e3d5_52: 	dc.w DPLC_e3d5_1EF-DPLC_e3d5
0002524E 0000                       DPLC_e3d5_54: 	dc.w DPLC_e3d5_1F4-DPLC_e3d5
00025250 0000                       DPLC_e3d5_56: 	dc.w DPLC_e3d5_1FD-DPLC_e3d5
00025252 0000                       DPLC_e3d5_58: 	dc.w DPLC_e3d5_202-DPLC_e3d5
00025254 0000                       DPLC_e3d5_5A: 	dc.w DPLC_e3d5_20B-DPLC_e3d5
00025256 0000                       DPLC_e3d5_5C: 	dc.w DPLC_e3d5_210-DPLC_e3d5
00025258 0000                       DPLC_e3d5_5E: 	dc.w DPLC_e3d5_213-DPLC_e3d5
0002525A 0000                       DPLC_e3d5_60: 	dc.w DPLC_e3d5_216-DPLC_e3d5
0002525C 0000                       DPLC_e3d5_62: 	dc.w DPLC_e3d5_219-DPLC_e3d5
0002525E 0000                       DPLC_e3d5_64: 	dc.w DPLC_e3d5_21C-DPLC_e3d5
00025260 0000                       DPLC_e3d5_66: 	dc.w DPLC_e3d5_21F-DPLC_e3d5
00025262 0000                       DPLC_e3d5_68: 	dc.w DPLC_e3d5_224-DPLC_e3d5
00025264 0000                       DPLC_e3d5_6A: 	dc.w DPLC_e3d5_227-DPLC_e3d5
00025266 0000                       DPLC_e3d5_6C: 	dc.w DPLC_e3d5_22C-DPLC_e3d5
00025268 0000                       DPLC_e3d5_6E: 	dc.w DPLC_e3d5_22F-DPLC_e3d5
0002526A 0000                       DPLC_e3d5_70: 	dc.w DPLC_e3d5_234-DPLC_e3d5
0002526C 0000                       DPLC_e3d5_72: 	dc.w DPLC_e3d5_23D-DPLC_e3d5
0002526E 0000                       DPLC_e3d5_74: 	dc.w DPLC_e3d5_242-DPLC_e3d5
00025270 0000                       DPLC_e3d5_76: 	dc.w DPLC_e3d5_247-DPLC_e3d5
00025272 0000                       DPLC_e3d5_78: 	dc.w DPLC_e3d5_24C-DPLC_e3d5
00025274 0000                       DPLC_e3d5_7A: 	dc.w DPLC_e3d5_251-DPLC_e3d5
00025276 0000                       DPLC_e3d5_7C: 	dc.w DPLC_e3d5_254-DPLC_e3d5
00025278 0000                       DPLC_e3d5_7E: 	dc.w DPLC_e3d5_25B-DPLC_e3d5
0002527A 0000                       DPLC_e3d5_80: 	dc.w DPLC_e3d5_260-DPLC_e3d5
0002527C 0000                       DPLC_e3d5_82: 	dc.w DPLC_e3d5_267-DPLC_e3d5
0002527E 0000                       DPLC_e3d5_84: 	dc.w DPLC_e3d5_270-DPLC_e3d5
00025280 0000                       DPLC_e3d5_86: 	dc.w DPLC_e3d5_279-DPLC_e3d5
00025282 0000                       DPLC_e3d5_88: 	dc.w DPLC_e3d5_284-DPLC_e3d5
00025284 0000                       DPLC_e3d5_8A: 	dc.w DPLC_e3d5_28F-DPLC_e3d5
00025286 0000                       DPLC_e3d5_8C: 	dc.w DPLC_e3d5_294-DPLC_e3d5
00025288 0000                       DPLC_e3d5_8E: 	dc.w DPLC_e3d5_29B-DPLC_e3d5
0002528A 0000                       DPLC_e3d5_90: 	dc.w DPLC_e3d5_2A0-DPLC_e3d5
0002528C 0000                       DPLC_e3d5_92: 	dc.w DPLC_e3d5_2A7-DPLC_e3d5
0002528E 0000                       DPLC_e3d5_94: 	dc.w DPLC_e3d5_2AC-DPLC_e3d5
00025290 0000                       DPLC_e3d5_96: 	dc.w DPLC_e3d5_2B3-DPLC_e3d5
00025292 0000                       DPLC_e3d5_98: 	dc.w DPLC_e3d5_2BA-DPLC_e3d5
00025294 0000                       DPLC_e3d5_9A: 	dc.w DPLC_e3d5_2C5-DPLC_e3d5
00025296 0000                       DPLC_e3d5_9C: 	dc.w DPLC_e3d5_2D0-DPLC_e3d5
00025298 0000                       DPLC_e3d5_9E: 	dc.w DPLC_e3d5_2D5-DPLC_e3d5
0002529A 0000                       DPLC_e3d5_A0: 	dc.w DPLC_e3d5_2DC-DPLC_e3d5
0002529C 0000                       DPLC_e3d5_A2: 	dc.w DPLC_e3d5_2DF-DPLC_e3d5
0002529E 0000                       DPLC_e3d5_A4: 	dc.w DPLC_e3d5_2E2-DPLC_e3d5
000252A0 0000                       DPLC_e3d5_A6: 	dc.w DPLC_e3d5_2E5-DPLC_e3d5
000252A2 0000                       DPLC_e3d5_A8: 	dc.w DPLC_e3d5_2EA-DPLC_e3d5
000252A4 0000                       DPLC_e3d5_AA: 	dc.w DPLC_e3d5_2F1-DPLC_e3d5
000252A6 0000                       DPLC_e3d5_AC: 	dc.w DPLC_e3d5_2F8-DPLC_e3d5
000252A8 0000                       DPLC_e3d5_AE: 	dc.w DPLC_e3d5_2FF-DPLC_e3d5
000252AA 0000                       DPLC_e3d5_B0: 	dc.w DPLC_e3d5_304-DPLC_e3d5
000252AC 0000                       DPLC_e3d5_B2: 	dc.w DPLC_e3d5_309-DPLC_e3d5
000252AE 0000                       DPLC_e3d5_B4: 	dc.w DPLC_e3d5_30E-DPLC_e3d5
000252B0 0000                       DPLC_e3d5_B6: 	dc.w DPLC_e3d5_313-DPLC_e3d5
000252B2 00                         DPLC_e3d5_B8: 	dc.b $0
000252B3 02                         DPLC_e3d5_B9: 	dc.b $2
000252B4 F000                       	dc.b $F0, $0
000252B6 1010                       	dc.b $10, $10
000252B8 03                         DPLC_e3d5_BE: 	dc.b $3
000252B9 5012                       	dc.b $50, $12
000252BB 5018                       	dc.b $50, $18
000252BD 201E                       	dc.b $20, $1E
000252BF 03                         DPLC_e3d5_C5: 	dc.b $3
000252C0 5021                       	dc.b $50, $21
000252C2 5018                       	dc.b $50, $18
000252C4 201E                       	dc.b $20, $1E
000252C6 03                         DPLC_e3d5_CC: 	dc.b $3
000252C7 5021                       	dc.b $50, $21
000252C9 5018                       	dc.b $50, $18
000252CB 2027                       	dc.b $20, $27
000252CD 03                         DPLC_e3d5_D3: 	dc.b $3
000252CE 802A                       	dc.b $80, $2A
000252D0 2033                       	dc.b $20, $33
000252D2 2036                       	dc.b $20, $36
000252D4 04                         DPLC_e3d5_DA: 	dc.b $4
000252D5 7039                       	dc.b $70, $39
000252D7 5041                       	dc.b $50, $41
000252D9 5047                       	dc.b $50, $47
000252DB 104D                       	dc.b $10, $4D
000252DD 02                         DPLC_e3d5_E3: 	dc.b $2
000252DE 7039                       	dc.b $70, $39
000252E0 B04F                       	dc.b $B0, $4F
000252E2 02                         DPLC_e3d5_E8: 	dc.b $2
000252E3 505B                       	dc.b $50, $5B
000252E5 8061                       	dc.b $80, $61
000252E7 04                         DPLC_e3d5_ED: 	dc.b $4
000252E8 505B                       	dc.b $50, $5B
000252EA 506A                       	dc.b $50, $6A
000252EC 5070                       	dc.b $50, $70
000252EE 1076                       	dc.b $10, $76
000252F0 02                         DPLC_e3d5_F6: 	dc.b $2
000252F1 F4F0                       	dc.b $F4, $F0
000252F3 1500                       	dc.b $15, $0
000252F5 03                         DPLC_e3d5_FB: 	dc.b $3
000252F6 7039                       	dc.b $70, $39
000252F8 3078                       	dc.b $30, $78
000252FA 507C                       	dc.b $50, $7C
000252FC 05                         DPLC_e3d5_102: 	dc.b $5
000252FD 5082                       	dc.b $50, $82
000252FF 5088                       	dc.b $50, $88
00025301 208E                       	dc.b $20, $8E
00025303 5091                       	dc.b $50, $91
00025305 0097                       	dc.b $0, $97
00025307 06                         DPLC_e3d5_10D: 	dc.b $6
00025308 5082                       	dc.b $50, $82
0002530A 1098                       	dc.b $10, $98
0002530C 309A                       	dc.b $30, $9A
0002530E 509E                       	dc.b $50, $9E
00025310 30A4                       	dc.b $30, $A4
00025312 00A8                       	dc.b $0, $A8
00025314 04                         DPLC_e3d5_11A: 	dc.b $4
00025315 50A9                       	dc.b $50, $A9
00025317 10AF                       	dc.b $10, $AF
00025319 70B1                       	dc.b $70, $B1
0002531B 20B9                       	dc.b $20, $B9
0002531D 05                         DPLC_e3d5_123: 	dc.b $5
0002531E 50BC                       	dc.b $50, $BC
00025320 30C2                       	dc.b $30, $C2
00025322 70C6                       	dc.b $70, $C6
00025324 20CE                       	dc.b $20, $CE
00025326 10D1                       	dc.b $10, $D1
00025328 04                         DPLC_e3d5_12E: 	dc.b $4
00025329 50BC                       	dc.b $50, $BC
0002532B 10D3                       	dc.b $10, $D3
0002532D 70D5                       	dc.b $70, $D5
0002532F 20DD                       	dc.b $20, $DD
00025331 05                         DPLC_e3d5_137: 	dc.b $5
00025332 5082                       	dc.b $50, $82
00025334 1098                       	dc.b $10, $98
00025336 008E                       	dc.b $0, $8E
00025338 70E0                       	dc.b $70, $E0
0002533A 20E8                       	dc.b $20, $E8
0002533C 04                         DPLC_e3d5_142: 	dc.b $4
0002533D 70EB                       	dc.b $70, $EB
0002533F 50F3                       	dc.b $50, $F3
00025341 10F9                       	dc.b $10, $F9
00025343 50FB                       	dc.b $50, $FB
00025345 02                         DPLC_e3d5_14B: 	dc.b $2
00025346 70EB                       	dc.b $70, $EB
00025348 B101                       	dc.b $B1, $1
0002534A 02                         DPLC_e3d5_150: 	dc.b $2
0002534B 510D                       	dc.b $51, $D
0002534D 8113                       	dc.b $81, $13
0002534F 04                         DPLC_e3d5_155: 	dc.b $4
00025350 510D                       	dc.b $51, $D
00025352 511C                       	dc.b $51, $1C
00025354 1122                       	dc.b $11, $22
00025356 5124                       	dc.b $51, $24
00025358 02                         DPLC_e3d5_15E: 	dc.b $2
00025359 510D                       	dc.b $51, $D
0002535B B12A                       	dc.b $B1, $2A
0002535D 03                         DPLC_e3d5_163: 	dc.b $3
0002535E 70EB                       	dc.b $70, $EB
00025360 0101                       	dc.b $1, $1
00025362 8136                       	dc.b $81, $36
00025364 06                         DPLC_e3d5_16A: 	dc.b $6
00025365 513F                       	dc.b $51, $3F
00025367 1145                       	dc.b $11, $45
00025369 1147                       	dc.b $11, $47
0002536B 8149                       	dc.b $81, $49
0002536D 0152                       	dc.b $1, $52
0002536F 0153                       	dc.b $1, $53
00025371 06                         DPLC_e3d5_177: 	dc.b $6
00025372 513F                       	dc.b $51, $3F
00025374 2154                       	dc.b $21, $54
00025376 1157                       	dc.b $11, $57
00025378 1159                       	dc.b $11, $59
0002537A 815B                       	dc.b $81, $5B
0002537C 0152                       	dc.b $1, $52
0002537E 04                         DPLC_e3d5_184: 	dc.b $4
0002537F 5164                       	dc.b $51, $64
00025381 116A                       	dc.b $11, $6A
00025383 816C                       	dc.b $81, $6C
00025385 1175                       	dc.b $11, $75
00025387 05                         DPLC_e3d5_18D: 	dc.b $5
00025388 5177                       	dc.b $51, $77
0002538A 217D                       	dc.b $21, $7D
0002538C 1180                       	dc.b $11, $80
0002538E 7182                       	dc.b $71, $82
00025390 218A                       	dc.b $21, $8A
00025392 04                         DPLC_e3d5_198: 	dc.b $4
00025393 5177                       	dc.b $51, $77
00025395 118D                       	dc.b $11, $8D
00025397 818F                       	dc.b $81, $8F
00025399 1198                       	dc.b $11, $98
0002539B 05                         DPLC_e3d5_1A1: 	dc.b $5
0002539C 513F                       	dc.b $51, $3F
0002539E 819A                       	dc.b $81, $9A
000253A0 1159                       	dc.b $11, $59
000253A2 11A3                       	dc.b $11, $A3
000253A4 0152                       	dc.b $1, $52
000253A6 02                         DPLC_e3d5_1AC: 	dc.b $2
000253A7 51A5                       	dc.b $51, $A5
000253A9 B1AB                       	dc.b $B1, $AB
000253AB 02                         DPLC_e3d5_1B1: 	dc.b $2
000253AC 505B                       	dc.b $50, $5B
000253AE B1B7                       	dc.b $B1, $B7
000253B0 02                         DPLC_e3d5_1B6: 	dc.b $2
000253B1 51A5                       	dc.b $51, $A5
000253B3 B1C3                       	dc.b $B1, $C3
000253B5 02                         DPLC_e3d5_1BB: 	dc.b $2
000253B6 505B                       	dc.b $50, $5B
000253B8 B1CF                       	dc.b $B1, $CF
000253BA 04                         DPLC_e3d5_1C0: 	dc.b $4
000253BB 51DB                       	dc.b $51, $DB
000253BD 11E1                       	dc.b $11, $E1
000253BF B1E3                       	dc.b $B1, $E3
000253C1 01EF                       	dc.b $1, $EF
000253C3 03                         DPLC_e3d5_1C9: 	dc.b $3
000253C4 51F0                       	dc.b $51, $F0
000253C6 11F6                       	dc.b $11, $F6
000253C8 B1F8                       	dc.b $B1, $F8
000253CA 04                         DPLC_e3d5_1D0: 	dc.b $4
000253CB 51DB                       	dc.b $51, $DB
000253CD 1204                       	dc.b $12, $4
000253CF B206                       	dc.b $B2, $6
000253D1 01EF                       	dc.b $1, $EF
000253D3 03                         DPLC_e3d5_1D9: 	dc.b $3
000253D4 51F0                       	dc.b $51, $F0
000253D6 11F6                       	dc.b $11, $F6
000253D8 B212                       	dc.b $B2, $12
000253DA 02                         DPLC_e3d5_1E0: 	dc.b $2
000253DB 521E                       	dc.b $52, $1E
000253DD B224                       	dc.b $B2, $24
000253DF 02                         DPLC_e3d5_1E5: 	dc.b $2
000253E0 510D                       	dc.b $51, $D
000253E2 B230                       	dc.b $B2, $30
000253E4 02                         DPLC_e3d5_1EA: 	dc.b $2
000253E5 521E                       	dc.b $52, $1E
000253E7 B23C                       	dc.b $B2, $3C
000253E9 02                         DPLC_e3d5_1EF: 	dc.b $2
000253EA 510D                       	dc.b $51, $D
000253EC B248                       	dc.b $B2, $48
000253EE 04                         DPLC_e3d5_1F4: 	dc.b $4
000253EF 5254                       	dc.b $52, $54
000253F1 125A                       	dc.b $12, $5A
000253F3 B25C                       	dc.b $B2, $5C
000253F5 0268                       	dc.b $2, $68
000253F7 02                         DPLC_e3d5_1FD: 	dc.b $2
000253F8 7269                       	dc.b $72, $69
000253FA B271                       	dc.b $B2, $71
000253FC 04                         DPLC_e3d5_202: 	dc.b $4
000253FD 5254                       	dc.b $52, $54
000253FF 127D                       	dc.b $12, $7D
00025401 B27F                       	dc.b $B2, $7F
00025403 0268                       	dc.b $2, $68
00025405 02                         DPLC_e3d5_20B: 	dc.b $2
00025406 7269                       	dc.b $72, $69
00025408 B28B                       	dc.b $B2, $8B
0002540A 01                         DPLC_e3d5_210: 	dc.b $1
0002540B F297                       	dc.b $F2, $97
0002540D 01                         DPLC_e3d5_213: 	dc.b $1
0002540E F2A7                       	dc.b $F2, $A7
00025410 01                         DPLC_e3d5_216: 	dc.b $1
00025411 F2B7                       	dc.b $F2, $B7
00025413 01                         DPLC_e3d5_219: 	dc.b $1
00025414 F2C7                       	dc.b $F2, $C7
00025416 01                         DPLC_e3d5_21C: 	dc.b $1
00025417 F2D7                       	dc.b $F2, $D7
00025419 02                         DPLC_e3d5_21F: 	dc.b $2
0002541A B2E7                       	dc.b $B2, $E7
0002541C 22F3                       	dc.b $22, $F3
0002541E 01                         DPLC_e3d5_224: 	dc.b $1
0002541F F2F6                       	dc.b $F2, $F6
00025421 02                         DPLC_e3d5_227: 	dc.b $2
00025422 B306                       	dc.b $B3, $6
00025424 2312                       	dc.b $23, $12
00025426 01                         DPLC_e3d5_22C: 	dc.b $1
00025427 F315                       	dc.b $F3, $15
00025429 02                         DPLC_e3d5_22F: 	dc.b $2
0002542A 5325                       	dc.b $53, $25
0002542C B32B                       	dc.b $B3, $2B
0002542E 04                         DPLC_e3d5_234: 	dc.b $4
0002542F 5337                       	dc.b $53, $37
00025431 733D                       	dc.b $73, $3D
00025433 1345                       	dc.b $13, $45
00025435 0347                       	dc.b $3, $47
00025437 02                         DPLC_e3d5_23D: 	dc.b $2
00025438 D348                       	dc.b $D3, $48
0002543A 34EC                       	dc.b $34, $EC
0002543C 02                         DPLC_e3d5_242: 	dc.b $2
0002543D F528                       	dc.b $F5, $28
0002543F 0538                       	dc.b $5, $38
00025441 02                         DPLC_e3d5_247: 	dc.b $2
00025442 F539                       	dc.b $F5, $39
00025444 0549                       	dc.b $5, $49
00025446 02                         DPLC_e3d5_24C: 	dc.b $2
00025447 E356                       	dc.b $E3, $56
00025449 054A                       	dc.b $5, $4A
0002544B 01                         DPLC_e3d5_251: 	dc.b $1
0002544C 8365                       	dc.b $83, $65
0002544E 03                         DPLC_e3d5_254: 	dc.b $3
0002544F 736E                       	dc.b $73, $6E
00025451 0376                       	dc.b $3, $76
00025453 3377                       	dc.b $33, $77
00025455 02                         DPLC_e3d5_25B: 	dc.b $2
00025456 E37B                       	dc.b $E3, $7B
00025458 054A                       	dc.b $5, $4A
0002545A 03                         DPLC_e3d5_260: 	dc.b $3
0002545B B38A                       	dc.b $B3, $8A
0002545D 1396                       	dc.b $13, $96
0002545F 0398                       	dc.b $3, $98
00025461 04                         DPLC_e3d5_267: 	dc.b $4
00025462 B399                       	dc.b $B3, $99
00025464 33A5                       	dc.b $33, $A5
00025466 03A9                       	dc.b $3, $A9
00025468 03AA                       	dc.b $3, $AA
0002546A 04                         DPLC_e3d5_270: 	dc.b $4
0002546B B3AB                       	dc.b $B3, $AB
0002546D 33B7                       	dc.b $33, $B7
0002546F 03BB                       	dc.b $3, $BB
00025471 03BC                       	dc.b $3, $BC
00025473 05                         DPLC_e3d5_279: 	dc.b $5
00025474 83BD                       	dc.b $83, $BD
00025476 13C6                       	dc.b $13, $C6
00025478 53C8                       	dc.b $53, $C8
0002547A 13CE                       	dc.b $13, $CE
0002547C 03D0                       	dc.b $3, $D0
0002547E 05                         DPLC_e3d5_284: 	dc.b $5
0002547F 83D1                       	dc.b $83, $D1
00025481 13DA                       	dc.b $13, $DA
00025483 53C8                       	dc.b $53, $C8
00025485 13CE                       	dc.b $13, $CE
00025487 03D0                       	dc.b $3, $D0
00025489 02                         DPLC_e3d5_28F: 	dc.b $2
0002548A 83DC                       	dc.b $83, $DC
0002548C 73E5                       	dc.b $73, $E5
0002548E 03                         DPLC_e3d5_294: 	dc.b $3
0002548F 83ED                       	dc.b $83, $ED
00025491 23F6                       	dc.b $23, $F6
00025493 13F9                       	dc.b $13, $F9
00025495 02                         DPLC_e3d5_29B: 	dc.b $2
00025496 83FB                       	dc.b $83, $FB
00025498 7404                       	dc.b $74, $4
0002549A 03                         DPLC_e3d5_2A0: 	dc.b $3
0002549B 83ED                       	dc.b $83, $ED
0002549D 240C                       	dc.b $24, $C
0002549F 140F                       	dc.b $14, $F
000254A1 02                         DPLC_e3d5_2A7: 	dc.b $2
000254A2 5411                       	dc.b $54, $11
000254A4 B417                       	dc.b $B4, $17
000254A6 03                         DPLC_e3d5_2AC: 	dc.b $3
000254A7 8423                       	dc.b $84, $23
000254A9 342C                       	dc.b $34, $2C
000254AB 0430                       	dc.b $4, $30
000254AD 03                         DPLC_e3d5_2B3: 	dc.b $3
000254AE 7431                       	dc.b $74, $31
000254B0 1439                       	dc.b $14, $39
000254B2 B43B                       	dc.b $B4, $3B
000254B4 05                         DPLC_e3d5_2BA: 	dc.b $5
000254B5 7447                       	dc.b $74, $47
000254B7 144F                       	dc.b $14, $4F
000254B9 5451                       	dc.b $54, $51
000254BB 3457                       	dc.b $34, $57
000254BD 045B                       	dc.b $4, $5B
000254BF 05                         DPLC_e3d5_2C5: 	dc.b $5
000254C0 745C                       	dc.b $74, $5C
000254C2 144F                       	dc.b $14, $4F
000254C4 5464                       	dc.b $54, $64
000254C6 3457                       	dc.b $34, $57
000254C8 045B                       	dc.b $4, $5B
000254CA 02                         DPLC_e3d5_2D0: 	dc.b $2
000254CB 246A                       	dc.b $24, $6A
000254CD F46D                       	dc.b $F4, $6D
000254CF 03                         DPLC_e3d5_2D5: 	dc.b $3
000254D0 247D                       	dc.b $24, $7D
000254D2 B480                       	dc.b $B4, $80
000254D4 248C                       	dc.b $24, $8C
000254D6 01                         DPLC_e3d5_2DC: 	dc.b $1
000254D7 B48F                       	dc.b $B4, $8F
000254D9 01                         DPLC_e3d5_2DF: 	dc.b $1
000254DA 549B                       	dc.b $54, $9B
000254DC 01                         DPLC_e3d5_2E2: 	dc.b $1
000254DD 14A1                       	dc.b $14, $A1
000254DF 02                         DPLC_e3d5_2E5: 	dc.b $2
000254E0 E356                       	dc.b $E3, $56
000254E2 054A                       	dc.b $5, $4A
000254E4 03                         DPLC_e3d5_2EA: 	dc.b $3
000254E5 736E                       	dc.b $73, $6E
000254E7 0376                       	dc.b $3, $76
000254E9 3377                       	dc.b $33, $77
000254EB 03                         DPLC_e3d5_2F1: 	dc.b $3
000254EC B4A3                       	dc.b $B4, $A3
000254EE 14AF                       	dc.b $14, $AF
000254F0 34B1                       	dc.b $34, $B1
000254F2 03                         DPLC_e3d5_2F8: 	dc.b $3
000254F3 54B5                       	dc.b $54, $B5
000254F5 B4BB                       	dc.b $B4, $BB
000254F7 1074                       	dc.b $10, $74
000254F9 02                         DPLC_e3d5_2FF: 	dc.b $2
000254FA F4C7                       	dc.b $F4, $C7
000254FC 24D7                       	dc.b $24, $D7
000254FE 02                         DPLC_e3d5_304: 	dc.b $2
000254FF F4DA                       	dc.b $F4, $DA
00025501 14EA                       	dc.b $14, $EA
00025503 02                         DPLC_e3d5_309: 	dc.b $2
00025504 F502                       	dc.b $F5, $2
00025506 2512                       	dc.b $25, $12
00025508 02                         DPLC_e3d5_30E: 	dc.b $2
00025509 F515                       	dc.b $F5, $15
0002550B 2525                       	dc.b $25, $25
0002550D 02                         DPLC_e3d5_313: 	dc.b $2
0002550E F54B                       	dc.b $F5, $4B
00025510 755B                       	dc.b $75, $5B
00025512                            	even
00025512                            	even
00025512                            
00025512                            ; ---------------------------------------------------------------------------
00025512                            ; Uncompressed graphics	- Sonic
00025512                            ; ---------------------------------------------------------------------------
00025512                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030132                            		even
00030132                            ; ---------------------------------------------------------------------------
00030132                            ; Compressed graphics - various
00030132                            ; ---------------------------------------------------------------------------
00030132                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030236                            		even
00030236                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030270                            		even
00030270                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030406                            		even
00030406                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003054E                            		even
0003054E                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030658                            		even
00030658                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000306AA                            		even
000306AA                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000308F2                            		even
000308F2                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030A78                            		even
00030A78                            ; ---------------------------------------------------------------------------
00030A78                            ; Sprite mappings - walls of the special stage
00030A78                            ; ---------------------------------------------------------------------------
00030A78                            Map_SSWalls:
00030A78                            	include "_maps\SSwalls.asm"
00030A78                            ; ---------------------------------------------------------------------------
00030A78                            ; Sprite mappings - walls of the special stage
00030A78                            ; ---------------------------------------------------------------------------
00030A78 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030A7C 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030A80 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030A84 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030A88 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030A8C 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030A90 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030A94 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030A98 01                         byte_2C584:	dc.b 1
00030A99 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030A9E 01                         byte_2C58A:	dc.b 1
00030A9F F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030AA4 01                         byte_2C590:	dc.b 1
00030AA5 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030AAA 01                         byte_2C596:	dc.b 1
00030AAB F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030AB0 01                         byte_2C59C:	dc.b 1
00030AB1 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030AB6 01                         byte_2C5A2:	dc.b 1
00030AB7 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030ABC 01                         byte_2C5A8:	dc.b 1
00030ABD F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030AC2 01                         byte_2C5AE:	dc.b 1
00030AC3 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030AC8 01                         byte_2C5B4:	dc.b 1
00030AC9 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030ACE 01                         byte_2C5BA:	dc.b 1
00030ACF F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030AD4 01                         byte_2C5C0:	dc.b 1
00030AD5 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030ADA 01                         byte_2C5C6:	dc.b 1
00030ADB F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030AE0 01                         byte_2C5CC:	dc.b 1
00030AE1 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030AE6 01                         byte_2C5D2:	dc.b 1
00030AE7 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030AEC 01                         byte_2C5D8:	dc.b 1
00030AED F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030AF2 01                         byte_2C5DE:	dc.b 1
00030AF3 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030AF8                            		even
00030AF8                            		even
00030AF8                            ; ---------------------------------------------------------------------------
00030AF8                            ; Compressed graphics - special stage
00030AF8                            ; ---------------------------------------------------------------------------
00030AF8                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031430                            		even
00031430                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031564                            		even
00031564                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000321F4                            		even
000321F4                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000324F4                            		even
000324F4                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000329E8                            		even
000329E8                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00032AD6                            		even
00032AD6                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00032BA6                            		even
00032BA6                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00032C9C                            		even
00032C9C                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00032CFA                            		even
00032CFA                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00032D8C                            		even
00032D8C                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00032E4E                            		even
00032E4E                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00032F1C                            		even
00032F1C                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00032FE8                            		even
00032FE8                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000330B0                            		even
000330B0                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003317A                            		even
0003317A                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003324A                            		even
0003324A                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003343E                            		even
0003343E                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000335A6                            		even
000335A6                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033656                            		even
00033656                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033730                            		even
00033730                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000337B4                            		even
000337B4                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00033932                            		even
00033932                            ; ---------------------------------------------------------------------------
00033932                            ; Compressed graphics - GHZ stuff
00033932                            ; ---------------------------------------------------------------------------
00033932                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003397C                            		even
0003397C                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00033A96                            		even
00033A96                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00033B82                            		even
00033B82                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00033BCA                            		even
00033BCA                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00033D68                            		even
00033D68                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00033DE4                            		even
00033DE4                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00033FF8                            		even
00033FF8                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034124                            		even
00034124                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034252                            		even
00034252                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000342F0                            		even
000342F0                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034350                            		even
00034350                            ; ---------------------------------------------------------------------------
00034350                            ; Compressed graphics - LZ stuff
00034350                            ; ---------------------------------------------------------------------------
00034350                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034474                            		even
00034474                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00034C68                            		even
00034C68                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00034DE8                            		even
00034DE8                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00034F52                            		even
00034F52                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000355A8                            		even
000355A8                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003565E                            		even
0003565E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00035700                            		even
00035700                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003585C                            		even
0003585C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000358C0                            		even
000358C0                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00035A12                            		even
00035A12                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00035EF4                            		even
00035EF4                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036064                            		even
00036064                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003631C                            		even
0003631C                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036454                            		even
00036454                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003657E                            		even
0003657E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003668E                            		even
0003668E                            ; ---------------------------------------------------------------------------
0003668E                            ; Compressed graphics - MZ stuff
0003668E                            ; ---------------------------------------------------------------------------
0003668E                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003691C                            		even
0003691C                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000369DA                            		even
000369DA                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00036A92                            		even
00036A92                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00036AE6                            		even
00036AE6                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00036DC4                            		even
00036DC4                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000376DA                            		even
000376DA                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003783E                            		even
0003783E                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000378C6                            		even
000378C6                            ; ---------------------------------------------------------------------------
000378C6                            ; Compressed graphics - SLZ stuff
000378C6                            ; ---------------------------------------------------------------------------
000378C6                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00037B02                            		even
00037B02                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00037C48                            		even
00037C48                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00037E8C                            		even
00037E8C                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00037EEE                            		even
00037EEE                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00037FD0                            		even
00037FD0                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000381B2                            		even
000381B2                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000382BE                            		even
000382BE                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038362                            		even
00038362                            ; ---------------------------------------------------------------------------
00038362                            ; Compressed graphics - SYZ stuff
00038362                            ; ---------------------------------------------------------------------------
00038362                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000384CC                            		even
000384CC                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003852E                            		even
0003852E                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038610                            		even
00038610                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003889E                            		even
0003889E                            ; ---------------------------------------------------------------------------
0003889E                            ; Compressed graphics - SBZ stuff
0003889E                            ; ---------------------------------------------------------------------------
0003889E                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000388F2                            		even
000388F2                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00038B8E                            		even
00038B8E                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00038D92                            		even
00038D92                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00038F30                            		even
00038F30                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039260                            		even
00039260                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003943E                            		even
0003943E                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039496                            		even
00039496                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039660 00                         		even
00039660                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003975E                            		even
0003975E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000398EA                            		even
000398EA                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003993A                            		even
0003993A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00039992                            		even
00039992                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00039A8E                            		even
00039A8E                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00039BA4                            		even
00039BA4                            ; ---------------------------------------------------------------------------
00039BA4                            ; Compressed graphics - enemies
00039BA4                            ; ---------------------------------------------------------------------------
00039BA4                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00039F64                            		even
00039F64                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A10E 00                         		even
0003A10E                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003A4D0 00                         		even
0003A4D0                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003A6B8                            		even
0003A6B8                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003A870 00                         		even
0003A870                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003AAD8                            		even
0003AAD8                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003AD62                            		even
0003AD62                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003B386                            		even
0003B386                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003B57C                            		even
0003B57C                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003BB9A                            		even
0003BB9A                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003BF82                            		even
0003BF82                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003C27E                            		even
0003C27E                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003C4C6                            		even
0003C4C6                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003C75E                            		even
0003C75E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003C93C                            		even
0003C93C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003CACA                            		even
0003CACA                            ; ---------------------------------------------------------------------------
0003CACA                            ; Compressed graphics - various
0003CACA                            ; ---------------------------------------------------------------------------
0003CACA                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D0D8                            		even
0003D0D8                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003D1CE                            		even
0003D1CE                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003D2D4                            		even
0003D2D4                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003D3C8                            		even
0003D3C8                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003D90C                            		even
0003D90C                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003DF72                            		even
0003DF72                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E022                            		even
0003E022                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003E1B4                            		even
0003E1B4                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003E2B6                            		even
0003E2B6                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003E392                            		even
0003E392                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003E80E                            		even
0003E80E                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003E8CE                            		even
0003E8CE                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003EA42                            		even
0003EA42                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003ED44                            		even
0003ED44                            ; ---------------------------------------------------------------------------
0003ED44                            ; Compressed graphics - continue screen
0003ED44                            ; ---------------------------------------------------------------------------
0003ED44                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003EFF4                            		even
0003EFF4                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003F22E                            		even
0003F22E                            ; ---------------------------------------------------------------------------
0003F22E                            ; Compressed graphics - animals
0003F22E                            ; ---------------------------------------------------------------------------
0003F22E                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003F386                            		even
0003F386                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003F4E2                            		even
0003F4E2                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003F65E                            		even
0003F65E                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003F77A                            		even
0003F77A                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003F8B0                            		even
0003F8B0                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003F9EA                            		even
0003F9EA                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003FB46                            		even
0003FB46                            ; ---------------------------------------------------------------------------
0003FB46                            ; Compressed graphics - primary patterns and block mappings
0003FB46                            ; ---------------------------------------------------------------------------
0003FB46                            Blk16_GHZ:	incbin	map16\ghz.bin
0004045A                            		even
0004045A                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00041D68                            		even
00041D68                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000430E8                            		even
000430E8                            Blk256_GHZ:	incbin	map256\ghz.bin
000453E6                            		even
000453E6                            Blk16_LZ:	incbin	map16\lz.bin
00045B20                            		even
00045B20                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00047F22                            		even
00047F22                            Blk256_LZ:	incbin	map256\lz.bin
0004A8A2                            		even
0004A8A2                            Blk16_MZ:	incbin	map16\mz.bin
0004AFFE                            		even
0004AFFE                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004D886                            		even
0004D886                            Blk256_MZ:	incbin	map256\mz.bin
0004F00A                            		even
0004F00A                            Blk16_SLZ:	incbin	map16\slz.bin
0004F6D4                            		even
0004F6D4                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051628                            		even
00051628                            Blk256_SLZ:	incbin	map256\slz.bin
00051CA2                            		even
00051CA2                            Blk16_SYZ:	incbin	map16\syz.bin
000528C8                            		even
000528C8                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00056E5A                            		even
00056E5A                            Blk256_SYZ:	incbin	map256\syz.bin
00058EB6                            		even
00058EB6                            Blk16_SBZ:	incbin	map16\sbz.bin
00059DFE                            		even
00059DFE                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005C7C2                            		even
0005C7C2                            Blk256_SBZ:	incbin	map256\sbz.bin
0005F2B8                            		even
0005F2B8                            ; ---------------------------------------------------------------------------
0005F2B8                            ; Compressed graphics - bosses and ending sequence
0005F2B8                            ; ---------------------------------------------------------------------------
0005F2B8                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005FAD2 00                         		even
0005FAD2                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005FDBC                            		even
0005FDBC                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060640                            		even
00060640                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061396 00                         		even
00061396                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00061AFE                            		even
00061AFE                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006207E                            		even
0006207E                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006219E                            		even
0006219E                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006239C                            		even
0006239C                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006357A                            		even
0006357A                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00063EBE                            		even
00063EBE                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00064294                            		even
00064294                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00064824                            		even
00064824                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00064AAC                            		even
00064AAC                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000650AA                            		even
000650AA                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065332                            		even
00065332                            		incbin	misc\padding2.bin
00065436                            		even
00065436                            ; ---------------------------------------------------------------------------
00065436                            ; Collision data
00065436                            ; ---------------------------------------------------------------------------
00065436                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065536                            		even
00065536                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066536                            		even
00066536                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067536                            		even
00067536                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000676EE 00                         		even
000676EE                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00067856                            		even
00067856                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000679E6                            		even
000679E6                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00067BDA                            		even
00067BDA                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00067DE0                            		even
00067DE0                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006807E                            		even
0006807E                            ; ---------------------------------------------------------------------------
0006807E                            ; Special layouts
0006807E                            ; ---------------------------------------------------------------------------
0006807E                            SS_1:		incbin	sslayout\1.bin
000682F8                            		even
000682F8                            SS_2:		incbin	sslayout\2.bin
0006870A                            		even
0006870A                            SS_3:		incbin	sslayout\3.bin
00068A66                            		even
00068A66                            SS_4:		incbin	sslayout\4.bin
00068F40                            		even
00068F40                            SS_5:		incbin	sslayout\5.bin
00069412                            		even
00069412                            SS_6:		incbin	sslayout\6.bin
00069722                            		even
00069722                            ; ---------------------------------------------------------------------------
00069722                            ; Animated uncompressed graphics
00069722                            ; ---------------------------------------------------------------------------
00069722                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00069922                            		even
00069922                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00069D22                            		even
00069D22                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006A1A2                            		even
0006A1A2                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006A4A2                            		even
0006A4A2                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006AAA2                            		even
0006AAA2                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006ADA2                            		even
0006ADA2                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006B822                            		even
0006B822                            
0006B822                            ; ---------------------------------------------------------------------------
0006B822                            ; Level	layout index
0006B822                            ; ---------------------------------------------------------------------------
0006B822 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006B828 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006B82E 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006B834 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006B83A 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006B840 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006B846 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006B84C 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006B852 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006B858 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006B85E 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006B864 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006B86A 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B870 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B876 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B87C 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006B882 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006B888 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006B88E 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006B894 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006B89A 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006B8A0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006B8A6 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006B8AC 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006B8B2 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006B8B8 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006B8BE 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006B8C4 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006B8CA                            
0006B8CA                            Level_GHZ1:	incbin	levels\ghz1.bin
0006B9BC                            		even
0006B9BC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006B9C0                            Level_GHZ2:	incbin	levels\ghz2.bin
0006BA88                            		even
0006BA88 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006BA8C                            Level_GHZ3:	incbin	levels\ghz3.bin
0006BBAE                            		even
0006BBAE                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006BBD0                            		even
0006BBD0 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006BBD4 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006BBD8                            
0006BBD8                            Level_LZ1:	incbin	levels\lz1.bin
0006BCDA                            		even
0006BCDA                            Level_LZbg:	incbin	levels\lzbg.bin
0006BDDC                            		even
0006BDDC 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006BDE0                            Level_LZ2:	incbin	levels\lz2.bin
0006BE7A                            		even
0006BE7A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006BE7E                            Level_LZ3:	incbin	levels\lz3.bin
0006BF98                            		even
0006BF98 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006BF9C                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C056                            		even
0006C056 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C05A                            
0006C05A                            Level_MZ1:	incbin	levels\mz1.bin
0006C0F8                            		even
0006C0F8                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006C172                            		even
0006C172                            Level_MZ2:	incbin	levels\mz2.bin
0006C216                            		even
0006C216                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006C2A8                            		even
0006C2A8 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006C2AC                            Level_MZ3:	incbin	levels\mz3.bin
0006C38E                            		even
0006C38E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006C432 00                         		even
0006C432 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006C436 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006C43A                            
0006C43A                            Level_SLZ1:	incbin	levels\slz1.bin
0006C54C                            		even
0006C54C                            Level_SLZbg:	incbin	levels\slzbg.bin
0006C566                            		even
0006C566                            Level_SLZ2:	incbin	levels\slz2.bin
0006C656                            		even
0006C656                            Level_SLZ3:	incbin	levels\slz3.bin
0006C770                            		even
0006C770 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006C774                            
0006C774                            Level_SYZ1:	incbin	levels\syz1.bin
0006C830 00                         		even
0006C830                            Level_SYZbg:	incbin	levels\syzbg.bin
0006C86A                            		even
0006C86A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006C86E                            Level_SYZ2:	incbin	levels\syz2.bin
0006C972                            		even
0006C972 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006C976                            Level_SYZ3:	incbin	levels\syz3.bin
0006CAD0 00                         		even
0006CAD0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006CAD4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006CAD8                            
0006CAD8                            Level_SBZ1:	incbin	levels\sbz1.bin
0006CBFA                            		even
0006CBFA                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006CC38                            		even
0006CC38                            Level_SBZ2:	incbin	levels\sbz2.bin
0006CD7A                            		even
0006CD7A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006CEE4                            		even
0006CEE4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006CEE8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006CEEC                            Level_End:	incbin	levels\ending.bin
0006CF1C 00                         		even
0006CF1C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006CF20                            
0006CF20                            ; ---------------------------------------------------------------------------
0006CF20                            ; Animated uncompressed giant ring graphics
0006CF20                            ; ---------------------------------------------------------------------------
0006CF20                            Art_BigRing:	incbin	artunc\bigring.bin
0006DB60                            		even
0006DB60                            
0006DB60                            		incbin	misc\padding3.bin
0006DBFC                            		even
0006DBFC                            
0006DBFC                            ; ---------------------------------------------------------------------------
0006DBFC                            ; Sprite locations index
0006DBFC                            ; ---------------------------------------------------------------------------
0006DBFC 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC00 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC04 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC08 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC0C 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC10 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC14 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC18 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC1C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC20 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC24 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC28 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC2C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC30 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC34 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC38 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC3C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC40 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC44 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC48 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC4C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC50 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC54 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC58 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC5C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC60 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC64 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC68 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC6C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006DC70 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006DC74 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006DC78 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006DC7C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006DC80 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006DC84 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006DC88 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006DC8C FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006DC92                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006E4D8                            		even
0006E4D8                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006E58C                            		even
0006E58C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006EFD0                            		even
0006EFD0                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006F378                            		even
0006F378                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006F6AE                            		even
0006F6AE                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006FBFA                            		even
0006FBFA                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00070092                            		even
00070092                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000700C4                            		even
000700C4                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000700F6                            		even
000700F6                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070128                            		even
00070128                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007015A                            		even
0007015A                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000701A4                            		even
000701A4                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000701E2                            		even
000701E2                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007054E                            		even
0007054E                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000709F8                            		even
000709F8                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00070F6E                            		even
00070F6E                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00070F98                            		even
00070F98                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071400                            		even
00071400                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000719E2                            		even
000719E2                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00072054                            		even
00072054                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000725BE                            		even
000725BE                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00072BC4                            		even
00072BC4                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073302                            		even
00073302                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000739E0                            		even
000739E0                            ObjPos_FZ:	incbin	objpos\fz.bin
000739F2                            		even
000739F2                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00073A24                            		even
00073A24                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00073A56                            		even
00073A56                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00073A88                            		even
00073A88                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00073ABA                            		even
00073ABA                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00073AEC                            		even
00073AEC                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00073B24                            		even
00073B24                            ObjPos_End:	incbin	objpos\ending.bin
00073C80                            		even
00073C80 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00073C86                            ; ---------------------------------------------------------------------------
00073C86                            		incbin	misc\padding4.bin
000742B0                            		even
000742B0                            
000742B0 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000742B4 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000742B8 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000742BC 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000742C0 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000742C4 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000742C8                            ; ---------------------------------------------------------------------------
000742C8                            ; PSG instruments used in music
000742C8                            ; ---------------------------------------------------------------------------
000742C8 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000742D4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000742E0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000742EC                            PSG1:		incbin	sound\psg1.bin
00074303                            PSG2:		incbin	sound\psg2.bin
0007430A                            PSG3:		incbin	sound\psg3.bin
0007431B                            PSG4:		incbin	sound\psg4.bin
00074326                            PSG6:		incbin	sound\psg6.bin
00074335                            PSG5:		incbin	sound\psg5.bin
0007435F                            PSG7:		incbin	sound\psg7.bin
0007437B                            PSG8:		incbin	sound\psg8.bin
000743A3                            PSG9:		incbin	sound\psg9.bin
000743B4                            
000743B4 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000743BC                            ; ---------------------------------------------------------------------------
000743BC                            ; Music	Pointers
000743BC                            ; ---------------------------------------------------------------------------
000743BC 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000743C4 0000 0000 0000 0000        		dc.l Music83, Music84
000743CC 0000 0000 0000 0000        		dc.l Music85, Music86
000743D4 0000 0000 0000 0000        		dc.l Music87, Music88
000743DC 0000 0000 0000 0000        		dc.l Music89, Music8A
000743E4 0000 0000 0000 0000        		dc.l Music8B, Music8C
000743EC 0000 0000 0000 0000        		dc.l Music8D, Music8E
000743F4 0000 0000 0000 0000        		dc.l Music8F, Music90
000743FC 0000 0000 0000 0000        		dc.l Music91, Music92
00074404 0000 0000 0000 0000        		dc.l Music93, Music94
0007440C 0000 0000 0000 0000        		dc.l Music95, Music96
00074414 0000 0000 0000 0000        		dc.l Music97, Music98
0007441C 0000 0000 0000 0000        		dc.l Music99, Music9A
00074424 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007442C 0000 0000 0000 0000        		dc.l Music9D, Music9E
00074434 0000 0000                  		dc.l Music9F
00074438                            ; ---------------------------------------------------------------------------
00074438                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074438                            ; ---------------------------------------------------------------------------
00074438 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074448 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074458 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074468 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074478 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074488 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074498 9090 9090                  		dc.b $90, $90, $90, $90
0007449C                            
0007449C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007449C                            
0007449C                            
0007449C                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007449C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000744A4 4E71                       		nop	
000744A6 4E71                       		nop	
000744A8 4E71                       		nop	
000744AA                            
000744AA                            loc_71B5A:
000744AA 0839 0000 00A1 1100        		btst	#0,($A11100).l
000744B2 66F6                       		bne.s	loc_71B5A
000744B4                            
000744B4 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000744BC 6700                       		beq.s	loc_71B82
000744BE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000744C6 4E71                       		nop	
000744C8 4E71                       		nop	
000744CA 4E71                       		nop	
000744CC 4E71                       		nop	
000744CE 4E71                       		nop	
000744D0 60CA                       		bra.s	sub_71B4C
000744D2                            ; ===========================================================================
000744D2                            
000744D2                            loc_71B82:
000744D2 4DF9 00FF F000             		lea	($FFF000).l,a6
000744D8 422E 000E                  		clr.b	$E(a6)
000744DC 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000744E0 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000744E4 532E 0001                  		subq.b	#1,1(a6)
000744E8 6600                       		bne.s	loc_71B9E
000744EA 4EBA 0000                  		jsr	sub_7260C(pc)
000744EE                            
000744EE                            loc_71B9E:
000744EE 102E 0004                  		move.b	4(a6),d0
000744F2 6700                       		beq.s	loc_71BA8
000744F4 4EBA 0000                  		jsr	sub_72504(pc)
000744F8                            
000744F8                            loc_71BA8:
000744F8 4A2E 0024                  		tst.b	$24(a6)
000744FC 6700                       		beq.s	loc_71BB2
000744FE 4EBA 0000                  		jsr	sub_7267C(pc)
00074502                            
00074502                            loc_71BB2:
00074502 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074506 6700                       		beq.s	loc_71BBC	; if not, branch
00074508 4EBA 0000                  		jsr	Sound_Play(pc)
0007450C                            
0007450C                            loc_71BBC:
0007450C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074512 6700                       		beq.s	loc_71BC8
00074514 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074518                            
00074518                            loc_71BC8:
00074518 4BEE 0040                  		lea	$40(a6),a5
0007451C 4A15                       		tst.b	(a5)
0007451E 6A00                       		bpl.s	loc_71BD4
00074520 4EBA 0000                  		jsr	sub_71C4E(pc)
00074524                            
00074524                            loc_71BD4:
00074524 422E 0008                  		clr.b	8(a6)
00074528 7E05                       		moveq	#5,d7
0007452A                            
0007452A                            loc_71BDA:
0007452A DAFC 0030                  		adda.w	#$30,a5
0007452E 4A15                       		tst.b	(a5)
00074530 6A00                       		bpl.s	loc_71BE6
00074532 4EBA 0000                  		jsr	sub_71CCA(pc)
00074536                            
00074536                            loc_71BE6:
00074536 51CF FFF2                  		dbf	d7,loc_71BDA
0007453A                            
0007453A 7E02                       		moveq	#2,d7
0007453C                            
0007453C                            loc_71BEC:
0007453C DAFC 0030                  		adda.w	#$30,a5
00074540 4A15                       		tst.b	(a5)
00074542 6A00                       		bpl.s	loc_71BF8
00074544 4EBA 0000                  		jsr	sub_72850(pc)
00074548                            
00074548                            loc_71BF8:
00074548 51CF FFF2                  		dbf	d7,loc_71BEC
0007454C                            
0007454C 1D7C 0080 000E             		move.b	#$80,$E(a6)
00074552 7E02                       		moveq	#2,d7
00074554                            
00074554                            loc_71C04:
00074554 DAFC 0030                  		adda.w	#$30,a5
00074558 4A15                       		tst.b	(a5)
0007455A 6A00                       		bpl.s	loc_71C10
0007455C 4EBA 0000                  		jsr	sub_71CCA(pc)
00074560                            
00074560                            loc_71C10:
00074560 51CF FFF2                  		dbf	d7,loc_71C04
00074564                            
00074564 7E02                       		moveq	#2,d7
00074566                            
00074566                            loc_71C16:
00074566 DAFC 0030                  		adda.w	#$30,a5
0007456A 4A15                       		tst.b	(a5)
0007456C 6A00                       		bpl.s	loc_71C22
0007456E 4EBA 0000                  		jsr	sub_72850(pc)
00074572                            
00074572                            loc_71C22:
00074572 51CF FFF2                  		dbf	d7,loc_71C16
00074576 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007457C DAFC 0030                  		adda.w	#$30,a5
00074580 4A15                       		tst.b	(a5)
00074582 6A00                       		bpl.s	loc_71C38
00074584 4EBA 0000                  		jsr	sub_71CCA(pc)
00074588                            
00074588                            loc_71C38:
00074588 DAFC 0030                  		adda.w	#$30,a5
0007458C 4A15                       		tst.b	(a5)
0007458E 6A00                       		bpl.s	loc_71C44
00074590 4EBA 0000                  		jsr	sub_72850(pc)
00074594                            
00074594                            loc_71C44:
00074594 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007459C 4E75                       		rts	
0007459E                            ; End of function sub_71B4C
0007459E                            
0007459E                            
0007459E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007459E                            
0007459E                            
0007459E                            sub_71C4E:				; XREF: sub_71B4C
0007459E 532D 000E                  		subq.b	#1,$E(a5)
000745A2 6600                       		bne.s	locret_71CAA
000745A4 1D7C 0080 0008             		move.b	#$80,8(a6)
000745AA 286D 0004                  		movea.l	4(a5),a4
000745AE                            
000745AE                            loc_71C5E:
000745AE 7A00                       		moveq	#0,d5
000745B0 1A1C                       		move.b	(a4)+,d5
000745B2 0C05 00E0                  		cmpi.b	#-$20,d5
000745B6 6500                       		bcs.s	loc_71C6E
000745B8 4EBA 0000                  		jsr	sub_72A5A(pc)
000745BC 60F0                       		bra.s	loc_71C5E
000745BE                            ; ===========================================================================
000745BE                            
000745BE                            loc_71C6E:
000745BE 4A05                       		tst.b	d5
000745C0 6A00                       		bpl.s	loc_71C84
000745C2 1B45 0010                  		move.b	d5,$10(a5)
000745C6 1A1C                       		move.b	(a4)+,d5
000745C8 6A00                       		bpl.s	loc_71C84
000745CA 534C                       		subq.w	#1,a4
000745CC 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000745D2 6000                       		bra.s	loc_71C88
000745D4                            ; ===========================================================================
000745D4                            
000745D4                            loc_71C84:
000745D4 4EBA 0000                  		jsr	sub_71D40(pc)
000745D8                            
000745D8                            loc_71C88:
000745D8 2B4C 0004                  		move.l	a4,4(a5)
000745DC 0815 0002                  		btst	#2,(a5)
000745E0 6600                       		bne.s	locret_71CAA
000745E2 7000                       		moveq	#0,d0
000745E4 102D 0010                  		move.b	$10(a5),d0
000745E8 0C00 0080                  		cmpi.b	#$80,d0
000745EC 6700                       		beq.s	locret_71CAA
000745EE 0800 0003                  		btst	#3,d0
000745F2 6600                       		bne.s	loc_71CAC
000745F4 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000745FA                            
000745FA                            locret_71CAA:
000745FA 4E75                       		rts	
000745FC                            ; ===========================================================================
000745FC                            
000745FC                            loc_71CAC:
000745FC 0400 0088                  		subi.b	#$88,d0
00074600 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074604 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007460A 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074612 4E75                       		rts	
00074614                            ; End of function sub_71C4E
00074614                            
00074614                            ; ===========================================================================
00074614 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007461A                            
0007461A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007461A                            
0007461A                            
0007461A                            sub_71CCA:				; XREF: sub_71B4C
0007461A 532D 000E                  		subq.b	#1,$E(a5)
0007461E 6600                       		bne.s	loc_71CE0
00074620 0895 0004                  		bclr	#4,(a5)
00074624 4EBA 0000                  		jsr	sub_71CEC(pc)
00074628 4EBA 0000                  		jsr	sub_71E18(pc)
0007462C 6000 0000                  		bra.w	loc_726E2
00074630                            ; ===========================================================================
00074630                            
00074630                            loc_71CE0:
00074630 4EBA 0000                  		jsr	sub_71D9E(pc)
00074634 4EBA 0000                  		jsr	sub_71DC6(pc)
00074638 6000 0000                  		bra.w	loc_71E24
0007463C                            ; End of function sub_71CCA
0007463C                            
0007463C                            
0007463C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007463C                            
0007463C                            
0007463C                            sub_71CEC:				; XREF: sub_71CCA
0007463C 286D 0004                  		movea.l	4(a5),a4
00074640 0895 0001                  		bclr	#1,(a5)
00074644                            
00074644                            loc_71CF4:
00074644 7A00                       		moveq	#0,d5
00074646 1A1C                       		move.b	(a4)+,d5
00074648 0C05 00E0                  		cmpi.b	#-$20,d5
0007464C 6500                       		bcs.s	loc_71D04
0007464E 4EBA 0000                  		jsr	sub_72A5A(pc)
00074652 60F0                       		bra.s	loc_71CF4
00074654                            ; ===========================================================================
00074654                            
00074654                            loc_71D04:
00074654 4EBA 0000                  		jsr	sub_726FE(pc)
00074658 4A05                       		tst.b	d5
0007465A 6A00                       		bpl.s	loc_71D1A
0007465C 4EBA 0000                  		jsr	sub_71D22(pc)
00074660 1A1C                       		move.b	(a4)+,d5
00074662 6A00                       		bpl.s	loc_71D1A
00074664 534C                       		subq.w	#1,a4
00074666 6000 0000                  		bra.w	sub_71D60
0007466A                            ; ===========================================================================
0007466A                            
0007466A                            loc_71D1A:
0007466A 4EBA 0000                  		jsr	sub_71D40(pc)
0007466E 6000 0000                  		bra.w	sub_71D60
00074672                            ; End of function sub_71CEC
00074672                            
00074672                            
00074672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074672                            
00074672                            
00074672                            sub_71D22:				; XREF: sub_71CEC
00074672 0405 0080                  		subi.b	#$80,d5
00074676 6700                       		beq.s	loc_71D58
00074678 DA2D 0008                  		add.b	8(a5),d5
0007467C 0245 007F                  		andi.w	#$7F,d5
00074680 E34D                       		lsl.w	#1,d5
00074682 41FA 0000                  		lea	word_72790(pc),a0
00074686 3C30 5000                  		move.w	(a0,d5.w),d6
0007468A 3B46 0010                  		move.w	d6,$10(a5)
0007468E 4E75                       		rts	
00074690                            ; End of function sub_71D22
00074690                            
00074690                            
00074690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074690                            
00074690                            
00074690                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074690 1005                       		move.b	d5,d0
00074692 122D 0002                  		move.b	2(a5),d1
00074696                            
00074696                            loc_71D46:
00074696 5301                       		subq.b	#1,d1
00074698 6700                       		beq.s	loc_71D4E
0007469A D005                       		add.b	d5,d0
0007469C 60F8                       		bra.s	loc_71D46
0007469E                            ; ===========================================================================
0007469E                            
0007469E                            loc_71D4E:
0007469E 1B40 000F                  		move.b	d0,$F(a5)
000746A2 1B40 000E                  		move.b	d0,$E(a5)
000746A6 4E75                       		rts	
000746A8                            ; End of function sub_71D40
000746A8                            
000746A8                            ; ===========================================================================
000746A8                            
000746A8                            loc_71D58:				; XREF: sub_71D22
000746A8 08D5 0001                  		bset	#1,(a5)
000746AC 426D 0010                  		clr.w	$10(a5)
000746B0                            
000746B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000746B0                            
000746B0                            
000746B0                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000746B0 2B4C 0004                  		move.l	a4,4(a5)
000746B4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000746BA 0815 0004                  		btst	#4,(a5)
000746BE 6600                       		bne.s	locret_71D9C
000746C0 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000746C6 422D 000C                  		clr.b	$C(a5)
000746CA 0815 0003                  		btst	#3,(a5)
000746CE 6700                       		beq.s	locret_71D9C
000746D0 206D 0014                  		movea.l	$14(a5),a0
000746D4 1B58 0018                  		move.b	(a0)+,$18(a5)
000746D8 1B58 0019                  		move.b	(a0)+,$19(a5)
000746DC 1B58 001A                  		move.b	(a0)+,$1A(a5)
000746E0 1018                       		move.b	(a0)+,d0
000746E2 E208                       		lsr.b	#1,d0
000746E4 1B40 001B                  		move.b	d0,$1B(a5)
000746E8 426D 001C                  		clr.w	$1C(a5)
000746EC                            
000746EC                            locret_71D9C:
000746EC 4E75                       		rts	
000746EE                            ; End of function sub_71D60
000746EE                            
000746EE                            
000746EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000746EE                            
000746EE                            
000746EE                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000746EE 4A2D 0012                  		tst.b	$12(a5)
000746F2 6700                       		beq.s	locret_71DC4
000746F4 532D 0012                  		subq.b	#1,$12(a5)
000746F8 6600                       		bne.s	locret_71DC4
000746FA 08D5 0001                  		bset	#1,(a5)
000746FE 4A2D 0001                  		tst.b	1(a5)
00074702 6B00 0000                  		bmi.w	loc_71DBE
00074706 4EBA 0000                  		jsr	sub_726FE(pc)
0007470A 584F                       		addq.w	#4,sp
0007470C 4E75                       		rts	
0007470E                            ; ===========================================================================
0007470E                            
0007470E                            loc_71DBE:
0007470E 4EBA 0000                  		jsr	sub_729A0(pc)
00074712 584F                       		addq.w	#4,sp
00074714                            
00074714                            locret_71DC4:
00074714 4E75                       		rts	
00074716                            ; End of function sub_71D9E
00074716                            
00074716                            
00074716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074716                            
00074716                            
00074716                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00074716 584F                       		addq.w	#4,sp
00074718 0815 0003                  		btst	#3,(a5)
0007471C 6700                       		beq.s	locret_71E16
0007471E 4A2D 0018                  		tst.b	$18(a5)
00074722 6700                       		beq.s	loc_71DDA
00074724 532D 0018                  		subq.b	#1,$18(a5)
00074728 4E75                       		rts	
0007472A                            ; ===========================================================================
0007472A                            
0007472A                            loc_71DDA:
0007472A 532D 0019                  		subq.b	#1,$19(a5)
0007472E 6700                       		beq.s	loc_71DE2
00074730 4E75                       		rts	
00074732                            ; ===========================================================================
00074732                            
00074732                            loc_71DE2:
00074732 206D 0014                  		movea.l	$14(a5),a0
00074736 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007473C 4A2D 001B                  		tst.b	$1B(a5)
00074740 6600                       		bne.s	loc_71DFE
00074742 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00074748 442D 001A                  		neg.b	$1A(a5)
0007474C 4E75                       		rts	
0007474E                            ; ===========================================================================
0007474E                            
0007474E                            loc_71DFE:
0007474E 532D 001B                  		subq.b	#1,$1B(a5)
00074752 1C2D 001A                  		move.b	$1A(a5),d6
00074756 4886                       		ext.w	d6
00074758 DC6D 001C                  		add.w	$1C(a5),d6
0007475C 3B46 001C                  		move.w	d6,$1C(a5)
00074760 DC6D 0010                  		add.w	$10(a5),d6
00074764 594F                       		subq.w	#4,sp
00074766                            
00074766                            locret_71E16:
00074766 4E75                       		rts	
00074768                            ; End of function sub_71DC6
00074768                            
00074768                            
00074768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074768                            
00074768                            
00074768                            sub_71E18:				; XREF: sub_71CCA
00074768 0815 0001                  		btst	#1,(a5)
0007476C 6600                       		bne.s	locret_71E48
0007476E 3C2D 0010                  		move.w	$10(a5),d6
00074772 6700                       		beq.s	loc_71E4A
00074774                            
00074774                            loc_71E24:				; XREF: sub_71CCA
00074774 102D 001E                  		move.b	$1E(a5),d0
00074778 4880                       		ext.w	d0
0007477A DC40                       		add.w	d0,d6
0007477C 0815 0002                  		btst	#2,(a5)
00074780 6600                       		bne.s	locret_71E48
00074782 3206                       		move.w	d6,d1
00074784 E049                       		lsr.w	#8,d1
00074786 103C 00A4                  		move.b	#-$5C,d0
0007478A 4EBA 0000                  		jsr	sub_72722(pc)
0007478E 1206                       		move.b	d6,d1
00074790 103C 00A0                  		move.b	#-$60,d0
00074794 4EBA 0000                  		jsr	sub_72722(pc)
00074798                            
00074798                            locret_71E48:
00074798 4E75                       		rts	
0007479A                            ; ===========================================================================
0007479A                            
0007479A                            loc_71E4A:
0007479A 08D5 0001                  		bset	#1,(a5)
0007479E 4E75                       		rts	
000747A0                            ; End of function sub_71E18
000747A0                            
000747A0                            ; ===========================================================================
000747A0                            
000747A0                            loc_71E50:				; XREF: sub_71B4C
000747A0 6B00                       		bmi.s	loc_71E94
000747A2 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000747A8 6700 0000                  		beq.w	loc_71EFE
000747AC 1D7C 0002 0003             		move.b	#2,3(a6)
000747B2 7602                       		moveq	#2,d3
000747B4 103C 00B4                  		move.b	#-$4C,d0
000747B8 7200                       		moveq	#0,d1
000747BA                            
000747BA                            loc_71E6A:
000747BA 4EBA 0000                  		jsr	sub_7272E(pc)
000747BE 4EBA 0000                  		jsr	sub_72764(pc)
000747C2 5200                       		addq.b	#1,d0
000747C4 51CB FFF4                  		dbf	d3,loc_71E6A
000747C8                            
000747C8 7602                       		moveq	#2,d3
000747CA 7028                       		moveq	#$28,d0
000747CC                            
000747CC                            loc_71E7C:
000747CC 1203                       		move.b	d3,d1
000747CE 4EBA 0000                  		jsr	sub_7272E(pc)
000747D2 5801                       		addq.b	#4,d1
000747D4 4EBA 0000                  		jsr	sub_7272E(pc)
000747D8 51CB FFF2                  		dbf	d3,loc_71E7C
000747DC                            
000747DC 4EBA 0000                  		jsr	sub_729B6(pc)
000747E0 6000 FDB2                  		bra.w	loc_71C44
000747E4                            ; ===========================================================================
000747E4                            
000747E4                            loc_71E94:				; XREF: loc_71E50
000747E4 422E 0003                  		clr.b	3(a6)
000747E8 7630                       		moveq	#$30,d3
000747EA 4BEE 0040                  		lea	$40(a6),a5
000747EE 7806                       		moveq	#6,d4
000747F0                            
000747F0                            loc_71EA0:
000747F0 0815 0007                  		btst	#7,(a5)
000747F4 6700                       		beq.s	loc_71EB8
000747F6 0815 0002                  		btst	#2,(a5)
000747FA 6600                       		bne.s	loc_71EB8
000747FC 103C 00B4                  		move.b	#-$4C,d0
00074800 122D 000A                  		move.b	$A(a5),d1
00074804 4EBA 0000                  		jsr	sub_72722(pc)
00074808                            
00074808                            loc_71EB8:
00074808 DAC3                       		adda.w	d3,a5
0007480A 51CC FFE4                  		dbf	d4,loc_71EA0
0007480E                            
0007480E 4BEE 0220                  		lea	$220(a6),a5
00074812 7802                       		moveq	#2,d4
00074814                            
00074814                            loc_71EC4:
00074814 0815 0007                  		btst	#7,(a5)
00074818 6700                       		beq.s	loc_71EDC
0007481A 0815 0002                  		btst	#2,(a5)
0007481E 6600                       		bne.s	loc_71EDC
00074820 103C 00B4                  		move.b	#-$4C,d0
00074824 122D 000A                  		move.b	$A(a5),d1
00074828 4EBA 0000                  		jsr	sub_72722(pc)
0007482C                            
0007482C                            loc_71EDC:
0007482C DAC3                       		adda.w	d3,a5
0007482E 51CC FFE4                  		dbf	d4,loc_71EC4
00074832                            
00074832 4BEE 0340                  		lea	$340(a6),a5
00074836 0815 0007                  		btst	#7,(a5)
0007483A 6700                       		beq.s	loc_71EFE
0007483C 0815 0002                  		btst	#2,(a5)
00074840 6600                       		bne.s	loc_71EFE
00074842 103C 00B4                  		move.b	#-$4C,d0
00074846 122D 000A                  		move.b	$A(a5),d1
0007484A 4EBA 0000                  		jsr	sub_72722(pc)
0007484E                            
0007484E                            loc_71EFE:
0007484E 6000 FD44                  		bra.w	loc_71C44
00074852                            
00074852                            ; ---------------------------------------------------------------------------
00074852                            ; Subroutine to	play a sound or	music track
00074852                            ; ---------------------------------------------------------------------------
00074852                            
00074852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074852                            
00074852                            
00074852                            Sound_Play:				; XREF: sub_71B4C
00074852 2079 0007 42B0             		movea.l	(Go_SoundTypes).l,a0
00074858 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007485C 1616                       		move.b	0(a6),d3
0007485E 7802                       		moveq	#2,d4
00074860                            
00074860                            loc_71F12:
00074860 1011                       		move.b	(a1),d0		; move track number to d0
00074862 1200                       		move.b	d0,d1
00074864 4219                       		clr.b	(a1)+
00074866 0400 0081                  		subi.b	#$81,d0
0007486A 6500                       		bcs.s	loc_71F3E
0007486C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074872 6700                       		beq.s	loc_71F2C
00074874 1D41 000A                  		move.b	d1,$A(a6)
00074878 6000                       		bra.s	loc_71F3E
0007487A                            ; ===========================================================================
0007487A                            
0007487A                            loc_71F2C:
0007487A 0240 007F                  		andi.w	#$7F,d0
0007487E 1430 0000                  		move.b	(a0,d0.w),d2
00074882 B403                       		cmp.b	d3,d2
00074884 6500                       		bcs.s	loc_71F3E
00074886 1602                       		move.b	d2,d3
00074888 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007488C                            
0007488C                            loc_71F3E:
0007488C 51CC FFD2                  		dbf	d4,loc_71F12
00074890                            
00074890 4A03                       		tst.b	d3
00074892 6B00                       		bmi.s	locret_71F4A
00074894 1C83                       		move.b	d3,0(a6)
00074896                            
00074896                            locret_71F4A:
00074896 4E75                       		rts	
00074898                            ; End of function Sound_Play
00074898                            
00074898                            
00074898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074898                            
00074898                            
00074898                            Sound_ChkValue:				; XREF: sub_71B4C
00074898 7E00                       		moveq	#0,d7
0007489A 1E2E 0009                  		move.b	9(a6),d7
0007489E 6700 0000                  		beq.w	Sound_E4
000748A2 6A00                       		bpl.s	locret_71F8C
000748A4 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000748AA 0C07 009F                  		cmpi.b	#$9F,d7
000748AE 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000748B2 0C07 00A0                  		cmpi.b	#$A0,d7
000748B6 6500 0000                  		bcs.w	locret_71F8C
000748BA 0C07 00CF                  		cmpi.b	#$CF,d7
000748BE 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000748C2 0C07 00D0                  		cmpi.b	#$D0,d7
000748C6 6500 0000                  		bcs.w	locret_71F8C
000748CA 0C07 00E0                  		cmpi.b	#$E0,d7
000748CE 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000748D2 0C07 00E5                  		cmpi.b	#$E5,d7
000748D6 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000748D8                            
000748D8                            locret_71F8C:
000748D8 4E75                       		rts	
000748DA                            ; ===========================================================================
000748DA                            
000748DA                            Sound_E0toE5				; XREF: Sound_ChkValue
000748DA 0407 00E0                  		subi.b	#$E0,d7
000748DE E54F                       		lsl.w	#2,d7
000748E0 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000748E4                            ; ===========================================================================
000748E4                            
000748E4                            Sound_ExIndex:
000748E4 6000 0000                  		bra.w	Sound_E0
000748E8                            ; ===========================================================================
000748E8 6000 0000                  		bra.w	Sound_E1
000748EC                            ; ===========================================================================
000748EC 6000 0000                  		bra.w	Sound_E2
000748F0                            ; ===========================================================================
000748F0 6000 0000                  		bra.w	Sound_E3
000748F4                            ; ===========================================================================
000748F4 6000 0000                  		bra.w	Sound_E4
000748F8                            ; ===========================================================================
000748F8 6000 0000                  		bra.w	Sound_E5
000748FC                            ; ===========================================================================
000748FC                            ; ---------------------------------------------------------------------------
000748FC                            ; Play "Say-gaa" PCM sound
000748FC                            ; ---------------------------------------------------------------------------
000748FC                            
000748FC                            Sound_E1:				  
000748FC 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00074902 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00074908 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00074910                            PlayPCM_Loop:	  
00074910 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00074916 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007491A 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007491E 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00074920 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00074922 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00074926 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007492C 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00074930 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00074936 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00074938 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007493A                            return_PlayPCM: 
0007493A 584F                       		addq.w	#4,sp 
0007493C 4E75                       		rts
0007493E                            		
0007493E                            ; ---------------------------------------------------------------------------
0007493E                            ; Play you are an idiot pcm sound
0007493E                            ; ---------------------------------------------------------------------------
0007493E                            
0007493E                            Sound_E5:  
0007493E 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00074944 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
0007494A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00074952                            PlayPCM_LoopE5:	  
00074952                            
00074952 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00074958                            		
00074958 5278 FE24                  		addq.w	#1,($FFFFFE24).w
0007495C                            		
0007495C 1038 FE24                  		move.b	($FFFFFE24).w,d0
00074960 0200 000F                  		andi.b	#$F,d0
00074964 6700                       		beq.s	SfxE5SwapPalette
00074966                            		
00074966 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007496A 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007496E 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00074970 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00074972 60DE                       		bra.s	PlayPCM_LoopE5
00074974                            		
00074974                            SfxE5SwapPalette:
00074974                            		
00074974                            		
00074974                            		
00074974 4BF9 00C0 0004             		lea	($C00004).l,a5
0007497A 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00074980                            		
00074980                            		
00074980 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00074986 6700                       		beq.s	@not_black
00074988 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007498E 6000                       		bra.s	@merge
00074990                            	@not_black:
00074990 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00074996                            	@merge:
00074996 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007499A 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007499E 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000749A4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000749A8                            		
000749A8 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000749AC 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000749B0 60A0                       		bra.s	PlayPCM_LoopE5
000749B2                            		
000749B2                            ; ===========================================================================
000749B2                            ; ---------------------------------------------------------------------------
000749B2                            ; Play music track $81-$9F
000749B2                            ; ---------------------------------------------------------------------------
000749B2                            
000749B2                            Sound_81to9F:				; XREF: Sound_ChkValue
000749B2 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000749B6 6600                       		bne.s	loc_72024	; if not, branch
000749B8 4A2E 0027                  		tst.b	$27(a6)
000749BC 6600 0000                  		bne.w	loc_721B6
000749C0 4BEE 0040                  		lea	$40(a6),a5
000749C4 7009                       		moveq	#9,d0
000749C6                            
000749C6                            loc_71FE6:
000749C6 0895 0002                  		bclr	#2,(a5)
000749CA DAFC 0030                  		adda.w	#$30,a5
000749CE 51C8 FFF6                  		dbf	d0,loc_71FE6
000749D2                            
000749D2 4BEE 0220                  		lea	$220(a6),a5
000749D6 7005                       		moveq	#5,d0
000749D8                            
000749D8                            loc_71FF8:
000749D8 0895 0007                  		bclr	#7,(a5)
000749DC DAFC 0030                  		adda.w	#$30,a5
000749E0 51C8 FFF6                  		dbf	d0,loc_71FF8
000749E4 4216                       		clr.b	0(a6)
000749E6 204E                       		movea.l	a6,a0
000749E8 43EE 03A0                  		lea	$3A0(a6),a1
000749EC 303C 0087                  		move.w	#$87,d0
000749F0                            
000749F0                            loc_72012:
000749F0 22D8                       		move.l	(a0)+,(a1)+
000749F2 51C8 FFFC                  		dbf	d0,loc_72012
000749F6                            
000749F6 1D7C 0080 0027             		move.b	#$80,$27(a6)
000749FC 4216                       		clr.b	0(a6)
000749FE 6000                       		bra.s	loc_7202C
00074A00                            ; ===========================================================================
00074A00                            
00074A00                            loc_72024:
00074A00 422E 0027                  		clr.b	$27(a6)
00074A04 422E 0026                  		clr.b	$26(a6)
00074A08                            
00074A08                            loc_7202C:
00074A08 4EBA 0000                  		jsr	sub_725CA(pc)
00074A0C 2879 0007 42C0             		movea.l	(off_719A0).l,a4
00074A12 0407 0081                  		subi.b	#$81,d7
00074A16 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00074A1C 2879 0007 42B8             		movea.l	(Go_MusicIndex).l,a4
00074A22 E54F                       		lsl.w	#2,d7
00074A24 2874 7000                  		movea.l	(a4,d7.w),a4
00074A28 7000                       		moveq	#0,d0
00074A2A 3014                       		move.w	(a4),d0
00074A2C D08C                       		add.l	a4,d0
00074A2E 2D40 0018                  		move.l	d0,$18(a6)
00074A32 102C 0005                  		move.b	5(a4),d0
00074A36 1D40 0028                  		move.b	d0,$28(a6)
00074A3A 4A2E 002A                  		tst.b	$2A(a6)
00074A3E 6700                       		beq.s	loc_72068
00074A40 102E 0029                  		move.b	$29(a6),d0
00074A44                            
00074A44                            loc_72068:
00074A44 1D40 0002                  		move.b	d0,2(a6)
00074A48 1D40 0001                  		move.b	d0,1(a6)
00074A4C 7200                       		moveq	#0,d1
00074A4E 264C                       		movea.l	a4,a3
00074A50 5C4C                       		addq.w	#6,a4
00074A52 7E00                       		moveq	#0,d7
00074A54 1E2B 0002                  		move.b	2(a3),d7
00074A58 6700 0000                  		beq.w	loc_72114
00074A5C 5307                       		subq.b	#1,d7
00074A5E 123C 00C0                  		move.b	#-$40,d1
00074A62 182B 0004                  		move.b	4(a3),d4
00074A66 7C30                       		moveq	#$30,d6
00074A68 1A3C 0001                  		move.b	#1,d5
00074A6C 43EE 0040                  		lea	$40(a6),a1
00074A70 45FA 0000                  		lea	byte_721BA(pc),a2
00074A74                            
00074A74                            loc_72098:
00074A74 08D1 0007                  		bset	#7,(a1)
00074A78 135A 0001                  		move.b	(a2)+,1(a1)
00074A7C 1344 0002                  		move.b	d4,2(a1)
00074A80 1346 000D                  		move.b	d6,$D(a1)
00074A84 1341 000A                  		move.b	d1,$A(a1)
00074A88 1345 000E                  		move.b	d5,$E(a1)
00074A8C 7000                       		moveq	#0,d0
00074A8E 301C                       		move.w	(a4)+,d0
00074A90 D08B                       		add.l	a3,d0
00074A92 2340 0004                  		move.l	d0,4(a1)
00074A96 335C 0008                  		move.w	(a4)+,8(a1)
00074A9A D2C6                       		adda.w	d6,a1
00074A9C 51CF FFD6                  		dbf	d7,loc_72098
00074AA0 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00074AA6 6600                       		bne.s	loc_720D8
00074AA8 702B                       		moveq	#$2B,d0
00074AAA 7200                       		moveq	#0,d1
00074AAC 4EBA 0000                  		jsr	sub_7272E(pc)
00074AB0 6000 0000                  		bra.w	loc_72114
00074AB4                            ; ===========================================================================
00074AB4                            
00074AB4                            loc_720D8:
00074AB4 7028                       		moveq	#$28,d0
00074AB6 7206                       		moveq	#6,d1
00074AB8 4EBA 0000                  		jsr	sub_7272E(pc)
00074ABC 103C 0042                  		move.b	#$42,d0
00074AC0 727F                       		moveq	#$7F,d1
00074AC2 4EBA 0000                  		jsr	sub_72764(pc)
00074AC6 103C 004A                  		move.b	#$4A,d0
00074ACA 727F                       		moveq	#$7F,d1
00074ACC 4EBA 0000                  		jsr	sub_72764(pc)
00074AD0 103C 0046                  		move.b	#$46,d0
00074AD4 727F                       		moveq	#$7F,d1
00074AD6 4EBA 0000                  		jsr	sub_72764(pc)
00074ADA 103C 004E                  		move.b	#$4E,d0
00074ADE 727F                       		moveq	#$7F,d1
00074AE0 4EBA 0000                  		jsr	sub_72764(pc)
00074AE4 103C 00B6                  		move.b	#-$4A,d0
00074AE8 123C 00C0                  		move.b	#-$40,d1
00074AEC 4EBA 0000                  		jsr	sub_72764(pc)
00074AF0                            
00074AF0                            loc_72114:
00074AF0 7E00                       		moveq	#0,d7
00074AF2 1E2B 0003                  		move.b	3(a3),d7
00074AF6 6700                       		beq.s	loc_72154
00074AF8 5307                       		subq.b	#1,d7
00074AFA 43EE 0190                  		lea	$190(a6),a1
00074AFE 45FA 0000                  		lea	byte_721C2(pc),a2
00074B02                            
00074B02                            loc_72126:
00074B02 08D1 0007                  		bset	#7,(a1)
00074B06 135A 0001                  		move.b	(a2)+,1(a1)
00074B0A 1344 0002                  		move.b	d4,2(a1)
00074B0E 1346 000D                  		move.b	d6,$D(a1)
00074B12 1345 000E                  		move.b	d5,$E(a1)
00074B16 7000                       		moveq	#0,d0
00074B18 301C                       		move.w	(a4)+,d0
00074B1A D08B                       		add.l	a3,d0
00074B1C 2340 0004                  		move.l	d0,4(a1)
00074B20 335C 0008                  		move.w	(a4)+,8(a1)
00074B24 101C                       		move.b	(a4)+,d0
00074B26 135C 000B                  		move.b	(a4)+,$B(a1)
00074B2A D2C6                       		adda.w	d6,a1
00074B2C 51CF FFD4                  		dbf	d7,loc_72126
00074B30                            
00074B30                            loc_72154:
00074B30 43EE 0220                  		lea	$220(a6),a1
00074B34 7E05                       		moveq	#5,d7
00074B36                            
00074B36                            loc_7215A:
00074B36 4A11                       		tst.b	(a1)
00074B38 6A00 0000                  		bpl.w	loc_7217C
00074B3C 7000                       		moveq	#0,d0
00074B3E 1029 0001                  		move.b	1(a1),d0
00074B42 6B00                       		bmi.s	loc_7216E
00074B44 5500                       		subq.b	#2,d0
00074B46 E508                       		lsl.b	#2,d0
00074B48 6000                       		bra.s	loc_72170
00074B4A                            ; ===========================================================================
00074B4A                            
00074B4A                            loc_7216E:
00074B4A E608                       		lsr.b	#3,d0
00074B4C                            
00074B4C                            loc_72170:
00074B4C 41FA 0000                  		lea	dword_722CC(pc),a0
00074B50 2070 0000                  		movea.l	(a0,d0.w),a0
00074B54 08D0 0002                  		bset	#2,(a0)
00074B58                            
00074B58                            loc_7217C:
00074B58 D2C6                       		adda.w	d6,a1
00074B5A 51CF FFDA                  		dbf	d7,loc_7215A
00074B5E                            
00074B5E 4A6E 0340                  		tst.w	$340(a6)
00074B62 6A00                       		bpl.s	loc_7218E
00074B64 08EE 0002 0100             		bset	#2,$100(a6)
00074B6A                            
00074B6A                            loc_7218E:
00074B6A 4A6E 0370                  		tst.w	$370(a6)
00074B6E 6A00                       		bpl.s	loc_7219A
00074B70 08EE 0002 01F0             		bset	#2,$1F0(a6)
00074B76                            
00074B76                            loc_7219A:
00074B76 4BEE 0070                  		lea	$70(a6),a5
00074B7A 7805                       		moveq	#5,d4
00074B7C                            
00074B7C                            loc_721A0:
00074B7C 4EBA 0000                  		jsr	sub_726FE(pc)
00074B80 DAC6                       		adda.w	d6,a5
00074B82 51CC FFF8                  		dbf	d4,loc_721A0
00074B86 7802                       		moveq	#2,d4
00074B88                            
00074B88                            loc_721AC:
00074B88 4EBA 0000                  		jsr	sub_729A0(pc)
00074B8C DAC6                       		adda.w	d6,a5
00074B8E 51CC FFF8                  		dbf	d4,loc_721AC
00074B92                            
00074B92                            loc_721B6:
00074B92 584F                       		addq.w	#4,sp
00074B94 4E75                       		rts	
00074B96                            ; ===========================================================================
00074B96 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00074B9E                            		even
00074B9E 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00074BA2                            		even
00074BA2                            ; ===========================================================================
00074BA2                            ; ---------------------------------------------------------------------------
00074BA2                            ; Play normal sound effect
00074BA2                            ; ---------------------------------------------------------------------------
00074BA2                            
00074BA2                            Sound_A0toCF:				; XREF: Sound_ChkValue
00074BA2 4A2E 0027                  		tst.b	$27(a6)
00074BA6 6600 0000                  		bne.w	loc_722C6
00074BAA 4A2E 0004                  		tst.b	4(a6)
00074BAE 6600 0000                  		bne.w	loc_722C6
00074BB2 4A2E 0024                  		tst.b	$24(a6)
00074BB6 6600 0000                  		bne.w	loc_722C6
00074BBA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00074BBE 6600                       		bne.s	Sound_notB5	; if not, branch
00074BC0 4A2E 002B                  		tst.b	$2B(a6)
00074BC4 6600                       		bne.s	loc_721EE
00074BC6 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00074BCA                            
00074BCA                            loc_721EE:
00074BCA 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00074BD0                            
00074BD0                            Sound_notB5:
00074BD0 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00074BD4 6600                       		bne.s	Sound_notA7	; if not, branch
00074BD6 4A2E 002C                  		tst.b	$2C(a6)
00074BDA 6600 0000                  		bne.w	locret_722C4
00074BDE 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00074BE4                            
00074BE4                            Sound_notA7:
00074BE4 2079 0007 42BC             		movea.l	(Go_SoundIndex).l,a0
00074BEA 0407 00A0                  		subi.b	#$A0,d7
00074BEE E54F                       		lsl.w	#2,d7
00074BF0 2670 7000                  		movea.l	(a0,d7.w),a3
00074BF4 224B                       		movea.l	a3,a1
00074BF6 7200                       		moveq	#0,d1
00074BF8 3219                       		move.w	(a1)+,d1
00074BFA D28B                       		add.l	a3,d1
00074BFC 1A19                       		move.b	(a1)+,d5
00074BFE 1E19                       		move.b	(a1)+,d7
00074C00 5307                       		subq.b	#1,d7
00074C02 7C30                       		moveq	#$30,d6
00074C04                            
00074C04                            loc_72228:
00074C04 7600                       		moveq	#0,d3
00074C06 1629 0001                  		move.b	1(a1),d3
00074C0A 1803                       		move.b	d3,d4
00074C0C 6B00                       		bmi.s	loc_72244
00074C0E 5543                       		subq.w	#2,d3
00074C10 E54B                       		lsl.w	#2,d3
00074C12 4BFA 0000                  		lea	dword_722CC(pc),a5
00074C16 2A75 3000                  		movea.l	(a5,d3.w),a5
00074C1A 08D5 0002                  		bset	#2,(a5)
00074C1E 6000                       		bra.s	loc_7226E
00074C20                            ; ===========================================================================
00074C20                            
00074C20                            loc_72244:
00074C20 E64B                       		lsr.w	#3,d3
00074C22 4BFA 0000                  		lea	dword_722CC(pc),a5
00074C26 2A75 3000                  		movea.l	(a5,d3.w),a5
00074C2A 08D5 0002                  		bset	#2,(a5)
00074C2E 0C04 00C0                  		cmpi.b	#$C0,d4
00074C32 6600                       		bne.s	loc_7226E
00074C34 1004                       		move.b	d4,d0
00074C36 0000 001F                  		ori.b	#$1F,d0
00074C3A 13C0 00C0 0011             		move.b	d0,($C00011).l
00074C40 0840 0005                  		bchg	#5,d0
00074C44 13C0 00C0 0011             		move.b	d0,($C00011).l
00074C4A                            
00074C4A                            loc_7226E:
00074C4A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00074C4E 244D                       		movea.l	a5,a2
00074C50 700B                       		moveq	#$B,d0
00074C52                            
00074C52                            loc_72276:
00074C52 429A                       		clr.l	(a2)+
00074C54 51C8 FFFC                  		dbf	d0,loc_72276
00074C58                            
00074C58 3A99                       		move.w	(a1)+,(a5)
00074C5A 1B45 0002                  		move.b	d5,2(a5)
00074C5E 7000                       		moveq	#0,d0
00074C60 3019                       		move.w	(a1)+,d0
00074C62 D08B                       		add.l	a3,d0
00074C64 2B40 0004                  		move.l	d0,4(a5)
00074C68 3B59 0008                  		move.w	(a1)+,8(a5)
00074C6C 1B7C 0001 000E             		move.b	#1,$E(a5)
00074C72 1B46 000D                  		move.b	d6,$D(a5)
00074C76 4A04                       		tst.b	d4
00074C78 6B00                       		bmi.s	loc_722A8
00074C7A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00074C80 2B41 0020                  		move.l	d1,$20(a5)
00074C84                            
00074C84                            loc_722A8:
00074C84 51CF FF7E                  		dbf	d7,loc_72228
00074C88                            
00074C88 4A2E 0250                  		tst.b	$250(a6)
00074C8C 6A00                       		bpl.s	loc_722B8
00074C8E 08EE 0002 0340             		bset	#2,$340(a6)
00074C94                            
00074C94                            loc_722B8:
00074C94 4A2E 0310                  		tst.b	$310(a6)
00074C98 6A00                       		bpl.s	locret_722C4
00074C9A 08EE 0002 0370             		bset	#2,$370(a6)
00074CA0                            
00074CA0                            locret_722C4:
00074CA0 4E75                       		rts	
00074CA2                            ; ===========================================================================
00074CA2                            
00074CA2                            loc_722C6:
00074CA2 4216                       		clr.b	0(a6)
00074CA4 4E75                       		rts	
00074CA6                            ; ===========================================================================
00074CA6 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00074CAA 0000 0000                  		dc.l 0
00074CAE 00FF F100                  		dc.l $FFF100
00074CB2 00FF F130                  		dc.l $FFF130
00074CB6 00FF F190                  		dc.l $FFF190
00074CBA 00FF F1C0                  		dc.l $FFF1C0
00074CBE 00FF F1F0                  		dc.l $FFF1F0
00074CC2 00FF F1F0                  		dc.l $FFF1F0
00074CC6 00FF F220                  dword_722EC:	dc.l $FFF220
00074CCA 0000 0000                  		dc.l 0
00074CCE 00FF F250                  		dc.l $FFF250
00074CD2 00FF F280                  		dc.l $FFF280
00074CD6 00FF F2B0                  		dc.l $FFF2B0
00074CDA 00FF F2E0                  		dc.l $FFF2E0
00074CDE 00FF F310                  		dc.l $FFF310
00074CE2 00FF F310                  		dc.l $FFF310
00074CE6                            ; ===========================================================================
00074CE6                            ; ---------------------------------------------------------------------------
00074CE6                            ; Play GHZ waterfall sound
00074CE6                            ; ---------------------------------------------------------------------------
00074CE6                            
00074CE6                            Sound_D0toDF:				; XREF: Sound_ChkValue
00074CE6 4A2E 0027                  		tst.b	$27(a6)
00074CEA 6600 0000                  		bne.w	locret_723C6
00074CEE 4A2E 0004                  		tst.b	4(a6)
00074CF2 6600 0000                  		bne.w	locret_723C6
00074CF6 4A2E 0024                  		tst.b	$24(a6)
00074CFA 6600 0000                  		bne.w	locret_723C6
00074CFE 2079 0007 42B4             		movea.l	(Go_SoundD0).l,a0
00074D04 0407 00D0                  		subi.b	#$D0,d7
00074D08 E54F                       		lsl.w	#2,d7
00074D0A 2670 7000                  		movea.l	(a0,d7.w),a3
00074D0E 224B                       		movea.l	a3,a1
00074D10 7000                       		moveq	#0,d0
00074D12 3019                       		move.w	(a1)+,d0
00074D14 D08B                       		add.l	a3,d0
00074D16 2D40 0020                  		move.l	d0,$20(a6)
00074D1A 1A19                       		move.b	(a1)+,d5
00074D1C 1E19                       		move.b	(a1)+,d7
00074D1E 5307                       		subq.b	#1,d7
00074D20 7C30                       		moveq	#$30,d6
00074D22                            
00074D22                            loc_72348:
00074D22 1829 0001                  		move.b	1(a1),d4
00074D26 6B00                       		bmi.s	loc_7235A
00074D28 08EE 0002 0100             		bset	#2,$100(a6)
00074D2E 4BEE 0340                  		lea	$340(a6),a5
00074D32 6000                       		bra.s	loc_72364
00074D34                            ; ===========================================================================
00074D34                            
00074D34                            loc_7235A:
00074D34 08EE 0002 01F0             		bset	#2,$1F0(a6)
00074D3A 4BEE 0370                  		lea	$370(a6),a5
00074D3E                            
00074D3E                            loc_72364:
00074D3E 244D                       		movea.l	a5,a2
00074D40 700B                       		moveq	#$B,d0
00074D42                            
00074D42                            loc_72368:
00074D42 429A                       		clr.l	(a2)+
00074D44 51C8 FFFC                  		dbf	d0,loc_72368
00074D48                            
00074D48 3A99                       		move.w	(a1)+,(a5)
00074D4A 1B45 0002                  		move.b	d5,2(a5)
00074D4E 7000                       		moveq	#0,d0
00074D50 3019                       		move.w	(a1)+,d0
00074D52 D08B                       		add.l	a3,d0
00074D54 2B40 0004                  		move.l	d0,4(a5)
00074D58 3B59 0008                  		move.w	(a1)+,8(a5)
00074D5C 1B7C 0001 000E             		move.b	#1,$E(a5)
00074D62 1B46 000D                  		move.b	d6,$D(a5)
00074D66 4A04                       		tst.b	d4
00074D68 6B00                       		bmi.s	loc_72396
00074D6A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00074D70                            
00074D70                            loc_72396:
00074D70 51CF FFB0                  		dbf	d7,loc_72348
00074D74                            
00074D74 4A2E 0250                  		tst.b	$250(a6)
00074D78 6A00                       		bpl.s	loc_723A6
00074D7A 08EE 0002 0340             		bset	#2,$340(a6)
00074D80                            
00074D80                            loc_723A6:
00074D80 4A2E 0310                  		tst.b	$310(a6)
00074D84 6A00                       		bpl.s	locret_723C6
00074D86 08EE 0002 0370             		bset	#2,$370(a6)
00074D8C 0004 001F                  		ori.b	#$1F,d4
00074D90 13C4 00C0 0011             		move.b	d4,($C00011).l
00074D96 0844 0005                  		bchg	#5,d4
00074D9A 13C4 00C0 0011             		move.b	d4,($C00011).l
00074DA0                            
00074DA0                            locret_723C6:
00074DA0 4E75                       		rts	
00074DA2                            ; End of function Sound_ChkValue
00074DA2                            
00074DA2                            ; ===========================================================================
00074DA2 00FF F100                  		dc.l $FFF100
00074DA6 00FF F1F0                  		dc.l $FFF1F0
00074DAA 00FF F250                  		dc.l $FFF250
00074DAE 00FF F310                  		dc.l $FFF310
00074DB2 00FF F340                  		dc.l $FFF340
00074DB6 00FF F370                  		dc.l $FFF370
00074DBA                            
00074DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DBA                            
00074DBA                            
00074DBA                            Snd_FadeOut1:				; XREF: Sound_E0
00074DBA 4216                       		clr.b	0(a6)
00074DBC 4BEE 0220                  		lea	$220(a6),a5
00074DC0 7E05                       		moveq	#5,d7
00074DC2                            
00074DC2                            loc_723EA:
00074DC2 4A15                       		tst.b	(a5)
00074DC4 6A00 0000                  		bpl.w	loc_72472
00074DC8 0895 0007                  		bclr	#7,(a5)
00074DCC 7600                       		moveq	#0,d3
00074DCE 162D 0001                  		move.b	1(a5),d3
00074DD2 6B00                       		bmi.s	loc_7243C
00074DD4 4EBA 0000                  		jsr	sub_726FE(pc)
00074DD8 0C03 0004                  		cmpi.b	#4,d3
00074DDC 6600                       		bne.s	loc_72416
00074DDE 4A2E 0340                  		tst.b	$340(a6)
00074DE2 6A00                       		bpl.s	loc_72416
00074DE4 4BEE 0340                  		lea	$340(a6),a5
00074DE8 226E 0020                  		movea.l	$20(a6),a1
00074DEC 6000                       		bra.s	loc_72428
00074DEE                            ; ===========================================================================
00074DEE                            
00074DEE                            loc_72416:
00074DEE 5503                       		subq.b	#2,d3
00074DF0 E50B                       		lsl.b	#2,d3
00074DF2 41FA FEB2                  		lea	dword_722CC(pc),a0
00074DF6 264D                       		movea.l	a5,a3
00074DF8 2A70 3000                  		movea.l	(a0,d3.w),a5
00074DFC 226E 0018                  		movea.l	$18(a6),a1
00074E00                            
00074E00                            loc_72428:
00074E00 0895 0002                  		bclr	#2,(a5)
00074E04 08D5 0001                  		bset	#1,(a5)
00074E08 102D 000B                  		move.b	$B(a5),d0
00074E0C 4EBA 0000                  		jsr	sub_72C4E(pc)
00074E10 2A4B                       		movea.l	a3,a5
00074E12 6000                       		bra.s	loc_72472
00074E14                            ; ===========================================================================
00074E14                            
00074E14                            loc_7243C:
00074E14 4EBA 0000                  		jsr	sub_729A0(pc)
00074E18 41EE 0370                  		lea	$370(a6),a0
00074E1C 0C03 00E0                  		cmpi.b	#$E0,d3
00074E20 6700                       		beq.s	loc_7245A
00074E22 0C03 00C0                  		cmpi.b	#$C0,d3
00074E26 6700                       		beq.s	loc_7245A
00074E28 E60B                       		lsr.b	#3,d3
00074E2A 41FA FE7A                  		lea	dword_722CC(pc),a0
00074E2E 2070 3000                  		movea.l	(a0,d3.w),a0
00074E32                            
00074E32                            loc_7245A:
00074E32 0890 0002                  		bclr	#2,(a0)
00074E36 08D0 0001                  		bset	#1,(a0)
00074E3A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00074E40 6600                       		bne.s	loc_72472
00074E42 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00074E4A                            
00074E4A                            loc_72472:
00074E4A DAFC 0030                  		adda.w	#$30,a5
00074E4E 51CF FF72                  		dbf	d7,loc_723EA
00074E52                            
00074E52 4E75                       		rts	
00074E54                            ; End of function Snd_FadeOut1
00074E54                            
00074E54                            
00074E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E54                            
00074E54                            
00074E54                            Snd_FadeOut2:				; XREF: Sound_E0
00074E54 4BEE 0340                  		lea	$340(a6),a5
00074E58 4A15                       		tst.b	(a5)
00074E5A 6A00                       		bpl.s	loc_724AE
00074E5C 0895 0007                  		bclr	#7,(a5)
00074E60 0815 0002                  		btst	#2,(a5)
00074E64 6600                       		bne.s	loc_724AE
00074E66 4EBA 0000                  		jsr	loc_7270A(pc)
00074E6A 4BEE 0100                  		lea	$100(a6),a5
00074E6E 0895 0002                  		bclr	#2,(a5)
00074E72 08D5 0001                  		bset	#1,(a5)
00074E76 4A15                       		tst.b	(a5)
00074E78 6A00                       		bpl.s	loc_724AE
00074E7A 226E 0018                  		movea.l	$18(a6),a1
00074E7E 102D 000B                  		move.b	$B(a5),d0
00074E82 4EBA 0000                  		jsr	sub_72C4E(pc)
00074E86                            
00074E86                            loc_724AE:
00074E86 4BEE 0370                  		lea	$370(a6),a5
00074E8A 4A15                       		tst.b	(a5)
00074E8C 6A00                       		bpl.s	locret_724E4
00074E8E 0895 0007                  		bclr	#7,(a5)
00074E92 0815 0002                  		btst	#2,(a5)
00074E96 6600                       		bne.s	locret_724E4
00074E98 4EBA 0000                  		jsr	loc_729A6(pc)
00074E9C 4BEE 01F0                  		lea	$1F0(a6),a5
00074EA0 0895 0002                  		bclr	#2,(a5)
00074EA4 08D5 0001                  		bset	#1,(a5)
00074EA8 4A15                       		tst.b	(a5)
00074EAA 6A00                       		bpl.s	locret_724E4
00074EAC 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00074EB2 6600                       		bne.s	locret_724E4
00074EB4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00074EBC                            
00074EBC                            locret_724E4:
00074EBC 4E75                       		rts	
00074EBE                            ; End of function Snd_FadeOut2
00074EBE                            
00074EBE                            ; ===========================================================================
00074EBE                            ; ---------------------------------------------------------------------------
00074EBE                            ; Fade out music
00074EBE                            ; ---------------------------------------------------------------------------
00074EBE                            
00074EBE                            Sound_E0:				; XREF: Sound_ExIndex
00074EBE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00074EC2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00074EC6 1D7C 0003 0006             		move.b	#3,6(a6)
00074ECC 1D7C 0028 0004             		move.b	#$28,4(a6)
00074ED2 422E 0040                  		clr.b	$40(a6)
00074ED6 422E 002A                  		clr.b	$2A(a6)
00074EDA 4E75                       		rts	
00074EDC                            
00074EDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074EDC                            
00074EDC                            
00074EDC                            sub_72504:				; XREF: sub_71B4C
00074EDC 102E 0006                  		move.b	6(a6),d0
00074EE0 6700                       		beq.s	loc_72510
00074EE2 532E 0006                  		subq.b	#1,6(a6)
00074EE6 4E75                       		rts	
00074EE8                            ; ===========================================================================
00074EE8                            
00074EE8                            loc_72510:
00074EE8 532E 0004                  		subq.b	#1,4(a6)
00074EEC 6700 0000                  		beq.w	Sound_E4
00074EF0 1D7C 0003 0006             		move.b	#3,6(a6)
00074EF6 4BEE 0070                  		lea	$70(a6),a5
00074EFA 7E05                       		moveq	#5,d7
00074EFC                            
00074EFC                            loc_72524:
00074EFC 4A15                       		tst.b	(a5)
00074EFE 6A00                       		bpl.s	loc_72538
00074F00 522D 0009                  		addq.b	#1,9(a5)
00074F04 6A00                       		bpl.s	loc_72534
00074F06 0895 0007                  		bclr	#7,(a5)
00074F0A 6000                       		bra.s	loc_72538
00074F0C                            ; ===========================================================================
00074F0C                            
00074F0C                            loc_72534:
00074F0C 4EBA 0000                  		jsr	sub_72CB4(pc)
00074F10                            
00074F10                            loc_72538:
00074F10 DAFC 0030                  		adda.w	#$30,a5
00074F14 51CF FFE6                  		dbf	d7,loc_72524
00074F18                            
00074F18 7E02                       		moveq	#2,d7
00074F1A                            
00074F1A                            loc_72542:
00074F1A 4A15                       		tst.b	(a5)
00074F1C 6A00                       		bpl.s	loc_72560
00074F1E 522D 0009                  		addq.b	#1,9(a5)
00074F22 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00074F28 6500                       		bcs.s	loc_72558
00074F2A 0895 0007                  		bclr	#7,(a5)
00074F2E 6000                       		bra.s	loc_72560
00074F30                            ; ===========================================================================
00074F30                            
00074F30                            loc_72558:
00074F30 1C2D 0009                  		move.b	9(a5),d6
00074F34 4EBA 0000                  		jsr	sub_7296A(pc)
00074F38                            
00074F38                            loc_72560:
00074F38 DAFC 0030                  		adda.w	#$30,a5
00074F3C 51CF FFDC                  		dbf	d7,loc_72542
00074F40                            
00074F40 4E75                       		rts	
00074F42                            ; End of function sub_72504
00074F42                            
00074F42                            
00074F42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F42                            
00074F42                            
00074F42                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00074F42 7602                       		moveq	#2,d3
00074F44 7028                       		moveq	#$28,d0
00074F46                            
00074F46                            loc_7256E:
00074F46 1203                       		move.b	d3,d1
00074F48 4EBA 0000                  		jsr	sub_7272E(pc)
00074F4C 5801                       		addq.b	#4,d1
00074F4E 4EBA 0000                  		jsr	sub_7272E(pc)
00074F52 51CB FFF2                  		dbf	d3,loc_7256E
00074F56                            
00074F56 7040                       		moveq	#$40,d0
00074F58 727F                       		moveq	#$7F,d1
00074F5A 7802                       		moveq	#2,d4
00074F5C                            
00074F5C                            loc_72584:
00074F5C 7603                       		moveq	#3,d3
00074F5E                            
00074F5E                            loc_72586:
00074F5E 4EBA 0000                  		jsr	sub_7272E(pc)
00074F62 4EBA 0000                  		jsr	sub_72764(pc)
00074F66 5840                       		addq.w	#4,d0
00074F68 51CB FFF4                  		dbf	d3,loc_72586
00074F6C                            
00074F6C 0400 000F                  		subi.b	#$F,d0
00074F70 51CC FFEA                  		dbf	d4,loc_72584
00074F74                            
00074F74 4E75                       		rts	
00074F76                            ; End of function sub_7256A
00074F76                            
00074F76                            ; ===========================================================================
00074F76                            ; ---------------------------------------------------------------------------
00074F76                            ; Stop music
00074F76                            ; ---------------------------------------------------------------------------
00074F76                            
00074F76                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00074F76 702B                       		moveq	#$2B,d0
00074F78 123C 0080                  		move.b	#$80,d1
00074F7C 4EBA 0000                  		jsr	sub_7272E(pc)
00074F80 7027                       		moveq	#$27,d0
00074F82 7200                       		moveq	#0,d1
00074F84 4EBA 0000                  		jsr	sub_7272E(pc)
00074F88 204E                       		movea.l	a6,a0
00074F8A 303C 00E3                  		move.w	#$E3,d0
00074F8E                            
00074F8E                            loc_725B6:
00074F8E 4298                       		clr.l	(a0)+
00074F90 51C8 FFFC                  		dbf	d0,loc_725B6
00074F94                            
00074F94 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00074F9A 4EBA FFA6                  		jsr	sub_7256A(pc)
00074F9E 6000 0000                  		bra.w	sub_729B6
00074FA2                            
00074FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FA2                            
00074FA2                            
00074FA2                            sub_725CA:				; XREF: Sound_ChkValue
00074FA2 204E                       		movea.l	a6,a0
00074FA4 1216                       		move.b	0(a6),d1
00074FA6 142E 0027                  		move.b	$27(a6),d2
00074FAA 162E 002A                  		move.b	$2A(a6),d3
00074FAE 182E 0026                  		move.b	$26(a6),d4
00074FB2 3A2E 000A                  		move.w	$A(a6),d5
00074FB6 303C 0087                  		move.w	#$87,d0
00074FBA                            
00074FBA                            loc_725E4:
00074FBA 4298                       		clr.l	(a0)+
00074FBC 51C8 FFFC                  		dbf	d0,loc_725E4
00074FC0                            
00074FC0 1C81                       		move.b	d1,0(a6)
00074FC2 1D42 0027                  		move.b	d2,$27(a6)
00074FC6 1D43 002A                  		move.b	d3,$2A(a6)
00074FCA 1D44 0026                  		move.b	d4,$26(a6)
00074FCE 3D45 000A                  		move.w	d5,$A(a6)
00074FD2 1D7C 0080 0009             		move.b	#$80,9(a6)
00074FD8 4EBA FF68                  		jsr	sub_7256A(pc)
00074FDC 6000 0000                  		bra.w	sub_729B6
00074FE0                            ; End of function sub_725CA
00074FE0                            
00074FE0                            
00074FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FE0                            
00074FE0                            
00074FE0                            sub_7260C:				; XREF: sub_71B4C
00074FE0 1D6E 0002 0001             		move.b	2(a6),1(a6)
00074FE6 41EE 004E                  		lea	$4E(a6),a0
00074FEA 7030                       		moveq	#$30,d0
00074FEC 7209                       		moveq	#9,d1
00074FEE                            
00074FEE                            loc_7261A:
00074FEE 5210                       		addq.b	#1,(a0)
00074FF0 D0C0                       		adda.w	d0,a0
00074FF2 51C9 FFFA                  		dbf	d1,loc_7261A
00074FF6                            
00074FF6 4E75                       		rts	
00074FF8                            ; End of function sub_7260C
00074FF8                            
00074FF8                            ; ===========================================================================
00074FF8                            ; ---------------------------------------------------------------------------
00074FF8                            ; Speed	up music
00074FF8                            ; ---------------------------------------------------------------------------
00074FF8                            
00074FF8                            Sound_E2:				; XREF: Sound_ExIndex
00074FF8 4A2E 0027                  		tst.b	$27(a6)
00074FFC 6600                       		bne.s	loc_7263E
00074FFE 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00075004 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007500A 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00075010 4E75                       		rts	
00075012                            ; ===========================================================================
00075012                            
00075012                            loc_7263E:
00075012 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00075018 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007501E 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00075024 4E75                       		rts	
00075026                            ; ===========================================================================
00075026                            ; ---------------------------------------------------------------------------
00075026                            ; Change music back to normal speed
00075026                            ; ---------------------------------------------------------------------------
00075026                            
00075026                            Sound_E3:				; XREF: Sound_ExIndex
00075026 4A2E 0027                  		tst.b	$27(a6)
0007502A 6600                       		bne.s	loc_7266A
0007502C 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00075032 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00075038 422E 002A                  		clr.b	$2A(a6)
0007503C 4E75                       		rts	
0007503E                            ; ===========================================================================
0007503E                            
0007503E                            loc_7266A:
0007503E 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00075044 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007504A 422E 03CA                  		clr.b	$3CA(a6)
0007504E 4E75                       		rts	
00075050                            
00075050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075050                            
00075050                            
00075050                            sub_7267C:				; XREF: sub_71B4C
00075050 4A2E 0025                  		tst.b	$25(a6)
00075054 6700                       		beq.s	loc_72688
00075056 532E 0025                  		subq.b	#1,$25(a6)
0007505A 4E75                       		rts	
0007505C                            ; ===========================================================================
0007505C                            
0007505C                            loc_72688:
0007505C 4A2E 0026                  		tst.b	$26(a6)
00075060 6700                       		beq.s	loc_726D6
00075062 532E 0026                  		subq.b	#1,$26(a6)
00075066 1D7C 0002 0025             		move.b	#2,$25(a6)
0007506C 4BEE 0070                  		lea	$70(a6),a5
00075070 7E05                       		moveq	#5,d7
00075072                            
00075072                            loc_7269E:
00075072 4A15                       		tst.b	(a5)
00075074 6A00                       		bpl.s	loc_726AA
00075076 532D 0009                  		subq.b	#1,9(a5)
0007507A 4EBA 0000                  		jsr	sub_72CB4(pc)
0007507E                            
0007507E                            loc_726AA:
0007507E DAFC 0030                  		adda.w	#$30,a5
00075082 51CF FFEE                  		dbf	d7,loc_7269E
00075086 7E02                       		moveq	#2,d7
00075088                            
00075088                            loc_726B4:
00075088 4A15                       		tst.b	(a5)
0007508A 6A00                       		bpl.s	loc_726CC
0007508C 532D 0009                  		subq.b	#1,9(a5)
00075090 1C2D 0009                  		move.b	9(a5),d6
00075094 0C06 0010                  		cmpi.b	#$10,d6
00075098 6500                       		bcs.s	loc_726C8
0007509A 7C0F                       		moveq	#$F,d6
0007509C                            
0007509C                            loc_726C8:
0007509C 4EBA 0000                  		jsr	sub_7296A(pc)
000750A0                            
000750A0                            loc_726CC:
000750A0 DAFC 0030                  		adda.w	#$30,a5
000750A4 51CF FFE2                  		dbf	d7,loc_726B4
000750A8 4E75                       		rts	
000750AA                            ; ===========================================================================
000750AA                            
000750AA                            loc_726D6:
000750AA 08AE 0002 0040             		bclr	#2,$40(a6)
000750B0 422E 0024                  		clr.b	$24(a6)
000750B4 4E75                       		rts	
000750B6                            ; End of function sub_7267C
000750B6                            
000750B6                            ; ===========================================================================
000750B6                            
000750B6                            loc_726E2:				; XREF: sub_71CCA
000750B6 0815 0001                  		btst	#1,(a5)
000750BA 6600                       		bne.s	locret_726FC
000750BC 0815 0002                  		btst	#2,(a5)
000750C0 6600                       		bne.s	locret_726FC
000750C2 7028                       		moveq	#$28,d0
000750C4 122D 0001                  		move.b	1(a5),d1
000750C8 0001 00F0                  		ori.b	#-$10,d1
000750CC 6000 0000                  		bra.w	sub_7272E
000750D0                            ; ===========================================================================
000750D0                            
000750D0                            locret_726FC:
000750D0 4E75                       		rts	
000750D2                            
000750D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000750D2                            
000750D2                            
000750D2                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000750D2 0815 0004                  		btst	#4,(a5)
000750D6 6600                       		bne.s	locret_72714
000750D8 0815 0002                  		btst	#2,(a5)
000750DC 6600                       		bne.s	locret_72714
000750DE                            
000750DE                            loc_7270A:				; XREF: Snd_FadeOut2
000750DE 7028                       		moveq	#$28,d0
000750E0 122D 0001                  		move.b	1(a5),d1
000750E4 6000 0000                  		bra.w	sub_7272E
000750E8                            ; ===========================================================================
000750E8                            
000750E8                            locret_72714:
000750E8 4E75                       		rts	
000750EA                            ; End of function sub_726FE
000750EA                            
000750EA                            ; ===========================================================================
000750EA                            
000750EA                            loc_72716:				; XREF: sub_72A5A
000750EA 0815 0002                  		btst	#2,(a5)
000750EE 6600                       		bne.s	locret_72720
000750F0 6000 0000                  		bra.w	sub_72722
000750F4                            ; ===========================================================================
000750F4                            
000750F4                            locret_72720:
000750F4 4E75                       		rts	
000750F6                            
000750F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000750F6                            
000750F6                            
000750F6                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000750F6 082D 0002 0001             		btst	#2,1(a5)
000750FC 6600                       		bne.s	loc_7275A
000750FE D02D 0001                  		add.b	1(a5),d0
00075102                            ; End of function sub_72722
00075102                            
00075102                            
00075102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075102                            
00075102                            
00075102                            sub_7272E:				; XREF: loc_71E6A
00075102 1439 00A0 4000             		move.b	($A04000).l,d2
00075108 0802 0007                  		btst	#7,d2
0007510C 66F4                       		bne.s	sub_7272E
0007510E 13C0 00A0 4000             		move.b	d0,($A04000).l
00075114 4E71                       		nop	
00075116 4E71                       		nop	
00075118 4E71                       		nop	
0007511A                            
0007511A                            loc_72746:
0007511A 1439 00A0 4000             		move.b	($A04000).l,d2
00075120 0802 0007                  		btst	#7,d2
00075124 66F4                       		bne.s	loc_72746
00075126                            
00075126 13C1 00A0 4001             		move.b	d1,($A04001).l
0007512C 4E75                       		rts	
0007512E                            ; End of function sub_7272E
0007512E                            
0007512E                            ; ===========================================================================
0007512E                            
0007512E                            loc_7275A:				; XREF: sub_72722
0007512E 142D 0001                  		move.b	1(a5),d2
00075132 0882 0002                  		bclr	#2,d2
00075136 D002                       		add.b	d2,d0
00075138                            
00075138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075138                            
00075138                            
00075138                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075138 1439 00A0 4000             		move.b	($A04000).l,d2
0007513E 0802 0007                  		btst	#7,d2
00075142 66F4                       		bne.s	sub_72764
00075144 13C0 00A0 4002             		move.b	d0,($A04002).l
0007514A 4E71                       		nop	
0007514C 4E71                       		nop	
0007514E 4E71                       		nop	
00075150                            
00075150                            loc_7277C:
00075150 1439 00A0 4000             		move.b	($A04000).l,d2
00075156 0802 0007                  		btst	#7,d2
0007515A 66F4                       		bne.s	loc_7277C
0007515C                            
0007515C 13C1 00A0 4003             		move.b	d1,($A04003).l
00075162 4E75                       		rts	
00075164                            ; End of function sub_72764
00075164                            
00075164                            ; ===========================================================================
00075164 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00075176 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075188 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075198 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000751A8 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000751B8 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000751C8 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000751D8 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000751E8 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000751F8 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00075208 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075218 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00075224                            
00075224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075224                            
00075224                            
00075224                            sub_72850:				; XREF: sub_71B4C
00075224 532D 000E                  		subq.b	#1,$E(a5)
00075228 6600                       		bne.s	loc_72866
0007522A 0895 0004                  		bclr	#4,(a5)
0007522E 4EBA 0000                  		jsr	sub_72878(pc)
00075232 4EBA 0000                  		jsr	sub_728DC(pc)
00075236 6000 0000                  		bra.w	loc_7292E
0007523A                            ; ===========================================================================
0007523A                            
0007523A                            loc_72866:
0007523A 4EBA F4B2                  		jsr	sub_71D9E(pc)
0007523E 4EBA 0000                  		jsr	sub_72926(pc)
00075242 4EBA F4D2                  		jsr	sub_71DC6(pc)
00075246 4EBA 0000                  		jsr	sub_728E2(pc)
0007524A 4E75                       		rts	
0007524C                            ; End of function sub_72850
0007524C                            
0007524C                            
0007524C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007524C                            
0007524C                            
0007524C                            sub_72878:				; XREF: sub_72850
0007524C 0895 0001                  		bclr	#1,(a5)
00075250 286D 0004                  		movea.l	4(a5),a4
00075254                            
00075254                            loc_72880:
00075254 7A00                       		moveq	#0,d5
00075256 1A1C                       		move.b	(a4)+,d5
00075258 0C05 00E0                  		cmpi.b	#$E0,d5
0007525C 6500                       		bcs.s	loc_72890
0007525E 4EBA 0000                  		jsr	sub_72A5A(pc)
00075262 60F0                       		bra.s	loc_72880
00075264                            ; ===========================================================================
00075264                            
00075264                            loc_72890:
00075264 4A05                       		tst.b	d5
00075266 6A00                       		bpl.s	loc_728A4
00075268 4EBA 0000                  		jsr	sub_728AC(pc)
0007526C 1A1C                       		move.b	(a4)+,d5
0007526E 4A05                       		tst.b	d5
00075270 6A00                       		bpl.s	loc_728A4
00075272 534C                       		subq.w	#1,a4
00075274 6000 F43A                  		bra.w	sub_71D60
00075278                            ; ===========================================================================
00075278                            
00075278                            loc_728A4:
00075278 4EBA F416                  		jsr	sub_71D40(pc)
0007527C 6000 F432                  		bra.w	sub_71D60
00075280                            ; End of function sub_72878
00075280                            
00075280                            
00075280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075280                            
00075280                            
00075280                            sub_728AC:				; XREF: sub_72878
00075280 0405 0081                  		subi.b	#$81,d5
00075284 6500                       		bcs.s	loc_728CA
00075286 DA2D 0008                  		add.b	8(a5),d5
0007528A 0245 007F                  		andi.w	#$7F,d5
0007528E E34D                       		lsl.w	#1,d5
00075290 41FA 0000                  		lea	word_729CE(pc),a0
00075294 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007529A 6000 F414                  		bra.w	sub_71D60
0007529E                            ; ===========================================================================
0007529E                            
0007529E                            loc_728CA:
0007529E 08D5 0001                  		bset	#1,(a5)
000752A2 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000752A8 4EBA F406                  		jsr	sub_71D60(pc)
000752AC 6000 0000                  		bra.w	sub_729A0
000752B0                            ; End of function sub_728AC
000752B0                            
000752B0                            
000752B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752B0                            
000752B0                            
000752B0                            sub_728DC:				; XREF: sub_72850
000752B0 3C2D 0010                  		move.w	$10(a5),d6
000752B4 6B00                       		bmi.s	loc_72920
000752B6                            ; End of function sub_728DC
000752B6                            
000752B6                            
000752B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752B6                            
000752B6                            
000752B6                            sub_728E2:				; XREF: sub_72850
000752B6 102D 001E                  		move.b	$1E(a5),d0
000752BA 4880                       		ext.w	d0
000752BC DC40                       		add.w	d0,d6
000752BE 0815 0002                  		btst	#2,(a5)
000752C2 6600                       		bne.s	locret_7291E
000752C4 0815 0001                  		btst	#1,(a5)
000752C8 6600                       		bne.s	locret_7291E
000752CA 102D 0001                  		move.b	1(a5),d0
000752CE 0C00 00E0                  		cmpi.b	#$E0,d0
000752D2 6600                       		bne.s	loc_72904
000752D4 103C 00C0                  		move.b	#$C0,d0
000752D8                            
000752D8                            loc_72904:
000752D8 3206                       		move.w	d6,d1
000752DA 0201 000F                  		andi.b	#$F,d1
000752DE 8001                       		or.b	d1,d0
000752E0 E84E                       		lsr.w	#4,d6
000752E2 0206 003F                  		andi.b	#$3F,d6
000752E6 13C0 00C0 0011             		move.b	d0,($C00011).l
000752EC 13C6 00C0 0011             		move.b	d6,($C00011).l
000752F2                            
000752F2                            locret_7291E:
000752F2 4E75                       		rts	
000752F4                            ; End of function sub_728E2
000752F4                            
000752F4                            ; ===========================================================================
000752F4                            
000752F4                            loc_72920:				; XREF: sub_728DC
000752F4 08D5 0001                  		bset	#1,(a5)
000752F8 4E75                       		rts	
000752FA                            
000752FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752FA                            
000752FA                            
000752FA                            sub_72926:				; XREF: sub_72850
000752FA 4A2D 000B                  		tst.b	$B(a5)
000752FE 6700 0000                  		beq.w	locret_7298A
00075302                            
00075302                            loc_7292E:				; XREF: sub_72850
00075302 1C2D 0009                  		move.b	9(a5),d6
00075306 7000                       		moveq	#0,d0
00075308 102D 000B                  		move.b	$B(a5),d0
0007530C 6700                       		beq.s	sub_7296A
0007530E 2079 0007 42C4             		movea.l	(Go_PSGIndex).l,a0
00075314 5340                       		subq.w	#1,d0
00075316 E548                       		lsl.w	#2,d0
00075318 2070 0000                  		movea.l	(a0,d0.w),a0
0007531C 102D 000C                  		move.b	$C(a5),d0
00075320 1030 0000                  		move.b	(a0,d0.w),d0
00075324 522D 000C                  		addq.b	#1,$C(a5)
00075328 0800 0007                  		btst	#7,d0
0007532C 6700                       		beq.s	loc_72960
0007532E 0C00 0080                  		cmpi.b	#$80,d0
00075332 6700                       		beq.s	loc_7299A
00075334                            
00075334                            loc_72960:
00075334 DC40                       		add.w	d0,d6
00075336 0C06 0010                  		cmpi.b	#$10,d6
0007533A 6500                       		bcs.s	sub_7296A
0007533C 7C0F                       		moveq	#$F,d6
0007533E                            ; End of function sub_72926
0007533E                            
0007533E                            
0007533E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007533E                            
0007533E                            
0007533E                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007533E 0815 0001                  		btst	#1,(a5)
00075342 6600                       		bne.s	locret_7298A
00075344 0815 0002                  		btst	#2,(a5)
00075348 6600                       		bne.s	locret_7298A
0007534A 0815 0004                  		btst	#4,(a5)
0007534E 6600                       		bne.s	loc_7298C
00075350                            
00075350                            loc_7297C:
00075350 8C2D 0001                  		or.b	1(a5),d6
00075354 0606 0010                  		addi.b	#$10,d6
00075358 13C6 00C0 0011             		move.b	d6,($C00011).l
0007535E                            
0007535E                            locret_7298A:
0007535E 4E75                       		rts	
00075360                            ; ===========================================================================
00075360                            
00075360                            loc_7298C:
00075360 4A2D 0013                  		tst.b	$13(a5)
00075364 67EA                       		beq.s	loc_7297C
00075366 4A2D 0012                  		tst.b	$12(a5)
0007536A 66E4                       		bne.s	loc_7297C
0007536C 4E75                       		rts	
0007536E                            ; End of function sub_7296A
0007536E                            
0007536E                            ; ===========================================================================
0007536E                            
0007536E                            loc_7299A:				; XREF: sub_72926
0007536E 532D 000C                  		subq.b	#1,$C(a5)
00075372 4E75                       		rts	
00075374                            
00075374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075374                            
00075374                            
00075374                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075374 0815 0002                  		btst	#2,(a5)
00075378 6600                       		bne.s	locret_729B4
0007537A                            
0007537A                            loc_729A6:				; XREF: Snd_FadeOut2
0007537A 102D 0001                  		move.b	1(a5),d0
0007537E 0000 001F                  		ori.b	#$1F,d0
00075382 13C0 00C0 0011             		move.b	d0,($C00011).l
00075388                            
00075388                            locret_729B4:
00075388 4E75                       		rts	
0007538A                            ; End of function sub_729A0
0007538A                            
0007538A                            
0007538A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007538A                            
0007538A                            
0007538A                            sub_729B6:				; XREF: loc_71E7C
0007538A 41F9 00C0 0011             		lea	($C00011).l,a0
00075390 10BC 009F                  		move.b	#$9F,(a0)
00075394 10BC 00BF                  		move.b	#$BF,(a0)
00075398 10BC 00DF                  		move.b	#$DF,(a0)
0007539C 10BC 00FF                  		move.b	#$FF,(a0)
000753A0 4E75                       		rts	
000753A2                            ; End of function sub_729B6
000753A2                            
000753A2                            ; ===========================================================================
000753A2 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000753B4 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000753C6 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000753DA 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000753EE 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075402 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075416 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007542A 0011 0000                  		dc.w $11, 0
0007542E                            
0007542E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007542E                            
0007542E                            
0007542E                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007542E 0445 00E0                  		subi.w	#$E0,d5
00075432 E54D                       		lsl.w	#2,d5
00075434 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075438                            ; End of function sub_72A5A
00075438                            
00075438                            ; ===========================================================================
00075438                            
00075438                            loc_72A64:
00075438 6000 0000                  		bra.w	loc_72ACC
0007543C                            ; ===========================================================================
0007543C 6000 0000                  		bra.w	loc_72AEC
00075440                            ; ===========================================================================
00075440 6000 0000                  		bra.w	loc_72AF2
00075444                            ; ===========================================================================
00075444 6000 0000                  		bra.w	loc_72AF8
00075448                            ; ===========================================================================
00075448 6000 0000                  		bra.w	loc_72B14
0007544C                            ; ===========================================================================
0007544C 6000 0000                  		bra.w	loc_72B9E
00075450                            ; ===========================================================================
00075450 6000 0000                  		bra.w	loc_72BA4
00075454                            ; ===========================================================================
00075454 6000 0000                  		bra.w	loc_72BAE
00075458                            ; ===========================================================================
00075458 6000 0000                  		bra.w	loc_72BB4
0007545C                            ; ===========================================================================
0007545C 6000 0000                  		bra.w	loc_72BBE
00075460                            ; ===========================================================================
00075460 6000 0000                  		bra.w	loc_72BC6
00075464                            ; ===========================================================================
00075464 6000 0000                  		bra.w	loc_72BD0
00075468                            ; ===========================================================================
00075468 6000 0000                  		bra.w	loc_72BE6
0007546C                            ; ===========================================================================
0007546C 6000 0000                  		bra.w	loc_72BEE
00075470                            ; ===========================================================================
00075470 6000 0000                  		bra.w	loc_72BF4
00075474                            ; ===========================================================================
00075474 6000 0000                  		bra.w	loc_72C26
00075478                            ; ===========================================================================
00075478 6000 0000                  		bra.w	loc_72D30
0007547C                            ; ===========================================================================
0007547C 6000 0000                  		bra.w	loc_72D52
00075480                            ; ===========================================================================
00075480 6000 0000                  		bra.w	loc_72D58
00075484                            ; ===========================================================================
00075484 6000 0000                  		bra.w	loc_72E06
00075488                            ; ===========================================================================
00075488 6000 0000                  		bra.w	loc_72E20
0007548C                            ; ===========================================================================
0007548C 6000 0000                  		bra.w	loc_72E26
00075490                            ; ===========================================================================
00075490 6000 0000                  		bra.w	loc_72E2C
00075494                            ; ===========================================================================
00075494 6000 0000                  		bra.w	loc_72E38
00075498                            ; ===========================================================================
00075498 6000 0000                  		bra.w	loc_72E52
0007549C                            ; ===========================================================================
0007549C 6000 0000                  		bra.w	loc_72E64
000754A0                            ; ===========================================================================
000754A0                            
000754A0                            loc_72ACC:				; XREF: loc_72A64
000754A0 121C                       		move.b	(a4)+,d1
000754A2 4A2D 0001                  		tst.b	1(a5)
000754A6 6B00                       		bmi.s	locret_72AEA
000754A8 102D 000A                  		move.b	$A(a5),d0
000754AC 0200 0037                  		andi.b	#$37,d0
000754B0 8200                       		or.b	d0,d1
000754B2 1B41 000A                  		move.b	d1,$A(a5)
000754B6 103C 00B4                  		move.b	#$B4,d0
000754BA 6000 FC2E                  		bra.w	loc_72716
000754BE                            ; ===========================================================================
000754BE                            
000754BE                            locret_72AEA:
000754BE 4E75                       		rts	
000754C0                            ; ===========================================================================
000754C0                            
000754C0                            loc_72AEC:				; XREF: loc_72A64
000754C0 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000754C4 4E75                       		rts	
000754C6                            ; ===========================================================================
000754C6                            
000754C6                            loc_72AF2:				; XREF: loc_72A64
000754C6 1D5C 0007                  		move.b	(a4)+,7(a6)
000754CA 4E75                       		rts	
000754CC                            ; ===========================================================================
000754CC                            
000754CC                            loc_72AF8:				; XREF: loc_72A64
000754CC 7000                       		moveq	#0,d0
000754CE 102D 000D                  		move.b	$D(a5),d0
000754D2 2875 0000                  		movea.l	(a5,d0.w),a4
000754D6 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000754DE 544C                       		addq.w	#2,a4
000754E0 5800                       		addq.b	#4,d0
000754E2 1B40 000D                  		move.b	d0,$D(a5)
000754E6 4E75                       		rts	
000754E8                            ; ===========================================================================
000754E8                            
000754E8                            loc_72B14:				; XREF: loc_72A64
000754E8 204E                       		movea.l	a6,a0
000754EA 43EE 03A0                  		lea	$3A0(a6),a1
000754EE 303C 0087                  		move.w	#$87,d0
000754F2                            
000754F2                            loc_72B1E:
000754F2 20D9                       		move.l	(a1)+,(a0)+
000754F4 51C8 FFFC                  		dbf	d0,loc_72B1E
000754F8                            
000754F8 08EE 0002 0040             		bset	#2,$40(a6)
000754FE 264D                       		movea.l	a5,a3
00075500 1C3C 0028                  		move.b	#$28,d6
00075504 9C2E 0026                  		sub.b	$26(a6),d6
00075508 7E05                       		moveq	#5,d7
0007550A 4BEE 0070                  		lea	$70(a6),a5
0007550E                            
0007550E                            loc_72B3A:
0007550E 0815 0007                  		btst	#7,(a5)
00075512 6700                       		beq.s	loc_72B5C
00075514 08D5 0001                  		bset	#1,(a5)
00075518 DD2D 0009                  		add.b	d6,9(a5)
0007551C 0815 0002                  		btst	#2,(a5)
00075520 6600                       		bne.s	loc_72B5C
00075522 7000                       		moveq	#0,d0
00075524 102D 000B                  		move.b	$B(a5),d0
00075528 226E 0018                  		movea.l	$18(a6),a1
0007552C 4EBA 0000                  		jsr	sub_72C4E(pc)
00075530                            
00075530                            loc_72B5C:
00075530 DAFC 0030                  		adda.w	#$30,a5
00075534 51CF FFD8                  		dbf	d7,loc_72B3A
00075538                            
00075538 7E02                       		moveq	#2,d7
0007553A                            
0007553A                            loc_72B66:
0007553A 0815 0007                  		btst	#7,(a5)
0007553E 6700                       		beq.s	loc_72B78
00075540 08D5 0001                  		bset	#1,(a5)
00075544 4EBA FE2E                  		jsr	sub_729A0(pc)
00075548 DD2D 0009                  		add.b	d6,9(a5)
0007554C                            
0007554C                            loc_72B78:
0007554C DAFC 0030                  		adda.w	#$30,a5
00075550 51CF FFE8                  		dbf	d7,loc_72B66
00075554 2A4B                       		movea.l	a3,a5
00075556 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007555C 1D7C 0028 0026             		move.b	#$28,$26(a6)
00075562 422E 0027                  		clr.b	$27(a6)
00075566 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007556E 504F                       		addq.w	#8,sp
00075570 4E75                       		rts	
00075572                            ; ===========================================================================
00075572                            
00075572                            loc_72B9E:				; XREF: loc_72A64
00075572 1B5C 0002                  		move.b	(a4)+,2(a5)
00075576 4E75                       		rts	
00075578                            ; ===========================================================================
00075578                            
00075578                            loc_72BA4:				; XREF: loc_72A64
00075578 101C                       		move.b	(a4)+,d0
0007557A D12D 0009                  		add.b	d0,9(a5)
0007557E 6000 0000                  		bra.w	sub_72CB4
00075582                            ; ===========================================================================
00075582                            
00075582                            loc_72BAE:				; XREF: loc_72A64
00075582 08D5 0004                  		bset	#4,(a5)
00075586 4E75                       		rts	
00075588                            ; ===========================================================================
00075588                            
00075588                            loc_72BB4:				; XREF: loc_72A64
00075588 1B54 0012                  		move.b	(a4),$12(a5)
0007558C 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075590 4E75                       		rts	
00075592                            ; ===========================================================================
00075592                            
00075592                            loc_72BBE:				; XREF: loc_72A64
00075592 101C                       		move.b	(a4)+,d0
00075594 D12D 0008                  		add.b	d0,8(a5)
00075598 4E75                       		rts	
0007559A                            ; ===========================================================================
0007559A                            
0007559A                            loc_72BC6:				; XREF: loc_72A64
0007559A 1D54 0002                  		move.b	(a4),2(a6)
0007559E 1D5C 0001                  		move.b	(a4)+,1(a6)
000755A2 4E75                       		rts	
000755A4                            ; ===========================================================================
000755A4                            
000755A4                            loc_72BD0:				; XREF: loc_72A64
000755A4 41EE 0040                  		lea	$40(a6),a0
000755A8 101C                       		move.b	(a4)+,d0
000755AA 7230                       		moveq	#$30,d1
000755AC 7409                       		moveq	#9,d2
000755AE                            
000755AE                            loc_72BDA:
000755AE 1140 0002                  		move.b	d0,2(a0)
000755B2 D0C1                       		adda.w	d1,a0
000755B4 51CA FFF8                  		dbf	d2,loc_72BDA
000755B8                            
000755B8 4E75                       		rts	
000755BA                            ; ===========================================================================
000755BA                            
000755BA                            loc_72BE6:				; XREF: loc_72A64
000755BA 101C                       		move.b	(a4)+,d0
000755BC D12D 0009                  		add.b	d0,9(a5)
000755C0 4E75                       		rts	
000755C2                            ; ===========================================================================
000755C2                            
000755C2                            loc_72BEE:				; XREF: loc_72A64
000755C2 422E 002C                  		clr.b	$2C(a6)
000755C6 4E75                       		rts	
000755C8                            ; ===========================================================================
000755C8                            
000755C8                            loc_72BF4:				; XREF: loc_72A64
000755C8 0895 0007                  		bclr	#7,(a5)
000755CC 0895 0004                  		bclr	#4,(a5)
000755D0 4EBA FB00                  		jsr	sub_726FE(pc)
000755D4 4A2E 0250                  		tst.b	$250(a6)
000755D8 6B00                       		bmi.s	loc_72C22
000755DA 264D                       		movea.l	a5,a3
000755DC 4BEE 0100                  		lea	$100(a6),a5
000755E0 226E 0018                  		movea.l	$18(a6),a1
000755E4 0895 0002                  		bclr	#2,(a5)
000755E8 08D5 0001                  		bset	#1,(a5)
000755EC 102D 000B                  		move.b	$B(a5),d0
000755F0 4EBA 0000                  		jsr	sub_72C4E(pc)
000755F4 2A4B                       		movea.l	a3,a5
000755F6                            
000755F6                            loc_72C22:
000755F6 504F                       		addq.w	#8,sp
000755F8 4E75                       		rts	
000755FA                            ; ===========================================================================
000755FA                            
000755FA                            loc_72C26:				; XREF: loc_72A64
000755FA 7000                       		moveq	#0,d0
000755FC 101C                       		move.b	(a4)+,d0
000755FE 1B40 000B                  		move.b	d0,$B(a5)
00075602 0815 0002                  		btst	#2,(a5)
00075606 6600 0000                  		bne.w	locret_72CAA
0007560A 226E 0018                  		movea.l	$18(a6),a1
0007560E 4A2E 000E                  		tst.b	$E(a6)
00075612 6700                       		beq.s	sub_72C4E
00075614 226D 0020                  		movea.l	$20(a5),a1
00075618 4A2E 000E                  		tst.b	$E(a6)
0007561C 6B00                       		bmi.s	sub_72C4E
0007561E 226E 0020                  		movea.l	$20(a6),a1
00075622                            
00075622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075622                            
00075622                            
00075622                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075622 5340                       		subq.w	#1,d0
00075624 6B00                       		bmi.s	loc_72C5C
00075626 323C 0019                  		move.w	#$19,d1
0007562A                            
0007562A                            loc_72C56:
0007562A D2C1                       		adda.w	d1,a1
0007562C 51C8 FFFC                  		dbf	d0,loc_72C56
00075630                            
00075630                            loc_72C5C:
00075630 1219                       		move.b	(a1)+,d1
00075632 1B41 001F                  		move.b	d1,$1F(a5)
00075636 1801                       		move.b	d1,d4
00075638 103C 00B0                  		move.b	#$B0,d0
0007563C 4EBA FAB8                  		jsr	sub_72722(pc)
00075640 45FA 0000                  		lea	byte_72D18(pc),a2
00075644 7613                       		moveq	#$13,d3
00075646                            
00075646                            loc_72C72:
00075646 101A                       		move.b	(a2)+,d0
00075648 1219                       		move.b	(a1)+,d1
0007564A 4EBA FAAA                  		jsr	sub_72722(pc)
0007564E 51CB FFF6                  		dbf	d3,loc_72C72
00075652 7A03                       		moveq	#3,d5
00075654 0244 0007                  		andi.w	#7,d4
00075658 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007565C 162D 0009                  		move.b	9(a5),d3
00075660                            
00075660                            loc_72C8C:
00075660 101A                       		move.b	(a2)+,d0
00075662 1219                       		move.b	(a1)+,d1
00075664 E20C                       		lsr.b	#1,d4
00075666 6400                       		bcc.s	loc_72C96
00075668 D203                       		add.b	d3,d1
0007566A                            
0007566A                            loc_72C96:
0007566A 4EBA FA8A                  		jsr	sub_72722(pc)
0007566E 51CD FFF0                  		dbf	d5,loc_72C8C
00075672 103C 00B4                  		move.b	#$B4,d0
00075676 122D 000A                  		move.b	$A(a5),d1
0007567A 4EBA FA7A                  		jsr	sub_72722(pc)
0007567E                            
0007567E                            locret_72CAA:
0007567E 4E75                       		rts	
00075680                            ; End of function sub_72C4E
00075680                            
00075680                            ; ===========================================================================
00075680 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075688                            
00075688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075688                            
00075688                            
00075688                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075688 0815 0002                  		btst	#2,(a5)
0007568C 6600                       		bne.s	locret_72D16
0007568E 7000                       		moveq	#0,d0
00075690 102D 000B                  		move.b	$B(a5),d0
00075694 226E 0018                  		movea.l	$18(a6),a1
00075698 4A2E 000E                  		tst.b	$E(a6)
0007569C 6700                       		beq.s	loc_72CD8
0007569E 226E 0020                  		movea.l	$20(a6),a1
000756A2 4A2E 000E                  		tst.b	$E(a6)
000756A6 6B00                       		bmi.s	loc_72CD8
000756A8 226E 0020                  		movea.l	$20(a6),a1
000756AC                            
000756AC                            loc_72CD8:
000756AC 5340                       		subq.w	#1,d0
000756AE 6B00                       		bmi.s	loc_72CE6
000756B0 323C 0019                  		move.w	#$19,d1
000756B4                            
000756B4                            loc_72CE0:
000756B4 D2C1                       		adda.w	d1,a1
000756B6 51C8 FFFC                  		dbf	d0,loc_72CE0
000756BA                            
000756BA                            loc_72CE6:
000756BA D2FC 0015                  		adda.w	#$15,a1
000756BE 45FA 0000                  		lea	byte_72D2C(pc),a2
000756C2 102D 001F                  		move.b	$1F(a5),d0
000756C6 0240 0007                  		andi.w	#7,d0
000756CA 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000756CE 162D 0009                  		move.b	9(a5),d3
000756D2 6B00                       		bmi.s	locret_72D16
000756D4 7A03                       		moveq	#3,d5
000756D6                            
000756D6                            loc_72D02:
000756D6 101A                       		move.b	(a2)+,d0
000756D8 1219                       		move.b	(a1)+,d1
000756DA E20C                       		lsr.b	#1,d4
000756DC 6400                       		bcc.s	loc_72D12
000756DE D203                       		add.b	d3,d1
000756E0 6500                       		bcs.s	loc_72D12
000756E2 4EBA FA12                  		jsr	sub_72722(pc)
000756E6                            
000756E6                            loc_72D12:
000756E6 51CD FFEE                  		dbf	d5,loc_72D02
000756EA                            
000756EA                            locret_72D16:
000756EA 4E75                       		rts	
000756EC                            ; End of function sub_72CB4
000756EC                            
000756EC                            ; ===========================================================================
000756EC 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000756F6 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00075700 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00075704                            ; ===========================================================================
00075704                            
00075704                            loc_72D30:				; XREF: loc_72A64
00075704 08D5 0003                  		bset	#3,(a5)
00075708 2B4C 0014                  		move.l	a4,$14(a5)
0007570C 1B5C 0018                  		move.b	(a4)+,$18(a5)
00075710 1B5C 0019                  		move.b	(a4)+,$19(a5)
00075714 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00075718 101C                       		move.b	(a4)+,d0
0007571A E208                       		lsr.b	#1,d0
0007571C 1B40 001B                  		move.b	d0,$1B(a5)
00075720 426D 001C                  		clr.w	$1C(a5)
00075724 4E75                       		rts	
00075726                            ; ===========================================================================
00075726                            
00075726                            loc_72D52:				; XREF: loc_72A64
00075726 08D5 0003                  		bset	#3,(a5)
0007572A 4E75                       		rts	
0007572C                            ; ===========================================================================
0007572C                            
0007572C                            loc_72D58:				; XREF: loc_72A64
0007572C 0895 0007                  		bclr	#7,(a5)
00075730 0895 0004                  		bclr	#4,(a5)
00075734 4A2D 0001                  		tst.b	1(a5)
00075738 6B00                       		bmi.s	loc_72D74
0007573A 4A2E 0008                  		tst.b	8(a6)
0007573E 6B00 0000                  		bmi.w	loc_72E02
00075742 4EBA F98E                  		jsr	sub_726FE(pc)
00075746 6000                       		bra.s	loc_72D78
00075748                            ; ===========================================================================
00075748                            
00075748                            loc_72D74:
00075748 4EBA FC2A                  		jsr	sub_729A0(pc)
0007574C                            
0007574C                            loc_72D78:
0007574C 4A2E 000E                  		tst.b	$E(a6)
00075750 6A00 0000                  		bpl.w	loc_72E02
00075754 4216                       		clr.b	0(a6)
00075756 7000                       		moveq	#0,d0
00075758 102D 0001                  		move.b	1(a5),d0
0007575C 6B00                       		bmi.s	loc_72DCC
0007575E 41FA F546                  		lea	dword_722CC(pc),a0
00075762 264D                       		movea.l	a5,a3
00075764 0C00 0004                  		cmpi.b	#4,d0
00075768 6600                       		bne.s	loc_72DA8
0007576A 4A2E 0340                  		tst.b	$340(a6)
0007576E 6A00                       		bpl.s	loc_72DA8
00075770 4BEE 0340                  		lea	$340(a6),a5
00075774 226E 0020                  		movea.l	$20(a6),a1
00075778 6000                       		bra.s	loc_72DB8
0007577A                            ; ===========================================================================
0007577A                            
0007577A                            loc_72DA8:
0007577A 5500                       		subq.b	#2,d0
0007577C E508                       		lsl.b	#2,d0
0007577E 2A70 0000                  		movea.l	(a0,d0.w),a5
00075782 4A15                       		tst.b	(a5)
00075784 6A00                       		bpl.s	loc_72DC8
00075786 226E 0018                  		movea.l	$18(a6),a1
0007578A                            
0007578A                            loc_72DB8:
0007578A 0895 0002                  		bclr	#2,(a5)
0007578E 08D5 0001                  		bset	#1,(a5)
00075792 102D 000B                  		move.b	$B(a5),d0
00075796 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007579A                            
0007579A                            loc_72DC8:
0007579A 2A4B                       		movea.l	a3,a5
0007579C 6000                       		bra.s	loc_72E02
0007579E                            ; ===========================================================================
0007579E                            
0007579E                            loc_72DCC:
0007579E 41EE 0370                  		lea	$370(a6),a0
000757A2 4A10                       		tst.b	(a0)
000757A4 6A00                       		bpl.s	loc_72DE0
000757A6 0C00 00E0                  		cmpi.b	#$E0,d0
000757AA 6700                       		beq.s	loc_72DEA
000757AC 0C00 00C0                  		cmpi.b	#$C0,d0
000757B0 6700                       		beq.s	loc_72DEA
000757B2                            
000757B2                            loc_72DE0:
000757B2 41FA F4F2                  		lea	dword_722CC(pc),a0
000757B6 E608                       		lsr.b	#3,d0
000757B8 2070 0000                  		movea.l	(a0,d0.w),a0
000757BC                            
000757BC                            loc_72DEA:
000757BC 0890 0002                  		bclr	#2,(a0)
000757C0 08D0 0001                  		bset	#1,(a0)
000757C4 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000757CA 6600                       		bne.s	loc_72E02
000757CC 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000757D4                            
000757D4                            loc_72E02:
000757D4 504F                       		addq.w	#8,sp
000757D6 4E75                       		rts	
000757D8                            ; ===========================================================================
000757D8                            
000757D8                            loc_72E06:				; XREF: loc_72A64
000757D8 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000757DE 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000757E2 0815 0002                  		btst	#2,(a5)
000757E6 6600                       		bne.s	locret_72E1E
000757E8 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000757F0                            
000757F0                            locret_72E1E:
000757F0 4E75                       		rts	
000757F2                            ; ===========================================================================
000757F2                            
000757F2                            loc_72E20:				; XREF: loc_72A64
000757F2 0895 0003                  		bclr	#3,(a5)
000757F6 4E75                       		rts	
000757F8                            ; ===========================================================================
000757F8                            
000757F8                            loc_72E26:				; XREF: loc_72A64
000757F8 1B5C 000B                  		move.b	(a4)+,$B(a5)
000757FC 4E75                       		rts	
000757FE                            ; ===========================================================================
000757FE                            
000757FE                            loc_72E2C:				; XREF: loc_72A64
000757FE 101C                       		move.b	(a4)+,d0
00075800 E148                       		lsl.w	#8,d0
00075802 101C                       		move.b	(a4)+,d0
00075804 D8C0                       		adda.w	d0,a4
00075806 534C                       		subq.w	#1,a4
00075808 4E75                       		rts	
0007580A                            ; ===========================================================================
0007580A                            
0007580A                            loc_72E38:				; XREF: loc_72A64
0007580A 7000                       		moveq	#0,d0
0007580C 101C                       		move.b	(a4)+,d0
0007580E 121C                       		move.b	(a4)+,d1
00075810 4A35 0024                  		tst.b	$24(a5,d0.w)
00075814 6600                       		bne.s	loc_72E48
00075816 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007581A                            
0007581A                            loc_72E48:
0007581A 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007581E 66DE                       		bne.s	loc_72E2C
00075820 544C                       		addq.w	#2,a4
00075822 4E75                       		rts	
00075824                            ; ===========================================================================
00075824                            
00075824                            loc_72E52:				; XREF: loc_72A64
00075824 7000                       		moveq	#0,d0
00075826 102D 000D                  		move.b	$D(a5),d0
0007582A 5900                       		subq.b	#4,d0
0007582C 2B8C 0000                  		move.l	a4,(a5,d0.w)
00075830 1B40 000D                  		move.b	d0,$D(a5)
00075834 60C8                       		bra.s	loc_72E2C
00075836                            ; ===========================================================================
00075836                            
00075836                            loc_72E64:				; XREF: loc_72A64
00075836 103C 0088                  		move.b	#$88,d0
0007583A 123C 000F                  		move.b	#$F,d1
0007583E 4EBA F8C2                  		jsr	sub_7272E(pc)
00075842 103C 008C                  		move.b	#$8C,d0
00075846 123C 000F                  		move.b	#$F,d1
0007584A 6000 F8B6                  		bra.w	sub_7272E
0007584E                            ; ===========================================================================
0007584E                            Kos_Z80:	incbin	sound\z80_1.bin
000758FE 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00075900 21                         		dc.b $21
00075901 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00075903                            		incbin	sound\z80_2.bin
00076FAE                            		even
00076FAE                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007D7AE                            		even
0007D7AE                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008704C                            		even
0008704C                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000875DA                            		even
000875DA                            Music84:	include	sound\music84.asm ; Star Light Act 1
000875DA                            music84_Header:
000875DA =00000001                  smpsHeaderStartSong = 1
000875DA 0000                       	smpsHeaderVoice     music84_Voices
000875DC 0603                       	smpsHeaderChan      $06, $03
000875DE 0205                       	smpsHeaderTempo     $02, $05
000875E0                            
000875E4 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000875E8 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000875EC 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000875F0 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000875F4 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000875F8 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000875FE 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00087604 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008760A                            
0008760A                            ; FM1 Data
0008760A                            music84_FM1:
0008760A E0C0                       	smpsPan             panCenter, $00
0008760E E107                       	smpsAlterNote       $07
00087610 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00087614 E106                       	smpsAlterNote       $06
00087616 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008761A E10B                       	smpsAlterNote       $0B
0008761C 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00087622 E10C                       	smpsAlterNote       $0C
00087624 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087627 E10B                       	smpsAlterNote       $0B
00087629 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008762C E109                       	smpsAlterNote       $09
0008762E E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00087633 E108                       	smpsAlterNote       $08
00087635 8001                       	dc.b	nRst, $01
00087637 E10B                       	smpsAlterNote       $0B
00087639 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008763F E107                       	smpsAlterNote       $07
00087641 9B03                       	dc.b	nD2, $03
00087643                            
00087643                            music84_Jump04:
00087643 E107                       	smpsAlterNote       $07
00087645 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087649 E10B                       	smpsAlterNote       $0B
0008764B A202 8001                  	dc.b	nA2, $02, nRst, $01
0008764F E107                       	smpsAlterNote       $07
00087651 9B03                       	dc.b	nD2, $03
00087653 E11A                       	smpsAlterNote       $1A
00087655 A301                       	dc.b	nBb2, $01
00087657 E1F2                       	smpsAlterNote       $F2
00087659 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008765C E1FF                       	smpsAlterNote       $FF
0008765E E701                       	dc.b	smpsNoAttack, $01
00087660 E111                       	smpsAlterNote       $11
00087662 E701                       	dc.b	smpsNoAttack, $01
00087664 E106                       	smpsAlterNote       $06
00087666 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087669 E107                       	smpsAlterNote       $07
0008766B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008766F E108                       	smpsAlterNote       $08
00087671 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087679 E109                       	smpsAlterNote       $09
0008767B A003                       	dc.b	nG2, $03
0008767D E10C                       	smpsAlterNote       $0C
0008767F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087683 E1FD                       	smpsAlterNote       $FD
00087685 A401                       	dc.b	nB2, $01
00087687 E109                       	smpsAlterNote       $09
00087689 E701                       	dc.b	smpsNoAttack, $01
0008768B E106                       	smpsAlterNote       $06
0008768D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087690 E109                       	smpsAlterNote       $09
00087692 A007                       	dc.b	nG2, $07
00087694 E108                       	smpsAlterNote       $08
00087696 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008769A E107                       	smpsAlterNote       $07
0008769C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000876A2 E10B                       	smpsAlterNote       $0B
000876A4 A203 8001                  	dc.b	nA2, $03, nRst, $01
000876A8 E107                       	smpsAlterNote       $07
000876AA 9B03                       	dc.b	nD2, $03
000876AC E11A                       	smpsAlterNote       $1A
000876AE A301                       	dc.b	nBb2, $01
000876B0 E1F9                       	smpsAlterNote       $F9
000876B2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000876B5 E107                       	smpsAlterNote       $07
000876B7 E701                       	dc.b	smpsNoAttack, $01
000876B9 E111                       	smpsAlterNote       $11
000876BB E701                       	dc.b	smpsNoAttack, $01
000876BD E106                       	smpsAlterNote       $06
000876BF E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000876C4 E107                       	smpsAlterNote       $07
000876C6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000876CE E1EC                       	smpsAlterNote       $EC
000876D0 A101                       	dc.b	nAb2, $01
000876D2 E108                       	smpsAlterNote       $08
000876D4 E701                       	dc.b	smpsNoAttack, $01
000876D6 E116                       	smpsAlterNote       $16
000876D8 E701                       	dc.b	smpsNoAttack, $01
000876DA E1F5                       	smpsAlterNote       $F5
000876DC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000876DF E10B                       	smpsAlterNote       $0B
000876E1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000876E5 E107                       	smpsAlterNote       $07
000876E7 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000876ED E109                       	smpsAlterNote       $09
000876EF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000876F3 E10B                       	smpsAlterNote       $0B
000876F5 9603                       	dc.b	nA1, $03
000876F7 E107                       	smpsAlterNote       $07
000876F9 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000876FF E10B                       	smpsAlterNote       $0B
00087701 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087705 E107                       	smpsAlterNote       $07
00087707 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008770B E11A                       	smpsAlterNote       $1A
0008770D A301                       	dc.b	nBb2, $01
0008770F E1F9                       	smpsAlterNote       $F9
00087711 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087714 E107                       	smpsAlterNote       $07
00087716 E701                       	dc.b	smpsNoAttack, $01
00087718 E1FB                       	smpsAlterNote       $FB
0008771A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008771D E106                       	smpsAlterNote       $06
0008771F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087723 E107                       	smpsAlterNote       $07
00087725 9B03                       	dc.b	nD2, $03
00087727 E108                       	smpsAlterNote       $08
00087729 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008772F E109                       	smpsAlterNote       $09
00087731 A002 8001                  	dc.b	nG2, $02, nRst, $01
00087735 E10C                       	smpsAlterNote       $0C
00087737 A303                       	dc.b	nBb2, $03
00087739 E1F0                       	smpsAlterNote       $F0
0008773B A401                       	dc.b	nB2, $01
0008773D E1FD                       	smpsAlterNote       $FD
0008773F E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00087744 E106                       	smpsAlterNote       $06
00087746 8001                       	dc.b	nRst, $01
00087748 E109                       	smpsAlterNote       $09
0008774A A006 8001                  	dc.b	nG2, $06, nRst, $01
0008774E E108                       	smpsAlterNote       $08
00087750 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00087754 E107                       	smpsAlterNote       $07
00087756 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008775C E10B                       	smpsAlterNote       $0B
0008775E A203                       	dc.b	nA2, $03
00087760 E107                       	smpsAlterNote       $07
00087762 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087766 E1F2                       	smpsAlterNote       $F2
00087768 A401                       	dc.b	nB2, $01
0008776A E1FF                       	smpsAlterNote       $FF
0008776C E701                       	dc.b	smpsNoAttack, $01
0008776E E107                       	smpsAlterNote       $07
00087770 E701                       	dc.b	smpsNoAttack, $01
00087772 E1FB                       	smpsAlterNote       $FB
00087774 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087777 E106                       	smpsAlterNote       $06
00087779 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008777D E107                       	smpsAlterNote       $07
0008777F 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00087789 E117                       	smpsAlterNote       $17
0008778B A001                       	dc.b	nG2, $01
0008778D E1FA                       	smpsAlterNote       $FA
0008778F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087792 E108                       	smpsAlterNote       $08
00087794 E701                       	dc.b	smpsNoAttack, $01
00087796 E1E7                       	smpsAlterNote       $E7
00087798 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008779B E103                       	smpsAlterNote       $03
0008779D E701                       	dc.b	smpsNoAttack, $01
0008779F E10B                       	smpsAlterNote       $0B
000877A1 E702                       	dc.b	smpsNoAttack, $02
000877A3 E107                       	smpsAlterNote       $07
000877A5 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000877AD E106                       	smpsAlterNote       $06
000877AF 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000877B5 E10C                       	smpsAlterNote       $0C
000877B7 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000877BD E109                       	smpsAlterNote       $09
000877BF 9E03                       	dc.b	nF2, $03
000877C1 E10C                       	smpsAlterNote       $0C
000877C3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000877C7 E1EA                       	smpsAlterNote       $EA
000877C9 A201                       	dc.b	nA2, $01
000877CB E106                       	smpsAlterNote       $06
000877CD E701                       	dc.b	smpsNoAttack, $01
000877CF E1E2                       	smpsAlterNote       $E2
000877D1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000877D4 E1F0                       	smpsAlterNote       $F0
000877D6 E701                       	dc.b	smpsNoAttack, $01
000877D8 E10C                       	smpsAlterNote       $0C
000877DA E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000877E6 E116                       	smpsAlterNote       $16
000877E8 9C01                       	dc.b	nEb2, $01
000877EA E105                       	smpsAlterNote       $05
000877EC E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000877EF E1F1                       	smpsAlterNote       $F1
000877F1 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000877F4 E1FF                       	smpsAlterNote       $FF
000877F6 E701                       	dc.b	smpsNoAttack, $01
000877F8 E109                       	smpsAlterNote       $09
000877FA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000877FE E10C                       	smpsAlterNote       $0C
00087800 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008780C 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00087812 E109                       	smpsAlterNote       $09
00087814 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087818 E10C                       	smpsAlterNote       $0C
0008781A 9703                       	dc.b	nBb1, $03
0008781C E11A                       	smpsAlterNote       $1A
0008781E A101                       	dc.b	nAb2, $01
00087820 E1FB                       	smpsAlterNote       $FB
00087822 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087825 E10A                       	smpsAlterNote       $0A
00087827 E701                       	dc.b	smpsNoAttack, $01
00087829 E1E8                       	smpsAlterNote       $E8
0008782B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008782E E106                       	smpsAlterNote       $06
00087830 E701                       	dc.b	smpsNoAttack, $01
00087832 E10C                       	smpsAlterNote       $0C
00087834 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00087840 E1F9                       	smpsAlterNote       $F9
00087842 9D01                       	dc.b	nE2, $01
00087844 E108                       	smpsAlterNote       $08
00087846 E701                       	dc.b	smpsNoAttack, $01
00087848 E1F6                       	smpsAlterNote       $F6
0008784A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008784D E109                       	smpsAlterNote       $09
0008784F E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00087853 E10C                       	smpsAlterNote       $0C
00087855 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00087861 E108                       	smpsAlterNote       $08
00087863 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00087869 E106                       	smpsAlterNote       $06
0008786B A403 8001                  	dc.b	nB2, $03, nRst, $01
0008786F E108                       	smpsAlterNote       $08
00087871 9D03                       	dc.b	nE2, $03
00087873 E1EB                       	smpsAlterNote       $EB
00087875 A801                       	dc.b	nEb3, $01
00087877 E109                       	smpsAlterNote       $09
00087879 E701                       	dc.b	smpsNoAttack, $01
0008787B E1FA                       	smpsAlterNote       $FA
0008787D E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00087880 E108                       	smpsAlterNote       $08
00087882 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008788E E1E9                       	smpsAlterNote       $E9
00087890 A301                       	dc.b	nBb2, $01
00087892 E107                       	smpsAlterNote       $07
00087894 E701                       	dc.b	smpsNoAttack, $01
00087896 E1F0                       	smpsAlterNote       $F0
00087898 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008789B E1F7                       	smpsAlterNote       $F7
0008789D E701                       	dc.b	smpsNoAttack, $01
0008789F E107                       	smpsAlterNote       $07
000878A1 E701                       	dc.b	smpsNoAttack, $01
000878A3 E106                       	smpsAlterNote       $06
000878A5 E701                       	dc.b	smpsNoAttack, $01
000878A7 E108                       	smpsAlterNote       $08
000878A9 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000878AF E106                       	smpsAlterNote       $06
000878B1 A403 8001                  	dc.b	nB2, $03, nRst, $01
000878B5 E108                       	smpsAlterNote       $08
000878B7 9D03                       	dc.b	nE2, $03
000878B9 E10B                       	smpsAlterNote       $0B
000878BB 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000878C3 E108                       	smpsAlterNote       $08
000878C5 9D03                       	dc.b	nE2, $03
000878C7 E10B                       	smpsAlterNote       $0B
000878C9 9603 8001                  	dc.b	nA1, $03, nRst, $01
000878CD E113                       	smpsAlterNote       $13
000878CF A001                       	dc.b	nG2, $01
000878D1 E118                       	smpsAlterNote       $18
000878D3 E701                       	dc.b	smpsNoAttack, $01
000878D5 E1E9                       	smpsAlterNote       $E9
000878D7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000878DA E1F3                       	smpsAlterNote       $F3
000878DC E701                       	dc.b	smpsNoAttack, $01
000878DE E1FD                       	smpsAlterNote       $FD
000878E0 E701                       	dc.b	smpsNoAttack, $01
000878E2 E102                       	smpsAlterNote       $02
000878E4 E701                       	dc.b	smpsNoAttack, $01
000878E6 E107                       	smpsAlterNote       $07
000878E8 8001                       	dc.b	nRst, $01
000878EA E10B                       	smpsAlterNote       $0B
000878EC 9603                       	dc.b	nA1, $03
000878EE E10C                       	smpsAlterNote       $0C
000878F0 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000878F6 E10B                       	smpsAlterNote       $0B
000878F8 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00087904 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008790A E107                       	smpsAlterNote       $07
0008790C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087912 E10B                       	smpsAlterNote       $0B
00087914 A203                       	dc.b	nA2, $03
00087916 E107                       	smpsAlterNote       $07
00087918 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008791C E1F2                       	smpsAlterNote       $F2
0008791E A401                       	dc.b	nB2, $01
00087920 E1FF                       	smpsAlterNote       $FF
00087922 E701                       	dc.b	smpsNoAttack, $01
00087924 E107                       	smpsAlterNote       $07
00087926 E701                       	dc.b	smpsNoAttack, $01
00087928 E1FB                       	smpsAlterNote       $FB
0008792A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008792D E106                       	smpsAlterNote       $06
0008792F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087933 E107                       	smpsAlterNote       $07
00087935 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087939 E108                       	smpsAlterNote       $08
0008793B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00087941 E109                       	smpsAlterNote       $09
00087943 A003 8001                  	dc.b	nG2, $03, nRst, $01
00087947 E10C                       	smpsAlterNote       $0C
00087949 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008794D E1F0                       	smpsAlterNote       $F0
0008794F A401                       	dc.b	nB2, $01
00087951 E109                       	smpsAlterNote       $09
00087953 E701                       	dc.b	smpsNoAttack, $01
00087955 E106                       	smpsAlterNote       $06
00087957 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008795A E109                       	smpsAlterNote       $09
0008795C A007                       	dc.b	nG2, $07
0008795E E108                       	smpsAlterNote       $08
00087960 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087964 E107                       	smpsAlterNote       $07
00087966 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008796C E10B                       	smpsAlterNote       $0B
0008796E A202 8001                  	dc.b	nA2, $02, nRst, $01
00087972 E107                       	smpsAlterNote       $07
00087974 9B03                       	dc.b	nD2, $03
00087976 E11A                       	smpsAlterNote       $1A
00087978 A301                       	dc.b	nBb2, $01
0008797A E1F2                       	smpsAlterNote       $F2
0008797C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008797F E1FF                       	smpsAlterNote       $FF
00087981 E701                       	dc.b	smpsNoAttack, $01
00087983 E111                       	smpsAlterNote       $11
00087985 E701                       	dc.b	smpsNoAttack, $01
00087987 E106                       	smpsAlterNote       $06
00087989 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008798C E107                       	smpsAlterNote       $07
0008798E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008799A E117                       	smpsAlterNote       $17
0008799C A001                       	dc.b	nG2, $01
0008799E E1FA                       	smpsAlterNote       $FA
000879A0 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000879A3 E116                       	smpsAlterNote       $16
000879A5 E701                       	dc.b	smpsNoAttack, $01
000879A7 E1F5                       	smpsAlterNote       $F5
000879A9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000879AC E103                       	smpsAlterNote       $03
000879AE E701                       	dc.b	smpsNoAttack, $01
000879B0 E10B                       	smpsAlterNote       $0B
000879B2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000879B6 E107                       	smpsAlterNote       $07
000879B8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000879BE E109                       	smpsAlterNote       $09
000879C0 9E03                       	dc.b	nF2, $03
000879C2 E10B                       	smpsAlterNote       $0B
000879C4 9603 8001                  	dc.b	nA1, $03, nRst, $01
000879C8 E107                       	smpsAlterNote       $07
000879CA 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000879D0 E10B                       	smpsAlterNote       $0B
000879D2 A203 8001                  	dc.b	nA2, $03, nRst, $01
000879D6 E107                       	smpsAlterNote       $07
000879D8 9B03                       	dc.b	nD2, $03
000879DA E11A                       	smpsAlterNote       $1A
000879DC A301                       	dc.b	nBb2, $01
000879DE E1F9                       	smpsAlterNote       $F9
000879E0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000879E3 E107                       	smpsAlterNote       $07
000879E5 E701                       	dc.b	smpsNoAttack, $01
000879E7 E111                       	smpsAlterNote       $11
000879E9 E701                       	dc.b	smpsNoAttack, $01
000879EB E106                       	smpsAlterNote       $06
000879ED E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000879F2 E107                       	smpsAlterNote       $07
000879F4 9B03                       	dc.b	nD2, $03
000879F6 E108                       	smpsAlterNote       $08
000879F8 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000879FE E109                       	smpsAlterNote       $09
00087A00 A003                       	dc.b	nG2, $03
00087A02 E10C                       	smpsAlterNote       $0C
00087A04 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087A08 E1FD                       	smpsAlterNote       $FD
00087A0A A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00087A0F E106                       	smpsAlterNote       $06
00087A11 8001                       	dc.b	nRst, $01
00087A13 E109                       	smpsAlterNote       $09
00087A15 A006 8001                  	dc.b	nG2, $06, nRst, $01
00087A19 E108                       	smpsAlterNote       $08
00087A1B 9C03                       	dc.b	nEb2, $03
00087A1D E107                       	smpsAlterNote       $07
00087A1F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00087A25 E10B                       	smpsAlterNote       $0B
00087A27 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087A2B E107                       	smpsAlterNote       $07
00087A2D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087A31 E11A                       	smpsAlterNote       $1A
00087A33 A301                       	dc.b	nBb2, $01
00087A35 E1F9                       	smpsAlterNote       $F9
00087A37 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087A3A E107                       	smpsAlterNote       $07
00087A3C E701                       	dc.b	smpsNoAttack, $01
00087A3E E1FB                       	smpsAlterNote       $FB
00087A40 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087A43 E106                       	smpsAlterNote       $06
00087A45 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087A49 E107                       	smpsAlterNote       $07
00087A4B 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087A53 E1EC                       	smpsAlterNote       $EC
00087A55 A101                       	dc.b	nAb2, $01
00087A57 E108                       	smpsAlterNote       $08
00087A59 E701                       	dc.b	smpsNoAttack, $01
00087A5B E1E7                       	smpsAlterNote       $E7
00087A5D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087A60 E1F5                       	smpsAlterNote       $F5
00087A62 E701                       	dc.b	smpsNoAttack, $01
00087A64 E10B                       	smpsAlterNote       $0B
00087A66 E702                       	dc.b	smpsNoAttack, $02
00087A68 E107                       	smpsAlterNote       $07
00087A6A 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00087A70 E106                       	smpsAlterNote       $06
00087A72 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00087A78 E10C                       	smpsAlterNote       $0C
00087A7A 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00087A82 E109                       	smpsAlterNote       $09
00087A84 9E03                       	dc.b	nF2, $03
00087A86 E10C                       	smpsAlterNote       $0C
00087A88 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087A8C E1EA                       	smpsAlterNote       $EA
00087A8E A201                       	dc.b	nA2, $01
00087A90 E106                       	smpsAlterNote       $06
00087A92 E701                       	dc.b	smpsNoAttack, $01
00087A94 E114                       	smpsAlterNote       $14
00087A96 E701                       	dc.b	smpsNoAttack, $01
00087A98 E1F0                       	smpsAlterNote       $F0
00087A9A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087A9D E10C                       	smpsAlterNote       $0C
00087A9F E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00087AAB 9703                       	dc.b	nBb1, $03
00087AAD E116                       	smpsAlterNote       $16
00087AAF 9C01                       	dc.b	nEb2, $01
00087AB1 E105                       	smpsAlterNote       $05
00087AB3 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087AB6 E113                       	smpsAlterNote       $13
00087AB8 E701                       	dc.b	smpsNoAttack, $01
00087ABA E1FF                       	smpsAlterNote       $FF
00087ABC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087ABF E109                       	smpsAlterNote       $09
00087AC1 E703                       	dc.b	smpsNoAttack, $03
00087AC3 E10C                       	smpsAlterNote       $0C
00087AC5 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00087AD1 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087AD9 E109                       	smpsAlterNote       $09
00087ADB 9E03                       	dc.b	nF2, $03
00087ADD E10C                       	smpsAlterNote       $0C
00087ADF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087AE3 E1EC                       	smpsAlterNote       $EC
00087AE5 A201                       	dc.b	nA2, $01
00087AE7 E10A                       	smpsAlterNote       $0A
00087AE9 E701                       	dc.b	smpsNoAttack, $01
00087AEB E1E8                       	smpsAlterNote       $E8
00087AED E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087AF0 E1F7                       	smpsAlterNote       $F7
00087AF2 E701                       	dc.b	smpsNoAttack, $01
00087AF4 E10C                       	smpsAlterNote       $0C
00087AF6 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00087B02 E1EA                       	smpsAlterNote       $EA
00087B04 9D01                       	dc.b	nE2, $01
00087B06 E108                       	smpsAlterNote       $08
00087B08 E701                       	dc.b	smpsNoAttack, $01
00087B0A E1F6                       	smpsAlterNote       $F6
00087B0C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087B0F E105                       	smpsAlterNote       $05
00087B11 E701                       	dc.b	smpsNoAttack, $01
00087B13 E109                       	smpsAlterNote       $09
00087B15 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087B19 E10C                       	smpsAlterNote       $0C
00087B1B 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00087B27 E108                       	smpsAlterNote       $08
00087B29 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00087B2F E106                       	smpsAlterNote       $06
00087B31 A403 8001                  	dc.b	nB2, $03, nRst, $01
00087B35 E108                       	smpsAlterNote       $08
00087B37 9D03                       	dc.b	nE2, $03
00087B39 E1EB                       	smpsAlterNote       $EB
00087B3B A801                       	dc.b	nEb3, $01
00087B3D E109                       	smpsAlterNote       $09
00087B3F E701                       	dc.b	smpsNoAttack, $01
00087B41 E1EB                       	smpsAlterNote       $EB
00087B43 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00087B46 E108                       	smpsAlterNote       $08
00087B48 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00087B54 E1E9                       	smpsAlterNote       $E9
00087B56 A301                       	dc.b	nBb2, $01
00087B58 E1F8                       	smpsAlterNote       $F8
00087B5A E701                       	dc.b	smpsNoAttack, $01
00087B5C E116                       	smpsAlterNote       $16
00087B5E E701                       	dc.b	smpsNoAttack, $01
00087B60 E1F7                       	smpsAlterNote       $F7
00087B62 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087B65 E107                       	smpsAlterNote       $07
00087B67 E701                       	dc.b	smpsNoAttack, $01
00087B69 E1EE                       	smpsAlterNote       $EE
00087B6B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087B6E E106                       	smpsAlterNote       $06
00087B70 8001                       	dc.b	nRst, $01
00087B72 E108                       	smpsAlterNote       $08
00087B74 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00087B7A E106                       	smpsAlterNote       $06
00087B7C A402 8001                  	dc.b	nB2, $02, nRst, $01
00087B80 E108                       	smpsAlterNote       $08
00087B82 9D03                       	dc.b	nE2, $03
00087B84 E10B                       	smpsAlterNote       $0B
00087B86 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00087B8C E108                       	smpsAlterNote       $08
00087B8E 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00087B92 E10B                       	smpsAlterNote       $0B
00087B94 9603                       	dc.b	nA1, $03
00087B96 E10E                       	smpsAlterNote       $0E
00087B98 A001                       	dc.b	nG2, $01
00087B9A E118                       	smpsAlterNote       $18
00087B9C E701                       	dc.b	smpsNoAttack, $01
00087B9E E1E9                       	smpsAlterNote       $E9
00087BA0 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087BA3 E1EE                       	smpsAlterNote       $EE
00087BA5 E701                       	dc.b	smpsNoAttack, $01
00087BA7 E1F8                       	smpsAlterNote       $F8
00087BA9 E701                       	dc.b	smpsNoAttack, $01
00087BAB E102                       	smpsAlterNote       $02
00087BAD E701                       	dc.b	smpsNoAttack, $01
00087BAF E107                       	smpsAlterNote       $07
00087BB1 8001                       	dc.b	nRst, $01
00087BB3 E10B                       	smpsAlterNote       $0B
00087BB5 9603                       	dc.b	nA1, $03
00087BB7 E10C                       	smpsAlterNote       $0C
00087BB9 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00087BBF E10B                       	smpsAlterNote       $0B
00087BC1 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00087BCD 8001 9603                  	dc.b	nRst, $01, nA1, $03
00087BD1 E10C                       	smpsAlterNote       $0C
00087BD3 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00087BDF 8001                       	dc.b	nRst, $01
00087BE1 E10B                       	smpsAlterNote       $0B
00087BE3 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00087BEB E107                       	smpsAlterNote       $07
00087BED 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00087BF1 E10B                       	smpsAlterNote       $0B
00087BF3 9603                       	dc.b	nA1, $03
00087BF5 E109                       	smpsAlterNote       $09
00087BF7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087BFB E108                       	smpsAlterNote       $08
00087BFD 9D06                       	dc.b	nE2, $06
00087BFF E107                       	smpsAlterNote       $07
00087C01 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087C05 E106                       	smpsAlterNote       $06
00087C07 9903                       	dc.b	nC2, $03
00087C09 E10C                       	smpsAlterNote       $0C
00087C0B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087C0F E10B                       	smpsAlterNote       $0B
00087C11 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00087C1D 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087C27 E10C                       	smpsAlterNote       $0C
00087C29 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00087C35 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00087C41 8001                       	dc.b	nRst, $01
00087C43 E10B                       	smpsAlterNote       $0B
00087C45 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087C51 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00087C5D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00087C69 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087C73 E10C                       	smpsAlterNote       $0C
00087C75 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00087C81 E10B                       	smpsAlterNote       $0B
00087C83 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00087C8B E107                       	smpsAlterNote       $07
00087C8D 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00087C91 E10B                       	smpsAlterNote       $0B
00087C93 9603                       	dc.b	nA1, $03
00087C95 E109                       	smpsAlterNote       $09
00087C97 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087C9B E108                       	smpsAlterNote       $08
00087C9D 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00087CA1 E107                       	smpsAlterNote       $07
00087CA3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087CA7 E106                       	smpsAlterNote       $06
00087CA9 9903                       	dc.b	nC2, $03
00087CAB E10C                       	smpsAlterNote       $0C
00087CAD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087CB1 E10B                       	smpsAlterNote       $0B
00087CB3 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087CBF 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087CC9 E10C                       	smpsAlterNote       $0C
00087CCB 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00087CD7 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00087CE3 8001                       	dc.b	nRst, $01
00087CE5 E10B                       	smpsAlterNote       $0B
00087CE7 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087CF3 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087CFD E10C                       	smpsAlterNote       $0C
00087CFF 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087D0B 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00087D17 E10B                       	smpsAlterNote       $0B
00087D19 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087D25 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00087D2F E10C                       	smpsAlterNote       $0C
00087D31 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087D3D 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00087D49 E10B                       	smpsAlterNote       $0B
00087D4B 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00087D57 8001                       	dc.b	nRst, $01
00087D59 E1EC                       	smpsAlterNote       $EC
00087D5B A101                       	dc.b	nAb2, $01
00087D5D E1FA                       	smpsAlterNote       $FA
00087D5F E701                       	dc.b	smpsNoAttack, $01
00087D61 E116                       	smpsAlterNote       $16
00087D63 E701                       	dc.b	smpsNoAttack, $01
00087D65 E1F5                       	smpsAlterNote       $F5
00087D67 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087D6A E10B                       	smpsAlterNote       $0B
00087D6C E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00087D78 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00087D84 E107                       	smpsAlterNote       $07
00087D86 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087D8C E10B                       	smpsAlterNote       $0B
00087D8E A203                       	dc.b	nA2, $03
00087D90 E107                       	smpsAlterNote       $07
00087D92 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087D96 E1F3                       	smpsAlterNote       $F3
00087D98 A401                       	dc.b	nB2, $01
00087D9A E102                       	smpsAlterNote       $02
00087D9C E701                       	dc.b	smpsNoAttack, $01
00087D9E E109                       	smpsAlterNote       $09
00087DA0 E701                       	dc.b	smpsNoAttack, $01
00087DA2 E102                       	smpsAlterNote       $02
00087DA4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087DA7 E106                       	smpsAlterNote       $06
00087DA9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087DAD E107                       	smpsAlterNote       $07
00087DAF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087DB3 E108                       	smpsAlterNote       $08
00087DB5 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00087DBB E109                       	smpsAlterNote       $09
00087DBD A003 8001                  	dc.b	nG2, $03, nRst, $01
00087DC1 E1F2                       	smpsAlterNote       $F2
00087DC3 A401                       	dc.b	nB2, $01
00087DC5 E1FF                       	smpsAlterNote       $FF
00087DC7 E701                       	dc.b	smpsNoAttack, $01
00087DC9 E111                       	smpsAlterNote       $11
00087DCB E701                       	dc.b	smpsNoAttack, $01
00087DCD E1FB                       	smpsAlterNote       $FB
00087DCF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087DD2 E106                       	smpsAlterNote       $06
00087DD4 E702                       	dc.b	smpsNoAttack, $02
00087DD6 E109                       	smpsAlterNote       $09
00087DD8 A007                       	dc.b	nG2, $07
00087DDA E108                       	smpsAlterNote       $08
00087DDC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087DE0 E107                       	smpsAlterNote       $07
00087DE2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087DE8 E10B                       	smpsAlterNote       $0B
00087DEA A202 8001                  	dc.b	nA2, $02, nRst, $01
00087DEE E107                       	smpsAlterNote       $07
00087DF0 9B03                       	dc.b	nD2, $03
00087DF2 E11A                       	smpsAlterNote       $1A
00087DF4 A301                       	dc.b	nBb2, $01
00087DF6 E1F2                       	smpsAlterNote       $F2
00087DF8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087DFB E1FF                       	smpsAlterNote       $FF
00087DFD E701                       	dc.b	smpsNoAttack, $01
00087DFF E111                       	smpsAlterNote       $11
00087E01 E701                       	dc.b	smpsNoAttack, $01
00087E03 E106                       	smpsAlterNote       $06
00087E05 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087E08 E107                       	smpsAlterNote       $07
00087E0A 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00087E16 E117                       	smpsAlterNote       $17
00087E18 A001                       	dc.b	nG2, $01
00087E1A E1FA                       	smpsAlterNote       $FA
00087E1C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087E1F E116                       	smpsAlterNote       $16
00087E21 E701                       	dc.b	smpsNoAttack, $01
00087E23 E1F5                       	smpsAlterNote       $F5
00087E25 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087E28 E103                       	smpsAlterNote       $03
00087E2A E701                       	dc.b	smpsNoAttack, $01
00087E2C E10B                       	smpsAlterNote       $0B
00087E2E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087E32 E107                       	smpsAlterNote       $07
00087E34 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087E3A E109                       	smpsAlterNote       $09
00087E3C 9E03                       	dc.b	nF2, $03
00087E3E E10B                       	smpsAlterNote       $0B
00087E40 9603 8001                  	dc.b	nA1, $03, nRst, $01
00087E44 E107                       	smpsAlterNote       $07
00087E46 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087E4C E10B                       	smpsAlterNote       $0B
00087E4E A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E52 E107                       	smpsAlterNote       $07
00087E54 9B03                       	dc.b	nD2, $03
00087E56 E11A                       	smpsAlterNote       $1A
00087E58 A301                       	dc.b	nBb2, $01
00087E5A E1F9                       	smpsAlterNote       $F9
00087E5C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087E5F E1FF                       	smpsAlterNote       $FF
00087E61 E701                       	dc.b	smpsNoAttack, $01
00087E63 E111                       	smpsAlterNote       $11
00087E65 E701                       	dc.b	smpsNoAttack, $01
00087E67 E106                       	smpsAlterNote       $06
00087E69 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087E6C E107                       	smpsAlterNote       $07
00087E6E 9B03                       	dc.b	nD2, $03
00087E70 E108                       	smpsAlterNote       $08
00087E72 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00087E78 E109                       	smpsAlterNote       $09
00087E7A A003                       	dc.b	nG2, $03
00087E7C E1F0                       	smpsAlterNote       $F0
00087E7E A501                       	dc.b	nC3, $01
00087E80 E106                       	smpsAlterNote       $06
00087E82 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00087E86 E109                       	smpsAlterNote       $09
00087E88 A006 8001                  	dc.b	nG2, $06, nRst, $01
00087E8C E108                       	smpsAlterNote       $08
00087E8E 9C03                       	dc.b	nEb2, $03
00087E90 E107                       	smpsAlterNote       $07
00087E92 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00087E98 E10B                       	smpsAlterNote       $0B
00087E9A A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E9E E107                       	smpsAlterNote       $07
00087EA0 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087EA4 E11A                       	smpsAlterNote       $1A
00087EA6 A301                       	dc.b	nBb2, $01
00087EA8 E1F9                       	smpsAlterNote       $F9
00087EAA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087EAD E107                       	smpsAlterNote       $07
00087EAF E701                       	dc.b	smpsNoAttack, $01
00087EB1 E1FB                       	smpsAlterNote       $FB
00087EB3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087EB6 E106                       	smpsAlterNote       $06
00087EB8 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087EBC E107                       	smpsAlterNote       $07
00087EBE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087EC6 E1EC                       	smpsAlterNote       $EC
00087EC8 A101                       	dc.b	nAb2, $01
00087ECA E108                       	smpsAlterNote       $08
00087ECC E701                       	dc.b	smpsNoAttack, $01
00087ECE E1E7                       	smpsAlterNote       $E7
00087ED0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087ED3 E1F5                       	smpsAlterNote       $F5
00087ED5 E701                       	dc.b	smpsNoAttack, $01
00087ED7 E10B                       	smpsAlterNote       $0B
00087ED9 E702                       	dc.b	smpsNoAttack, $02
00087EDB E107                       	smpsAlterNote       $07
00087EDD 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00087EE3 E106                       	smpsAlterNote       $06
00087EE5 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00087EEB E10C                       	smpsAlterNote       $0C
00087EED 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00087EF5 E109                       	smpsAlterNote       $09
00087EF7 9E03                       	dc.b	nF2, $03
00087EF9 E10C                       	smpsAlterNote       $0C
00087EFB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087EFF E1EA                       	smpsAlterNote       $EA
00087F01 A201                       	dc.b	nA2, $01
00087F03 E106                       	smpsAlterNote       $06
00087F05 E701                       	dc.b	smpsNoAttack, $01
00087F07 E114                       	smpsAlterNote       $14
00087F09 E701                       	dc.b	smpsNoAttack, $01
00087F0B E1F0                       	smpsAlterNote       $F0
00087F0D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F10 E10C                       	smpsAlterNote       $0C
00087F12 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00087F1E 9703                       	dc.b	nBb1, $03
00087F20 E116                       	smpsAlterNote       $16
00087F22 9C01                       	dc.b	nEb2, $01
00087F24 E105                       	smpsAlterNote       $05
00087F26 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087F29 E113                       	smpsAlterNote       $13
00087F2B E701                       	dc.b	smpsNoAttack, $01
00087F2D E1FF                       	smpsAlterNote       $FF
00087F2F E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087F32 E109                       	smpsAlterNote       $09
00087F34 E703                       	dc.b	smpsNoAttack, $03
00087F36 E10C                       	smpsAlterNote       $0C
00087F38 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00087F44 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087F4C E109                       	smpsAlterNote       $09
00087F4E 9E03                       	dc.b	nF2, $03
00087F50 E10C                       	smpsAlterNote       $0C
00087F52 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087F56 E1EA                       	smpsAlterNote       $EA
00087F58 A201                       	dc.b	nA2, $01
00087F5A E106                       	smpsAlterNote       $06
00087F5C E701                       	dc.b	smpsNoAttack, $01
00087F5E E1E2                       	smpsAlterNote       $E2
00087F60 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F63 E1F0                       	smpsAlterNote       $F0
00087F65 E701                       	dc.b	smpsNoAttack, $01
00087F67 E10C                       	smpsAlterNote       $0C
00087F69 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00087F75 E116                       	smpsAlterNote       $16
00087F77 9C01                       	dc.b	nEb2, $01
00087F79 E105                       	smpsAlterNote       $05
00087F7B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087F7E E1F1                       	smpsAlterNote       $F1
00087F80 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087F83 E1FF                       	smpsAlterNote       $FF
00087F85 E701                       	dc.b	smpsNoAttack, $01
00087F87 E109                       	smpsAlterNote       $09
00087F89 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087F8D E10C                       	smpsAlterNote       $0C
00087F8F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00087F9B E106                       	smpsAlterNote       $06
00087F9D 9903                       	dc.b	nC2, $03
00087F9F E107                       	smpsAlterNote       $07
00087FA1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087FA5 E109                       	smpsAlterNote       $09
00087FA7 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00087FAD E107                       	smpsAlterNote       $07
00087FAF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087FB3 E108                       	smpsAlterNote       $08
00087FB5 9D03                       	dc.b	nE2, $03
00087FB7 E10B                       	smpsAlterNote       $0B
00087FB9 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00087FBF E109                       	smpsAlterNote       $09
00087FC1 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00087FC7 E10C                       	smpsAlterNote       $0C
00087FC9 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00087FCF E106                       	smpsAlterNote       $06
00087FD1 9903                       	dc.b	nC2, $03
00087FD3 E11A                       	smpsAlterNote       $1A
00087FD5 A301                       	dc.b	nBb2, $01
00087FD7 E1F9                       	smpsAlterNote       $F9
00087FD9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087FDC E1FF                       	smpsAlterNote       $FF
00087FDE E701                       	dc.b	smpsNoAttack, $01
00087FE0 E111                       	smpsAlterNote       $11
00087FE2 E701                       	dc.b	smpsNoAttack, $01
00087FE4 E106                       	smpsAlterNote       $06
00087FE6 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00087FED E109                       	smpsAlterNote       $09
00087FEF A003                       	dc.b	nG2, $03
00087FF1 E106                       	smpsAlterNote       $06
00087FF3 9907                       	dc.b	nC2, $07
00087FF5 E107                       	smpsAlterNote       $07
00087FF7 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00087FFF E10B                       	smpsAlterNote       $0B
00088001 A203                       	dc.b	nA2, $03
00088003 E107                       	smpsAlterNote       $07
00088005 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088009 E1F2                       	smpsAlterNote       $F2
0008800B A401                       	dc.b	nB2, $01
0008800D E1F9                       	smpsAlterNote       $F9
0008800F E701                       	dc.b	smpsNoAttack, $01
00088011 E107                       	smpsAlterNote       $07
00088013 E701                       	dc.b	smpsNoAttack, $01
00088015 E1FB                       	smpsAlterNote       $FB
00088017 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008801A E106                       	smpsAlterNote       $06
0008801C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088020 E107                       	smpsAlterNote       $07
00088022 9B03                       	dc.b	nD2, $03
00088024 E108                       	smpsAlterNote       $08
00088026 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008802C E109                       	smpsAlterNote       $09
0008802E A003 8001                  	dc.b	nG2, $03, nRst, $01
00088032 E1F2                       	smpsAlterNote       $F2
00088034 A401                       	dc.b	nB2, $01
00088036 E1F9                       	smpsAlterNote       $F9
00088038 E701                       	dc.b	smpsNoAttack, $01
0008803A E107                       	smpsAlterNote       $07
0008803C E701                       	dc.b	smpsNoAttack, $01
0008803E E1FB                       	smpsAlterNote       $FB
00088040 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088043 E106                       	smpsAlterNote       $06
00088045 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088049 E108                       	smpsAlterNote       $08
0008804B 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008804F E10C                       	smpsAlterNote       $0C
00088051 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00088055 E107                       	smpsAlterNote       $07
00088057 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008805D E10B                       	smpsAlterNote       $0B
0008805F A203                       	dc.b	nA2, $03
00088061 E107                       	smpsAlterNote       $07
00088063 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088067 E1F2                       	smpsAlterNote       $F2
00088069 A401                       	dc.b	nB2, $01
0008806B E1FF                       	smpsAlterNote       $FF
0008806D E701                       	dc.b	smpsNoAttack, $01
0008806F E107                       	smpsAlterNote       $07
00088071 E701                       	dc.b	smpsNoAttack, $01
00088073 E1FB                       	smpsAlterNote       $FB
00088075 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088078 E106                       	smpsAlterNote       $06
0008807A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008807E E107                       	smpsAlterNote       $07
00088080 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088084 E108                       	smpsAlterNote       $08
00088086 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008808C E109                       	smpsAlterNote       $09
0008808E A003 8001                  	dc.b	nG2, $03, nRst, $01
00088092 E1F2                       	smpsAlterNote       $F2
00088094 A401                       	dc.b	nB2, $01
00088096 E1FF                       	smpsAlterNote       $FF
00088098 E701                       	dc.b	smpsNoAttack, $01
0008809A E111                       	smpsAlterNote       $11
0008809C E701                       	dc.b	smpsNoAttack, $01
0008809E E1FB                       	smpsAlterNote       $FB
000880A0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000880A3 E106                       	smpsAlterNote       $06
000880A5 E702                       	dc.b	smpsNoAttack, $02
000880A7 E108                       	smpsAlterNote       $08
000880A9 9C07                       	dc.b	nEb2, $07
000880AB E10C                       	smpsAlterNote       $0C
000880AD A303 8001                  	dc.b	nBb2, $03, nRst, $01
000880B1 E107                       	smpsAlterNote       $07
000880B3 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000880B9 E10B                       	smpsAlterNote       $0B
000880BB A202 8001                  	dc.b	nA2, $02, nRst, $01
000880BF E107                       	smpsAlterNote       $07
000880C1 9B03                       	dc.b	nD2, $03
000880C3 E11A                       	smpsAlterNote       $1A
000880C5 A301                       	dc.b	nBb2, $01
000880C7 E1F2                       	smpsAlterNote       $F2
000880C9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000880CC E1FF                       	smpsAlterNote       $FF
000880CE E701                       	dc.b	smpsNoAttack, $01
000880D0 E111                       	smpsAlterNote       $11
000880D2 E701                       	dc.b	smpsNoAttack, $01
000880D4 E106                       	smpsAlterNote       $06
000880D6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000880D9 E107                       	smpsAlterNote       $07
000880DB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000880DF E108                       	smpsAlterNote       $08
000880E1 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000880E9 E109                       	smpsAlterNote       $09
000880EB A003                       	dc.b	nG2, $03
000880ED E11A                       	smpsAlterNote       $1A
000880EF A301                       	dc.b	nBb2, $01
000880F1 E1F2                       	smpsAlterNote       $F2
000880F3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000880F6 E1FF                       	smpsAlterNote       $FF
000880F8 E701                       	dc.b	smpsNoAttack, $01
000880FA E111                       	smpsAlterNote       $11
000880FC E701                       	dc.b	smpsNoAttack, $01
000880FE E106                       	smpsAlterNote       $06
00088100 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088103 E108                       	smpsAlterNote       $08
00088105 9C07                       	dc.b	nEb2, $07
00088107 E10C                       	smpsAlterNote       $0C
00088109 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008810D E107                       	smpsAlterNote       $07
0008810F 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008811B 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00088125 E108                       	smpsAlterNote       $08
00088127 9C06                       	dc.b	nEb2, $06
00088129 E10C                       	smpsAlterNote       $0C
0008812B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008812F E108                       	smpsAlterNote       $08
00088131 9C03                       	dc.b	nEb2, $03
00088133 E109                       	smpsAlterNote       $09
00088135 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088139 E10C                       	smpsAlterNote       $0C
0008813B A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00088143 E107                       	smpsAlterNote       $07
00088145 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088149 F6F4 F8                    	smpsJump            music84_Jump04
0008814C                            
0008814C                            ; FM2 Data
0008814C                            music84_FM2:
0008814C E0C0                       	smpsPan             panCenter, $00
00088150 E10B                       	smpsAlterNote       $0B
00088152 C603 8007                  	dc.b	nA5, $03, nRst, $07
00088156 E109                       	smpsAlterNote       $09
00088158 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008815C E108                       	smpsAlterNote       $08
0008815E C103 8004                  	dc.b	nE5, $03, nRst, $04
00088164 E080                       	smpsPan             panLeft, $00
00088166 E10C                       	smpsAlterNote       $0C
00088168 E6F9                       	smpsAlterVol        $F9
0008816A C703                       	dc.b	nBb5, $03
0008816C E10B                       	smpsAlterNote       $0B
0008816E C603 8001                  	dc.b	nA5, $03, nRst, $01
00088172 E109                       	smpsAlterNote       $09
00088174 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008817A E108                       	smpsAlterNote       $08
0008817C C103 8001                  	dc.b	nE5, $03, nRst, $01
00088180 E106                       	smpsAlterNote       $06
00088182 BD03                       	dc.b	nC5, $03
00088184 E10B                       	smpsAlterNote       $0B
00088186 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008818C E0C0                       	smpsPan             panCenter, $00
0008818E E107                       	smpsAlterNote       $07
00088190 E606                       	smpsAlterVol        $06
00088192 BF03                       	dc.b	nD5, $03
00088194                            
00088194                            music84_Jump03:
00088194 E108                       	smpsAlterNote       $08
00088196 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008819A E109                       	smpsAlterNote       $09
0008819C C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000881A2 E10B                       	smpsAlterNote       $0B
000881A4 C607                       	dc.b	nA5, $07
000881A6 E107                       	smpsAlterNote       $07
000881A8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000881AC E106                       	smpsAlterNote       $06
000881AE C90D                       	dc.b	nC6, $0D
000881B0 E100                       	smpsAlterNote       $00
000881B2 E701                       	dc.b	smpsNoAttack, $01
000881B4 E1FF                       	smpsAlterNote       $FF
000881B6 E701                       	dc.b	smpsNoAttack, $01
000881B8 E103                       	smpsAlterNote       $03
000881BA E701                       	dc.b	smpsNoAttack, $01
000881BC E109                       	smpsAlterNote       $09
000881BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881C2 E106                       	smpsAlterNote       $06
000881C4 E701                       	dc.b	smpsNoAttack, $01
000881C6 E100                       	smpsAlterNote       $00
000881C8 E701                       	dc.b	smpsNoAttack, $01
000881CA E10C                       	smpsAlterNote       $0C
000881CC C703 8001                  	dc.b	nBb5, $03, nRst, $01
000881D0 E10B                       	smpsAlterNote       $0B
000881D2 C603                       	dc.b	nA5, $03
000881D4 E109                       	smpsAlterNote       $09
000881D6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000881DA E10B                       	smpsAlterNote       $0B
000881DC C60D                       	dc.b	nA5, $0D
000881DE E105                       	smpsAlterNote       $05
000881E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881E4 E10B                       	smpsAlterNote       $0B
000881E6 E701                       	dc.b	smpsNoAttack, $01
000881E8 E10E                       	smpsAlterNote       $0E
000881EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881EE E108                       	smpsAlterNote       $08
000881F0 E701                       	dc.b	smpsNoAttack, $01
000881F2 E104                       	smpsAlterNote       $04
000881F4 E701                       	dc.b	smpsNoAttack, $01
000881F6 E105                       	smpsAlterNote       $05
000881F8 E701                       	dc.b	smpsNoAttack, $01
000881FA E10B                       	smpsAlterNote       $0B
000881FC E701                       	dc.b	smpsNoAttack, $01
000881FE E10F                       	smpsAlterNote       $0F
00088200 E701                       	dc.b	smpsNoAttack, $01
00088202 E10B                       	smpsAlterNote       $0B
00088204 E701                       	dc.b	smpsNoAttack, $01
00088206 E108                       	smpsAlterNote       $08
00088208 E701                       	dc.b	smpsNoAttack, $01
0008820A E104                       	smpsAlterNote       $04
0008820C E701                       	dc.b	smpsNoAttack, $01
0008820E E108                       	smpsAlterNote       $08
00088210 E701                       	dc.b	smpsNoAttack, $01
00088212 E10E                       	smpsAlterNote       $0E
00088214 E701                       	dc.b	smpsNoAttack, $01
00088216 E10F                       	smpsAlterNote       $0F
00088218 E701                       	dc.b	smpsNoAttack, $01
0008821A E10B                       	smpsAlterNote       $0B
0008821C E701                       	dc.b	smpsNoAttack, $01
0008821E E105                       	smpsAlterNote       $05
00088220 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088224 E108                       	smpsAlterNote       $08
00088226 E701                       	dc.b	smpsNoAttack, $01
00088228 E10E                       	smpsAlterNote       $0E
0008822A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008822E E108                       	smpsAlterNote       $08
00088230 E701                       	dc.b	smpsNoAttack, $01
00088232 E105                       	smpsAlterNote       $05
00088234 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088238 E10B                       	smpsAlterNote       $0B
0008823A E701                       	dc.b	smpsNoAttack, $01
0008823C E10F                       	smpsAlterNote       $0F
0008823E E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00088242 E107                       	smpsAlterNote       $07
00088244 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088248 E108                       	smpsAlterNote       $08
0008824A C103                       	dc.b	nE5, $03
0008824C E109                       	smpsAlterNote       $09
0008824E C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00088256 E10B                       	smpsAlterNote       $0B
00088258 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008825C E107                       	smpsAlterNote       $07
0008825E BF03                       	dc.b	nD5, $03
00088260 E106                       	smpsAlterNote       $06
00088262 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00088266 E107                       	smpsAlterNote       $07
00088268 CB03                       	dc.b	nD6, $03
0008826A E10C                       	smpsAlterNote       $0C
0008826C C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088270 E10B                       	smpsAlterNote       $0B
00088272 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088276 E109                       	smpsAlterNote       $09
00088278 C404                       	dc.b	nG5, $04
0008827A E10B                       	smpsAlterNote       $0B
0008827C C60D                       	dc.b	nA5, $0D
0008827E E108                       	smpsAlterNote       $08
00088280 E701                       	dc.b	smpsNoAttack, $01
00088282 E104                       	smpsAlterNote       $04
00088284 E701                       	dc.b	smpsNoAttack, $01
00088286 E108                       	smpsAlterNote       $08
00088288 E701                       	dc.b	smpsNoAttack, $01
0008828A E10B                       	smpsAlterNote       $0B
0008828C E701                       	dc.b	smpsNoAttack, $01
0008828E E10F                       	smpsAlterNote       $0F
00088290 E701                       	dc.b	smpsNoAttack, $01
00088292 E10B                       	smpsAlterNote       $0B
00088294 E701                       	dc.b	smpsNoAttack, $01
00088296 E105                       	smpsAlterNote       $05
00088298 E701                       	dc.b	smpsNoAttack, $01
0008829A E104                       	smpsAlterNote       $04
0008829C E701                       	dc.b	smpsNoAttack, $01
0008829E E108                       	smpsAlterNote       $08
000882A0 E701                       	dc.b	smpsNoAttack, $01
000882A2 E10E                       	smpsAlterNote       $0E
000882A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882A8 E10B                       	smpsAlterNote       $0B
000882AA E701                       	dc.b	smpsNoAttack, $01
000882AC E105                       	smpsAlterNote       $05
000882AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882B2 E10B                       	smpsAlterNote       $0B
000882B4 E701                       	dc.b	smpsNoAttack, $01
000882B6 E10E                       	smpsAlterNote       $0E
000882B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882BC E108                       	smpsAlterNote       $08
000882BE E701                       	dc.b	smpsNoAttack, $01
000882C0 E104                       	smpsAlterNote       $04
000882C2 E701                       	dc.b	smpsNoAttack, $01
000882C4 E105                       	smpsAlterNote       $05
000882C6 E701                       	dc.b	smpsNoAttack, $01
000882C8 E10B                       	smpsAlterNote       $0B
000882CA E701                       	dc.b	smpsNoAttack, $01
000882CC E10F                       	smpsAlterNote       $0F
000882CE E701                       	dc.b	smpsNoAttack, $01
000882D0 E10B                       	smpsAlterNote       $0B
000882D2 E701                       	dc.b	smpsNoAttack, $01
000882D4 E108                       	smpsAlterNote       $08
000882D6 E701                       	dc.b	smpsNoAttack, $01
000882D8 E105                       	smpsAlterNote       $05
000882DA 8001                       	dc.b	nRst, $01
000882DC E109                       	smpsAlterNote       $09
000882DE C401                       	dc.b	nG5, $01
000882E0 E10B                       	smpsAlterNote       $0B
000882E2 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000882EB E109                       	smpsAlterNote       $09
000882ED C404 8001                  	dc.b	nG5, $04, nRst, $01
000882F1 E10B                       	smpsAlterNote       $0B
000882F3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000882F7 E107                       	smpsAlterNote       $07
000882F9 BF0D                       	dc.b	nD5, $0D
000882FB E101                       	smpsAlterNote       $01
000882FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088301 E104                       	smpsAlterNote       $04
00088303 E701                       	dc.b	smpsNoAttack, $01
00088305 E10A                       	smpsAlterNote       $0A
00088307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008830B E104                       	smpsAlterNote       $04
0008830D E701                       	dc.b	smpsNoAttack, $01
0008830F E101                       	smpsAlterNote       $01
00088311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088315 E107                       	smpsAlterNote       $07
00088317 E701                       	dc.b	smpsNoAttack, $01
00088319 E10B                       	smpsAlterNote       $0B
0008831B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008831F E108                       	smpsAlterNote       $08
00088321 C101                       	dc.b	nE5, $01
00088323 E109                       	smpsAlterNote       $09
00088325 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008832A E10B                       	smpsAlterNote       $0B
0008832C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088334 E108                       	smpsAlterNote       $08
00088336 CD06                       	dc.b	nE6, $06
00088338 E109                       	smpsAlterNote       $09
0008833A CE07                       	dc.b	nF6, $07
0008833C E108                       	smpsAlterNote       $08
0008833E CD03 8001                  	dc.b	nE6, $03, nRst, $01
00088342 E106                       	smpsAlterNote       $06
00088344 C903                       	dc.b	nC6, $03
00088346 E109                       	smpsAlterNote       $09
00088348 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008834C E10C                       	smpsAlterNote       $0C
0008834E C70D                       	dc.b	nBb5, $0D
00088350 E106                       	smpsAlterNote       $06
00088352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088356 E109                       	smpsAlterNote       $09
00088358 E701                       	dc.b	smpsNoAttack, $01
0008835A E10F                       	smpsAlterNote       $0F
0008835C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088360 E109                       	smpsAlterNote       $09
00088362 E701                       	dc.b	smpsNoAttack, $01
00088364 E106                       	smpsAlterNote       $06
00088366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008836A E10C                       	smpsAlterNote       $0C
0008836C E701                       	dc.b	smpsNoAttack, $01
0008836E E110                       	smpsAlterNote       $10
00088370 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088374 E10B                       	smpsAlterNote       $0B
00088376 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008837A E105                       	smpsAlterNote       $05
0008837C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088380 E10B                       	smpsAlterNote       $0B
00088382 E701                       	dc.b	smpsNoAttack, $01
00088384 E10E                       	smpsAlterNote       $0E
00088386 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008838A E108                       	smpsAlterNote       $08
0008838C E701                       	dc.b	smpsNoAttack, $01
0008838E E104                       	smpsAlterNote       $04
00088390 E701                       	dc.b	smpsNoAttack, $01
00088392 E105                       	smpsAlterNote       $05
00088394 E701                       	dc.b	smpsNoAttack, $01
00088396 E10B                       	smpsAlterNote       $0B
00088398 E701                       	dc.b	smpsNoAttack, $01
0008839A E10F                       	smpsAlterNote       $0F
0008839C E701                       	dc.b	smpsNoAttack, $01
0008839E E10B                       	smpsAlterNote       $0B
000883A0 E701                       	dc.b	smpsNoAttack, $01
000883A2 E108                       	smpsAlterNote       $08
000883A4 E701                       	dc.b	smpsNoAttack, $01
000883A6 E104                       	smpsAlterNote       $04
000883A8 E701                       	dc.b	smpsNoAttack, $01
000883AA E108                       	smpsAlterNote       $08
000883AC E701                       	dc.b	smpsNoAttack, $01
000883AE E10E                       	smpsAlterNote       $0E
000883B0 E701                       	dc.b	smpsNoAttack, $01
000883B2 E10F                       	smpsAlterNote       $0F
000883B4 E701                       	dc.b	smpsNoAttack, $01
000883B6 E10B                       	smpsAlterNote       $0B
000883B8 E701                       	dc.b	smpsNoAttack, $01
000883BA E105                       	smpsAlterNote       $05
000883BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883C0 E108                       	smpsAlterNote       $08
000883C2 E701                       	dc.b	smpsNoAttack, $01
000883C4 E10E                       	smpsAlterNote       $0E
000883C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883CA E108                       	smpsAlterNote       $08
000883CC E701                       	dc.b	smpsNoAttack, $01
000883CE E105                       	smpsAlterNote       $05
000883D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883D4 E10B                       	smpsAlterNote       $0B
000883D6 E701                       	dc.b	smpsNoAttack, $01
000883D8 E10F                       	smpsAlterNote       $0F
000883DA E701                       	dc.b	smpsNoAttack, $01
000883DC E10E                       	smpsAlterNote       $0E
000883DE E701                       	dc.b	smpsNoAttack, $01
000883E0 E108                       	smpsAlterNote       $08
000883E2 E701                       	dc.b	smpsNoAttack, $01
000883E4 E104                       	smpsAlterNote       $04
000883E6 E701                       	dc.b	smpsNoAttack, $01
000883E8 E108                       	smpsAlterNote       $08
000883EA E701                       	dc.b	smpsNoAttack, $01
000883EC E10E                       	smpsAlterNote       $0E
000883EE E701                       	dc.b	smpsNoAttack, $01
000883F0 E10F                       	smpsAlterNote       $0F
000883F2 E701                       	dc.b	smpsNoAttack, $01
000883F4 E10B                       	smpsAlterNote       $0B
000883F6 E701                       	dc.b	smpsNoAttack, $01
000883F8 E105                       	smpsAlterNote       $05
000883FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883FE E108                       	smpsAlterNote       $08
00088400 E701                       	dc.b	smpsNoAttack, $01
00088402 E10E                       	smpsAlterNote       $0E
00088404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088408 E108                       	smpsAlterNote       $08
0008840A E701                       	dc.b	smpsNoAttack, $01
0008840C E105                       	smpsAlterNote       $05
0008840E E701                       	dc.b	smpsNoAttack, $01
00088410 E10B                       	smpsAlterNote       $0B
00088412 C60D                       	dc.b	nA5, $0D
00088414 E108                       	smpsAlterNote       $08
00088416 E701                       	dc.b	smpsNoAttack, $01
00088418 E104                       	smpsAlterNote       $04
0008841A E701                       	dc.b	smpsNoAttack, $01
0008841C E105                       	smpsAlterNote       $05
0008841E E701                       	dc.b	smpsNoAttack, $01
00088420 E10B                       	smpsAlterNote       $0B
00088422 E701                       	dc.b	smpsNoAttack, $01
00088424 E10F                       	smpsAlterNote       $0F
00088426 E701                       	dc.b	smpsNoAttack, $01
00088428 E10B                       	smpsAlterNote       $0B
0008842A E701                       	dc.b	smpsNoAttack, $01
0008842C E108                       	smpsAlterNote       $08
0008842E E701                       	dc.b	smpsNoAttack, $01
00088430 E104                       	smpsAlterNote       $04
00088432 E701                       	dc.b	smpsNoAttack, $01
00088434 E108                       	smpsAlterNote       $08
00088436 E701                       	dc.b	smpsNoAttack, $01
00088438 E10E                       	smpsAlterNote       $0E
0008843A E701                       	dc.b	smpsNoAttack, $01
0008843C E10F                       	smpsAlterNote       $0F
0008843E E701                       	dc.b	smpsNoAttack, $01
00088442 E109                       	smpsAlterNote       $09
00088444 E6FF                       	smpsAlterVol        $FF
00088446 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088450 E108                       	smpsAlterNote       $08
00088452 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088458 E107                       	smpsAlterNote       $07
0008845A E601                       	smpsAlterVol        $01
0008845C BF03                       	dc.b	nD5, $03
0008845E E108                       	smpsAlterNote       $08
00088460 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088464 E109                       	smpsAlterNote       $09
00088466 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008846C E10B                       	smpsAlterNote       $0B
0008846E C606 8001                  	dc.b	nA5, $06, nRst, $01
00088472 E107                       	smpsAlterNote       $07
00088474 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088478 E106                       	smpsAlterNote       $06
0008847A C90D                       	dc.b	nC6, $0D
0008847C E103                       	smpsAlterNote       $03
0008847E E701                       	dc.b	smpsNoAttack, $01
00088480 E1FF                       	smpsAlterNote       $FF
00088482 E701                       	dc.b	smpsNoAttack, $01
00088484 E103                       	smpsAlterNote       $03
00088486 E701                       	dc.b	smpsNoAttack, $01
00088488 E109                       	smpsAlterNote       $09
0008848A E701                       	dc.b	smpsNoAttack, $01
0008848C E10A                       	smpsAlterNote       $0A
0008848E E701                       	dc.b	smpsNoAttack, $01
00088490 E106                       	smpsAlterNote       $06
00088492 E701                       	dc.b	smpsNoAttack, $01
00088494 E100                       	smpsAlterNote       $00
00088496 E701                       	dc.b	smpsNoAttack, $01
00088498 E10C                       	smpsAlterNote       $0C
0008849A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008849E E10B                       	smpsAlterNote       $0B
000884A0 C603                       	dc.b	nA5, $03
000884A2 E109                       	smpsAlterNote       $09
000884A4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000884A8 E10B                       	smpsAlterNote       $0B
000884AA C60D                       	dc.b	nA5, $0D
000884AC E105                       	smpsAlterNote       $05
000884AE E701                       	dc.b	smpsNoAttack, $01
000884B0 E104                       	smpsAlterNote       $04
000884B2 E701                       	dc.b	smpsNoAttack, $01
000884B4 E108                       	smpsAlterNote       $08
000884B6 E701                       	dc.b	smpsNoAttack, $01
000884B8 E10E                       	smpsAlterNote       $0E
000884BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884BE E10B                       	smpsAlterNote       $0B
000884C0 E701                       	dc.b	smpsNoAttack, $01
000884C2 E105                       	smpsAlterNote       $05
000884C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884C8 E10B                       	smpsAlterNote       $0B
000884CA E701                       	dc.b	smpsNoAttack, $01
000884CC E10E                       	smpsAlterNote       $0E
000884CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884D2 E108                       	smpsAlterNote       $08
000884D4 E701                       	dc.b	smpsNoAttack, $01
000884D6 E104                       	smpsAlterNote       $04
000884D8 E701                       	dc.b	smpsNoAttack, $01
000884DA E105                       	smpsAlterNote       $05
000884DC E701                       	dc.b	smpsNoAttack, $01
000884DE E10B                       	smpsAlterNote       $0B
000884E0 E701                       	dc.b	smpsNoAttack, $01
000884E2 E10F                       	smpsAlterNote       $0F
000884E4 E701                       	dc.b	smpsNoAttack, $01
000884E6 E10B                       	smpsAlterNote       $0B
000884E8 E701                       	dc.b	smpsNoAttack, $01
000884EA E108                       	smpsAlterNote       $08
000884EC E701                       	dc.b	smpsNoAttack, $01
000884EE E104                       	smpsAlterNote       $04
000884F0 E701                       	dc.b	smpsNoAttack, $01
000884F2 E108                       	smpsAlterNote       $08
000884F4 E701                       	dc.b	smpsNoAttack, $01
000884F6 E10E                       	smpsAlterNote       $0E
000884F8 E701                       	dc.b	smpsNoAttack, $01
000884FA E10F                       	smpsAlterNote       $0F
000884FC E701                       	dc.b	smpsNoAttack, $01
000884FE E10B                       	smpsAlterNote       $0B
00088500 E701                       	dc.b	smpsNoAttack, $01
00088502 E105                       	smpsAlterNote       $05
00088504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088508 E108                       	smpsAlterNote       $08
0008850A E701                       	dc.b	smpsNoAttack, $01
0008850C E10E                       	smpsAlterNote       $0E
0008850E E701                       	dc.b	smpsNoAttack, $01
00088510 E10F                       	smpsAlterNote       $0F
00088512 800F                       	dc.b	nRst, $0F
00088514 E107                       	smpsAlterNote       $07
00088516 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008851A E108                       	smpsAlterNote       $08
0008851C C103                       	dc.b	nE5, $03
0008851E E109                       	smpsAlterNote       $09
00088520 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088526 E10B                       	smpsAlterNote       $0B
00088528 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008852C E107                       	smpsAlterNote       $07
0008852E BF03                       	dc.b	nD5, $03
00088530 E106                       	smpsAlterNote       $06
00088532 C90E                       	dc.b	nC6, $0E
00088534 E107                       	smpsAlterNote       $07
00088536 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008853A E10C                       	smpsAlterNote       $0C
0008853C C704                       	dc.b	nBb5, $04
0008853E E10B                       	smpsAlterNote       $0B
00088540 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088544 E109                       	smpsAlterNote       $09
00088546 C404                       	dc.b	nG5, $04
00088548 E10B                       	smpsAlterNote       $0B
0008854A C60D                       	dc.b	nA5, $0D
0008854C E108                       	smpsAlterNote       $08
0008854E E701                       	dc.b	smpsNoAttack, $01
00088550 E105                       	smpsAlterNote       $05
00088552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088556 E10B                       	smpsAlterNote       $0B
00088558 E701                       	dc.b	smpsNoAttack, $01
0008855A E10F                       	smpsAlterNote       $0F
0008855C E701                       	dc.b	smpsNoAttack, $01
0008855E E10E                       	smpsAlterNote       $0E
00088560 E701                       	dc.b	smpsNoAttack, $01
00088562 E108                       	smpsAlterNote       $08
00088564 E701                       	dc.b	smpsNoAttack, $01
00088566 E104                       	smpsAlterNote       $04
00088568 E701                       	dc.b	smpsNoAttack, $01
0008856A E108                       	smpsAlterNote       $08
0008856C E701                       	dc.b	smpsNoAttack, $01
0008856E E10B                       	smpsAlterNote       $0B
00088570 E701                       	dc.b	smpsNoAttack, $01
00088572 E10F                       	smpsAlterNote       $0F
00088574 E701                       	dc.b	smpsNoAttack, $01
00088576 E10B                       	smpsAlterNote       $0B
00088578 E701                       	dc.b	smpsNoAttack, $01
0008857A E105                       	smpsAlterNote       $05
0008857C E701                       	dc.b	smpsNoAttack, $01
0008857E E104                       	smpsAlterNote       $04
00088580 E701                       	dc.b	smpsNoAttack, $01
00088582 E108                       	smpsAlterNote       $08
00088584 E701                       	dc.b	smpsNoAttack, $01
00088586 E10E                       	smpsAlterNote       $0E
00088588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008858C E10B                       	smpsAlterNote       $0B
0008858E E701                       	dc.b	smpsNoAttack, $01
00088590 E105                       	smpsAlterNote       $05
00088592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088596 E10B                       	smpsAlterNote       $0B
00088598 E701                       	dc.b	smpsNoAttack, $01
0008859A E10E                       	smpsAlterNote       $0E
0008859C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885A0 E108                       	smpsAlterNote       $08
000885A2 E701                       	dc.b	smpsNoAttack, $01
000885A4 E105                       	smpsAlterNote       $05
000885A6 8001                       	dc.b	nRst, $01
000885A8 E109                       	smpsAlterNote       $09
000885AA C402                       	dc.b	nG5, $02
000885AC E10B                       	smpsAlterNote       $0B
000885AE E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000885B7 E109                       	smpsAlterNote       $09
000885B9 C404                       	dc.b	nG5, $04
000885BB E10B                       	smpsAlterNote       $0B
000885BD C604 8001                  	dc.b	nA5, $04, nRst, $01
000885C1 E107                       	smpsAlterNote       $07
000885C3 BF0D                       	dc.b	nD5, $0D
000885C5 E101                       	smpsAlterNote       $01
000885C7 E701                       	dc.b	smpsNoAttack, $01
000885C9 E100                       	smpsAlterNote       $00
000885CB E701                       	dc.b	smpsNoAttack, $01
000885CD E104                       	smpsAlterNote       $04
000885CF E701                       	dc.b	smpsNoAttack, $01
000885D1 E10A                       	smpsAlterNote       $0A
000885D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885D7 E107                       	smpsAlterNote       $07
000885D9 E701                       	dc.b	smpsNoAttack, $01
000885DB E101                       	smpsAlterNote       $01
000885DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885E1 E107                       	smpsAlterNote       $07
000885E3 E701                       	dc.b	smpsNoAttack, $01
000885E5 E10A                       	smpsAlterNote       $0A
000885E7 E701                       	dc.b	smpsNoAttack, $01
000885E9 E10B                       	smpsAlterNote       $0B
000885EB 8001                       	dc.b	nRst, $01
000885ED E108                       	smpsAlterNote       $08
000885EF C101                       	dc.b	nE5, $01
000885F1 E109                       	smpsAlterNote       $09
000885F3 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000885F8 E10B                       	smpsAlterNote       $0B
000885FA C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088602 E108                       	smpsAlterNote       $08
00088604 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088608 E109                       	smpsAlterNote       $09
0008860A CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008860E E108                       	smpsAlterNote       $08
00088610 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088614 E106                       	smpsAlterNote       $06
00088616 C903                       	dc.b	nC6, $03
00088618 E109                       	smpsAlterNote       $09
0008861A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008861E E10C                       	smpsAlterNote       $0C
00088620 C70D                       	dc.b	nBb5, $0D
00088622 E109                       	smpsAlterNote       $09
00088624 E701                       	dc.b	smpsNoAttack, $01
00088626 E105                       	smpsAlterNote       $05
00088628 E701                       	dc.b	smpsNoAttack, $01
0008862A E109                       	smpsAlterNote       $09
0008862C E701                       	dc.b	smpsNoAttack, $01
0008862E E10F                       	smpsAlterNote       $0F
00088630 E701                       	dc.b	smpsNoAttack, $01
00088632 E110                       	smpsAlterNote       $10
00088634 E701                       	dc.b	smpsNoAttack, $01
00088636 E10C                       	smpsAlterNote       $0C
00088638 E701                       	dc.b	smpsNoAttack, $01
0008863A E106                       	smpsAlterNote       $06
0008863C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088640 E109                       	smpsAlterNote       $09
00088642 E701                       	dc.b	smpsNoAttack, $01
00088644 E10F                       	smpsAlterNote       $0F
00088646 E701                       	dc.b	smpsNoAttack, $01
00088648 E110                       	smpsAlterNote       $10
0008864A 8001                       	dc.b	nRst, $01
0008864C E10B                       	smpsAlterNote       $0B
0008864E C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088654 E105                       	smpsAlterNote       $05
00088656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008865A E108                       	smpsAlterNote       $08
0008865C E701                       	dc.b	smpsNoAttack, $01
0008865E E10E                       	smpsAlterNote       $0E
00088660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088664 E108                       	smpsAlterNote       $08
00088666 E701                       	dc.b	smpsNoAttack, $01
00088668 E105                       	smpsAlterNote       $05
0008866A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008866E E10B                       	smpsAlterNote       $0B
00088670 E701                       	dc.b	smpsNoAttack, $01
00088672 E10F                       	smpsAlterNote       $0F
00088674 E701                       	dc.b	smpsNoAttack, $01
00088676 E10E                       	smpsAlterNote       $0E
00088678 E701                       	dc.b	smpsNoAttack, $01
0008867A E108                       	smpsAlterNote       $08
0008867C E701                       	dc.b	smpsNoAttack, $01
0008867E E104                       	smpsAlterNote       $04
00088680 E701                       	dc.b	smpsNoAttack, $01
00088682 E108                       	smpsAlterNote       $08
00088684 E701                       	dc.b	smpsNoAttack, $01
00088686 E10B                       	smpsAlterNote       $0B
00088688 E701                       	dc.b	smpsNoAttack, $01
0008868A E10F                       	smpsAlterNote       $0F
0008868C E701                       	dc.b	smpsNoAttack, $01
0008868E E10B                       	smpsAlterNote       $0B
00088690 E701                       	dc.b	smpsNoAttack, $01
00088692 E105                       	smpsAlterNote       $05
00088694 E701                       	dc.b	smpsNoAttack, $01
00088696 E104                       	smpsAlterNote       $04
00088698 E701                       	dc.b	smpsNoAttack, $01
0008869A E108                       	smpsAlterNote       $08
0008869C E701                       	dc.b	smpsNoAttack, $01
0008869E E10E                       	smpsAlterNote       $0E
000886A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886A4 E10B                       	smpsAlterNote       $0B
000886A6 E701                       	dc.b	smpsNoAttack, $01
000886A8 E105                       	smpsAlterNote       $05
000886AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886AE E10B                       	smpsAlterNote       $0B
000886B0 E701                       	dc.b	smpsNoAttack, $01
000886B2 E10E                       	smpsAlterNote       $0E
000886B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886B8 E108                       	smpsAlterNote       $08
000886BA E701                       	dc.b	smpsNoAttack, $01
000886BC E104                       	smpsAlterNote       $04
000886BE E701                       	dc.b	smpsNoAttack, $01
000886C0 E105                       	smpsAlterNote       $05
000886C2 E701                       	dc.b	smpsNoAttack, $01
000886C4 E10B                       	smpsAlterNote       $0B
000886C6 E701                       	dc.b	smpsNoAttack, $01
000886C8 E10F                       	smpsAlterNote       $0F
000886CA E701                       	dc.b	smpsNoAttack, $01
000886CC E10B                       	smpsAlterNote       $0B
000886CE E701                       	dc.b	smpsNoAttack, $01
000886D0 E108                       	smpsAlterNote       $08
000886D2 E701                       	dc.b	smpsNoAttack, $01
000886D4 E104                       	smpsAlterNote       $04
000886D6 E701                       	dc.b	smpsNoAttack, $01
000886D8 E108                       	smpsAlterNote       $08
000886DA E701                       	dc.b	smpsNoAttack, $01
000886DC E10E                       	smpsAlterNote       $0E
000886DE E701                       	dc.b	smpsNoAttack, $01
000886E0 E10F                       	smpsAlterNote       $0F
000886E2 E701                       	dc.b	smpsNoAttack, $01
000886E4 E10B                       	smpsAlterNote       $0B
000886E6 E701                       	dc.b	smpsNoAttack, $01
000886E8 E105                       	smpsAlterNote       $05
000886EA E701                       	dc.b	smpsNoAttack, $01
000886EC E10B                       	smpsAlterNote       $0B
000886EE C60E                       	dc.b	nA5, $0E
000886F0 E105                       	smpsAlterNote       $05
000886F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886F6 E10B                       	smpsAlterNote       $0B
000886F8 E701                       	dc.b	smpsNoAttack, $01
000886FA E10E                       	smpsAlterNote       $0E
000886FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088700 E108                       	smpsAlterNote       $08
00088702 E701                       	dc.b	smpsNoAttack, $01
00088704 E104                       	smpsAlterNote       $04
00088706 E701                       	dc.b	smpsNoAttack, $01
00088708 E105                       	smpsAlterNote       $05
0008870A E701                       	dc.b	smpsNoAttack, $01
0008870C E10B                       	smpsAlterNote       $0B
0008870E E701                       	dc.b	smpsNoAttack, $01
00088710 E10F                       	smpsAlterNote       $0F
00088712 E701                       	dc.b	smpsNoAttack, $01
00088714 E10B                       	smpsAlterNote       $0B
00088716 E701                       	dc.b	smpsNoAttack, $01
00088718 E108                       	smpsAlterNote       $08
0008871A E701                       	dc.b	smpsNoAttack, $01
0008871C E104                       	smpsAlterNote       $04
0008871E E701                       	dc.b	smpsNoAttack, $01
00088720 E108                       	smpsAlterNote       $08
00088722 E701                       	dc.b	smpsNoAttack, $01
00088724 E10E                       	smpsAlterNote       $0E
00088726 E701                       	dc.b	smpsNoAttack, $01
00088728 E10F                       	smpsAlterNote       $0F
0008872A E701                       	dc.b	smpsNoAttack, $01
0008872C E10B                       	smpsAlterNote       $0B
0008872E E701                       	dc.b	smpsNoAttack, $01
00088730 E105                       	smpsAlterNote       $05
00088732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088736 E108                       	smpsAlterNote       $08
00088738 E701                       	dc.b	smpsNoAttack, $01
0008873A E10E                       	smpsAlterNote       $0E
0008873C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088740 E108                       	smpsAlterNote       $08
00088742 E701                       	dc.b	smpsNoAttack, $01
00088744 E105                       	smpsAlterNote       $05
00088746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008874A E10B                       	smpsAlterNote       $0B
0008874C E701                       	dc.b	smpsNoAttack, $01
0008874E E10F                       	smpsAlterNote       $0F
00088750 E701                       	dc.b	smpsNoAttack, $01
00088752 E10E                       	smpsAlterNote       $0E
00088754 E701                       	dc.b	smpsNoAttack, $01
00088756 E108                       	smpsAlterNote       $08
00088758 E701                       	dc.b	smpsNoAttack, $01
0008875A E104                       	smpsAlterNote       $04
0008875C E701                       	dc.b	smpsNoAttack, $01
0008875E E108                       	smpsAlterNote       $08
00088760 E701                       	dc.b	smpsNoAttack, $01
00088762 E10E                       	smpsAlterNote       $0E
00088764 E701                       	dc.b	smpsNoAttack, $01
00088766 E10F                       	smpsAlterNote       $0F
00088768 E701                       	dc.b	smpsNoAttack, $01
0008876A E10B                       	smpsAlterNote       $0B
0008876C E701                       	dc.b	smpsNoAttack, $01
0008876E E105                       	smpsAlterNote       $05
00088770 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088774 E108                       	smpsAlterNote       $08
00088776 E701                       	dc.b	smpsNoAttack, $01
00088778 E10E                       	smpsAlterNote       $0E
0008877A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008877E E108                       	smpsAlterNote       $08
00088780 E701                       	dc.b	smpsNoAttack, $01
00088782 E105                       	smpsAlterNote       $05
00088784 E701                       	dc.b	smpsNoAttack, $01
00088788 E10B                       	smpsAlterNote       $0B
0008878A E6FD                       	smpsAlterVol        $FD
0008878C C604 8001                  	dc.b	nA5, $04, nRst, $01
00088790 E109                       	smpsAlterNote       $09
00088792 C404                       	dc.b	nG5, $04
00088794 E10B                       	smpsAlterNote       $0B
00088796 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008879A E107                       	smpsAlterNote       $07
0008879C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000887A2 E10B                       	smpsAlterNote       $0B
000887A4 C604                       	dc.b	nA5, $04
000887A6 E109                       	smpsAlterNote       $09
000887A8 C404 8001                  	dc.b	nG5, $04, nRst, $01
000887AC E10B                       	smpsAlterNote       $0B
000887AE C604                       	dc.b	nA5, $04
000887B0 E108                       	smpsAlterNote       $08
000887B2 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000887BA E106                       	smpsAlterNote       $06
000887BC C904 8001                  	dc.b	nC6, $04, nRst, $01
000887C0 E10C                       	smpsAlterNote       $0C
000887C2 C704                       	dc.b	nBb5, $04
000887C4 E10B                       	smpsAlterNote       $0B
000887C6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000887CA E109                       	smpsAlterNote       $09
000887CC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000887D6 E10B                       	smpsAlterNote       $0B
000887D8 C60D                       	dc.b	nA5, $0D
000887DA E108                       	smpsAlterNote       $08
000887DC E701                       	dc.b	smpsNoAttack, $01
000887DE E104                       	smpsAlterNote       $04
000887E0 E701                       	dc.b	smpsNoAttack, $01
000887E2 E108                       	smpsAlterNote       $08
000887E4 E701                       	dc.b	smpsNoAttack, $01
000887E6 E10E                       	smpsAlterNote       $0E
000887E8 E701                       	dc.b	smpsNoAttack, $01
000887EA E10F                       	smpsAlterNote       $0F
000887EC E701                       	dc.b	smpsNoAttack, $01
000887EE E10B                       	smpsAlterNote       $0B
000887F0 E701                       	dc.b	smpsNoAttack, $01
000887F2 E105                       	smpsAlterNote       $05
000887F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887F8 E108                       	smpsAlterNote       $08
000887FA E701                       	dc.b	smpsNoAttack, $01
000887FC E10E                       	smpsAlterNote       $0E
000887FE E701                       	dc.b	smpsNoAttack, $01
00088800 E10F                       	smpsAlterNote       $0F
00088802 8001                       	dc.b	nRst, $01
00088804 E109                       	smpsAlterNote       $09
00088806 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008880C E108                       	smpsAlterNote       $08
0008880E C10D                       	dc.b	nE5, $0D
00088810 E102                       	smpsAlterNote       $02
00088812 E701                       	dc.b	smpsNoAttack, $01
00088814 E101                       	smpsAlterNote       $01
00088816 E701                       	dc.b	smpsNoAttack, $01
00088818 E105                       	smpsAlterNote       $05
0008881A E701                       	dc.b	smpsNoAttack, $01
0008881C E10B                       	smpsAlterNote       $0B
0008881E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088822 E108                       	smpsAlterNote       $08
00088824 E701                       	dc.b	smpsNoAttack, $01
00088826 E102                       	smpsAlterNote       $02
00088828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008882C E108                       	smpsAlterNote       $08
0008882E E701                       	dc.b	smpsNoAttack, $01
00088830 E10B                       	smpsAlterNote       $0B
00088832 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088836 E105                       	smpsAlterNote       $05
00088838 E701                       	dc.b	smpsNoAttack, $01
0008883A E101                       	smpsAlterNote       $01
0008883C E701                       	dc.b	smpsNoAttack, $01
0008883E E102                       	smpsAlterNote       $02
00088840 E701                       	dc.b	smpsNoAttack, $01
00088842 E108                       	smpsAlterNote       $08
00088844 E701                       	dc.b	smpsNoAttack, $01
00088846 E10C                       	smpsAlterNote       $0C
00088848 E701                       	dc.b	smpsNoAttack, $01
0008884A E108                       	smpsAlterNote       $08
0008884C E701                       	dc.b	smpsNoAttack, $01
0008884E E105                       	smpsAlterNote       $05
00088850 E701                       	dc.b	smpsNoAttack, $01
00088852 E101                       	smpsAlterNote       $01
00088854 E701                       	dc.b	smpsNoAttack, $01
00088856 E105                       	smpsAlterNote       $05
00088858 E701                       	dc.b	smpsNoAttack, $01
0008885A E10B                       	smpsAlterNote       $0B
0008885C E701                       	dc.b	smpsNoAttack, $01
0008885E E10C                       	smpsAlterNote       $0C
00088860 E701                       	dc.b	smpsNoAttack, $01
00088862 E108                       	smpsAlterNote       $08
00088864 E701                       	dc.b	smpsNoAttack, $01
00088866 E102                       	smpsAlterNote       $02
00088868 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008886C E105                       	smpsAlterNote       $05
0008886E E701                       	dc.b	smpsNoAttack, $01
00088870 E10B                       	smpsAlterNote       $0B
00088872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088876 E105                       	smpsAlterNote       $05
00088878 E701                       	dc.b	smpsNoAttack, $01
0008887A E102                       	smpsAlterNote       $02
0008887C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088880 E108                       	smpsAlterNote       $08
00088882 E701                       	dc.b	smpsNoAttack, $01
00088884 E10C                       	smpsAlterNote       $0C
00088886 E701                       	dc.b	smpsNoAttack, $01
00088888 E10B                       	smpsAlterNote       $0B
0008888A E701                       	dc.b	smpsNoAttack, $01
0008888C E105                       	smpsAlterNote       $05
0008888E E701                       	dc.b	smpsNoAttack, $01
00088890 E101                       	smpsAlterNote       $01
00088892 E701                       	dc.b	smpsNoAttack, $01
00088894 E105                       	smpsAlterNote       $05
00088896 E701                       	dc.b	smpsNoAttack, $01
00088898 E108                       	smpsAlterNote       $08
0008889A E701                       	dc.b	smpsNoAttack, $01
0008889C E10C                       	smpsAlterNote       $0C
0008889E E701                       	dc.b	smpsNoAttack, $01
000888A0 E108                       	smpsAlterNote       $08
000888A2 E701                       	dc.b	smpsNoAttack, $01
000888A4 E102                       	smpsAlterNote       $02
000888A6 E701                       	dc.b	smpsNoAttack, $01
000888A8 E101                       	smpsAlterNote       $01
000888AA E701                       	dc.b	smpsNoAttack, $01
000888AC E105                       	smpsAlterNote       $05
000888AE E701                       	dc.b	smpsNoAttack, $01
000888B0 E10B                       	smpsAlterNote       $0B
000888B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888B6 E108                       	smpsAlterNote       $08
000888B8 E701                       	dc.b	smpsNoAttack, $01
000888BA E102                       	smpsAlterNote       $02
000888BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888C0 E108                       	smpsAlterNote       $08
000888C2 E701                       	dc.b	smpsNoAttack, $01
000888C4 E10B                       	smpsAlterNote       $0B
000888C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888CA E105                       	smpsAlterNote       $05
000888CC E701                       	dc.b	smpsNoAttack, $01
000888CE E101                       	smpsAlterNote       $01
000888D0 E701                       	dc.b	smpsNoAttack, $01
000888D2 E102                       	smpsAlterNote       $02
000888D4 E701                       	dc.b	smpsNoAttack, $01
000888D6 E108                       	smpsAlterNote       $08
000888D8 E701                       	dc.b	smpsNoAttack, $01
000888DA E10C                       	smpsAlterNote       $0C
000888DC E701                       	dc.b	smpsNoAttack, $01
000888DE E108                       	smpsAlterNote       $08
000888E0 E701                       	dc.b	smpsNoAttack, $01
000888E2 E105                       	smpsAlterNote       $05
000888E4 E701                       	dc.b	smpsNoAttack, $01
000888E6 E101                       	smpsAlterNote       $01
000888E8 E701                       	dc.b	smpsNoAttack, $01
000888EA E105                       	smpsAlterNote       $05
000888EC E701                       	dc.b	smpsNoAttack, $01
000888EE E10B                       	smpsAlterNote       $0B
000888F0 E701                       	dc.b	smpsNoAttack, $01
000888F2 E10C                       	smpsAlterNote       $0C
000888F4 E701                       	dc.b	smpsNoAttack, $01
000888F6 E108                       	smpsAlterNote       $08
000888F8 E701                       	dc.b	smpsNoAttack, $01
000888FA E102                       	smpsAlterNote       $02
000888FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088900 E105                       	smpsAlterNote       $05
00088902 E701                       	dc.b	smpsNoAttack, $01
00088904 E10B                       	smpsAlterNote       $0B
00088906 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008890A E105                       	smpsAlterNote       $05
0008890C E701                       	dc.b	smpsNoAttack, $01
0008890E E101                       	smpsAlterNote       $01
00088910 E701                       	dc.b	smpsNoAttack, $01
00088912 E102                       	smpsAlterNote       $02
00088914 E701                       	dc.b	smpsNoAttack, $01
00088916 E108                       	smpsAlterNote       $08
00088918 E701                       	dc.b	smpsNoAttack, $01
0008891A E10C                       	smpsAlterNote       $0C
0008891C E701                       	dc.b	smpsNoAttack, $01
0008891E E108                       	smpsAlterNote       $08
00088920 E701                       	dc.b	smpsNoAttack, $01
00088922 E105                       	smpsAlterNote       $05
00088924 E701                       	dc.b	smpsNoAttack, $01
00088926 E101                       	smpsAlterNote       $01
00088928 E701                       	dc.b	smpsNoAttack, $01
0008892A E105                       	smpsAlterNote       $05
0008892C E701                       	dc.b	smpsNoAttack, $01
0008892E E10B                       	smpsAlterNote       $0B
00088930 E701                       	dc.b	smpsNoAttack, $01
00088932 E10C                       	smpsAlterNote       $0C
00088934 E701                       	dc.b	smpsNoAttack, $01
00088936 E108                       	smpsAlterNote       $08
00088938 E701                       	dc.b	smpsNoAttack, $01
0008893A E102                       	smpsAlterNote       $02
0008893C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088940 E105                       	smpsAlterNote       $05
00088942 E701                       	dc.b	smpsNoAttack, $01
00088944 E10B                       	smpsAlterNote       $0B
00088946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008894A E105                       	smpsAlterNote       $05
0008894C E701                       	dc.b	smpsNoAttack, $01
0008894E E102                       	smpsAlterNote       $02
00088950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088954 E108                       	smpsAlterNote       $08
00088956 E701                       	dc.b	smpsNoAttack, $01
00088958 E10C                       	smpsAlterNote       $0C
0008895A E701                       	dc.b	smpsNoAttack, $01
0008895C E10B                       	smpsAlterNote       $0B
0008895E E701                       	dc.b	smpsNoAttack, $01
00088960 E105                       	smpsAlterNote       $05
00088962 E701                       	dc.b	smpsNoAttack, $01
00088964 E101                       	smpsAlterNote       $01
00088966 E701                       	dc.b	smpsNoAttack, $01
00088968 E105                       	smpsAlterNote       $05
0008896A E701                       	dc.b	smpsNoAttack, $01
0008896C E108                       	smpsAlterNote       $08
0008896E E701                       	dc.b	smpsNoAttack, $01
00088970 E10C                       	smpsAlterNote       $0C
00088972 E701                       	dc.b	smpsNoAttack, $01
00088976 E10B                       	smpsAlterNote       $0B
00088978 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008897C E109                       	smpsAlterNote       $09
0008897E C404                       	dc.b	nG5, $04
00088980 E10B                       	smpsAlterNote       $0B
00088982 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088986 E107                       	smpsAlterNote       $07
00088988 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008898E E10B                       	smpsAlterNote       $0B
00088990 C604                       	dc.b	nA5, $04
00088992 E109                       	smpsAlterNote       $09
00088994 C404 8001                  	dc.b	nG5, $04, nRst, $01
00088998 E10B                       	smpsAlterNote       $0B
0008899A C604                       	dc.b	nA5, $04
0008899C E108                       	smpsAlterNote       $08
0008899E C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000889A4 E106                       	smpsAlterNote       $06
000889A6 C904 8001                  	dc.b	nC6, $04, nRst, $01
000889AA E10C                       	smpsAlterNote       $0C
000889AC C704                       	dc.b	nBb5, $04
000889AE E10B                       	smpsAlterNote       $0B
000889B0 C604 8001                  	dc.b	nA5, $04, nRst, $01
000889B4 E109                       	smpsAlterNote       $09
000889B6 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000889C0 E10B                       	smpsAlterNote       $0B
000889C2 C60D                       	dc.b	nA5, $0D
000889C4 E108                       	smpsAlterNote       $08
000889C6 E701                       	dc.b	smpsNoAttack, $01
000889C8 E104                       	smpsAlterNote       $04
000889CA E701                       	dc.b	smpsNoAttack, $01
000889CC E108                       	smpsAlterNote       $08
000889CE E701                       	dc.b	smpsNoAttack, $01
000889D0 E10B                       	smpsAlterNote       $0B
000889D2 E701                       	dc.b	smpsNoAttack, $01
000889D4 E10F                       	smpsAlterNote       $0F
000889D6 E701                       	dc.b	smpsNoAttack, $01
000889D8 E10B                       	smpsAlterNote       $0B
000889DA E701                       	dc.b	smpsNoAttack, $01
000889DC E105                       	smpsAlterNote       $05
000889DE E701                       	dc.b	smpsNoAttack, $01
000889E0 E104                       	smpsAlterNote       $04
000889E2 E701                       	dc.b	smpsNoAttack, $01
000889E4 E108                       	smpsAlterNote       $08
000889E6 E701                       	dc.b	smpsNoAttack, $01
000889E8 E10E                       	smpsAlterNote       $0E
000889EA E701                       	dc.b	smpsNoAttack, $01
000889EC E10F                       	smpsAlterNote       $0F
000889EE 8001                       	dc.b	nRst, $01
000889F0 E109                       	smpsAlterNote       $09
000889F2 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000889F8 E108                       	smpsAlterNote       $08
000889FA C10D                       	dc.b	nE5, $0D
000889FC E105                       	smpsAlterNote       $05
000889FE E701                       	dc.b	smpsNoAttack, $01
00088A00 E101                       	smpsAlterNote       $01
00088A02 E701                       	dc.b	smpsNoAttack, $01
00088A04 E105                       	smpsAlterNote       $05
00088A06 E701                       	dc.b	smpsNoAttack, $01
00088A08 E10B                       	smpsAlterNote       $0B
00088A0A E701                       	dc.b	smpsNoAttack, $01
00088A0C E10C                       	smpsAlterNote       $0C
00088A0E E701                       	dc.b	smpsNoAttack, $01
00088A10 E108                       	smpsAlterNote       $08
00088A12 E701                       	dc.b	smpsNoAttack, $01
00088A14 E102                       	smpsAlterNote       $02
00088A16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A1A E105                       	smpsAlterNote       $05
00088A1C E701                       	dc.b	smpsNoAttack, $01
00088A1E E10B                       	smpsAlterNote       $0B
00088A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A24 E105                       	smpsAlterNote       $05
00088A26 E701                       	dc.b	smpsNoAttack, $01
00088A28 E102                       	smpsAlterNote       $02
00088A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A2E E108                       	smpsAlterNote       $08
00088A30 E701                       	dc.b	smpsNoAttack, $01
00088A32 E10C                       	smpsAlterNote       $0C
00088A34 E701                       	dc.b	smpsNoAttack, $01
00088A36 E10B                       	smpsAlterNote       $0B
00088A38 E701                       	dc.b	smpsNoAttack, $01
00088A3A E105                       	smpsAlterNote       $05
00088A3C E701                       	dc.b	smpsNoAttack, $01
00088A3E E101                       	smpsAlterNote       $01
00088A40 E701                       	dc.b	smpsNoAttack, $01
00088A42 E105                       	smpsAlterNote       $05
00088A44 E701                       	dc.b	smpsNoAttack, $01
00088A46 E108                       	smpsAlterNote       $08
00088A48 E701                       	dc.b	smpsNoAttack, $01
00088A4A E10C                       	smpsAlterNote       $0C
00088A4C E701                       	dc.b	smpsNoAttack, $01
00088A4E E108                       	smpsAlterNote       $08
00088A50 E701                       	dc.b	smpsNoAttack, $01
00088A52 E102                       	smpsAlterNote       $02
00088A54 E701                       	dc.b	smpsNoAttack, $01
00088A56 E101                       	smpsAlterNote       $01
00088A58 E701                       	dc.b	smpsNoAttack, $01
00088A5A E105                       	smpsAlterNote       $05
00088A5C E701                       	dc.b	smpsNoAttack, $01
00088A5E E10B                       	smpsAlterNote       $0B
00088A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A64 E108                       	smpsAlterNote       $08
00088A66 E701                       	dc.b	smpsNoAttack, $01
00088A68 E102                       	smpsAlterNote       $02
00088A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A6E E108                       	smpsAlterNote       $08
00088A70 E701                       	dc.b	smpsNoAttack, $01
00088A72 E10B                       	smpsAlterNote       $0B
00088A74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A78 E105                       	smpsAlterNote       $05
00088A7A E701                       	dc.b	smpsNoAttack, $01
00088A7C E101                       	smpsAlterNote       $01
00088A7E E701                       	dc.b	smpsNoAttack, $01
00088A80 E102                       	smpsAlterNote       $02
00088A82 E701                       	dc.b	smpsNoAttack, $01
00088A84 E108                       	smpsAlterNote       $08
00088A86 E701                       	dc.b	smpsNoAttack, $01
00088A88 E10C                       	smpsAlterNote       $0C
00088A8A E701                       	dc.b	smpsNoAttack, $01
00088A8C E108                       	smpsAlterNote       $08
00088A8E E701                       	dc.b	smpsNoAttack, $01
00088A90 E105                       	smpsAlterNote       $05
00088A92 E701                       	dc.b	smpsNoAttack, $01
00088A94 E101                       	smpsAlterNote       $01
00088A96 E701                       	dc.b	smpsNoAttack, $01
00088A98 E105                       	smpsAlterNote       $05
00088A9A E701                       	dc.b	smpsNoAttack, $01
00088A9C E10B                       	smpsAlterNote       $0B
00088A9E E701                       	dc.b	smpsNoAttack, $01
00088AA0 E10C                       	smpsAlterNote       $0C
00088AA2 E701                       	dc.b	smpsNoAttack, $01
00088AA4 E108                       	smpsAlterNote       $08
00088AA6 E701                       	dc.b	smpsNoAttack, $01
00088AA8 E102                       	smpsAlterNote       $02
00088AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AAE E108                       	smpsAlterNote       $08
00088AB0 E701                       	dc.b	smpsNoAttack, $01
00088AB2 E10B                       	smpsAlterNote       $0B
00088AB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AB8 E105                       	smpsAlterNote       $05
00088ABA E701                       	dc.b	smpsNoAttack, $01
00088ABC E101                       	smpsAlterNote       $01
00088ABE E701                       	dc.b	smpsNoAttack, $01
00088AC0 E102                       	smpsAlterNote       $02
00088AC2 E701                       	dc.b	smpsNoAttack, $01
00088AC4 E108                       	smpsAlterNote       $08
00088AC6 E701                       	dc.b	smpsNoAttack, $01
00088AC8 E10C                       	smpsAlterNote       $0C
00088ACA E701                       	dc.b	smpsNoAttack, $01
00088ACC E108                       	smpsAlterNote       $08
00088ACE E701                       	dc.b	smpsNoAttack, $01
00088AD0 E105                       	smpsAlterNote       $05
00088AD2 E701                       	dc.b	smpsNoAttack, $01
00088AD4 E101                       	smpsAlterNote       $01
00088AD6 E701                       	dc.b	smpsNoAttack, $01
00088AD8 E105                       	smpsAlterNote       $05
00088ADA E701                       	dc.b	smpsNoAttack, $01
00088ADC E10B                       	smpsAlterNote       $0B
00088ADE E701                       	dc.b	smpsNoAttack, $01
00088AE0 E10C                       	smpsAlterNote       $0C
00088AE2 E701                       	dc.b	smpsNoAttack, $01
00088AE4 E108                       	smpsAlterNote       $08
00088AE6 E701                       	dc.b	smpsNoAttack, $01
00088AE8 E102                       	smpsAlterNote       $02
00088AEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AEE E105                       	smpsAlterNote       $05
00088AF0 E701                       	dc.b	smpsNoAttack, $01
00088AF2 E10B                       	smpsAlterNote       $0B
00088AF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AF8 E105                       	smpsAlterNote       $05
00088AFA E701                       	dc.b	smpsNoAttack, $01
00088AFC E102                       	smpsAlterNote       $02
00088AFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B02 E108                       	smpsAlterNote       $08
00088B04 E701                       	dc.b	smpsNoAttack, $01
00088B06 E10C                       	smpsAlterNote       $0C
00088B08 E701                       	dc.b	smpsNoAttack, $01
00088B0A E10B                       	smpsAlterNote       $0B
00088B0C E701                       	dc.b	smpsNoAttack, $01
00088B0E E105                       	smpsAlterNote       $05
00088B10 E701                       	dc.b	smpsNoAttack, $01
00088B12 E101                       	smpsAlterNote       $01
00088B14 E701                       	dc.b	smpsNoAttack, $01
00088B16 E105                       	smpsAlterNote       $05
00088B18 E701                       	dc.b	smpsNoAttack, $01
00088B1A E108                       	smpsAlterNote       $08
00088B1C E701                       	dc.b	smpsNoAttack, $01
00088B1E E10C                       	smpsAlterNote       $0C
00088B20 E701                       	dc.b	smpsNoAttack, $01
00088B22 E108                       	smpsAlterNote       $08
00088B24 E701                       	dc.b	smpsNoAttack, $01
00088B26 E102                       	smpsAlterNote       $02
00088B28 E701                       	dc.b	smpsNoAttack, $01
00088B2A E101                       	smpsAlterNote       $01
00088B2C E701                       	dc.b	smpsNoAttack, $01
00088B2E E105                       	smpsAlterNote       $05
00088B30 E701                       	dc.b	smpsNoAttack, $01
00088B32 E10B                       	smpsAlterNote       $0B
00088B34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B38 E108                       	smpsAlterNote       $08
00088B3A E701                       	dc.b	smpsNoAttack, $01
00088B3C E102                       	smpsAlterNote       $02
00088B3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B42 E108                       	smpsAlterNote       $08
00088B44 E701                       	dc.b	smpsNoAttack, $01
00088B46 E10B                       	smpsAlterNote       $0B
00088B48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B4C E105                       	smpsAlterNote       $05
00088B4E E701                       	dc.b	smpsNoAttack, $01
00088B50 E102                       	smpsAlterNote       $02
00088B52 8001                       	dc.b	nRst, $01
00088B54 E107                       	smpsAlterNote       $07
00088B56 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00088B5A E108                       	smpsAlterNote       $08
00088B5C C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00088B60 E102                       	smpsAlterNote       $02
00088B62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B66 E108                       	smpsAlterNote       $08
00088B68 E701                       	dc.b	smpsNoAttack, $01
00088B6A E10B                       	smpsAlterNote       $0B
00088B6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B70 E105                       	smpsAlterNote       $05
00088B72 E701                       	dc.b	smpsNoAttack, $01
00088B74 E101                       	smpsAlterNote       $01
00088B76 E701                       	dc.b	smpsNoAttack, $01
00088B78 E102                       	smpsAlterNote       $02
00088B7A E701                       	dc.b	smpsNoAttack, $01
00088B7C E108                       	smpsAlterNote       $08
00088B7E E701                       	dc.b	smpsNoAttack, $01
00088B80 E10C                       	smpsAlterNote       $0C
00088B82 E701                       	dc.b	smpsNoAttack, $01
00088B84 E108                       	smpsAlterNote       $08
00088B86 E701                       	dc.b	smpsNoAttack, $01
00088B88 E105                       	smpsAlterNote       $05
00088B8A E701                       	dc.b	smpsNoAttack, $01
00088B8C E101                       	smpsAlterNote       $01
00088B8E E701                       	dc.b	smpsNoAttack, $01
00088B90 E105                       	smpsAlterNote       $05
00088B92 E701                       	dc.b	smpsNoAttack, $01
00088B94 E10B                       	smpsAlterNote       $0B
00088B96 E701                       	dc.b	smpsNoAttack, $01
00088B98 E10C                       	smpsAlterNote       $0C
00088B9A E701                       	dc.b	smpsNoAttack, $01
00088B9C E108                       	smpsAlterNote       $08
00088B9E E701                       	dc.b	smpsNoAttack, $01
00088BA0 E102                       	smpsAlterNote       $02
00088BA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BA6 E105                       	smpsAlterNote       $05
00088BA8 E701                       	dc.b	smpsNoAttack, $01
00088BAA E10B                       	smpsAlterNote       $0B
00088BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BB0 E105                       	smpsAlterNote       $05
00088BB2 E701                       	dc.b	smpsNoAttack, $01
00088BB4 E102                       	smpsAlterNote       $02
00088BB6 E701                       	dc.b	smpsNoAttack, $01
00088BB8 E109                       	smpsAlterNote       $09
00088BBA C40A C207                  	dc.b	nG5, $0A, nF5, $07
00088BBE E108                       	smpsAlterNote       $08
00088BC0 C10D                       	dc.b	nE5, $0D
00088BC2 E105                       	smpsAlterNote       $05
00088BC4 E701                       	dc.b	smpsNoAttack, $01
00088BC6 E101                       	smpsAlterNote       $01
00088BC8 E701                       	dc.b	smpsNoAttack, $01
00088BCA E102                       	smpsAlterNote       $02
00088BCC E701                       	dc.b	smpsNoAttack, $01
00088BCE E108                       	smpsAlterNote       $08
00088BD0 E701                       	dc.b	smpsNoAttack, $01
00088BD2 E10C                       	smpsAlterNote       $0C
00088BD4 E701                       	dc.b	smpsNoAttack, $01
00088BD6 E108                       	smpsAlterNote       $08
00088BD8 E701                       	dc.b	smpsNoAttack, $01
00088BDA E105                       	smpsAlterNote       $05
00088BDC E701                       	dc.b	smpsNoAttack, $01
00088BDE E101                       	smpsAlterNote       $01
00088BE0 E701                       	dc.b	smpsNoAttack, $01
00088BE2 E105                       	smpsAlterNote       $05
00088BE4 E701                       	dc.b	smpsNoAttack, $01
00088BE6 E10B                       	smpsAlterNote       $0B
00088BE8 E701                       	dc.b	smpsNoAttack, $01
00088BEA E10C                       	smpsAlterNote       $0C
00088BEC E701                       	dc.b	smpsNoAttack, $01
00088BEE E108                       	smpsAlterNote       $08
00088BF0 E701                       	dc.b	smpsNoAttack, $01
00088BF2 E102                       	smpsAlterNote       $02
00088BF4 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00088BFC E10B                       	smpsAlterNote       $0B
00088BFE BA01 8001                  	dc.b	nA4, $01, nRst, $01
00088C02 E10C                       	smpsAlterNote       $0C
00088C04 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00088C08 E10B                       	smpsAlterNote       $0B
00088C0A BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00088C10 E107                       	smpsAlterNote       $07
00088C12 BF03                       	dc.b	nD5, $03
00088C14 E108                       	smpsAlterNote       $08
00088C16 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088C1A E109                       	smpsAlterNote       $09
00088C1C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088C22 E10B                       	smpsAlterNote       $0B
00088C24 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088C28 E107                       	smpsAlterNote       $07
00088C2A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088C2E E106                       	smpsAlterNote       $06
00088C30 C90D                       	dc.b	nC6, $0D
00088C32 E103                       	smpsAlterNote       $03
00088C34 E701                       	dc.b	smpsNoAttack, $01
00088C36 E1FF                       	smpsAlterNote       $FF
00088C38 E701                       	dc.b	smpsNoAttack, $01
00088C3A E103                       	smpsAlterNote       $03
00088C3C E701                       	dc.b	smpsNoAttack, $01
00088C3E E109                       	smpsAlterNote       $09
00088C40 E701                       	dc.b	smpsNoAttack, $01
00088C42 E10A                       	smpsAlterNote       $0A
00088C44 E701                       	dc.b	smpsNoAttack, $01
00088C46 E106                       	smpsAlterNote       $06
00088C48 E701                       	dc.b	smpsNoAttack, $01
00088C4A E100                       	smpsAlterNote       $00
00088C4C E701                       	dc.b	smpsNoAttack, $01
00088C4E E10C                       	smpsAlterNote       $0C
00088C50 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088C54 E10B                       	smpsAlterNote       $0B
00088C56 C603                       	dc.b	nA5, $03
00088C58 E109                       	smpsAlterNote       $09
00088C5A C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C5E E10B                       	smpsAlterNote       $0B
00088C60 C60D                       	dc.b	nA5, $0D
00088C62 E105                       	smpsAlterNote       $05
00088C64 E701                       	dc.b	smpsNoAttack, $01
00088C66 E104                       	smpsAlterNote       $04
00088C68 E701                       	dc.b	smpsNoAttack, $01
00088C6A E108                       	smpsAlterNote       $08
00088C6C E701                       	dc.b	smpsNoAttack, $01
00088C6E E10E                       	smpsAlterNote       $0E
00088C70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C74 E10B                       	smpsAlterNote       $0B
00088C76 E701                       	dc.b	smpsNoAttack, $01
00088C78 E105                       	smpsAlterNote       $05
00088C7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C7E E10B                       	smpsAlterNote       $0B
00088C80 E701                       	dc.b	smpsNoAttack, $01
00088C82 E10E                       	smpsAlterNote       $0E
00088C84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C88 E108                       	smpsAlterNote       $08
00088C8A E701                       	dc.b	smpsNoAttack, $01
00088C8C E104                       	smpsAlterNote       $04
00088C8E E701                       	dc.b	smpsNoAttack, $01
00088C90 E105                       	smpsAlterNote       $05
00088C92 E701                       	dc.b	smpsNoAttack, $01
00088C94 E10B                       	smpsAlterNote       $0B
00088C96 E701                       	dc.b	smpsNoAttack, $01
00088C98 E10F                       	smpsAlterNote       $0F
00088C9A E701                       	dc.b	smpsNoAttack, $01
00088C9C E10B                       	smpsAlterNote       $0B
00088C9E E701                       	dc.b	smpsNoAttack, $01
00088CA0 E108                       	smpsAlterNote       $08
00088CA2 E701                       	dc.b	smpsNoAttack, $01
00088CA4 E104                       	smpsAlterNote       $04
00088CA6 E701                       	dc.b	smpsNoAttack, $01
00088CA8 E108                       	smpsAlterNote       $08
00088CAA E701                       	dc.b	smpsNoAttack, $01
00088CAC E10E                       	smpsAlterNote       $0E
00088CAE E701                       	dc.b	smpsNoAttack, $01
00088CB0 E10F                       	smpsAlterNote       $0F
00088CB2 E701                       	dc.b	smpsNoAttack, $01
00088CB4 E10B                       	smpsAlterNote       $0B
00088CB6 E701                       	dc.b	smpsNoAttack, $01
00088CB8 E105                       	smpsAlterNote       $05
00088CBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CBE E108                       	smpsAlterNote       $08
00088CC0 E701                       	dc.b	smpsNoAttack, $01
00088CC2 E10E                       	smpsAlterNote       $0E
00088CC4 E701                       	dc.b	smpsNoAttack, $01
00088CC6 E10F                       	smpsAlterNote       $0F
00088CC8 800F                       	dc.b	nRst, $0F
00088CCA E107                       	smpsAlterNote       $07
00088CCC BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088CD0 E108                       	smpsAlterNote       $08
00088CD2 C103                       	dc.b	nE5, $03
00088CD4 E109                       	smpsAlterNote       $09
00088CD6 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088CDC E10B                       	smpsAlterNote       $0B
00088CDE C607                       	dc.b	nA5, $07
00088CE0 E107                       	smpsAlterNote       $07
00088CE2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088CE6 E106                       	smpsAlterNote       $06
00088CE8 C90D                       	dc.b	nC6, $0D
00088CEA E107                       	smpsAlterNote       $07
00088CEC CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088CF0 E10C                       	smpsAlterNote       $0C
00088CF2 C704                       	dc.b	nBb5, $04
00088CF4 E10B                       	smpsAlterNote       $0B
00088CF6 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088CFA E109                       	smpsAlterNote       $09
00088CFC C404                       	dc.b	nG5, $04
00088CFE E10B                       	smpsAlterNote       $0B
00088D00 C60D                       	dc.b	nA5, $0D
00088D02 E108                       	smpsAlterNote       $08
00088D04 E701                       	dc.b	smpsNoAttack, $01
00088D06 E105                       	smpsAlterNote       $05
00088D08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D0C E10B                       	smpsAlterNote       $0B
00088D0E E701                       	dc.b	smpsNoAttack, $01
00088D10 E10F                       	smpsAlterNote       $0F
00088D12 E701                       	dc.b	smpsNoAttack, $01
00088D14 E10E                       	smpsAlterNote       $0E
00088D16 E701                       	dc.b	smpsNoAttack, $01
00088D18 E108                       	smpsAlterNote       $08
00088D1A E701                       	dc.b	smpsNoAttack, $01
00088D1C E104                       	smpsAlterNote       $04
00088D1E E701                       	dc.b	smpsNoAttack, $01
00088D20 E108                       	smpsAlterNote       $08
00088D22 E701                       	dc.b	smpsNoAttack, $01
00088D24 E10B                       	smpsAlterNote       $0B
00088D26 E701                       	dc.b	smpsNoAttack, $01
00088D28 E10F                       	smpsAlterNote       $0F
00088D2A E701                       	dc.b	smpsNoAttack, $01
00088D2C E10B                       	smpsAlterNote       $0B
00088D2E E701                       	dc.b	smpsNoAttack, $01
00088D30 E105                       	smpsAlterNote       $05
00088D32 E701                       	dc.b	smpsNoAttack, $01
00088D34 E104                       	smpsAlterNote       $04
00088D36 E701                       	dc.b	smpsNoAttack, $01
00088D38 E108                       	smpsAlterNote       $08
00088D3A E701                       	dc.b	smpsNoAttack, $01
00088D3C E10E                       	smpsAlterNote       $0E
00088D3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D42 E10B                       	smpsAlterNote       $0B
00088D44 E701                       	dc.b	smpsNoAttack, $01
00088D46 E105                       	smpsAlterNote       $05
00088D48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D4C E10B                       	smpsAlterNote       $0B
00088D4E E701                       	dc.b	smpsNoAttack, $01
00088D50 E10E                       	smpsAlterNote       $0E
00088D52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D56 E108                       	smpsAlterNote       $08
00088D58 E701                       	dc.b	smpsNoAttack, $01
00088D5A E105                       	smpsAlterNote       $05
00088D5C 8001                       	dc.b	nRst, $01
00088D5E E109                       	smpsAlterNote       $09
00088D60 C401 8001                  	dc.b	nG5, $01, nRst, $01
00088D64 E10B                       	smpsAlterNote       $0B
00088D66 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088D6E E109                       	smpsAlterNote       $09
00088D70 C404                       	dc.b	nG5, $04
00088D72 E10B                       	smpsAlterNote       $0B
00088D74 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088D78 E107                       	smpsAlterNote       $07
00088D7A BF0D                       	dc.b	nD5, $0D
00088D7C E101                       	smpsAlterNote       $01
00088D7E E701                       	dc.b	smpsNoAttack, $01
00088D80 E100                       	smpsAlterNote       $00
00088D82 E701                       	dc.b	smpsNoAttack, $01
00088D84 E104                       	smpsAlterNote       $04
00088D86 E701                       	dc.b	smpsNoAttack, $01
00088D88 E10A                       	smpsAlterNote       $0A
00088D8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D8E E107                       	smpsAlterNote       $07
00088D90 E701                       	dc.b	smpsNoAttack, $01
00088D92 E101                       	smpsAlterNote       $01
00088D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D98 E107                       	smpsAlterNote       $07
00088D9A E701                       	dc.b	smpsNoAttack, $01
00088D9C E10A                       	smpsAlterNote       $0A
00088D9E E701                       	dc.b	smpsNoAttack, $01
00088DA0 E10B                       	smpsAlterNote       $0B
00088DA2 8001                       	dc.b	nRst, $01
00088DA4 E108                       	smpsAlterNote       $08
00088DA6 8001                       	dc.b	nRst, $01
00088DA8 E109                       	smpsAlterNote       $09
00088DAA 8001 C401                  	dc.b	nRst, $01, nG5, $01
00088DAE E10B                       	smpsAlterNote       $0B
00088DB0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088DB8 E108                       	smpsAlterNote       $08
00088DBA CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088DBE E109                       	smpsAlterNote       $09
00088DC0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088DC4 E108                       	smpsAlterNote       $08
00088DC6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088DCA E106                       	smpsAlterNote       $06
00088DCC C903                       	dc.b	nC6, $03
00088DCE E109                       	smpsAlterNote       $09
00088DD0 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DD4 E10C                       	smpsAlterNote       $0C
00088DD6 C70D                       	dc.b	nBb5, $0D
00088DD8 E109                       	smpsAlterNote       $09
00088DDA E701                       	dc.b	smpsNoAttack, $01
00088DDC E105                       	smpsAlterNote       $05
00088DDE E701                       	dc.b	smpsNoAttack, $01
00088DE0 E109                       	smpsAlterNote       $09
00088DE2 E701                       	dc.b	smpsNoAttack, $01
00088DE4 E10F                       	smpsAlterNote       $0F
00088DE6 E701                       	dc.b	smpsNoAttack, $01
00088DE8 E110                       	smpsAlterNote       $10
00088DEA E701                       	dc.b	smpsNoAttack, $01
00088DEC E10C                       	smpsAlterNote       $0C
00088DEE E701                       	dc.b	smpsNoAttack, $01
00088DF0 E106                       	smpsAlterNote       $06
00088DF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DF6 E109                       	smpsAlterNote       $09
00088DF8 E701                       	dc.b	smpsNoAttack, $01
00088DFA E10F                       	smpsAlterNote       $0F
00088DFC E701                       	dc.b	smpsNoAttack, $01
00088DFE E110                       	smpsAlterNote       $10
00088E00 8001                       	dc.b	nRst, $01
00088E02 E10B                       	smpsAlterNote       $0B
00088E04 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088E08 E109                       	smpsAlterNote       $09
00088E0A C40D                       	dc.b	nG5, $0D
00088E0C E103                       	smpsAlterNote       $03
00088E0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E12 E106                       	smpsAlterNote       $06
00088E14 E701                       	dc.b	smpsNoAttack, $01
00088E16 E10C                       	smpsAlterNote       $0C
00088E18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E1C E106                       	smpsAlterNote       $06
00088E1E E701                       	dc.b	smpsNoAttack, $01
00088E20 E103                       	smpsAlterNote       $03
00088E22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E26 E109                       	smpsAlterNote       $09
00088E28 E701                       	dc.b	smpsNoAttack, $01
00088E2A E10D                       	smpsAlterNote       $0D
00088E2C E701                       	dc.b	smpsNoAttack, $01
00088E2E E10C                       	smpsAlterNote       $0C
00088E30 E701                       	dc.b	smpsNoAttack, $01
00088E32 E106                       	smpsAlterNote       $06
00088E34 E701                       	dc.b	smpsNoAttack, $01
00088E36 E102                       	smpsAlterNote       $02
00088E38 E701                       	dc.b	smpsNoAttack, $01
00088E3A E103                       	smpsAlterNote       $03
00088E3C 8001                       	dc.b	nRst, $01
00088E3E E10B                       	smpsAlterNote       $0B
00088E40 C60D                       	dc.b	nA5, $0D
00088E42 E108                       	smpsAlterNote       $08
00088E44 E701                       	dc.b	smpsNoAttack, $01
00088E46 E104                       	smpsAlterNote       $04
00088E48 E701                       	dc.b	smpsNoAttack, $01
00088E4A E108                       	smpsAlterNote       $08
00088E4C E701                       	dc.b	smpsNoAttack, $01
00088E4E E10B                       	smpsAlterNote       $0B
00088E50 E701                       	dc.b	smpsNoAttack, $01
00088E52 E10F                       	smpsAlterNote       $0F
00088E54 E701                       	dc.b	smpsNoAttack, $01
00088E56 E10B                       	smpsAlterNote       $0B
00088E58 E701                       	dc.b	smpsNoAttack, $01
00088E5A E105                       	smpsAlterNote       $05
00088E5C E701                       	dc.b	smpsNoAttack, $01
00088E5E E104                       	smpsAlterNote       $04
00088E60 E701                       	dc.b	smpsNoAttack, $01
00088E62 E108                       	smpsAlterNote       $08
00088E64 E701                       	dc.b	smpsNoAttack, $01
00088E66 E10E                       	smpsAlterNote       $0E
00088E68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E6C E10B                       	smpsAlterNote       $0B
00088E6E E701                       	dc.b	smpsNoAttack, $01
00088E70 E105                       	smpsAlterNote       $05
00088E72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E76 E10C                       	smpsAlterNote       $0C
00088E78 C70E                       	dc.b	nBb5, $0E
00088E7A E106                       	smpsAlterNote       $06
00088E7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E80 E10C                       	smpsAlterNote       $0C
00088E82 E701                       	dc.b	smpsNoAttack, $01
00088E84 E10F                       	smpsAlterNote       $0F
00088E86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E8A E109                       	smpsAlterNote       $09
00088E8C E701                       	dc.b	smpsNoAttack, $01
00088E8E E105                       	smpsAlterNote       $05
00088E90 E701                       	dc.b	smpsNoAttack, $01
00088E92 E106                       	smpsAlterNote       $06
00088E94 E701                       	dc.b	smpsNoAttack, $01
00088E96 E10C                       	smpsAlterNote       $0C
00088E98 E701                       	dc.b	smpsNoAttack, $01
00088E9A E110                       	smpsAlterNote       $10
00088E9C E701                       	dc.b	smpsNoAttack, $01
00088E9E E10C                       	smpsAlterNote       $0C
00088EA0 E701                       	dc.b	smpsNoAttack, $01
00088EA2 E109                       	smpsAlterNote       $09
00088EA4 E701                       	dc.b	smpsNoAttack, $01
00088EA6 E105                       	smpsAlterNote       $05
00088EA8 E701                       	dc.b	smpsNoAttack, $01
00088EAA E106                       	smpsAlterNote       $06
00088EAC 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00088EB0 E107                       	smpsAlterNote       $07
00088EB2 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00088EB7 E108                       	smpsAlterNote       $08
00088EB9 CD0D                       	dc.b	nE6, $0D
00088EBB E107                       	smpsAlterNote       $07
00088EBD CB0D                       	dc.b	nD6, $0D
00088EBF E104                       	smpsAlterNote       $04
00088EC1 E701                       	dc.b	smpsNoAttack, $01
00088EC3 E100                       	smpsAlterNote       $00
00088EC5 E701                       	dc.b	smpsNoAttack, $01
00088EC7 E101                       	smpsAlterNote       $01
00088EC9 E701                       	dc.b	smpsNoAttack, $01
00088ECB E107                       	smpsAlterNote       $07
00088ECD E701                       	dc.b	smpsNoAttack, $01
00088ECF E10B                       	smpsAlterNote       $0B
00088ED1 E701                       	dc.b	smpsNoAttack, $01
00088ED3 E107                       	smpsAlterNote       $07
00088ED5 E701                       	dc.b	smpsNoAttack, $01
00088ED7 E104                       	smpsAlterNote       $04
00088ED9 E701                       	dc.b	smpsNoAttack, $01
00088EDB E100                       	smpsAlterNote       $00
00088EDD E701                       	dc.b	smpsNoAttack, $01
00088EDF E104                       	smpsAlterNote       $04
00088EE1 E701                       	dc.b	smpsNoAttack, $01
00088EE3 E10A                       	smpsAlterNote       $0A
00088EE5 E701                       	dc.b	smpsNoAttack, $01
00088EE7 E10B                       	smpsAlterNote       $0B
00088EE9 E701                       	dc.b	smpsNoAttack, $01
00088EEB E108                       	smpsAlterNote       $08
00088EED CC0D                       	dc.b	nEb6, $0D
00088EEF E105                       	smpsAlterNote       $05
00088EF1 E701                       	dc.b	smpsNoAttack, $01
00088EF3 E101                       	smpsAlterNote       $01
00088EF5 E701                       	dc.b	smpsNoAttack, $01
00088EF7 E102                       	smpsAlterNote       $02
00088EF9 E701                       	dc.b	smpsNoAttack, $01
00088EFB E108                       	smpsAlterNote       $08
00088EFD E701                       	dc.b	smpsNoAttack, $01
00088EFF E106                       	smpsAlterNote       $06
00088F01 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00088F0D 8001                       	dc.b	nRst, $01
00088F0F E107                       	smpsAlterNote       $07
00088F11 CB0D                       	dc.b	nD6, $0D
00088F13 E104                       	smpsAlterNote       $04
00088F15 E701                       	dc.b	smpsNoAttack, $01
00088F17 E100                       	smpsAlterNote       $00
00088F19 E701                       	dc.b	smpsNoAttack, $01
00088F1B E104                       	smpsAlterNote       $04
00088F1D E701                       	dc.b	smpsNoAttack, $01
00088F1F E107                       	smpsAlterNote       $07
00088F21 E701                       	dc.b	smpsNoAttack, $01
00088F23 E10B                       	smpsAlterNote       $0B
00088F25 E701                       	dc.b	smpsNoAttack, $01
00088F27 E107                       	smpsAlterNote       $07
00088F29 E701                       	dc.b	smpsNoAttack, $01
00088F2B E101                       	smpsAlterNote       $01
00088F2D E701                       	dc.b	smpsNoAttack, $01
00088F2F E100                       	smpsAlterNote       $00
00088F31 E701                       	dc.b	smpsNoAttack, $01
00088F33 E104                       	smpsAlterNote       $04
00088F35 E701                       	dc.b	smpsNoAttack, $01
00088F37 E10A                       	smpsAlterNote       $0A
00088F39 E701                       	dc.b	smpsNoAttack, $01
00088F3B E10B                       	smpsAlterNote       $0B
00088F3D 8001                       	dc.b	nRst, $01
00088F3F E109                       	smpsAlterNote       $09
00088F41 CE0A                       	dc.b	nF6, $0A
00088F43 E108                       	smpsAlterNote       $08
00088F45 CC07                       	dc.b	nEb6, $07
00088F47 E106                       	smpsAlterNote       $06
00088F49 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00088F55 E107                       	smpsAlterNote       $07
00088F57 CB0D                       	dc.b	nD6, $0D
00088F59 E101                       	smpsAlterNote       $01
00088F5B E701                       	dc.b	smpsNoAttack, $01
00088F5D E100                       	smpsAlterNote       $00
00088F5F E701                       	dc.b	smpsNoAttack, $01
00088F61 E104                       	smpsAlterNote       $04
00088F63 E701                       	dc.b	smpsNoAttack, $01
00088F65 E10A                       	smpsAlterNote       $0A
00088F67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F6B E107                       	smpsAlterNote       $07
00088F6D E701                       	dc.b	smpsNoAttack, $01
00088F6F E101                       	smpsAlterNote       $01
00088F71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F75 E107                       	smpsAlterNote       $07
00088F77 E701                       	dc.b	smpsNoAttack, $01
00088F79 E10A                       	smpsAlterNote       $0A
00088F7B E701                       	dc.b	smpsNoAttack, $01
00088F7D E10B                       	smpsAlterNote       $0B
00088F7F 8001                       	dc.b	nRst, $01
00088F81 E108                       	smpsAlterNote       $08
00088F83 CC0D                       	dc.b	nEb6, $0D
00088F85 E102                       	smpsAlterNote       $02
00088F87 E701                       	dc.b	smpsNoAttack, $01
00088F89 E101                       	smpsAlterNote       $01
00088F8B E701                       	dc.b	smpsNoAttack, $01
00088F8D E105                       	smpsAlterNote       $05
00088F8F E701                       	dc.b	smpsNoAttack, $01
00088F91 E108                       	smpsAlterNote       $08
00088F93 8001                       	dc.b	nRst, $01
00088F95 E106                       	smpsAlterNote       $06
00088F97 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00088FA3 8001                       	dc.b	nRst, $01
00088FA5 E107                       	smpsAlterNote       $07
00088FA7 CB0D                       	dc.b	nD6, $0D
00088FA9 E101                       	smpsAlterNote       $01
00088FAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FAF E104                       	smpsAlterNote       $04
00088FB1 E701                       	dc.b	smpsNoAttack, $01
00088FB3 E10A                       	smpsAlterNote       $0A
00088FB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FB9 E104                       	smpsAlterNote       $04
00088FBB E701                       	dc.b	smpsNoAttack, $01
00088FBD E101                       	smpsAlterNote       $01
00088FBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FC3 E107                       	smpsAlterNote       $07
00088FC5 E701                       	dc.b	smpsNoAttack, $01
00088FC7 E10B                       	smpsAlterNote       $0B
00088FC9 E701                       	dc.b	smpsNoAttack, $01
00088FCB E10A                       	smpsAlterNote       $0A
00088FCD E701                       	dc.b	smpsNoAttack, $01
00088FCF E104                       	smpsAlterNote       $04
00088FD1 E701                       	dc.b	smpsNoAttack, $01
00088FD3 E100                       	smpsAlterNote       $00
00088FD5 E701                       	dc.b	smpsNoAttack, $01
00088FD7 E101                       	smpsAlterNote       $01
00088FD9 801C                       	dc.b	nRst, $1C
00088FDD E107                       	smpsAlterNote       $07
00088FDF BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088FE3 E603                       	smpsAlterVol        $03
00088FE5 F6F1 AD                    	smpsJump            music84_Jump03
00088FE8                            
00088FE8                            ; FM3 Data
00088FE8                            music84_FM3:
00088FE8 E0C0                       	smpsPan             panCenter, $00
00088FEC E109                       	smpsAlterNote       $09
00088FEE C203 8007                  	dc.b	nF5, $03, nRst, $07
00088FF2 E108                       	smpsAlterNote       $08
00088FF4 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00088FF8 E10B                       	smpsAlterNote       $0B
00088FFA BA03 8006                  	dc.b	nA4, $03, nRst, $06
00089000 E040                       	smpsPan             panRight, $00
00089002 E110                       	smpsAlterNote       $10
00089004 E6F9                       	smpsAlterVol        $F9
00089006 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008900A E10F                       	smpsAlterNote       $0F
0008900C C603                       	dc.b	nA5, $03
0008900E E10D                       	smpsAlterNote       $0D
00089010 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00089016 E10C                       	smpsAlterNote       $0C
00089018 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008901C E10A                       	smpsAlterNote       $0A
0008901E BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089022 E10F                       	smpsAlterNote       $0F
00089024 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089028 E0C0                       	smpsPan             panCenter, $00
0008902C E109                       	smpsAlterNote       $09
0008902E E609                       	smpsAlterVol        $09
00089030 B603                       	dc.b	nF4, $03
00089032                            
00089032                            music84_Jump02:
00089032 E70A                       	dc.b	smpsNoAttack, $0A
00089034 E103                       	smpsAlterNote       $03
00089036 E701                       	dc.b	smpsNoAttack, $01
00089038 E102                       	smpsAlterNote       $02
0008903A E701                       	dc.b	smpsNoAttack, $01
0008903C E106                       	smpsAlterNote       $06
0008903E E701                       	dc.b	smpsNoAttack, $01
00089040 E10C                       	smpsAlterNote       $0C
00089042 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089046 E109                       	smpsAlterNote       $09
00089048 E701                       	dc.b	smpsNoAttack, $01
0008904A E103                       	smpsAlterNote       $03
0008904C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089050 E109                       	smpsAlterNote       $09
00089052 E701                       	dc.b	smpsNoAttack, $01
00089054 E10C                       	smpsAlterNote       $0C
00089056 E701                       	dc.b	smpsNoAttack, $01
00089058 E10D                       	smpsAlterNote       $0D
0008905A 8001                       	dc.b	nRst, $01
0008905C E109                       	smpsAlterNote       $09
0008905E B80D                       	dc.b	nG4, $0D
00089060 E103                       	smpsAlterNote       $03
00089062 E701                       	dc.b	smpsNoAttack, $01
00089064 E102                       	smpsAlterNote       $02
00089066 E701                       	dc.b	smpsNoAttack, $01
00089068 E106                       	smpsAlterNote       $06
0008906A E701                       	dc.b	smpsNoAttack, $01
0008906C E10C                       	smpsAlterNote       $0C
0008906E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089072 E109                       	smpsAlterNote       $09
00089074 E701                       	dc.b	smpsNoAttack, $01
00089076 E103                       	smpsAlterNote       $03
00089078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008907C E109                       	smpsAlterNote       $09
0008907E E701                       	dc.b	smpsNoAttack, $01
00089080 E10C                       	smpsAlterNote       $0C
00089082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089086 E106                       	smpsAlterNote       $06
00089088 E701                       	dc.b	smpsNoAttack, $01
0008908A E102                       	smpsAlterNote       $02
0008908C E701                       	dc.b	smpsNoAttack, $01
0008908E E103                       	smpsAlterNote       $03
00089090 E701                       	dc.b	smpsNoAttack, $01
00089092 E109                       	smpsAlterNote       $09
00089094 E701                       	dc.b	smpsNoAttack, $01
00089096 E10D                       	smpsAlterNote       $0D
00089098 E701                       	dc.b	smpsNoAttack, $01
0008909A E109                       	smpsAlterNote       $09
0008909C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000890A0 E10B                       	smpsAlterNote       $0B
000890A2 BA0D                       	dc.b	nA4, $0D
000890A4 E105                       	smpsAlterNote       $05
000890A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890AA E108                       	smpsAlterNote       $08
000890AC E701                       	dc.b	smpsNoAttack, $01
000890AE E10E                       	smpsAlterNote       $0E
000890B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890B4 E108                       	smpsAlterNote       $08
000890B6 E701                       	dc.b	smpsNoAttack, $01
000890B8 E104                       	smpsAlterNote       $04
000890BA E701                       	dc.b	smpsNoAttack, $01
000890BC E105                       	smpsAlterNote       $05
000890BE E701                       	dc.b	smpsNoAttack, $01
000890C0 E10B                       	smpsAlterNote       $0B
000890C2 E701                       	dc.b	smpsNoAttack, $01
000890C4 E10F                       	smpsAlterNote       $0F
000890C6 E701                       	dc.b	smpsNoAttack, $01
000890C8 E10B                       	smpsAlterNote       $0B
000890CA E701                       	dc.b	smpsNoAttack, $01
000890CC E108                       	smpsAlterNote       $08
000890CE E701                       	dc.b	smpsNoAttack, $01
000890D0 E104                       	smpsAlterNote       $04
000890D2 E701                       	dc.b	smpsNoAttack, $01
000890D4 E108                       	smpsAlterNote       $08
000890D6 E701                       	dc.b	smpsNoAttack, $01
000890D8 E10E                       	smpsAlterNote       $0E
000890DA E701                       	dc.b	smpsNoAttack, $01
000890DC E10F                       	smpsAlterNote       $0F
000890DE E701                       	dc.b	smpsNoAttack, $01
000890E0 E10B                       	smpsAlterNote       $0B
000890E2 E701                       	dc.b	smpsNoAttack, $01
000890E4 E105                       	smpsAlterNote       $05
000890E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890EA E108                       	smpsAlterNote       $08
000890EC E701                       	dc.b	smpsNoAttack, $01
000890EE E10E                       	smpsAlterNote       $0E
000890F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890F4 E108                       	smpsAlterNote       $08
000890F6 E701                       	dc.b	smpsNoAttack, $01
000890F8 E105                       	smpsAlterNote       $05
000890FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890FE E10B                       	smpsAlterNote       $0B
00089100 E701                       	dc.b	smpsNoAttack, $01
00089102 E10F                       	smpsAlterNote       $0F
00089104 E701                       	dc.b	smpsNoAttack, $01
00089106 E10E                       	smpsAlterNote       $0E
00089108 E701                       	dc.b	smpsNoAttack, $01
0008910A E108                       	smpsAlterNote       $08
0008910C E701                       	dc.b	smpsNoAttack, $01
0008910E E104                       	smpsAlterNote       $04
00089110 E701                       	dc.b	smpsNoAttack, $01
00089112 E105                       	smpsAlterNote       $05
00089114 8001                       	dc.b	nRst, $01
00089116 E108                       	smpsAlterNote       $08
00089118 B50A                       	dc.b	nE4, $0A
0008911A E109                       	smpsAlterNote       $09
0008911C B60D                       	dc.b	nF4, $0D
0008911E E106                       	smpsAlterNote       $06
00089120 E701                       	dc.b	smpsNoAttack, $01
00089122 E103                       	smpsAlterNote       $03
00089124 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089128 E109                       	smpsAlterNote       $09
0008912A E701                       	dc.b	smpsNoAttack, $01
0008912C E10D                       	smpsAlterNote       $0D
0008912E E701                       	dc.b	smpsNoAttack, $01
00089130 E10C                       	smpsAlterNote       $0C
00089132 E701                       	dc.b	smpsNoAttack, $01
00089134 E106                       	smpsAlterNote       $06
00089136 E701                       	dc.b	smpsNoAttack, $01
00089138 E102                       	smpsAlterNote       $02
0008913A E701                       	dc.b	smpsNoAttack, $01
0008913C E106                       	smpsAlterNote       $06
0008913E E701                       	dc.b	smpsNoAttack, $01
00089140 E109                       	smpsAlterNote       $09
00089142 E701                       	dc.b	smpsNoAttack, $01
00089144 E10D                       	smpsAlterNote       $0D
00089146 E701                       	dc.b	smpsNoAttack, $01
00089148 E109                       	smpsAlterNote       $09
0008914A B80D                       	dc.b	nG4, $0D
0008914C E106                       	smpsAlterNote       $06
0008914E E701                       	dc.b	smpsNoAttack, $01
00089150 E103                       	smpsAlterNote       $03
00089152 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089156 E109                       	smpsAlterNote       $09
00089158 E701                       	dc.b	smpsNoAttack, $01
0008915A E10D                       	smpsAlterNote       $0D
0008915C E701                       	dc.b	smpsNoAttack, $01
0008915E E10C                       	smpsAlterNote       $0C
00089160 E701                       	dc.b	smpsNoAttack, $01
00089162 E106                       	smpsAlterNote       $06
00089164 E701                       	dc.b	smpsNoAttack, $01
00089166 E102                       	smpsAlterNote       $02
00089168 E701                       	dc.b	smpsNoAttack, $01
0008916A E106                       	smpsAlterNote       $06
0008916C E701                       	dc.b	smpsNoAttack, $01
0008916E E109                       	smpsAlterNote       $09
00089170 E701                       	dc.b	smpsNoAttack, $01
00089172 E10D                       	smpsAlterNote       $0D
00089174 E701                       	dc.b	smpsNoAttack, $01
00089176 E109                       	smpsAlterNote       $09
00089178 E701                       	dc.b	smpsNoAttack, $01
0008917A E103                       	smpsAlterNote       $03
0008917C E701                       	dc.b	smpsNoAttack, $01
0008917E E102                       	smpsAlterNote       $02
00089180 E701                       	dc.b	smpsNoAttack, $01
00089182 E106                       	smpsAlterNote       $06
00089184 E701                       	dc.b	smpsNoAttack, $01
00089186 E10C                       	smpsAlterNote       $0C
00089188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008918C E109                       	smpsAlterNote       $09
0008918E E701                       	dc.b	smpsNoAttack, $01
00089190 E10B                       	smpsAlterNote       $0B
00089192 BA0D                       	dc.b	nA4, $0D
00089194 E108                       	smpsAlterNote       $08
00089196 E701                       	dc.b	smpsNoAttack, $01
00089198 E104                       	smpsAlterNote       $04
0008919A E701                       	dc.b	smpsNoAttack, $01
0008919C E108                       	smpsAlterNote       $08
0008919E E701                       	dc.b	smpsNoAttack, $01
000891A0 E10B                       	smpsAlterNote       $0B
000891A2 E701                       	dc.b	smpsNoAttack, $01
000891A4 E10F                       	smpsAlterNote       $0F
000891A6 E701                       	dc.b	smpsNoAttack, $01
000891A8 E10B                       	smpsAlterNote       $0B
000891AA E701                       	dc.b	smpsNoAttack, $01
000891AC E105                       	smpsAlterNote       $05
000891AE E701                       	dc.b	smpsNoAttack, $01
000891B0 E104                       	smpsAlterNote       $04
000891B2 E701                       	dc.b	smpsNoAttack, $01
000891B4 E108                       	smpsAlterNote       $08
000891B6 E701                       	dc.b	smpsNoAttack, $01
000891B8 E10E                       	smpsAlterNote       $0E
000891BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891BE E10B                       	smpsAlterNote       $0B
000891C0 E701                       	dc.b	smpsNoAttack, $01
000891C2 E105                       	smpsAlterNote       $05
000891C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891C8 E10B                       	smpsAlterNote       $0B
000891CA E701                       	dc.b	smpsNoAttack, $01
000891CC E10E                       	smpsAlterNote       $0E
000891CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891D2 E108                       	smpsAlterNote       $08
000891D4 E701                       	dc.b	smpsNoAttack, $01
000891D6 E104                       	smpsAlterNote       $04
000891D8 E701                       	dc.b	smpsNoAttack, $01
000891DA E105                       	smpsAlterNote       $05
000891DC E701                       	dc.b	smpsNoAttack, $01
000891DE E10B                       	smpsAlterNote       $0B
000891E0 E701                       	dc.b	smpsNoAttack, $01
000891E2 E10F                       	smpsAlterNote       $0F
000891E4 E701                       	dc.b	smpsNoAttack, $01
000891E6 E10B                       	smpsAlterNote       $0B
000891E8 E701                       	dc.b	smpsNoAttack, $01
000891EA E108                       	smpsAlterNote       $08
000891EC E701                       	dc.b	smpsNoAttack, $01
000891EE E105                       	smpsAlterNote       $05
000891F0 8001                       	dc.b	nRst, $01
000891F2 E109                       	smpsAlterNote       $09
000891F4 B609 8001                  	dc.b	nF4, $09, nRst, $01
000891F8 E108                       	smpsAlterNote       $08
000891FA B506 8001                  	dc.b	nE4, $06, nRst, $01
000891FE E107                       	smpsAlterNote       $07
00089200 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089204 E108                       	smpsAlterNote       $08
00089206 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008920A E109                       	smpsAlterNote       $09
0008920C B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00089212 E10B                       	smpsAlterNote       $0B
00089214 BA0D                       	dc.b	nA4, $0D
00089216 E108                       	smpsAlterNote       $08
00089218 E701                       	dc.b	smpsNoAttack, $01
0008921A E104                       	smpsAlterNote       $04
0008921C E701                       	dc.b	smpsNoAttack, $01
0008921E E108                       	smpsAlterNote       $08
00089220 E701                       	dc.b	smpsNoAttack, $01
00089222 E10E                       	smpsAlterNote       $0E
00089224 E701                       	dc.b	smpsNoAttack, $01
00089226 E10F                       	smpsAlterNote       $0F
00089228 E701                       	dc.b	smpsNoAttack, $01
0008922A E10B                       	smpsAlterNote       $0B
0008922C E701                       	dc.b	smpsNoAttack, $01
0008922E E105                       	smpsAlterNote       $05
00089230 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089234 E108                       	smpsAlterNote       $08
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E10E                       	smpsAlterNote       $0E
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E10F                       	smpsAlterNote       $0F
0008923E 8001                       	dc.b	nRst, $01
00089240 E109                       	smpsAlterNote       $09
00089242 C20D                       	dc.b	nF5, $0D
00089244 E103                       	smpsAlterNote       $03
00089246 E701                       	dc.b	smpsNoAttack, $01
00089248 E102                       	smpsAlterNote       $02
0008924A E701                       	dc.b	smpsNoAttack, $01
0008924C E106                       	smpsAlterNote       $06
0008924E E701                       	dc.b	smpsNoAttack, $01
00089250 E10C                       	smpsAlterNote       $0C
00089252 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089256 E109                       	smpsAlterNote       $09
00089258 E701                       	dc.b	smpsNoAttack, $01
0008925A E103                       	smpsAlterNote       $03
0008925C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089260 E109                       	smpsAlterNote       $09
00089262 E701                       	dc.b	smpsNoAttack, $01
00089264 E10C                       	smpsAlterNote       $0C
00089266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008926A E106                       	smpsAlterNote       $06
0008926C E701                       	dc.b	smpsNoAttack, $01
0008926E E102                       	smpsAlterNote       $02
00089270 E701                       	dc.b	smpsNoAttack, $01
00089272 E103                       	smpsAlterNote       $03
00089274 E701                       	dc.b	smpsNoAttack, $01
00089276 E109                       	smpsAlterNote       $09
00089278 E701                       	dc.b	smpsNoAttack, $01
0008927A E10D                       	smpsAlterNote       $0D
0008927C E701                       	dc.b	smpsNoAttack, $01
0008927E E109                       	smpsAlterNote       $09
00089280 E701                       	dc.b	smpsNoAttack, $01
00089282 E106                       	smpsAlterNote       $06
00089284 E701                       	dc.b	smpsNoAttack, $01
00089286 E102                       	smpsAlterNote       $02
00089288 E701                       	dc.b	smpsNoAttack, $01
0008928A E106                       	smpsAlterNote       $06
0008928C E701                       	dc.b	smpsNoAttack, $01
0008928E E10C                       	smpsAlterNote       $0C
00089290 E701                       	dc.b	smpsNoAttack, $01
00089292 E10D                       	smpsAlterNote       $0D
00089294 E701                       	dc.b	smpsNoAttack, $01
00089296 E109                       	smpsAlterNote       $09
00089298 E701                       	dc.b	smpsNoAttack, $01
0008929A E103                       	smpsAlterNote       $03
0008929C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892A0 E106                       	smpsAlterNote       $06
000892A2 E701                       	dc.b	smpsNoAttack, $01
000892A4 E10C                       	smpsAlterNote       $0C
000892A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892AA E106                       	smpsAlterNote       $06
000892AC E701                       	dc.b	smpsNoAttack, $01
000892AE E103                       	smpsAlterNote       $03
000892B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892B4 E109                       	smpsAlterNote       $09
000892B6 E701                       	dc.b	smpsNoAttack, $01
000892B8 E10D                       	smpsAlterNote       $0D
000892BA E701                       	dc.b	smpsNoAttack, $01
000892BC E10C                       	smpsAlterNote       $0C
000892BE E701                       	dc.b	smpsNoAttack, $01
000892C0 E106                       	smpsAlterNote       $06
000892C2 E701                       	dc.b	smpsNoAttack, $01
000892C4 E102                       	smpsAlterNote       $02
000892C6 E701                       	dc.b	smpsNoAttack, $01
000892C8 E106                       	smpsAlterNote       $06
000892CA E701                       	dc.b	smpsNoAttack, $01
000892CC E109                       	smpsAlterNote       $09
000892CE E701                       	dc.b	smpsNoAttack, $01
000892D0 E10D                       	smpsAlterNote       $0D
000892D2 E701                       	dc.b	smpsNoAttack, $01
000892D4 E109                       	smpsAlterNote       $09
000892D6 E701                       	dc.b	smpsNoAttack, $01
000892D8 E103                       	smpsAlterNote       $03
000892DA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000892DE E109                       	smpsAlterNote       $09
000892E0 C206                       	dc.b	nF5, $06
000892E2 E108                       	smpsAlterNote       $08
000892E4 C10E                       	dc.b	nE5, $0E
000892E6 E102                       	smpsAlterNote       $02
000892E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892EC E108                       	smpsAlterNote       $08
000892EE E701                       	dc.b	smpsNoAttack, $01
000892F0 E10B                       	smpsAlterNote       $0B
000892F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892F6 E105                       	smpsAlterNote       $05
000892F8 E701                       	dc.b	smpsNoAttack, $01
000892FA E101                       	smpsAlterNote       $01
000892FC E701                       	dc.b	smpsNoAttack, $01
000892FE E102                       	smpsAlterNote       $02
00089300 E701                       	dc.b	smpsNoAttack, $01
00089302 E108                       	smpsAlterNote       $08
00089304 E701                       	dc.b	smpsNoAttack, $01
00089306 E10C                       	smpsAlterNote       $0C
00089308 E701                       	dc.b	smpsNoAttack, $01
0008930A E107                       	smpsAlterNote       $07
0008930C BF0E                       	dc.b	nD5, $0E
0008930E E101                       	smpsAlterNote       $01
00089310 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089314 E107                       	smpsAlterNote       $07
00089316 E701                       	dc.b	smpsNoAttack, $01
00089318 E10A                       	smpsAlterNote       $0A
0008931A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008931E E104                       	smpsAlterNote       $04
00089320 E701                       	dc.b	smpsNoAttack, $01
00089322 E100                       	smpsAlterNote       $00
00089324 E701                       	dc.b	smpsNoAttack, $01
00089326 E104                       	smpsAlterNote       $04
00089328 E701                       	dc.b	smpsNoAttack, $01
0008932A E107                       	smpsAlterNote       $07
0008932C E701                       	dc.b	smpsNoAttack, $01
0008932E E10B                       	smpsAlterNote       $0B
00089330 E701                       	dc.b	smpsNoAttack, $01
00089332 E107                       	smpsAlterNote       $07
00089334 E701                       	dc.b	smpsNoAttack, $01
00089336 E101                       	smpsAlterNote       $01
00089338 E701                       	dc.b	smpsNoAttack, $01
0008933A E100                       	smpsAlterNote       $00
0008933C E701                       	dc.b	smpsNoAttack, $01
0008933E E104                       	smpsAlterNote       $04
00089340 E701                       	dc.b	smpsNoAttack, $01
00089342 E10A                       	smpsAlterNote       $0A
00089344 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089348 E107                       	smpsAlterNote       $07
0008934A E701                       	dc.b	smpsNoAttack, $01
0008934C E101                       	smpsAlterNote       $01
0008934E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089352 E107                       	smpsAlterNote       $07
00089354 E701                       	dc.b	smpsNoAttack, $01
00089356 E10A                       	smpsAlterNote       $0A
00089358 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008935C E104                       	smpsAlterNote       $04
0008935E E701                       	dc.b	smpsNoAttack, $01
00089360 E100                       	smpsAlterNote       $00
00089362 E701                       	dc.b	smpsNoAttack, $01
00089364 E101                       	smpsAlterNote       $01
00089366 E701                       	dc.b	smpsNoAttack, $01
00089368 E107                       	smpsAlterNote       $07
0008936A E701                       	dc.b	smpsNoAttack, $01
0008936C E10B                       	smpsAlterNote       $0B
0008936E E701                       	dc.b	smpsNoAttack, $01
00089370 E107                       	smpsAlterNote       $07
00089372 E701                       	dc.b	smpsNoAttack, $01
00089374 E104                       	smpsAlterNote       $04
00089376 E701                       	dc.b	smpsNoAttack, $01
00089378 E100                       	smpsAlterNote       $00
0008937A E701                       	dc.b	smpsNoAttack, $01
0008937C E104                       	smpsAlterNote       $04
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E10A                       	smpsAlterNote       $0A
00089382 E701                       	dc.b	smpsNoAttack, $01
00089384 E10B                       	smpsAlterNote       $0B
00089386 E701                       	dc.b	smpsNoAttack, $01
00089388 E107                       	smpsAlterNote       $07
0008938A E701                       	dc.b	smpsNoAttack, $01
0008938C E101                       	smpsAlterNote       $01
0008938E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089392 E104                       	smpsAlterNote       $04
00089394 E701                       	dc.b	smpsNoAttack, $01
00089396 E10A                       	smpsAlterNote       $0A
00089398 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008939C E104                       	smpsAlterNote       $04
0008939E E701                       	dc.b	smpsNoAttack, $01
000893A0 E101                       	smpsAlterNote       $01
000893A2 E701                       	dc.b	smpsNoAttack, $01
000893A6 E107                       	smpsAlterNote       $07
000893A8 E6FF                       	smpsAlterVol        $FF
000893AA BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000893B6 8004                       	dc.b	nRst, $04
000893BA E109                       	smpsAlterNote       $09
000893BC E602                       	smpsAlterVol        $02
000893BE B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000893C4 E108                       	smpsAlterNote       $08
000893C6 B502 8001                  	dc.b	nE4, $02, nRst, $01
000893CA E109                       	smpsAlterNote       $09
000893CC B60D                       	dc.b	nF4, $0D
000893CE E106                       	smpsAlterNote       $06
000893D0 E701                       	dc.b	smpsNoAttack, $01
000893D2 E102                       	smpsAlterNote       $02
000893D4 E701                       	dc.b	smpsNoAttack, $01
000893D6 E106                       	smpsAlterNote       $06
000893D8 E701                       	dc.b	smpsNoAttack, $01
000893DA E109                       	smpsAlterNote       $09
000893DC E701                       	dc.b	smpsNoAttack, $01
000893DE E10D                       	smpsAlterNote       $0D
000893E0 E701                       	dc.b	smpsNoAttack, $01
000893E2 E109                       	smpsAlterNote       $09
000893E4 E701                       	dc.b	smpsNoAttack, $01
000893E6 E103                       	smpsAlterNote       $03
000893E8 E701                       	dc.b	smpsNoAttack, $01
000893EA E102                       	smpsAlterNote       $02
000893EC E701                       	dc.b	smpsNoAttack, $01
000893EE E106                       	smpsAlterNote       $06
000893F0 E701                       	dc.b	smpsNoAttack, $01
000893F2 E10C                       	smpsAlterNote       $0C
000893F4 E701                       	dc.b	smpsNoAttack, $01
000893F6 E10D                       	smpsAlterNote       $0D
000893F8 8001                       	dc.b	nRst, $01
000893FA E109                       	smpsAlterNote       $09
000893FC B80D                       	dc.b	nG4, $0D
000893FE E106                       	smpsAlterNote       $06
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 E102                       	smpsAlterNote       $02
00089404 E701                       	dc.b	smpsNoAttack, $01
00089406 E106                       	smpsAlterNote       $06
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E10C                       	smpsAlterNote       $0C
0008940C E701                       	dc.b	smpsNoAttack, $01
0008940E E10D                       	smpsAlterNote       $0D
00089410 E701                       	dc.b	smpsNoAttack, $01
00089412 E109                       	smpsAlterNote       $09
00089414 E701                       	dc.b	smpsNoAttack, $01
00089416 E103                       	smpsAlterNote       $03
00089418 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008941C E106                       	smpsAlterNote       $06
0008941E E701                       	dc.b	smpsNoAttack, $01
00089420 E10C                       	smpsAlterNote       $0C
00089422 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089426 E106                       	smpsAlterNote       $06
00089428 E701                       	dc.b	smpsNoAttack, $01
0008942A E103                       	smpsAlterNote       $03
0008942C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089430 E109                       	smpsAlterNote       $09
00089432 E701                       	dc.b	smpsNoAttack, $01
00089434 E10D                       	smpsAlterNote       $0D
00089436 E701                       	dc.b	smpsNoAttack, $01
00089438 E10C                       	smpsAlterNote       $0C
0008943A E701                       	dc.b	smpsNoAttack, $01
0008943C E109                       	smpsAlterNote       $09
0008943E 8001                       	dc.b	nRst, $01
00089440 E10B                       	smpsAlterNote       $0B
00089442 BA03                       	dc.b	nA4, $03
00089444 E10C                       	smpsAlterNote       $0C
00089446 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008944A E10B                       	smpsAlterNote       $0B
0008944C BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00089452 E10C                       	smpsAlterNote       $0C
00089454 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089458 E10B                       	smpsAlterNote       $0B
0008945A C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089460 E10C                       	smpsAlterNote       $0C
00089462 D303                       	dc.b	nBb6, $03
00089464 E10B                       	smpsAlterNote       $0B
00089466 D20D                       	dc.b	nA6, $0D
00089468 E108                       	smpsAlterNote       $08
0008946A E701                       	dc.b	smpsNoAttack, $01
0008946C E104                       	smpsAlterNote       $04
0008946E E701                       	dc.b	smpsNoAttack, $01
00089470 E105                       	smpsAlterNote       $05
00089472 E701                       	dc.b	smpsNoAttack, $01
00089474 E10B                       	smpsAlterNote       $0B
00089476 E701                       	dc.b	smpsNoAttack, $01
00089478 E10F                       	smpsAlterNote       $0F
0008947A E701                       	dc.b	smpsNoAttack, $01
0008947C E10B                       	smpsAlterNote       $0B
0008947E E701                       	dc.b	smpsNoAttack, $01
00089480 E108                       	smpsAlterNote       $08
00089482 E701                       	dc.b	smpsNoAttack, $01
00089484 E104                       	smpsAlterNote       $04
00089486 E701                       	dc.b	smpsNoAttack, $01
00089488 E108                       	smpsAlterNote       $08
0008948A E701                       	dc.b	smpsNoAttack, $01
0008948C E10E                       	smpsAlterNote       $0E
0008948E E701                       	dc.b	smpsNoAttack, $01
00089490 E10F                       	smpsAlterNote       $0F
00089492 E701                       	dc.b	smpsNoAttack, $01
00089494 E10B                       	smpsAlterNote       $0B
00089496 E701                       	dc.b	smpsNoAttack, $01
00089498 E105                       	smpsAlterNote       $05
0008949A E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000894A0 E109                       	smpsAlterNote       $09
000894A2 CE07                       	dc.b	nF6, $07
000894A4 E108                       	smpsAlterNote       $08
000894A6 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000894AA E109                       	smpsAlterNote       $09
000894AC CE03 8001                  	dc.b	nF6, $03, nRst, $01
000894B0 E108                       	smpsAlterNote       $08
000894B2 CC0D                       	dc.b	nEb6, $0D
000894B4 E102                       	smpsAlterNote       $02
000894B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894BA E108                       	smpsAlterNote       $08
000894BC E701                       	dc.b	smpsNoAttack, $01
000894BE E10B                       	smpsAlterNote       $0B
000894C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894C4 E105                       	smpsAlterNote       $05
000894C6 E701                       	dc.b	smpsNoAttack, $01
000894C8 E101                       	smpsAlterNote       $01
000894CA E701                       	dc.b	smpsNoAttack, $01
000894CC E102                       	smpsAlterNote       $02
000894CE E701                       	dc.b	smpsNoAttack, $01
000894D0 E108                       	smpsAlterNote       $08
000894D2 E701                       	dc.b	smpsNoAttack, $01
000894D4 E10C                       	smpsAlterNote       $0C
000894D6 E701                       	dc.b	smpsNoAttack, $01
000894D8 E108                       	smpsAlterNote       $08
000894DA E701                       	dc.b	smpsNoAttack, $01
000894DC E105                       	smpsAlterNote       $05
000894DE E701                       	dc.b	smpsNoAttack, $01
000894E0 E101                       	smpsAlterNote       $01
000894E2 E701                       	dc.b	smpsNoAttack, $01
000894E4 E105                       	smpsAlterNote       $05
000894E6 E701                       	dc.b	smpsNoAttack, $01
000894E8 E10B                       	smpsAlterNote       $0B
000894EA E701                       	dc.b	smpsNoAttack, $01
000894EC E10C                       	smpsAlterNote       $0C
000894EE E701                       	dc.b	smpsNoAttack, $01
000894F0 E108                       	smpsAlterNote       $08
000894F2 E701                       	dc.b	smpsNoAttack, $01
000894F4 E107                       	smpsAlterNote       $07
000894F6 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00089500 E10B                       	smpsAlterNote       $0B
00089502 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008950C E109                       	smpsAlterNote       $09
0008950E C203                       	dc.b	nF5, $03
00089510 E108                       	smpsAlterNote       $08
00089512 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089516 E109                       	smpsAlterNote       $09
00089518 C20D                       	dc.b	nF5, $0D
0008951A E108                       	smpsAlterNote       $08
0008951C C10E                       	dc.b	nE5, $0E
0008951E E107                       	smpsAlterNote       $07
00089520 BF0D                       	dc.b	nD5, $0D
00089522 E104                       	smpsAlterNote       $04
00089524 E701                       	dc.b	smpsNoAttack, $01
00089526 E100                       	smpsAlterNote       $00
00089528 E701                       	dc.b	smpsNoAttack, $01
0008952A E104                       	smpsAlterNote       $04
0008952C E701                       	dc.b	smpsNoAttack, $01
0008952E E107                       	smpsAlterNote       $07
00089530 E701                       	dc.b	smpsNoAttack, $01
00089532 E10B                       	smpsAlterNote       $0B
00089534 E701                       	dc.b	smpsNoAttack, $01
00089536 E107                       	smpsAlterNote       $07
00089538 E701                       	dc.b	smpsNoAttack, $01
0008953A E101                       	smpsAlterNote       $01
0008953C E701                       	dc.b	smpsNoAttack, $01
0008953E E100                       	smpsAlterNote       $00
00089540 E701                       	dc.b	smpsNoAttack, $01
00089542 E104                       	smpsAlterNote       $04
00089544 E701                       	dc.b	smpsNoAttack, $01
00089546 E10A                       	smpsAlterNote       $0A
00089548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008954C E107                       	smpsAlterNote       $07
0008954E E701                       	dc.b	smpsNoAttack, $01
00089550 E101                       	smpsAlterNote       $01
00089552 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089556 E107                       	smpsAlterNote       $07
00089558 E701                       	dc.b	smpsNoAttack, $01
0008955A E10A                       	smpsAlterNote       $0A
0008955C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089560 E104                       	smpsAlterNote       $04
00089562 E701                       	dc.b	smpsNoAttack, $01
00089564 E100                       	smpsAlterNote       $00
00089566 E701                       	dc.b	smpsNoAttack, $01
00089568 E101                       	smpsAlterNote       $01
0008956A E701                       	dc.b	smpsNoAttack, $01
0008956C E107                       	smpsAlterNote       $07
0008956E E701                       	dc.b	smpsNoAttack, $01
00089570 E10B                       	smpsAlterNote       $0B
00089572 E701                       	dc.b	smpsNoAttack, $01
00089574 E107                       	smpsAlterNote       $07
00089576 E701                       	dc.b	smpsNoAttack, $01
00089578 E104                       	smpsAlterNote       $04
0008957A E701                       	dc.b	smpsNoAttack, $01
0008957C E100                       	smpsAlterNote       $00
0008957E E701                       	dc.b	smpsNoAttack, $01
00089580 E104                       	smpsAlterNote       $04
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 E10A                       	smpsAlterNote       $0A
00089586 E701                       	dc.b	smpsNoAttack, $01
00089588 E10B                       	smpsAlterNote       $0B
0008958A E701                       	dc.b	smpsNoAttack, $01
0008958C E107                       	smpsAlterNote       $07
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E101                       	smpsAlterNote       $01
00089592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089596 E104                       	smpsAlterNote       $04
00089598 E701                       	dc.b	smpsNoAttack, $01
0008959A E10A                       	smpsAlterNote       $0A
0008959C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895A0 E104                       	smpsAlterNote       $04
000895A2 E701                       	dc.b	smpsNoAttack, $01
000895A4 E101                       	smpsAlterNote       $01
000895A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895AA E107                       	smpsAlterNote       $07
000895AC E701                       	dc.b	smpsNoAttack, $01
000895AE E10B                       	smpsAlterNote       $0B
000895B0 E701                       	dc.b	smpsNoAttack, $01
000895B2 E10A                       	smpsAlterNote       $0A
000895B4 E701                       	dc.b	smpsNoAttack, $01
000895B6 E104                       	smpsAlterNote       $04
000895B8 E701                       	dc.b	smpsNoAttack, $01
000895BA E100                       	smpsAlterNote       $00
000895BC E701                       	dc.b	smpsNoAttack, $01
000895BE E104                       	smpsAlterNote       $04
000895C0 E701                       	dc.b	smpsNoAttack, $01
000895C2 E107                       	smpsAlterNote       $07
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E10B                       	smpsAlterNote       $0B
000895C8 E701                       	dc.b	smpsNoAttack, $01
000895CA E107                       	smpsAlterNote       $07
000895CC E701                       	dc.b	smpsNoAttack, $01
000895CE E101                       	smpsAlterNote       $01
000895D0 E701                       	dc.b	smpsNoAttack, $01
000895D2 E100                       	smpsAlterNote       $00
000895D4 E701                       	dc.b	smpsNoAttack, $01
000895D6 E104                       	smpsAlterNote       $04
000895D8 E701                       	dc.b	smpsNoAttack, $01
000895DA E10A                       	smpsAlterNote       $0A
000895DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895E0 E107                       	smpsAlterNote       $07
000895E2 E701                       	dc.b	smpsNoAttack, $01
000895E4 E101                       	smpsAlterNote       $01
000895E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895EA E107                       	smpsAlterNote       $07
000895EC E701                       	dc.b	smpsNoAttack, $01
000895EE E10A                       	smpsAlterNote       $0A
000895F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895F4 E104                       	smpsAlterNote       $04
000895F6 E701                       	dc.b	smpsNoAttack, $01
000895F8 E100                       	smpsAlterNote       $00
000895FA E701                       	dc.b	smpsNoAttack, $01
000895FC E101                       	smpsAlterNote       $01
000895FE E701                       	dc.b	smpsNoAttack, $01
00089600 E107                       	smpsAlterNote       $07
00089602 E701                       	dc.b	smpsNoAttack, $01
00089604 E10B                       	smpsAlterNote       $0B
00089606 E701                       	dc.b	smpsNoAttack, $01
00089608 E107                       	smpsAlterNote       $07
0008960A E701                       	dc.b	smpsNoAttack, $01
0008960C E104                       	smpsAlterNote       $04
0008960E E701                       	dc.b	smpsNoAttack, $01
00089610 E100                       	smpsAlterNote       $00
00089612 E701                       	dc.b	smpsNoAttack, $01
00089614 E101                       	smpsAlterNote       $01
00089616 8001                       	dc.b	nRst, $01
00089618 E109                       	smpsAlterNote       $09
0008961A C20D                       	dc.b	nF5, $0D
0008961C E106                       	smpsAlterNote       $06
0008961E E701                       	dc.b	smpsNoAttack, $01
00089620 E102                       	smpsAlterNote       $02
00089622 E701                       	dc.b	smpsNoAttack, $01
00089624 E106                       	smpsAlterNote       $06
00089626 E701                       	dc.b	smpsNoAttack, $01
00089628 E10C                       	smpsAlterNote       $0C
0008962A E701                       	dc.b	smpsNoAttack, $01
0008962C E10D                       	smpsAlterNote       $0D
0008962E E701                       	dc.b	smpsNoAttack, $01
00089630 E109                       	smpsAlterNote       $09
00089632 E701                       	dc.b	smpsNoAttack, $01
00089634 E103                       	smpsAlterNote       $03
00089636 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008963A E106                       	smpsAlterNote       $06
0008963C E701                       	dc.b	smpsNoAttack, $01
0008963E E10C                       	smpsAlterNote       $0C
00089640 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089644 E106                       	smpsAlterNote       $06
00089646 E701                       	dc.b	smpsNoAttack, $01
00089648 E103                       	smpsAlterNote       $03
0008964A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008964E E109                       	smpsAlterNote       $09
00089650 E701                       	dc.b	smpsNoAttack, $01
00089652 E10D                       	smpsAlterNote       $0D
00089654 E701                       	dc.b	smpsNoAttack, $01
00089656 E10C                       	smpsAlterNote       $0C
00089658 E701                       	dc.b	smpsNoAttack, $01
0008965A E109                       	smpsAlterNote       $09
0008965C 8001                       	dc.b	nRst, $01
0008965E E108                       	smpsAlterNote       $08
00089660 C10D                       	dc.b	nE5, $0D
00089662 E109                       	smpsAlterNote       $09
00089664 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089668 E108                       	smpsAlterNote       $08
0008966A C10D                       	dc.b	nE5, $0D
0008966C E102                       	smpsAlterNote       $02
0008966E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089672 E105                       	smpsAlterNote       $05
00089674 E701                       	dc.b	smpsNoAttack, $01
00089676 E108                       	smpsAlterNote       $08
00089678 8001                       	dc.b	nRst, $01
0008967A E107                       	smpsAlterNote       $07
0008967C BF0D                       	dc.b	nD5, $0D
0008967E E108                       	smpsAlterNote       $08
00089680 C107                       	dc.b	nE5, $07
00089682 E109                       	smpsAlterNote       $09
00089684 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008968A E10B                       	smpsAlterNote       $0B
0008968C C603                       	dc.b	nA5, $03
0008968E E10C                       	smpsAlterNote       $0C
00089690 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089696 E10B                       	smpsAlterNote       $0B
00089698 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008969E E109                       	smpsAlterNote       $09
000896A0 D003                       	dc.b	nG6, $03
000896A2 E108                       	smpsAlterNote       $08
000896A4 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000896A8 E10B                       	smpsAlterNote       $0B
000896AA C601 8001                  	dc.b	nA5, $01, nRst, $01
000896AE E108                       	smpsAlterNote       $08
000896B0 C102                       	dc.b	nE5, $02
000896B4 E10C                       	smpsAlterNote       $0C
000896B6 E6FB                       	smpsAlterVol        $FB
000896B8 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000896C4 8001                       	dc.b	nRst, $01
000896C6 E10B                       	smpsAlterNote       $0B
000896C8 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000896D0 E107                       	smpsAlterNote       $07
000896D2 A706 8001                  	dc.b	nD3, $06, nRst, $01
000896D6 E10B                       	smpsAlterNote       $0B
000896D8 A203                       	dc.b	nA2, $03
000896DA E109                       	smpsAlterNote       $09
000896DC AA03 8001                  	dc.b	nF3, $03, nRst, $01
000896E0 E108                       	smpsAlterNote       $08
000896E2 A906                       	dc.b	nE3, $06
000896E4 E107                       	smpsAlterNote       $07
000896E6 A703 8001                  	dc.b	nD3, $03, nRst, $01
000896EA E106                       	smpsAlterNote       $06
000896EC A503                       	dc.b	nC3, $03
000896EE E10C                       	smpsAlterNote       $0C
000896F0 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000896F4 E10B                       	smpsAlterNote       $0B
000896F6 A203 8004                  	dc.b	nA2, $03, nRst, $04
000896FA E11B                       	smpsAlterNote       $1B
000896FC C401                       	dc.b	nG5, $01
000896FE E1F4                       	smpsAlterNote       $F4
00089700 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00089703 E106                       	smpsAlterNote       $06
00089705 E701                       	dc.b	smpsNoAttack, $01
00089707 E10F                       	smpsAlterNote       $0F
00089709 E701                       	dc.b	smpsNoAttack, $01
0008970B E1E4                       	smpsAlterNote       $E4
0008970D E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089710 E1F6                       	smpsAlterNote       $F6
00089712 E701                       	dc.b	smpsNoAttack, $01
00089714 E108                       	smpsAlterNote       $08
00089716 E701                       	dc.b	smpsNoAttack, $01
00089718 E10B                       	smpsAlterNote       $0B
0008971A E706                       	dc.b	smpsNoAttack, $06
0008971C E105                       	smpsAlterNote       $05
0008971E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089722 E108                       	smpsAlterNote       $08
00089724 E701                       	dc.b	smpsNoAttack, $01
00089726 E10E                       	smpsAlterNote       $0E
00089728 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008972C E108                       	smpsAlterNote       $08
0008972E E701                       	dc.b	smpsNoAttack, $01
00089730 E105                       	smpsAlterNote       $05
00089732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089736 E10B                       	smpsAlterNote       $0B
00089738 E701                       	dc.b	smpsNoAttack, $01
0008973A E10F                       	smpsAlterNote       $0F
0008973C E701                       	dc.b	smpsNoAttack, $01
0008973E E10E                       	smpsAlterNote       $0E
00089740 E701                       	dc.b	smpsNoAttack, $01
00089742 E108                       	smpsAlterNote       $08
00089744 E701                       	dc.b	smpsNoAttack, $01
00089746 E104                       	smpsAlterNote       $04
00089748 E701                       	dc.b	smpsNoAttack, $01
0008974A E108                       	smpsAlterNote       $08
0008974C E701                       	dc.b	smpsNoAttack, $01
0008974E E10B                       	smpsAlterNote       $0B
00089750 E701                       	dc.b	smpsNoAttack, $01
00089752 E10F                       	smpsAlterNote       $0F
00089754 E701                       	dc.b	smpsNoAttack, $01
00089756 E10B                       	smpsAlterNote       $0B
00089758 E701                       	dc.b	smpsNoAttack, $01
0008975A E105                       	smpsAlterNote       $05
0008975C E701                       	dc.b	smpsNoAttack, $01
0008975E E104                       	smpsAlterNote       $04
00089760 E701                       	dc.b	smpsNoAttack, $01
00089762 E108                       	smpsAlterNote       $08
00089764 E701                       	dc.b	smpsNoAttack, $01
00089766 E10E                       	smpsAlterNote       $0E
00089768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008976C E10B                       	smpsAlterNote       $0B
0008976E E701                       	dc.b	smpsNoAttack, $01
00089770 E105                       	smpsAlterNote       $05
00089772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089776 E10B                       	smpsAlterNote       $0B
00089778 E701                       	dc.b	smpsNoAttack, $01
0008977A E10E                       	smpsAlterNote       $0E
0008977C E701                       	dc.b	smpsNoAttack, $01
0008977E E10F                       	smpsAlterNote       $0F
00089780 8001                       	dc.b	nRst, $01
00089782 E109                       	smpsAlterNote       $09
00089784 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008978A E108                       	smpsAlterNote       $08
0008978C C101 8001                  	dc.b	nE5, $01, nRst, $01
00089790 E109                       	smpsAlterNote       $09
00089792 C202                       	dc.b	nF5, $02
00089794 E108                       	smpsAlterNote       $08
00089796 C102                       	dc.b	nE5, $02
00089798 E107                       	smpsAlterNote       $07
0008979A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008979E E108                       	smpsAlterNote       $08
000897A0 C101 8001                  	dc.b	nE5, $01, nRst, $01
000897A4 E107                       	smpsAlterNote       $07
000897A6 BF02                       	dc.b	nD5, $02
000897A8 E106                       	smpsAlterNote       $06
000897AA BD02 8001                  	dc.b	nC5, $02, nRst, $01
000897AE E107                       	smpsAlterNote       $07
000897B0 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000897B4 E106                       	smpsAlterNote       $06
000897B6 BD02                       	dc.b	nC5, $02
000897B8 E10C                       	smpsAlterNote       $0C
000897BA BB02                       	dc.b	nBb4, $02
000897BC E106                       	smpsAlterNote       $06
000897BE BD02 8001                  	dc.b	nC5, $02, nRst, $01
000897C2 E10C                       	smpsAlterNote       $0C
000897C4 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000897C8 E10B                       	smpsAlterNote       $0B
000897CA BA02                       	dc.b	nA4, $02
000897CC E10C                       	smpsAlterNote       $0C
000897CE BB02                       	dc.b	nBb4, $02
000897D0 E10B                       	smpsAlterNote       $0B
000897D2 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000897DC E108                       	smpsAlterNote       $08
000897DE B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000897E6 E107                       	smpsAlterNote       $07
000897E8 BE02                       	dc.b	nCs5, $02
000897EA E10B                       	smpsAlterNote       $0B
000897EC BA02                       	dc.b	nA4, $02
000897EE E109                       	smpsAlterNote       $09
000897F0 B802 8001                  	dc.b	nG4, $02, nRst, $01
000897F4 E108                       	smpsAlterNote       $08
000897F6 B501 8001                  	dc.b	nE4, $01, nRst, $01
000897FA E10B                       	smpsAlterNote       $0B
000897FC AE02                       	dc.b	nA3, $02
000897FE E10C                       	smpsAlterNote       $0C
00089800 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008980C E10B                       	smpsAlterNote       $0B
0008980E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089816 E107                       	smpsAlterNote       $07
00089818 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008981C E10B                       	smpsAlterNote       $0B
0008981E A203                       	dc.b	nA2, $03
00089820 E109                       	smpsAlterNote       $09
00089822 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089826 E108                       	smpsAlterNote       $08
00089828 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008982C E107                       	smpsAlterNote       $07
0008982E A702 8001                  	dc.b	nD3, $02, nRst, $01
00089832 E106                       	smpsAlterNote       $06
00089834 A503                       	dc.b	nC3, $03
00089836 E10C                       	smpsAlterNote       $0C
00089838 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008983E E107                       	smpsAlterNote       $07
00089840 B20D                       	dc.b	nCs4, $0D
00089842 E104                       	smpsAlterNote       $04
00089844 E701                       	dc.b	smpsNoAttack, $01
00089846 E100                       	smpsAlterNote       $00
00089848 E701                       	dc.b	smpsNoAttack, $01
0008984A E104                       	smpsAlterNote       $04
0008984C E701                       	dc.b	smpsNoAttack, $01
0008984E E10A                       	smpsAlterNote       $0A
00089850 E701                       	dc.b	smpsNoAttack, $01
00089852 E10B                       	smpsAlterNote       $0B
00089854 E701                       	dc.b	smpsNoAttack, $01
00089856 E107                       	smpsAlterNote       $07
00089858 E701                       	dc.b	smpsNoAttack, $01
0008985A E101                       	smpsAlterNote       $01
0008985C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089860 E104                       	smpsAlterNote       $04
00089862 E701                       	dc.b	smpsNoAttack, $01
00089864 E10A                       	smpsAlterNote       $0A
00089866 E701                       	dc.b	smpsNoAttack, $01
00089868 E10B                       	smpsAlterNote       $0B
0008986A 8001                       	dc.b	nRst, $01
0008986C E107                       	smpsAlterNote       $07
0008986E B30D                       	dc.b	nD4, $0D
00089870 E104                       	smpsAlterNote       $04
00089872 E701                       	dc.b	smpsNoAttack, $01
00089874 E100                       	smpsAlterNote       $00
00089876 E701                       	dc.b	smpsNoAttack, $01
00089878 E104                       	smpsAlterNote       $04
0008987A E701                       	dc.b	smpsNoAttack, $01
0008987C E10A                       	smpsAlterNote       $0A
0008987E E701                       	dc.b	smpsNoAttack, $01
00089880 E10B                       	smpsAlterNote       $0B
00089882 E701                       	dc.b	smpsNoAttack, $01
00089884 E107                       	smpsAlterNote       $07
00089886 E701                       	dc.b	smpsNoAttack, $01
00089888 E101                       	smpsAlterNote       $01
0008988A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008988E E104                       	smpsAlterNote       $04
00089890 E701                       	dc.b	smpsNoAttack, $01
00089892 E10A                       	smpsAlterNote       $0A
00089894 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089898 E104                       	smpsAlterNote       $04
0008989A E701                       	dc.b	smpsNoAttack, $01
0008989C E101                       	smpsAlterNote       $01
0008989E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A2 E107                       	smpsAlterNote       $07
000898A4 E701                       	dc.b	smpsNoAttack, $01
000898A6 E10B                       	smpsAlterNote       $0B
000898A8 E701                       	dc.b	smpsNoAttack, $01
000898AA E10A                       	smpsAlterNote       $0A
000898AC E701                       	dc.b	smpsNoAttack, $01
000898AE E107                       	smpsAlterNote       $07
000898B0 8001                       	dc.b	nRst, $01
000898B2 E108                       	smpsAlterNote       $08
000898B4 B50D                       	dc.b	nE4, $0D
000898B6 E102                       	smpsAlterNote       $02
000898B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898BC E105                       	smpsAlterNote       $05
000898BE E701                       	dc.b	smpsNoAttack, $01
000898C0 E10B                       	smpsAlterNote       $0B
000898C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898C6 E105                       	smpsAlterNote       $05
000898C8 E701                       	dc.b	smpsNoAttack, $01
000898CA E102                       	smpsAlterNote       $02
000898CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898D0 E108                       	smpsAlterNote       $08
000898D2 E701                       	dc.b	smpsNoAttack, $01
000898D4 E10C                       	smpsAlterNote       $0C
000898D6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000898DA E107                       	smpsAlterNote       $07
000898DC B30D                       	dc.b	nD4, $0D
000898DE E101                       	smpsAlterNote       $01
000898E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898E4 E104                       	smpsAlterNote       $04
000898E6 E701                       	dc.b	smpsNoAttack, $01
000898E8 E10A                       	smpsAlterNote       $0A
000898EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898EE E104                       	smpsAlterNote       $04
000898F0 E701                       	dc.b	smpsNoAttack, $01
000898F2 E101                       	smpsAlterNote       $01
000898F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F8 E107                       	smpsAlterNote       $07
000898FA E701                       	dc.b	smpsNoAttack, $01
000898FC E10B                       	smpsAlterNote       $0B
000898FE E701                       	dc.b	smpsNoAttack, $01
00089900 E10A                       	smpsAlterNote       $0A
00089902 E701                       	dc.b	smpsNoAttack, $01
00089904 E104                       	smpsAlterNote       $04
00089906 E701                       	dc.b	smpsNoAttack, $01
00089908 E100                       	smpsAlterNote       $00
0008990A E701                       	dc.b	smpsNoAttack, $01
0008990C E104                       	smpsAlterNote       $04
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E107                       	smpsAlterNote       $07
00089912 E701                       	dc.b	smpsNoAttack, $01
00089914 E10B                       	smpsAlterNote       $0B
00089916 E701                       	dc.b	smpsNoAttack, $01
00089918 E107                       	smpsAlterNote       $07
0008991A E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008991E E101                       	smpsAlterNote       $01
00089920 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089924 E107                       	smpsAlterNote       $07
00089926 E701                       	dc.b	smpsNoAttack, $01
00089928 E10A                       	smpsAlterNote       $0A
0008992A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008992E E104                       	smpsAlterNote       $04
00089930 E701                       	dc.b	smpsNoAttack, $01
00089932 E100                       	smpsAlterNote       $00
00089934 E701                       	dc.b	smpsNoAttack, $01
00089936 E101                       	smpsAlterNote       $01
00089938 E701                       	dc.b	smpsNoAttack, $01
0008993A E107                       	smpsAlterNote       $07
0008993C E701                       	dc.b	smpsNoAttack, $01
0008993E E10B                       	smpsAlterNote       $0B
00089940 E701                       	dc.b	smpsNoAttack, $01
00089942 E107                       	smpsAlterNote       $07
00089944 B30E                       	dc.b	nD4, $0E
00089946 E101                       	smpsAlterNote       $01
00089948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008994C E107                       	smpsAlterNote       $07
0008994E E701                       	dc.b	smpsNoAttack, $01
00089950 E10A                       	smpsAlterNote       $0A
00089952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089956 E104                       	smpsAlterNote       $04
00089958 E701                       	dc.b	smpsNoAttack, $01
0008995A E100                       	smpsAlterNote       $00
0008995C E701                       	dc.b	smpsNoAttack, $01
0008995E E101                       	smpsAlterNote       $01
00089960 E701                       	dc.b	smpsNoAttack, $01
00089962 E107                       	smpsAlterNote       $07
00089964 E701                       	dc.b	smpsNoAttack, $01
00089966 E10B                       	smpsAlterNote       $0B
00089968 E701                       	dc.b	smpsNoAttack, $01
0008996A E107                       	smpsAlterNote       $07
0008996C E701                       	dc.b	smpsNoAttack, $01
0008996E E104                       	smpsAlterNote       $04
00089970 E701                       	dc.b	smpsNoAttack, $01
00089972 E100                       	smpsAlterNote       $00
00089974 E701                       	dc.b	smpsNoAttack, $01
00089976 E104                       	smpsAlterNote       $04
00089978 E701                       	dc.b	smpsNoAttack, $01
0008997A E10A                       	smpsAlterNote       $0A
0008997C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089980 E107                       	smpsAlterNote       $07
00089982 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00089986 E104                       	smpsAlterNote       $04
00089988 E701                       	dc.b	smpsNoAttack, $01
0008998A E100                       	smpsAlterNote       $00
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E101                       	smpsAlterNote       $01
00089990 E701                       	dc.b	smpsNoAttack, $01
00089992 E107                       	smpsAlterNote       $07
00089994 E701                       	dc.b	smpsNoAttack, $01
00089996 E10B                       	smpsAlterNote       $0B
00089998 E701                       	dc.b	smpsNoAttack, $01
0008999A E107                       	smpsAlterNote       $07
0008999C E701                       	dc.b	smpsNoAttack, $01
0008999E E104                       	smpsAlterNote       $04
000899A0 E701                       	dc.b	smpsNoAttack, $01
000899A2 E100                       	smpsAlterNote       $00
000899A4 E701                       	dc.b	smpsNoAttack, $01
000899A6 E104                       	smpsAlterNote       $04
000899A8 E701                       	dc.b	smpsNoAttack, $01
000899AA E10A                       	smpsAlterNote       $0A
000899AC E701                       	dc.b	smpsNoAttack, $01
000899AE E10B                       	smpsAlterNote       $0B
000899B0 E701                       	dc.b	smpsNoAttack, $01
000899B4 E6FF                       	smpsAlterVol        $FF
000899B6 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000899C2 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000899CA E109                       	smpsAlterNote       $09
000899CC E601                       	smpsAlterVol        $01
000899CE B60D                       	dc.b	nF4, $0D
000899D0 E106                       	smpsAlterNote       $06
000899D2 E701                       	dc.b	smpsNoAttack, $01
000899D4 E102                       	smpsAlterNote       $02
000899D6 E701                       	dc.b	smpsNoAttack, $01
000899D8 E106                       	smpsAlterNote       $06
000899DA E701                       	dc.b	smpsNoAttack, $01
000899DC E109                       	smpsAlterNote       $09
000899DE E701                       	dc.b	smpsNoAttack, $01
000899E0 E10D                       	smpsAlterNote       $0D
000899E2 E701                       	dc.b	smpsNoAttack, $01
000899E4 E109                       	smpsAlterNote       $09
000899E6 E701                       	dc.b	smpsNoAttack, $01
000899E8 E103                       	smpsAlterNote       $03
000899EA E701                       	dc.b	smpsNoAttack, $01
000899EC E102                       	smpsAlterNote       $02
000899EE E701                       	dc.b	smpsNoAttack, $01
000899F0 E106                       	smpsAlterNote       $06
000899F2 E701                       	dc.b	smpsNoAttack, $01
000899F4 E10C                       	smpsAlterNote       $0C
000899F6 E701                       	dc.b	smpsNoAttack, $01
000899F8 E10D                       	smpsAlterNote       $0D
000899FA 8001                       	dc.b	nRst, $01
000899FC E109                       	smpsAlterNote       $09
000899FE B80D                       	dc.b	nG4, $0D
00089A00 E106                       	smpsAlterNote       $06
00089A02 E701                       	dc.b	smpsNoAttack, $01
00089A04 E102                       	smpsAlterNote       $02
00089A06 E701                       	dc.b	smpsNoAttack, $01
00089A08 E106                       	smpsAlterNote       $06
00089A0A E701                       	dc.b	smpsNoAttack, $01
00089A0C E109                       	smpsAlterNote       $09
00089A0E E701                       	dc.b	smpsNoAttack, $01
00089A10 E10D                       	smpsAlterNote       $0D
00089A12 E701                       	dc.b	smpsNoAttack, $01
00089A14 E109                       	smpsAlterNote       $09
00089A16 E701                       	dc.b	smpsNoAttack, $01
00089A18 E103                       	smpsAlterNote       $03
00089A1A E701                       	dc.b	smpsNoAttack, $01
00089A1C E102                       	smpsAlterNote       $02
00089A1E E701                       	dc.b	smpsNoAttack, $01
00089A20 E106                       	smpsAlterNote       $06
00089A22 E701                       	dc.b	smpsNoAttack, $01
00089A24 E10C                       	smpsAlterNote       $0C
00089A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A2A E106                       	smpsAlterNote       $06
00089A2C E701                       	dc.b	smpsNoAttack, $01
00089A2E E103                       	smpsAlterNote       $03
00089A30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A34 E109                       	smpsAlterNote       $09
00089A36 E701                       	dc.b	smpsNoAttack, $01
00089A38 E10D                       	smpsAlterNote       $0D
00089A3A E701                       	dc.b	smpsNoAttack, $01
00089A3C E10C                       	smpsAlterNote       $0C
00089A3E E701                       	dc.b	smpsNoAttack, $01
00089A40 E109                       	smpsAlterNote       $09
00089A42 8001                       	dc.b	nRst, $01
00089A44 E10B                       	smpsAlterNote       $0B
00089A46 BA0D                       	dc.b	nA4, $0D
00089A48 E105                       	smpsAlterNote       $05
00089A4A E701                       	dc.b	smpsNoAttack, $01
00089A4C E104                       	smpsAlterNote       $04
00089A4E E701                       	dc.b	smpsNoAttack, $01
00089A50 E108                       	smpsAlterNote       $08
00089A52 E701                       	dc.b	smpsNoAttack, $01
00089A54 E10E                       	smpsAlterNote       $0E
00089A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A5A E10B                       	smpsAlterNote       $0B
00089A5C E701                       	dc.b	smpsNoAttack, $01
00089A5E E105                       	smpsAlterNote       $05
00089A60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A64 E10B                       	smpsAlterNote       $0B
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E10E                       	smpsAlterNote       $0E
00089A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A6E E108                       	smpsAlterNote       $08
00089A70 E701                       	dc.b	smpsNoAttack, $01
00089A72 E104                       	smpsAlterNote       $04
00089A74 E701                       	dc.b	smpsNoAttack, $01
00089A76 E105                       	smpsAlterNote       $05
00089A78 E701                       	dc.b	smpsNoAttack, $01
00089A7A E10B                       	smpsAlterNote       $0B
00089A7C E701                       	dc.b	smpsNoAttack, $01
00089A7E E10F                       	smpsAlterNote       $0F
00089A80 E701                       	dc.b	smpsNoAttack, $01
00089A82 E10B                       	smpsAlterNote       $0B
00089A84 E701                       	dc.b	smpsNoAttack, $01
00089A86 E108                       	smpsAlterNote       $08
00089A88 E701                       	dc.b	smpsNoAttack, $01
00089A8A E104                       	smpsAlterNote       $04
00089A8C E701                       	dc.b	smpsNoAttack, $01
00089A8E E108                       	smpsAlterNote       $08
00089A90 E701                       	dc.b	smpsNoAttack, $01
00089A92 E10E                       	smpsAlterNote       $0E
00089A94 E701                       	dc.b	smpsNoAttack, $01
00089A96 E10F                       	smpsAlterNote       $0F
00089A98 E701                       	dc.b	smpsNoAttack, $01
00089A9A E10B                       	smpsAlterNote       $0B
00089A9C E701                       	dc.b	smpsNoAttack, $01
00089A9E E105                       	smpsAlterNote       $05
00089AA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AA4 E108                       	smpsAlterNote       $08
00089AA6 E701                       	dc.b	smpsNoAttack, $01
00089AA8 E10E                       	smpsAlterNote       $0E
00089AAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AAE E108                       	smpsAlterNote       $08
00089AB0 E701                       	dc.b	smpsNoAttack, $01
00089AB2 E105                       	smpsAlterNote       $05
00089AB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AB8 E108                       	smpsAlterNote       $08
00089ABA B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00089ABE E109                       	smpsAlterNote       $09
00089AC0 B60D                       	dc.b	nF4, $0D
00089AC2 E103                       	smpsAlterNote       $03
00089AC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AC8 E106                       	smpsAlterNote       $06
00089ACA E701                       	dc.b	smpsNoAttack, $01
00089ACC E10C                       	smpsAlterNote       $0C
00089ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD2 E106                       	smpsAlterNote       $06
00089AD4 E701                       	dc.b	smpsNoAttack, $01
00089AD6 E103                       	smpsAlterNote       $03
00089AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ADC E109                       	smpsAlterNote       $09
00089ADE E701                       	dc.b	smpsNoAttack, $01
00089AE0 E10D                       	smpsAlterNote       $0D
00089AE2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089AE6 E109                       	smpsAlterNote       $09
00089AE8 B80D                       	dc.b	nG4, $0D
00089AEA E103                       	smpsAlterNote       $03
00089AEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AF0 E109                       	smpsAlterNote       $09
00089AF2 E701                       	dc.b	smpsNoAttack, $01
00089AF4 E10C                       	smpsAlterNote       $0C
00089AF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AFA E106                       	smpsAlterNote       $06
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E102                       	smpsAlterNote       $02
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E103                       	smpsAlterNote       $03
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E109                       	smpsAlterNote       $09
00089B08 E701                       	dc.b	smpsNoAttack, $01
00089B0A E10D                       	smpsAlterNote       $0D
00089B0C E701                       	dc.b	smpsNoAttack, $01
00089B0E E109                       	smpsAlterNote       $09
00089B10 E701                       	dc.b	smpsNoAttack, $01
00089B12 E106                       	smpsAlterNote       $06
00089B14 E701                       	dc.b	smpsNoAttack, $01
00089B16 E102                       	smpsAlterNote       $02
00089B18 E701                       	dc.b	smpsNoAttack, $01
00089B1A E106                       	smpsAlterNote       $06
00089B1C E701                       	dc.b	smpsNoAttack, $01
00089B1E E10C                       	smpsAlterNote       $0C
00089B20 E701                       	dc.b	smpsNoAttack, $01
00089B22 E10D                       	smpsAlterNote       $0D
00089B24 E701                       	dc.b	smpsNoAttack, $01
00089B26 E109                       	smpsAlterNote       $09
00089B28 E701                       	dc.b	smpsNoAttack, $01
00089B2A E10B                       	smpsAlterNote       $0B
00089B2C BA0D                       	dc.b	nA4, $0D
00089B2E E108                       	smpsAlterNote       $08
00089B30 E701                       	dc.b	smpsNoAttack, $01
00089B32 E105                       	smpsAlterNote       $05
00089B34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B38 E10B                       	smpsAlterNote       $0B
00089B3A E701                       	dc.b	smpsNoAttack, $01
00089B3C E10F                       	smpsAlterNote       $0F
00089B3E E701                       	dc.b	smpsNoAttack, $01
00089B40 E10E                       	smpsAlterNote       $0E
00089B42 E701                       	dc.b	smpsNoAttack, $01
00089B44 E108                       	smpsAlterNote       $08
00089B46 E701                       	dc.b	smpsNoAttack, $01
00089B48 E104                       	smpsAlterNote       $04
00089B4A E701                       	dc.b	smpsNoAttack, $01
00089B4C E108                       	smpsAlterNote       $08
00089B4E E701                       	dc.b	smpsNoAttack, $01
00089B50 E10B                       	smpsAlterNote       $0B
00089B52 E701                       	dc.b	smpsNoAttack, $01
00089B54 E10F                       	smpsAlterNote       $0F
00089B56 E701                       	dc.b	smpsNoAttack, $01
00089B58 E10B                       	smpsAlterNote       $0B
00089B5A E701                       	dc.b	smpsNoAttack, $01
00089B5C E105                       	smpsAlterNote       $05
00089B5E E701                       	dc.b	smpsNoAttack, $01
00089B60 E104                       	smpsAlterNote       $04
00089B62 E701                       	dc.b	smpsNoAttack, $01
00089B64 E108                       	smpsAlterNote       $08
00089B66 E701                       	dc.b	smpsNoAttack, $01
00089B68 E10E                       	smpsAlterNote       $0E
00089B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B6E E10B                       	smpsAlterNote       $0B
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E105                       	smpsAlterNote       $05
00089B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B78 E10B                       	smpsAlterNote       $0B
00089B7A E701                       	dc.b	smpsNoAttack, $01
00089B7C E10E                       	smpsAlterNote       $0E
00089B7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B82 E108                       	smpsAlterNote       $08
00089B84 E701                       	dc.b	smpsNoAttack, $01
00089B86 E105                       	smpsAlterNote       $05
00089B88 8001                       	dc.b	nRst, $01
00089B8A E109                       	smpsAlterNote       $09
00089B8C B60A                       	dc.b	nF4, $0A
00089B8E E108                       	smpsAlterNote       $08
00089B90 B507                       	dc.b	nE4, $07
00089B92 E107                       	smpsAlterNote       $07
00089B94 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089B98 E108                       	smpsAlterNote       $08
00089B9A B503                       	dc.b	nE4, $03
00089B9C E109                       	smpsAlterNote       $09
00089B9E B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00089BA6 E10B                       	smpsAlterNote       $0B
00089BA8 BA0D                       	dc.b	nA4, $0D
00089BAA E108                       	smpsAlterNote       $08
00089BAC E701                       	dc.b	smpsNoAttack, $01
00089BAE E104                       	smpsAlterNote       $04
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E108                       	smpsAlterNote       $08
00089BB4 E701                       	dc.b	smpsNoAttack, $01
00089BB6 E10B                       	smpsAlterNote       $0B
00089BB8 E701                       	dc.b	smpsNoAttack, $01
00089BBA E10F                       	smpsAlterNote       $0F
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E10B                       	smpsAlterNote       $0B
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E105                       	smpsAlterNote       $05
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E104                       	smpsAlterNote       $04
00089BC8 E701                       	dc.b	smpsNoAttack, $01
00089BCA E108                       	smpsAlterNote       $08
00089BCC E701                       	dc.b	smpsNoAttack, $01
00089BCE E10E                       	smpsAlterNote       $0E
00089BD0 E701                       	dc.b	smpsNoAttack, $01
00089BD2 E10F                       	smpsAlterNote       $0F
00089BD4 8001                       	dc.b	nRst, $01
00089BD6 E109                       	smpsAlterNote       $09
00089BD8 C20D                       	dc.b	nF5, $0D
00089BDA E106                       	smpsAlterNote       $06
00089BDC E701                       	dc.b	smpsNoAttack, $01
00089BDE E102                       	smpsAlterNote       $02
00089BE0 E701                       	dc.b	smpsNoAttack, $01
00089BE2 E106                       	smpsAlterNote       $06
00089BE4 E701                       	dc.b	smpsNoAttack, $01
00089BE6 E109                       	smpsAlterNote       $09
00089BE8 E701                       	dc.b	smpsNoAttack, $01
00089BEA E10D                       	smpsAlterNote       $0D
00089BEC E701                       	dc.b	smpsNoAttack, $01
00089BEE E109                       	smpsAlterNote       $09
00089BF0 E701                       	dc.b	smpsNoAttack, $01
00089BF2 E103                       	smpsAlterNote       $03
00089BF4 E701                       	dc.b	smpsNoAttack, $01
00089BF6 E102                       	smpsAlterNote       $02
00089BF8 E701                       	dc.b	smpsNoAttack, $01
00089BFA E106                       	smpsAlterNote       $06
00089BFC E701                       	dc.b	smpsNoAttack, $01
00089BFE E10C                       	smpsAlterNote       $0C
00089C00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C04 E109                       	smpsAlterNote       $09
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E103                       	smpsAlterNote       $03
00089C0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C0E E109                       	smpsAlterNote       $09
00089C10 E701                       	dc.b	smpsNoAttack, $01
00089C12 E10C                       	smpsAlterNote       $0C
00089C14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C18 E106                       	smpsAlterNote       $06
00089C1A E701                       	dc.b	smpsNoAttack, $01
00089C1C E102                       	smpsAlterNote       $02
00089C1E E701                       	dc.b	smpsNoAttack, $01
00089C20 E103                       	smpsAlterNote       $03
00089C22 E701                       	dc.b	smpsNoAttack, $01
00089C24 E109                       	smpsAlterNote       $09
00089C26 E701                       	dc.b	smpsNoAttack, $01
00089C28 E10D                       	smpsAlterNote       $0D
00089C2A E701                       	dc.b	smpsNoAttack, $01
00089C2C E109                       	smpsAlterNote       $09
00089C2E E701                       	dc.b	smpsNoAttack, $01
00089C30 E106                       	smpsAlterNote       $06
00089C32 E701                       	dc.b	smpsNoAttack, $01
00089C34 E102                       	smpsAlterNote       $02
00089C36 E701                       	dc.b	smpsNoAttack, $01
00089C38 E106                       	smpsAlterNote       $06
00089C3A E701                       	dc.b	smpsNoAttack, $01
00089C3C E10C                       	smpsAlterNote       $0C
00089C3E E701                       	dc.b	smpsNoAttack, $01
00089C40 E10D                       	smpsAlterNote       $0D
00089C42 E701                       	dc.b	smpsNoAttack, $01
00089C44 E109                       	smpsAlterNote       $09
00089C46 E701                       	dc.b	smpsNoAttack, $01
00089C48 E103                       	smpsAlterNote       $03
00089C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C4E E106                       	smpsAlterNote       $06
00089C50 E701                       	dc.b	smpsNoAttack, $01
00089C52 E10C                       	smpsAlterNote       $0C
00089C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C58 E106                       	smpsAlterNote       $06
00089C5A E701                       	dc.b	smpsNoAttack, $01
00089C5C E103                       	smpsAlterNote       $03
00089C5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C62 E109                       	smpsAlterNote       $09
00089C64 E701                       	dc.b	smpsNoAttack, $01
00089C66 E10D                       	smpsAlterNote       $0D
00089C68 E701                       	dc.b	smpsNoAttack, $01
00089C6A E10C                       	smpsAlterNote       $0C
00089C6C E701                       	dc.b	smpsNoAttack, $01
00089C6E E106                       	smpsAlterNote       $06
00089C70 E701                       	dc.b	smpsNoAttack, $01
00089C72 E103                       	smpsAlterNote       $03
00089C74 8001                       	dc.b	nRst, $01
00089C76 E109                       	smpsAlterNote       $09
00089C78 C206 8001                  	dc.b	nF5, $06, nRst, $01
00089C7E E10C                       	smpsAlterNote       $0C
00089C80 E601                       	smpsAlterVol        $01
00089C82 BB0D                       	dc.b	nBb4, $0D
00089C84 E106                       	smpsAlterNote       $06
00089C86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C8A E109                       	smpsAlterNote       $09
00089C8C E701                       	dc.b	smpsNoAttack, $01
00089C8E E10F                       	smpsAlterNote       $0F
00089C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C94 E109                       	smpsAlterNote       $09
00089C96 E701                       	dc.b	smpsNoAttack, $01
00089C98 E106                       	smpsAlterNote       $06
00089C9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C9E E10C                       	smpsAlterNote       $0C
00089CA0 E701                       	dc.b	smpsNoAttack, $01
00089CA2 E110                       	smpsAlterNote       $10
00089CA4 E701                       	dc.b	smpsNoAttack, $01
00089CA6 E10F                       	smpsAlterNote       $0F
00089CA8 E701                       	dc.b	smpsNoAttack, $01
00089CAA E109                       	smpsAlterNote       $09
00089CAC E701                       	dc.b	smpsNoAttack, $01
00089CAE E105                       	smpsAlterNote       $05
00089CB0 E701                       	dc.b	smpsNoAttack, $01
00089CB2 E106                       	smpsAlterNote       $06
00089CB4 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00089CB8 E103                       	smpsAlterNote       $03
00089CBA E701                       	dc.b	smpsNoAttack, $01
00089CBC E1FF                       	smpsAlterNote       $FF
00089CBE E701                       	dc.b	smpsNoAttack, $01
00089CC0 E103                       	smpsAlterNote       $03
00089CC2 E701                       	dc.b	smpsNoAttack, $01
00089CC4 E106                       	smpsAlterNote       $06
00089CC6 E701                       	dc.b	smpsNoAttack, $01
00089CC8 E10A                       	smpsAlterNote       $0A
00089CCA E701                       	dc.b	smpsNoAttack, $01
00089CCC E106                       	smpsAlterNote       $06
00089CCE E701                       	dc.b	smpsNoAttack, $01
00089CD0 E100                       	smpsAlterNote       $00
00089CD2 E701                       	dc.b	smpsNoAttack, $01
00089CD4 E1FF                       	smpsAlterNote       $FF
00089CD6 E701                       	dc.b	smpsNoAttack, $01
00089CD8 E103                       	smpsAlterNote       $03
00089CDA E701                       	dc.b	smpsNoAttack, $01
00089CDC E109                       	smpsAlterNote       $09
00089CDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CE2 E106                       	smpsAlterNote       $06
00089CE4 E701                       	dc.b	smpsNoAttack, $01
00089CE6 E100                       	smpsAlterNote       $00
00089CE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CEC E107                       	smpsAlterNote       $07
00089CEE BF0E                       	dc.b	nD5, $0E
00089CF0 E101                       	smpsAlterNote       $01
00089CF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CF6 E107                       	smpsAlterNote       $07
00089CF8 E701                       	dc.b	smpsNoAttack, $01
00089CFA E10A                       	smpsAlterNote       $0A
00089CFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D00 E104                       	smpsAlterNote       $04
00089D02 E701                       	dc.b	smpsNoAttack, $01
00089D04 E100                       	smpsAlterNote       $00
00089D06 E701                       	dc.b	smpsNoAttack, $01
00089D08 E101                       	smpsAlterNote       $01
00089D0A E701                       	dc.b	smpsNoAttack, $01
00089D0C E107                       	smpsAlterNote       $07
00089D0E E701                       	dc.b	smpsNoAttack, $01
00089D10 E10B                       	smpsAlterNote       $0B
00089D12 E701                       	dc.b	smpsNoAttack, $01
00089D14 E107                       	smpsAlterNote       $07
00089D16 E701                       	dc.b	smpsNoAttack, $01
00089D18 E104                       	smpsAlterNote       $04
00089D1A E701                       	dc.b	smpsNoAttack, $01
00089D1C E100                       	smpsAlterNote       $00
00089D1E E701                       	dc.b	smpsNoAttack, $01
00089D20 E101                       	smpsAlterNote       $01
00089D22 8001                       	dc.b	nRst, $01
00089D24 E108                       	smpsAlterNote       $08
00089D26 C10C                       	dc.b	nE5, $0C
00089D28 E109                       	smpsAlterNote       $09
00089D2A C201 8001                  	dc.b	nF5, $01, nRst, $01
00089D2E E10A                       	smpsAlterNote       $0A
00089D30 8001                       	dc.b	nRst, $01
00089D32 E109                       	smpsAlterNote       $09
00089D34 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00089D38 E106                       	smpsAlterNote       $06
00089D3A E701                       	dc.b	smpsNoAttack, $01
00089D3C E102                       	smpsAlterNote       $02
00089D3E E701                       	dc.b	smpsNoAttack, $01
00089D40 E103                       	smpsAlterNote       $03
00089D42 E701                       	dc.b	smpsNoAttack, $01
00089D44 E109                       	smpsAlterNote       $09
00089D46 E701                       	dc.b	smpsNoAttack, $01
00089D48 E10D                       	smpsAlterNote       $0D
00089D4A E701                       	dc.b	smpsNoAttack, $01
00089D4C E109                       	smpsAlterNote       $09
00089D4E E701                       	dc.b	smpsNoAttack, $01
00089D50 E106                       	smpsAlterNote       $06
00089D52 E701                       	dc.b	smpsNoAttack, $01
00089D54 E102                       	smpsAlterNote       $02
00089D56 E701                       	dc.b	smpsNoAttack, $01
00089D58 E106                       	smpsAlterNote       $06
00089D5A E701                       	dc.b	smpsNoAttack, $01
00089D5C E10C                       	smpsAlterNote       $0C
00089D5E E701                       	dc.b	smpsNoAttack, $01
00089D60 E10D                       	smpsAlterNote       $0D
00089D62 E701                       	dc.b	smpsNoAttack, $01
00089D64 E109                       	smpsAlterNote       $09
00089D66 C40D                       	dc.b	nG5, $0D
00089D68 E106                       	smpsAlterNote       $06
00089D6A E701                       	dc.b	smpsNoAttack, $01
00089D6C E102                       	smpsAlterNote       $02
00089D6E E701                       	dc.b	smpsNoAttack, $01
00089D70 E103                       	smpsAlterNote       $03
00089D72 E701                       	dc.b	smpsNoAttack, $01
00089D74 E109                       	smpsAlterNote       $09
00089D76 E701                       	dc.b	smpsNoAttack, $01
00089D78 E108                       	smpsAlterNote       $08
00089D7A C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00089D86 E109                       	smpsAlterNote       $09
00089D88 C20D                       	dc.b	nF5, $0D
00089D8A E106                       	smpsAlterNote       $06
00089D8C E701                       	dc.b	smpsNoAttack, $01
00089D8E E102                       	smpsAlterNote       $02
00089D90 E701                       	dc.b	smpsNoAttack, $01
00089D92 E106                       	smpsAlterNote       $06
00089D94 E701                       	dc.b	smpsNoAttack, $01
00089D96 E109                       	smpsAlterNote       $09
00089D98 E701                       	dc.b	smpsNoAttack, $01
00089D9A E10D                       	smpsAlterNote       $0D
00089D9C E701                       	dc.b	smpsNoAttack, $01
00089D9E E109                       	smpsAlterNote       $09
00089DA0 E701                       	dc.b	smpsNoAttack, $01
00089DA2 E103                       	smpsAlterNote       $03
00089DA4 E701                       	dc.b	smpsNoAttack, $01
00089DA6 E102                       	smpsAlterNote       $02
00089DA8 E701                       	dc.b	smpsNoAttack, $01
00089DAA E106                       	smpsAlterNote       $06
00089DAC E701                       	dc.b	smpsNoAttack, $01
00089DAE E10C                       	smpsAlterNote       $0C
00089DB0 E701                       	dc.b	smpsNoAttack, $01
00089DB2 E10D                       	smpsAlterNote       $0D
00089DB4 8001                       	dc.b	nRst, $01
00089DB6 E112                       	smpsAlterNote       $12
00089DB8 C401                       	dc.b	nG5, $01
00089DBA E1EB                       	smpsAlterNote       $EB
00089DBC E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00089DBF E1FD                       	smpsAlterNote       $FD
00089DC1 E701                       	dc.b	smpsNoAttack, $01
00089DC3 E10F                       	smpsAlterNote       $0F
00089DC5 E701                       	dc.b	smpsNoAttack, $01
00089DC7 E118                       	smpsAlterNote       $18
00089DC9 E701                       	dc.b	smpsNoAttack, $01
00089DCB E1ED                       	smpsAlterNote       $ED
00089DCD E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089DD0 E1FF                       	smpsAlterNote       $FF
00089DD2 E701                       	dc.b	smpsNoAttack, $01
00089DD4 E10B                       	smpsAlterNote       $0B
00089DD6 E703                       	dc.b	smpsNoAttack, $03
00089DD8 E109                       	smpsAlterNote       $09
00089DDA C407                       	dc.b	nG5, $07
00089DDC E108                       	smpsAlterNote       $08
00089DDE C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00089DEA E109                       	smpsAlterNote       $09
00089DEC C20D                       	dc.b	nF5, $0D
00089DEE E103                       	smpsAlterNote       $03
00089DF0 E701                       	dc.b	smpsNoAttack, $01
00089DF2 E102                       	smpsAlterNote       $02
00089DF4 E701                       	dc.b	smpsNoAttack, $01
00089DF6 E106                       	smpsAlterNote       $06
00089DF8 E701                       	dc.b	smpsNoAttack, $01
00089DFA E10C                       	smpsAlterNote       $0C
00089DFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E00 E109                       	smpsAlterNote       $09
00089E02 E701                       	dc.b	smpsNoAttack, $01
00089E04 E103                       	smpsAlterNote       $03
00089E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E0A E109                       	smpsAlterNote       $09
00089E0C E701                       	dc.b	smpsNoAttack, $01
00089E0E E10C                       	smpsAlterNote       $0C
00089E10 E701                       	dc.b	smpsNoAttack, $01
00089E12 E10D                       	smpsAlterNote       $0D
00089E14 8001                       	dc.b	nRst, $01
00089E16 E10B                       	smpsAlterNote       $0B
00089E18 C609 8001                  	dc.b	nA5, $09, nRst, $01
00089E1C E109                       	smpsAlterNote       $09
00089E1E B806 8001                  	dc.b	nG4, $06, nRst, $01
00089E22 E108                       	smpsAlterNote       $08
00089E24 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00089E30 8001                       	dc.b	nRst, $01
00089E32 E109                       	smpsAlterNote       $09
00089E34 C20D                       	dc.b	nF5, $0D
00089E36 E103                       	smpsAlterNote       $03
00089E38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E3C E106                       	smpsAlterNote       $06
00089E3E E701                       	dc.b	smpsNoAttack, $01
00089E40 E10C                       	smpsAlterNote       $0C
00089E42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E46 E106                       	smpsAlterNote       $06
00089E48 E701                       	dc.b	smpsNoAttack, $01
00089E4A E103                       	smpsAlterNote       $03
00089E4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E50 E109                       	smpsAlterNote       $09
00089E52 E701                       	dc.b	smpsNoAttack, $01
00089E54 E10D                       	smpsAlterNote       $0D
00089E56 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089E5C E108                       	smpsAlterNote       $08
00089E5E E6FF                       	smpsAlterVol        $FF
00089E60 A806                       	dc.b	nEb3, $06
00089E62 E10C                       	smpsAlterNote       $0C
00089E64 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089E68 E108                       	smpsAlterNote       $08
00089E6A A803                       	dc.b	nEb3, $03
00089E6C E109                       	smpsAlterNote       $09
00089E6E AC03 8001                  	dc.b	nG3, $03, nRst, $01
00089E72 E10C                       	smpsAlterNote       $0C
00089E74 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00089E7E E109                       	smpsAlterNote       $09
00089E80 E602                       	smpsAlterVol        $02
00089E82 B604                       	dc.b	nF4, $04
00089E84 E602                       	smpsAlterVol        $02
00089E86 F6F1 AA                    	smpsJump            music84_Jump02
00089E89                            
00089E89                            ; FM4 Data
00089E89                            music84_FM4:
00089E8B E040                       	smpsPan             panRight, $00
00089E8D 8003                       	dc.b	nRst, $03
00089E8F E10F                       	smpsAlterNote       $0F
00089E91 C603 8008                  	dc.b	nA5, $03, nRst, $08
00089E95 E10D                       	smpsAlterNote       $0D
00089E97 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00089E9B E10C                       	smpsAlterNote       $0C
00089E9D C103 8004                  	dc.b	nE5, $03, nRst, $04
00089EA3 E6FE                       	smpsAlterVol        $FE
00089EA5 E110                       	smpsAlterNote       $10
00089EA7 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089EAB E10F                       	smpsAlterNote       $0F
00089EAD C602 8001                  	dc.b	nA5, $02, nRst, $01
00089EB1 E10D                       	smpsAlterNote       $0D
00089EB3 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00089EBC E10C                       	smpsAlterNote       $0C
00089EBE C103                       	dc.b	nE5, $03
00089EC0 E10A                       	smpsAlterNote       $0A
00089EC2 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00089EC8 03                         	dc.b	$03
00089EC9                            
00089EC9                            music84_Jump01:
00089EC9 E10B                       	smpsAlterNote       $0B
00089ECB BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089ECF E10C                       	smpsAlterNote       $0C
00089ED1 C102 8001                  	dc.b	nE5, $02, nRst, $01
00089ED5 E10D                       	smpsAlterNote       $0D
00089ED7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00089EE1 E10B                       	smpsAlterNote       $0B
00089EE3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00089EE7 E107                       	smpsAlterNote       $07
00089EE9 E701                       	dc.b	smpsNoAttack, $01
00089EEB E103                       	smpsAlterNote       $03
00089EED E701                       	dc.b	smpsNoAttack, $01
00089EEF E104                       	smpsAlterNote       $04
00089EF1 E701                       	dc.b	smpsNoAttack, $01
00089EF3 E10A                       	smpsAlterNote       $0A
00089EF5 E701                       	dc.b	smpsNoAttack, $01
00089EF7 E10E                       	smpsAlterNote       $0E
00089EF9 E701                       	dc.b	smpsNoAttack, $01
00089EFB E10A                       	smpsAlterNote       $0A
00089EFD E701                       	dc.b	smpsNoAttack, $01
00089EFF E107                       	smpsAlterNote       $07
00089F01 E701                       	dc.b	smpsNoAttack, $01
00089F03 E104                       	smpsAlterNote       $04
00089F05 8001                       	dc.b	nRst, $01
00089F07 E110                       	smpsAlterNote       $10
00089F09 C703                       	dc.b	nBb5, $03
00089F0B E10F                       	smpsAlterNote       $0F
00089F0D C603 8001                  	dc.b	nA5, $03, nRst, $01
00089F11 E10D                       	smpsAlterNote       $0D
00089F13 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00089F19 E10C                       	smpsAlterNote       $0C
00089F1B E701                       	dc.b	smpsNoAttack, $01
00089F1D E108                       	smpsAlterNote       $08
00089F1F E701                       	dc.b	smpsNoAttack, $01
00089F21 E10C                       	smpsAlterNote       $0C
00089F23 E701                       	dc.b	smpsNoAttack, $01
00089F25 E10F                       	smpsAlterNote       $0F
00089F27 E701                       	dc.b	smpsNoAttack, $01
00089F29 E113                       	smpsAlterNote       $13
00089F2B E701                       	dc.b	smpsNoAttack, $01
00089F2D E10F                       	smpsAlterNote       $0F
00089F2F E701                       	dc.b	smpsNoAttack, $01
00089F31 E109                       	smpsAlterNote       $09
00089F33 E701                       	dc.b	smpsNoAttack, $01
00089F35 E108                       	smpsAlterNote       $08
00089F37 E701                       	dc.b	smpsNoAttack, $01
00089F39 E10C                       	smpsAlterNote       $0C
00089F3B E701                       	dc.b	smpsNoAttack, $01
00089F3D E112                       	smpsAlterNote       $12
00089F3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F43 E10C                       	smpsAlterNote       $0C
00089F45 E701                       	dc.b	smpsNoAttack, $01
00089F47 E109                       	smpsAlterNote       $09
00089F49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F4D E10F                       	smpsAlterNote       $0F
00089F4F E701                       	dc.b	smpsNoAttack, $01
00089F51 E113                       	smpsAlterNote       $13
00089F53 E701                       	dc.b	smpsNoAttack, $01
00089F55 E112                       	smpsAlterNote       $12
00089F57 E701                       	dc.b	smpsNoAttack, $01
00089F59 E10C                       	smpsAlterNote       $0C
00089F5B E701                       	dc.b	smpsNoAttack, $01
00089F5D E108                       	smpsAlterNote       $08
00089F5F E701                       	dc.b	smpsNoAttack, $01
00089F61 E10C                       	smpsAlterNote       $0C
00089F63 E701                       	dc.b	smpsNoAttack, $01
00089F65 E10F                       	smpsAlterNote       $0F
00089F67 E701                       	dc.b	smpsNoAttack, $01
00089F69 E113                       	smpsAlterNote       $13
00089F6B E701                       	dc.b	smpsNoAttack, $01
00089F6D E10F                       	smpsAlterNote       $0F
00089F6F E701                       	dc.b	smpsNoAttack, $01
00089F71 E109                       	smpsAlterNote       $09
00089F73 E701                       	dc.b	smpsNoAttack, $01
00089F75 E108                       	smpsAlterNote       $08
00089F77 E701                       	dc.b	smpsNoAttack, $01
00089F79 E10C                       	smpsAlterNote       $0C
00089F7B E701                       	dc.b	smpsNoAttack, $01
00089F7D E112                       	smpsAlterNote       $12
00089F7F E701                       	dc.b	smpsNoAttack, $01
00089F81 E113                       	smpsAlterNote       $13
00089F83 800F                       	dc.b	nRst, $0F
00089F85 E10B                       	smpsAlterNote       $0B
00089F87 BF03                       	dc.b	nD5, $03
00089F89 E10C                       	smpsAlterNote       $0C
00089F8B C103 8001                  	dc.b	nE5, $03, nRst, $01
00089F8F E10D                       	smpsAlterNote       $0D
00089F91 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00089F99 E10B                       	smpsAlterNote       $0B
00089F9B BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00089FA5 E110                       	smpsAlterNote       $10
00089FA7 C704                       	dc.b	nBb5, $04
00089FA9 E10F                       	smpsAlterNote       $0F
00089FAB C604 8001                  	dc.b	nA5, $04, nRst, $01
00089FAF E10D                       	smpsAlterNote       $0D
00089FB1 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00089FB7 E109                       	smpsAlterNote       $09
00089FB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FBD E10F                       	smpsAlterNote       $0F
00089FBF E701                       	dc.b	smpsNoAttack, $01
00089FC1 E112                       	smpsAlterNote       $12
00089FC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FC7 E10C                       	smpsAlterNote       $0C
00089FC9 E701                       	dc.b	smpsNoAttack, $01
00089FCB E108                       	smpsAlterNote       $08
00089FCD E701                       	dc.b	smpsNoAttack, $01
00089FCF E109                       	smpsAlterNote       $09
00089FD1 E701                       	dc.b	smpsNoAttack, $01
00089FD3 E10F                       	smpsAlterNote       $0F
00089FD5 E701                       	dc.b	smpsNoAttack, $01
00089FD7 E113                       	smpsAlterNote       $13
00089FD9 E701                       	dc.b	smpsNoAttack, $01
00089FDB E10F                       	smpsAlterNote       $0F
00089FDD E701                       	dc.b	smpsNoAttack, $01
00089FDF E10C                       	smpsAlterNote       $0C
00089FE1 E701                       	dc.b	smpsNoAttack, $01
00089FE3 E108                       	smpsAlterNote       $08
00089FE5 E701                       	dc.b	smpsNoAttack, $01
00089FE7 E10C                       	smpsAlterNote       $0C
00089FE9 E701                       	dc.b	smpsNoAttack, $01
00089FEB E112                       	smpsAlterNote       $12
00089FED E701                       	dc.b	smpsNoAttack, $01
00089FEF E113                       	smpsAlterNote       $13
00089FF1 E701                       	dc.b	smpsNoAttack, $01
00089FF3 E10F                       	smpsAlterNote       $0F
00089FF5 E701                       	dc.b	smpsNoAttack, $01
00089FF7 E109                       	smpsAlterNote       $09
00089FF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FFD E10C                       	smpsAlterNote       $0C
00089FFF E701                       	dc.b	smpsNoAttack, $01
0008A001 E112                       	smpsAlterNote       $12
0008A003 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A007 E10C                       	smpsAlterNote       $0C
0008A009 E701                       	dc.b	smpsNoAttack, $01
0008A00B E109                       	smpsAlterNote       $09
0008A00D E701                       	dc.b	smpsNoAttack, $01
0008A00F E10D                       	smpsAlterNote       $0D
0008A011 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A015 E10F                       	smpsAlterNote       $0F
0008A017 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A021 E10D                       	smpsAlterNote       $0D
0008A023 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A029 E10B                       	smpsAlterNote       $0B
0008A02B BF0D                       	dc.b	nD5, $0D
0008A02D E108                       	smpsAlterNote       $08
0008A02F E701                       	dc.b	smpsNoAttack, $01
0008A031 E104                       	smpsAlterNote       $04
0008A033 E701                       	dc.b	smpsNoAttack, $01
0008A035 E108                       	smpsAlterNote       $08
0008A037 E701                       	dc.b	smpsNoAttack, $01
0008A039 E10B                       	smpsAlterNote       $0B
0008A03B E701                       	dc.b	smpsNoAttack, $01
0008A03D E10F                       	smpsAlterNote       $0F
0008A03F E701                       	dc.b	smpsNoAttack, $01
0008A041 E10B                       	smpsAlterNote       $0B
0008A043 E701                       	dc.b	smpsNoAttack, $01
0008A045 E105                       	smpsAlterNote       $05
0008A047 E701                       	dc.b	smpsNoAttack, $01
0008A049 E104                       	smpsAlterNote       $04
0008A04B E701                       	dc.b	smpsNoAttack, $01
0008A04D E108                       	smpsAlterNote       $08
0008A04F E701                       	dc.b	smpsNoAttack, $01
0008A051 E10E                       	smpsAlterNote       $0E
0008A053 E701                       	dc.b	smpsNoAttack, $01
0008A055 E10F                       	smpsAlterNote       $0F
0008A057 8001                       	dc.b	nRst, $01
0008A059 E10C                       	smpsAlterNote       $0C
0008A05B C101                       	dc.b	nE5, $01
0008A05D E10D                       	smpsAlterNote       $0D
0008A05F C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A065 E10F                       	smpsAlterNote       $0F
0008A067 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A06B E10C                       	smpsAlterNote       $0C
0008A06D CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A071 E10D                       	smpsAlterNote       $0D
0008A073 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A077 E10C                       	smpsAlterNote       $0C
0008A079 CD03                       	dc.b	nE6, $03
0008A07B E10A                       	smpsAlterNote       $0A
0008A07D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A081 E10D                       	smpsAlterNote       $0D
0008A083 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A08B E109                       	smpsAlterNote       $09
0008A08D E701                       	dc.b	smpsNoAttack, $01
0008A08F E10D                       	smpsAlterNote       $0D
0008A091 E701                       	dc.b	smpsNoAttack, $01
0008A093 E110                       	smpsAlterNote       $10
0008A095 E701                       	dc.b	smpsNoAttack, $01
0008A097 E114                       	smpsAlterNote       $14
0008A099 E701                       	dc.b	smpsNoAttack, $01
0008A09B E110                       	smpsAlterNote       $10
0008A09D E701                       	dc.b	smpsNoAttack, $01
0008A09F E10A                       	smpsAlterNote       $0A
0008A0A1 E701                       	dc.b	smpsNoAttack, $01
0008A0A3 E109                       	smpsAlterNote       $09
0008A0A5 E701                       	dc.b	smpsNoAttack, $01
0008A0A7 E10D                       	smpsAlterNote       $0D
0008A0A9 E701                       	dc.b	smpsNoAttack, $01
0008A0AB E113                       	smpsAlterNote       $13
0008A0AD E701                       	dc.b	smpsNoAttack, $01
0008A0AF E114                       	smpsAlterNote       $14
0008A0B1 8001                       	dc.b	nRst, $01
0008A0B3 E10F                       	smpsAlterNote       $0F
0008A0B5 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008A0BB E10C                       	smpsAlterNote       $0C
0008A0BD E701                       	dc.b	smpsNoAttack, $01
0008A0BF E108                       	smpsAlterNote       $08
0008A0C1 E701                       	dc.b	smpsNoAttack, $01
0008A0C3 E10C                       	smpsAlterNote       $0C
0008A0C5 E701                       	dc.b	smpsNoAttack, $01
0008A0C7 E112                       	smpsAlterNote       $12
0008A0C9 E701                       	dc.b	smpsNoAttack, $01
0008A0CB E113                       	smpsAlterNote       $13
0008A0CD E701                       	dc.b	smpsNoAttack, $01
0008A0CF E10F                       	smpsAlterNote       $0F
0008A0D1 E701                       	dc.b	smpsNoAttack, $01
0008A0D3 E109                       	smpsAlterNote       $09
0008A0D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0D9 E10C                       	smpsAlterNote       $0C
0008A0DB E701                       	dc.b	smpsNoAttack, $01
0008A0DD E112                       	smpsAlterNote       $12
0008A0DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0E3 E10C                       	smpsAlterNote       $0C
0008A0E5 E701                       	dc.b	smpsNoAttack, $01
0008A0E7 E109                       	smpsAlterNote       $09
0008A0E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0ED E10F                       	smpsAlterNote       $0F
0008A0EF E701                       	dc.b	smpsNoAttack, $01
0008A0F1 E113                       	smpsAlterNote       $13
0008A0F3 E701                       	dc.b	smpsNoAttack, $01
0008A0F5 E112                       	smpsAlterNote       $12
0008A0F7 E701                       	dc.b	smpsNoAttack, $01
0008A0F9 E10C                       	smpsAlterNote       $0C
0008A0FB E701                       	dc.b	smpsNoAttack, $01
0008A0FD E108                       	smpsAlterNote       $08
0008A0FF E701                       	dc.b	smpsNoAttack, $01
0008A101 E10C                       	smpsAlterNote       $0C
0008A103 E701                       	dc.b	smpsNoAttack, $01
0008A105 E10F                       	smpsAlterNote       $0F
0008A107 E701                       	dc.b	smpsNoAttack, $01
0008A109 E113                       	smpsAlterNote       $13
0008A10B E701                       	dc.b	smpsNoAttack, $01
0008A10D E10F                       	smpsAlterNote       $0F
0008A10F E701                       	dc.b	smpsNoAttack, $01
0008A111 E109                       	smpsAlterNote       $09
0008A113 E701                       	dc.b	smpsNoAttack, $01
0008A115 E108                       	smpsAlterNote       $08
0008A117 E701                       	dc.b	smpsNoAttack, $01
0008A119 E10C                       	smpsAlterNote       $0C
0008A11B E701                       	dc.b	smpsNoAttack, $01
0008A11D E112                       	smpsAlterNote       $12
0008A11F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A123 E10F                       	smpsAlterNote       $0F
0008A125 E701                       	dc.b	smpsNoAttack, $01
0008A127 E109                       	smpsAlterNote       $09
0008A129 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A12D E10F                       	smpsAlterNote       $0F
0008A12F E701                       	dc.b	smpsNoAttack, $01
0008A131 E113                       	smpsAlterNote       $13
0008A133 E701                       	dc.b	smpsNoAttack, $01
0008A135 E112                       	smpsAlterNote       $12
0008A137 E701                       	dc.b	smpsNoAttack, $01
0008A139 E10C                       	smpsAlterNote       $0C
0008A13B E701                       	dc.b	smpsNoAttack, $01
0008A13D E108                       	smpsAlterNote       $08
0008A13F E701                       	dc.b	smpsNoAttack, $01
0008A141 E10C                       	smpsAlterNote       $0C
0008A143 E701                       	dc.b	smpsNoAttack, $01
0008A145 E10F                       	smpsAlterNote       $0F
0008A147 E701                       	dc.b	smpsNoAttack, $01
0008A149 E113                       	smpsAlterNote       $13
0008A14B E701                       	dc.b	smpsNoAttack, $01
0008A14D E10F                       	smpsAlterNote       $0F
0008A14F E701                       	dc.b	smpsNoAttack, $01
0008A151 E109                       	smpsAlterNote       $09
0008A153 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A157 E10F                       	smpsAlterNote       $0F
0008A159 C60D                       	dc.b	nA5, $0D
0008A15B E109                       	smpsAlterNote       $09
0008A15D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A161 E10C                       	smpsAlterNote       $0C
0008A163 E701                       	dc.b	smpsNoAttack, $01
0008A165 E112                       	smpsAlterNote       $12
0008A167 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A16B E10C                       	smpsAlterNote       $0C
0008A16D E701                       	dc.b	smpsNoAttack, $01
0008A16F E109                       	smpsAlterNote       $09
0008A171 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A175 E10F                       	smpsAlterNote       $0F
0008A177 E701                       	dc.b	smpsNoAttack, $01
0008A179 E113                       	smpsAlterNote       $13
0008A17B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A181 E10D                       	smpsAlterNote       $0D
0008A183 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008A18B E10C                       	smpsAlterNote       $0C
0008A18D C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008A193 E6FF                       	smpsAlterVol        $FF
0008A195 E10B                       	smpsAlterNote       $0B
0008A197 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A19B E10C                       	smpsAlterNote       $0C
0008A19D C103                       	dc.b	nE5, $03
0008A19F E10D                       	smpsAlterNote       $0D
0008A1A1 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008A1AB E10B                       	smpsAlterNote       $0B
0008A1AD BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A1B1 E107                       	smpsAlterNote       $07
0008A1B3 E701                       	dc.b	smpsNoAttack, $01
0008A1B5 E104                       	smpsAlterNote       $04
0008A1B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1BB E10A                       	smpsAlterNote       $0A
0008A1BD E701                       	dc.b	smpsNoAttack, $01
0008A1BF E10D                       	smpsAlterNote       $0D
0008A1C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1C5 E107                       	smpsAlterNote       $07
0008A1C7 E701                       	dc.b	smpsNoAttack, $01
0008A1C9 E104                       	smpsAlterNote       $04
0008A1CB 8001                       	dc.b	nRst, $01
0008A1CD E110                       	smpsAlterNote       $10
0008A1CF C703                       	dc.b	nBb5, $03
0008A1D1 E10F                       	smpsAlterNote       $0F
0008A1D3 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A1D7 E10D                       	smpsAlterNote       $0D
0008A1D9 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008A1DD E10C                       	smpsAlterNote       $0C
0008A1DF E701                       	dc.b	smpsNoAttack, $01
0008A1E1 E108                       	smpsAlterNote       $08
0008A1E3 E701                       	dc.b	smpsNoAttack, $01
0008A1E5 E109                       	smpsAlterNote       $09
0008A1E7 E701                       	dc.b	smpsNoAttack, $01
0008A1E9 E10F                       	smpsAlterNote       $0F
0008A1EB E701                       	dc.b	smpsNoAttack, $01
0008A1ED E113                       	smpsAlterNote       $13
0008A1EF E701                       	dc.b	smpsNoAttack, $01
0008A1F1 E10F                       	smpsAlterNote       $0F
0008A1F3 E701                       	dc.b	smpsNoAttack, $01
0008A1F5 E10C                       	smpsAlterNote       $0C
0008A1F7 E701                       	dc.b	smpsNoAttack, $01
0008A1F9 E108                       	smpsAlterNote       $08
0008A1FB E701                       	dc.b	smpsNoAttack, $01
0008A1FD E10C                       	smpsAlterNote       $0C
0008A1FF E701                       	dc.b	smpsNoAttack, $01
0008A201 E112                       	smpsAlterNote       $12
0008A203 E701                       	dc.b	smpsNoAttack, $01
0008A205 E113                       	smpsAlterNote       $13
0008A207 E701                       	dc.b	smpsNoAttack, $01
0008A209 E10F                       	smpsAlterNote       $0F
0008A20B E701                       	dc.b	smpsNoAttack, $01
0008A20D E109                       	smpsAlterNote       $09
0008A20F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A213 E10C                       	smpsAlterNote       $0C
0008A215 E701                       	dc.b	smpsNoAttack, $01
0008A217 E112                       	smpsAlterNote       $12
0008A219 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A21D E10C                       	smpsAlterNote       $0C
0008A21F E701                       	dc.b	smpsNoAttack, $01
0008A221 E109                       	smpsAlterNote       $09
0008A223 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A227 E10F                       	smpsAlterNote       $0F
0008A229 E701                       	dc.b	smpsNoAttack, $01
0008A22B E113                       	smpsAlterNote       $13
0008A22D E701                       	dc.b	smpsNoAttack, $01
0008A22F E112                       	smpsAlterNote       $12
0008A231 E701                       	dc.b	smpsNoAttack, $01
0008A233 E10C                       	smpsAlterNote       $0C
0008A235 E701                       	dc.b	smpsNoAttack, $01
0008A237 E108                       	smpsAlterNote       $08
0008A239 E701                       	dc.b	smpsNoAttack, $01
0008A23B E10C                       	smpsAlterNote       $0C
0008A23D E701                       	dc.b	smpsNoAttack, $01
0008A23F E10F                       	smpsAlterNote       $0F
0008A241 E701                       	dc.b	smpsNoAttack, $01
0008A243 E113                       	smpsAlterNote       $13
0008A245 E701                       	dc.b	smpsNoAttack, $01
0008A247 E10F                       	smpsAlterNote       $0F
0008A249 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008A24D E110                       	smpsAlterNote       $10
0008A24F BB03                       	dc.b	nBb4, $03
0008A251 E10F                       	smpsAlterNote       $0F
0008A253 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008A257 E10B                       	smpsAlterNote       $0B
0008A259 BF03                       	dc.b	nD5, $03
0008A25B E10C                       	smpsAlterNote       $0C
0008A25D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A261 E10D                       	smpsAlterNote       $0D
0008A263 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A26D E10B                       	smpsAlterNote       $0B
0008A26F BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008A27B E110                       	smpsAlterNote       $10
0008A27D C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008A281 E10F                       	smpsAlterNote       $0F
0008A283 C604                       	dc.b	nA5, $04
0008A285 E10D                       	smpsAlterNote       $0D
0008A287 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A28D E109                       	smpsAlterNote       $09
0008A28F E701                       	dc.b	smpsNoAttack, $01
0008A291 E108                       	smpsAlterNote       $08
0008A293 E701                       	dc.b	smpsNoAttack, $01
0008A295 E10C                       	smpsAlterNote       $0C
0008A297 E701                       	dc.b	smpsNoAttack, $01
0008A299 E112                       	smpsAlterNote       $12
0008A29B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A29F E10F                       	smpsAlterNote       $0F
0008A2A1 E701                       	dc.b	smpsNoAttack, $01
0008A2A3 E109                       	smpsAlterNote       $09
0008A2A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2A9 E10F                       	smpsAlterNote       $0F
0008A2AB E701                       	dc.b	smpsNoAttack, $01
0008A2AD E112                       	smpsAlterNote       $12
0008A2AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2B3 E10C                       	smpsAlterNote       $0C
0008A2B5 E701                       	dc.b	smpsNoAttack, $01
0008A2B7 E108                       	smpsAlterNote       $08
0008A2B9 E701                       	dc.b	smpsNoAttack, $01
0008A2BB E109                       	smpsAlterNote       $09
0008A2BD E701                       	dc.b	smpsNoAttack, $01
0008A2BF E10F                       	smpsAlterNote       $0F
0008A2C1 E701                       	dc.b	smpsNoAttack, $01
0008A2C3 E113                       	smpsAlterNote       $13
0008A2C5 E701                       	dc.b	smpsNoAttack, $01
0008A2C7 E10F                       	smpsAlterNote       $0F
0008A2C9 E701                       	dc.b	smpsNoAttack, $01
0008A2CB E10C                       	smpsAlterNote       $0C
0008A2CD E701                       	dc.b	smpsNoAttack, $01
0008A2CF E108                       	smpsAlterNote       $08
0008A2D1 E701                       	dc.b	smpsNoAttack, $01
0008A2D3 E10C                       	smpsAlterNote       $0C
0008A2D5 E701                       	dc.b	smpsNoAttack, $01
0008A2D7 E112                       	smpsAlterNote       $12
0008A2D9 E701                       	dc.b	smpsNoAttack, $01
0008A2DB E113                       	smpsAlterNote       $13
0008A2DD E701                       	dc.b	smpsNoAttack, $01
0008A2DF E10F                       	smpsAlterNote       $0F
0008A2E1 E701                       	dc.b	smpsNoAttack, $01
0008A2E3 E109                       	smpsAlterNote       $09
0008A2E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2E9 E10C                       	smpsAlterNote       $0C
0008A2EB E701                       	dc.b	smpsNoAttack, $01
0008A2ED E112                       	smpsAlterNote       $12
0008A2EF E701                       	dc.b	smpsNoAttack, $01
0008A2F1 E113                       	smpsAlterNote       $13
0008A2F3 8001                       	dc.b	nRst, $01
0008A2F5 E10F                       	smpsAlterNote       $0F
0008A2F7 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008A303 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008A30B E10D                       	smpsAlterNote       $0D
0008A30D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008A313 E10B                       	smpsAlterNote       $0B
0008A315 BF0D                       	dc.b	nD5, $0D
0008A317 E108                       	smpsAlterNote       $08
0008A319 E701                       	dc.b	smpsNoAttack, $01
0008A31B E104                       	smpsAlterNote       $04
0008A31D E701                       	dc.b	smpsNoAttack, $01
0008A31F E105                       	smpsAlterNote       $05
0008A321 E701                       	dc.b	smpsNoAttack, $01
0008A323 E10B                       	smpsAlterNote       $0B
0008A325 E701                       	dc.b	smpsNoAttack, $01
0008A327 E10F                       	smpsAlterNote       $0F
0008A329 E701                       	dc.b	smpsNoAttack, $01
0008A32B E10B                       	smpsAlterNote       $0B
0008A32D E701                       	dc.b	smpsNoAttack, $01
0008A32F E108                       	smpsAlterNote       $08
0008A331 E701                       	dc.b	smpsNoAttack, $01
0008A333 E104                       	smpsAlterNote       $04
0008A335 E701                       	dc.b	smpsNoAttack, $01
0008A337 E108                       	smpsAlterNote       $08
0008A339 E701                       	dc.b	smpsNoAttack, $01
0008A33B E10E                       	smpsAlterNote       $0E
0008A33D E701                       	dc.b	smpsNoAttack, $01
0008A33F E10F                       	smpsAlterNote       $0F
0008A341 E701                       	dc.b	smpsNoAttack, $01
0008A343 E10C                       	smpsAlterNote       $0C
0008A345 C101                       	dc.b	nE5, $01
0008A347 E10D                       	smpsAlterNote       $0D
0008A349 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008A351 E10F                       	smpsAlterNote       $0F
0008A353 C607                       	dc.b	nA5, $07
0008A355 E10C                       	smpsAlterNote       $0C
0008A357 CD07                       	dc.b	nE6, $07
0008A359 E10D                       	smpsAlterNote       $0D
0008A35B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A35F E10C                       	smpsAlterNote       $0C
0008A361 CD03                       	dc.b	nE6, $03
0008A363 E10A                       	smpsAlterNote       $0A
0008A365 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A369 E10D                       	smpsAlterNote       $0D
0008A36B C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008A371 E10A                       	smpsAlterNote       $0A
0008A373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A377 E110                       	smpsAlterNote       $10
0008A379 E701                       	dc.b	smpsNoAttack, $01
0008A37B E114                       	smpsAlterNote       $14
0008A37D E701                       	dc.b	smpsNoAttack, $01
0008A37F E113                       	smpsAlterNote       $13
0008A381 E701                       	dc.b	smpsNoAttack, $01
0008A383 E10D                       	smpsAlterNote       $0D
0008A385 E701                       	dc.b	smpsNoAttack, $01
0008A387 E109                       	smpsAlterNote       $09
0008A389 E701                       	dc.b	smpsNoAttack, $01
0008A38B E10D                       	smpsAlterNote       $0D
0008A38D E701                       	dc.b	smpsNoAttack, $01
0008A38F E110                       	smpsAlterNote       $10
0008A391 E701                       	dc.b	smpsNoAttack, $01
0008A393 E114                       	smpsAlterNote       $14
0008A395 E701                       	dc.b	smpsNoAttack, $01
0008A397 E10F                       	smpsAlterNote       $0F
0008A399 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008A39D E10C                       	smpsAlterNote       $0C
0008A39F E701                       	dc.b	smpsNoAttack, $01
0008A3A1 E108                       	smpsAlterNote       $08
0008A3A3 E701                       	dc.b	smpsNoAttack, $01
0008A3A5 E10C                       	smpsAlterNote       $0C
0008A3A7 E701                       	dc.b	smpsNoAttack, $01
0008A3A9 E10F                       	smpsAlterNote       $0F
0008A3AB E701                       	dc.b	smpsNoAttack, $01
0008A3AD E113                       	smpsAlterNote       $13
0008A3AF E701                       	dc.b	smpsNoAttack, $01
0008A3B1 E10F                       	smpsAlterNote       $0F
0008A3B3 E701                       	dc.b	smpsNoAttack, $01
0008A3B5 E109                       	smpsAlterNote       $09
0008A3B7 E701                       	dc.b	smpsNoAttack, $01
0008A3B9 E108                       	smpsAlterNote       $08
0008A3BB E701                       	dc.b	smpsNoAttack, $01
0008A3BD E10C                       	smpsAlterNote       $0C
0008A3BF E701                       	dc.b	smpsNoAttack, $01
0008A3C1 E112                       	smpsAlterNote       $12
0008A3C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C7 E10F                       	smpsAlterNote       $0F
0008A3C9 E701                       	dc.b	smpsNoAttack, $01
0008A3CB E109                       	smpsAlterNote       $09
0008A3CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3D1 E10F                       	smpsAlterNote       $0F
0008A3D3 E701                       	dc.b	smpsNoAttack, $01
0008A3D5 E112                       	smpsAlterNote       $12
0008A3D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3DB E10C                       	smpsAlterNote       $0C
0008A3DD E701                       	dc.b	smpsNoAttack, $01
0008A3DF E108                       	smpsAlterNote       $08
0008A3E1 E701                       	dc.b	smpsNoAttack, $01
0008A3E3 E109                       	smpsAlterNote       $09
0008A3E5 E701                       	dc.b	smpsNoAttack, $01
0008A3E7 E10F                       	smpsAlterNote       $0F
0008A3E9 E701                       	dc.b	smpsNoAttack, $01
0008A3EB E113                       	smpsAlterNote       $13
0008A3ED E701                       	dc.b	smpsNoAttack, $01
0008A3EF E10F                       	smpsAlterNote       $0F
0008A3F1 E701                       	dc.b	smpsNoAttack, $01
0008A3F3 E10C                       	smpsAlterNote       $0C
0008A3F5 E701                       	dc.b	smpsNoAttack, $01
0008A3F7 E108                       	smpsAlterNote       $08
0008A3F9 E701                       	dc.b	smpsNoAttack, $01
0008A3FB E10C                       	smpsAlterNote       $0C
0008A3FD E701                       	dc.b	smpsNoAttack, $01
0008A3FF E112                       	smpsAlterNote       $12
0008A401 E701                       	dc.b	smpsNoAttack, $01
0008A403 E113                       	smpsAlterNote       $13
0008A405 E701                       	dc.b	smpsNoAttack, $01
0008A407 E10F                       	smpsAlterNote       $0F
0008A409 E701                       	dc.b	smpsNoAttack, $01
0008A40B E109                       	smpsAlterNote       $09
0008A40D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A411 E10C                       	smpsAlterNote       $0C
0008A413 E701                       	dc.b	smpsNoAttack, $01
0008A415 E112                       	smpsAlterNote       $12
0008A417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A41B E10C                       	smpsAlterNote       $0C
0008A41D E701                       	dc.b	smpsNoAttack, $01
0008A41F E109                       	smpsAlterNote       $09
0008A421 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A425 E10F                       	smpsAlterNote       $0F
0008A427 E701                       	dc.b	smpsNoAttack, $01
0008A429 E113                       	smpsAlterNote       $13
0008A42B E701                       	dc.b	smpsNoAttack, $01
0008A42D E112                       	smpsAlterNote       $12
0008A42F E701                       	dc.b	smpsNoAttack, $01
0008A431 E10C                       	smpsAlterNote       $0C
0008A433 E701                       	dc.b	smpsNoAttack, $01
0008A435 E109                       	smpsAlterNote       $09
0008A437 8001                       	dc.b	nRst, $01
0008A439 E10F                       	smpsAlterNote       $0F
0008A43B C60D                       	dc.b	nA5, $0D
0008A43D E10C                       	smpsAlterNote       $0C
0008A43F E701                       	dc.b	smpsNoAttack, $01
0008A441 E108                       	smpsAlterNote       $08
0008A443 E701                       	dc.b	smpsNoAttack, $01
0008A445 E10C                       	smpsAlterNote       $0C
0008A447 E701                       	dc.b	smpsNoAttack, $01
0008A449 E112                       	smpsAlterNote       $12
0008A44B E701                       	dc.b	smpsNoAttack, $01
0008A44D E113                       	smpsAlterNote       $13
0008A44F E701                       	dc.b	smpsNoAttack, $01
0008A451 E10F                       	smpsAlterNote       $0F
0008A453 E701                       	dc.b	smpsNoAttack, $01
0008A455 E109                       	smpsAlterNote       $09
0008A457 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A45B E10C                       	smpsAlterNote       $0C
0008A45D E701                       	dc.b	smpsNoAttack, $01
0008A45F E112                       	smpsAlterNote       $12
0008A461 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A465 E10C                       	smpsAlterNote       $0C
0008A467 E701                       	dc.b	smpsNoAttack, $01
0008A469 E109                       	smpsAlterNote       $09
0008A46B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A46F E10F                       	smpsAlterNote       $0F
0008A471 E701                       	dc.b	smpsNoAttack, $01
0008A473 E113                       	smpsAlterNote       $13
0008A475 E701                       	dc.b	smpsNoAttack, $01
0008A477 E112                       	smpsAlterNote       $12
0008A479 E701                       	dc.b	smpsNoAttack, $01
0008A47B E10C                       	smpsAlterNote       $0C
0008A47D E701                       	dc.b	smpsNoAttack, $01
0008A47F E108                       	smpsAlterNote       $08
0008A481 E701                       	dc.b	smpsNoAttack, $01
0008A483 E10C                       	smpsAlterNote       $0C
0008A485 E701                       	dc.b	smpsNoAttack, $01
0008A487 E10F                       	smpsAlterNote       $0F
0008A489 E701                       	dc.b	smpsNoAttack, $01
0008A48B E113                       	smpsAlterNote       $13
0008A48D E701                       	dc.b	smpsNoAttack, $01
0008A48F E10F                       	smpsAlterNote       $0F
0008A491 E701                       	dc.b	smpsNoAttack, $01
0008A493 E109                       	smpsAlterNote       $09
0008A495 E701                       	dc.b	smpsNoAttack, $01
0008A497 E108                       	smpsAlterNote       $08
0008A499 E701                       	dc.b	smpsNoAttack, $01
0008A49B E10C                       	smpsAlterNote       $0C
0008A49D E701                       	dc.b	smpsNoAttack, $01
0008A49F E112                       	smpsAlterNote       $12
0008A4A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4A5 E10F                       	smpsAlterNote       $0F
0008A4A7 E701                       	dc.b	smpsNoAttack, $01
0008A4A9 E109                       	smpsAlterNote       $09
0008A4AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4AF E10F                       	smpsAlterNote       $0F
0008A4B1 E701                       	dc.b	smpsNoAttack, $01
0008A4B3 E112                       	smpsAlterNote       $12
0008A4B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4B9 E10C                       	smpsAlterNote       $0C
0008A4BB E701                       	dc.b	smpsNoAttack, $01
0008A4BD E108                       	smpsAlterNote       $08
0008A4BF E701                       	dc.b	smpsNoAttack, $01
0008A4C1 E10C                       	smpsAlterNote       $0C
0008A4C3 E701                       	dc.b	smpsNoAttack, $01
0008A4C5 E10F                       	smpsAlterNote       $0F
0008A4C7 E701                       	dc.b	smpsNoAttack, $01
0008A4C9 E113                       	smpsAlterNote       $13
0008A4CB E701                       	dc.b	smpsNoAttack, $01
0008A4CD E10F                       	smpsAlterNote       $0F
0008A4CF E701                       	dc.b	smpsNoAttack, $01
0008A4D1 E109                       	smpsAlterNote       $09
0008A4D3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A4D9 E601                       	smpsAlterVol        $01
0008A4DB E10F                       	smpsAlterNote       $0F
0008A4DD C604                       	dc.b	nA5, $04
0008A4DF E10D                       	smpsAlterNote       $0D
0008A4E1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008A4E7 E10B                       	smpsAlterNote       $0B
0008A4E9 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008A4F1 E10F                       	smpsAlterNote       $0F
0008A4F3 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A4F7 E10D                       	smpsAlterNote       $0D
0008A4F9 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A4FF E10C                       	smpsAlterNote       $0C
0008A501 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008A507 E10A                       	smpsAlterNote       $0A
0008A509 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008A50D E110                       	smpsAlterNote       $10
0008A50F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008A513 E10F                       	smpsAlterNote       $0F
0008A515 C604                       	dc.b	nA5, $04
0008A517 E10D                       	smpsAlterNote       $0D
0008A519 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008A525 E109                       	smpsAlterNote       $09
0008A527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A52B E10F                       	smpsAlterNote       $0F
0008A52D E701                       	dc.b	smpsNoAttack, $01
0008A52F E112                       	smpsAlterNote       $12
0008A531 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A535 E10C                       	smpsAlterNote       $0C
0008A537 E701                       	dc.b	smpsNoAttack, $01
0008A539 E108                       	smpsAlterNote       $08
0008A53B E701                       	dc.b	smpsNoAttack, $01
0008A53D E10C                       	smpsAlterNote       $0C
0008A53F E701                       	dc.b	smpsNoAttack, $01
0008A541 E10F                       	smpsAlterNote       $0F
0008A543 E701                       	dc.b	smpsNoAttack, $01
0008A545 E113                       	smpsAlterNote       $13
0008A547 E701                       	dc.b	smpsNoAttack, $01
0008A549 E10D                       	smpsAlterNote       $0D
0008A54B C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A551 E10C                       	smpsAlterNote       $0C
0008A553 C10D                       	dc.b	nE5, $0D
0008A555 E109                       	smpsAlterNote       $09
0008A557 E701                       	dc.b	smpsNoAttack, $01
0008A559 E105                       	smpsAlterNote       $05
0008A55B E701                       	dc.b	smpsNoAttack, $01
0008A55D E106                       	smpsAlterNote       $06
0008A55F E701                       	dc.b	smpsNoAttack, $01
0008A561 E10C                       	smpsAlterNote       $0C
0008A563 E701                       	dc.b	smpsNoAttack, $01
0008A565 E110                       	smpsAlterNote       $10
0008A567 E701                       	dc.b	smpsNoAttack, $01
0008A569 E10C                       	smpsAlterNote       $0C
0008A56B E701                       	dc.b	smpsNoAttack, $01
0008A56D E109                       	smpsAlterNote       $09
0008A56F E701                       	dc.b	smpsNoAttack, $01
0008A571 E105                       	smpsAlterNote       $05
0008A573 E701                       	dc.b	smpsNoAttack, $01
0008A575 E109                       	smpsAlterNote       $09
0008A577 E701                       	dc.b	smpsNoAttack, $01
0008A579 E10F                       	smpsAlterNote       $0F
0008A57B E701                       	dc.b	smpsNoAttack, $01
0008A57D E110                       	smpsAlterNote       $10
0008A57F E701                       	dc.b	smpsNoAttack, $01
0008A581 E10C                       	smpsAlterNote       $0C
0008A583 E701                       	dc.b	smpsNoAttack, $01
0008A585 E106                       	smpsAlterNote       $06
0008A587 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A58B E109                       	smpsAlterNote       $09
0008A58D E701                       	dc.b	smpsNoAttack, $01
0008A58F E10F                       	smpsAlterNote       $0F
0008A591 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A595 E109                       	smpsAlterNote       $09
0008A597 E701                       	dc.b	smpsNoAttack, $01
0008A599 E106                       	smpsAlterNote       $06
0008A59B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A59F E10C                       	smpsAlterNote       $0C
0008A5A1 E701                       	dc.b	smpsNoAttack, $01
0008A5A3 E110                       	smpsAlterNote       $10
0008A5A5 E701                       	dc.b	smpsNoAttack, $01
0008A5A7 E10F                       	smpsAlterNote       $0F
0008A5A9 E701                       	dc.b	smpsNoAttack, $01
0008A5AB E109                       	smpsAlterNote       $09
0008A5AD E701                       	dc.b	smpsNoAttack, $01
0008A5AF E105                       	smpsAlterNote       $05
0008A5B1 E701                       	dc.b	smpsNoAttack, $01
0008A5B3 E109                       	smpsAlterNote       $09
0008A5B5 E701                       	dc.b	smpsNoAttack, $01
0008A5B7 E10C                       	smpsAlterNote       $0C
0008A5B9 E701                       	dc.b	smpsNoAttack, $01
0008A5BB E110                       	smpsAlterNote       $10
0008A5BD E701                       	dc.b	smpsNoAttack, $01
0008A5BF E10C                       	smpsAlterNote       $0C
0008A5C1 E701                       	dc.b	smpsNoAttack, $01
0008A5C3 E106                       	smpsAlterNote       $06
0008A5C5 E701                       	dc.b	smpsNoAttack, $01
0008A5C7 E105                       	smpsAlterNote       $05
0008A5C9 E701                       	dc.b	smpsNoAttack, $01
0008A5CB E109                       	smpsAlterNote       $09
0008A5CD E701                       	dc.b	smpsNoAttack, $01
0008A5CF E10F                       	smpsAlterNote       $0F
0008A5D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5D5 E10C                       	smpsAlterNote       $0C
0008A5D7 E701                       	dc.b	smpsNoAttack, $01
0008A5D9 E106                       	smpsAlterNote       $06
0008A5DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5DF E10C                       	smpsAlterNote       $0C
0008A5E1 E701                       	dc.b	smpsNoAttack, $01
0008A5E3 E10F                       	smpsAlterNote       $0F
0008A5E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5E9 E109                       	smpsAlterNote       $09
0008A5EB E701                       	dc.b	smpsNoAttack, $01
0008A5ED E105                       	smpsAlterNote       $05
0008A5EF E701                       	dc.b	smpsNoAttack, $01
0008A5F1 E106                       	smpsAlterNote       $06
0008A5F3 E701                       	dc.b	smpsNoAttack, $01
0008A5F5 E10C                       	smpsAlterNote       $0C
0008A5F7 E701                       	dc.b	smpsNoAttack, $01
0008A5F9 E110                       	smpsAlterNote       $10
0008A5FB E701                       	dc.b	smpsNoAttack, $01
0008A5FD E10C                       	smpsAlterNote       $0C
0008A5FF E701                       	dc.b	smpsNoAttack, $01
0008A601 E109                       	smpsAlterNote       $09
0008A603 E701                       	dc.b	smpsNoAttack, $01
0008A605 E105                       	smpsAlterNote       $05
0008A607 E701                       	dc.b	smpsNoAttack, $01
0008A609 E109                       	smpsAlterNote       $09
0008A60B E701                       	dc.b	smpsNoAttack, $01
0008A60D E10F                       	smpsAlterNote       $0F
0008A60F E701                       	dc.b	smpsNoAttack, $01
0008A611 E110                       	smpsAlterNote       $10
0008A613 E701                       	dc.b	smpsNoAttack, $01
0008A615 E10C                       	smpsAlterNote       $0C
0008A617 E701                       	dc.b	smpsNoAttack, $01
0008A619 E106                       	smpsAlterNote       $06
0008A61B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A61F E109                       	smpsAlterNote       $09
0008A621 E701                       	dc.b	smpsNoAttack, $01
0008A623 E10F                       	smpsAlterNote       $0F
0008A625 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A629 E109                       	smpsAlterNote       $09
0008A62B E701                       	dc.b	smpsNoAttack, $01
0008A62D E106                       	smpsAlterNote       $06
0008A62F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A633 E10C                       	smpsAlterNote       $0C
0008A635 E701                       	dc.b	smpsNoAttack, $01
0008A637 E110                       	smpsAlterNote       $10
0008A639 E701                       	dc.b	smpsNoAttack, $01
0008A63B E10F                       	smpsAlterNote       $0F
0008A63D E701                       	dc.b	smpsNoAttack, $01
0008A63F E109                       	smpsAlterNote       $09
0008A641 E701                       	dc.b	smpsNoAttack, $01
0008A643 E105                       	smpsAlterNote       $05
0008A645 E701                       	dc.b	smpsNoAttack, $01
0008A647 E109                       	smpsAlterNote       $09
0008A649 E701                       	dc.b	smpsNoAttack, $01
0008A64B E10C                       	smpsAlterNote       $0C
0008A64D E701                       	dc.b	smpsNoAttack, $01
0008A64F E110                       	smpsAlterNote       $10
0008A651 E701                       	dc.b	smpsNoAttack, $01
0008A653 E10C                       	smpsAlterNote       $0C
0008A655 E701                       	dc.b	smpsNoAttack, $01
0008A657 E106                       	smpsAlterNote       $06
0008A659 E701                       	dc.b	smpsNoAttack, $01
0008A65B E105                       	smpsAlterNote       $05
0008A65D E701                       	dc.b	smpsNoAttack, $01
0008A65F E109                       	smpsAlterNote       $09
0008A661 E701                       	dc.b	smpsNoAttack, $01
0008A663 E10F                       	smpsAlterNote       $0F
0008A665 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A669 E109                       	smpsAlterNote       $09
0008A66B E701                       	dc.b	smpsNoAttack, $01
0008A66D E106                       	smpsAlterNote       $06
0008A66F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A673 E10C                       	smpsAlterNote       $0C
0008A675 E701                       	dc.b	smpsNoAttack, $01
0008A677 E110                       	smpsAlterNote       $10
0008A679 E701                       	dc.b	smpsNoAttack, $01
0008A67B E10F                       	smpsAlterNote       $0F
0008A67D E701                       	dc.b	smpsNoAttack, $01
0008A67F E109                       	smpsAlterNote       $09
0008A681 E701                       	dc.b	smpsNoAttack, $01
0008A683 E105                       	smpsAlterNote       $05
0008A685 E701                       	dc.b	smpsNoAttack, $01
0008A687 E109                       	smpsAlterNote       $09
0008A689 E701                       	dc.b	smpsNoAttack, $01
0008A68B E10C                       	smpsAlterNote       $0C
0008A68D E701                       	dc.b	smpsNoAttack, $01
0008A68F E110                       	smpsAlterNote       $10
0008A691 E701                       	dc.b	smpsNoAttack, $01
0008A693 E10C                       	smpsAlterNote       $0C
0008A695 E701                       	dc.b	smpsNoAttack, $01
0008A697 E106                       	smpsAlterNote       $06
0008A699 E701                       	dc.b	smpsNoAttack, $01
0008A69B E105                       	smpsAlterNote       $05
0008A69D E701                       	dc.b	smpsNoAttack, $01
0008A69F E109                       	smpsAlterNote       $09
0008A6A1 E701                       	dc.b	smpsNoAttack, $01
0008A6A3 E10F                       	smpsAlterNote       $0F
0008A6A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6A9 E10C                       	smpsAlterNote       $0C
0008A6AB E701                       	dc.b	smpsNoAttack, $01
0008A6AD E106                       	smpsAlterNote       $06
0008A6AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6B3 E10C                       	smpsAlterNote       $0C
0008A6B5 E701                       	dc.b	smpsNoAttack, $01
0008A6B7 E10F                       	smpsAlterNote       $0F
0008A6B9 E701                       	dc.b	smpsNoAttack, $01
0008A6BB E110                       	smpsAlterNote       $10
0008A6BD 8001                       	dc.b	nRst, $01
0008A6BF E10F                       	smpsAlterNote       $0F
0008A6C1 C604                       	dc.b	nA5, $04
0008A6C3 E10D                       	smpsAlterNote       $0D
0008A6C5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008A6CB E10B                       	smpsAlterNote       $0B
0008A6CD BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008A6D3 E10F                       	smpsAlterNote       $0F
0008A6D5 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A6D9 E10D                       	smpsAlterNote       $0D
0008A6DB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A6E1 E10C                       	smpsAlterNote       $0C
0008A6E3 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008A6E9 E10A                       	smpsAlterNote       $0A
0008A6EB C904                       	dc.b	nC6, $04
0008A6ED E110                       	smpsAlterNote       $10
0008A6EF C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008A6F3 E10F                       	smpsAlterNote       $0F
0008A6F5 C604                       	dc.b	nA5, $04
0008A6F7 E10D                       	smpsAlterNote       $0D
0008A6F9 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008A705 E109                       	smpsAlterNote       $09
0008A707 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A70B E10F                       	smpsAlterNote       $0F
0008A70D E701                       	dc.b	smpsNoAttack, $01
0008A70F E112                       	smpsAlterNote       $12
0008A711 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A715 E10C                       	smpsAlterNote       $0C
0008A717 E701                       	dc.b	smpsNoAttack, $01
0008A719 E108                       	smpsAlterNote       $08
0008A71B E701                       	dc.b	smpsNoAttack, $01
0008A71D E109                       	smpsAlterNote       $09
0008A71F E701                       	dc.b	smpsNoAttack, $01
0008A721 E10F                       	smpsAlterNote       $0F
0008A723 E701                       	dc.b	smpsNoAttack, $01
0008A725 E113                       	smpsAlterNote       $13
0008A727 E701                       	dc.b	smpsNoAttack, $01
0008A729 E10D                       	smpsAlterNote       $0D
0008A72B C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A731 E10C                       	smpsAlterNote       $0C
0008A733 C10D                       	dc.b	nE5, $0D
0008A735 E109                       	smpsAlterNote       $09
0008A737 E701                       	dc.b	smpsNoAttack, $01
0008A739 E106                       	smpsAlterNote       $06
0008A73B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A73F E10C                       	smpsAlterNote       $0C
0008A741 E701                       	dc.b	smpsNoAttack, $01
0008A743 E110                       	smpsAlterNote       $10
0008A745 E701                       	dc.b	smpsNoAttack, $01
0008A747 E10F                       	smpsAlterNote       $0F
0008A749 E701                       	dc.b	smpsNoAttack, $01
0008A74B E109                       	smpsAlterNote       $09
0008A74D E701                       	dc.b	smpsNoAttack, $01
0008A74F E105                       	smpsAlterNote       $05
0008A751 E701                       	dc.b	smpsNoAttack, $01
0008A753 E109                       	smpsAlterNote       $09
0008A755 E701                       	dc.b	smpsNoAttack, $01
0008A757 E10C                       	smpsAlterNote       $0C
0008A759 E701                       	dc.b	smpsNoAttack, $01
0008A75B E110                       	smpsAlterNote       $10
0008A75D E701                       	dc.b	smpsNoAttack, $01
0008A75F E10C                       	smpsAlterNote       $0C
0008A761 E701                       	dc.b	smpsNoAttack, $01
0008A763 E106                       	smpsAlterNote       $06
0008A765 E701                       	dc.b	smpsNoAttack, $01
0008A767 E105                       	smpsAlterNote       $05
0008A769 E701                       	dc.b	smpsNoAttack, $01
0008A76B E109                       	smpsAlterNote       $09
0008A76D E701                       	dc.b	smpsNoAttack, $01
0008A76F E10F                       	smpsAlterNote       $0F
0008A771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A775 E10C                       	smpsAlterNote       $0C
0008A777 E701                       	dc.b	smpsNoAttack, $01
0008A779 E106                       	smpsAlterNote       $06
0008A77B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A77F E10C                       	smpsAlterNote       $0C
0008A781 E701                       	dc.b	smpsNoAttack, $01
0008A783 E10F                       	smpsAlterNote       $0F
0008A785 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A789 E109                       	smpsAlterNote       $09
0008A78B E701                       	dc.b	smpsNoAttack, $01
0008A78D E105                       	smpsAlterNote       $05
0008A78F E701                       	dc.b	smpsNoAttack, $01
0008A791 E106                       	smpsAlterNote       $06
0008A793 E701                       	dc.b	smpsNoAttack, $01
0008A795 E10C                       	smpsAlterNote       $0C
0008A797 E701                       	dc.b	smpsNoAttack, $01
0008A799 E110                       	smpsAlterNote       $10
0008A79B E701                       	dc.b	smpsNoAttack, $01
0008A79D E10C                       	smpsAlterNote       $0C
0008A79F E701                       	dc.b	smpsNoAttack, $01
0008A7A1 E109                       	smpsAlterNote       $09
0008A7A3 E701                       	dc.b	smpsNoAttack, $01
0008A7A5 E105                       	smpsAlterNote       $05
0008A7A7 E701                       	dc.b	smpsNoAttack, $01
0008A7A9 E109                       	smpsAlterNote       $09
0008A7AB E701                       	dc.b	smpsNoAttack, $01
0008A7AD E10F                       	smpsAlterNote       $0F
0008A7AF E701                       	dc.b	smpsNoAttack, $01
0008A7B1 E110                       	smpsAlterNote       $10
0008A7B3 E701                       	dc.b	smpsNoAttack, $01
0008A7B5 E10C                       	smpsAlterNote       $0C
0008A7B7 E701                       	dc.b	smpsNoAttack, $01
0008A7B9 E106                       	smpsAlterNote       $06
0008A7BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7BF E109                       	smpsAlterNote       $09
0008A7C1 E701                       	dc.b	smpsNoAttack, $01
0008A7C3 E10F                       	smpsAlterNote       $0F
0008A7C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7C9 E109                       	smpsAlterNote       $09
0008A7CB E701                       	dc.b	smpsNoAttack, $01
0008A7CD E106                       	smpsAlterNote       $06
0008A7CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7D3 E10C                       	smpsAlterNote       $0C
0008A7D5 E701                       	dc.b	smpsNoAttack, $01
0008A7D7 E110                       	smpsAlterNote       $10
0008A7D9 E701                       	dc.b	smpsNoAttack, $01
0008A7DB E10F                       	smpsAlterNote       $0F
0008A7DD E701                       	dc.b	smpsNoAttack, $01
0008A7DF E109                       	smpsAlterNote       $09
0008A7E1 E701                       	dc.b	smpsNoAttack, $01
0008A7E3 E105                       	smpsAlterNote       $05
0008A7E5 E701                       	dc.b	smpsNoAttack, $01
0008A7E7 E109                       	smpsAlterNote       $09
0008A7E9 E701                       	dc.b	smpsNoAttack, $01
0008A7EB E10F                       	smpsAlterNote       $0F
0008A7ED E701                       	dc.b	smpsNoAttack, $01
0008A7EF E110                       	smpsAlterNote       $10
0008A7F1 E701                       	dc.b	smpsNoAttack, $01
0008A7F3 E10C                       	smpsAlterNote       $0C
0008A7F5 E701                       	dc.b	smpsNoAttack, $01
0008A7F7 E106                       	smpsAlterNote       $06
0008A7F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7FD E109                       	smpsAlterNote       $09
0008A7FF E701                       	dc.b	smpsNoAttack, $01
0008A801 E10F                       	smpsAlterNote       $0F
0008A803 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A807 E109                       	smpsAlterNote       $09
0008A809 E701                       	dc.b	smpsNoAttack, $01
0008A80B E106                       	smpsAlterNote       $06
0008A80D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A811 E10C                       	smpsAlterNote       $0C
0008A813 E701                       	dc.b	smpsNoAttack, $01
0008A815 E110                       	smpsAlterNote       $10
0008A817 E701                       	dc.b	smpsNoAttack, $01
0008A819 E10F                       	smpsAlterNote       $0F
0008A81B E701                       	dc.b	smpsNoAttack, $01
0008A81D E109                       	smpsAlterNote       $09
0008A81F E701                       	dc.b	smpsNoAttack, $01
0008A821 E105                       	smpsAlterNote       $05
0008A823 E701                       	dc.b	smpsNoAttack, $01
0008A825 E109                       	smpsAlterNote       $09
0008A827 E701                       	dc.b	smpsNoAttack, $01
0008A829 E10C                       	smpsAlterNote       $0C
0008A82B E701                       	dc.b	smpsNoAttack, $01
0008A82D E110                       	smpsAlterNote       $10
0008A82F E701                       	dc.b	smpsNoAttack, $01
0008A831 E10C                       	smpsAlterNote       $0C
0008A833 E701                       	dc.b	smpsNoAttack, $01
0008A835 E106                       	smpsAlterNote       $06
0008A837 E701                       	dc.b	smpsNoAttack, $01
0008A839 E105                       	smpsAlterNote       $05
0008A83B E701                       	dc.b	smpsNoAttack, $01
0008A83D E109                       	smpsAlterNote       $09
0008A83F E701                       	dc.b	smpsNoAttack, $01
0008A841 E10F                       	smpsAlterNote       $0F
0008A843 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A847 E10C                       	smpsAlterNote       $0C
0008A849 E701                       	dc.b	smpsNoAttack, $01
0008A84B E106                       	smpsAlterNote       $06
0008A84D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A851 E10C                       	smpsAlterNote       $0C
0008A853 E701                       	dc.b	smpsNoAttack, $01
0008A855 E10F                       	smpsAlterNote       $0F
0008A857 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A85B E109                       	smpsAlterNote       $09
0008A85D E701                       	dc.b	smpsNoAttack, $01
0008A85F E105                       	smpsAlterNote       $05
0008A861 E701                       	dc.b	smpsNoAttack, $01
0008A863 E106                       	smpsAlterNote       $06
0008A865 E701                       	dc.b	smpsNoAttack, $01
0008A867 E10C                       	smpsAlterNote       $0C
0008A869 E701                       	dc.b	smpsNoAttack, $01
0008A86B E110                       	smpsAlterNote       $10
0008A86D E701                       	dc.b	smpsNoAttack, $01
0008A86F E10C                       	smpsAlterNote       $0C
0008A871 E701                       	dc.b	smpsNoAttack, $01
0008A873 E109                       	smpsAlterNote       $09
0008A875 E701                       	dc.b	smpsNoAttack, $01
0008A877 E105                       	smpsAlterNote       $05
0008A879 E701                       	dc.b	smpsNoAttack, $01
0008A87B E109                       	smpsAlterNote       $09
0008A87D E701                       	dc.b	smpsNoAttack, $01
0008A87F E10F                       	smpsAlterNote       $0F
0008A881 E701                       	dc.b	smpsNoAttack, $01
0008A883 E110                       	smpsAlterNote       $10
0008A885 E701                       	dc.b	smpsNoAttack, $01
0008A887 E10C                       	smpsAlterNote       $0C
0008A889 E701                       	dc.b	smpsNoAttack, $01
0008A88B E106                       	smpsAlterNote       $06
0008A88D E701                       	dc.b	smpsNoAttack, $01
0008A88F E10B                       	smpsAlterNote       $0B
0008A891 BF02                       	dc.b	nD5, $02
0008A893 E10C                       	smpsAlterNote       $0C
0008A895 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008A89B E109                       	smpsAlterNote       $09
0008A89D E701                       	dc.b	smpsNoAttack, $01
0008A89F E105                       	smpsAlterNote       $05
0008A8A1 E701                       	dc.b	smpsNoAttack, $01
0008A8A3 E109                       	smpsAlterNote       $09
0008A8A5 E701                       	dc.b	smpsNoAttack, $01
0008A8A7 E10F                       	smpsAlterNote       $0F
0008A8A9 E701                       	dc.b	smpsNoAttack, $01
0008A8AB E110                       	smpsAlterNote       $10
0008A8AD E701                       	dc.b	smpsNoAttack, $01
0008A8AF E10C                       	smpsAlterNote       $0C
0008A8B1 E701                       	dc.b	smpsNoAttack, $01
0008A8B3 E106                       	smpsAlterNote       $06
0008A8B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8B9 E109                       	smpsAlterNote       $09
0008A8BB E701                       	dc.b	smpsNoAttack, $01
0008A8BD E10F                       	smpsAlterNote       $0F
0008A8BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C3 E109                       	smpsAlterNote       $09
0008A8C5 E701                       	dc.b	smpsNoAttack, $01
0008A8C7 E106                       	smpsAlterNote       $06
0008A8C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8CD E10C                       	smpsAlterNote       $0C
0008A8CF E701                       	dc.b	smpsNoAttack, $01
0008A8D1 E110                       	smpsAlterNote       $10
0008A8D3 E701                       	dc.b	smpsNoAttack, $01
0008A8D5 E10F                       	smpsAlterNote       $0F
0008A8D7 E701                       	dc.b	smpsNoAttack, $01
0008A8D9 E109                       	smpsAlterNote       $09
0008A8DB E701                       	dc.b	smpsNoAttack, $01
0008A8DD E105                       	smpsAlterNote       $05
0008A8DF E701                       	dc.b	smpsNoAttack, $01
0008A8E1 E109                       	smpsAlterNote       $09
0008A8E3 E701                       	dc.b	smpsNoAttack, $01
0008A8E5 E10C                       	smpsAlterNote       $0C
0008A8E7 E701                       	dc.b	smpsNoAttack, $01
0008A8E9 E110                       	smpsAlterNote       $10
0008A8EB E701                       	dc.b	smpsNoAttack, $01
0008A8ED E10C                       	smpsAlterNote       $0C
0008A8EF E701                       	dc.b	smpsNoAttack, $01
0008A8F1 E106                       	smpsAlterNote       $06
0008A8F3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A8F7 E10D                       	smpsAlterNote       $0D
0008A8F9 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008A901 E10C                       	smpsAlterNote       $0C
0008A903 C10D                       	dc.b	nE5, $0D
0008A905 E106                       	smpsAlterNote       $06
0008A907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A90B E109                       	smpsAlterNote       $09
0008A90D E701                       	dc.b	smpsNoAttack, $01
0008A90F E10F                       	smpsAlterNote       $0F
0008A911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A915 E109                       	smpsAlterNote       $09
0008A917 E701                       	dc.b	smpsNoAttack, $01
0008A919 E106                       	smpsAlterNote       $06
0008A91B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A91F E10C                       	smpsAlterNote       $0C
0008A921 E701                       	dc.b	smpsNoAttack, $01
0008A923 E110                       	smpsAlterNote       $10
0008A925 E701                       	dc.b	smpsNoAttack, $01
0008A927 E10F                       	smpsAlterNote       $0F
0008A929 E701                       	dc.b	smpsNoAttack, $01
0008A92B E109                       	smpsAlterNote       $09
0008A92D E701                       	dc.b	smpsNoAttack, $01
0008A92F E105                       	smpsAlterNote       $05
0008A931 E701                       	dc.b	smpsNoAttack, $01
0008A933 E106                       	smpsAlterNote       $06
0008A935 800F                       	dc.b	nRst, $0F
0008A939 E6FF                       	smpsAlterVol        $FF
0008A93B E10F                       	smpsAlterNote       $0F
0008A93D BA01                       	dc.b	nA4, $01
0008A93F E110                       	smpsAlterNote       $10
0008A941 BB02                       	dc.b	nBb4, $02
0008A943 E10F                       	smpsAlterNote       $0F
0008A945 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008A94B E10B                       	smpsAlterNote       $0B
0008A94D BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A951 E10C                       	smpsAlterNote       $0C
0008A953 C103                       	dc.b	nE5, $03
0008A955 E10D                       	smpsAlterNote       $0D
0008A957 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008A961 E10B                       	smpsAlterNote       $0B
0008A963 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008A967 E104                       	smpsAlterNote       $04
0008A969 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A96D E10A                       	smpsAlterNote       $0A
0008A96F E701                       	dc.b	smpsNoAttack, $01
0008A971 E10D                       	smpsAlterNote       $0D
0008A973 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A977 E107                       	smpsAlterNote       $07
0008A979 E701                       	dc.b	smpsNoAttack, $01
0008A97B E104                       	smpsAlterNote       $04
0008A97D 8001                       	dc.b	nRst, $01
0008A97F E110                       	smpsAlterNote       $10
0008A981 C703                       	dc.b	nBb5, $03
0008A983 E10F                       	smpsAlterNote       $0F
0008A985 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A989 E10D                       	smpsAlterNote       $0D
0008A98B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008A98F E10C                       	smpsAlterNote       $0C
0008A991 E701                       	dc.b	smpsNoAttack, $01
0008A993 E108                       	smpsAlterNote       $08
0008A995 E701                       	dc.b	smpsNoAttack, $01
0008A997 E109                       	smpsAlterNote       $09
0008A999 E701                       	dc.b	smpsNoAttack, $01
0008A99B E10F                       	smpsAlterNote       $0F
0008A99D E701                       	dc.b	smpsNoAttack, $01
0008A99F E113                       	smpsAlterNote       $13
0008A9A1 E701                       	dc.b	smpsNoAttack, $01
0008A9A3 E10F                       	smpsAlterNote       $0F
0008A9A5 E701                       	dc.b	smpsNoAttack, $01
0008A9A7 E10C                       	smpsAlterNote       $0C
0008A9A9 E701                       	dc.b	smpsNoAttack, $01
0008A9AB E108                       	smpsAlterNote       $08
0008A9AD E701                       	dc.b	smpsNoAttack, $01
0008A9AF E10C                       	smpsAlterNote       $0C
0008A9B1 E701                       	dc.b	smpsNoAttack, $01
0008A9B3 E112                       	smpsAlterNote       $12
0008A9B5 E701                       	dc.b	smpsNoAttack, $01
0008A9B7 E113                       	smpsAlterNote       $13
0008A9B9 E701                       	dc.b	smpsNoAttack, $01
0008A9BB E10F                       	smpsAlterNote       $0F
0008A9BD E701                       	dc.b	smpsNoAttack, $01
0008A9BF E109                       	smpsAlterNote       $09
0008A9C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9C5 E10C                       	smpsAlterNote       $0C
0008A9C7 E701                       	dc.b	smpsNoAttack, $01
0008A9C9 E112                       	smpsAlterNote       $12
0008A9CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9CF E10C                       	smpsAlterNote       $0C
0008A9D1 E701                       	dc.b	smpsNoAttack, $01
0008A9D3 E109                       	smpsAlterNote       $09
0008A9D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9D9 E10F                       	smpsAlterNote       $0F
0008A9DB E701                       	dc.b	smpsNoAttack, $01
0008A9DD E113                       	smpsAlterNote       $13
0008A9DF E701                       	dc.b	smpsNoAttack, $01
0008A9E1 E112                       	smpsAlterNote       $12
0008A9E3 E701                       	dc.b	smpsNoAttack, $01
0008A9E5 E10C                       	smpsAlterNote       $0C
0008A9E7 E701                       	dc.b	smpsNoAttack, $01
0008A9E9 E108                       	smpsAlterNote       $08
0008A9EB E701                       	dc.b	smpsNoAttack, $01
0008A9ED E10C                       	smpsAlterNote       $0C
0008A9EF E701                       	dc.b	smpsNoAttack, $01
0008A9F1 E10F                       	smpsAlterNote       $0F
0008A9F3 E701                       	dc.b	smpsNoAttack, $01
0008A9F5 E113                       	smpsAlterNote       $13
0008A9F7 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008A9FB E10B                       	smpsAlterNote       $0B
0008A9FD BF03                       	dc.b	nD5, $03
0008A9FF E10C                       	smpsAlterNote       $0C
0008AA01 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AA05 E10D                       	smpsAlterNote       $0D
0008AA07 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AA11 E10B                       	smpsAlterNote       $0B
0008AA13 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008AA1F E110                       	smpsAlterNote       $10
0008AA21 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AA25 E10F                       	smpsAlterNote       $0F
0008AA27 C604                       	dc.b	nA5, $04
0008AA29 E10D                       	smpsAlterNote       $0D
0008AA2B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AA31 E109                       	smpsAlterNote       $09
0008AA33 E701                       	dc.b	smpsNoAttack, $01
0008AA35 E108                       	smpsAlterNote       $08
0008AA37 E701                       	dc.b	smpsNoAttack, $01
0008AA39 E10C                       	smpsAlterNote       $0C
0008AA3B E701                       	dc.b	smpsNoAttack, $01
0008AA3D E112                       	smpsAlterNote       $12
0008AA3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA43 E10F                       	smpsAlterNote       $0F
0008AA45 E701                       	dc.b	smpsNoAttack, $01
0008AA47 E109                       	smpsAlterNote       $09
0008AA49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA4D E10F                       	smpsAlterNote       $0F
0008AA4F E701                       	dc.b	smpsNoAttack, $01
0008AA51 E112                       	smpsAlterNote       $12
0008AA53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA57 E10C                       	smpsAlterNote       $0C
0008AA59 E701                       	dc.b	smpsNoAttack, $01
0008AA5B E108                       	smpsAlterNote       $08
0008AA5D E701                       	dc.b	smpsNoAttack, $01
0008AA5F E109                       	smpsAlterNote       $09
0008AA61 E701                       	dc.b	smpsNoAttack, $01
0008AA63 E10F                       	smpsAlterNote       $0F
0008AA65 E701                       	dc.b	smpsNoAttack, $01
0008AA67 E113                       	smpsAlterNote       $13
0008AA69 E701                       	dc.b	smpsNoAttack, $01
0008AA6B E10F                       	smpsAlterNote       $0F
0008AA6D E701                       	dc.b	smpsNoAttack, $01
0008AA6F E10C                       	smpsAlterNote       $0C
0008AA71 E701                       	dc.b	smpsNoAttack, $01
0008AA73 E108                       	smpsAlterNote       $08
0008AA75 E701                       	dc.b	smpsNoAttack, $01
0008AA77 E10C                       	smpsAlterNote       $0C
0008AA79 E701                       	dc.b	smpsNoAttack, $01
0008AA7B E112                       	smpsAlterNote       $12
0008AA7D E701                       	dc.b	smpsNoAttack, $01
0008AA7F E113                       	smpsAlterNote       $13
0008AA81 E701                       	dc.b	smpsNoAttack, $01
0008AA83 E10F                       	smpsAlterNote       $0F
0008AA85 E701                       	dc.b	smpsNoAttack, $01
0008AA87 E109                       	smpsAlterNote       $09
0008AA89 E701                       	dc.b	smpsNoAttack, $01
0008AA8B E10D                       	smpsAlterNote       $0D
0008AA8D C402                       	dc.b	nG5, $02
0008AA8F E10F                       	smpsAlterNote       $0F
0008AA91 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008AA9B E10D                       	smpsAlterNote       $0D
0008AA9D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AAA3 E10B                       	smpsAlterNote       $0B
0008AAA5 BF0D                       	dc.b	nD5, $0D
0008AAA7 E108                       	smpsAlterNote       $08
0008AAA9 E701                       	dc.b	smpsNoAttack, $01
0008AAAB E104                       	smpsAlterNote       $04
0008AAAD E701                       	dc.b	smpsNoAttack, $01
0008AAAF E105                       	smpsAlterNote       $05
0008AAB1 E701                       	dc.b	smpsNoAttack, $01
0008AAB3 E10B                       	smpsAlterNote       $0B
0008AAB5 E701                       	dc.b	smpsNoAttack, $01
0008AAB7 E10F                       	smpsAlterNote       $0F
0008AAB9 E701                       	dc.b	smpsNoAttack, $01
0008AABB E10B                       	smpsAlterNote       $0B
0008AABD E701                       	dc.b	smpsNoAttack, $01
0008AABF E108                       	smpsAlterNote       $08
0008AAC1 E701                       	dc.b	smpsNoAttack, $01
0008AAC3 E104                       	smpsAlterNote       $04
0008AAC5 E701                       	dc.b	smpsNoAttack, $01
0008AAC7 E108                       	smpsAlterNote       $08
0008AAC9 E701                       	dc.b	smpsNoAttack, $01
0008AACB E10E                       	smpsAlterNote       $0E
0008AACD E701                       	dc.b	smpsNoAttack, $01
0008AACF E10F                       	smpsAlterNote       $0F
0008AAD1 E701                       	dc.b	smpsNoAttack, $01
0008AAD3 E10C                       	smpsAlterNote       $0C
0008AAD5 C101                       	dc.b	nE5, $01
0008AAD7 E10D                       	smpsAlterNote       $0D
0008AAD9 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AAE1 E10F                       	smpsAlterNote       $0F
0008AAE3 C607                       	dc.b	nA5, $07
0008AAE5 E10C                       	smpsAlterNote       $0C
0008AAE7 CD07                       	dc.b	nE6, $07
0008AAE9 E10D                       	smpsAlterNote       $0D
0008AAEB CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008AAEF E10C                       	smpsAlterNote       $0C
0008AAF1 CD03                       	dc.b	nE6, $03
0008AAF3 E10A                       	smpsAlterNote       $0A
0008AAF5 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008AAF9 E10D                       	smpsAlterNote       $0D
0008AAFB C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008AB01 E10A                       	smpsAlterNote       $0A
0008AB03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB07 E110                       	smpsAlterNote       $10
0008AB09 E701                       	dc.b	smpsNoAttack, $01
0008AB0B E114                       	smpsAlterNote       $14
0008AB0D E701                       	dc.b	smpsNoAttack, $01
0008AB0F E113                       	smpsAlterNote       $13
0008AB11 E701                       	dc.b	smpsNoAttack, $01
0008AB13 E10D                       	smpsAlterNote       $0D
0008AB15 E701                       	dc.b	smpsNoAttack, $01
0008AB17 E109                       	smpsAlterNote       $09
0008AB19 E701                       	dc.b	smpsNoAttack, $01
0008AB1B E10D                       	smpsAlterNote       $0D
0008AB1D E701                       	dc.b	smpsNoAttack, $01
0008AB1F E110                       	smpsAlterNote       $10
0008AB21 E701                       	dc.b	smpsNoAttack, $01
0008AB23 E114                       	smpsAlterNote       $14
0008AB25 E701                       	dc.b	smpsNoAttack, $01
0008AB27 E10F                       	smpsAlterNote       $0F
0008AB29 C607                       	dc.b	nA5, $07
0008AB2B E10D                       	smpsAlterNote       $0D
0008AB2D C40D                       	dc.b	nG5, $0D
0008AB2F E10A                       	smpsAlterNote       $0A
0008AB31 E701                       	dc.b	smpsNoAttack, $01
0008AB33 E106                       	smpsAlterNote       $06
0008AB35 E701                       	dc.b	smpsNoAttack, $01
0008AB37 E10A                       	smpsAlterNote       $0A
0008AB39 E701                       	dc.b	smpsNoAttack, $01
0008AB3B E10D                       	smpsAlterNote       $0D
0008AB3D E701                       	dc.b	smpsNoAttack, $01
0008AB3F E111                       	smpsAlterNote       $11
0008AB41 E701                       	dc.b	smpsNoAttack, $01
0008AB43 E10D                       	smpsAlterNote       $0D
0008AB45 E701                       	dc.b	smpsNoAttack, $01
0008AB47 E107                       	smpsAlterNote       $07
0008AB49 E701                       	dc.b	smpsNoAttack, $01
0008AB4B E106                       	smpsAlterNote       $06
0008AB4D E701                       	dc.b	smpsNoAttack, $01
0008AB4F E10A                       	smpsAlterNote       $0A
0008AB51 E701                       	dc.b	smpsNoAttack, $01
0008AB53 E110                       	smpsAlterNote       $10
0008AB55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB59 E10D                       	smpsAlterNote       $0D
0008AB5B E701                       	dc.b	smpsNoAttack, $01
0008AB5D E107                       	smpsAlterNote       $07
0008AB5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB63 E10F                       	smpsAlterNote       $0F
0008AB65 C60E                       	dc.b	nA5, $0E
0008AB67 E109                       	smpsAlterNote       $09
0008AB69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB6D E10F                       	smpsAlterNote       $0F
0008AB6F E701                       	dc.b	smpsNoAttack, $01
0008AB71 E112                       	smpsAlterNote       $12
0008AB73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB77 E10C                       	smpsAlterNote       $0C
0008AB79 E701                       	dc.b	smpsNoAttack, $01
0008AB7B E108                       	smpsAlterNote       $08
0008AB7D E701                       	dc.b	smpsNoAttack, $01
0008AB7F E109                       	smpsAlterNote       $09
0008AB81 E701                       	dc.b	smpsNoAttack, $01
0008AB83 E10F                       	smpsAlterNote       $0F
0008AB85 E701                       	dc.b	smpsNoAttack, $01
0008AB87 E113                       	smpsAlterNote       $13
0008AB89 E701                       	dc.b	smpsNoAttack, $01
0008AB8B E10F                       	smpsAlterNote       $0F
0008AB8D E701                       	dc.b	smpsNoAttack, $01
0008AB8F E10C                       	smpsAlterNote       $0C
0008AB91 E701                       	dc.b	smpsNoAttack, $01
0008AB93 E108                       	smpsAlterNote       $08
0008AB95 E701                       	dc.b	smpsNoAttack, $01
0008AB97 E109                       	smpsAlterNote       $09
0008AB99 8001                       	dc.b	nRst, $01
0008AB9B E110                       	smpsAlterNote       $10
0008AB9D C70D                       	dc.b	nBb5, $0D
0008AB9F E10D                       	smpsAlterNote       $0D
0008ABA1 E701                       	dc.b	smpsNoAttack, $01
0008ABA3 E109                       	smpsAlterNote       $09
0008ABA5 E701                       	dc.b	smpsNoAttack, $01
0008ABA7 E10D                       	smpsAlterNote       $0D
0008ABA9 E701                       	dc.b	smpsNoAttack, $01
0008ABAB E113                       	smpsAlterNote       $13
0008ABAD E701                       	dc.b	smpsNoAttack, $01
0008ABAF E114                       	smpsAlterNote       $14
0008ABB1 E701                       	dc.b	smpsNoAttack, $01
0008ABB3 E110                       	smpsAlterNote       $10
0008ABB5 E701                       	dc.b	smpsNoAttack, $01
0008ABB7 E10A                       	smpsAlterNote       $0A
0008ABB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABBD E10D                       	smpsAlterNote       $0D
0008ABBF E701                       	dc.b	smpsNoAttack, $01
0008ABC1 E113                       	smpsAlterNote       $13
0008ABC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABC7 E10D                       	smpsAlterNote       $0D
0008ABC9 E701                       	dc.b	smpsNoAttack, $01
0008ABCB E10A                       	smpsAlterNote       $0A
0008ABCD E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008ABD7 E10B                       	smpsAlterNote       $0B
0008ABD9 8001                       	dc.b	nRst, $01
0008ABDB E10C                       	smpsAlterNote       $0C
0008ABDD CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008ABE1 E10B                       	smpsAlterNote       $0B
0008ABE3 CB0D                       	dc.b	nD6, $0D
0008ABE5 E105                       	smpsAlterNote       $05
0008ABE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABEB E108                       	smpsAlterNote       $08
0008ABED E701                       	dc.b	smpsNoAttack, $01
0008ABEF E10E                       	smpsAlterNote       $0E
0008ABF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABF5 E108                       	smpsAlterNote       $08
0008ABF7 E701                       	dc.b	smpsNoAttack, $01
0008ABF9 E105                       	smpsAlterNote       $05
0008ABFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABFF E10B                       	smpsAlterNote       $0B
0008AC01 E701                       	dc.b	smpsNoAttack, $01
0008AC03 E10F                       	smpsAlterNote       $0F
0008AC05 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AC09 E10C                       	smpsAlterNote       $0C
0008AC0B CC0D                       	dc.b	nEb6, $0D
0008AC0D E106                       	smpsAlterNote       $06
0008AC0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC13 E109                       	smpsAlterNote       $09
0008AC15 E701                       	dc.b	smpsNoAttack, $01
0008AC17 E10C                       	smpsAlterNote       $0C
0008AC19 8001                       	dc.b	nRst, $01
0008AC1B E10A                       	smpsAlterNote       $0A
0008AC1D C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008AC29 CB0E                       	dc.b	nD6, $0E
0008AC2B E105                       	smpsAlterNote       $05
0008AC2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC31 E10B                       	smpsAlterNote       $0B
0008AC33 E701                       	dc.b	smpsNoAttack, $01
0008AC35 E10E                       	smpsAlterNote       $0E
0008AC37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC3B E108                       	smpsAlterNote       $08
0008AC3D E701                       	dc.b	smpsNoAttack, $01
0008AC3F E104                       	smpsAlterNote       $04
0008AC41 E701                       	dc.b	smpsNoAttack, $01
0008AC43 E105                       	smpsAlterNote       $05
0008AC45 E701                       	dc.b	smpsNoAttack, $01
0008AC47 E10B                       	smpsAlterNote       $0B
0008AC49 E701                       	dc.b	smpsNoAttack, $01
0008AC4B E10F                       	smpsAlterNote       $0F
0008AC4D E701                       	dc.b	smpsNoAttack, $01
0008AC4F E10D                       	smpsAlterNote       $0D
0008AC51 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008AC55 E10C                       	smpsAlterNote       $0C
0008AC57 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008AC5B E10A                       	smpsAlterNote       $0A
0008AC5D C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008AC69 CB0D                       	dc.b	nD6, $0D
0008AC6B E108                       	smpsAlterNote       $08
0008AC6D E701                       	dc.b	smpsNoAttack, $01
0008AC6F E104                       	smpsAlterNote       $04
0008AC71 E701                       	dc.b	smpsNoAttack, $01
0008AC73 E105                       	smpsAlterNote       $05
0008AC75 E701                       	dc.b	smpsNoAttack, $01
0008AC77 E10B                       	smpsAlterNote       $0B
0008AC79 E701                       	dc.b	smpsNoAttack, $01
0008AC7B E10F                       	smpsAlterNote       $0F
0008AC7D E701                       	dc.b	smpsNoAttack, $01
0008AC7F E10B                       	smpsAlterNote       $0B
0008AC81 E701                       	dc.b	smpsNoAttack, $01
0008AC83 E108                       	smpsAlterNote       $08
0008AC85 E701                       	dc.b	smpsNoAttack, $01
0008AC87 E104                       	smpsAlterNote       $04
0008AC89 E701                       	dc.b	smpsNoAttack, $01
0008AC8B E108                       	smpsAlterNote       $08
0008AC8D E701                       	dc.b	smpsNoAttack, $01
0008AC8F E10E                       	smpsAlterNote       $0E
0008AC91 E701                       	dc.b	smpsNoAttack, $01
0008AC93 E10F                       	smpsAlterNote       $0F
0008AC95 E701                       	dc.b	smpsNoAttack, $01
0008AC97 E10C                       	smpsAlterNote       $0C
0008AC99 CC0D                       	dc.b	nEb6, $0D
0008AC9B E109                       	smpsAlterNote       $09
0008AC9D E701                       	dc.b	smpsNoAttack, $01
0008AC9F E105                       	smpsAlterNote       $05
0008ACA1 E701                       	dc.b	smpsNoAttack, $01
0008ACA3 E106                       	smpsAlterNote       $06
0008ACA5 E701                       	dc.b	smpsNoAttack, $01
0008ACA7 E10C                       	smpsAlterNote       $0C
0008ACA9 E701                       	dc.b	smpsNoAttack, $01
0008ACAB E10A                       	smpsAlterNote       $0A
0008ACAD C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008ACB9 CB0D                       	dc.b	nD6, $0D
0008ACBB E108                       	smpsAlterNote       $08
0008ACBD E701                       	dc.b	smpsNoAttack, $01
0008ACBF E104                       	smpsAlterNote       $04
0008ACC1 E701                       	dc.b	smpsNoAttack, $01
0008ACC3 E108                       	smpsAlterNote       $08
0008ACC5 E701                       	dc.b	smpsNoAttack, $01
0008ACC7 E10B                       	smpsAlterNote       $0B
0008ACC9 E701                       	dc.b	smpsNoAttack, $01
0008ACCB E10F                       	smpsAlterNote       $0F
0008ACCD E701                       	dc.b	smpsNoAttack, $01
0008ACCF E10B                       	smpsAlterNote       $0B
0008ACD1 E701                       	dc.b	smpsNoAttack, $01
0008ACD3 E105                       	smpsAlterNote       $05
0008ACD5 E701                       	dc.b	smpsNoAttack, $01
0008ACD7 E104                       	smpsAlterNote       $04
0008ACD9 E701                       	dc.b	smpsNoAttack, $01
0008ACDB E108                       	smpsAlterNote       $08
0008ACDD E701                       	dc.b	smpsNoAttack, $01
0008ACDF E10E                       	smpsAlterNote       $0E
0008ACE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACE5 E10B                       	smpsAlterNote       $0B
0008ACE7 E701                       	dc.b	smpsNoAttack, $01
0008ACE9 E105                       	smpsAlterNote       $05
0008ACEB E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008ACF3 03                         	dc.b	$03
0008ACF4 E601                       	smpsAlterVol        $01
0008ACF6 F6F1 D1                    	smpsJump            music84_Jump01
0008ACF9                            
0008ACF9                            ; FM5 Data
0008ACF9                            music84_FM5:
0008ACFB E080                       	smpsPan             panLeft, $00
0008ACFD 8003                       	dc.b	nRst, $03
0008ACFF E10D                       	smpsAlterNote       $0D
0008AD01 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008AD05 E10C                       	smpsAlterNote       $0C
0008AD07 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008AD0B E10F                       	smpsAlterNote       $0F
0008AD0D BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008AD13 E6FE                       	smpsAlterVol        $FE
0008AD15 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008AD1B E10D                       	smpsAlterNote       $0D
0008AD1D C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008AD23 E10C                       	smpsAlterNote       $0C
0008AD25 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008AD29 E10A                       	smpsAlterNote       $0A
0008AD2B BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008AD31 03                         	dc.b	$03
0008AD32                            
0008AD32                            music84_Jump00:
0008AD32 8004                       	dc.b	nRst, $04
0008AD34 E602                       	smpsAlterVol        $02
0008AD36 E10D                       	smpsAlterNote       $0D
0008AD38 B60D                       	dc.b	nF4, $0D
0008AD3A E107                       	smpsAlterNote       $07
0008AD3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD40 E10A                       	smpsAlterNote       $0A
0008AD42 E701                       	dc.b	smpsNoAttack, $01
0008AD44 E110                       	smpsAlterNote       $10
0008AD46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD4A E10A                       	smpsAlterNote       $0A
0008AD4C E701                       	dc.b	smpsNoAttack, $01
0008AD4E E107                       	smpsAlterNote       $07
0008AD50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD54 E10D                       	smpsAlterNote       $0D
0008AD56 E701                       	dc.b	smpsNoAttack, $01
0008AD58 E111                       	smpsAlterNote       $11
0008AD5A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AD5E E10D                       	smpsAlterNote       $0D
0008AD60 B80D                       	dc.b	nG4, $0D
0008AD62 E107                       	smpsAlterNote       $07
0008AD64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD68 E10A                       	smpsAlterNote       $0A
0008AD6A E701                       	dc.b	smpsNoAttack, $01
0008AD6C E110                       	smpsAlterNote       $10
0008AD6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD72 E10A                       	smpsAlterNote       $0A
0008AD74 E701                       	dc.b	smpsNoAttack, $01
0008AD76 E107                       	smpsAlterNote       $07
0008AD78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD7C E10D                       	smpsAlterNote       $0D
0008AD7E E701                       	dc.b	smpsNoAttack, $01
0008AD80 E111                       	smpsAlterNote       $11
0008AD82 E701                       	dc.b	smpsNoAttack, $01
0008AD84 E110                       	smpsAlterNote       $10
0008AD86 E701                       	dc.b	smpsNoAttack, $01
0008AD88 E10A                       	smpsAlterNote       $0A
0008AD8A E701                       	dc.b	smpsNoAttack, $01
0008AD8C E106                       	smpsAlterNote       $06
0008AD8E E701                       	dc.b	smpsNoAttack, $01
0008AD90 E10A                       	smpsAlterNote       $0A
0008AD92 E701                       	dc.b	smpsNoAttack, $01
0008AD94 E10D                       	smpsAlterNote       $0D
0008AD96 E701                       	dc.b	smpsNoAttack, $01
0008AD98 E111                       	smpsAlterNote       $11
0008AD9A E701                       	dc.b	smpsNoAttack, $01
0008AD9C E10D                       	smpsAlterNote       $0D
0008AD9E E701                       	dc.b	smpsNoAttack, $01
0008ADA0 E10F                       	smpsAlterNote       $0F
0008ADA2 BA0E                       	dc.b	nA4, $0E
0008ADA4 E109                       	smpsAlterNote       $09
0008ADA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADAA E10F                       	smpsAlterNote       $0F
0008ADAC E701                       	dc.b	smpsNoAttack, $01
0008ADAE E112                       	smpsAlterNote       $12
0008ADB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADB4 E10C                       	smpsAlterNote       $0C
0008ADB6 E701                       	dc.b	smpsNoAttack, $01
0008ADB8 E108                       	smpsAlterNote       $08
0008ADBA E701                       	dc.b	smpsNoAttack, $01
0008ADBC E109                       	smpsAlterNote       $09
0008ADBE E701                       	dc.b	smpsNoAttack, $01
0008ADC0 E10F                       	smpsAlterNote       $0F
0008ADC2 E701                       	dc.b	smpsNoAttack, $01
0008ADC4 E113                       	smpsAlterNote       $13
0008ADC6 E701                       	dc.b	smpsNoAttack, $01
0008ADC8 E10F                       	smpsAlterNote       $0F
0008ADCA E701                       	dc.b	smpsNoAttack, $01
0008ADCC E109                       	smpsAlterNote       $09
0008ADCE E701                       	dc.b	smpsNoAttack, $01
0008ADD0 E108                       	smpsAlterNote       $08
0008ADD2 E701                       	dc.b	smpsNoAttack, $01
0008ADD4 E10C                       	smpsAlterNote       $0C
0008ADD6 E701                       	dc.b	smpsNoAttack, $01
0008ADD8 E112                       	smpsAlterNote       $12
0008ADDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADDE E10F                       	smpsAlterNote       $0F
0008ADE0 E701                       	dc.b	smpsNoAttack, $01
0008ADE2 E109                       	smpsAlterNote       $09
0008ADE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADE8 E10F                       	smpsAlterNote       $0F
0008ADEA E701                       	dc.b	smpsNoAttack, $01
0008ADEC E112                       	smpsAlterNote       $12
0008ADEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADF2 E10C                       	smpsAlterNote       $0C
0008ADF4 E701                       	dc.b	smpsNoAttack, $01
0008ADF6 E108                       	smpsAlterNote       $08
0008ADF8 E701                       	dc.b	smpsNoAttack, $01
0008ADFA E109                       	smpsAlterNote       $09
0008ADFC E701                       	dc.b	smpsNoAttack, $01
0008ADFE E10F                       	smpsAlterNote       $0F
0008AE00 E701                       	dc.b	smpsNoAttack, $01
0008AE02 E113                       	smpsAlterNote       $13
0008AE04 E701                       	dc.b	smpsNoAttack, $01
0008AE06 E10F                       	smpsAlterNote       $0F
0008AE08 E701                       	dc.b	smpsNoAttack, $01
0008AE0A E10C                       	smpsAlterNote       $0C
0008AE0C E701                       	dc.b	smpsNoAttack, $01
0008AE0E E108                       	smpsAlterNote       $08
0008AE10 E701                       	dc.b	smpsNoAttack, $01
0008AE12 E109                       	smpsAlterNote       $09
0008AE14 8001                       	dc.b	nRst, $01
0008AE16 E10C                       	smpsAlterNote       $0C
0008AE18 B50A                       	dc.b	nE4, $0A
0008AE1A E10D                       	smpsAlterNote       $0D
0008AE1C B60D                       	dc.b	nF4, $0D
0008AE1E E10A                       	smpsAlterNote       $0A
0008AE20 E701                       	dc.b	smpsNoAttack, $01
0008AE22 E106                       	smpsAlterNote       $06
0008AE24 E701                       	dc.b	smpsNoAttack, $01
0008AE26 E107                       	smpsAlterNote       $07
0008AE28 E701                       	dc.b	smpsNoAttack, $01
0008AE2A E10D                       	smpsAlterNote       $0D
0008AE2C E701                       	dc.b	smpsNoAttack, $01
0008AE2E E111                       	smpsAlterNote       $11
0008AE30 E701                       	dc.b	smpsNoAttack, $01
0008AE32 E10D                       	smpsAlterNote       $0D
0008AE34 E701                       	dc.b	smpsNoAttack, $01
0008AE36 E10A                       	smpsAlterNote       $0A
0008AE38 E701                       	dc.b	smpsNoAttack, $01
0008AE3A E106                       	smpsAlterNote       $06
0008AE3C E701                       	dc.b	smpsNoAttack, $01
0008AE3E E10A                       	smpsAlterNote       $0A
0008AE40 E701                       	dc.b	smpsNoAttack, $01
0008AE42 E110                       	smpsAlterNote       $10
0008AE44 E701                       	dc.b	smpsNoAttack, $01
0008AE46 E111                       	smpsAlterNote       $11
0008AE48 E701                       	dc.b	smpsNoAttack, $01
0008AE4A E10D                       	smpsAlterNote       $0D
0008AE4C B80D                       	dc.b	nG4, $0D
0008AE4E E10A                       	smpsAlterNote       $0A
0008AE50 E701                       	dc.b	smpsNoAttack, $01
0008AE52 E106                       	smpsAlterNote       $06
0008AE54 E701                       	dc.b	smpsNoAttack, $01
0008AE56 E107                       	smpsAlterNote       $07
0008AE58 E701                       	dc.b	smpsNoAttack, $01
0008AE5A E10D                       	smpsAlterNote       $0D
0008AE5C E701                       	dc.b	smpsNoAttack, $01
0008AE5E E111                       	smpsAlterNote       $11
0008AE60 E701                       	dc.b	smpsNoAttack, $01
0008AE62 E10D                       	smpsAlterNote       $0D
0008AE64 E701                       	dc.b	smpsNoAttack, $01
0008AE66 E10A                       	smpsAlterNote       $0A
0008AE68 E701                       	dc.b	smpsNoAttack, $01
0008AE6A E106                       	smpsAlterNote       $06
0008AE6C E701                       	dc.b	smpsNoAttack, $01
0008AE6E E10A                       	smpsAlterNote       $0A
0008AE70 E701                       	dc.b	smpsNoAttack, $01
0008AE72 E110                       	smpsAlterNote       $10
0008AE74 E701                       	dc.b	smpsNoAttack, $01
0008AE76 E111                       	smpsAlterNote       $11
0008AE78 E701                       	dc.b	smpsNoAttack, $01
0008AE7A E10D                       	smpsAlterNote       $0D
0008AE7C E701                       	dc.b	smpsNoAttack, $01
0008AE7E E107                       	smpsAlterNote       $07
0008AE80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE84 E10A                       	smpsAlterNote       $0A
0008AE86 E701                       	dc.b	smpsNoAttack, $01
0008AE88 E110                       	smpsAlterNote       $10
0008AE8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE8E E10D                       	smpsAlterNote       $0D
0008AE90 8001                       	dc.b	nRst, $01
0008AE92 E10F                       	smpsAlterNote       $0F
0008AE94 BA0D                       	dc.b	nA4, $0D
0008AE96 E10C                       	smpsAlterNote       $0C
0008AE98 E701                       	dc.b	smpsNoAttack, $01
0008AE9A E108                       	smpsAlterNote       $08
0008AE9C E701                       	dc.b	smpsNoAttack, $01
0008AE9E E10C                       	smpsAlterNote       $0C
0008AEA0 E701                       	dc.b	smpsNoAttack, $01
0008AEA2 E112                       	smpsAlterNote       $12
0008AEA4 E701                       	dc.b	smpsNoAttack, $01
0008AEA6 E113                       	smpsAlterNote       $13
0008AEA8 E701                       	dc.b	smpsNoAttack, $01
0008AEAA E10F                       	smpsAlterNote       $0F
0008AEAC E701                       	dc.b	smpsNoAttack, $01
0008AEAE E109                       	smpsAlterNote       $09
0008AEB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEB4 E10C                       	smpsAlterNote       $0C
0008AEB6 E701                       	dc.b	smpsNoAttack, $01
0008AEB8 E112                       	smpsAlterNote       $12
0008AEBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEBE E10C                       	smpsAlterNote       $0C
0008AEC0 E701                       	dc.b	smpsNoAttack, $01
0008AEC2 E109                       	smpsAlterNote       $09
0008AEC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEC8 E10F                       	smpsAlterNote       $0F
0008AECA E701                       	dc.b	smpsNoAttack, $01
0008AECC E113                       	smpsAlterNote       $13
0008AECE E701                       	dc.b	smpsNoAttack, $01
0008AED0 E112                       	smpsAlterNote       $12
0008AED2 E701                       	dc.b	smpsNoAttack, $01
0008AED4 E10C                       	smpsAlterNote       $0C
0008AED6 E701                       	dc.b	smpsNoAttack, $01
0008AED8 E108                       	smpsAlterNote       $08
0008AEDA E701                       	dc.b	smpsNoAttack, $01
0008AEDC E10C                       	smpsAlterNote       $0C
0008AEDE E701                       	dc.b	smpsNoAttack, $01
0008AEE0 E10F                       	smpsAlterNote       $0F
0008AEE2 E701                       	dc.b	smpsNoAttack, $01
0008AEE4 E113                       	smpsAlterNote       $13
0008AEE6 E701                       	dc.b	smpsNoAttack, $01
0008AEE8 E10F                       	smpsAlterNote       $0F
0008AEEA E701                       	dc.b	smpsNoAttack, $01
0008AEEC E109                       	smpsAlterNote       $09
0008AEEE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AEF2 E10D                       	smpsAlterNote       $0D
0008AEF4 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008AEF8 E10C                       	smpsAlterNote       $0C
0008AEFA B506 8001                  	dc.b	nE4, $06, nRst, $01
0008AEFE E10B                       	smpsAlterNote       $0B
0008AF00 B30D                       	dc.b	nD4, $0D
0008AF02 E10C                       	smpsAlterNote       $0C
0008AF04 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008AF08 E10D                       	smpsAlterNote       $0D
0008AF0A B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008AF12 E109                       	smpsAlterNote       $09
0008AF14 E701                       	dc.b	smpsNoAttack, $01
0008AF16 E108                       	smpsAlterNote       $08
0008AF18 E701                       	dc.b	smpsNoAttack, $01
0008AF1A E10C                       	smpsAlterNote       $0C
0008AF1C E701                       	dc.b	smpsNoAttack, $01
0008AF1E E112                       	smpsAlterNote       $12
0008AF20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF24 E10F                       	smpsAlterNote       $0F
0008AF26 E701                       	dc.b	smpsNoAttack, $01
0008AF28 E109                       	smpsAlterNote       $09
0008AF2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF2E E10F                       	smpsAlterNote       $0F
0008AF30 E701                       	dc.b	smpsNoAttack, $01
0008AF32 E112                       	smpsAlterNote       $12
0008AF34 E701                       	dc.b	smpsNoAttack, $01
0008AF36 E113                       	smpsAlterNote       $13
0008AF38 8001                       	dc.b	nRst, $01
0008AF3A E10D                       	smpsAlterNote       $0D
0008AF3C C20D                       	dc.b	nF5, $0D
0008AF3E E107                       	smpsAlterNote       $07
0008AF40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF44 E10A                       	smpsAlterNote       $0A
0008AF46 E701                       	dc.b	smpsNoAttack, $01
0008AF48 E110                       	smpsAlterNote       $10
0008AF4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF4E E10A                       	smpsAlterNote       $0A
0008AF50 E701                       	dc.b	smpsNoAttack, $01
0008AF52 E107                       	smpsAlterNote       $07
0008AF54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF58 E10D                       	smpsAlterNote       $0D
0008AF5A E701                       	dc.b	smpsNoAttack, $01
0008AF5C E111                       	smpsAlterNote       $11
0008AF5E E701                       	dc.b	smpsNoAttack, $01
0008AF60 E110                       	smpsAlterNote       $10
0008AF62 E701                       	dc.b	smpsNoAttack, $01
0008AF64 E10A                       	smpsAlterNote       $0A
0008AF66 E701                       	dc.b	smpsNoAttack, $01
0008AF68 E106                       	smpsAlterNote       $06
0008AF6A E701                       	dc.b	smpsNoAttack, $01
0008AF6C E10A                       	smpsAlterNote       $0A
0008AF6E E701                       	dc.b	smpsNoAttack, $01
0008AF70 E10D                       	smpsAlterNote       $0D
0008AF72 E701                       	dc.b	smpsNoAttack, $01
0008AF74 E111                       	smpsAlterNote       $11
0008AF76 E701                       	dc.b	smpsNoAttack, $01
0008AF78 E10D                       	smpsAlterNote       $0D
0008AF7A E701                       	dc.b	smpsNoAttack, $01
0008AF7C E107                       	smpsAlterNote       $07
0008AF7E E701                       	dc.b	smpsNoAttack, $01
0008AF80 E106                       	smpsAlterNote       $06
0008AF82 E701                       	dc.b	smpsNoAttack, $01
0008AF84 E10A                       	smpsAlterNote       $0A
0008AF86 E701                       	dc.b	smpsNoAttack, $01
0008AF88 E110                       	smpsAlterNote       $10
0008AF8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF8E E10D                       	smpsAlterNote       $0D
0008AF90 E701                       	dc.b	smpsNoAttack, $01
0008AF92 E107                       	smpsAlterNote       $07
0008AF94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF98 E10D                       	smpsAlterNote       $0D
0008AF9A E701                       	dc.b	smpsNoAttack, $01
0008AF9C E110                       	smpsAlterNote       $10
0008AF9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFA2 E10A                       	smpsAlterNote       $0A
0008AFA4 E701                       	dc.b	smpsNoAttack, $01
0008AFA6 E106                       	smpsAlterNote       $06
0008AFA8 E701                       	dc.b	smpsNoAttack, $01
0008AFAA E107                       	smpsAlterNote       $07
0008AFAC E701                       	dc.b	smpsNoAttack, $01
0008AFAE E10D                       	smpsAlterNote       $0D
0008AFB0 E701                       	dc.b	smpsNoAttack, $01
0008AFB2 E111                       	smpsAlterNote       $11
0008AFB4 E701                       	dc.b	smpsNoAttack, $01
0008AFB6 E10D                       	smpsAlterNote       $0D
0008AFB8 E701                       	dc.b	smpsNoAttack, $01
0008AFBA E10A                       	smpsAlterNote       $0A
0008AFBC E701                       	dc.b	smpsNoAttack, $01
0008AFBE E106                       	smpsAlterNote       $06
0008AFC0 E701                       	dc.b	smpsNoAttack, $01
0008AFC2 E10A                       	smpsAlterNote       $0A
0008AFC4 E701                       	dc.b	smpsNoAttack, $01
0008AFC6 E110                       	smpsAlterNote       $10
0008AFC8 E701                       	dc.b	smpsNoAttack, $01
0008AFCA E111                       	smpsAlterNote       $11
0008AFCC E701                       	dc.b	smpsNoAttack, $01
0008AFCE E10D                       	smpsAlterNote       $0D
0008AFD0 E701                       	dc.b	smpsNoAttack, $01
0008AFD2 E107                       	smpsAlterNote       $07
0008AFD4 E701                       	dc.b	smpsNoAttack, $01
0008AFD6 E10D                       	smpsAlterNote       $0D
0008AFD8 C207                       	dc.b	nF5, $07
0008AFDA E10C                       	smpsAlterNote       $0C
0008AFDC C10D                       	dc.b	nE5, $0D
0008AFDE E109                       	smpsAlterNote       $09
0008AFE0 E701                       	dc.b	smpsNoAttack, $01
0008AFE2 E106                       	smpsAlterNote       $06
0008AFE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFE8 E10C                       	smpsAlterNote       $0C
0008AFEA E701                       	dc.b	smpsNoAttack, $01
0008AFEC E110                       	smpsAlterNote       $10
0008AFEE E701                       	dc.b	smpsNoAttack, $01
0008AFF0 E10F                       	smpsAlterNote       $0F
0008AFF2 E701                       	dc.b	smpsNoAttack, $01
0008AFF4 E109                       	smpsAlterNote       $09
0008AFF6 E701                       	dc.b	smpsNoAttack, $01
0008AFF8 E105                       	smpsAlterNote       $05
0008AFFA E701                       	dc.b	smpsNoAttack, $01
0008AFFC E109                       	smpsAlterNote       $09
0008AFFE E701                       	dc.b	smpsNoAttack, $01
0008B000 E10C                       	smpsAlterNote       $0C
0008B002 E701                       	dc.b	smpsNoAttack, $01
0008B004 E110                       	smpsAlterNote       $10
0008B006 E701                       	dc.b	smpsNoAttack, $01
0008B008 E10B                       	smpsAlterNote       $0B
0008B00A BF0D                       	dc.b	nD5, $0D
0008B00C E108                       	smpsAlterNote       $08
0008B00E E701                       	dc.b	smpsNoAttack, $01
0008B010 E105                       	smpsAlterNote       $05
0008B012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B016 E10B                       	smpsAlterNote       $0B
0008B018 E701                       	dc.b	smpsNoAttack, $01
0008B01A E10F                       	smpsAlterNote       $0F
0008B01C E701                       	dc.b	smpsNoAttack, $01
0008B01E E10E                       	smpsAlterNote       $0E
0008B020 E701                       	dc.b	smpsNoAttack, $01
0008B022 E108                       	smpsAlterNote       $08
0008B024 E701                       	dc.b	smpsNoAttack, $01
0008B026 E104                       	smpsAlterNote       $04
0008B028 E701                       	dc.b	smpsNoAttack, $01
0008B02A E108                       	smpsAlterNote       $08
0008B02C E701                       	dc.b	smpsNoAttack, $01
0008B02E E10E                       	smpsAlterNote       $0E
0008B030 E701                       	dc.b	smpsNoAttack, $01
0008B032 E10F                       	smpsAlterNote       $0F
0008B034 E701                       	dc.b	smpsNoAttack, $01
0008B036 E10B                       	smpsAlterNote       $0B
0008B038 E701                       	dc.b	smpsNoAttack, $01
0008B03A E105                       	smpsAlterNote       $05
0008B03C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B040 E108                       	smpsAlterNote       $08
0008B042 E701                       	dc.b	smpsNoAttack, $01
0008B044 E10E                       	smpsAlterNote       $0E
0008B046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B04A E108                       	smpsAlterNote       $08
0008B04C E701                       	dc.b	smpsNoAttack, $01
0008B04E E105                       	smpsAlterNote       $05
0008B050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B054 E10B                       	smpsAlterNote       $0B
0008B056 E701                       	dc.b	smpsNoAttack, $01
0008B058 E10F                       	smpsAlterNote       $0F
0008B05A E701                       	dc.b	smpsNoAttack, $01
0008B05C E10E                       	smpsAlterNote       $0E
0008B05E E701                       	dc.b	smpsNoAttack, $01
0008B060 E108                       	smpsAlterNote       $08
0008B062 E701                       	dc.b	smpsNoAttack, $01
0008B064 E104                       	smpsAlterNote       $04
0008B066 E701                       	dc.b	smpsNoAttack, $01
0008B068 E108                       	smpsAlterNote       $08
0008B06A E701                       	dc.b	smpsNoAttack, $01
0008B06C E10B                       	smpsAlterNote       $0B
0008B06E E701                       	dc.b	smpsNoAttack, $01
0008B070 E10F                       	smpsAlterNote       $0F
0008B072 E701                       	dc.b	smpsNoAttack, $01
0008B074 E10B                       	smpsAlterNote       $0B
0008B076 E701                       	dc.b	smpsNoAttack, $01
0008B078 E105                       	smpsAlterNote       $05
0008B07A E701                       	dc.b	smpsNoAttack, $01
0008B07C E104                       	smpsAlterNote       $04
0008B07E E701                       	dc.b	smpsNoAttack, $01
0008B080 E108                       	smpsAlterNote       $08
0008B082 E701                       	dc.b	smpsNoAttack, $01
0008B084 E10E                       	smpsAlterNote       $0E
0008B086 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B08A E10B                       	smpsAlterNote       $0B
0008B08C E701                       	dc.b	smpsNoAttack, $01
0008B08E E105                       	smpsAlterNote       $05
0008B090 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B094 E10B                       	smpsAlterNote       $0B
0008B096 E701                       	dc.b	smpsNoAttack, $01
0008B098 E10E                       	smpsAlterNote       $0E
0008B09A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B09E E108                       	smpsAlterNote       $08
0008B0A0 E701                       	dc.b	smpsNoAttack, $01
0008B0A2 E105                       	smpsAlterNote       $05
0008B0A4 8001                       	dc.b	nRst, $01
0008B0A8 E601                       	smpsAlterVol        $01
0008B0AA E10B                       	smpsAlterNote       $0B
0008B0AC BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B0B8 8004                       	dc.b	nRst, $04
0008B0BC E6FF                       	smpsAlterVol        $FF
0008B0BE E10D                       	smpsAlterNote       $0D
0008B0C0 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008B0C8 E10C                       	smpsAlterNote       $0C
0008B0CA E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008B0CF E10D                       	smpsAlterNote       $0D
0008B0D1 B60D                       	dc.b	nF4, $0D
0008B0D3 E10A                       	smpsAlterNote       $0A
0008B0D5 E701                       	dc.b	smpsNoAttack, $01
0008B0D7 E106                       	smpsAlterNote       $06
0008B0D9 E701                       	dc.b	smpsNoAttack, $01
0008B0DB E10A                       	smpsAlterNote       $0A
0008B0DD E701                       	dc.b	smpsNoAttack, $01
0008B0DF E110                       	smpsAlterNote       $10
0008B0E1 E701                       	dc.b	smpsNoAttack, $01
0008B0E3 E111                       	smpsAlterNote       $11
0008B0E5 E701                       	dc.b	smpsNoAttack, $01
0008B0E7 E10D                       	smpsAlterNote       $0D
0008B0E9 E701                       	dc.b	smpsNoAttack, $01
0008B0EB E107                       	smpsAlterNote       $07
0008B0ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0F1 E10A                       	smpsAlterNote       $0A
0008B0F3 E701                       	dc.b	smpsNoAttack, $01
0008B0F5 E110                       	smpsAlterNote       $10
0008B0F7 E701                       	dc.b	smpsNoAttack, $01
0008B0F9 E111                       	smpsAlterNote       $11
0008B0FB 8001                       	dc.b	nRst, $01
0008B0FD E10D                       	smpsAlterNote       $0D
0008B0FF B80D                       	dc.b	nG4, $0D
0008B101 E10A                       	smpsAlterNote       $0A
0008B103 E701                       	dc.b	smpsNoAttack, $01
0008B105 E106                       	smpsAlterNote       $06
0008B107 E701                       	dc.b	smpsNoAttack, $01
0008B109 E10A                       	smpsAlterNote       $0A
0008B10B E701                       	dc.b	smpsNoAttack, $01
0008B10D E110                       	smpsAlterNote       $10
0008B10F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B113 E10D                       	smpsAlterNote       $0D
0008B115 E701                       	dc.b	smpsNoAttack, $01
0008B117 E107                       	smpsAlterNote       $07
0008B119 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B11D E10D                       	smpsAlterNote       $0D
0008B11F E701                       	dc.b	smpsNoAttack, $01
0008B121 E110                       	smpsAlterNote       $10
0008B123 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B127 E10A                       	smpsAlterNote       $0A
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E106                       	smpsAlterNote       $06
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E107                       	smpsAlterNote       $07
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E10D                       	smpsAlterNote       $0D
0008B135 E701                       	dc.b	smpsNoAttack, $01
0008B137 E111                       	smpsAlterNote       $11
0008B139 E701                       	dc.b	smpsNoAttack, $01
0008B13B E10D                       	smpsAlterNote       $0D
0008B13D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B141 E10F                       	smpsAlterNote       $0F
0008B143 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008B147 E110                       	smpsAlterNote       $10
0008B149 BB03                       	dc.b	nBb4, $03
0008B14B E10F                       	smpsAlterNote       $0F
0008B14D BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008B153 E110                       	smpsAlterNote       $10
0008B155 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008B159 E10F                       	smpsAlterNote       $0F
0008B15B C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008B161 E110                       	smpsAlterNote       $10
0008B163 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008B167 E10F                       	smpsAlterNote       $0F
0008B169 D20D                       	dc.b	nA6, $0D
0008B16B E10C                       	smpsAlterNote       $0C
0008B16D E701                       	dc.b	smpsNoAttack, $01
0008B16F E108                       	smpsAlterNote       $08
0008B171 E701                       	dc.b	smpsNoAttack, $01
0008B173 E10C                       	smpsAlterNote       $0C
0008B175 E701                       	dc.b	smpsNoAttack, $01
0008B177 E10F                       	smpsAlterNote       $0F
0008B179 E701                       	dc.b	smpsNoAttack, $01
0008B17B E113                       	smpsAlterNote       $13
0008B17D E701                       	dc.b	smpsNoAttack, $01
0008B17F E10F                       	smpsAlterNote       $0F
0008B181 E701                       	dc.b	smpsNoAttack, $01
0008B183 E109                       	smpsAlterNote       $09
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E108                       	smpsAlterNote       $08
0008B189 E701                       	dc.b	smpsNoAttack, $01
0008B18B E10C                       	smpsAlterNote       $0C
0008B18D E701                       	dc.b	smpsNoAttack, $01
0008B18F E112                       	smpsAlterNote       $12
0008B191 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B195 E10F                       	smpsAlterNote       $0F
0008B197 E701                       	dc.b	smpsNoAttack, $01
0008B199 E109                       	smpsAlterNote       $09
0008B19B E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008B1A1 E10D                       	smpsAlterNote       $0D
0008B1A3 CE07                       	dc.b	nF6, $07
0008B1A5 E10C                       	smpsAlterNote       $0C
0008B1A7 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B1AB E10D                       	smpsAlterNote       $0D
0008B1AD CE03                       	dc.b	nF6, $03
0008B1AF E10C                       	smpsAlterNote       $0C
0008B1B1 CC0D                       	dc.b	nEb6, $0D
0008B1B3 E109                       	smpsAlterNote       $09
0008B1B5 E701                       	dc.b	smpsNoAttack, $01
0008B1B7 E106                       	smpsAlterNote       $06
0008B1B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1BD E10C                       	smpsAlterNote       $0C
0008B1BF E701                       	dc.b	smpsNoAttack, $01
0008B1C1 E110                       	smpsAlterNote       $10
0008B1C3 E701                       	dc.b	smpsNoAttack, $01
0008B1C5 E10F                       	smpsAlterNote       $0F
0008B1C7 E701                       	dc.b	smpsNoAttack, $01
0008B1C9 E109                       	smpsAlterNote       $09
0008B1CB E701                       	dc.b	smpsNoAttack, $01
0008B1CD E105                       	smpsAlterNote       $05
0008B1CF E701                       	dc.b	smpsNoAttack, $01
0008B1D1 E109                       	smpsAlterNote       $09
0008B1D3 E701                       	dc.b	smpsNoAttack, $01
0008B1D5 E10C                       	smpsAlterNote       $0C
0008B1D7 E701                       	dc.b	smpsNoAttack, $01
0008B1D9 E110                       	smpsAlterNote       $10
0008B1DB E701                       	dc.b	smpsNoAttack, $01
0008B1DD E10C                       	smpsAlterNote       $0C
0008B1DF E701                       	dc.b	smpsNoAttack, $01
0008B1E1 E106                       	smpsAlterNote       $06
0008B1E3 E701                       	dc.b	smpsNoAttack, $01
0008B1E5 E105                       	smpsAlterNote       $05
0008B1E7 E701                       	dc.b	smpsNoAttack, $01
0008B1E9 E109                       	smpsAlterNote       $09
0008B1EB E701                       	dc.b	smpsNoAttack, $01
0008B1ED E10F                       	smpsAlterNote       $0F
0008B1EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1F3 E10C                       	smpsAlterNote       $0C
0008B1F5 E701                       	dc.b	smpsNoAttack, $01
0008B1F7 E10B                       	smpsAlterNote       $0B
0008B1F9 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008B203 E10F                       	smpsAlterNote       $0F
0008B205 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008B20F E10D                       	smpsAlterNote       $0D
0008B211 C203                       	dc.b	nF5, $03
0008B213 E10C                       	smpsAlterNote       $0C
0008B215 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B219 E10D                       	smpsAlterNote       $0D
0008B21B C20D                       	dc.b	nF5, $0D
0008B21D E10C                       	smpsAlterNote       $0C
0008B21F C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008B223 E10B                       	smpsAlterNote       $0B
0008B225 BF0D                       	dc.b	nD5, $0D
0008B227 E108                       	smpsAlterNote       $08
0008B229 E701                       	dc.b	smpsNoAttack, $01
0008B22B E104                       	smpsAlterNote       $04
0008B22D E701                       	dc.b	smpsNoAttack, $01
0008B22F E108                       	smpsAlterNote       $08
0008B231 E701                       	dc.b	smpsNoAttack, $01
0008B233 E10E                       	smpsAlterNote       $0E
0008B235 E701                       	dc.b	smpsNoAttack, $01
0008B237 E10F                       	smpsAlterNote       $0F
0008B239 E701                       	dc.b	smpsNoAttack, $01
0008B23B E10B                       	smpsAlterNote       $0B
0008B23D E701                       	dc.b	smpsNoAttack, $01
0008B23F E105                       	smpsAlterNote       $05
0008B241 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B245 E108                       	smpsAlterNote       $08
0008B247 E701                       	dc.b	smpsNoAttack, $01
0008B249 E10E                       	smpsAlterNote       $0E
0008B24B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B24F E108                       	smpsAlterNote       $08
0008B251 E701                       	dc.b	smpsNoAttack, $01
0008B253 E105                       	smpsAlterNote       $05
0008B255 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B259 E10B                       	smpsAlterNote       $0B
0008B25B E701                       	dc.b	smpsNoAttack, $01
0008B25D E10F                       	smpsAlterNote       $0F
0008B25F E701                       	dc.b	smpsNoAttack, $01
0008B261 E10E                       	smpsAlterNote       $0E
0008B263 E701                       	dc.b	smpsNoAttack, $01
0008B265 E108                       	smpsAlterNote       $08
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E104                       	smpsAlterNote       $04
0008B26B E701                       	dc.b	smpsNoAttack, $01
0008B26D E108                       	smpsAlterNote       $08
0008B26F E701                       	dc.b	smpsNoAttack, $01
0008B271 E10B                       	smpsAlterNote       $0B
0008B273 E701                       	dc.b	smpsNoAttack, $01
0008B275 E10F                       	smpsAlterNote       $0F
0008B277 E701                       	dc.b	smpsNoAttack, $01
0008B279 E10B                       	smpsAlterNote       $0B
0008B27B E701                       	dc.b	smpsNoAttack, $01
0008B27D E105                       	smpsAlterNote       $05
0008B27F E701                       	dc.b	smpsNoAttack, $01
0008B281 E104                       	smpsAlterNote       $04
0008B283 E701                       	dc.b	smpsNoAttack, $01
0008B285 E108                       	smpsAlterNote       $08
0008B287 E701                       	dc.b	smpsNoAttack, $01
0008B289 E10E                       	smpsAlterNote       $0E
0008B28B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B28F E10B                       	smpsAlterNote       $0B
0008B291 E701                       	dc.b	smpsNoAttack, $01
0008B293 E105                       	smpsAlterNote       $05
0008B295 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B299 E10B                       	smpsAlterNote       $0B
0008B29B E701                       	dc.b	smpsNoAttack, $01
0008B29D E10E                       	smpsAlterNote       $0E
0008B29F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2A3 E108                       	smpsAlterNote       $08
0008B2A5 E701                       	dc.b	smpsNoAttack, $01
0008B2A7 E104                       	smpsAlterNote       $04
0008B2A9 E701                       	dc.b	smpsNoAttack, $01
0008B2AB E105                       	smpsAlterNote       $05
0008B2AD E701                       	dc.b	smpsNoAttack, $01
0008B2AF E10B                       	smpsAlterNote       $0B
0008B2B1 E701                       	dc.b	smpsNoAttack, $01
0008B2B3 E10F                       	smpsAlterNote       $0F
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E10B                       	smpsAlterNote       $0B
0008B2B9 E701                       	dc.b	smpsNoAttack, $01
0008B2BB E108                       	smpsAlterNote       $08
0008B2BD E701                       	dc.b	smpsNoAttack, $01
0008B2BF E104                       	smpsAlterNote       $04
0008B2C1 E701                       	dc.b	smpsNoAttack, $01
0008B2C3 E108                       	smpsAlterNote       $08
0008B2C5 E701                       	dc.b	smpsNoAttack, $01
0008B2C7 E10E                       	smpsAlterNote       $0E
0008B2C9 E701                       	dc.b	smpsNoAttack, $01
0008B2CB E10F                       	smpsAlterNote       $0F
0008B2CD E701                       	dc.b	smpsNoAttack, $01
0008B2CF E10B                       	smpsAlterNote       $0B
0008B2D1 E701                       	dc.b	smpsNoAttack, $01
0008B2D3 E105                       	smpsAlterNote       $05
0008B2D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2D9 E108                       	smpsAlterNote       $08
0008B2DB E701                       	dc.b	smpsNoAttack, $01
0008B2DD E10E                       	smpsAlterNote       $0E
0008B2DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2E3 E108                       	smpsAlterNote       $08
0008B2E5 E701                       	dc.b	smpsNoAttack, $01
0008B2E7 E105                       	smpsAlterNote       $05
0008B2E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2ED E10B                       	smpsAlterNote       $0B
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E10F                       	smpsAlterNote       $0F
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E10E                       	smpsAlterNote       $0E
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E108                       	smpsAlterNote       $08
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E104                       	smpsAlterNote       $04
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E108                       	smpsAlterNote       $08
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E10B                       	smpsAlterNote       $0B
0008B307 E701                       	dc.b	smpsNoAttack, $01
0008B309 E10F                       	smpsAlterNote       $0F
0008B30B E701                       	dc.b	smpsNoAttack, $01
0008B30D E10B                       	smpsAlterNote       $0B
0008B30F E701                       	dc.b	smpsNoAttack, $01
0008B311 E105                       	smpsAlterNote       $05
0008B313 E701                       	dc.b	smpsNoAttack, $01
0008B315 E104                       	smpsAlterNote       $04
0008B317 E701                       	dc.b	smpsNoAttack, $01
0008B319 E105                       	smpsAlterNote       $05
0008B31B 8001                       	dc.b	nRst, $01
0008B31D E10D                       	smpsAlterNote       $0D
0008B31F C20D                       	dc.b	nF5, $0D
0008B321 E107                       	smpsAlterNote       $07
0008B323 E701                       	dc.b	smpsNoAttack, $01
0008B325 E106                       	smpsAlterNote       $06
0008B327 E701                       	dc.b	smpsNoAttack, $01
0008B329 E10A                       	smpsAlterNote       $0A
0008B32B E701                       	dc.b	smpsNoAttack, $01
0008B32D E110                       	smpsAlterNote       $10
0008B32F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B333 E10D                       	smpsAlterNote       $0D
0008B335 E701                       	dc.b	smpsNoAttack, $01
0008B337 E107                       	smpsAlterNote       $07
0008B339 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B33D E10D                       	smpsAlterNote       $0D
0008B33F E701                       	dc.b	smpsNoAttack, $01
0008B341 E110                       	smpsAlterNote       $10
0008B343 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B347 E10A                       	smpsAlterNote       $0A
0008B349 E701                       	dc.b	smpsNoAttack, $01
0008B34B E106                       	smpsAlterNote       $06
0008B34D E701                       	dc.b	smpsNoAttack, $01
0008B34F E107                       	smpsAlterNote       $07
0008B351 E701                       	dc.b	smpsNoAttack, $01
0008B353 E10D                       	smpsAlterNote       $0D
0008B355 E701                       	dc.b	smpsNoAttack, $01
0008B357 E111                       	smpsAlterNote       $11
0008B359 E701                       	dc.b	smpsNoAttack, $01
0008B35B E10D                       	smpsAlterNote       $0D
0008B35D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B361 E10C                       	smpsAlterNote       $0C
0008B363 C10D                       	dc.b	nE5, $0D
0008B365 E10D                       	smpsAlterNote       $0D
0008B367 C20A                       	dc.b	nF5, $0A
0008B369 E10C                       	smpsAlterNote       $0C
0008B36B C10E                       	dc.b	nE5, $0E
0008B36D E106                       	smpsAlterNote       $06
0008B36F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B373 E10C                       	smpsAlterNote       $0C
0008B375 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B379 E10B                       	smpsAlterNote       $0B
0008B37B BF0D                       	dc.b	nD5, $0D
0008B37D E10C                       	smpsAlterNote       $0C
0008B37F C107                       	dc.b	nE5, $07
0008B381 E10D                       	smpsAlterNote       $0D
0008B383 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008B38D E110                       	smpsAlterNote       $10
0008B38F C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008B395 E10F                       	smpsAlterNote       $0F
0008B397 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008B39F E10D                       	smpsAlterNote       $0D
0008B3A1 D003                       	dc.b	nG6, $03
0008B3A5 E0C0                       	smpsPan             panCenter, $00
0008B3A7 E6FF                       	smpsAlterVol        $FF
0008B3A9 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008B3B5 8001                       	dc.b	nRst, $01
0008B3B7 E10C                       	smpsAlterNote       $0C
0008B3B9 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008B3C3 E604                       	smpsAlterVol        $04
0008B3C5 E10B                       	smpsAlterNote       $0B
0008B3C7 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008B3CB E10F                       	smpsAlterNote       $0F
0008B3CD AE03                       	dc.b	nA3, $03
0008B3CF E10D                       	smpsAlterNote       $0D
0008B3D1 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008B3D5 E10C                       	smpsAlterNote       $0C
0008B3D7 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B3DB E10B                       	smpsAlterNote       $0B
0008B3DD B302 8001                  	dc.b	nD4, $02, nRst, $01
0008B3E1 E10A                       	smpsAlterNote       $0A
0008B3E3 B103                       	dc.b	nC4, $03
0008B3E5 E110                       	smpsAlterNote       $10
0008B3E7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008B3EB E10F                       	smpsAlterNote       $0F
0008B3ED AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008B3F1 E080                       	smpsPan             panLeft, $00
0008B3F3 01                         	dc.b	$01
0008B3F6 E6FB                       	smpsAlterVol        $FB
0008B3F8 E1E4                       	smpsAlterNote       $E4
0008B3FA C501                       	dc.b	nAb5, $01
0008B3FC E1F4                       	smpsAlterNote       $F4
0008B3FE E701                       	dc.b	smpsNoAttack, $01
0008B400 E104                       	smpsAlterNote       $04
0008B402 E701                       	dc.b	smpsNoAttack, $01
0008B404 E114                       	smpsAlterNote       $14
0008B406 E701                       	dc.b	smpsNoAttack, $01
0008B408 E11C                       	smpsAlterNote       $1C
0008B40A E701                       	dc.b	smpsNoAttack, $01
0008B40C E1EF                       	smpsAlterNote       $EF
0008B40E E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008B411 E1FF                       	smpsAlterNote       $FF
0008B413 E701                       	dc.b	smpsNoAttack, $01
0008B415 E10F                       	smpsAlterNote       $0F
0008B417 C606                       	dc.b	nA5, $06
0008B419 E109                       	smpsAlterNote       $09
0008B41B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B41F E10F                       	smpsAlterNote       $0F
0008B421 E701                       	dc.b	smpsNoAttack, $01
0008B423 E112                       	smpsAlterNote       $12
0008B425 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B429 E10C                       	smpsAlterNote       $0C
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E108                       	smpsAlterNote       $08
0008B42F E701                       	dc.b	smpsNoAttack, $01
0008B431 E109                       	smpsAlterNote       $09
0008B433 E701                       	dc.b	smpsNoAttack, $01
0008B435 E10F                       	smpsAlterNote       $0F
0008B437 E701                       	dc.b	smpsNoAttack, $01
0008B439 E113                       	smpsAlterNote       $13
0008B43B E701                       	dc.b	smpsNoAttack, $01
0008B43D E10F                       	smpsAlterNote       $0F
0008B43F E701                       	dc.b	smpsNoAttack, $01
0008B441 E10C                       	smpsAlterNote       $0C
0008B443 E701                       	dc.b	smpsNoAttack, $01
0008B445 E108                       	smpsAlterNote       $08
0008B447 E701                       	dc.b	smpsNoAttack, $01
0008B449 E10C                       	smpsAlterNote       $0C
0008B44B E701                       	dc.b	smpsNoAttack, $01
0008B44D E112                       	smpsAlterNote       $12
0008B44F E701                       	dc.b	smpsNoAttack, $01
0008B451 E113                       	smpsAlterNote       $13
0008B453 E701                       	dc.b	smpsNoAttack, $01
0008B455 E10F                       	smpsAlterNote       $0F
0008B457 E701                       	dc.b	smpsNoAttack, $01
0008B459 E109                       	smpsAlterNote       $09
0008B45B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B45F E10C                       	smpsAlterNote       $0C
0008B461 E701                       	dc.b	smpsNoAttack, $01
0008B463 E112                       	smpsAlterNote       $12
0008B465 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B469 E10C                       	smpsAlterNote       $0C
0008B46B E701                       	dc.b	smpsNoAttack, $01
0008B46D E109                       	smpsAlterNote       $09
0008B46F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B473 E10F                       	smpsAlterNote       $0F
0008B475 E701                       	dc.b	smpsNoAttack, $01
0008B477 E113                       	smpsAlterNote       $13
0008B479 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B47D E10D                       	smpsAlterNote       $0D
0008B47F C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008B485 E10C                       	smpsAlterNote       $0C
0008B487 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B48B E10D                       	smpsAlterNote       $0D
0008B48D C201 8001                  	dc.b	nF5, $01, nRst, $01
0008B491 E10C                       	smpsAlterNote       $0C
0008B493 C102                       	dc.b	nE5, $02
0008B495 E10B                       	smpsAlterNote       $0B
0008B497 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008B49B E10C                       	smpsAlterNote       $0C
0008B49D C101 8001                  	dc.b	nE5, $01, nRst, $01
0008B4A1 E10B                       	smpsAlterNote       $0B
0008B4A3 BF02                       	dc.b	nD5, $02
0008B4A5 E10A                       	smpsAlterNote       $0A
0008B4A7 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008B4B1 E110                       	smpsAlterNote       $10
0008B4B3 BB02                       	dc.b	nBb4, $02
0008B4B5 E10A                       	smpsAlterNote       $0A
0008B4B7 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008B4BB E110                       	smpsAlterNote       $10
0008B4BD BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008B4C1 E10F                       	smpsAlterNote       $0F
0008B4C3 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008B4C7 E110                       	smpsAlterNote       $10
0008B4C9 BB02                       	dc.b	nBb4, $02
0008B4CB E10F                       	smpsAlterNote       $0F
0008B4CD BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008B4D7 E10C                       	smpsAlterNote       $0C
0008B4D9 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008B4E1 E10B                       	smpsAlterNote       $0B
0008B4E3 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008B4E7 E10F                       	smpsAlterNote       $0F
0008B4E9 BA02                       	dc.b	nA4, $02
0008B4ED E0C0                       	smpsPan             panCenter, $00
0008B4EF E601                       	smpsAlterVol        $01
0008B4F1 E109                       	smpsAlterNote       $09
0008B4F3 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008B4FF E108                       	smpsAlterNote       $08
0008B501 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008B507 E107                       	smpsAlterNote       $07
0008B509 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008B50F E109                       	smpsAlterNote       $09
0008B511 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008B515 E108                       	smpsAlterNote       $08
0008B517 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B51B E107                       	smpsAlterNote       $07
0008B51D B302 8001                  	dc.b	nD4, $02, nRst, $01
0008B521 E106                       	smpsAlterNote       $06
0008B523 B103                       	dc.b	nC4, $03
0008B525 E10C                       	smpsAlterNote       $0C
0008B527 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008B52D E080                       	smpsPan             panLeft, $00
0008B52F 07                         	dc.b	$07
0008B530 E6FE                       	smpsAlterVol        $FE
0008B532 E10B                       	smpsAlterNote       $0B
0008B534 B20D                       	dc.b	nCs4, $0D
0008B536 E105                       	smpsAlterNote       $05
0008B538 E701                       	dc.b	smpsNoAttack, $01
0008B53A E104                       	smpsAlterNote       $04
0008B53C E701                       	dc.b	smpsNoAttack, $01
0008B53E E108                       	smpsAlterNote       $08
0008B540 E701                       	dc.b	smpsNoAttack, $01
0008B542 E10E                       	smpsAlterNote       $0E
0008B544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B548 E10B                       	smpsAlterNote       $0B
0008B54A E701                       	dc.b	smpsNoAttack, $01
0008B54C E105                       	smpsAlterNote       $05
0008B54E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B552 E10B                       	smpsAlterNote       $0B
0008B554 E701                       	dc.b	smpsNoAttack, $01
0008B556 E10E                       	smpsAlterNote       $0E
0008B558 E701                       	dc.b	smpsNoAttack, $01
0008B55A E10F                       	smpsAlterNote       $0F
0008B55C 8001                       	dc.b	nRst, $01
0008B55E E10B                       	smpsAlterNote       $0B
0008B560 B30D                       	dc.b	nD4, $0D
0008B562 E105                       	smpsAlterNote       $05
0008B564 E701                       	dc.b	smpsNoAttack, $01
0008B566 E104                       	smpsAlterNote       $04
0008B568 E701                       	dc.b	smpsNoAttack, $01
0008B56A E108                       	smpsAlterNote       $08
0008B56C E701                       	dc.b	smpsNoAttack, $01
0008B56E E10E                       	smpsAlterNote       $0E
0008B570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B574 E10B                       	smpsAlterNote       $0B
0008B576 E701                       	dc.b	smpsNoAttack, $01
0008B578 E105                       	smpsAlterNote       $05
0008B57A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B57E E10B                       	smpsAlterNote       $0B
0008B580 E701                       	dc.b	smpsNoAttack, $01
0008B582 E10E                       	smpsAlterNote       $0E
0008B584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B588 E108                       	smpsAlterNote       $08
0008B58A E701                       	dc.b	smpsNoAttack, $01
0008B58C E104                       	smpsAlterNote       $04
0008B58E E701                       	dc.b	smpsNoAttack, $01
0008B590 E105                       	smpsAlterNote       $05
0008B592 E701                       	dc.b	smpsNoAttack, $01
0008B594 E10B                       	smpsAlterNote       $0B
0008B596 E701                       	dc.b	smpsNoAttack, $01
0008B598 E10F                       	smpsAlterNote       $0F
0008B59A E701                       	dc.b	smpsNoAttack, $01
0008B59C E10B                       	smpsAlterNote       $0B
0008B59E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B5A2 E10C                       	smpsAlterNote       $0C
0008B5A4 B50D                       	dc.b	nE4, $0D
0008B5A6 E106                       	smpsAlterNote       $06
0008B5A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5AC E10C                       	smpsAlterNote       $0C
0008B5AE E701                       	dc.b	smpsNoAttack, $01
0008B5B0 E10F                       	smpsAlterNote       $0F
0008B5B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5B6 E109                       	smpsAlterNote       $09
0008B5B8 E701                       	dc.b	smpsNoAttack, $01
0008B5BA E105                       	smpsAlterNote       $05
0008B5BC E701                       	dc.b	smpsNoAttack, $01
0008B5BE E106                       	smpsAlterNote       $06
0008B5C0 E701                       	dc.b	smpsNoAttack, $01
0008B5C2 E10C                       	smpsAlterNote       $0C
0008B5C4 E701                       	dc.b	smpsNoAttack, $01
0008B5C6 E110                       	smpsAlterNote       $10
0008B5C8 E701                       	dc.b	smpsNoAttack, $01
0008B5CA E10B                       	smpsAlterNote       $0B
0008B5CC B30E                       	dc.b	nD4, $0E
0008B5CE E105                       	smpsAlterNote       $05
0008B5D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5D4 E10B                       	smpsAlterNote       $0B
0008B5D6 E701                       	dc.b	smpsNoAttack, $01
0008B5D8 E10E                       	smpsAlterNote       $0E
0008B5DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5DE E108                       	smpsAlterNote       $08
0008B5E0 E701                       	dc.b	smpsNoAttack, $01
0008B5E2 E104                       	smpsAlterNote       $04
0008B5E4 E701                       	dc.b	smpsNoAttack, $01
0008B5E6 E105                       	smpsAlterNote       $05
0008B5E8 E701                       	dc.b	smpsNoAttack, $01
0008B5EA E10B                       	smpsAlterNote       $0B
0008B5EC E701                       	dc.b	smpsNoAttack, $01
0008B5EE E10F                       	smpsAlterNote       $0F
0008B5F0 E701                       	dc.b	smpsNoAttack, $01
0008B5F2 E10B                       	smpsAlterNote       $0B
0008B5F4 E701                       	dc.b	smpsNoAttack, $01
0008B5F6 E108                       	smpsAlterNote       $08
0008B5F8 E701                       	dc.b	smpsNoAttack, $01
0008B5FA E104                       	smpsAlterNote       $04
0008B5FC E701                       	dc.b	smpsNoAttack, $01
0008B5FE E108                       	smpsAlterNote       $08
0008B600 E701                       	dc.b	smpsNoAttack, $01
0008B602 E10E                       	smpsAlterNote       $0E
0008B604 E701                       	dc.b	smpsNoAttack, $01
0008B606 E10F                       	smpsAlterNote       $0F
0008B608 E701                       	dc.b	smpsNoAttack, $01
0008B60A E10B                       	smpsAlterNote       $0B
0008B60C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008B610 E108                       	smpsAlterNote       $08
0008B612 E701                       	dc.b	smpsNoAttack, $01
0008B614 E105                       	smpsAlterNote       $05
0008B616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B61A E10B                       	smpsAlterNote       $0B
0008B61C E701                       	dc.b	smpsNoAttack, $01
0008B61E E10F                       	smpsAlterNote       $0F
0008B620 E701                       	dc.b	smpsNoAttack, $01
0008B622 E10E                       	smpsAlterNote       $0E
0008B624 E701                       	dc.b	smpsNoAttack, $01
0008B626 E108                       	smpsAlterNote       $08
0008B628 E701                       	dc.b	smpsNoAttack, $01
0008B62A E104                       	smpsAlterNote       $04
0008B62C E701                       	dc.b	smpsNoAttack, $01
0008B62E E108                       	smpsAlterNote       $08
0008B630 E701                       	dc.b	smpsNoAttack, $01
0008B632 E10B                       	smpsAlterNote       $0B
0008B634 E701                       	dc.b	smpsNoAttack, $01
0008B636 E10F                       	smpsAlterNote       $0F
0008B638 E701                       	dc.b	smpsNoAttack, $01
0008B63A E10B                       	smpsAlterNote       $0B
0008B63C B30D                       	dc.b	nD4, $0D
0008B63E E108                       	smpsAlterNote       $08
0008B640 E701                       	dc.b	smpsNoAttack, $01
0008B642 E105                       	smpsAlterNote       $05
0008B644 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B648 E10B                       	smpsAlterNote       $0B
0008B64A E701                       	dc.b	smpsNoAttack, $01
0008B64C E10F                       	smpsAlterNote       $0F
0008B64E E701                       	dc.b	smpsNoAttack, $01
0008B650 E10E                       	smpsAlterNote       $0E
0008B652 E701                       	dc.b	smpsNoAttack, $01
0008B654 E108                       	smpsAlterNote       $08
0008B656 E701                       	dc.b	smpsNoAttack, $01
0008B658 E104                       	smpsAlterNote       $04
0008B65A E701                       	dc.b	smpsNoAttack, $01
0008B65C E108                       	smpsAlterNote       $08
0008B65E E701                       	dc.b	smpsNoAttack, $01
0008B660 E10B                       	smpsAlterNote       $0B
0008B662 E701                       	dc.b	smpsNoAttack, $01
0008B664 E10F                       	smpsAlterNote       $0F
0008B666 E701                       	dc.b	smpsNoAttack, $01
0008B668 E10B                       	smpsAlterNote       $0B
0008B66A E701                       	dc.b	smpsNoAttack, $01
0008B66C E105                       	smpsAlterNote       $05
0008B66E E701                       	dc.b	smpsNoAttack, $01
0008B670 E104                       	smpsAlterNote       $04
0008B672 E701                       	dc.b	smpsNoAttack, $01
0008B674 E108                       	smpsAlterNote       $08
0008B676 E701                       	dc.b	smpsNoAttack, $01
0008B678 E10E                       	smpsAlterNote       $0E
0008B67A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B67E E10B                       	smpsAlterNote       $0B
0008B680 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008B684 E108                       	smpsAlterNote       $08
0008B686 E701                       	dc.b	smpsNoAttack, $01
0008B688 E104                       	smpsAlterNote       $04
0008B68A E701                       	dc.b	smpsNoAttack, $01
0008B68C E108                       	smpsAlterNote       $08
0008B68E E701                       	dc.b	smpsNoAttack, $01
0008B690 E10B                       	smpsAlterNote       $0B
0008B692 E701                       	dc.b	smpsNoAttack, $01
0008B696 E0C0                       	smpsPan             panCenter, $00
0008B698 E601                       	smpsAlterVol        $01
0008B69A E108                       	smpsAlterNote       $08
0008B69C A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008B6A8 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008B6B0 E080                       	smpsPan             panLeft, $00
0008B6B2 07                         	dc.b	$07
0008B6B3 E6FF                       	smpsAlterVol        $FF
0008B6B5 E10D                       	smpsAlterNote       $0D
0008B6B7 B60D                       	dc.b	nF4, $0D
0008B6B9 E10A                       	smpsAlterNote       $0A
0008B6BB E701                       	dc.b	smpsNoAttack, $01
0008B6BD E106                       	smpsAlterNote       $06
0008B6BF E701                       	dc.b	smpsNoAttack, $01
0008B6C1 E10A                       	smpsAlterNote       $0A
0008B6C3 E701                       	dc.b	smpsNoAttack, $01
0008B6C5 E110                       	smpsAlterNote       $10
0008B6C7 E701                       	dc.b	smpsNoAttack, $01
0008B6C9 E111                       	smpsAlterNote       $11
0008B6CB E701                       	dc.b	smpsNoAttack, $01
0008B6CD E10D                       	smpsAlterNote       $0D
0008B6CF E701                       	dc.b	smpsNoAttack, $01
0008B6D1 E107                       	smpsAlterNote       $07
0008B6D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6D7 E10A                       	smpsAlterNote       $0A
0008B6D9 E701                       	dc.b	smpsNoAttack, $01
0008B6DB E110                       	smpsAlterNote       $10
0008B6DD E701                       	dc.b	smpsNoAttack, $01
0008B6DF E111                       	smpsAlterNote       $11
0008B6E1 8001                       	dc.b	nRst, $01
0008B6E3 E10D                       	smpsAlterNote       $0D
0008B6E5 B80D                       	dc.b	nG4, $0D
0008B6E7 E10A                       	smpsAlterNote       $0A
0008B6E9 E701                       	dc.b	smpsNoAttack, $01
0008B6EB E106                       	smpsAlterNote       $06
0008B6ED E701                       	dc.b	smpsNoAttack, $01
0008B6EF E10A                       	smpsAlterNote       $0A
0008B6F1 E701                       	dc.b	smpsNoAttack, $01
0008B6F3 E110                       	smpsAlterNote       $10
0008B6F5 E701                       	dc.b	smpsNoAttack, $01
0008B6F7 E111                       	smpsAlterNote       $11
0008B6F9 E701                       	dc.b	smpsNoAttack, $01
0008B6FB E10D                       	smpsAlterNote       $0D
0008B6FD E701                       	dc.b	smpsNoAttack, $01
0008B6FF E107                       	smpsAlterNote       $07
0008B701 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B705 E10D                       	smpsAlterNote       $0D
0008B707 E701                       	dc.b	smpsNoAttack, $01
0008B709 E110                       	smpsAlterNote       $10
0008B70B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B70F E10A                       	smpsAlterNote       $0A
0008B711 E701                       	dc.b	smpsNoAttack, $01
0008B713 E106                       	smpsAlterNote       $06
0008B715 E701                       	dc.b	smpsNoAttack, $01
0008B717 E107                       	smpsAlterNote       $07
0008B719 E701                       	dc.b	smpsNoAttack, $01
0008B71B E10D                       	smpsAlterNote       $0D
0008B71D E701                       	dc.b	smpsNoAttack, $01
0008B71F E111                       	smpsAlterNote       $11
0008B721 E701                       	dc.b	smpsNoAttack, $01
0008B723 E10D                       	smpsAlterNote       $0D
0008B725 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B729 E10F                       	smpsAlterNote       $0F
0008B72B BA0D                       	dc.b	nA4, $0D
0008B72D E109                       	smpsAlterNote       $09
0008B72F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B733 E10C                       	smpsAlterNote       $0C
0008B735 E701                       	dc.b	smpsNoAttack, $01
0008B737 E112                       	smpsAlterNote       $12
0008B739 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B73D E10C                       	smpsAlterNote       $0C
0008B73F E701                       	dc.b	smpsNoAttack, $01
0008B741 E109                       	smpsAlterNote       $09
0008B743 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B747 E10F                       	smpsAlterNote       $0F
0008B749 E701                       	dc.b	smpsNoAttack, $01
0008B74B E113                       	smpsAlterNote       $13
0008B74D E701                       	dc.b	smpsNoAttack, $01
0008B74F E112                       	smpsAlterNote       $12
0008B751 E701                       	dc.b	smpsNoAttack, $01
0008B753 E10C                       	smpsAlterNote       $0C
0008B755 E701                       	dc.b	smpsNoAttack, $01
0008B757 E108                       	smpsAlterNote       $08
0008B759 E701                       	dc.b	smpsNoAttack, $01
0008B75B E10C                       	smpsAlterNote       $0C
0008B75D E701                       	dc.b	smpsNoAttack, $01
0008B75F E10F                       	smpsAlterNote       $0F
0008B761 E701                       	dc.b	smpsNoAttack, $01
0008B763 E113                       	smpsAlterNote       $13
0008B765 E701                       	dc.b	smpsNoAttack, $01
0008B767 E10F                       	smpsAlterNote       $0F
0008B769 E701                       	dc.b	smpsNoAttack, $01
0008B76B E109                       	smpsAlterNote       $09
0008B76D E701                       	dc.b	smpsNoAttack, $01
0008B76F E108                       	smpsAlterNote       $08
0008B771 E701                       	dc.b	smpsNoAttack, $01
0008B773 E10C                       	smpsAlterNote       $0C
0008B775 E701                       	dc.b	smpsNoAttack, $01
0008B777 E112                       	smpsAlterNote       $12
0008B779 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B77D E10F                       	smpsAlterNote       $0F
0008B77F E701                       	dc.b	smpsNoAttack, $01
0008B781 E109                       	smpsAlterNote       $09
0008B783 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B787 E10F                       	smpsAlterNote       $0F
0008B789 E701                       	dc.b	smpsNoAttack, $01
0008B78B E112                       	smpsAlterNote       $12
0008B78D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B791 E10C                       	smpsAlterNote       $0C
0008B793 E701                       	dc.b	smpsNoAttack, $01
0008B795 E108                       	smpsAlterNote       $08
0008B797 E701                       	dc.b	smpsNoAttack, $01
0008B799 E109                       	smpsAlterNote       $09
0008B79B E701                       	dc.b	smpsNoAttack, $01
0008B79D E10C                       	smpsAlterNote       $0C
0008B79F B50A                       	dc.b	nE4, $0A
0008B7A1 E10D                       	smpsAlterNote       $0D
0008B7A3 B60E                       	dc.b	nF4, $0E
0008B7A5 E107                       	smpsAlterNote       $07
0008B7A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7AB E10D                       	smpsAlterNote       $0D
0008B7AD E701                       	dc.b	smpsNoAttack, $01
0008B7AF E110                       	smpsAlterNote       $10
0008B7B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7B5 E10A                       	smpsAlterNote       $0A
0008B7B7 E701                       	dc.b	smpsNoAttack, $01
0008B7B9 E106                       	smpsAlterNote       $06
0008B7BB E701                       	dc.b	smpsNoAttack, $01
0008B7BD E107                       	smpsAlterNote       $07
0008B7BF E701                       	dc.b	smpsNoAttack, $01
0008B7C1 E10D                       	smpsAlterNote       $0D
0008B7C3 E701                       	dc.b	smpsNoAttack, $01
0008B7C5 E111                       	smpsAlterNote       $11
0008B7C7 E701                       	dc.b	smpsNoAttack, $01
0008B7C9 E10D                       	smpsAlterNote       $0D
0008B7CB B80D                       	dc.b	nG4, $0D
0008B7CD E10A                       	smpsAlterNote       $0A
0008B7CF E701                       	dc.b	smpsNoAttack, $01
0008B7D1 E107                       	smpsAlterNote       $07
0008B7D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7D7 E10D                       	smpsAlterNote       $0D
0008B7D9 E701                       	dc.b	smpsNoAttack, $01
0008B7DB E111                       	smpsAlterNote       $11
0008B7DD E701                       	dc.b	smpsNoAttack, $01
0008B7DF E110                       	smpsAlterNote       $10
0008B7E1 E701                       	dc.b	smpsNoAttack, $01
0008B7E3 E10A                       	smpsAlterNote       $0A
0008B7E5 E701                       	dc.b	smpsNoAttack, $01
0008B7E7 E106                       	smpsAlterNote       $06
0008B7E9 E701                       	dc.b	smpsNoAttack, $01
0008B7EB E10A                       	smpsAlterNote       $0A
0008B7ED E701                       	dc.b	smpsNoAttack, $01
0008B7EF E10D                       	smpsAlterNote       $0D
0008B7F1 E701                       	dc.b	smpsNoAttack, $01
0008B7F3 E111                       	smpsAlterNote       $11
0008B7F5 E701                       	dc.b	smpsNoAttack, $01
0008B7F7 E10D                       	smpsAlterNote       $0D
0008B7F9 E701                       	dc.b	smpsNoAttack, $01
0008B7FB E107                       	smpsAlterNote       $07
0008B7FD E701                       	dc.b	smpsNoAttack, $01
0008B7FF E106                       	smpsAlterNote       $06
0008B801 E701                       	dc.b	smpsNoAttack, $01
0008B803 E10A                       	smpsAlterNote       $0A
0008B805 E701                       	dc.b	smpsNoAttack, $01
0008B807 E110                       	smpsAlterNote       $10
0008B809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B80D E10D                       	smpsAlterNote       $0D
0008B80F E701                       	dc.b	smpsNoAttack, $01
0008B811 E10F                       	smpsAlterNote       $0F
0008B813 BA0D                       	dc.b	nA4, $0D
0008B815 E10C                       	smpsAlterNote       $0C
0008B817 E701                       	dc.b	smpsNoAttack, $01
0008B819 E108                       	smpsAlterNote       $08
0008B81B E701                       	dc.b	smpsNoAttack, $01
0008B81D E109                       	smpsAlterNote       $09
0008B81F E701                       	dc.b	smpsNoAttack, $01
0008B821 E10F                       	smpsAlterNote       $0F
0008B823 E701                       	dc.b	smpsNoAttack, $01
0008B825 E113                       	smpsAlterNote       $13
0008B827 E701                       	dc.b	smpsNoAttack, $01
0008B829 E10F                       	smpsAlterNote       $0F
0008B82B E701                       	dc.b	smpsNoAttack, $01
0008B82D E10C                       	smpsAlterNote       $0C
0008B82F E701                       	dc.b	smpsNoAttack, $01
0008B831 E108                       	smpsAlterNote       $08
0008B833 E701                       	dc.b	smpsNoAttack, $01
0008B835 E10C                       	smpsAlterNote       $0C
0008B837 E701                       	dc.b	smpsNoAttack, $01
0008B839 E112                       	smpsAlterNote       $12
0008B83B E701                       	dc.b	smpsNoAttack, $01
0008B83D E113                       	smpsAlterNote       $13
0008B83F E701                       	dc.b	smpsNoAttack, $01
0008B841 E10F                       	smpsAlterNote       $0F
0008B843 E701                       	dc.b	smpsNoAttack, $01
0008B845 E109                       	smpsAlterNote       $09
0008B847 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B84B E10C                       	smpsAlterNote       $0C
0008B84D E701                       	dc.b	smpsNoAttack, $01
0008B84F E112                       	smpsAlterNote       $12
0008B851 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B855 E10C                       	smpsAlterNote       $0C
0008B857 E701                       	dc.b	smpsNoAttack, $01
0008B859 E109                       	smpsAlterNote       $09
0008B85B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B85F E10F                       	smpsAlterNote       $0F
0008B861 E701                       	dc.b	smpsNoAttack, $01
0008B863 E113                       	smpsAlterNote       $13
0008B865 E701                       	dc.b	smpsNoAttack, $01
0008B867 E112                       	smpsAlterNote       $12
0008B869 E701                       	dc.b	smpsNoAttack, $01
0008B86B E10C                       	smpsAlterNote       $0C
0008B86D E701                       	dc.b	smpsNoAttack, $01
0008B86F E109                       	smpsAlterNote       $09
0008B871 8001                       	dc.b	nRst, $01
0008B873 E10D                       	smpsAlterNote       $0D
0008B875 B60A                       	dc.b	nF4, $0A
0008B877 E10C                       	smpsAlterNote       $0C
0008B879 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B87D E10B                       	smpsAlterNote       $0B
0008B87F B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008B883 E10C                       	smpsAlterNote       $0C
0008B885 B503                       	dc.b	nE4, $03
0008B887 E10D                       	smpsAlterNote       $0D
0008B889 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008B893 E10C                       	smpsAlterNote       $0C
0008B895 E701                       	dc.b	smpsNoAttack, $01
0008B897 E108                       	smpsAlterNote       $08
0008B899 E701                       	dc.b	smpsNoAttack, $01
0008B89B E10C                       	smpsAlterNote       $0C
0008B89D E701                       	dc.b	smpsNoAttack, $01
0008B89F E112                       	smpsAlterNote       $12
0008B8A1 E701                       	dc.b	smpsNoAttack, $01
0008B8A3 E113                       	smpsAlterNote       $13
0008B8A5 E701                       	dc.b	smpsNoAttack, $01
0008B8A7 E10F                       	smpsAlterNote       $0F
0008B8A9 E701                       	dc.b	smpsNoAttack, $01
0008B8AB E109                       	smpsAlterNote       $09
0008B8AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8B1 E10C                       	smpsAlterNote       $0C
0008B8B3 E701                       	dc.b	smpsNoAttack, $01
0008B8B5 E112                       	smpsAlterNote       $12
0008B8B7 E701                       	dc.b	smpsNoAttack, $01
0008B8B9 E113                       	smpsAlterNote       $13
0008B8BB 8001                       	dc.b	nRst, $01
0008B8BD E10D                       	smpsAlterNote       $0D
0008B8BF C20D                       	dc.b	nF5, $0D
0008B8C1 E10A                       	smpsAlterNote       $0A
0008B8C3 E701                       	dc.b	smpsNoAttack, $01
0008B8C5 E106                       	smpsAlterNote       $06
0008B8C7 E701                       	dc.b	smpsNoAttack, $01
0008B8C9 E10A                       	smpsAlterNote       $0A
0008B8CB E701                       	dc.b	smpsNoAttack, $01
0008B8CD E110                       	smpsAlterNote       $10
0008B8CF E701                       	dc.b	smpsNoAttack, $01
0008B8D1 E111                       	smpsAlterNote       $11
0008B8D3 E701                       	dc.b	smpsNoAttack, $01
0008B8D5 E10D                       	smpsAlterNote       $0D
0008B8D7 E701                       	dc.b	smpsNoAttack, $01
0008B8D9 E107                       	smpsAlterNote       $07
0008B8DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8DF E10A                       	smpsAlterNote       $0A
0008B8E1 E701                       	dc.b	smpsNoAttack, $01
0008B8E3 E110                       	smpsAlterNote       $10
0008B8E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8E9 E10A                       	smpsAlterNote       $0A
0008B8EB E701                       	dc.b	smpsNoAttack, $01
0008B8ED E107                       	smpsAlterNote       $07
0008B8EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8F3 E10D                       	smpsAlterNote       $0D
0008B8F5 E701                       	dc.b	smpsNoAttack, $01
0008B8F7 E111                       	smpsAlterNote       $11
0008B8F9 E701                       	dc.b	smpsNoAttack, $01
0008B8FB E110                       	smpsAlterNote       $10
0008B8FD E701                       	dc.b	smpsNoAttack, $01
0008B8FF E10A                       	smpsAlterNote       $0A
0008B901 E701                       	dc.b	smpsNoAttack, $01
0008B903 E106                       	smpsAlterNote       $06
0008B905 E701                       	dc.b	smpsNoAttack, $01
0008B907 E10A                       	smpsAlterNote       $0A
0008B909 E701                       	dc.b	smpsNoAttack, $01
0008B90B E10D                       	smpsAlterNote       $0D
0008B90D E701                       	dc.b	smpsNoAttack, $01
0008B90F E111                       	smpsAlterNote       $11
0008B911 E701                       	dc.b	smpsNoAttack, $01
0008B913 E10D                       	smpsAlterNote       $0D
0008B915 E701                       	dc.b	smpsNoAttack, $01
0008B917 E107                       	smpsAlterNote       $07
0008B919 E701                       	dc.b	smpsNoAttack, $01
0008B91B E106                       	smpsAlterNote       $06
0008B91D E701                       	dc.b	smpsNoAttack, $01
0008B91F E10A                       	smpsAlterNote       $0A
0008B921 E701                       	dc.b	smpsNoAttack, $01
0008B923 E110                       	smpsAlterNote       $10
0008B925 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B929 E10D                       	smpsAlterNote       $0D
0008B92B E701                       	dc.b	smpsNoAttack, $01
0008B92D E107                       	smpsAlterNote       $07
0008B92F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B933 E10D                       	smpsAlterNote       $0D
0008B935 E701                       	dc.b	smpsNoAttack, $01
0008B937 E110                       	smpsAlterNote       $10
0008B939 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B93D E10A                       	smpsAlterNote       $0A
0008B93F E701                       	dc.b	smpsNoAttack, $01
0008B941 E106                       	smpsAlterNote       $06
0008B943 E701                       	dc.b	smpsNoAttack, $01
0008B945 E107                       	smpsAlterNote       $07
0008B947 E701                       	dc.b	smpsNoAttack, $01
0008B949 E10D                       	smpsAlterNote       $0D
0008B94B E701                       	dc.b	smpsNoAttack, $01
0008B94D E111                       	smpsAlterNote       $11
0008B94F E701                       	dc.b	smpsNoAttack, $01
0008B951 E10D                       	smpsAlterNote       $0D
0008B953 E701                       	dc.b	smpsNoAttack, $01
0008B955 E10A                       	smpsAlterNote       $0A
0008B957 E701                       	dc.b	smpsNoAttack, $01
0008B959 E107                       	smpsAlterNote       $07
0008B95B 8001                       	dc.b	nRst, $01
0008B95D E10D                       	smpsAlterNote       $0D
0008B95F C206 8001                  	dc.b	nF5, $06, nRst, $01
0008B965 E601                       	smpsAlterVol        $01
0008B967 E110                       	smpsAlterNote       $10
0008B969 BB0D                       	dc.b	nBb4, $0D
0008B96B E10A                       	smpsAlterNote       $0A
0008B96D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B971 E110                       	smpsAlterNote       $10
0008B973 E701                       	dc.b	smpsNoAttack, $01
0008B975 E113                       	smpsAlterNote       $13
0008B977 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B97B E10D                       	smpsAlterNote       $0D
0008B97D E701                       	dc.b	smpsNoAttack, $01
0008B97F E109                       	smpsAlterNote       $09
0008B981 E701                       	dc.b	smpsNoAttack, $01
0008B983 E10A                       	smpsAlterNote       $0A
0008B985 E701                       	dc.b	smpsNoAttack, $01
0008B987 E110                       	smpsAlterNote       $10
0008B989 E701                       	dc.b	smpsNoAttack, $01
0008B98B E114                       	smpsAlterNote       $14
0008B98D E701                       	dc.b	smpsNoAttack, $01
0008B98F E110                       	smpsAlterNote       $10
0008B991 E701                       	dc.b	smpsNoAttack, $01
0008B993 E10D                       	smpsAlterNote       $0D
0008B995 E701                       	dc.b	smpsNoAttack, $01
0008B997 E109                       	smpsAlterNote       $09
0008B999 E701                       	dc.b	smpsNoAttack, $01
0008B99B E10A                       	smpsAlterNote       $0A
0008B99D 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008B9A1 E107                       	smpsAlterNote       $07
0008B9A3 E701                       	dc.b	smpsNoAttack, $01
0008B9A5 E103                       	smpsAlterNote       $03
0008B9A7 E701                       	dc.b	smpsNoAttack, $01
0008B9A9 E107                       	smpsAlterNote       $07
0008B9AB E701                       	dc.b	smpsNoAttack, $01
0008B9AD E10D                       	smpsAlterNote       $0D
0008B9AF E701                       	dc.b	smpsNoAttack, $01
0008B9B1 E10E                       	smpsAlterNote       $0E
0008B9B3 E701                       	dc.b	smpsNoAttack, $01
0008B9B5 E10A                       	smpsAlterNote       $0A
0008B9B7 E701                       	dc.b	smpsNoAttack, $01
0008B9B9 E104                       	smpsAlterNote       $04
0008B9BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9BF E107                       	smpsAlterNote       $07
0008B9C1 E701                       	dc.b	smpsNoAttack, $01
0008B9C3 E10D                       	smpsAlterNote       $0D
0008B9C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9C9 E107                       	smpsAlterNote       $07
0008B9CB E701                       	dc.b	smpsNoAttack, $01
0008B9CD E104                       	smpsAlterNote       $04
0008B9CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9D3 E10B                       	smpsAlterNote       $0B
0008B9D5 BF0D                       	dc.b	nD5, $0D
0008B9D7 E108                       	smpsAlterNote       $08
0008B9D9 E701                       	dc.b	smpsNoAttack, $01
0008B9DB E105                       	smpsAlterNote       $05
0008B9DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9E1 E10B                       	smpsAlterNote       $0B
0008B9E3 E701                       	dc.b	smpsNoAttack, $01
0008B9E5 E10F                       	smpsAlterNote       $0F
0008B9E7 E701                       	dc.b	smpsNoAttack, $01
0008B9E9 E10E                       	smpsAlterNote       $0E
0008B9EB E701                       	dc.b	smpsNoAttack, $01
0008B9ED E108                       	smpsAlterNote       $08
0008B9EF E701                       	dc.b	smpsNoAttack, $01
0008B9F1 E104                       	smpsAlterNote       $04
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E108                       	smpsAlterNote       $08
0008B9F7 E701                       	dc.b	smpsNoAttack, $01
0008B9F9 E10B                       	smpsAlterNote       $0B
0008B9FB E701                       	dc.b	smpsNoAttack, $01
0008B9FD E10F                       	smpsAlterNote       $0F
0008B9FF E701                       	dc.b	smpsNoAttack, $01
0008BA01 E10B                       	smpsAlterNote       $0B
0008BA03 E701                       	dc.b	smpsNoAttack, $01
0008BA05 E105                       	smpsAlterNote       $05
0008BA07 E701                       	dc.b	smpsNoAttack, $01
0008BA09 E104                       	smpsAlterNote       $04
0008BA0B E701                       	dc.b	smpsNoAttack, $01
0008BA0D E105                       	smpsAlterNote       $05
0008BA0F 8001                       	dc.b	nRst, $01
0008BA11 E10C                       	smpsAlterNote       $0C
0008BA13 C10C                       	dc.b	nE5, $0C
0008BA15 E10D                       	smpsAlterNote       $0D
0008BA17 C201                       	dc.b	nF5, $01
0008BA19 E10E                       	smpsAlterNote       $0E
0008BA1B C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008BA1F E10D                       	smpsAlterNote       $0D
0008BA21 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008BA25 E10A                       	smpsAlterNote       $0A
0008BA27 E701                       	dc.b	smpsNoAttack, $01
0008BA29 E106                       	smpsAlterNote       $06
0008BA2B E701                       	dc.b	smpsNoAttack, $01
0008BA2D E10A                       	smpsAlterNote       $0A
0008BA2F E701                       	dc.b	smpsNoAttack, $01
0008BA31 E10D                       	smpsAlterNote       $0D
0008BA33 E701                       	dc.b	smpsNoAttack, $01
0008BA35 E111                       	smpsAlterNote       $11
0008BA37 E701                       	dc.b	smpsNoAttack, $01
0008BA39 E10D                       	smpsAlterNote       $0D
0008BA3B E701                       	dc.b	smpsNoAttack, $01
0008BA3D E107                       	smpsAlterNote       $07
0008BA3F E701                       	dc.b	smpsNoAttack, $01
0008BA41 E106                       	smpsAlterNote       $06
0008BA43 E701                       	dc.b	smpsNoAttack, $01
0008BA45 E10A                       	smpsAlterNote       $0A
0008BA47 E701                       	dc.b	smpsNoAttack, $01
0008BA49 E110                       	smpsAlterNote       $10
0008BA4B E701                       	dc.b	smpsNoAttack, $01
0008BA4D E111                       	smpsAlterNote       $11
0008BA4F 8001                       	dc.b	nRst, $01
0008BA51 E10D                       	smpsAlterNote       $0D
0008BA53 C40D                       	dc.b	nG5, $0D
0008BA55 E10A                       	smpsAlterNote       $0A
0008BA57 E701                       	dc.b	smpsNoAttack, $01
0008BA59 E106                       	smpsAlterNote       $06
0008BA5B E701                       	dc.b	smpsNoAttack, $01
0008BA5D E10A                       	smpsAlterNote       $0A
0008BA5F E701                       	dc.b	smpsNoAttack, $01
0008BA61 E10D                       	smpsAlterNote       $0D
0008BA63 E701                       	dc.b	smpsNoAttack, $01
0008BA65 E10C                       	smpsAlterNote       $0C
0008BA67 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008BA73 8001                       	dc.b	nRst, $01
0008BA75 E10D                       	smpsAlterNote       $0D
0008BA77 C20D                       	dc.b	nF5, $0D
0008BA79 E10A                       	smpsAlterNote       $0A
0008BA7B E701                       	dc.b	smpsNoAttack, $01
0008BA7D E106                       	smpsAlterNote       $06
0008BA7F E701                       	dc.b	smpsNoAttack, $01
0008BA81 E10A                       	smpsAlterNote       $0A
0008BA83 E701                       	dc.b	smpsNoAttack, $01
0008BA85 E110                       	smpsAlterNote       $10
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E111                       	smpsAlterNote       $11
0008BA8B E701                       	dc.b	smpsNoAttack, $01
0008BA8D E10D                       	smpsAlterNote       $0D
0008BA8F E701                       	dc.b	smpsNoAttack, $01
0008BA91 E107                       	smpsAlterNote       $07
0008BA93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA97 E10A                       	smpsAlterNote       $0A
0008BA99 E701                       	dc.b	smpsNoAttack, $01
0008BA9B E110                       	smpsAlterNote       $10
0008BA9D E701                       	dc.b	smpsNoAttack, $01
0008BA9F E111                       	smpsAlterNote       $11
0008BAA1 8001                       	dc.b	nRst, $01
0008BAA3 E10F                       	smpsAlterNote       $0F
0008BAA5 C60A                       	dc.b	nA5, $0A
0008BAA7 E10D                       	smpsAlterNote       $0D
0008BAA9 C406 8001                  	dc.b	nG5, $06, nRst, $01
0008BAAD E10C                       	smpsAlterNote       $0C
0008BAAF C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008BABB 8001                       	dc.b	nRst, $01
0008BABD E10D                       	smpsAlterNote       $0D
0008BABF C20D                       	dc.b	nF5, $0D
0008BAC1 E107                       	smpsAlterNote       $07
0008BAC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAC7 E10A                       	smpsAlterNote       $0A
0008BAC9 E701                       	dc.b	smpsNoAttack, $01
0008BACB E110                       	smpsAlterNote       $10
0008BACD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAD1 E10A                       	smpsAlterNote       $0A
0008BAD3 E701                       	dc.b	smpsNoAttack, $01
0008BAD5 E107                       	smpsAlterNote       $07
0008BAD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BADB E10D                       	smpsAlterNote       $0D
0008BADD E701                       	dc.b	smpsNoAttack, $01
0008BADF E111                       	smpsAlterNote       $11
0008BAE1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BAE5 E10D                       	smpsAlterNote       $0D
0008BAE7 C40D                       	dc.b	nG5, $0D
0008BAE9 E107                       	smpsAlterNote       $07
0008BAEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAEF E10A                       	smpsAlterNote       $0A
0008BAF1 E701                       	dc.b	smpsNoAttack, $01
0008BAF3 E10D                       	smpsAlterNote       $0D
0008BAF5 8001                       	dc.b	nRst, $01
0008BAF7 E10C                       	smpsAlterNote       $0C
0008BAF9 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008BB05 E10D                       	smpsAlterNote       $0D
0008BB07 C20E                       	dc.b	nF5, $0E
0008BB09 E107                       	smpsAlterNote       $07
0008BB0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB0F E10D                       	smpsAlterNote       $0D
0008BB11 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BB17 E0C0                       	smpsPan             panCenter, $00
0008BB19 E603                       	smpsAlterVol        $03
0008BB1B E108                       	smpsAlterNote       $08
0008BB1D B406                       	dc.b	nEb4, $06
0008BB1F E10C                       	smpsAlterNote       $0C
0008BB21 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BB25 E108                       	smpsAlterNote       $08
0008BB27 B403                       	dc.b	nEb4, $03
0008BB29 E109                       	smpsAlterNote       $09
0008BB2B B803 8001                  	dc.b	nG4, $03, nRst, $01
0008BB2F E10C                       	smpsAlterNote       $0C
0008BB31 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008BB39 03                         	dc.b	$03
0008BB3A E6FD                       	smpsAlterVol        $FD
0008BB3C F6F1 F4                    	smpsJump            music84_Jump00
0008BB3F                            
0008BB3F                            ; PSG1 Data
0008BB3F                            music84_PSG1:
0008BB3F E1FD                       	smpsAlterNote       $FD
0008BB41 EC04                       	smpsPSGAlterVol     $04
0008BB43 9203                       	dc.b	nF1, $03
0008BB45 E1FE                       	smpsAlterNote       $FE
0008BB47 9603                       	dc.b	nA1, $03
0008BB49 EC04                       	smpsPSGAlterVol     $04
0008BB4B E701                       	dc.b	smpsNoAttack, $01
0008BB4D E1FF                       	smpsAlterNote       $FF
0008BB4F ECFC                       	smpsPSGAlterVol     $FC
0008BB51 9B03                       	dc.b	nD2, $03
0008BB53 E1FD                       	smpsAlterNote       $FD
0008BB55 9403                       	dc.b	nG1, $03
0008BB57 EC04                       	smpsPSGAlterVol     $04
0008BB59 E701                       	dc.b	smpsNoAttack, $01
0008BB5B E1FE                       	smpsAlterNote       $FE
0008BB5D ECFC                       	smpsPSGAlterVol     $FC
0008BB5F 9703                       	dc.b	nBb1, $03
0008BB61 E1FF                       	smpsAlterNote       $FF
0008BB63 9B03                       	dc.b	nD2, $03
0008BB65 EC04                       	smpsPSGAlterVol     $04
0008BB67 E701                       	dc.b	smpsNoAttack, $01
0008BB69 E1FE                       	smpsAlterNote       $FE
0008BB6B ECFC                       	smpsPSGAlterVol     $FC
0008BB6D A002                       	dc.b	nG2, $02
0008BB6F EC04                       	smpsPSGAlterVol     $04
0008BB71 E701                       	dc.b	smpsNoAttack, $01
0008BB73 E1FF                       	smpsAlterNote       $FF
0008BB75 ECFC                       	smpsPSGAlterVol     $FC
0008BB77 A203                       	dc.b	nA2, $03
0008BB79 EC0B                       	smpsPSGAlterVol     $0B
0008BB7B 800A                       	dc.b	nRst, $0A
0008BB7D E105                       	smpsAlterNote       $05
0008BB7F 01                         	dc.b	$01
0008BB80 E1FC                       	smpsAlterNote       $FC
0008BB82 01                         	dc.b	$01
0008BB83 E105                       	smpsAlterNote       $05
0008BB85 01                         	dc.b	$01
0008BB86 E1FD                       	smpsAlterNote       $FD
0008BB88 01                         	dc.b	$01
0008BB89 E105                       	smpsAlterNote       $05
0008BB8B 01                         	dc.b	$01
0008BB8C E1FD                       	smpsAlterNote       $FD
0008BB8E 01                         	dc.b	$01
0008BB8F E1FA                       	smpsAlterNote       $FA
0008BB91 01                         	dc.b	$01
0008BB92 E1FC                       	smpsAlterNote       $FC
0008BB94 01                         	dc.b	$01
0008BB95 E105                       	smpsAlterNote       $05
0008BB97 01                         	dc.b	$01
0008BB98 E108                       	smpsAlterNote       $08
0008BB9A 0101                       	dc.b	$01, $01
0008BB9C E105                       	smpsAlterNote       $05
0008BB9E 01                         	dc.b	$01
0008BB9F E1FA                       	smpsAlterNote       $FA
0008BBA1 0101                       	dc.b	$01, $01
0008BBA3 E1FD                       	smpsAlterNote       $FD
0008BBA5 01                         	dc.b	$01
0008BBA6 E105                       	smpsAlterNote       $05
0008BBA8 01                         	dc.b	$01
0008BBA9 E108                       	smpsAlterNote       $08
0008BBAB 01                         	dc.b	$01
0008BBAC E105                       	smpsAlterNote       $05
0008BBAE 01                         	dc.b	$01
0008BBAF E1FC                       	smpsAlterNote       $FC
0008BBB1 01                         	dc.b	$01
0008BBB2 E105                       	smpsAlterNote       $05
0008BBB4 01                         	dc.b	$01
0008BBB5 E1FD                       	smpsAlterNote       $FD
0008BBB7 01                         	dc.b	$01
0008BBB8                            
0008BBB8                            music84_Jump07:
0008BBB8 E105                       	smpsAlterNote       $05
0008BBBA 8001                       	dc.b	nRst, $01
0008BBBC E1FD                       	smpsAlterNote       $FD
0008BBBE 01                         	dc.b	$01
0008BBBF E1FA                       	smpsAlterNote       $FA
0008BBC1 01                         	dc.b	$01
0008BBC2 E1FC                       	smpsAlterNote       $FC
0008BBC4 01                         	dc.b	$01
0008BBC5 E1FD                       	smpsAlterNote       $FD
0008BBC7 ECF5                       	smpsPSGAlterVol     $F5
0008BBC9 9206                       	dc.b	nF1, $06
0008BBCB EC04                       	smpsPSGAlterVol     $04
0008BBCD E701                       	dc.b	smpsNoAttack, $01
0008BBCF EC07                       	smpsPSGAlterVol     $07
0008BBD1 8003                       	dc.b	nRst, $03
0008BBD3 ECF5                       	smpsPSGAlterVol     $F5
0008BBD5 9206                       	dc.b	nF1, $06
0008BBD7 EC04                       	smpsPSGAlterVol     $04
0008BBD9 E701                       	dc.b	smpsNoAttack, $01
0008BBDB EC07                       	smpsPSGAlterVol     $07
0008BBDD 8006                       	dc.b	nRst, $06
0008BBDF E100                       	smpsAlterNote       $00
0008BBE1 01                         	dc.b	$01
0008BBE2 E104                       	smpsAlterNote       $04
0008BBE4 01                         	dc.b	$01
0008BBE5 E100                       	smpsAlterNote       $00
0008BBE7 01                         	dc.b	$01
0008BBE8 E1FB                       	smpsAlterNote       $FB
0008BBEA 01                         	dc.b	$01
0008BBEB E1FD                       	smpsAlterNote       $FD
0008BBED ECF5                       	smpsPSGAlterVol     $F5
0008BBEF 9406                       	dc.b	nG1, $06
0008BBF1 EC04                       	smpsPSGAlterVol     $04
0008BBF3 E701                       	dc.b	smpsNoAttack, $01
0008BBF5 EC07                       	smpsPSGAlterVol     $07
0008BBF7 8003                       	dc.b	nRst, $03
0008BBF9 ECF5                       	smpsPSGAlterVol     $F5
0008BBFB 9407                       	dc.b	nG1, $07
0008BBFD EC0B                       	smpsPSGAlterVol     $0B
0008BBFF 8006                       	dc.b	nRst, $06
0008BC01 E100                       	smpsAlterNote       $00
0008BC03 01                         	dc.b	$01
0008BC04 E103                       	smpsAlterNote       $03
0008BC06 0101                       	dc.b	$01, $01
0008BC08 E1FD                       	smpsAlterNote       $FD
0008BC0A 01                         	dc.b	$01
0008BC0B ECF5                       	smpsPSGAlterVol     $F5
0008BC0D 9207                       	dc.b	nF1, $07
0008BC0F EC0B                       	smpsPSGAlterVol     $0B
0008BC11 8004                       	dc.b	nRst, $04
0008BC13 ECF5                       	smpsPSGAlterVol     $F5
0008BC15 9206                       	dc.b	nF1, $06
0008BC17 EC04                       	smpsPSGAlterVol     $04
0008BC19 E701                       	dc.b	smpsNoAttack, $01
0008BC1B EC07                       	smpsPSGAlterVol     $07
0008BC1D 8006                       	dc.b	nRst, $06
0008BC1F E103                       	smpsAlterNote       $03
0008BC21 01                         	dc.b	$01
0008BC22 E104                       	smpsAlterNote       $04
0008BC24 01                         	dc.b	$01
0008BC25 E100                       	smpsAlterNote       $00
0008BC27 01                         	dc.b	$01
0008BC28 E1FA                       	smpsAlterNote       $FA
0008BC2A 01                         	dc.b	$01
0008BC2B E1FD                       	smpsAlterNote       $FD
0008BC2D ECF5                       	smpsPSGAlterVol     $F5
0008BC2F 9206                       	dc.b	nF1, $06
0008BC31 EC04                       	smpsPSGAlterVol     $04
0008BC33 E701                       	dc.b	smpsNoAttack, $01
0008BC35 EC07                       	smpsPSGAlterVol     $07
0008BC37 8003                       	dc.b	nRst, $03
0008BC39 ECF5                       	smpsPSGAlterVol     $F5
0008BC3B 9106                       	dc.b	nE1, $06
0008BC3D EC04                       	smpsPSGAlterVol     $04
0008BC3F E701                       	dc.b	smpsNoAttack, $01
0008BC41 EC07                       	smpsPSGAlterVol     $07
0008BC43 8006                       	dc.b	nRst, $06
0008BC45 E100                       	smpsAlterNote       $00
0008BC47 01                         	dc.b	$01
0008BC48 E104                       	smpsAlterNote       $04
0008BC4A 01                         	dc.b	$01
0008BC4B E100                       	smpsAlterNote       $00
0008BC4D 01                         	dc.b	$01
0008BC4E E1FD                       	smpsAlterNote       $FD
0008BC50 01                         	dc.b	$01
0008BC51 ECF5                       	smpsPSGAlterVol     $F5
0008BC53 9206                       	dc.b	nF1, $06
0008BC55 EC04                       	smpsPSGAlterVol     $04
0008BC57 E701                       	dc.b	smpsNoAttack, $01
0008BC59 EC07                       	smpsPSGAlterVol     $07
0008BC5B 8003                       	dc.b	nRst, $03
0008BC5D ECF5                       	smpsPSGAlterVol     $F5
0008BC5F 9207                       	dc.b	nF1, $07
0008BC61 EC0B                       	smpsPSGAlterVol     $0B
0008BC63 8007                       	dc.b	nRst, $07
0008BC65 E103                       	smpsAlterNote       $03
0008BC67 0101                       	dc.b	$01, $01
0008BC69 E1FD                       	smpsAlterNote       $FD
0008BC6B 01                         	dc.b	$01
0008BC6C E1FB                       	smpsAlterNote       $FB
0008BC6E 01                         	dc.b	$01
0008BC6F E1FD                       	smpsAlterNote       $FD
0008BC71 ECF5                       	smpsPSGAlterVol     $F5
0008BC73 9406                       	dc.b	nG1, $06
0008BC75 EC0B                       	smpsPSGAlterVol     $0B
0008BC77 8004                       	dc.b	nRst, $04
0008BC79 ECF5                       	smpsPSGAlterVol     $F5
0008BC7B 9406                       	dc.b	nG1, $06
0008BC7D EC04                       	smpsPSGAlterVol     $04
0008BC7F E701                       	dc.b	smpsNoAttack, $01
0008BC81 EC07                       	smpsPSGAlterVol     $07
0008BC83 8006                       	dc.b	nRst, $06
0008BC85 E100                       	smpsAlterNote       $00
0008BC87 01                         	dc.b	$01
0008BC88 E104                       	smpsAlterNote       $04
0008BC8A 01                         	dc.b	$01
0008BC8B E100                       	smpsAlterNote       $00
0008BC8D 01                         	dc.b	$01
0008BC8E E1F9                       	smpsAlterNote       $F9
0008BC90 01                         	dc.b	$01
0008BC91 E1FD                       	smpsAlterNote       $FD
0008BC93 ECF5                       	smpsPSGAlterVol     $F5
0008BC95 9206                       	dc.b	nF1, $06
0008BC97 EC04                       	smpsPSGAlterVol     $04
0008BC99 E701                       	dc.b	smpsNoAttack, $01
0008BC9B EC07                       	smpsPSGAlterVol     $07
0008BC9D 8003                       	dc.b	nRst, $03
0008BC9F ECF5                       	smpsPSGAlterVol     $F5
0008BCA1 9207                       	dc.b	nF1, $07
0008BCA3 EC0B                       	smpsPSGAlterVol     $0B
0008BCA5 8006                       	dc.b	nRst, $06
0008BCA7 E100                       	smpsAlterNote       $00
0008BCA9 01                         	dc.b	$01
0008BCAA E104                       	smpsAlterNote       $04
0008BCAC 01                         	dc.b	$01
0008BCAD E103                       	smpsAlterNote       $03
0008BCAF 01                         	dc.b	$01
0008BCB0 E1FD                       	smpsAlterNote       $FD
0008BCB2 01                         	dc.b	$01
0008BCB3 ECF5                       	smpsPSGAlterVol     $F5
0008BCB5 9207                       	dc.b	nF1, $07
0008BCB7 EC0B                       	smpsPSGAlterVol     $0B
0008BCB9 8004                       	dc.b	nRst, $04
0008BCBB ECF5                       	smpsPSGAlterVol     $F5
0008BCBD 9206                       	dc.b	nF1, $06
0008BCBF EC0B                       	smpsPSGAlterVol     $0B
0008BCC1 8007                       	dc.b	nRst, $07
0008BCC3 E103                       	smpsAlterNote       $03
0008BCC5 0101                       	dc.b	$01, $01
0008BCC7 E100                       	smpsAlterNote       $00
0008BCC9 01                         	dc.b	$01
0008BCCA E1FA                       	smpsAlterNote       $FA
0008BCCC 01                         	dc.b	$01
0008BCCD E1FD                       	smpsAlterNote       $FD
0008BCCF ECF5                       	smpsPSGAlterVol     $F5
0008BCD1 9206                       	dc.b	nF1, $06
0008BCD3 EC04                       	smpsPSGAlterVol     $04
0008BCD5 E701                       	dc.b	smpsNoAttack, $01
0008BCD7 EC07                       	smpsPSGAlterVol     $07
0008BCD9 8003                       	dc.b	nRst, $03
0008BCDB ECF5                       	smpsPSGAlterVol     $F5
0008BCDD 9206                       	dc.b	nF1, $06
0008BCDF EC04                       	smpsPSGAlterVol     $04
0008BCE1 E701                       	dc.b	smpsNoAttack, $01
0008BCE3 EC07                       	smpsPSGAlterVol     $07
0008BCE5 8006                       	dc.b	nRst, $06
0008BCE7 E100                       	smpsAlterNote       $00
0008BCE9 01                         	dc.b	$01
0008BCEA E104                       	smpsAlterNote       $04
0008BCEC 01                         	dc.b	$01
0008BCED E100                       	smpsAlterNote       $00
0008BCEF 01                         	dc.b	$01
0008BCF0 E1FD                       	smpsAlterNote       $FD
0008BCF2 01                         	dc.b	$01
0008BCF3 ECF5                       	smpsPSGAlterVol     $F5
0008BCF5 9206                       	dc.b	nF1, $06
0008BCF7 EC04                       	smpsPSGAlterVol     $04
0008BCF9 E701                       	dc.b	smpsNoAttack, $01
0008BCFB EC07                       	smpsPSGAlterVol     $07
0008BCFD 8003                       	dc.b	nRst, $03
0008BCFF ECF5                       	smpsPSGAlterVol     $F5
0008BD01 9207                       	dc.b	nF1, $07
0008BD03 EC0B                       	smpsPSGAlterVol     $0B
0008BD05 8007                       	dc.b	nRst, $07
0008BD07 E103                       	smpsAlterNote       $03
0008BD09 0101                       	dc.b	$01, $01
0008BD0B E1FD                       	smpsAlterNote       $FD
0008BD0D 01                         	dc.b	$01
0008BD0E E1FA                       	smpsAlterNote       $FA
0008BD10 01                         	dc.b	$01
0008BD11 E1FD                       	smpsAlterNote       $FD
0008BD13 ECF5                       	smpsPSGAlterVol     $F5
0008BD15 9206                       	dc.b	nF1, $06
0008BD17 EC0B                       	smpsPSGAlterVol     $0B
0008BD19 8004                       	dc.b	nRst, $04
0008BD1B ECF5                       	smpsPSGAlterVol     $F5
0008BD1D 9206                       	dc.b	nF1, $06
0008BD1F EC04                       	smpsPSGAlterVol     $04
0008BD21 E701                       	dc.b	smpsNoAttack, $01
0008BD23 EC07                       	smpsPSGAlterVol     $07
0008BD25 8006                       	dc.b	nRst, $06
0008BD27 E103                       	smpsAlterNote       $03
0008BD29 01                         	dc.b	$01
0008BD2A E104                       	smpsAlterNote       $04
0008BD2C 01                         	dc.b	$01
0008BD2D E100                       	smpsAlterNote       $00
0008BD2F 01                         	dc.b	$01
0008BD30 E1FA                       	smpsAlterNote       $FA
0008BD32 01                         	dc.b	$01
0008BD33 E1FD                       	smpsAlterNote       $FD
0008BD35 ECF5                       	smpsPSGAlterVol     $F5
0008BD37 9206                       	dc.b	nF1, $06
0008BD39 EC04                       	smpsPSGAlterVol     $04
0008BD3B E701                       	dc.b	smpsNoAttack, $01
0008BD3D EC07                       	smpsPSGAlterVol     $07
0008BD3F 8003                       	dc.b	nRst, $03
0008BD41 ECF5                       	smpsPSGAlterVol     $F5
0008BD43 9206                       	dc.b	nF1, $06
0008BD45 EC04                       	smpsPSGAlterVol     $04
0008BD47 E701                       	dc.b	smpsNoAttack, $01
0008BD49 EC07                       	smpsPSGAlterVol     $07
0008BD4B 8006                       	dc.b	nRst, $06
0008BD4D E100                       	smpsAlterNote       $00
0008BD4F 01                         	dc.b	$01
0008BD50 E104                       	smpsAlterNote       $04
0008BD52 01                         	dc.b	$01
0008BD53 E103                       	smpsAlterNote       $03
0008BD55 01                         	dc.b	$01
0008BD56 E1FD                       	smpsAlterNote       $FD
0008BD58 01                         	dc.b	$01
0008BD59 ECF5                       	smpsPSGAlterVol     $F5
0008BD5B 9107                       	dc.b	nE1, $07
0008BD5D EC0B                       	smpsPSGAlterVol     $0B
0008BD5F 8004                       	dc.b	nRst, $04
0008BD61 ECF5                       	smpsPSGAlterVol     $F5
0008BD63 9106                       	dc.b	nE1, $06
0008BD65 EC0B                       	smpsPSGAlterVol     $0B
0008BD67 8007                       	dc.b	nRst, $07
0008BD69 E103                       	smpsAlterNote       $03
0008BD6B 0101                       	dc.b	$01, $01
0008BD6D E100                       	smpsAlterNote       $00
0008BD6F 01                         	dc.b	$01
0008BD70 E1FA                       	smpsAlterNote       $FA
0008BD72 01                         	dc.b	$01
0008BD73 E1FD                       	smpsAlterNote       $FD
0008BD75 ECF5                       	smpsPSGAlterVol     $F5
0008BD77 9106                       	dc.b	nE1, $06
0008BD79 EC04                       	smpsPSGAlterVol     $04
0008BD7B E701                       	dc.b	smpsNoAttack, $01
0008BD7D EC07                       	smpsPSGAlterVol     $07
0008BD7F 8003                       	dc.b	nRst, $03
0008BD81 ECF5                       	smpsPSGAlterVol     $F5
0008BD83 9106                       	dc.b	nE1, $06
0008BD85 EC04                       	smpsPSGAlterVol     $04
0008BD87 E701                       	dc.b	smpsNoAttack, $01
0008BD89 EC07                       	smpsPSGAlterVol     $07
0008BD8B 8006                       	dc.b	nRst, $06
0008BD8D E100                       	smpsAlterNote       $00
0008BD8F 01                         	dc.b	$01
0008BD90 E104                       	smpsAlterNote       $04
0008BD92 01                         	dc.b	$01
0008BD93 E100                       	smpsAlterNote       $00
0008BD95 01                         	dc.b	$01
0008BD96 E1FA                       	smpsAlterNote       $FA
0008BD98 01                         	dc.b	$01
0008BD99 E1FD                       	smpsAlterNote       $FD
0008BD9B ECF5                       	smpsPSGAlterVol     $F5
0008BD9D 9106                       	dc.b	nE1, $06
0008BD9F EC04                       	smpsPSGAlterVol     $04
0008BDA1 E701                       	dc.b	smpsNoAttack, $01
0008BDA3 EC07                       	smpsPSGAlterVol     $07
0008BDA5 8003                       	dc.b	nRst, $03
0008BDA7 ECF5                       	smpsPSGAlterVol     $F5
0008BDA9 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008BDAD EC04                       	smpsPSGAlterVol     $04
0008BDAF E701                       	dc.b	smpsNoAttack, $01
0008BDB1 ECFC                       	smpsPSGAlterVol     $FC
0008BDB3 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008BDB7 EC04                       	smpsPSGAlterVol     $04
0008BDB9 E701                       	dc.b	smpsNoAttack, $01
0008BDBB ECFC                       	smpsPSGAlterVol     $FC
0008BDBD 9106                       	dc.b	nE1, $06
0008BDBF EC04                       	smpsPSGAlterVol     $04
0008BDC1 E701                       	dc.b	smpsNoAttack, $01
0008BDC3 EC07                       	smpsPSGAlterVol     $07
0008BDC5 8006                       	dc.b	nRst, $06
0008BDC7 E100                       	smpsAlterNote       $00
0008BDC9 01                         	dc.b	$01
0008BDCA E104                       	smpsAlterNote       $04
0008BDCC 01                         	dc.b	$01
0008BDCD E100                       	smpsAlterNote       $00
0008BDCF 01                         	dc.b	$01
0008BDD0 E1FA                       	smpsAlterNote       $FA
0008BDD2 01                         	dc.b	$01
0008BDD3 E1F9                       	smpsAlterNote       $F9
0008BDD5 01                         	dc.b	$01
0008BDD6 E1FD                       	smpsAlterNote       $FD
0008BDD8 01                         	dc.b	$01
0008BDD9 E103                       	smpsAlterNote       $03
0008BDDB 01                         	dc.b	$01
0008BDDC E104                       	smpsAlterNote       $04
0008BDDE 01                         	dc.b	$01
0008BDDF E100                       	smpsAlterNote       $00
0008BDE1 01                         	dc.b	$01
0008BDE2 E1FA                       	smpsAlterNote       $FA
0008BDE4 0101                       	dc.b	$01, $01
0008BDE6 E1FD                       	smpsAlterNote       $FD
0008BDE8 ECF5                       	smpsPSGAlterVol     $F5
0008BDEA 9206                       	dc.b	nF1, $06
0008BDEC EC04                       	smpsPSGAlterVol     $04
0008BDEE E701                       	dc.b	smpsNoAttack, $01
0008BDF0 EC07                       	smpsPSGAlterVol     $07
0008BDF2 8003                       	dc.b	nRst, $03
0008BDF4 ECF5                       	smpsPSGAlterVol     $F5
0008BDF6 9206                       	dc.b	nF1, $06
0008BDF8 EC04                       	smpsPSGAlterVol     $04
0008BDFA E701                       	dc.b	smpsNoAttack, $01
0008BDFC EC07                       	smpsPSGAlterVol     $07
0008BDFE 8006                       	dc.b	nRst, $06
0008BE00 E100                       	smpsAlterNote       $00
0008BE02 01                         	dc.b	$01
0008BE03 E104                       	smpsAlterNote       $04
0008BE05 01                         	dc.b	$01
0008BE06 E103                       	smpsAlterNote       $03
0008BE08 01                         	dc.b	$01
0008BE09 E1FD                       	smpsAlterNote       $FD
0008BE0B 01                         	dc.b	$01
0008BE0C ECF5                       	smpsPSGAlterVol     $F5
0008BE0E 9407                       	dc.b	nG1, $07
0008BE10 EC0B                       	smpsPSGAlterVol     $0B
0008BE12 8004                       	dc.b	nRst, $04
0008BE14 ECF5                       	smpsPSGAlterVol     $F5
0008BE16 9406                       	dc.b	nG1, $06
0008BE18 EC0B                       	smpsPSGAlterVol     $0B
0008BE1A 8007                       	dc.b	nRst, $07
0008BE1C E103                       	smpsAlterNote       $03
0008BE1E 0101                       	dc.b	$01, $01
0008BE20 E1FD                       	smpsAlterNote       $FD
0008BE22 01                         	dc.b	$01
0008BE23 E1F9                       	smpsAlterNote       $F9
0008BE25 01                         	dc.b	$01
0008BE26 E1FD                       	smpsAlterNote       $FD
0008BE28 ECF5                       	smpsPSGAlterVol     $F5
0008BE2A 9206                       	dc.b	nF1, $06
0008BE2C EC04                       	smpsPSGAlterVol     $04
0008BE2E E701                       	dc.b	smpsNoAttack, $01
0008BE30 EC07                       	smpsPSGAlterVol     $07
0008BE32 8003                       	dc.b	nRst, $03
0008BE34 ECF5                       	smpsPSGAlterVol     $F5
0008BE36 9206                       	dc.b	nF1, $06
0008BE38 EC04                       	smpsPSGAlterVol     $04
0008BE3A E701                       	dc.b	smpsNoAttack, $01
0008BE3C EC07                       	smpsPSGAlterVol     $07
0008BE3E 8006                       	dc.b	nRst, $06
0008BE40 E100                       	smpsAlterNote       $00
0008BE42 01                         	dc.b	$01
0008BE43 E104                       	smpsAlterNote       $04
0008BE45 01                         	dc.b	$01
0008BE46 E100                       	smpsAlterNote       $00
0008BE48 01                         	dc.b	$01
0008BE49 E1FA                       	smpsAlterNote       $FA
0008BE4B 01                         	dc.b	$01
0008BE4C E1FD                       	smpsAlterNote       $FD
0008BE4E ECF5                       	smpsPSGAlterVol     $F5
0008BE50 9206                       	dc.b	nF1, $06
0008BE52 EC04                       	smpsPSGAlterVol     $04
0008BE54 E701                       	dc.b	smpsNoAttack, $01
0008BE56 EC07                       	smpsPSGAlterVol     $07
0008BE58 8003                       	dc.b	nRst, $03
0008BE5A ECF5                       	smpsPSGAlterVol     $F5
0008BE5C 9107                       	dc.b	nE1, $07
0008BE5E EC0B                       	smpsPSGAlterVol     $0B
0008BE60 8006                       	dc.b	nRst, $06
0008BE62 E100                       	smpsAlterNote       $00
0008BE64 01                         	dc.b	$01
0008BE65 E103                       	smpsAlterNote       $03
0008BE67 0101                       	dc.b	$01, $01
0008BE69 E1FD                       	smpsAlterNote       $FD
0008BE6B 01                         	dc.b	$01
0008BE6C ECF5                       	smpsPSGAlterVol     $F5
0008BE6E 9207                       	dc.b	nF1, $07
0008BE70 EC0B                       	smpsPSGAlterVol     $0B
0008BE72 8004                       	dc.b	nRst, $04
0008BE74 ECF5                       	smpsPSGAlterVol     $F5
0008BE76 9206                       	dc.b	nF1, $06
0008BE78 EC04                       	smpsPSGAlterVol     $04
0008BE7A E701                       	dc.b	smpsNoAttack, $01
0008BE7C EC07                       	smpsPSGAlterVol     $07
0008BE7E 8006                       	dc.b	nRst, $06
0008BE80 E103                       	smpsAlterNote       $03
0008BE82 01                         	dc.b	$01
0008BE83 E104                       	smpsAlterNote       $04
0008BE85 01                         	dc.b	$01
0008BE86 E100                       	smpsAlterNote       $00
0008BE88 01                         	dc.b	$01
0008BE89 E1FB                       	smpsAlterNote       $FB
0008BE8B 01                         	dc.b	$01
0008BE8C E1FD                       	smpsAlterNote       $FD
0008BE8E ECF5                       	smpsPSGAlterVol     $F5
0008BE90 9406                       	dc.b	nG1, $06
0008BE92 EC04                       	smpsPSGAlterVol     $04
0008BE94 E701                       	dc.b	smpsNoAttack, $01
0008BE96 EC07                       	smpsPSGAlterVol     $07
0008BE98 8003                       	dc.b	nRst, $03
0008BE9A ECF5                       	smpsPSGAlterVol     $F5
0008BE9C 9406                       	dc.b	nG1, $06
0008BE9E EC04                       	smpsPSGAlterVol     $04
0008BEA0 E701                       	dc.b	smpsNoAttack, $01
0008BEA2 EC07                       	smpsPSGAlterVol     $07
0008BEA4 8006                       	dc.b	nRst, $06
0008BEA6 E100                       	smpsAlterNote       $00
0008BEA8 01                         	dc.b	$01
0008BEA9 E104                       	smpsAlterNote       $04
0008BEAB 01                         	dc.b	$01
0008BEAC E100                       	smpsAlterNote       $00
0008BEAE 01                         	dc.b	$01
0008BEAF E1FD                       	smpsAlterNote       $FD
0008BEB1 01                         	dc.b	$01
0008BEB2 ECF5                       	smpsPSGAlterVol     $F5
0008BEB4 9206                       	dc.b	nF1, $06
0008BEB6 EC04                       	smpsPSGAlterVol     $04
0008BEB8 E701                       	dc.b	smpsNoAttack, $01
0008BEBA EC07                       	smpsPSGAlterVol     $07
0008BEBC 8003                       	dc.b	nRst, $03
0008BEBE ECF5                       	smpsPSGAlterVol     $F5
0008BEC0 9207                       	dc.b	nF1, $07
0008BEC2 EC0B                       	smpsPSGAlterVol     $0B
0008BEC4 8007                       	dc.b	nRst, $07
0008BEC6 E103                       	smpsAlterNote       $03
0008BEC8 0101                       	dc.b	$01, $01
0008BECA E1FD                       	smpsAlterNote       $FD
0008BECC 01                         	dc.b	$01
0008BECD E1FA                       	smpsAlterNote       $FA
0008BECF 01                         	dc.b	$01
0008BED0 E1FD                       	smpsAlterNote       $FD
0008BED2 ECF5                       	smpsPSGAlterVol     $F5
0008BED4 9206                       	dc.b	nF1, $06
0008BED6 EC0B                       	smpsPSGAlterVol     $0B
0008BED8 8004                       	dc.b	nRst, $04
0008BEDA ECF5                       	smpsPSGAlterVol     $F5
0008BEDC 9206                       	dc.b	nF1, $06
0008BEDE EC04                       	smpsPSGAlterVol     $04
0008BEE0 E701                       	dc.b	smpsNoAttack, $01
0008BEE2 EC07                       	smpsPSGAlterVol     $07
0008BEE4 8006                       	dc.b	nRst, $06
0008BEE6 E100                       	smpsAlterNote       $00
0008BEE8 01                         	dc.b	$01
0008BEE9 E104                       	smpsAlterNote       $04
0008BEEB 01                         	dc.b	$01
0008BEEC E100                       	smpsAlterNote       $00
0008BEEE 01                         	dc.b	$01
0008BEEF E1FA                       	smpsAlterNote       $FA
0008BEF1 01                         	dc.b	$01
0008BEF2 E1FD                       	smpsAlterNote       $FD
0008BEF4 ECF5                       	smpsPSGAlterVol     $F5
0008BEF6 9206                       	dc.b	nF1, $06
0008BEF8 EC04                       	smpsPSGAlterVol     $04
0008BEFA E704                       	dc.b	smpsNoAttack, $04
0008BEFC ECFC                       	smpsPSGAlterVol     $FC
0008BEFE 9207                       	dc.b	nF1, $07
0008BF00 EC0B                       	smpsPSGAlterVol     $0B
0008BF02 8006                       	dc.b	nRst, $06
0008BF04 E100                       	smpsAlterNote       $00
0008BF06 01                         	dc.b	$01
0008BF07 E104                       	smpsAlterNote       $04
0008BF09 01                         	dc.b	$01
0008BF0A E103                       	smpsAlterNote       $03
0008BF0C 01                         	dc.b	$01
0008BF0D E1FD                       	smpsAlterNote       $FD
0008BF0F 01                         	dc.b	$01
0008BF10 ECF5                       	smpsPSGAlterVol     $F5
0008BF12 9207                       	dc.b	nF1, $07
0008BF14 EC0B                       	smpsPSGAlterVol     $0B
0008BF16 8004                       	dc.b	nRst, $04
0008BF18 ECF5                       	smpsPSGAlterVol     $F5
0008BF1A 9206                       	dc.b	nF1, $06
0008BF1C EC0B                       	smpsPSGAlterVol     $0B
0008BF1E 8007                       	dc.b	nRst, $07
0008BF20 E103                       	smpsAlterNote       $03
0008BF22 0101                       	dc.b	$01, $01
0008BF24 E100                       	smpsAlterNote       $00
0008BF26 01                         	dc.b	$01
0008BF27 E1FA                       	smpsAlterNote       $FA
0008BF29 01                         	dc.b	$01
0008BF2A E1FD                       	smpsAlterNote       $FD
0008BF2C ECF5                       	smpsPSGAlterVol     $F5
0008BF2E 9206                       	dc.b	nF1, $06
0008BF30 EC04                       	smpsPSGAlterVol     $04
0008BF32 E704                       	dc.b	smpsNoAttack, $04
0008BF34 ECFC                       	smpsPSGAlterVol     $FC
0008BF36 9206                       	dc.b	nF1, $06
0008BF38 EC04                       	smpsPSGAlterVol     $04
0008BF3A E701                       	dc.b	smpsNoAttack, $01
0008BF3C EC07                       	smpsPSGAlterVol     $07
0008BF3E 8006                       	dc.b	nRst, $06
0008BF40 E100                       	smpsAlterNote       $00
0008BF42 01                         	dc.b	$01
0008BF43 E104                       	smpsAlterNote       $04
0008BF45 01                         	dc.b	$01
0008BF46 E100                       	smpsAlterNote       $00
0008BF48 01                         	dc.b	$01
0008BF49 E1FD                       	smpsAlterNote       $FD
0008BF4B 01                         	dc.b	$01
0008BF4C ECF5                       	smpsPSGAlterVol     $F5
0008BF4E 9206                       	dc.b	nF1, $06
0008BF50 EC04                       	smpsPSGAlterVol     $04
0008BF52 E701                       	dc.b	smpsNoAttack, $01
0008BF54 EC07                       	smpsPSGAlterVol     $07
0008BF56 8003                       	dc.b	nRst, $03
0008BF58 ECF5                       	smpsPSGAlterVol     $F5
0008BF5A 9207                       	dc.b	nF1, $07
0008BF5C EC0B                       	smpsPSGAlterVol     $0B
0008BF5E 8007                       	dc.b	nRst, $07
0008BF60 E103                       	smpsAlterNote       $03
0008BF62 0101                       	dc.b	$01, $01
0008BF64 E1FD                       	smpsAlterNote       $FD
0008BF66 01                         	dc.b	$01
0008BF67 E1FA                       	smpsAlterNote       $FA
0008BF69 01                         	dc.b	$01
0008BF6A E1FD                       	smpsAlterNote       $FD
0008BF6C ECF5                       	smpsPSGAlterVol     $F5
0008BF6E 9106                       	dc.b	nE1, $06
0008BF70 EC0B                       	smpsPSGAlterVol     $0B
0008BF72 8004                       	dc.b	nRst, $04
0008BF74 ECF5                       	smpsPSGAlterVol     $F5
0008BF76 9106                       	dc.b	nE1, $06
0008BF78 EC04                       	smpsPSGAlterVol     $04
0008BF7A E701                       	dc.b	smpsNoAttack, $01
0008BF7C EC07                       	smpsPSGAlterVol     $07
0008BF7E 8006                       	dc.b	nRst, $06
0008BF80 E100                       	smpsAlterNote       $00
0008BF82 01                         	dc.b	$01
0008BF83 E104                       	smpsAlterNote       $04
0008BF85 01                         	dc.b	$01
0008BF86 E100                       	smpsAlterNote       $00
0008BF88 01                         	dc.b	$01
0008BF89 E1FA                       	smpsAlterNote       $FA
0008BF8B 01                         	dc.b	$01
0008BF8C E1FD                       	smpsAlterNote       $FD
0008BF8E ECF5                       	smpsPSGAlterVol     $F5
0008BF90 9106                       	dc.b	nE1, $06
0008BF92 EC04                       	smpsPSGAlterVol     $04
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 EC07                       	smpsPSGAlterVol     $07
0008BF98 8003                       	dc.b	nRst, $03
0008BF9A ECF5                       	smpsPSGAlterVol     $F5
0008BF9C 9106                       	dc.b	nE1, $06
0008BF9E EC04                       	smpsPSGAlterVol     $04
0008BFA0 E701                       	dc.b	smpsNoAttack, $01
0008BFA2 EC07                       	smpsPSGAlterVol     $07
0008BFA4 8006                       	dc.b	nRst, $06
0008BFA6 E100                       	smpsAlterNote       $00
0008BFA8 01                         	dc.b	$01
0008BFA9 E104                       	smpsAlterNote       $04
0008BFAB 01                         	dc.b	$01
0008BFAC E103                       	smpsAlterNote       $03
0008BFAE 01                         	dc.b	$01
0008BFAF E1FD                       	smpsAlterNote       $FD
0008BFB1 01                         	dc.b	$01
0008BFB2 ECF5                       	smpsPSGAlterVol     $F5
0008BFB4 9107                       	dc.b	nE1, $07
0008BFB6 EC0B                       	smpsPSGAlterVol     $0B
0008BFB8 8004                       	dc.b	nRst, $04
0008BFBA ECF5                       	smpsPSGAlterVol     $F5
0008BFBC 9106                       	dc.b	nE1, $06
0008BFBE EC0B                       	smpsPSGAlterVol     $0B
0008BFC0 8007                       	dc.b	nRst, $07
0008BFC2 E103                       	smpsAlterNote       $03
0008BFC4 0101                       	dc.b	$01, $01
0008BFC6 E100                       	smpsAlterNote       $00
0008BFC8 01                         	dc.b	$01
0008BFC9 E1FA                       	smpsAlterNote       $FA
0008BFCB 01                         	dc.b	$01
0008BFCC E1FD                       	smpsAlterNote       $FD
0008BFCE ECF5                       	smpsPSGAlterVol     $F5
0008BFD0 9106                       	dc.b	nE1, $06
0008BFD2 EC04                       	smpsPSGAlterVol     $04
0008BFD4 E701                       	dc.b	smpsNoAttack, $01
0008BFD6 EC07                       	smpsPSGAlterVol     $07
0008BFD8 8003                       	dc.b	nRst, $03
0008BFDA ECF5                       	smpsPSGAlterVol     $F5
0008BFDC 9106                       	dc.b	nE1, $06
0008BFDE EC04                       	smpsPSGAlterVol     $04
0008BFE0 E701                       	dc.b	smpsNoAttack, $01
0008BFE2 EC07                       	smpsPSGAlterVol     $07
0008BFE4 8003                       	dc.b	nRst, $03
0008BFE6 ECF5                       	smpsPSGAlterVol     $F5
0008BFE8 9207                       	dc.b	nF1, $07
0008BFEA EC0B                       	smpsPSGAlterVol     $0B
0008BFEC 8006                       	dc.b	nRst, $06
0008BFEE E100                       	smpsAlterNote       $00
0008BFF0 01                         	dc.b	$01
0008BFF1 E104                       	smpsAlterNote       $04
0008BFF3 01                         	dc.b	$01
0008BFF4 E103                       	smpsAlterNote       $03
0008BFF6 01                         	dc.b	$01
0008BFF7 E1FD                       	smpsAlterNote       $FD
0008BFF9 01                         	dc.b	$01
0008BFFA E1F9                       	smpsAlterNote       $F9
0008BFFC 01                         	dc.b	$01
0008BFFD E1FD                       	smpsAlterNote       $FD
0008BFFF 01                         	dc.b	$01
0008C000 E100                       	smpsAlterNote       $00
0008C002 01                         	dc.b	$01
0008C003 E104                       	smpsAlterNote       $04
0008C005 01                         	dc.b	$01
0008C006 E1FD                       	smpsAlterNote       $FD
0008C008 ECF5                       	smpsPSGAlterVol     $F5
0008C00A 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C00E EC04                       	smpsPSGAlterVol     $04
0008C010 E701                       	dc.b	smpsNoAttack, $01
0008C012 EC07                       	smpsPSGAlterVol     $07
0008C014 8009                       	dc.b	nRst, $09
0008C016 E100                       	smpsAlterNote       $00
0008C018 01                         	dc.b	$01
0008C019 E104                       	smpsAlterNote       $04
0008C01B 01                         	dc.b	$01
0008C01C E103                       	smpsAlterNote       $03
0008C01E 01                         	dc.b	$01
0008C01F E1FD                       	smpsAlterNote       $FD
0008C021 01                         	dc.b	$01
0008C022 E1F9                       	smpsAlterNote       $F9
0008C024 01                         	dc.b	$01
0008C025 E1FD                       	smpsAlterNote       $FD
0008C027 01                         	dc.b	$01
0008C028 E100                       	smpsAlterNote       $00
0008C02A 01                         	dc.b	$01
0008C02B E104                       	smpsAlterNote       $04
0008C02D 01                         	dc.b	$01
0008C02E E100                       	smpsAlterNote       $00
0008C030 01                         	dc.b	$01
0008C031 E1FA                       	smpsAlterNote       $FA
0008C033 01                         	dc.b	$01
0008C034 E1F9                       	smpsAlterNote       $F9
0008C036 01                         	dc.b	$01
0008C037 E1FD                       	smpsAlterNote       $FD
0008C039 01                         	dc.b	$01
0008C03A E103                       	smpsAlterNote       $03
0008C03C 0101                       	dc.b	$01, $01
0008C03E E100                       	smpsAlterNote       $00
0008C040 01                         	dc.b	$01
0008C041 E1FD                       	smpsAlterNote       $FD
0008C043 ECF5                       	smpsPSGAlterVol     $F5
0008C045 9202                       	dc.b	nF1, $02
0008C047 EC04                       	smpsPSGAlterVol     $04
0008C049 E701                       	dc.b	smpsNoAttack, $01
0008C04B ECFC                       	smpsPSGAlterVol     $FC
0008C04D 9106                       	dc.b	nE1, $06
0008C04F EC04                       	smpsPSGAlterVol     $04
0008C051 E701                       	dc.b	smpsNoAttack, $01
0008C053 EC07                       	smpsPSGAlterVol     $07
0008C055 8006                       	dc.b	nRst, $06
0008C057 E100                       	smpsAlterNote       $00
0008C059 01                         	dc.b	$01
0008C05A E104                       	smpsAlterNote       $04
0008C05C 01                         	dc.b	$01
0008C05D E100                       	smpsAlterNote       $00
0008C05F 01                         	dc.b	$01
0008C060 E1FD                       	smpsAlterNote       $FD
0008C062 01                         	dc.b	$01
0008C063 E1F9                       	smpsAlterNote       $F9
0008C065 01                         	dc.b	$01
0008C066 E1FD                       	smpsAlterNote       $FD
0008C068 01                         	dc.b	$01
0008C069 E103                       	smpsAlterNote       $03
0008C06B 01                         	dc.b	$01
0008C06C E104                       	smpsAlterNote       $04
0008C06E 01                         	dc.b	$01
0008C06F E1FD                       	smpsAlterNote       $FD
0008C071 ECF5                       	smpsPSGAlterVol     $F5
0008C073 9102                       	dc.b	nE1, $02
0008C075 EC04                       	smpsPSGAlterVol     $04
0008C077 E701                       	dc.b	smpsNoAttack, $01
0008C079 ECFC                       	smpsPSGAlterVol     $FC
0008C07B 920D                       	dc.b	nF1, $0D
0008C07D E100                       	smpsAlterNote       $00
0008C07F E701                       	dc.b	smpsNoAttack, $01
0008C081 E104                       	smpsAlterNote       $04
0008C083 E701                       	dc.b	smpsNoAttack, $01
0008C085 E100                       	smpsAlterNote       $00
0008C087 E701                       	dc.b	smpsNoAttack, $01
0008C089 E1FD                       	smpsAlterNote       $FD
0008C08B E701                       	dc.b	smpsNoAttack, $01
0008C08D E1F9                       	smpsAlterNote       $F9
0008C08F E701                       	dc.b	smpsNoAttack, $01
0008C091 E1FD                       	smpsAlterNote       $FD
0008C093 E701                       	dc.b	smpsNoAttack, $01
0008C095 E103                       	smpsAlterNote       $03
0008C097 E701                       	dc.b	smpsNoAttack, $01
0008C099 E104                       	smpsAlterNote       $04
0008C09B E701                       	dc.b	smpsNoAttack, $01
0008C09D E100                       	smpsAlterNote       $00
0008C09F E701                       	dc.b	smpsNoAttack, $01
0008C0A1 E1FA                       	smpsAlterNote       $FA
0008C0A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0A7 E1FD                       	smpsAlterNote       $FD
0008C0A9 E701                       	dc.b	smpsNoAttack, $01
0008C0AB E103                       	smpsAlterNote       $03
0008C0AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0B1 E1FD                       	smpsAlterNote       $FD
0008C0B3 E701                       	dc.b	smpsNoAttack, $01
0008C0B5 E1F9                       	smpsAlterNote       $F9
0008C0B7 E701                       	dc.b	smpsNoAttack, $01
0008C0B9 E1FA                       	smpsAlterNote       $FA
0008C0BB E701                       	dc.b	smpsNoAttack, $01
0008C0BD E100                       	smpsAlterNote       $00
0008C0BF EC04                       	smpsPSGAlterVol     $04
0008C0C1 E701                       	dc.b	smpsNoAttack, $01
0008C0C3 EC07                       	smpsPSGAlterVol     $07
0008C0C5 E104                       	smpsAlterNote       $04
0008C0C7 8001                       	dc.b	nRst, $01
0008C0C9 E100                       	smpsAlterNote       $00
0008C0CB 01                         	dc.b	$01
0008C0CC E1FD                       	smpsAlterNote       $FD
0008C0CE 01                         	dc.b	$01
0008C0CF E1F9                       	smpsAlterNote       $F9
0008C0D1 01                         	dc.b	$01
0008C0D2 E1FD                       	smpsAlterNote       $FD
0008C0D4 01                         	dc.b	$01
0008C0D5 E103                       	smpsAlterNote       $03
0008C0D7 01                         	dc.b	$01
0008C0D8 E104                       	smpsAlterNote       $04
0008C0DA 01                         	dc.b	$01
0008C0DB E1FD                       	smpsAlterNote       $FD
0008C0DD ECF5                       	smpsPSGAlterVol     $F5
0008C0DF 9106                       	dc.b	nE1, $06
0008C0E1 EC04                       	smpsPSGAlterVol     $04
0008C0E3 E701                       	dc.b	smpsNoAttack, $01
0008C0E5 EC07                       	smpsPSGAlterVol     $07
0008C0E7 8003                       	dc.b	nRst, $03
0008C0E9 ECF5                       	smpsPSGAlterVol     $F5
0008C0EB 9106                       	dc.b	nE1, $06
0008C0ED EC04                       	smpsPSGAlterVol     $04
0008C0EF E701                       	dc.b	smpsNoAttack, $01
0008C0F1 EC07                       	smpsPSGAlterVol     $07
0008C0F3 8006                       	dc.b	nRst, $06
0008C0F5 E100                       	smpsAlterNote       $00
0008C0F7 01                         	dc.b	$01
0008C0F8 E104                       	smpsAlterNote       $04
0008C0FA 01                         	dc.b	$01
0008C0FB E100                       	smpsAlterNote       $00
0008C0FD 01                         	dc.b	$01
0008C0FE E1FA                       	smpsAlterNote       $FA
0008C100 01                         	dc.b	$01
0008C101 E1FD                       	smpsAlterNote       $FD
0008C103 ECF5                       	smpsPSGAlterVol     $F5
0008C105 9206                       	dc.b	nF1, $06
0008C107 EC04                       	smpsPSGAlterVol     $04
0008C109 E701                       	dc.b	smpsNoAttack, $01
0008C10B EC07                       	smpsPSGAlterVol     $07
0008C10D 8003                       	dc.b	nRst, $03
0008C10F ECF5                       	smpsPSGAlterVol     $F5
0008C111 9207                       	dc.b	nF1, $07
0008C113 EC0B                       	smpsPSGAlterVol     $0B
0008C115 8006                       	dc.b	nRst, $06
0008C117 E100                       	smpsAlterNote       $00
0008C119 01                         	dc.b	$01
0008C11A E103                       	smpsAlterNote       $03
0008C11C 0101                       	dc.b	$01, $01
0008C11E E1FD                       	smpsAlterNote       $FD
0008C120 01                         	dc.b	$01
0008C121 ECF5                       	smpsPSGAlterVol     $F5
0008C123 9107                       	dc.b	nE1, $07
0008C125 EC0B                       	smpsPSGAlterVol     $0B
0008C127 8004                       	dc.b	nRst, $04
0008C129 ECF5                       	smpsPSGAlterVol     $F5
0008C12B 9106                       	dc.b	nE1, $06
0008C12D EC04                       	smpsPSGAlterVol     $04
0008C12F E701                       	dc.b	smpsNoAttack, $01
0008C131 EC07                       	smpsPSGAlterVol     $07
0008C133 8006                       	dc.b	nRst, $06
0008C135 E103                       	smpsAlterNote       $03
0008C137 01                         	dc.b	$01
0008C138 E104                       	smpsAlterNote       $04
0008C13A 01                         	dc.b	$01
0008C13B E100                       	smpsAlterNote       $00
0008C13D 01                         	dc.b	$01
0008C13E E1FA                       	smpsAlterNote       $FA
0008C140 01                         	dc.b	$01
0008C141 E1FD                       	smpsAlterNote       $FD
0008C143 ECF5                       	smpsPSGAlterVol     $F5
0008C145 9106                       	dc.b	nE1, $06
0008C147 EC04                       	smpsPSGAlterVol     $04
0008C149 E701                       	dc.b	smpsNoAttack, $01
0008C14B EC07                       	smpsPSGAlterVol     $07
0008C14D 8003                       	dc.b	nRst, $03
0008C14F ECF5                       	smpsPSGAlterVol     $F5
0008C151 9106                       	dc.b	nE1, $06
0008C153 EC04                       	smpsPSGAlterVol     $04
0008C155 E701                       	dc.b	smpsNoAttack, $01
0008C157 EC07                       	smpsPSGAlterVol     $07
0008C159 8003                       	dc.b	nRst, $03
0008C15B ECF5                       	smpsPSGAlterVol     $F5
0008C15D 9207                       	dc.b	nF1, $07
0008C15F EC0B                       	smpsPSGAlterVol     $0B
0008C161 8006                       	dc.b	nRst, $06
0008C163 E100                       	smpsAlterNote       $00
0008C165 01                         	dc.b	$01
0008C166 E103                       	smpsAlterNote       $03
0008C168 0101                       	dc.b	$01, $01
0008C16A E1FD                       	smpsAlterNote       $FD
0008C16C 01                         	dc.b	$01
0008C16D E1F9                       	smpsAlterNote       $F9
0008C16F 01                         	dc.b	$01
0008C170 E1FA                       	smpsAlterNote       $FA
0008C172 01                         	dc.b	$01
0008C173 E100                       	smpsAlterNote       $00
0008C175 01                         	dc.b	$01
0008C176 E104                       	smpsAlterNote       $04
0008C178 01                         	dc.b	$01
0008C179 E1FD                       	smpsAlterNote       $FD
0008C17B ECF5                       	smpsPSGAlterVol     $F5
0008C17D 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C181 EC04                       	smpsPSGAlterVol     $04
0008C183 E701                       	dc.b	smpsNoAttack, $01
0008C185 EC07                       	smpsPSGAlterVol     $07
0008C187 8009                       	dc.b	nRst, $09
0008C189 E100                       	smpsAlterNote       $00
0008C18B 01                         	dc.b	$01
0008C18C E103                       	smpsAlterNote       $03
0008C18E 0101                       	dc.b	$01, $01
0008C190 E1FD                       	smpsAlterNote       $FD
0008C192 01                         	dc.b	$01
0008C193 E1F9                       	smpsAlterNote       $F9
0008C195 01                         	dc.b	$01
0008C196 E1FA                       	smpsAlterNote       $FA
0008C198 01                         	dc.b	$01
0008C199 E100                       	smpsAlterNote       $00
0008C19B 01                         	dc.b	$01
0008C19C E104                       	smpsAlterNote       $04
0008C19E 01                         	dc.b	$01
0008C19F E100                       	smpsAlterNote       $00
0008C1A1 01                         	dc.b	$01
0008C1A2 E1FD                       	smpsAlterNote       $FD
0008C1A4 01                         	dc.b	$01
0008C1A5 E1F9                       	smpsAlterNote       $F9
0008C1A7 01                         	dc.b	$01
0008C1A8 E1FD                       	smpsAlterNote       $FD
0008C1AA 01                         	dc.b	$01
0008C1AB E103                       	smpsAlterNote       $03
0008C1AD 01                         	dc.b	$01
0008C1AE E104                       	smpsAlterNote       $04
0008C1B0 01                         	dc.b	$01
0008C1B1 E100                       	smpsAlterNote       $00
0008C1B3 01                         	dc.b	$01
0008C1B4 E1FD                       	smpsAlterNote       $FD
0008C1B6 ECF5                       	smpsPSGAlterVol     $F5
0008C1B8 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008C1BC EC04                       	smpsPSGAlterVol     $04
0008C1BE E701                       	dc.b	smpsNoAttack, $01
0008C1C0 EC07                       	smpsPSGAlterVol     $07
0008C1C2 8006                       	dc.b	nRst, $06
0008C1C4 E100                       	smpsAlterNote       $00
0008C1C6 01                         	dc.b	$01
0008C1C7 E104                       	smpsAlterNote       $04
0008C1C9 01                         	dc.b	$01
0008C1CA E103                       	smpsAlterNote       $03
0008C1CC 01                         	dc.b	$01
0008C1CD E1FD                       	smpsAlterNote       $FD
0008C1CF 01                         	dc.b	$01
0008C1D0 E1F9                       	smpsAlterNote       $F9
0008C1D2 01                         	dc.b	$01
0008C1D3 E1FD                       	smpsAlterNote       $FD
0008C1D5 01                         	dc.b	$01
0008C1D6 E100                       	smpsAlterNote       $00
0008C1D8 01                         	dc.b	$01
0008C1D9 E104                       	smpsAlterNote       $04
0008C1DB 01                         	dc.b	$01
0008C1DC E1FD                       	smpsAlterNote       $FD
0008C1DE ECF5                       	smpsPSGAlterVol     $F5
0008C1E0 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008C1E4 E100                       	smpsAlterNote       $00
0008C1E6 E701                       	dc.b	smpsNoAttack, $01
0008C1E8 E104                       	smpsAlterNote       $04
0008C1EA E701                       	dc.b	smpsNoAttack, $01
0008C1EC E100                       	smpsAlterNote       $00
0008C1EE E701                       	dc.b	smpsNoAttack, $01
0008C1F0 E1FD                       	smpsAlterNote       $FD
0008C1F2 E701                       	dc.b	smpsNoAttack, $01
0008C1F4 E1F9                       	smpsAlterNote       $F9
0008C1F6 E701                       	dc.b	smpsNoAttack, $01
0008C1F8 E1FD                       	smpsAlterNote       $FD
0008C1FA E701                       	dc.b	smpsNoAttack, $01
0008C1FC E103                       	smpsAlterNote       $03
0008C1FE E701                       	dc.b	smpsNoAttack, $01
0008C200 E104                       	smpsAlterNote       $04
0008C202 E701                       	dc.b	smpsNoAttack, $01
0008C204 E100                       	smpsAlterNote       $00
0008C206 E701                       	dc.b	smpsNoAttack, $01
0008C208 E1FA                       	smpsAlterNote       $FA
0008C20A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C20E E1FD                       	smpsAlterNote       $FD
0008C210 E701                       	dc.b	smpsNoAttack, $01
0008C212 E103                       	smpsAlterNote       $03
0008C214 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C218 E100                       	smpsAlterNote       $00
0008C21A E701                       	dc.b	smpsNoAttack, $01
0008C21C E1FA                       	smpsAlterNote       $FA
0008C21E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C222 E100                       	smpsAlterNote       $00
0008C224 EC04                       	smpsPSGAlterVol     $04
0008C226 E701                       	dc.b	smpsNoAttack, $01
0008C228 EC07                       	smpsPSGAlterVol     $07
0008C22A E104                       	smpsAlterNote       $04
0008C22C 8001                       	dc.b	nRst, $01
0008C22E E103                       	smpsAlterNote       $03
0008C230 01                         	dc.b	$01
0008C231 E1FD                       	smpsAlterNote       $FD
0008C233 01                         	dc.b	$01
0008C234 E1F9                       	smpsAlterNote       $F9
0008C236 01                         	dc.b	$01
0008C237 E1FD                       	smpsAlterNote       $FD
0008C239 01                         	dc.b	$01
0008C23A E100                       	smpsAlterNote       $00
0008C23C 01                         	dc.b	$01
0008C23D E104                       	smpsAlterNote       $04
0008C23F 01                         	dc.b	$01
0008C240 E1FD                       	smpsAlterNote       $FD
0008C242 ECF5                       	smpsPSGAlterVol     $F5
0008C244 9106                       	dc.b	nE1, $06
0008C246 EC04                       	smpsPSGAlterVol     $04
0008C248 E701                       	dc.b	smpsNoAttack, $01
0008C24A EC07                       	smpsPSGAlterVol     $07
0008C24C 8003                       	dc.b	nRst, $03
0008C24E ECF5                       	smpsPSGAlterVol     $F5
0008C250 9106                       	dc.b	nE1, $06
0008C252 EC04                       	smpsPSGAlterVol     $04
0008C254 E701                       	dc.b	smpsNoAttack, $01
0008C256 EC07                       	smpsPSGAlterVol     $07
0008C258 8006                       	dc.b	nRst, $06
0008C25A E100                       	smpsAlterNote       $00
0008C25C 01                         	dc.b	$01
0008C25D E104                       	smpsAlterNote       $04
0008C25F 01                         	dc.b	$01
0008C260 E100                       	smpsAlterNote       $00
0008C262 01                         	dc.b	$01
0008C263 E1FD                       	smpsAlterNote       $FD
0008C265 01                         	dc.b	$01
0008C266 ECF5                       	smpsPSGAlterVol     $F5
0008C268 9206                       	dc.b	nF1, $06
0008C26A EC04                       	smpsPSGAlterVol     $04
0008C26C E701                       	dc.b	smpsNoAttack, $01
0008C26E EC07                       	smpsPSGAlterVol     $07
0008C270 8003                       	dc.b	nRst, $03
0008C272 ECF5                       	smpsPSGAlterVol     $F5
0008C274 9207                       	dc.b	nF1, $07
0008C276 EC0B                       	smpsPSGAlterVol     $0B
0008C278 8007                       	dc.b	nRst, $07
0008C27A E103                       	smpsAlterNote       $03
0008C27C 0101                       	dc.b	$01, $01
0008C27E E1FD                       	smpsAlterNote       $FD
0008C280 01                         	dc.b	$01
0008C281 E1FA                       	smpsAlterNote       $FA
0008C283 01                         	dc.b	$01
0008C284 E1FD                       	smpsAlterNote       $FD
0008C286 ECF5                       	smpsPSGAlterVol     $F5
0008C288 9106                       	dc.b	nE1, $06
0008C28A EC0B                       	smpsPSGAlterVol     $0B
0008C28C 8004                       	dc.b	nRst, $04
0008C28E ECF5                       	smpsPSGAlterVol     $F5
0008C290 9106                       	dc.b	nE1, $06
0008C292 EC04                       	smpsPSGAlterVol     $04
0008C294 E701                       	dc.b	smpsNoAttack, $01
0008C296 EC07                       	smpsPSGAlterVol     $07
0008C298 8006                       	dc.b	nRst, $06
0008C29A E100                       	smpsAlterNote       $00
0008C29C 01                         	dc.b	$01
0008C29D E104                       	smpsAlterNote       $04
0008C29F 01                         	dc.b	$01
0008C2A0 E100                       	smpsAlterNote       $00
0008C2A2 01                         	dc.b	$01
0008C2A3 E1FA                       	smpsAlterNote       $FA
0008C2A5 01                         	dc.b	$01
0008C2A6 E1FD                       	smpsAlterNote       $FD
0008C2A8 ECF5                       	smpsPSGAlterVol     $F5
0008C2AA 9206                       	dc.b	nF1, $06
0008C2AC EC04                       	smpsPSGAlterVol     $04
0008C2AE E701                       	dc.b	smpsNoAttack, $01
0008C2B0 EC07                       	smpsPSGAlterVol     $07
0008C2B2 8003                       	dc.b	nRst, $03
0008C2B4 ECF5                       	smpsPSGAlterVol     $F5
0008C2B6 9206                       	dc.b	nF1, $06
0008C2B8 EC04                       	smpsPSGAlterVol     $04
0008C2BA E701                       	dc.b	smpsNoAttack, $01
0008C2BC EC07                       	smpsPSGAlterVol     $07
0008C2BE 8006                       	dc.b	nRst, $06
0008C2C0 E100                       	smpsAlterNote       $00
0008C2C2 01                         	dc.b	$01
0008C2C3 E104                       	smpsAlterNote       $04
0008C2C5 01                         	dc.b	$01
0008C2C6 E103                       	smpsAlterNote       $03
0008C2C8 01                         	dc.b	$01
0008C2C9 E1FD                       	smpsAlterNote       $FD
0008C2CB 01                         	dc.b	$01
0008C2CC ECF5                       	smpsPSGAlterVol     $F5
0008C2CE 9107                       	dc.b	nE1, $07
0008C2D0 EC0B                       	smpsPSGAlterVol     $0B
0008C2D2 8004                       	dc.b	nRst, $04
0008C2D4 ECF5                       	smpsPSGAlterVol     $F5
0008C2D6 9106                       	dc.b	nE1, $06
0008C2D8 EC0B                       	smpsPSGAlterVol     $0B
0008C2DA 8007                       	dc.b	nRst, $07
0008C2DC E103                       	smpsAlterNote       $03
0008C2DE 0101                       	dc.b	$01, $01
0008C2E0 E100                       	smpsAlterNote       $00
0008C2E2 01                         	dc.b	$01
0008C2E3 E1FA                       	smpsAlterNote       $FA
0008C2E5 01                         	dc.b	$01
0008C2E6 E1FD                       	smpsAlterNote       $FD
0008C2E8 ECF5                       	smpsPSGAlterVol     $F5
0008C2EA 9206                       	dc.b	nF1, $06
0008C2EC EC04                       	smpsPSGAlterVol     $04
0008C2EE E701                       	dc.b	smpsNoAttack, $01
0008C2F0 EC07                       	smpsPSGAlterVol     $07
0008C2F2 8003                       	dc.b	nRst, $03
0008C2F4 ECF5                       	smpsPSGAlterVol     $F5
0008C2F6 9206                       	dc.b	nF1, $06
0008C2F8 EC04                       	smpsPSGAlterVol     $04
0008C2FA E701                       	dc.b	smpsNoAttack, $01
0008C2FC EC07                       	smpsPSGAlterVol     $07
0008C2FE 8006                       	dc.b	nRst, $06
0008C300 E100                       	smpsAlterNote       $00
0008C302 01                         	dc.b	$01
0008C303 E104                       	smpsAlterNote       $04
0008C305 01                         	dc.b	$01
0008C306 E100                       	smpsAlterNote       $00
0008C308 01                         	dc.b	$01
0008C309 E1FD                       	smpsAlterNote       $FD
0008C30B 01                         	dc.b	$01
0008C30C ECF5                       	smpsPSGAlterVol     $F5
0008C30E 9106                       	dc.b	nE1, $06
0008C310 EC04                       	smpsPSGAlterVol     $04
0008C312 E701                       	dc.b	smpsNoAttack, $01
0008C314 EC07                       	smpsPSGAlterVol     $07
0008C316 8003                       	dc.b	nRst, $03
0008C318 ECF5                       	smpsPSGAlterVol     $F5
0008C31A 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C31E EC04                       	smpsPSGAlterVol     $04
0008C320 E701                       	dc.b	smpsNoAttack, $01
0008C322 ECFC                       	smpsPSGAlterVol     $FC
0008C324 9103                       	dc.b	nE1, $03
0008C326 EC04                       	smpsPSGAlterVol     $04
0008C328 E701                       	dc.b	smpsNoAttack, $01
0008C32A ECFC                       	smpsPSGAlterVol     $FC
0008C32C 9102                       	dc.b	nE1, $02
0008C32E EC04                       	smpsPSGAlterVol     $04
0008C330 E701                       	dc.b	smpsNoAttack, $01
0008C332 ECFC                       	smpsPSGAlterVol     $FC
0008C334 9103                       	dc.b	nE1, $03
0008C336 EC0B                       	smpsPSGAlterVol     $0B
0008C338 800A                       	dc.b	nRst, $0A
0008C33A E100                       	smpsAlterNote       $00
0008C33C 01                         	dc.b	$01
0008C33D E104                       	smpsAlterNote       $04
0008C33F 01                         	dc.b	$01
0008C340 E100                       	smpsAlterNote       $00
0008C342 01                         	dc.b	$01
0008C343 E1FA                       	smpsAlterNote       $FA
0008C345 01                         	dc.b	$01
0008C346 E1F9                       	smpsAlterNote       $F9
0008C348 01                         	dc.b	$01
0008C349 E1FD                       	smpsAlterNote       $FD
0008C34B 01                         	dc.b	$01
0008C34C E103                       	smpsAlterNote       $03
0008C34E 0101                       	dc.b	$01, $01
0008C350 E100                       	smpsAlterNote       $00
0008C352 01                         	dc.b	$01
0008C353 E1FA                       	smpsAlterNote       $FA
0008C355 0101                       	dc.b	$01, $01
0008C357 E1FD                       	smpsAlterNote       $FD
0008C359 ECF5                       	smpsPSGAlterVol     $F5
0008C35B 9206                       	dc.b	nF1, $06
0008C35D EC04                       	smpsPSGAlterVol     $04
0008C35F E704                       	dc.b	smpsNoAttack, $04
0008C361 ECFC                       	smpsPSGAlterVol     $FC
0008C363 9206                       	dc.b	nF1, $06
0008C365 EC04                       	smpsPSGAlterVol     $04
0008C367 E701                       	dc.b	smpsNoAttack, $01
0008C369 EC07                       	smpsPSGAlterVol     $07
0008C36B 8006                       	dc.b	nRst, $06
0008C36D E100                       	smpsAlterNote       $00
0008C36F 01                         	dc.b	$01
0008C370 E104                       	smpsAlterNote       $04
0008C372 01                         	dc.b	$01
0008C373 E103                       	smpsAlterNote       $03
0008C375 01                         	dc.b	$01
0008C376 E1FD                       	smpsAlterNote       $FD
0008C378 01                         	dc.b	$01
0008C379 ECF5                       	smpsPSGAlterVol     $F5
0008C37B 9407                       	dc.b	nG1, $07
0008C37D EC0B                       	smpsPSGAlterVol     $0B
0008C37F 8004                       	dc.b	nRst, $04
0008C381 ECF5                       	smpsPSGAlterVol     $F5
0008C383 9406                       	dc.b	nG1, $06
0008C385 EC0B                       	smpsPSGAlterVol     $0B
0008C387 8007                       	dc.b	nRst, $07
0008C389 E103                       	smpsAlterNote       $03
0008C38B 0101                       	dc.b	$01, $01
0008C38D E1FD                       	smpsAlterNote       $FD
0008C38F 01                         	dc.b	$01
0008C390 E1F9                       	smpsAlterNote       $F9
0008C392 01                         	dc.b	$01
0008C393 E1FD                       	smpsAlterNote       $FD
0008C395 ECF5                       	smpsPSGAlterVol     $F5
0008C397 9206                       	dc.b	nF1, $06
0008C399 EC04                       	smpsPSGAlterVol     $04
0008C39B E701                       	dc.b	smpsNoAttack, $01
0008C39D EC07                       	smpsPSGAlterVol     $07
0008C39F 8003                       	dc.b	nRst, $03
0008C3A1 ECF5                       	smpsPSGAlterVol     $F5
0008C3A3 9206                       	dc.b	nF1, $06
0008C3A5 EC04                       	smpsPSGAlterVol     $04
0008C3A7 E701                       	dc.b	smpsNoAttack, $01
0008C3A9 EC07                       	smpsPSGAlterVol     $07
0008C3AB 8006                       	dc.b	nRst, $06
0008C3AD E100                       	smpsAlterNote       $00
0008C3AF 01                         	dc.b	$01
0008C3B0 E104                       	smpsAlterNote       $04
0008C3B2 01                         	dc.b	$01
0008C3B3 E100                       	smpsAlterNote       $00
0008C3B5 01                         	dc.b	$01
0008C3B6 E1FA                       	smpsAlterNote       $FA
0008C3B8 01                         	dc.b	$01
0008C3B9 E1FD                       	smpsAlterNote       $FD
0008C3BB ECF5                       	smpsPSGAlterVol     $F5
0008C3BD 9206                       	dc.b	nF1, $06
0008C3BF EC04                       	smpsPSGAlterVol     $04
0008C3C1 E701                       	dc.b	smpsNoAttack, $01
0008C3C3 EC07                       	smpsPSGAlterVol     $07
0008C3C5 8003                       	dc.b	nRst, $03
0008C3C7 ECF5                       	smpsPSGAlterVol     $F5
0008C3C9 9107                       	dc.b	nE1, $07
0008C3CB EC0B                       	smpsPSGAlterVol     $0B
0008C3CD 8006                       	dc.b	nRst, $06
0008C3CF E100                       	smpsAlterNote       $00
0008C3D1 01                         	dc.b	$01
0008C3D2 E103                       	smpsAlterNote       $03
0008C3D4 0101                       	dc.b	$01, $01
0008C3D6 E1FD                       	smpsAlterNote       $FD
0008C3D8 01                         	dc.b	$01
0008C3D9 ECF5                       	smpsPSGAlterVol     $F5
0008C3DB 9207                       	dc.b	nF1, $07
0008C3DD EC0B                       	smpsPSGAlterVol     $0B
0008C3DF 8004                       	dc.b	nRst, $04
0008C3E1 ECF5                       	smpsPSGAlterVol     $F5
0008C3E3 9206                       	dc.b	nF1, $06
0008C3E5 EC04                       	smpsPSGAlterVol     $04
0008C3E7 E701                       	dc.b	smpsNoAttack, $01
0008C3E9 EC07                       	smpsPSGAlterVol     $07
0008C3EB 8006                       	dc.b	nRst, $06
0008C3ED E103                       	smpsAlterNote       $03
0008C3EF 01                         	dc.b	$01
0008C3F0 E104                       	smpsAlterNote       $04
0008C3F2 01                         	dc.b	$01
0008C3F3 E100                       	smpsAlterNote       $00
0008C3F5 01                         	dc.b	$01
0008C3F6 E1FB                       	smpsAlterNote       $FB
0008C3F8 01                         	dc.b	$01
0008C3F9 E1FD                       	smpsAlterNote       $FD
0008C3FB ECF5                       	smpsPSGAlterVol     $F5
0008C3FD 9406                       	dc.b	nG1, $06
0008C3FF EC04                       	smpsPSGAlterVol     $04
0008C401 E701                       	dc.b	smpsNoAttack, $01
0008C403 EC07                       	smpsPSGAlterVol     $07
0008C405 8003                       	dc.b	nRst, $03
0008C407 ECF5                       	smpsPSGAlterVol     $F5
0008C409 9406                       	dc.b	nG1, $06
0008C40B EC04                       	smpsPSGAlterVol     $04
0008C40D E701                       	dc.b	smpsNoAttack, $01
0008C40F EC07                       	smpsPSGAlterVol     $07
0008C411 8006                       	dc.b	nRst, $06
0008C413 E100                       	smpsAlterNote       $00
0008C415 01                         	dc.b	$01
0008C416 E104                       	smpsAlterNote       $04
0008C418 01                         	dc.b	$01
0008C419 E100                       	smpsAlterNote       $00
0008C41B 01                         	dc.b	$01
0008C41C E1FD                       	smpsAlterNote       $FD
0008C41E 01                         	dc.b	$01
0008C41F ECF5                       	smpsPSGAlterVol     $F5
0008C421 9206                       	dc.b	nF1, $06
0008C423 EC04                       	smpsPSGAlterVol     $04
0008C425 E701                       	dc.b	smpsNoAttack, $01
0008C427 EC07                       	smpsPSGAlterVol     $07
0008C429 8003                       	dc.b	nRst, $03
0008C42B ECF5                       	smpsPSGAlterVol     $F5
0008C42D 9207                       	dc.b	nF1, $07
0008C42F EC0B                       	smpsPSGAlterVol     $0B
0008C431 8007                       	dc.b	nRst, $07
0008C433 E103                       	smpsAlterNote       $03
0008C435 0101                       	dc.b	$01, $01
0008C437 E1FD                       	smpsAlterNote       $FD
0008C439 01                         	dc.b	$01
0008C43A E1FA                       	smpsAlterNote       $FA
0008C43C 01                         	dc.b	$01
0008C43D E1FD                       	smpsAlterNote       $FD
0008C43F ECF5                       	smpsPSGAlterVol     $F5
0008C441 9206                       	dc.b	nF1, $06
0008C443 EC0B                       	smpsPSGAlterVol     $0B
0008C445 8004                       	dc.b	nRst, $04
0008C447 ECF5                       	smpsPSGAlterVol     $F5
0008C449 9206                       	dc.b	nF1, $06
0008C44B EC04                       	smpsPSGAlterVol     $04
0008C44D E701                       	dc.b	smpsNoAttack, $01
0008C44F EC07                       	smpsPSGAlterVol     $07
0008C451 8006                       	dc.b	nRst, $06
0008C453 E100                       	smpsAlterNote       $00
0008C455 01                         	dc.b	$01
0008C456 E104                       	smpsAlterNote       $04
0008C458 01                         	dc.b	$01
0008C459 E100                       	smpsAlterNote       $00
0008C45B 01                         	dc.b	$01
0008C45C E1FA                       	smpsAlterNote       $FA
0008C45E 01                         	dc.b	$01
0008C45F E1FD                       	smpsAlterNote       $FD
0008C461 ECF5                       	smpsPSGAlterVol     $F5
0008C463 9206                       	dc.b	nF1, $06
0008C465 EC04                       	smpsPSGAlterVol     $04
0008C467 E701                       	dc.b	smpsNoAttack, $01
0008C469 EC07                       	smpsPSGAlterVol     $07
0008C46B 8003                       	dc.b	nRst, $03
0008C46D ECF5                       	smpsPSGAlterVol     $F5
0008C46F 9207                       	dc.b	nF1, $07
0008C471 EC0B                       	smpsPSGAlterVol     $0B
0008C473 8006                       	dc.b	nRst, $06
0008C475 E100                       	smpsAlterNote       $00
0008C477 01                         	dc.b	$01
0008C478 E103                       	smpsAlterNote       $03
0008C47A 0101                       	dc.b	$01, $01
0008C47C E1FD                       	smpsAlterNote       $FD
0008C47E 01                         	dc.b	$01
0008C47F ECF5                       	smpsPSGAlterVol     $F5
0008C481 9207                       	dc.b	nF1, $07
0008C483 EC0B                       	smpsPSGAlterVol     $0B
0008C485 8004                       	dc.b	nRst, $04
0008C487 ECF5                       	smpsPSGAlterVol     $F5
0008C489 9206                       	dc.b	nF1, $06
0008C48B EC0B                       	smpsPSGAlterVol     $0B
0008C48D 8007                       	dc.b	nRst, $07
0008C48F E103                       	smpsAlterNote       $03
0008C491 0101                       	dc.b	$01, $01
0008C493 E100                       	smpsAlterNote       $00
0008C495 01                         	dc.b	$01
0008C496 E1FA                       	smpsAlterNote       $FA
0008C498 01                         	dc.b	$01
0008C499 E1FD                       	smpsAlterNote       $FD
0008C49B ECF5                       	smpsPSGAlterVol     $F5
0008C49D 9206                       	dc.b	nF1, $06
0008C49F EC04                       	smpsPSGAlterVol     $04
0008C4A1 E701                       	dc.b	smpsNoAttack, $01
0008C4A3 EC07                       	smpsPSGAlterVol     $07
0008C4A5 8003                       	dc.b	nRst, $03
0008C4A7 ECF5                       	smpsPSGAlterVol     $F5
0008C4A9 9206                       	dc.b	nF1, $06
0008C4AB EC04                       	smpsPSGAlterVol     $04
0008C4AD E701                       	dc.b	smpsNoAttack, $01
0008C4AF EC07                       	smpsPSGAlterVol     $07
0008C4B1 8006                       	dc.b	nRst, $06
0008C4B3 E100                       	smpsAlterNote       $00
0008C4B5 01                         	dc.b	$01
0008C4B6 E104                       	smpsAlterNote       $04
0008C4B8 01                         	dc.b	$01
0008C4B9 E100                       	smpsAlterNote       $00
0008C4BB 01                         	dc.b	$01
0008C4BC E1FD                       	smpsAlterNote       $FD
0008C4BE 01                         	dc.b	$01
0008C4BF ECF5                       	smpsPSGAlterVol     $F5
0008C4C1 9206                       	dc.b	nF1, $06
0008C4C3 EC04                       	smpsPSGAlterVol     $04
0008C4C5 E701                       	dc.b	smpsNoAttack, $01
0008C4C7 EC07                       	smpsPSGAlterVol     $07
0008C4C9 8003                       	dc.b	nRst, $03
0008C4CB ECF5                       	smpsPSGAlterVol     $F5
0008C4CD 9207                       	dc.b	nF1, $07
0008C4CF EC0B                       	smpsPSGAlterVol     $0B
0008C4D1 8007                       	dc.b	nRst, $07
0008C4D3 E104                       	smpsAlterNote       $04
0008C4D5 0101                       	dc.b	$01, $01
0008C4D7 E1FB                       	smpsAlterNote       $FB
0008C4D9 01                         	dc.b	$01
0008C4DA E1F6                       	smpsAlterNote       $F6
0008C4DC 0101                       	dc.b	$01, $01
0008C4DE E1FF                       	smpsAlterNote       $FF
0008C4E0 01                         	dc.b	$01
0008C4E1 E105                       	smpsAlterNote       $05
0008C4E3 01                         	dc.b	$01
0008C4E4 E104                       	smpsAlterNote       $04
0008C4E6 01                         	dc.b	$01
0008C4E7 E1FB                       	smpsAlterNote       $FB
0008C4E9 01                         	dc.b	$01
0008C4EA E1F5                       	smpsAlterNote       $F5
0008C4EC 01                         	dc.b	$01
0008C4ED E1FC                       	smpsAlterNote       $FC
0008C4EF ECF5                       	smpsPSGAlterVol     $F5
0008C4F1 8B0E                       	dc.b	nBb0, $0E
0008C4F3 E102                       	smpsAlterNote       $02
0008C4F5 EC0B                       	smpsPSGAlterVol     $0B
0008C4F7 8001                       	dc.b	nRst, $01
0008C4F9 E101                       	smpsAlterNote       $01
0008C4FB 01                         	dc.b	$01
0008C4FC E1FC                       	smpsAlterNote       $FC
0008C4FE 01                         	dc.b	$01
0008C4FF E1F9                       	smpsAlterNote       $F9
0008C501 0101                       	dc.b	$01, $01
0008C503 E1FF                       	smpsAlterNote       $FF
0008C505 01                         	dc.b	$01
0008C506 E102                       	smpsAlterNote       $02
0008C508 01                         	dc.b	$01
0008C509 E1FF                       	smpsAlterNote       $FF
0008C50B 01                         	dc.b	$01
0008C50C E1FC                       	smpsAlterNote       $FC
0008C50E 01                         	dc.b	$01
0008C50F E1F8                       	smpsAlterNote       $F8
0008C511 01                         	dc.b	$01
0008C512 E1FC                       	smpsAlterNote       $FC
0008C514 01                         	dc.b	$01
0008C515 E101                       	smpsAlterNote       $01
0008C517 01                         	dc.b	$01
0008C518 E102                       	smpsAlterNote       $02
0008C51A 01                         	dc.b	$01
0008C51B E1FF                       	smpsAlterNote       $FF
0008C51D 01                         	dc.b	$01
0008C51E E1FB                       	smpsAlterNote       $FB
0008C520 ECF5                       	smpsPSGAlterVol     $F5
0008C522 8D0D                       	dc.b	nC1, $0D
0008C524 E101                       	smpsAlterNote       $01
0008C526 EC0B                       	smpsPSGAlterVol     $0B
0008C528 8001                       	dc.b	nRst, $01
0008C52A E102                       	smpsAlterNote       $02
0008C52C 01                         	dc.b	$01
0008C52D E1FF                       	smpsAlterNote       $FF
0008C52F 01                         	dc.b	$01
0008C530 E1F9                       	smpsAlterNote       $F9
0008C532 0101                       	dc.b	$01, $01
0008C534 E1FC                       	smpsAlterNote       $FC
0008C536 01                         	dc.b	$01
0008C537 E101                       	smpsAlterNote       $01
0008C539 0101                       	dc.b	$01, $01
0008C53B E1FC                       	smpsAlterNote       $FC
0008C53D 01                         	dc.b	$01
0008C53E E1F9                       	smpsAlterNote       $F9
0008C540 0101                       	dc.b	$01, $01
0008C542 E1FF                       	smpsAlterNote       $FF
0008C544 01                         	dc.b	$01
0008C545 E102                       	smpsAlterNote       $02
0008C547 01                         	dc.b	$01
0008C548 E101                       	smpsAlterNote       $01
0008C54A 01                         	dc.b	$01
0008C54B E1FC                       	smpsAlterNote       $FC
0008C54D ECF5                       	smpsPSGAlterVol     $F5
0008C54F 8F0D                       	dc.b	nD1, $0D
0008C551 E1FF                       	smpsAlterNote       $FF
0008C553 EC04                       	smpsPSGAlterVol     $04
0008C555 E701                       	dc.b	smpsNoAttack, $01
0008C557 EC07                       	smpsPSGAlterVol     $07
0008C559 E103                       	smpsAlterNote       $03
0008C55B 8001                       	dc.b	nRst, $01
0008C55D E102                       	smpsAlterNote       $02
0008C55F 01                         	dc.b	$01
0008C560 E1FD                       	smpsAlterNote       $FD
0008C562 01                         	dc.b	$01
0008C563 E1F9                       	smpsAlterNote       $F9
0008C565 01                         	dc.b	$01
0008C566 E1FD                       	smpsAlterNote       $FD
0008C568 01                         	dc.b	$01
0008C569 E100                       	smpsAlterNote       $00
0008C56B 01                         	dc.b	$01
0008C56C E103                       	smpsAlterNote       $03
0008C56E 01                         	dc.b	$01
0008C56F E100                       	smpsAlterNote       $00
0008C571 01                         	dc.b	$01
0008C572 E1FA                       	smpsAlterNote       $FA
0008C574 01                         	dc.b	$01
0008C575 E1F9                       	smpsAlterNote       $F9
0008C577 01                         	dc.b	$01
0008C578 E1FD                       	smpsAlterNote       $FD
0008C57A 01                         	dc.b	$01
0008C57B E102                       	smpsAlterNote       $02
0008C57D 0101                       	dc.b	$01, $01
0008C57F E100                       	smpsAlterNote       $00
0008C581 01                         	dc.b	$01
0008C582 E1FD                       	smpsAlterNote       $FD
0008C584 ECF5                       	smpsPSGAlterVol     $F5
0008C586 910D                       	dc.b	nE1, $0D
0008C588 E103                       	smpsAlterNote       $03
0008C58A EC0B                       	smpsPSGAlterVol     $0B
0008C58C 8001 01                    	dc.b	nRst, $01, $01
0008C58F E100                       	smpsAlterNote       $00
0008C591 01                         	dc.b	$01
0008C592 E1FA                       	smpsAlterNote       $FA
0008C594 0101                       	dc.b	$01, $01
0008C596 E100                       	smpsAlterNote       $00
0008C598 01                         	dc.b	$01
0008C599 E103                       	smpsAlterNote       $03
0008C59B 01                         	dc.b	$01
0008C59C E1FD                       	smpsAlterNote       $FD
0008C59E ECF5                       	smpsPSGAlterVol     $F5
0008C5A0 9206                       	dc.b	nF1, $06
0008C5A2 EC04                       	smpsPSGAlterVol     $04
0008C5A4 E701                       	dc.b	smpsNoAttack, $01
0008C5A6 EC07                       	smpsPSGAlterVol     $07
0008C5A8 8003                       	dc.b	nRst, $03
0008C5AA ECF5                       	smpsPSGAlterVol     $F5
0008C5AC 9207                       	dc.b	nF1, $07
0008C5AE EC0B                       	smpsPSGAlterVol     $0B
0008C5B0 8006                       	dc.b	nRst, $06
0008C5B2 E100                       	smpsAlterNote       $00
0008C5B4 01                         	dc.b	$01
0008C5B5 E103                       	smpsAlterNote       $03
0008C5B7 0101                       	dc.b	$01, $01
0008C5B9 E1FD                       	smpsAlterNote       $FD
0008C5BB 01                         	dc.b	$01
0008C5BC ECF5                       	smpsPSGAlterVol     $F5
0008C5BE 9407                       	dc.b	nG1, $07
0008C5C0 EC0B                       	smpsPSGAlterVol     $0B
0008C5C2 8004                       	dc.b	nRst, $04
0008C5C4 ECF5                       	smpsPSGAlterVol     $F5
0008C5C6 9406                       	dc.b	nG1, $06
0008C5C8 EC04                       	smpsPSGAlterVol     $04
0008C5CA E701                       	dc.b	smpsNoAttack, $01
0008C5CC EC07                       	smpsPSGAlterVol     $07
0008C5CE 8006                       	dc.b	nRst, $06
0008C5D0 E103                       	smpsAlterNote       $03
0008C5D2 01                         	dc.b	$01
0008C5D3 E104                       	smpsAlterNote       $04
0008C5D5 01                         	dc.b	$01
0008C5D6 E100                       	smpsAlterNote       $00
0008C5D8 01                         	dc.b	$01
0008C5D9 E1F9                       	smpsAlterNote       $F9
0008C5DB 01                         	dc.b	$01
0008C5DC E1FD                       	smpsAlterNote       $FD
0008C5DE ECF5                       	smpsPSGAlterVol     $F5
0008C5E0 9206                       	dc.b	nF1, $06
0008C5E2 EC04                       	smpsPSGAlterVol     $04
0008C5E4 E701                       	dc.b	smpsNoAttack, $01
0008C5E6 EC07                       	smpsPSGAlterVol     $07
0008C5E8 8003                       	dc.b	nRst, $03
0008C5EA ECF5                       	smpsPSGAlterVol     $F5
0008C5EC 9206                       	dc.b	nF1, $06
0008C5EE EC04                       	smpsPSGAlterVol     $04
0008C5F0 E701                       	dc.b	smpsNoAttack, $01
0008C5F2 EC07                       	smpsPSGAlterVol     $07
0008C5F4 8006                       	dc.b	nRst, $06
0008C5F6 E100                       	smpsAlterNote       $00
0008C5F8 01                         	dc.b	$01
0008C5F9 E104                       	smpsAlterNote       $04
0008C5FB 01                         	dc.b	$01
0008C5FC E103                       	smpsAlterNote       $03
0008C5FE 01                         	dc.b	$01
0008C5FF E1FD                       	smpsAlterNote       $FD
0008C601 01                         	dc.b	$01
0008C602 ECF5                       	smpsPSGAlterVol     $F5
0008C604 9407                       	dc.b	nG1, $07
0008C606 EC0B                       	smpsPSGAlterVol     $0B
0008C608 8004                       	dc.b	nRst, $04
0008C60A ECF5                       	smpsPSGAlterVol     $F5
0008C60C 9406                       	dc.b	nG1, $06
0008C60E EC0B                       	smpsPSGAlterVol     $0B
0008C610 8007                       	dc.b	nRst, $07
0008C612 E103                       	smpsAlterNote       $03
0008C614 0101                       	dc.b	$01, $01
0008C616 E100                       	smpsAlterNote       $00
0008C618 01                         	dc.b	$01
0008C619 E1F9                       	smpsAlterNote       $F9
0008C61B 01                         	dc.b	$01
0008C61C E1FD                       	smpsAlterNote       $FD
0008C61E ECF5                       	smpsPSGAlterVol     $F5
0008C620 9206                       	dc.b	nF1, $06
0008C622 EC04                       	smpsPSGAlterVol     $04
0008C624 E701                       	dc.b	smpsNoAttack, $01
0008C626 EC07                       	smpsPSGAlterVol     $07
0008C628 8003                       	dc.b	nRst, $03
0008C62A ECF5                       	smpsPSGAlterVol     $F5
0008C62C 9206                       	dc.b	nF1, $06
0008C62E EC04                       	smpsPSGAlterVol     $04
0008C630 E701                       	dc.b	smpsNoAttack, $01
0008C632 EC07                       	smpsPSGAlterVol     $07
0008C634 8006                       	dc.b	nRst, $06
0008C636 E100                       	smpsAlterNote       $00
0008C638 01                         	dc.b	$01
0008C639 E104                       	smpsAlterNote       $04
0008C63B 01                         	dc.b	$01
0008C63C E100                       	smpsAlterNote       $00
0008C63E 01                         	dc.b	$01
0008C63F E1FB                       	smpsAlterNote       $FB
0008C641 01                         	dc.b	$01
0008C642 E1FD                       	smpsAlterNote       $FD
0008C644 ECF5                       	smpsPSGAlterVol     $F5
0008C646 9406                       	dc.b	nG1, $06
0008C648 EC04                       	smpsPSGAlterVol     $04
0008C64A E701                       	dc.b	smpsNoAttack, $01
0008C64C EC07                       	smpsPSGAlterVol     $07
0008C64E 8003                       	dc.b	nRst, $03
0008C650 ECF5                       	smpsPSGAlterVol     $F5
0008C652 9407                       	dc.b	nG1, $07
0008C654 EC0B                       	smpsPSGAlterVol     $0B
0008C656 8006                       	dc.b	nRst, $06
0008C658 E100                       	smpsAlterNote       $00
0008C65A 01                         	dc.b	$01
0008C65B E103                       	smpsAlterNote       $03
0008C65D 0101                       	dc.b	$01, $01
0008C65F E1FD                       	smpsAlterNote       $FD
0008C661 01                         	dc.b	$01
0008C662 ECF5                       	smpsPSGAlterVol     $F5
0008C664 9207                       	dc.b	nF1, $07
0008C666 EC0B                       	smpsPSGAlterVol     $0B
0008C668 8004                       	dc.b	nRst, $04
0008C66A ECF5                       	smpsPSGAlterVol     $F5
0008C66C 9206                       	dc.b	nF1, $06
0008C66E EC04                       	smpsPSGAlterVol     $04
0008C670 E701                       	dc.b	smpsNoAttack, $01
0008C672 ECFC                       	smpsPSGAlterVol     $FC
0008C674 E1FC                       	smpsAlterNote       $FC
0008C676 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008C67A EC04                       	smpsPSGAlterVol     $04
0008C67C E701                       	dc.b	smpsNoAttack, $01
0008C67E ECFC                       	smpsPSGAlterVol     $FC
0008C680 9003                       	dc.b	nEb1, $03
0008C682 E1FD                       	smpsAlterNote       $FD
0008C684 9403                       	dc.b	nG1, $03
0008C686 EC04                       	smpsPSGAlterVol     $04
0008C688 E701                       	dc.b	smpsNoAttack, $01
0008C68A E1FE                       	smpsAlterNote       $FE
0008C68C ECFC                       	smpsPSGAlterVol     $FC
0008C68E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008C692 EC04                       	smpsPSGAlterVol     $04
0008C694 E701                       	dc.b	smpsNoAttack, $01
0008C696 EC07                       	smpsPSGAlterVol     $07
0008C698 8009                       	dc.b	nRst, $09
0008C69A E100                       	smpsAlterNote       $00
0008C69C 01                         	dc.b	$01
0008C69D F6F5 19                    	smpsJump            music84_Jump07
0008C6A0                            
0008C6A0                            ; PSG2 Data
0008C6A0                            music84_PSG2:
0008C6A0 E1FC                       	smpsAlterNote       $FC
0008C6A2 EC04                       	smpsPSGAlterVol     $04
0008C6A4 8F03                       	dc.b	nD1, $03
0008C6A6 E1FD                       	smpsAlterNote       $FD
0008C6A8 9203                       	dc.b	nF1, $03
0008C6AA EC04                       	smpsPSGAlterVol     $04
0008C6AC E701                       	dc.b	smpsNoAttack, $01
0008C6AE E1FE                       	smpsAlterNote       $FE
0008C6B0 ECFC                       	smpsPSGAlterVol     $FC
0008C6B2 9603                       	dc.b	nA1, $03
0008C6B4 E1FD                       	smpsAlterNote       $FD
0008C6B6 9103                       	dc.b	nE1, $03
0008C6B8 EC04                       	smpsPSGAlterVol     $04
0008C6BA E701                       	dc.b	smpsNoAttack, $01
0008C6BC ECFC                       	smpsPSGAlterVol     $FC
0008C6BE 9403                       	dc.b	nG1, $03
0008C6C0 E1FE                       	smpsAlterNote       $FE
0008C6C2 9703                       	dc.b	nBb1, $03
0008C6C4 EC04                       	smpsPSGAlterVol     $04
0008C6C6 E701                       	dc.b	smpsNoAttack, $01
0008C6C8 E1FF                       	smpsAlterNote       $FF
0008C6CA ECFC                       	smpsPSGAlterVol     $FC
0008C6CC 9B02                       	dc.b	nD2, $02
0008C6CE EC04                       	smpsPSGAlterVol     $04
0008C6D0 E701                       	dc.b	smpsNoAttack, $01
0008C6D2 ECFC                       	smpsPSGAlterVol     $FC
0008C6D4 E1FE                       	smpsAlterNote       $FE
0008C6D6 9A03                       	dc.b	nCs2, $03
0008C6D8 EC0B                       	smpsPSGAlterVol     $0B
0008C6DA 800A                       	dc.b	nRst, $0A
0008C6DC E102                       	smpsAlterNote       $02
0008C6DE 01                         	dc.b	$01
0008C6DF E10A                       	smpsAlterNote       $0A
0008C6E1 01                         	dc.b	$01
0008C6E2 E102                       	smpsAlterNote       $02
0008C6E4 01                         	dc.b	$01
0008C6E5 E1FC                       	smpsAlterNote       $FC
0008C6E7 01                         	dc.b	$01
0008C6E8 E10A                       	smpsAlterNote       $0A
0008C6EA 01                         	dc.b	$01
0008C6EB E1FC                       	smpsAlterNote       $FC
0008C6ED 01                         	dc.b	$01
0008C6EE E108                       	smpsAlterNote       $08
0008C6F0 01                         	dc.b	$01
0008C6F1 E10A                       	smpsAlterNote       $0A
0008C6F3 01                         	dc.b	$01
0008C6F4 E102                       	smpsAlterNote       $02
0008C6F6 01                         	dc.b	$01
0008C6F7 E1F7                       	smpsAlterNote       $F7
0008C6F9 0101                       	dc.b	$01, $01
0008C6FB E102                       	smpsAlterNote       $02
0008C6FD 01                         	dc.b	$01
0008C6FE E108                       	smpsAlterNote       $08
0008C700 0101                       	dc.b	$01, $01
0008C702 E1FC                       	smpsAlterNote       $FC
0008C704 01                         	dc.b	$01
0008C705 E10A                       	smpsAlterNote       $0A
0008C707 01                         	dc.b	$01
0008C708 E1F7                       	smpsAlterNote       $F7
0008C70A 01                         	dc.b	$01
0008C70B E102                       	smpsAlterNote       $02
0008C70D 01                         	dc.b	$01
0008C70E E10A                       	smpsAlterNote       $0A
0008C710 01                         	dc.b	$01
0008C711 E102                       	smpsAlterNote       $02
0008C713 01                         	dc.b	$01
0008C714 E1FC                       	smpsAlterNote       $FC
0008C716 01                         	dc.b	$01
0008C717                            
0008C717                            music84_Jump06:
0008C717 E10A                       	smpsAlterNote       $0A
0008C719 8001                       	dc.b	nRst, $01
0008C71B E1FC                       	smpsAlterNote       $FC
0008C71D 01                         	dc.b	$01
0008C71E E108                       	smpsAlterNote       $08
0008C720 01                         	dc.b	$01
0008C721 E10A                       	smpsAlterNote       $0A
0008C723 01                         	dc.b	$01
0008C724 E1FC                       	smpsAlterNote       $FC
0008C726 ECF5                       	smpsPSGAlterVol     $F5
0008C728 8F06                       	dc.b	nD1, $06
0008C72A EC04                       	smpsPSGAlterVol     $04
0008C72C E701                       	dc.b	smpsNoAttack, $01
0008C72E EC07                       	smpsPSGAlterVol     $07
0008C730 8003                       	dc.b	nRst, $03
0008C732 ECF5                       	smpsPSGAlterVol     $F5
0008C734 8F06                       	dc.b	nD1, $06
0008C736 EC04                       	smpsPSGAlterVol     $04
0008C738 E701                       	dc.b	smpsNoAttack, $01
0008C73A EC07                       	smpsPSGAlterVol     $07
0008C73C 8006                       	dc.b	nRst, $06
0008C73E E1FF                       	smpsAlterNote       $FF
0008C740 01                         	dc.b	$01
0008C741 E102                       	smpsAlterNote       $02
0008C743 01                         	dc.b	$01
0008C744 E1FF                       	smpsAlterNote       $FF
0008C746 01                         	dc.b	$01
0008C747 E1F9                       	smpsAlterNote       $F9
0008C749 01                         	dc.b	$01
0008C74A E1FC                       	smpsAlterNote       $FC
0008C74C ECF5                       	smpsPSGAlterVol     $F5
0008C74E 9006                       	dc.b	nEb1, $06
0008C750 EC04                       	smpsPSGAlterVol     $04
0008C752 E701                       	dc.b	smpsNoAttack, $01
0008C754 EC07                       	smpsPSGAlterVol     $07
0008C756 8003                       	dc.b	nRst, $03
0008C758 ECF5                       	smpsPSGAlterVol     $F5
0008C75A 9007                       	dc.b	nEb1, $07
0008C75C EC0B                       	smpsPSGAlterVol     $0B
0008C75E 8006                       	dc.b	nRst, $06
0008C760 E1FF                       	smpsAlterNote       $FF
0008C762 01                         	dc.b	$01
0008C763 E103                       	smpsAlterNote       $03
0008C765 0101                       	dc.b	$01, $01
0008C767 E1FC                       	smpsAlterNote       $FC
0008C769 01                         	dc.b	$01
0008C76A ECF5                       	smpsPSGAlterVol     $F5
0008C76C 8F07                       	dc.b	nD1, $07
0008C76E EC0B                       	smpsPSGAlterVol     $0B
0008C770 8004                       	dc.b	nRst, $04
0008C772 ECF5                       	smpsPSGAlterVol     $F5
0008C774 8F06                       	dc.b	nD1, $06
0008C776 EC04                       	smpsPSGAlterVol     $04
0008C778 E701                       	dc.b	smpsNoAttack, $01
0008C77A EC07                       	smpsPSGAlterVol     $07
0008C77C 8006                       	dc.b	nRst, $06
0008C77E E102                       	smpsAlterNote       $02
0008C780 01                         	dc.b	$01
0008C781 E103                       	smpsAlterNote       $03
0008C783 01                         	dc.b	$01
0008C784 E1FF                       	smpsAlterNote       $FF
0008C786 01                         	dc.b	$01
0008C787 E1F9                       	smpsAlterNote       $F9
0008C789 01                         	dc.b	$01
0008C78A E1FC                       	smpsAlterNote       $FC
0008C78C ECF5                       	smpsPSGAlterVol     $F5
0008C78E 8F06                       	dc.b	nD1, $06
0008C790 EC04                       	smpsPSGAlterVol     $04
0008C792 E701                       	dc.b	smpsNoAttack, $01
0008C794 EC07                       	smpsPSGAlterVol     $07
0008C796 8003                       	dc.b	nRst, $03
0008C798 ECF5                       	smpsPSGAlterVol     $F5
0008C79A 8F06                       	dc.b	nD1, $06
0008C79C EC04                       	smpsPSGAlterVol     $04
0008C79E E701                       	dc.b	smpsNoAttack, $01
0008C7A0 EC07                       	smpsPSGAlterVol     $07
0008C7A2 8006                       	dc.b	nRst, $06
0008C7A4 E1FF                       	smpsAlterNote       $FF
0008C7A6 01                         	dc.b	$01
0008C7A7 E103                       	smpsAlterNote       $03
0008C7A9 01                         	dc.b	$01
0008C7AA E1FF                       	smpsAlterNote       $FF
0008C7AC 01                         	dc.b	$01
0008C7AD E1FC                       	smpsAlterNote       $FC
0008C7AF 01                         	dc.b	$01
0008C7B0 ECF5                       	smpsPSGAlterVol     $F5
0008C7B2 8F06                       	dc.b	nD1, $06
0008C7B4 EC04                       	smpsPSGAlterVol     $04
0008C7B6 E701                       	dc.b	smpsNoAttack, $01
0008C7B8 EC07                       	smpsPSGAlterVol     $07
0008C7BA 8003                       	dc.b	nRst, $03
0008C7BC ECF5                       	smpsPSGAlterVol     $F5
0008C7BE 8F07                       	dc.b	nD1, $07
0008C7C0 EC0B                       	smpsPSGAlterVol     $0B
0008C7C2 8007                       	dc.b	nRst, $07
0008C7C4 E101                       	smpsAlterNote       $01
0008C7C6 0101                       	dc.b	$01, $01
0008C7C8 E1FC                       	smpsAlterNote       $FC
0008C7CA 01                         	dc.b	$01
0008C7CB E1F9                       	smpsAlterNote       $F9
0008C7CD 01                         	dc.b	$01
0008C7CE E1FC                       	smpsAlterNote       $FC
0008C7D0 ECF5                       	smpsPSGAlterVol     $F5
0008C7D2 9006                       	dc.b	nEb1, $06
0008C7D4 EC0B                       	smpsPSGAlterVol     $0B
0008C7D6 8004                       	dc.b	nRst, $04
0008C7D8 ECF5                       	smpsPSGAlterVol     $F5
0008C7DA 9006                       	dc.b	nEb1, $06
0008C7DC EC04                       	smpsPSGAlterVol     $04
0008C7DE E701                       	dc.b	smpsNoAttack, $01
0008C7E0 EC07                       	smpsPSGAlterVol     $07
0008C7E2 8006                       	dc.b	nRst, $06
0008C7E4 E100                       	smpsAlterNote       $00
0008C7E6 01                         	dc.b	$01
0008C7E7 E102                       	smpsAlterNote       $02
0008C7E9 01                         	dc.b	$01
0008C7EA E100                       	smpsAlterNote       $00
0008C7EC 01                         	dc.b	$01
0008C7ED E1FD                       	smpsAlterNote       $FD
0008C7EF 01                         	dc.b	$01
0008C7F0 E1FF                       	smpsAlterNote       $FF
0008C7F2 ECF5                       	smpsPSGAlterVol     $F5
0008C7F4 9B06                       	dc.b	nD2, $06
0008C7F6 EC04                       	smpsPSGAlterVol     $04
0008C7F8 E701                       	dc.b	smpsNoAttack, $01
0008C7FA EC07                       	smpsPSGAlterVol     $07
0008C7FC 8003                       	dc.b	nRst, $03
0008C7FE ECF5                       	smpsPSGAlterVol     $F5
0008C800 9B07                       	dc.b	nD2, $07
0008C802 EC0B                       	smpsPSGAlterVol     $0B
0008C804 8006                       	dc.b	nRst, $06
0008C806 E102                       	smpsAlterNote       $02
0008C808 01                         	dc.b	$01
0008C809 E106                       	smpsAlterNote       $06
0008C80B 01                         	dc.b	$01
0008C80C E105                       	smpsAlterNote       $05
0008C80E 01                         	dc.b	$01
0008C80F E1FF                       	smpsAlterNote       $FF
0008C811 01                         	dc.b	$01
0008C812 ECF5                       	smpsPSGAlterVol     $F5
0008C814 9B07                       	dc.b	nD2, $07
0008C816 EC0B                       	smpsPSGAlterVol     $0B
0008C818 8004                       	dc.b	nRst, $04
0008C81A ECF5                       	smpsPSGAlterVol     $F5
0008C81C 9B06                       	dc.b	nD2, $06
0008C81E EC0B                       	smpsPSGAlterVol     $0B
0008C820 8007                       	dc.b	nRst, $07
0008C822 E105                       	smpsAlterNote       $05
0008C824 0101                       	dc.b	$01, $01
0008C826 E102                       	smpsAlterNote       $02
0008C828 01                         	dc.b	$01
0008C829 E1FC                       	smpsAlterNote       $FC
0008C82B 01                         	dc.b	$01
0008C82C E1FF                       	smpsAlterNote       $FF
0008C82E ECF5                       	smpsPSGAlterVol     $F5
0008C830 9B06                       	dc.b	nD2, $06
0008C832 EC04                       	smpsPSGAlterVol     $04
0008C834 E701                       	dc.b	smpsNoAttack, $01
0008C836 EC07                       	smpsPSGAlterVol     $07
0008C838 8003                       	dc.b	nRst, $03
0008C83A ECF5                       	smpsPSGAlterVol     $F5
0008C83C 9B06                       	dc.b	nD2, $06
0008C83E EC04                       	smpsPSGAlterVol     $04
0008C840 E701                       	dc.b	smpsNoAttack, $01
0008C842 EC07                       	smpsPSGAlterVol     $07
0008C844 8006                       	dc.b	nRst, $06
0008C846 E102                       	smpsAlterNote       $02
0008C848 01                         	dc.b	$01
0008C849 E106                       	smpsAlterNote       $06
0008C84B 01                         	dc.b	$01
0008C84C E102                       	smpsAlterNote       $02
0008C84E 01                         	dc.b	$01
0008C84F E1FF                       	smpsAlterNote       $FF
0008C851 01                         	dc.b	$01
0008C852 ECF5                       	smpsPSGAlterVol     $F5
0008C854 9B06                       	dc.b	nD2, $06
0008C856 EC04                       	smpsPSGAlterVol     $04
0008C858 E701                       	dc.b	smpsNoAttack, $01
0008C85A EC07                       	smpsPSGAlterVol     $07
0008C85C 8003                       	dc.b	nRst, $03
0008C85E ECF5                       	smpsPSGAlterVol     $F5
0008C860 9B07                       	dc.b	nD2, $07
0008C862 EC0B                       	smpsPSGAlterVol     $0B
0008C864 8007                       	dc.b	nRst, $07
0008C866 E105                       	smpsAlterNote       $05
0008C868 0101                       	dc.b	$01, $01
0008C86A E1FF                       	smpsAlterNote       $FF
0008C86C 01                         	dc.b	$01
0008C86D E1FC                       	smpsAlterNote       $FC
0008C86F 01                         	dc.b	$01
0008C870 E1FF                       	smpsAlterNote       $FF
0008C872 ECF5                       	smpsPSGAlterVol     $F5
0008C874 9B06                       	dc.b	nD2, $06
0008C876 EC0B                       	smpsPSGAlterVol     $0B
0008C878 8004                       	dc.b	nRst, $04
0008C87A ECF5                       	smpsPSGAlterVol     $F5
0008C87C 9B06                       	dc.b	nD2, $06
0008C87E EC04                       	smpsPSGAlterVol     $04
0008C880 E701                       	dc.b	smpsNoAttack, $01
0008C882 EC07                       	smpsPSGAlterVol     $07
0008C884 8006                       	dc.b	nRst, $06
0008C886 E105                       	smpsAlterNote       $05
0008C888 01                         	dc.b	$01
0008C889 E106                       	smpsAlterNote       $06
0008C88B 01                         	dc.b	$01
0008C88C E102                       	smpsAlterNote       $02
0008C88E 01                         	dc.b	$01
0008C88F E1FC                       	smpsAlterNote       $FC
0008C891 01                         	dc.b	$01
0008C892 E1FF                       	smpsAlterNote       $FF
0008C894 ECF5                       	smpsPSGAlterVol     $F5
0008C896 9B06                       	dc.b	nD2, $06
0008C898 EC04                       	smpsPSGAlterVol     $04
0008C89A E701                       	dc.b	smpsNoAttack, $01
0008C89C EC07                       	smpsPSGAlterVol     $07
0008C89E 8003                       	dc.b	nRst, $03
0008C8A0 ECF5                       	smpsPSGAlterVol     $F5
0008C8A2 9B06                       	dc.b	nD2, $06
0008C8A4 EC04                       	smpsPSGAlterVol     $04
0008C8A6 E701                       	dc.b	smpsNoAttack, $01
0008C8A8 EC07                       	smpsPSGAlterVol     $07
0008C8AA 8006                       	dc.b	nRst, $06
0008C8AC E102                       	smpsAlterNote       $02
0008C8AE 01                         	dc.b	$01
0008C8AF E106                       	smpsAlterNote       $06
0008C8B1 01                         	dc.b	$01
0008C8B2 E105                       	smpsAlterNote       $05
0008C8B4 01                         	dc.b	$01
0008C8B5 E1FF                       	smpsAlterNote       $FF
0008C8B7 01                         	dc.b	$01
0008C8B8 ECF5                       	smpsPSGAlterVol     $F5
0008C8BA 9B07                       	dc.b	nD2, $07
0008C8BC EC0B                       	smpsPSGAlterVol     $0B
0008C8BE 8004                       	dc.b	nRst, $04
0008C8C0 ECF5                       	smpsPSGAlterVol     $F5
0008C8C2 9B06                       	dc.b	nD2, $06
0008C8C4 EC0B                       	smpsPSGAlterVol     $0B
0008C8C6 8007                       	dc.b	nRst, $07
0008C8C8 E105                       	smpsAlterNote       $05
0008C8CA 0101                       	dc.b	$01, $01
0008C8CC E102                       	smpsAlterNote       $02
0008C8CE 01                         	dc.b	$01
0008C8CF E1FC                       	smpsAlterNote       $FC
0008C8D1 01                         	dc.b	$01
0008C8D2 E1FF                       	smpsAlterNote       $FF
0008C8D4 ECF5                       	smpsPSGAlterVol     $F5
0008C8D6 9B06                       	dc.b	nD2, $06
0008C8D8 EC04                       	smpsPSGAlterVol     $04
0008C8DA E701                       	dc.b	smpsNoAttack, $01
0008C8DC EC07                       	smpsPSGAlterVol     $07
0008C8DE 8003                       	dc.b	nRst, $03
0008C8E0 ECF5                       	smpsPSGAlterVol     $F5
0008C8E2 9B06                       	dc.b	nD2, $06
0008C8E4 EC04                       	smpsPSGAlterVol     $04
0008C8E6 E701                       	dc.b	smpsNoAttack, $01
0008C8E8 EC07                       	smpsPSGAlterVol     $07
0008C8EA 8006                       	dc.b	nRst, $06
0008C8EC E102                       	smpsAlterNote       $02
0008C8EE 01                         	dc.b	$01
0008C8EF E106                       	smpsAlterNote       $06
0008C8F1 01                         	dc.b	$01
0008C8F2 E102                       	smpsAlterNote       $02
0008C8F4 01                         	dc.b	$01
0008C8F5 E1FF                       	smpsAlterNote       $FF
0008C8F7 01                         	dc.b	$01
0008C8F8 ECF5                       	smpsPSGAlterVol     $F5
0008C8FA 9B06                       	dc.b	nD2, $06
0008C8FC EC04                       	smpsPSGAlterVol     $04
0008C8FE E701                       	dc.b	smpsNoAttack, $01
0008C900 EC07                       	smpsPSGAlterVol     $07
0008C902 8003                       	dc.b	nRst, $03
0008C904 ECF5                       	smpsPSGAlterVol     $F5
0008C906 9B07                       	dc.b	nD2, $07
0008C908 E1FE                       	smpsAlterNote       $FE
0008C90A 9706                       	dc.b	nBb1, $06
0008C90C EC04                       	smpsPSGAlterVol     $04
0008C90E E701                       	dc.b	smpsNoAttack, $01
0008C910 ECFC                       	smpsPSGAlterVol     $FC
0008C912 9703                       	dc.b	nBb1, $03
0008C914 EC04                       	smpsPSGAlterVol     $04
0008C916 E701                       	dc.b	smpsNoAttack, $01
0008C918 ECFC                       	smpsPSGAlterVol     $FC
0008C91A 9702                       	dc.b	nBb1, $02
0008C91C EC04                       	smpsPSGAlterVol     $04
0008C91E E701                       	dc.b	smpsNoAttack, $01
0008C920 ECFC                       	smpsPSGAlterVol     $FC
0008C922 9606                       	dc.b	nA1, $06
0008C924 EC04                       	smpsPSGAlterVol     $04
0008C926 E701                       	dc.b	smpsNoAttack, $01
0008C928 EC07                       	smpsPSGAlterVol     $07
0008C92A 8006                       	dc.b	nRst, $06
0008C92C E101                       	smpsAlterNote       $01
0008C92E 01                         	dc.b	$01
0008C92F E107                       	smpsAlterNote       $07
0008C931 01                         	dc.b	$01
0008C932 E101                       	smpsAlterNote       $01
0008C934 01                         	dc.b	$01
0008C935 E1F8                       	smpsAlterNote       $F8
0008C937 01                         	dc.b	$01
0008C938 E1F7                       	smpsAlterNote       $F7
0008C93A 01                         	dc.b	$01
0008C93B E1FC                       	smpsAlterNote       $FC
0008C93D 01                         	dc.b	$01
0008C93E E106                       	smpsAlterNote       $06
0008C940 01                         	dc.b	$01
0008C941 E107                       	smpsAlterNote       $07
0008C943 01                         	dc.b	$01
0008C944 E101                       	smpsAlterNote       $01
0008C946 01                         	dc.b	$01
0008C947 E1F8                       	smpsAlterNote       $F8
0008C949 0101                       	dc.b	$01, $01
0008C94B E1FC                       	smpsAlterNote       $FC
0008C94D ECF5                       	smpsPSGAlterVol     $F5
0008C94F 8F06                       	dc.b	nD1, $06
0008C951 EC04                       	smpsPSGAlterVol     $04
0008C953 E701                       	dc.b	smpsNoAttack, $01
0008C955 EC07                       	smpsPSGAlterVol     $07
0008C957 8003                       	dc.b	nRst, $03
0008C959 ECF5                       	smpsPSGAlterVol     $F5
0008C95B 8F06                       	dc.b	nD1, $06
0008C95D EC04                       	smpsPSGAlterVol     $04
0008C95F E701                       	dc.b	smpsNoAttack, $01
0008C961 EC07                       	smpsPSGAlterVol     $07
0008C963 8006                       	dc.b	nRst, $06
0008C965 E1FF                       	smpsAlterNote       $FF
0008C967 01                         	dc.b	$01
0008C968 E102                       	smpsAlterNote       $02
0008C96A 01                         	dc.b	$01
0008C96B E101                       	smpsAlterNote       $01
0008C96D 01                         	dc.b	$01
0008C96E E1FC                       	smpsAlterNote       $FC
0008C970 01                         	dc.b	$01
0008C971 ECF5                       	smpsPSGAlterVol     $F5
0008C973 9007                       	dc.b	nEb1, $07
0008C975 EC0B                       	smpsPSGAlterVol     $0B
0008C977 8004                       	dc.b	nRst, $04
0008C979 ECF5                       	smpsPSGAlterVol     $F5
0008C97B 9006                       	dc.b	nEb1, $06
0008C97D EC0B                       	smpsPSGAlterVol     $0B
0008C97F 8007                       	dc.b	nRst, $07
0008C981 E103                       	smpsAlterNote       $03
0008C983 0101                       	dc.b	$01, $01
0008C985 E1FC                       	smpsAlterNote       $FC
0008C987 01                         	dc.b	$01
0008C988 E1F9                       	smpsAlterNote       $F9
0008C98A 01                         	dc.b	$01
0008C98B E1FC                       	smpsAlterNote       $FC
0008C98D ECF5                       	smpsPSGAlterVol     $F5
0008C98F 8F06                       	dc.b	nD1, $06
0008C991 EC04                       	smpsPSGAlterVol     $04
0008C993 E701                       	dc.b	smpsNoAttack, $01
0008C995 EC07                       	smpsPSGAlterVol     $07
0008C997 8003                       	dc.b	nRst, $03
0008C999 ECF5                       	smpsPSGAlterVol     $F5
0008C99B 8F06                       	dc.b	nD1, $06
0008C99D EC04                       	smpsPSGAlterVol     $04
0008C99F E701                       	dc.b	smpsNoAttack, $01
0008C9A1 EC07                       	smpsPSGAlterVol     $07
0008C9A3 8006                       	dc.b	nRst, $06
0008C9A5 E1FF                       	smpsAlterNote       $FF
0008C9A7 01                         	dc.b	$01
0008C9A8 E103                       	smpsAlterNote       $03
0008C9AA 01                         	dc.b	$01
0008C9AB E1FF                       	smpsAlterNote       $FF
0008C9AD 01                         	dc.b	$01
0008C9AE E1F9                       	smpsAlterNote       $F9
0008C9B0 01                         	dc.b	$01
0008C9B1 E1FC                       	smpsAlterNote       $FC
0008C9B3 ECF5                       	smpsPSGAlterVol     $F5
0008C9B5 8F06                       	dc.b	nD1, $06
0008C9B7 EC04                       	smpsPSGAlterVol     $04
0008C9B9 E701                       	dc.b	smpsNoAttack, $01
0008C9BB EC07                       	smpsPSGAlterVol     $07
0008C9BD 8003                       	dc.b	nRst, $03
0008C9BF ECF5                       	smpsPSGAlterVol     $F5
0008C9C1 8F07                       	dc.b	nD1, $07
0008C9C3 EC0B                       	smpsPSGAlterVol     $0B
0008C9C5 8006                       	dc.b	nRst, $06
0008C9C7 E1FF                       	smpsAlterNote       $FF
0008C9C9 01                         	dc.b	$01
0008C9CA E102                       	smpsAlterNote       $02
0008C9CC 0101                       	dc.b	$01, $01
0008C9CE E1FC                       	smpsAlterNote       $FC
0008C9D0 01                         	dc.b	$01
0008C9D1 ECF5                       	smpsPSGAlterVol     $F5
0008C9D3 8F07                       	dc.b	nD1, $07
0008C9D5 EC0B                       	smpsPSGAlterVol     $0B
0008C9D7 8004                       	dc.b	nRst, $04
0008C9D9 ECF5                       	smpsPSGAlterVol     $F5
0008C9DB 8F06                       	dc.b	nD1, $06
0008C9DD EC04                       	smpsPSGAlterVol     $04
0008C9DF E701                       	dc.b	smpsNoAttack, $01
0008C9E1 EC07                       	smpsPSGAlterVol     $07
0008C9E3 8006                       	dc.b	nRst, $06
0008C9E5 E101                       	smpsAlterNote       $01
0008C9E7 01                         	dc.b	$01
0008C9E8 E102                       	smpsAlterNote       $02
0008C9EA 01                         	dc.b	$01
0008C9EB E1FF                       	smpsAlterNote       $FF
0008C9ED 01                         	dc.b	$01
0008C9EE E1F9                       	smpsAlterNote       $F9
0008C9F0 01                         	dc.b	$01
0008C9F1 E1FC                       	smpsAlterNote       $FC
0008C9F3 ECF5                       	smpsPSGAlterVol     $F5
0008C9F5 9006                       	dc.b	nEb1, $06
0008C9F7 EC04                       	smpsPSGAlterVol     $04
0008C9F9 E701                       	dc.b	smpsNoAttack, $01
0008C9FB EC07                       	smpsPSGAlterVol     $07
0008C9FD 8003                       	dc.b	nRst, $03
0008C9FF ECF5                       	smpsPSGAlterVol     $F5
0008CA01 9006                       	dc.b	nEb1, $06
0008CA03 EC04                       	smpsPSGAlterVol     $04
0008CA05 E701                       	dc.b	smpsNoAttack, $01
0008CA07 EC07                       	smpsPSGAlterVol     $07
0008CA09 8006                       	dc.b	nRst, $06
0008CA0B E100                       	smpsAlterNote       $00
0008CA0D 01                         	dc.b	$01
0008CA0E E102                       	smpsAlterNote       $02
0008CA10 01                         	dc.b	$01
0008CA11 E100                       	smpsAlterNote       $00
0008CA13 01                         	dc.b	$01
0008CA14 E1FF                       	smpsAlterNote       $FF
0008CA16 01                         	dc.b	$01
0008CA17 ECF5                       	smpsPSGAlterVol     $F5
0008CA19 9B06                       	dc.b	nD2, $06
0008CA1B EC04                       	smpsPSGAlterVol     $04
0008CA1D E701                       	dc.b	smpsNoAttack, $01
0008CA1F EC07                       	smpsPSGAlterVol     $07
0008CA21 8003                       	dc.b	nRst, $03
0008CA23 ECF5                       	smpsPSGAlterVol     $F5
0008CA25 9B07                       	dc.b	nD2, $07
0008CA27 EC0B                       	smpsPSGAlterVol     $0B
0008CA29 8007                       	dc.b	nRst, $07
0008CA2B E105                       	smpsAlterNote       $05
0008CA2D 0101                       	dc.b	$01, $01
0008CA2F E1FF                       	smpsAlterNote       $FF
0008CA31 01                         	dc.b	$01
0008CA32 E1FC                       	smpsAlterNote       $FC
0008CA34 01                         	dc.b	$01
0008CA35 E1FF                       	smpsAlterNote       $FF
0008CA37 ECF5                       	smpsPSGAlterVol     $F5
0008CA39 9B06                       	dc.b	nD2, $06
0008CA3B EC0B                       	smpsPSGAlterVol     $0B
0008CA3D 8004                       	dc.b	nRst, $04
0008CA3F ECF5                       	smpsPSGAlterVol     $F5
0008CA41 9B06                       	dc.b	nD2, $06
0008CA43 EC04                       	smpsPSGAlterVol     $04
0008CA45 E701                       	dc.b	smpsNoAttack, $01
0008CA47 EC07                       	smpsPSGAlterVol     $07
0008CA49 8006                       	dc.b	nRst, $06
0008CA4B E102                       	smpsAlterNote       $02
0008CA4D 01                         	dc.b	$01
0008CA4E E106                       	smpsAlterNote       $06
0008CA50 01                         	dc.b	$01
0008CA51 E102                       	smpsAlterNote       $02
0008CA53 01                         	dc.b	$01
0008CA54 E1FC                       	smpsAlterNote       $FC
0008CA56 01                         	dc.b	$01
0008CA57 E1FF                       	smpsAlterNote       $FF
0008CA59 ECF5                       	smpsPSGAlterVol     $F5
0008CA5B 9B06                       	dc.b	nD2, $06
0008CA5D EC04                       	smpsPSGAlterVol     $04
0008CA5F E701                       	dc.b	smpsNoAttack, $01
0008CA61 EC07                       	smpsPSGAlterVol     $07
0008CA63 8003                       	dc.b	nRst, $03
0008CA65 ECF5                       	smpsPSGAlterVol     $F5
0008CA67 9B07                       	dc.b	nD2, $07
0008CA69 EC0B                       	smpsPSGAlterVol     $0B
0008CA6B 8006                       	dc.b	nRst, $06
0008CA6D E102                       	smpsAlterNote       $02
0008CA6F 01                         	dc.b	$01
0008CA70 E105                       	smpsAlterNote       $05
0008CA72 0101                       	dc.b	$01, $01
0008CA74 E1FF                       	smpsAlterNote       $FF
0008CA76 01                         	dc.b	$01
0008CA77 ECF5                       	smpsPSGAlterVol     $F5
0008CA79 9B07                       	dc.b	nD2, $07
0008CA7B EC0B                       	smpsPSGAlterVol     $0B
0008CA7D 8004                       	dc.b	nRst, $04
0008CA7F ECF5                       	smpsPSGAlterVol     $F5
0008CA81 9B06                       	dc.b	nD2, $06
0008CA83 EC0B                       	smpsPSGAlterVol     $0B
0008CA85 8007                       	dc.b	nRst, $07
0008CA87 E105                       	smpsAlterNote       $05
0008CA89 0101                       	dc.b	$01, $01
0008CA8B E102                       	smpsAlterNote       $02
0008CA8D 01                         	dc.b	$01
0008CA8E E1FC                       	smpsAlterNote       $FC
0008CA90 01                         	dc.b	$01
0008CA91 E1FF                       	smpsAlterNote       $FF
0008CA93 ECF5                       	smpsPSGAlterVol     $F5
0008CA95 9B06                       	dc.b	nD2, $06
0008CA97 EC04                       	smpsPSGAlterVol     $04
0008CA99 E701                       	dc.b	smpsNoAttack, $01
0008CA9B EC07                       	smpsPSGAlterVol     $07
0008CA9D 8003                       	dc.b	nRst, $03
0008CA9F ECF5                       	smpsPSGAlterVol     $F5
0008CAA1 9B06                       	dc.b	nD2, $06
0008CAA3 EC04                       	smpsPSGAlterVol     $04
0008CAA5 E701                       	dc.b	smpsNoAttack, $01
0008CAA7 EC07                       	smpsPSGAlterVol     $07
0008CAA9 8006                       	dc.b	nRst, $06
0008CAAB E102                       	smpsAlterNote       $02
0008CAAD 01                         	dc.b	$01
0008CAAE E106                       	smpsAlterNote       $06
0008CAB0 01                         	dc.b	$01
0008CAB1 E102                       	smpsAlterNote       $02
0008CAB3 01                         	dc.b	$01
0008CAB4 E1FF                       	smpsAlterNote       $FF
0008CAB6 01                         	dc.b	$01
0008CAB7 ECF5                       	smpsPSGAlterVol     $F5
0008CAB9 9B06                       	dc.b	nD2, $06
0008CABB EC04                       	smpsPSGAlterVol     $04
0008CABD E701                       	dc.b	smpsNoAttack, $01
0008CABF EC07                       	smpsPSGAlterVol     $07
0008CAC1 8003                       	dc.b	nRst, $03
0008CAC3 ECF5                       	smpsPSGAlterVol     $F5
0008CAC5 9B07                       	dc.b	nD2, $07
0008CAC7 EC0B                       	smpsPSGAlterVol     $0B
0008CAC9 8007                       	dc.b	nRst, $07
0008CACB E105                       	smpsAlterNote       $05
0008CACD 0101                       	dc.b	$01, $01
0008CACF E1FF                       	smpsAlterNote       $FF
0008CAD1 01                         	dc.b	$01
0008CAD2 E1FC                       	smpsAlterNote       $FC
0008CAD4 01                         	dc.b	$01
0008CAD5 E1FF                       	smpsAlterNote       $FF
0008CAD7 ECF5                       	smpsPSGAlterVol     $F5
0008CAD9 9B06                       	dc.b	nD2, $06
0008CADB EC0B                       	smpsPSGAlterVol     $0B
0008CADD 8004                       	dc.b	nRst, $04
0008CADF ECF5                       	smpsPSGAlterVol     $F5
0008CAE1 9B06                       	dc.b	nD2, $06
0008CAE3 EC04                       	smpsPSGAlterVol     $04
0008CAE5 E701                       	dc.b	smpsNoAttack, $01
0008CAE7 EC07                       	smpsPSGAlterVol     $07
0008CAE9 8006                       	dc.b	nRst, $06
0008CAEB E102                       	smpsAlterNote       $02
0008CAED 01                         	dc.b	$01
0008CAEE E106                       	smpsAlterNote       $06
0008CAF0 01                         	dc.b	$01
0008CAF1 E102                       	smpsAlterNote       $02
0008CAF3 01                         	dc.b	$01
0008CAF4 E1FC                       	smpsAlterNote       $FC
0008CAF6 01                         	dc.b	$01
0008CAF7 E1FF                       	smpsAlterNote       $FF
0008CAF9 ECF5                       	smpsPSGAlterVol     $F5
0008CAFB 9B06                       	dc.b	nD2, $06
0008CAFD EC04                       	smpsPSGAlterVol     $04
0008CAFF E701                       	dc.b	smpsNoAttack, $01
0008CB01 EC07                       	smpsPSGAlterVol     $07
0008CB03 8003                       	dc.b	nRst, $03
0008CB05 ECF5                       	smpsPSGAlterVol     $F5
0008CB07 9B06                       	dc.b	nD2, $06
0008CB09 EC04                       	smpsPSGAlterVol     $04
0008CB0B E701                       	dc.b	smpsNoAttack, $01
0008CB0D EC07                       	smpsPSGAlterVol     $07
0008CB0F 8006                       	dc.b	nRst, $06
0008CB11 E102                       	smpsAlterNote       $02
0008CB13 01                         	dc.b	$01
0008CB14 E106                       	smpsAlterNote       $06
0008CB16 01                         	dc.b	$01
0008CB17 E105                       	smpsAlterNote       $05
0008CB19 01                         	dc.b	$01
0008CB1A E1FF                       	smpsAlterNote       $FF
0008CB1C 01                         	dc.b	$01
0008CB1D ECF5                       	smpsPSGAlterVol     $F5
0008CB1F 9B07                       	dc.b	nD2, $07
0008CB21 EC0B                       	smpsPSGAlterVol     $0B
0008CB23 8004                       	dc.b	nRst, $04
0008CB25 ECF5                       	smpsPSGAlterVol     $F5
0008CB27 9B06                       	dc.b	nD2, $06
0008CB29 EC0B                       	smpsPSGAlterVol     $0B
0008CB2B 8007                       	dc.b	nRst, $07
0008CB2D E105                       	smpsAlterNote       $05
0008CB2F 0101                       	dc.b	$01, $01
0008CB31 E101                       	smpsAlterNote       $01
0008CB33 01                         	dc.b	$01
0008CB34 E1FB                       	smpsAlterNote       $FB
0008CB36 01                         	dc.b	$01
0008CB37 E1FE                       	smpsAlterNote       $FE
0008CB39 ECF5                       	smpsPSGAlterVol     $F5
0008CB3B 9A06                       	dc.b	nCs2, $06
0008CB3D EC04                       	smpsPSGAlterVol     $04
0008CB3F E701                       	dc.b	smpsNoAttack, $01
0008CB41 EC07                       	smpsPSGAlterVol     $07
0008CB43 8003                       	dc.b	nRst, $03
0008CB45 ECF5                       	smpsPSGAlterVol     $F5
0008CB47 9A06                       	dc.b	nCs2, $06
0008CB49 EC04                       	smpsPSGAlterVol     $04
0008CB4B E701                       	dc.b	smpsNoAttack, $01
0008CB4D EC07                       	smpsPSGAlterVol     $07
0008CB4F 8003                       	dc.b	nRst, $03
0008CB51 E1FC                       	smpsAlterNote       $FC
0008CB53 ECF5                       	smpsPSGAlterVol     $F5
0008CB55 8F07                       	dc.b	nD1, $07
0008CB57 EC0B                       	smpsPSGAlterVol     $0B
0008CB59 8006                       	dc.b	nRst, $06
0008CB5B E1FF                       	smpsAlterNote       $FF
0008CB5D 01                         	dc.b	$01
0008CB5E E103                       	smpsAlterNote       $03
0008CB60 01                         	dc.b	$01
0008CB61 E102                       	smpsAlterNote       $02
0008CB63 01                         	dc.b	$01
0008CB64 E1FC                       	smpsAlterNote       $FC
0008CB66 01                         	dc.b	$01
0008CB67 E1F8                       	smpsAlterNote       $F8
0008CB69 01                         	dc.b	$01
0008CB6A E1FC                       	smpsAlterNote       $FC
0008CB6C 01                         	dc.b	$01
0008CB6D E1FF                       	smpsAlterNote       $FF
0008CB6F 01                         	dc.b	$01
0008CB70 E103                       	smpsAlterNote       $03
0008CB72 01                         	dc.b	$01
0008CB73 E1FC                       	smpsAlterNote       $FC
0008CB75 ECF5                       	smpsPSGAlterVol     $F5
0008CB77 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008CB7B EC04                       	smpsPSGAlterVol     $04
0008CB7D E701                       	dc.b	smpsNoAttack, $01
0008CB7F EC07                       	smpsPSGAlterVol     $07
0008CB81 8009                       	dc.b	nRst, $09
0008CB83 E1FF                       	smpsAlterNote       $FF
0008CB85 01                         	dc.b	$01
0008CB86 E103                       	smpsAlterNote       $03
0008CB88 01                         	dc.b	$01
0008CB89 E102                       	smpsAlterNote       $02
0008CB8B 01                         	dc.b	$01
0008CB8C E1FC                       	smpsAlterNote       $FC
0008CB8E 01                         	dc.b	$01
0008CB8F E1F8                       	smpsAlterNote       $F8
0008CB91 01                         	dc.b	$01
0008CB92 E1FC                       	smpsAlterNote       $FC
0008CB94 01                         	dc.b	$01
0008CB95 E1FF                       	smpsAlterNote       $FF
0008CB97 01                         	dc.b	$01
0008CB98 E103                       	smpsAlterNote       $03
0008CB9A 01                         	dc.b	$01
0008CB9B E1FF                       	smpsAlterNote       $FF
0008CB9D 01                         	dc.b	$01
0008CB9E E1F9                       	smpsAlterNote       $F9
0008CBA0 01                         	dc.b	$01
0008CBA1 E1F8                       	smpsAlterNote       $F8
0008CBA3 01                         	dc.b	$01
0008CBA4 E1FC                       	smpsAlterNote       $FC
0008CBA6 01                         	dc.b	$01
0008CBA7 E102                       	smpsAlterNote       $02
0008CBA9 0101                       	dc.b	$01, $01
0008CBAB E1FF                       	smpsAlterNote       $FF
0008CBAD 01                         	dc.b	$01
0008CBAE E1FC                       	smpsAlterNote       $FC
0008CBB0 ECF5                       	smpsPSGAlterVol     $F5
0008CBB2 8F02                       	dc.b	nD1, $02
0008CBB4 EC04                       	smpsPSGAlterVol     $04
0008CBB6 E701                       	dc.b	smpsNoAttack, $01
0008CBB8 ECFC                       	smpsPSGAlterVol     $FC
0008CBBA E1FB                       	smpsAlterNote       $FB
0008CBBC 8D06                       	dc.b	nC1, $06
0008CBBE EC04                       	smpsPSGAlterVol     $04
0008CBC0 E701                       	dc.b	smpsNoAttack, $01
0008CBC2 EC07                       	smpsPSGAlterVol     $07
0008CBC4 8006                       	dc.b	nRst, $06
0008CBC6 E1FE                       	smpsAlterNote       $FE
0008CBC8 01                         	dc.b	$01
0008CBC9 E102                       	smpsAlterNote       $02
0008CBCB 01                         	dc.b	$01
0008CBCC E1FE                       	smpsAlterNote       $FE
0008CBCE 01                         	dc.b	$01
0008CBCF E1FB                       	smpsAlterNote       $FB
0008CBD1 01                         	dc.b	$01
0008CBD2 E1F7                       	smpsAlterNote       $F7
0008CBD4 01                         	dc.b	$01
0008CBD5 E1FB                       	smpsAlterNote       $FB
0008CBD7 01                         	dc.b	$01
0008CBD8 E101                       	smpsAlterNote       $01
0008CBDA 01                         	dc.b	$01
0008CBDB E102                       	smpsAlterNote       $02
0008CBDD 01                         	dc.b	$01
0008CBDE E1FB                       	smpsAlterNote       $FB
0008CBE0 ECF5                       	smpsPSGAlterVol     $F5
0008CBE2 8D02                       	dc.b	nC1, $02
0008CBE4 EC04                       	smpsPSGAlterVol     $04
0008CBE6 E701                       	dc.b	smpsNoAttack, $01
0008CBE8 E1FC                       	smpsAlterNote       $FC
0008CBEA ECFC                       	smpsPSGAlterVol     $FC
0008CBEC 8F0D                       	dc.b	nD1, $0D
0008CBEE E1FF                       	smpsAlterNote       $FF
0008CBF0 E701                       	dc.b	smpsNoAttack, $01
0008CBF2 E103                       	smpsAlterNote       $03
0008CBF4 E701                       	dc.b	smpsNoAttack, $01
0008CBF6 E1FF                       	smpsAlterNote       $FF
0008CBF8 E701                       	dc.b	smpsNoAttack, $01
0008CBFA E1FC                       	smpsAlterNote       $FC
0008CBFC E701                       	dc.b	smpsNoAttack, $01
0008CBFE E1F8                       	smpsAlterNote       $F8
0008CC00 E701                       	dc.b	smpsNoAttack, $01
0008CC02 E1FC                       	smpsAlterNote       $FC
0008CC04 E701                       	dc.b	smpsNoAttack, $01
0008CC06 E102                       	smpsAlterNote       $02
0008CC08 E701                       	dc.b	smpsNoAttack, $01
0008CC0A E103                       	smpsAlterNote       $03
0008CC0C E701                       	dc.b	smpsNoAttack, $01
0008CC0E E1FF                       	smpsAlterNote       $FF
0008CC10 E701                       	dc.b	smpsNoAttack, $01
0008CC12 E1F9                       	smpsAlterNote       $F9
0008CC14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC18 E1FC                       	smpsAlterNote       $FC
0008CC1A E701                       	dc.b	smpsNoAttack, $01
0008CC1C E102                       	smpsAlterNote       $02
0008CC1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC22 E1FC                       	smpsAlterNote       $FC
0008CC24 E701                       	dc.b	smpsNoAttack, $01
0008CC26 E1F9                       	smpsAlterNote       $F9
0008CC28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC2C E1FF                       	smpsAlterNote       $FF
0008CC2E EC04                       	smpsPSGAlterVol     $04
0008CC30 E701                       	dc.b	smpsNoAttack, $01
0008CC32 EC07                       	smpsPSGAlterVol     $07
0008CC34 E103                       	smpsAlterNote       $03
0008CC36 8001                       	dc.b	nRst, $01
0008CC38 E102                       	smpsAlterNote       $02
0008CC3A 01                         	dc.b	$01
0008CC3B E1FB                       	smpsAlterNote       $FB
0008CC3D 01                         	dc.b	$01
0008CC3E E1F7                       	smpsAlterNote       $F7
0008CC40 01                         	dc.b	$01
0008CC41 E1FB                       	smpsAlterNote       $FB
0008CC43 01                         	dc.b	$01
0008CC44 E102                       	smpsAlterNote       $02
0008CC46 01                         	dc.b	$01
0008CC47 E103                       	smpsAlterNote       $03
0008CC49 01                         	dc.b	$01
0008CC4A E1FB                       	smpsAlterNote       $FB
0008CC4C ECF5                       	smpsPSGAlterVol     $F5
0008CC4E 8E06                       	dc.b	nCs1, $06
0008CC50 EC04                       	smpsPSGAlterVol     $04
0008CC52 E701                       	dc.b	smpsNoAttack, $01
0008CC54 EC07                       	smpsPSGAlterVol     $07
0008CC56 8003                       	dc.b	nRst, $03
0008CC58 ECF5                       	smpsPSGAlterVol     $F5
0008CC5A 8E06                       	dc.b	nCs1, $06
0008CC5C EC04                       	smpsPSGAlterVol     $04
0008CC5E E701                       	dc.b	smpsNoAttack, $01
0008CC60 EC07                       	smpsPSGAlterVol     $07
0008CC62 8006                       	dc.b	nRst, $06
0008CC64 E1FE                       	smpsAlterNote       $FE
0008CC66 01                         	dc.b	$01
0008CC67 E102                       	smpsAlterNote       $02
0008CC69 01                         	dc.b	$01
0008CC6A E1FE                       	smpsAlterNote       $FE
0008CC6C 01                         	dc.b	$01
0008CC6D E1F9                       	smpsAlterNote       $F9
0008CC6F 01                         	dc.b	$01
0008CC70 E1FC                       	smpsAlterNote       $FC
0008CC72 ECF5                       	smpsPSGAlterVol     $F5
0008CC74 8F06                       	dc.b	nD1, $06
0008CC76 EC04                       	smpsPSGAlterVol     $04
0008CC78 E701                       	dc.b	smpsNoAttack, $01
0008CC7A EC07                       	smpsPSGAlterVol     $07
0008CC7C 8003                       	dc.b	nRst, $03
0008CC7E ECF5                       	smpsPSGAlterVol     $F5
0008CC80 8F07                       	dc.b	nD1, $07
0008CC82 EC0B                       	smpsPSGAlterVol     $0B
0008CC84 8006                       	dc.b	nRst, $06
0008CC86 E1FF                       	smpsAlterNote       $FF
0008CC88 01                         	dc.b	$01
0008CC89 E102                       	smpsAlterNote       $02
0008CC8B 0101                       	dc.b	$01, $01
0008CC8D E1FB                       	smpsAlterNote       $FB
0008CC8F 01                         	dc.b	$01
0008CC90 ECF5                       	smpsPSGAlterVol     $F5
0008CC92 8E07                       	dc.b	nCs1, $07
0008CC94 EC0B                       	smpsPSGAlterVol     $0B
0008CC96 8004                       	dc.b	nRst, $04
0008CC98 ECF5                       	smpsPSGAlterVol     $F5
0008CC9A 8E06                       	dc.b	nCs1, $06
0008CC9C EC04                       	smpsPSGAlterVol     $04
0008CC9E E701                       	dc.b	smpsNoAttack, $01
0008CCA0 EC07                       	smpsPSGAlterVol     $07
0008CCA2 8006                       	dc.b	nRst, $06
0008CCA4 E101                       	smpsAlterNote       $01
0008CCA6 01                         	dc.b	$01
0008CCA7 E102                       	smpsAlterNote       $02
0008CCA9 01                         	dc.b	$01
0008CCAA E1FE                       	smpsAlterNote       $FE
0008CCAC 01                         	dc.b	$01
0008CCAD E1F8                       	smpsAlterNote       $F8
0008CCAF 01                         	dc.b	$01
0008CCB0 E1FB                       	smpsAlterNote       $FB
0008CCB2 ECF5                       	smpsPSGAlterVol     $F5
0008CCB4 8E06                       	dc.b	nCs1, $06
0008CCB6 EC04                       	smpsPSGAlterVol     $04
0008CCB8 E701                       	dc.b	smpsNoAttack, $01
0008CCBA EC07                       	smpsPSGAlterVol     $07
0008CCBC 8003                       	dc.b	nRst, $03
0008CCBE ECF5                       	smpsPSGAlterVol     $F5
0008CCC0 8E06                       	dc.b	nCs1, $06
0008CCC2 EC04                       	smpsPSGAlterVol     $04
0008CCC4 E701                       	dc.b	smpsNoAttack, $01
0008CCC6 EC07                       	smpsPSGAlterVol     $07
0008CCC8 8004                       	dc.b	nRst, $04
0008CCCA E1FC                       	smpsAlterNote       $FC
0008CCCC ECF5                       	smpsPSGAlterVol     $F5
0008CCCE 8F06                       	dc.b	nD1, $06
0008CCD0 EC0B                       	smpsPSGAlterVol     $0B
0008CCD2 8006                       	dc.b	nRst, $06
0008CCD4 E1FF                       	smpsAlterNote       $FF
0008CCD6 01                         	dc.b	$01
0008CCD7 E102                       	smpsAlterNote       $02
0008CCD9 0101                       	dc.b	$01, $01
0008CCDB E1FC                       	smpsAlterNote       $FC
0008CCDD 01                         	dc.b	$01
0008CCDE E1F8                       	smpsAlterNote       $F8
0008CCE0 01                         	dc.b	$01
0008CCE1 E1F9                       	smpsAlterNote       $F9
0008CCE3 01                         	dc.b	$01
0008CCE4 E1FF                       	smpsAlterNote       $FF
0008CCE6 01                         	dc.b	$01
0008CCE7 E103                       	smpsAlterNote       $03
0008CCE9 01                         	dc.b	$01
0008CCEA E1FC                       	smpsAlterNote       $FC
0008CCEC ECF5                       	smpsPSGAlterVol     $F5
0008CCEE 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008CCF2 EC04                       	smpsPSGAlterVol     $04
0008CCF4 E701                       	dc.b	smpsNoAttack, $01
0008CCF6 EC07                       	smpsPSGAlterVol     $07
0008CCF8 8009                       	dc.b	nRst, $09
0008CCFA E1FF                       	smpsAlterNote       $FF
0008CCFC 01                         	dc.b	$01
0008CCFD E102                       	smpsAlterNote       $02
0008CCFF 0101                       	dc.b	$01, $01
0008CD01 E1FC                       	smpsAlterNote       $FC
0008CD03 01                         	dc.b	$01
0008CD04 E1F8                       	smpsAlterNote       $F8
0008CD06 01                         	dc.b	$01
0008CD07 E1F9                       	smpsAlterNote       $F9
0008CD09 01                         	dc.b	$01
0008CD0A E1FF                       	smpsAlterNote       $FF
0008CD0C 01                         	dc.b	$01
0008CD0D E103                       	smpsAlterNote       $03
0008CD0F 01                         	dc.b	$01
0008CD10 E1FF                       	smpsAlterNote       $FF
0008CD12 01                         	dc.b	$01
0008CD13 E1FC                       	smpsAlterNote       $FC
0008CD15 01                         	dc.b	$01
0008CD16 E1F8                       	smpsAlterNote       $F8
0008CD18 01                         	dc.b	$01
0008CD19 E1FC                       	smpsAlterNote       $FC
0008CD1B 01                         	dc.b	$01
0008CD1C E102                       	smpsAlterNote       $02
0008CD1E 01                         	dc.b	$01
0008CD1F E103                       	smpsAlterNote       $03
0008CD21 01                         	dc.b	$01
0008CD22 E1FF                       	smpsAlterNote       $FF
0008CD24 01                         	dc.b	$01
0008CD25 E1FC                       	smpsAlterNote       $FC
0008CD27 ECF5                       	smpsPSGAlterVol     $F5
0008CD29 8F03                       	dc.b	nD1, $03
0008CD2B E1FB                       	smpsAlterNote       $FB
0008CD2D 8D06                       	dc.b	nC1, $06
0008CD2F EC04                       	smpsPSGAlterVol     $04
0008CD31 E701                       	dc.b	smpsNoAttack, $01
0008CD33 EC07                       	smpsPSGAlterVol     $07
0008CD35 8006                       	dc.b	nRst, $06
0008CD37 E1FE                       	smpsAlterNote       $FE
0008CD39 01                         	dc.b	$01
0008CD3A E102                       	smpsAlterNote       $02
0008CD3C 01                         	dc.b	$01
0008CD3D E101                       	smpsAlterNote       $01
0008CD3F 01                         	dc.b	$01
0008CD40 E1FB                       	smpsAlterNote       $FB
0008CD42 01                         	dc.b	$01
0008CD43 E1F7                       	smpsAlterNote       $F7
0008CD45 01                         	dc.b	$01
0008CD46 E1FB                       	smpsAlterNote       $FB
0008CD48 01                         	dc.b	$01
0008CD49 E1FE                       	smpsAlterNote       $FE
0008CD4B 01                         	dc.b	$01
0008CD4C E102                       	smpsAlterNote       $02
0008CD4E 01                         	dc.b	$01
0008CD4F E1FB                       	smpsAlterNote       $FB
0008CD51 ECF5                       	smpsPSGAlterVol     $F5
0008CD53 8D03                       	dc.b	nC1, $03
0008CD55 E1FC                       	smpsAlterNote       $FC
0008CD57 8F0D                       	dc.b	nD1, $0D
0008CD59 E1FF                       	smpsAlterNote       $FF
0008CD5B E701                       	dc.b	smpsNoAttack, $01
0008CD5D E103                       	smpsAlterNote       $03
0008CD5F E701                       	dc.b	smpsNoAttack, $01
0008CD61 E1FF                       	smpsAlterNote       $FF
0008CD63 E701                       	dc.b	smpsNoAttack, $01
0008CD65 E1FC                       	smpsAlterNote       $FC
0008CD67 E701                       	dc.b	smpsNoAttack, $01
0008CD69 E1F8                       	smpsAlterNote       $F8
0008CD6B E701                       	dc.b	smpsNoAttack, $01
0008CD6D E1FC                       	smpsAlterNote       $FC
0008CD6F E701                       	dc.b	smpsNoAttack, $01
0008CD71 E102                       	smpsAlterNote       $02
0008CD73 E701                       	dc.b	smpsNoAttack, $01
0008CD75 E103                       	smpsAlterNote       $03
0008CD77 E701                       	dc.b	smpsNoAttack, $01
0008CD79 E1FF                       	smpsAlterNote       $FF
0008CD7B E701                       	dc.b	smpsNoAttack, $01
0008CD7D E1F9                       	smpsAlterNote       $F9
0008CD7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD83 E1FC                       	smpsAlterNote       $FC
0008CD85 E701                       	dc.b	smpsNoAttack, $01
0008CD87 E102                       	smpsAlterNote       $02
0008CD89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD8D E1FF                       	smpsAlterNote       $FF
0008CD8F E701                       	dc.b	smpsNoAttack, $01
0008CD91 E1F9                       	smpsAlterNote       $F9
0008CD93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD97 E1FF                       	smpsAlterNote       $FF
0008CD99 EC04                       	smpsPSGAlterVol     $04
0008CD9B E701                       	dc.b	smpsNoAttack, $01
0008CD9D EC07                       	smpsPSGAlterVol     $07
0008CD9F E103                       	smpsAlterNote       $03
0008CDA1 8001                       	dc.b	nRst, $01
0008CDA3 E102                       	smpsAlterNote       $02
0008CDA5 01                         	dc.b	$01
0008CDA6 E1FB                       	smpsAlterNote       $FB
0008CDA8 01                         	dc.b	$01
0008CDA9 E1F7                       	smpsAlterNote       $F7
0008CDAB 01                         	dc.b	$01
0008CDAC E1FB                       	smpsAlterNote       $FB
0008CDAE 01                         	dc.b	$01
0008CDAF E1FF                       	smpsAlterNote       $FF
0008CDB1 01                         	dc.b	$01
0008CDB2 E103                       	smpsAlterNote       $03
0008CDB4 01                         	dc.b	$01
0008CDB5 E1FB                       	smpsAlterNote       $FB
0008CDB7 ECF5                       	smpsPSGAlterVol     $F5
0008CDB9 8E06                       	dc.b	nCs1, $06
0008CDBB EC04                       	smpsPSGAlterVol     $04
0008CDBD E701                       	dc.b	smpsNoAttack, $01
0008CDBF EC07                       	smpsPSGAlterVol     $07
0008CDC1 8003                       	dc.b	nRst, $03
0008CDC3 ECF5                       	smpsPSGAlterVol     $F5
0008CDC5 8E06                       	dc.b	nCs1, $06
0008CDC7 EC04                       	smpsPSGAlterVol     $04
0008CDC9 E701                       	dc.b	smpsNoAttack, $01
0008CDCB EC07                       	smpsPSGAlterVol     $07
0008CDCD 8006                       	dc.b	nRst, $06
0008CDCF E1FE                       	smpsAlterNote       $FE
0008CDD1 01                         	dc.b	$01
0008CDD2 E102                       	smpsAlterNote       $02
0008CDD4 01                         	dc.b	$01
0008CDD5 E1FE                       	smpsAlterNote       $FE
0008CDD7 01                         	dc.b	$01
0008CDD8 E1FC                       	smpsAlterNote       $FC
0008CDDA 01                         	dc.b	$01
0008CDDB ECF5                       	smpsPSGAlterVol     $F5
0008CDDD 8F06                       	dc.b	nD1, $06
0008CDDF EC04                       	smpsPSGAlterVol     $04
0008CDE1 E701                       	dc.b	smpsNoAttack, $01
0008CDE3 EC07                       	smpsPSGAlterVol     $07
0008CDE5 8003                       	dc.b	nRst, $03
0008CDE7 ECF5                       	smpsPSGAlterVol     $F5
0008CDE9 8F07                       	dc.b	nD1, $07
0008CDEB EC0B                       	smpsPSGAlterVol     $0B
0008CDED 8007                       	dc.b	nRst, $07
0008CDEF E102                       	smpsAlterNote       $02
0008CDF1 0101                       	dc.b	$01, $01
0008CDF3 E1FB                       	smpsAlterNote       $FB
0008CDF5 01                         	dc.b	$01
0008CDF6 E1F8                       	smpsAlterNote       $F8
0008CDF8 01                         	dc.b	$01
0008CDF9 E1FB                       	smpsAlterNote       $FB
0008CDFB ECF5                       	smpsPSGAlterVol     $F5
0008CDFD 8E06                       	dc.b	nCs1, $06
0008CDFF EC0B                       	smpsPSGAlterVol     $0B
0008CE01 8004                       	dc.b	nRst, $04
0008CE03 ECF5                       	smpsPSGAlterVol     $F5
0008CE05 8E06                       	dc.b	nCs1, $06
0008CE07 EC04                       	smpsPSGAlterVol     $04
0008CE09 E701                       	dc.b	smpsNoAttack, $01
0008CE0B EC07                       	smpsPSGAlterVol     $07
0008CE0D 8006                       	dc.b	nRst, $06
0008CE0F E1FE                       	smpsAlterNote       $FE
0008CE11 01                         	dc.b	$01
0008CE12 E102                       	smpsAlterNote       $02
0008CE14 01                         	dc.b	$01
0008CE15 E1FE                       	smpsAlterNote       $FE
0008CE17 01                         	dc.b	$01
0008CE18 E1F9                       	smpsAlterNote       $F9
0008CE1A 01                         	dc.b	$01
0008CE1B E1FC                       	smpsAlterNote       $FC
0008CE1D ECF5                       	smpsPSGAlterVol     $F5
0008CE1F 8F06                       	dc.b	nD1, $06
0008CE21 EC04                       	smpsPSGAlterVol     $04
0008CE23 E701                       	dc.b	smpsNoAttack, $01
0008CE25 EC07                       	smpsPSGAlterVol     $07
0008CE27 8003                       	dc.b	nRst, $03
0008CE29 ECF5                       	smpsPSGAlterVol     $F5
0008CE2B 8F06                       	dc.b	nD1, $06
0008CE2D EC04                       	smpsPSGAlterVol     $04
0008CE2F E701                       	dc.b	smpsNoAttack, $01
0008CE31 EC07                       	smpsPSGAlterVol     $07
0008CE33 8006                       	dc.b	nRst, $06
0008CE35 E1FF                       	smpsAlterNote       $FF
0008CE37 01                         	dc.b	$01
0008CE38 E103                       	smpsAlterNote       $03
0008CE3A 01                         	dc.b	$01
0008CE3B E102                       	smpsAlterNote       $02
0008CE3D 01                         	dc.b	$01
0008CE3E E1FB                       	smpsAlterNote       $FB
0008CE40 01                         	dc.b	$01
0008CE41 ECF5                       	smpsPSGAlterVol     $F5
0008CE43 8E07                       	dc.b	nCs1, $07
0008CE45 EC0B                       	smpsPSGAlterVol     $0B
0008CE47 8004                       	dc.b	nRst, $04
0008CE49 ECF5                       	smpsPSGAlterVol     $F5
0008CE4B 8E06                       	dc.b	nCs1, $06
0008CE4D EC0B                       	smpsPSGAlterVol     $0B
0008CE4F 8007                       	dc.b	nRst, $07
0008CE51 E101                       	smpsAlterNote       $01
0008CE53 0101                       	dc.b	$01, $01
0008CE55 E1FE                       	smpsAlterNote       $FE
0008CE57 01                         	dc.b	$01
0008CE58 E1F9                       	smpsAlterNote       $F9
0008CE5A 01                         	dc.b	$01
0008CE5B E1FC                       	smpsAlterNote       $FC
0008CE5D ECF5                       	smpsPSGAlterVol     $F5
0008CE5F 8F06                       	dc.b	nD1, $06
0008CE61 EC04                       	smpsPSGAlterVol     $04
0008CE63 E701                       	dc.b	smpsNoAttack, $01
0008CE65 EC07                       	smpsPSGAlterVol     $07
0008CE67 8003                       	dc.b	nRst, $03
0008CE69 ECF5                       	smpsPSGAlterVol     $F5
0008CE6B 8F06                       	dc.b	nD1, $06
0008CE6D EC04                       	smpsPSGAlterVol     $04
0008CE6F E701                       	dc.b	smpsNoAttack, $01
0008CE71 EC07                       	smpsPSGAlterVol     $07
0008CE73 8006                       	dc.b	nRst, $06
0008CE75 E1FF                       	smpsAlterNote       $FF
0008CE77 01                         	dc.b	$01
0008CE78 E103                       	smpsAlterNote       $03
0008CE7A 01                         	dc.b	$01
0008CE7B E1FF                       	smpsAlterNote       $FF
0008CE7D 01                         	dc.b	$01
0008CE7E E1FB                       	smpsAlterNote       $FB
0008CE80 01                         	dc.b	$01
0008CE81 ECF5                       	smpsPSGAlterVol     $F5
0008CE83 8E06                       	dc.b	nCs1, $06
0008CE85 EC04                       	smpsPSGAlterVol     $04
0008CE87 E701                       	dc.b	smpsNoAttack, $01
0008CE89 EC07                       	smpsPSGAlterVol     $07
0008CE8B 8003                       	dc.b	nRst, $03
0008CE8D ECF5                       	smpsPSGAlterVol     $F5
0008CE8F 8E07                       	dc.b	nCs1, $07
0008CE91 E1FF                       	smpsAlterNote       $FF
0008CE93 9B06                       	dc.b	nD2, $06
0008CE95 EC04                       	smpsPSGAlterVol     $04
0008CE97 E701                       	dc.b	smpsNoAttack, $01
0008CE99 ECFC                       	smpsPSGAlterVol     $FC
0008CE9B 9B03                       	dc.b	nD2, $03
0008CE9D EC04                       	smpsPSGAlterVol     $04
0008CE9F E701                       	dc.b	smpsNoAttack, $01
0008CEA1 ECFC                       	smpsPSGAlterVol     $FC
0008CEA3 9B02                       	dc.b	nD2, $02
0008CEA5 EC04                       	smpsPSGAlterVol     $04
0008CEA7 E701                       	dc.b	smpsNoAttack, $01
0008CEA9 ECFC                       	smpsPSGAlterVol     $FC
0008CEAB E1FE                       	smpsAlterNote       $FE
0008CEAD 9A03                       	dc.b	nCs2, $03
0008CEAF EC0B                       	smpsPSGAlterVol     $0B
0008CEB1 800A                       	dc.b	nRst, $0A
0008CEB3 E102                       	smpsAlterNote       $02
0008CEB5 01                         	dc.b	$01
0008CEB6 E10A                       	smpsAlterNote       $0A
0008CEB8 01                         	dc.b	$01
0008CEB9 E102                       	smpsAlterNote       $02
0008CEBB 01                         	dc.b	$01
0008CEBC E1F7                       	smpsAlterNote       $F7
0008CEBE 01                         	dc.b	$01
0008CEBF E10A                       	smpsAlterNote       $0A
0008CEC1 01                         	dc.b	$01
0008CEC2 E1FC                       	smpsAlterNote       $FC
0008CEC4 01                         	dc.b	$01
0008CEC5 E108                       	smpsAlterNote       $08
0008CEC7 0101                       	dc.b	$01, $01
0008CEC9 E102                       	smpsAlterNote       $02
0008CECB 01                         	dc.b	$01
0008CECC E1F7                       	smpsAlterNote       $F7
0008CECE 0101                       	dc.b	$01, $01
0008CED0 E1FC                       	smpsAlterNote       $FC
0008CED2 ECF5                       	smpsPSGAlterVol     $F5
0008CED4 8F06                       	dc.b	nD1, $06
0008CED6 EC04                       	smpsPSGAlterVol     $04
0008CED8 E701                       	dc.b	smpsNoAttack, $01
0008CEDA EC07                       	smpsPSGAlterVol     $07
0008CEDC 8003                       	dc.b	nRst, $03
0008CEDE ECF5                       	smpsPSGAlterVol     $F5
0008CEE0 8F06                       	dc.b	nD1, $06
0008CEE2 EC04                       	smpsPSGAlterVol     $04
0008CEE4 E701                       	dc.b	smpsNoAttack, $01
0008CEE6 EC07                       	smpsPSGAlterVol     $07
0008CEE8 8006                       	dc.b	nRst, $06
0008CEEA E1FF                       	smpsAlterNote       $FF
0008CEEC 01                         	dc.b	$01
0008CEED E102                       	smpsAlterNote       $02
0008CEEF 01                         	dc.b	$01
0008CEF0 E101                       	smpsAlterNote       $01
0008CEF2 01                         	dc.b	$01
0008CEF3 E1FC                       	smpsAlterNote       $FC
0008CEF5 01                         	dc.b	$01
0008CEF6 ECF5                       	smpsPSGAlterVol     $F5
0008CEF8 9007                       	dc.b	nEb1, $07
0008CEFA EC0B                       	smpsPSGAlterVol     $0B
0008CEFC 8004                       	dc.b	nRst, $04
0008CEFE ECF5                       	smpsPSGAlterVol     $F5
0008CF00 9006                       	dc.b	nEb1, $06
0008CF02 EC0B                       	smpsPSGAlterVol     $0B
0008CF04 8007                       	dc.b	nRst, $07
0008CF06 E103                       	smpsAlterNote       $03
0008CF08 0101                       	dc.b	$01, $01
0008CF0A E1FF                       	smpsAlterNote       $FF
0008CF0C 01                         	dc.b	$01
0008CF0D E1F9                       	smpsAlterNote       $F9
0008CF0F 01                         	dc.b	$01
0008CF10 E1FC                       	smpsAlterNote       $FC
0008CF12 ECF5                       	smpsPSGAlterVol     $F5
0008CF14 8F06                       	dc.b	nD1, $06
0008CF16 EC04                       	smpsPSGAlterVol     $04
0008CF18 E701                       	dc.b	smpsNoAttack, $01
0008CF1A EC07                       	smpsPSGAlterVol     $07
0008CF1C 8003                       	dc.b	nRst, $03
0008CF1E ECF5                       	smpsPSGAlterVol     $F5
0008CF20 8F06                       	dc.b	nD1, $06
0008CF22 EC04                       	smpsPSGAlterVol     $04
0008CF24 E701                       	dc.b	smpsNoAttack, $01
0008CF26 EC07                       	smpsPSGAlterVol     $07
0008CF28 8006                       	dc.b	nRst, $06
0008CF2A E1FF                       	smpsAlterNote       $FF
0008CF2C 01                         	dc.b	$01
0008CF2D E103                       	smpsAlterNote       $03
0008CF2F 01                         	dc.b	$01
0008CF30 E1FF                       	smpsAlterNote       $FF
0008CF32 01                         	dc.b	$01
0008CF33 E1F9                       	smpsAlterNote       $F9
0008CF35 01                         	dc.b	$01
0008CF36 E1FC                       	smpsAlterNote       $FC
0008CF38 ECF5                       	smpsPSGAlterVol     $F5
0008CF3A 8F06                       	dc.b	nD1, $06
0008CF3C EC04                       	smpsPSGAlterVol     $04
0008CF3E E701                       	dc.b	smpsNoAttack, $01
0008CF40 EC07                       	smpsPSGAlterVol     $07
0008CF42 8003                       	dc.b	nRst, $03
0008CF44 ECF5                       	smpsPSGAlterVol     $F5
0008CF46 8F07                       	dc.b	nD1, $07
0008CF48 EC0B                       	smpsPSGAlterVol     $0B
0008CF4A 8006                       	dc.b	nRst, $06
0008CF4C E1FF                       	smpsAlterNote       $FF
0008CF4E 01                         	dc.b	$01
0008CF4F E102                       	smpsAlterNote       $02
0008CF51 0101                       	dc.b	$01, $01
0008CF53 E1FC                       	smpsAlterNote       $FC
0008CF55 01                         	dc.b	$01
0008CF56 ECF5                       	smpsPSGAlterVol     $F5
0008CF58 8F07                       	dc.b	nD1, $07
0008CF5A EC0B                       	smpsPSGAlterVol     $0B
0008CF5C 8004                       	dc.b	nRst, $04
0008CF5E ECF5                       	smpsPSGAlterVol     $F5
0008CF60 8F06                       	dc.b	nD1, $06
0008CF62 EC04                       	smpsPSGAlterVol     $04
0008CF64 E701                       	dc.b	smpsNoAttack, $01
0008CF66 EC07                       	smpsPSGAlterVol     $07
0008CF68 8006                       	dc.b	nRst, $06
0008CF6A E101                       	smpsAlterNote       $01
0008CF6C 01                         	dc.b	$01
0008CF6D E102                       	smpsAlterNote       $02
0008CF6F 01                         	dc.b	$01
0008CF70 E1FF                       	smpsAlterNote       $FF
0008CF72 01                         	dc.b	$01
0008CF73 E1F9                       	smpsAlterNote       $F9
0008CF75 01                         	dc.b	$01
0008CF76 E1FC                       	smpsAlterNote       $FC
0008CF78 ECF5                       	smpsPSGAlterVol     $F5
0008CF7A 9006                       	dc.b	nEb1, $06
0008CF7C EC04                       	smpsPSGAlterVol     $04
0008CF7E E701                       	dc.b	smpsNoAttack, $01
0008CF80 EC07                       	smpsPSGAlterVol     $07
0008CF82 8003                       	dc.b	nRst, $03
0008CF84 ECF5                       	smpsPSGAlterVol     $F5
0008CF86 9006                       	dc.b	nEb1, $06
0008CF88 EC04                       	smpsPSGAlterVol     $04
0008CF8A E701                       	dc.b	smpsNoAttack, $01
0008CF8C EC07                       	smpsPSGAlterVol     $07
0008CF8E 8006                       	dc.b	nRst, $06
0008CF90 E100                       	smpsAlterNote       $00
0008CF92 01                         	dc.b	$01
0008CF93 E102                       	smpsAlterNote       $02
0008CF95 01                         	dc.b	$01
0008CF96 E100                       	smpsAlterNote       $00
0008CF98 01                         	dc.b	$01
0008CF99 E1FF                       	smpsAlterNote       $FF
0008CF9B 01                         	dc.b	$01
0008CF9C ECF5                       	smpsPSGAlterVol     $F5
0008CF9E 9B06                       	dc.b	nD2, $06
0008CFA0 EC04                       	smpsPSGAlterVol     $04
0008CFA2 E701                       	dc.b	smpsNoAttack, $01
0008CFA4 EC07                       	smpsPSGAlterVol     $07
0008CFA6 8003                       	dc.b	nRst, $03
0008CFA8 ECF5                       	smpsPSGAlterVol     $F5
0008CFAA 9B07                       	dc.b	nD2, $07
0008CFAC EC0B                       	smpsPSGAlterVol     $0B
0008CFAE 8007                       	dc.b	nRst, $07
0008CFB0 E105                       	smpsAlterNote       $05
0008CFB2 0101                       	dc.b	$01, $01
0008CFB4 E1FF                       	smpsAlterNote       $FF
0008CFB6 01                         	dc.b	$01
0008CFB7 E1FC                       	smpsAlterNote       $FC
0008CFB9 01                         	dc.b	$01
0008CFBA E1FF                       	smpsAlterNote       $FF
0008CFBC ECF5                       	smpsPSGAlterVol     $F5
0008CFBE 9B06                       	dc.b	nD2, $06
0008CFC0 EC0B                       	smpsPSGAlterVol     $0B
0008CFC2 8004                       	dc.b	nRst, $04
0008CFC4 ECF5                       	smpsPSGAlterVol     $F5
0008CFC6 9B06                       	dc.b	nD2, $06
0008CFC8 EC04                       	smpsPSGAlterVol     $04
0008CFCA E701                       	dc.b	smpsNoAttack, $01
0008CFCC EC07                       	smpsPSGAlterVol     $07
0008CFCE 8006                       	dc.b	nRst, $06
0008CFD0 E102                       	smpsAlterNote       $02
0008CFD2 01                         	dc.b	$01
0008CFD3 E106                       	smpsAlterNote       $06
0008CFD5 01                         	dc.b	$01
0008CFD6 E102                       	smpsAlterNote       $02
0008CFD8 01                         	dc.b	$01
0008CFD9 E1FC                       	smpsAlterNote       $FC
0008CFDB 01                         	dc.b	$01
0008CFDC E1FF                       	smpsAlterNote       $FF
0008CFDE ECF5                       	smpsPSGAlterVol     $F5
0008CFE0 9B06                       	dc.b	nD2, $06
0008CFE2 EC04                       	smpsPSGAlterVol     $04
0008CFE4 E701                       	dc.b	smpsNoAttack, $01
0008CFE6 EC07                       	smpsPSGAlterVol     $07
0008CFE8 8003                       	dc.b	nRst, $03
0008CFEA ECF5                       	smpsPSGAlterVol     $F5
0008CFEC 9B07                       	dc.b	nD2, $07
0008CFEE EC0B                       	smpsPSGAlterVol     $0B
0008CFF0 8006                       	dc.b	nRst, $06
0008CFF2 E102                       	smpsAlterNote       $02
0008CFF4 01                         	dc.b	$01
0008CFF5 E105                       	smpsAlterNote       $05
0008CFF7 0101                       	dc.b	$01, $01
0008CFF9 E1FF                       	smpsAlterNote       $FF
0008CFFB 01                         	dc.b	$01
0008CFFC ECF5                       	smpsPSGAlterVol     $F5
0008CFFE 9B07                       	dc.b	nD2, $07
0008D000 EC0B                       	smpsPSGAlterVol     $0B
0008D002 8004                       	dc.b	nRst, $04
0008D004 ECF5                       	smpsPSGAlterVol     $F5
0008D006 9B06                       	dc.b	nD2, $06
0008D008 EC04                       	smpsPSGAlterVol     $04
0008D00A E701                       	dc.b	smpsNoAttack, $01
0008D00C EC07                       	smpsPSGAlterVol     $07
0008D00E 8006                       	dc.b	nRst, $06
0008D010 E105                       	smpsAlterNote       $05
0008D012 0101                       	dc.b	$01, $01
0008D014 E102                       	smpsAlterNote       $02
0008D016 01                         	dc.b	$01
0008D017 E1FC                       	smpsAlterNote       $FC
0008D019 01                         	dc.b	$01
0008D01A E1FF                       	smpsAlterNote       $FF
0008D01C ECF5                       	smpsPSGAlterVol     $F5
0008D01E 9B06                       	dc.b	nD2, $06
0008D020 EC04                       	smpsPSGAlterVol     $04
0008D022 E701                       	dc.b	smpsNoAttack, $01
0008D024 EC07                       	smpsPSGAlterVol     $07
0008D026 8003                       	dc.b	nRst, $03
0008D028 ECF5                       	smpsPSGAlterVol     $F5
0008D02A 9B06                       	dc.b	nD2, $06
0008D02C EC04                       	smpsPSGAlterVol     $04
0008D02E E701                       	dc.b	smpsNoAttack, $01
0008D030 EC07                       	smpsPSGAlterVol     $07
0008D032 8006                       	dc.b	nRst, $06
0008D034 E102                       	smpsAlterNote       $02
0008D036 01                         	dc.b	$01
0008D037 E106                       	smpsAlterNote       $06
0008D039 01                         	dc.b	$01
0008D03A E102                       	smpsAlterNote       $02
0008D03C 01                         	dc.b	$01
0008D03D E1FF                       	smpsAlterNote       $FF
0008D03F 01                         	dc.b	$01
0008D040 ECF5                       	smpsPSGAlterVol     $F5
0008D042 9B06                       	dc.b	nD2, $06
0008D044 EC04                       	smpsPSGAlterVol     $04
0008D046 E701                       	dc.b	smpsNoAttack, $01
0008D048 EC07                       	smpsPSGAlterVol     $07
0008D04A 8003                       	dc.b	nRst, $03
0008D04C ECF5                       	smpsPSGAlterVol     $F5
0008D04E 9B07                       	dc.b	nD2, $07
0008D050 EC0B                       	smpsPSGAlterVol     $0B
0008D052 8007                       	dc.b	nRst, $07
0008D054 E107                       	smpsAlterNote       $07
0008D056 0101                       	dc.b	$01, $01
0008D058 E1FE                       	smpsAlterNote       $FE
0008D05A 01                         	dc.b	$01
0008D05B E1FA                       	smpsAlterNote       $FA
0008D05D 0101                       	dc.b	$01, $01
0008D05F E103                       	smpsAlterNote       $03
0008D061 01                         	dc.b	$01
0008D062 E109                       	smpsAlterNote       $09
0008D064 01                         	dc.b	$01
0008D065 E107                       	smpsAlterNote       $07
0008D067 01                         	dc.b	$01
0008D068 E1FE                       	smpsAlterNote       $FE
0008D06A 01                         	dc.b	$01
0008D06B E108                       	smpsAlterNote       $08
0008D06D 01                         	dc.b	$01
0008D06E E1FD                       	smpsAlterNote       $FD
0008D070 ECF5                       	smpsPSGAlterVol     $F5
0008D072 940E                       	dc.b	nG1, $0E
0008D074 E103                       	smpsAlterNote       $03
0008D076 EC0B                       	smpsPSGAlterVol     $0B
0008D078 8001 01                    	dc.b	nRst, $01, $01
0008D07B E1FD                       	smpsAlterNote       $FD
0008D07D 01                         	dc.b	$01
0008D07E E1FB                       	smpsAlterNote       $FB
0008D080 0101                       	dc.b	$01, $01
0008D082 E100                       	smpsAlterNote       $00
0008D084 01                         	dc.b	$01
0008D085 E103                       	smpsAlterNote       $03
0008D087 01                         	dc.b	$01
0008D088 E100                       	smpsAlterNote       $00
0008D08A 01                         	dc.b	$01
0008D08B E1FD                       	smpsAlterNote       $FD
0008D08D 01                         	dc.b	$01
0008D08E E1FA                       	smpsAlterNote       $FA
0008D090 01                         	dc.b	$01
0008D091 E1FD                       	smpsAlterNote       $FD
0008D093 01                         	dc.b	$01
0008D094 E103                       	smpsAlterNote       $03
0008D096 0101                       	dc.b	$01, $01
0008D098 E100                       	smpsAlterNote       $00
0008D09A 01                         	dc.b	$01
0008D09B E1FE                       	smpsAlterNote       $FE
0008D09D ECF5                       	smpsPSGAlterVol     $F5
0008D09F 960D                       	dc.b	nA1, $0D
0008D0A1 E104                       	smpsAlterNote       $04
0008D0A3 EC0B                       	smpsPSGAlterVol     $0B
0008D0A5 8001 01                    	dc.b	nRst, $01, $01
0008D0A8 E101                       	smpsAlterNote       $01
0008D0AA 01                         	dc.b	$01
0008D0AB E1FB                       	smpsAlterNote       $FB
0008D0AD 0101                       	dc.b	$01, $01
0008D0AF E1FE                       	smpsAlterNote       $FE
0008D0B1 01                         	dc.b	$01
0008D0B2 E104                       	smpsAlterNote       $04
0008D0B4 0101                       	dc.b	$01, $01
0008D0B6 E1FE                       	smpsAlterNote       $FE
0008D0B8 01                         	dc.b	$01
0008D0B9 E1FB                       	smpsAlterNote       $FB
0008D0BB 0101                       	dc.b	$01, $01
0008D0BD E101                       	smpsAlterNote       $01
0008D0BF 01                         	dc.b	$01
0008D0C0 E104                       	smpsAlterNote       $04
0008D0C2 0101                       	dc.b	$01, $01
0008D0C4 E1FE                       	smpsAlterNote       $FE
0008D0C6 ECF5                       	smpsPSGAlterVol     $F5
0008D0C8 970D                       	dc.b	nBb1, $0D
0008D0CA E101                       	smpsAlterNote       $01
0008D0CC EC04                       	smpsPSGAlterVol     $04
0008D0CE E701                       	dc.b	smpsNoAttack, $01
0008D0D0 EC07                       	smpsPSGAlterVol     $07
0008D0D2 E104                       	smpsAlterNote       $04
0008D0D4 8001                       	dc.b	nRst, $01
0008D0D6 E103                       	smpsAlterNote       $03
0008D0D8 01                         	dc.b	$01
0008D0D9 E1FE                       	smpsAlterNote       $FE
0008D0DB 01                         	dc.b	$01
0008D0DC E1FA                       	smpsAlterNote       $FA
0008D0DE 01                         	dc.b	$01
0008D0DF E1FE                       	smpsAlterNote       $FE
0008D0E1 01                         	dc.b	$01
0008D0E2 E101                       	smpsAlterNote       $01
0008D0E4 01                         	dc.b	$01
0008D0E5 E104                       	smpsAlterNote       $04
0008D0E7 01                         	dc.b	$01
0008D0E8 E101                       	smpsAlterNote       $01
0008D0EA 01                         	dc.b	$01
0008D0EB E1FB                       	smpsAlterNote       $FB
0008D0ED 01                         	dc.b	$01
0008D0EE E1FA                       	smpsAlterNote       $FA
0008D0F0 01                         	dc.b	$01
0008D0F1 E1FE                       	smpsAlterNote       $FE
0008D0F3 01                         	dc.b	$01
0008D0F4 E103                       	smpsAlterNote       $03
0008D0F6 0101                       	dc.b	$01, $01
0008D0F8 E101                       	smpsAlterNote       $01
0008D0FA 01                         	dc.b	$01
0008D0FB E1FE                       	smpsAlterNote       $FE
0008D0FD ECF5                       	smpsPSGAlterVol     $F5
0008D0FF 990D                       	dc.b	nC2, $0D
0008D101 E104                       	smpsAlterNote       $04
0008D103 EC0B                       	smpsPSGAlterVol     $0B
0008D105 8001 01                    	dc.b	nRst, $01, $01
0008D108 E102                       	smpsAlterNote       $02
0008D10A 01                         	dc.b	$01
0008D10B E1FC                       	smpsAlterNote       $FC
0008D10D 0101                       	dc.b	$01, $01
0008D10F E102                       	smpsAlterNote       $02
0008D111 01                         	dc.b	$01
0008D112 E104                       	smpsAlterNote       $04
0008D114 01                         	dc.b	$01
0008D115 E1FF                       	smpsAlterNote       $FF
0008D117 ECF5                       	smpsPSGAlterVol     $F5
0008D119 9B06                       	dc.b	nD2, $06
0008D11B EC04                       	smpsPSGAlterVol     $04
0008D11D E701                       	dc.b	smpsNoAttack, $01
0008D11F EC07                       	smpsPSGAlterVol     $07
0008D121 8003                       	dc.b	nRst, $03
0008D123 ECF5                       	smpsPSGAlterVol     $F5
0008D125 9B07                       	dc.b	nD2, $07
0008D127 EC0B                       	smpsPSGAlterVol     $0B
0008D129 8006                       	dc.b	nRst, $06
0008D12B E101                       	smpsAlterNote       $01
0008D12D 01                         	dc.b	$01
0008D12E E104                       	smpsAlterNote       $04
0008D130 0101                       	dc.b	$01, $01
0008D132 E1FE                       	smpsAlterNote       $FE
0008D134 01                         	dc.b	$01
0008D135 E1FC                       	smpsAlterNote       $FC
0008D137 01                         	dc.b	$01
0008D138 E1FE                       	smpsAlterNote       $FE
0008D13A ECF5                       	smpsPSGAlterVol     $F5
0008D13C 9C06                       	dc.b	nEb2, $06
0008D13E EC0B                       	smpsPSGAlterVol     $0B
0008D140 8004                       	dc.b	nRst, $04
0008D142 ECF5                       	smpsPSGAlterVol     $F5
0008D144 9C06                       	dc.b	nEb2, $06
0008D146 EC04                       	smpsPSGAlterVol     $04
0008D148 E701                       	dc.b	smpsNoAttack, $01
0008D14A EC07                       	smpsPSGAlterVol     $07
0008D14C 8006                       	dc.b	nRst, $06
0008D14E E105                       	smpsAlterNote       $05
0008D150 01                         	dc.b	$01
0008D151 E106                       	smpsAlterNote       $06
0008D153 01                         	dc.b	$01
0008D154 E102                       	smpsAlterNote       $02
0008D156 01                         	dc.b	$01
0008D157 E1FB                       	smpsAlterNote       $FB
0008D159 01                         	dc.b	$01
0008D15A E1FF                       	smpsAlterNote       $FF
0008D15C ECF5                       	smpsPSGAlterVol     $F5
0008D15E 9B06                       	dc.b	nD2, $06
0008D160 EC04                       	smpsPSGAlterVol     $04
0008D162 E701                       	dc.b	smpsNoAttack, $01
0008D164 EC07                       	smpsPSGAlterVol     $07
0008D166 8003                       	dc.b	nRst, $03
0008D168 ECF5                       	smpsPSGAlterVol     $F5
0008D16A 9B06                       	dc.b	nD2, $06
0008D16C EC04                       	smpsPSGAlterVol     $04
0008D16E E701                       	dc.b	smpsNoAttack, $01
0008D170 EC07                       	smpsPSGAlterVol     $07
0008D172 8006                       	dc.b	nRst, $06
0008D174 E101                       	smpsAlterNote       $01
0008D176 01                         	dc.b	$01
0008D177 E105                       	smpsAlterNote       $05
0008D179 01                         	dc.b	$01
0008D17A E104                       	smpsAlterNote       $04
0008D17C 01                         	dc.b	$01
0008D17D E1FE                       	smpsAlterNote       $FE
0008D17F 01                         	dc.b	$01
0008D180 ECF5                       	smpsPSGAlterVol     $F5
0008D182 9C07                       	dc.b	nEb2, $07
0008D184 EC0B                       	smpsPSGAlterVol     $0B
0008D186 8004                       	dc.b	nRst, $04
0008D188 ECF5                       	smpsPSGAlterVol     $F5
0008D18A 9C06                       	dc.b	nEb2, $06
0008D18C EC0B                       	smpsPSGAlterVol     $0B
0008D18E 8007                       	dc.b	nRst, $07
0008D190 E105                       	smpsAlterNote       $05
0008D192 0101                       	dc.b	$01, $01
0008D194 E102                       	smpsAlterNote       $02
0008D196 01                         	dc.b	$01
0008D197 E1FB                       	smpsAlterNote       $FB
0008D199 01                         	dc.b	$01
0008D19A E1FF                       	smpsAlterNote       $FF
0008D19C ECF5                       	smpsPSGAlterVol     $F5
0008D19E 9B06                       	dc.b	nD2, $06
0008D1A0 EC04                       	smpsPSGAlterVol     $04
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 EC07                       	smpsPSGAlterVol     $07
0008D1A6 8003                       	dc.b	nRst, $03
0008D1A8 ECF5                       	smpsPSGAlterVol     $F5
0008D1AA 9B06                       	dc.b	nD2, $06
0008D1AC EC04                       	smpsPSGAlterVol     $04
0008D1AE E701                       	dc.b	smpsNoAttack, $01
0008D1B0 EC07                       	smpsPSGAlterVol     $07
0008D1B2 8006                       	dc.b	nRst, $06
0008D1B4 E101                       	smpsAlterNote       $01
0008D1B6 01                         	dc.b	$01
0008D1B7 E105                       	smpsAlterNote       $05
0008D1B9 01                         	dc.b	$01
0008D1BA E101                       	smpsAlterNote       $01
0008D1BC 01                         	dc.b	$01
0008D1BD E1FC                       	smpsAlterNote       $FC
0008D1BF 01                         	dc.b	$01
0008D1C0 E1FE                       	smpsAlterNote       $FE
0008D1C2 ECF5                       	smpsPSGAlterVol     $F5
0008D1C4 9C06                       	dc.b	nEb2, $06
0008D1C6 EC04                       	smpsPSGAlterVol     $04
0008D1C8 E701                       	dc.b	smpsNoAttack, $01
0008D1CA EC07                       	smpsPSGAlterVol     $07
0008D1CC 8003                       	dc.b	nRst, $03
0008D1CE ECF5                       	smpsPSGAlterVol     $F5
0008D1D0 9C07                       	dc.b	nEb2, $07
0008D1D2 EC0B                       	smpsPSGAlterVol     $0B
0008D1D4 8006                       	dc.b	nRst, $06
0008D1D6 E102                       	smpsAlterNote       $02
0008D1D8 01                         	dc.b	$01
0008D1D9 E105                       	smpsAlterNote       $05
0008D1DB 0101                       	dc.b	$01, $01
0008D1DD E1FF                       	smpsAlterNote       $FF
0008D1DF 01                         	dc.b	$01
0008D1E0 ECF5                       	smpsPSGAlterVol     $F5
0008D1E2 9B07                       	dc.b	nD2, $07
0008D1E4 EC0B                       	smpsPSGAlterVol     $0B
0008D1E6 8004                       	dc.b	nRst, $04
0008D1E8 ECF5                       	smpsPSGAlterVol     $F5
0008D1EA 9B06                       	dc.b	nD2, $06
0008D1EC EC04                       	smpsPSGAlterVol     $04
0008D1EE E701                       	dc.b	smpsNoAttack, $01
0008D1F0 EC07                       	smpsPSGAlterVol     $07
0008D1F2 8002                       	dc.b	nRst, $02
0008D1F4 E1FC                       	smpsAlterNote       $FC
0008D1F6 ECF5                       	smpsPSGAlterVol     $F5
0008D1F8 9006                       	dc.b	nEb1, $06
0008D1FA EC04                       	smpsPSGAlterVol     $04
0008D1FC E701                       	dc.b	smpsNoAttack, $01
0008D1FE ECFC                       	smpsPSGAlterVol     $FC
0008D200 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008D204 EC04                       	smpsPSGAlterVol     $04
0008D206 E701                       	dc.b	smpsNoAttack, $01
0008D208 E1FD                       	smpsAlterNote       $FD
0008D20A ECFC                       	smpsPSGAlterVol     $FC
0008D20C 9402                       	dc.b	nG1, $02
0008D20E EC04                       	smpsPSGAlterVol     $04
0008D210 E701                       	dc.b	smpsNoAttack, $01
0008D212 E1FE                       	smpsAlterNote       $FE
0008D214 ECFC                       	smpsPSGAlterVol     $FC
0008D216 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D21A EC04                       	smpsPSGAlterVol     $04
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E EC07                       	smpsPSGAlterVol     $07
0008D220 8008                       	dc.b	nRst, $08
0008D222 F6F4 F3                    	smpsJump            music84_Jump06
0008D225                            
0008D225                            ; PSG3 Data
0008D225                            music84_PSG3:
0008D225 F500                       	smpsPSGvoice        $00
0008D227 E1FF                       	smpsAlterNote       $FF
0008D229 EC0F                       	smpsPSGAlterVol     $0F
0008D22B 803A                       	dc.b	nRst, $3A
0008D22D                            
0008D22D                            music84_Jump05:
0008D22D 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008D239 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008D243 F6FF E8                    	smpsJump            music84_Jump05
0008D246                            
0008D246                            ; DAC Data
0008D246                            music84_DAC:
0008D246 E0C0                       	smpsPan             panCenter, $00
0008D248 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008D254 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008D260 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008D26C 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008D278 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008D284 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008D290 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008D29C 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008D2A8 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008D2B4 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008D2C0 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008D2CC 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008D2D8 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008D2E4 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008D2F0 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008D2FC 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008D308 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008D314 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008D320 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008D32C 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008D338 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008D344 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008D350 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008D35C 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008D368 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008D374 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008D380 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008D38C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008D398 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008D3A4 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008D3B0 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008D3BC 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008D3C8 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008D3D4 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008D3E0 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008D3EC 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008D3F8 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008D404 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008D410 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008D41C 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008D428 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008D434 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008D440 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008D44C 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008D458 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008D464 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008D470 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008D47C 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008D488 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008D494 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008D4A0 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008D4AC 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008D4B8 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008D4C4 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008D4D0 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008D4DC 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008D4E8 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008D4F4 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008D500 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008D50C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008D518 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008D524 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008D530 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008D53C 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008D548 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008D554 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008D560 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008D56C 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008D578 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008D584 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008D590 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008D59C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008D5A8 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008D5B4 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008D5C0 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008D5CC E0C0                       	smpsPan             panCenter, $00
0008D5CE F2                         	smpsStop
0008D5CF                            
0008D5CF                            music84_Voices:
0008D5CF                            ;	Voice $00
0008D5CF                            ;	$3D
0008D5CF                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008D5CF                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008D5CF                            	smpsVcAlgorithm     $05
0008D5CF                            	smpsVcFeedback      $07
0008D5CF                            	smpsVcUnusedBits    $00
0008D5CF                            	smpsVcDetune        $05, $04, $03, $04
0008D5CF                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008D5CF                            	smpsVcRateScale     $00, $00, $00, $00
0008D5CF                            	smpsVcAttackRate    $11, $11, $11, $11
0008D5CF                            	smpsVcAmpMod        $00, $00, $00, $00
0008D5CF                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008D5CF                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008D5CF                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008D5CF                            	smpsVcReleaseRate   $08, $08, $08, $07
0008D5CF 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008D5E8                            
0008D5E8                            ;	Voice $01
0008D5E8                            ;	$04
0008D5E8                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008D5E8                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008D5E8                            	smpsVcAlgorithm     $04
0008D5E8                            	smpsVcFeedback      $00
0008D5E8                            	smpsVcUnusedBits    $00
0008D5E8                            	smpsVcDetune        $04, $03, $04, $05
0008D5E8                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008D5E8                            	smpsVcRateScale     $00, $01, $00, $01
0008D5E8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008D5E8                            	smpsVcAmpMod        $00, $00, $00, $00
0008D5E8                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008D5E8                            	smpsVcDecayRate2    $05, $00, $05, $00
0008D5E8                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008D5E8                            	smpsVcReleaseRate   $06, $06, $06, $06
0008D5E8 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008D601                            
0008D601                            ;	Voice $02
0008D601                            ;	$30
0008D601                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008D601                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008D601                            	smpsVcAlgorithm     $00
0008D601                            	smpsVcFeedback      $06
0008D601                            	smpsVcUnusedBits    $00
0008D601                            	smpsVcDetune        $04, $02, $00, $06
0008D601                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008D601                            	smpsVcRateScale     $00, $00, $00, $00
0008D601                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008D601                            	smpsVcAmpMod        $00, $00, $00, $00
0008D601                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008D601                            	smpsVcDecayRate2    $01, $01, $01, $01
0008D601                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008D601                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008D601 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008D61A                            
0008D61A                            ;	Voice $03
0008D61A                            ;	$3A
0008D61A                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008D61A                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008D61A                            	smpsVcAlgorithm     $02
0008D61A                            	smpsVcFeedback      $07
0008D61A                            	smpsVcUnusedBits    $00
0008D61A                            	smpsVcDetune        $04, $06, $02, $00
0008D61A                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008D61A                            	smpsVcRateScale     $00, $00, $00, $00
0008D61A                            	smpsVcAttackRate    $18, $19, $14, $14
0008D61A                            	smpsVcAmpMod        $00, $00, $00, $00
0008D61A                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008D61A                            	smpsVcDecayRate2    $00, $00, $00, $00
0008D61A                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008D61A                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008D61A 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008D633                            
0008D633                            ;	Voice $04
0008D633                            ;	$3C
0008D633                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008D633                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008D633                            	smpsVcAlgorithm     $04
0008D633                            	smpsVcFeedback      $07
0008D633                            	smpsVcUnusedBits    $00
0008D633                            	smpsVcDetune        $07, $00, $00, $03
0008D633                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008D633                            	smpsVcRateScale     $00, $00, $00, $00
0008D633                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008D633                            	smpsVcAmpMod        $00, $00, $00, $00
0008D633                            	smpsVcDecayRate1    $00, $00, $00, $00
0008D633                            	smpsVcDecayRate2    $00, $00, $00, $00
0008D633                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008D633                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008D633 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008D64C                            
0008D64C                            ;	Voice $05
0008D64C                            ;	$38
0008D64C                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008D64C                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008D64C                            	smpsVcAlgorithm     $00
0008D64C                            	smpsVcFeedback      $07
0008D64C                            	smpsVcUnusedBits    $00
0008D64C                            	smpsVcDetune        $04, $06, $02, $00
0008D64C                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008D64C                            	smpsVcRateScale     $00, $00, $00, $00
0008D64C                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008D64C                            	smpsVcAmpMod        $00, $00, $00, $00
0008D64C                            	smpsVcDecayRate1    $00, $03, $00, $17
0008D64C                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008D64C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008D64C                            	smpsVcReleaseRate   $08, $05, $05, $05
0008D64C 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008D665                            
0008D665                            
0008D666 00                         		even
0008D666                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00091876                            		even
00091876                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000953CE 00                         		even
000953CE                            Music87:	include	sound\music87.asm; Invincibility
000953CE                            triple_Header:
000953CE =00000001                  smpsHeaderStartSong = 1
000953CE 0000                       	smpsHeaderVoice     triple_Voices
000953D0 0501                       	smpsHeaderChan      $05, $01
000953D2 0200                       	smpsHeaderTempo     $02, $00
000953D4                            
000953D8 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000953DC 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000953E0 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000953E4 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000953E8 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000953EE                            
000953EE                            ; DAC Data
000953EE                            triple_DAC:
000953EE E0C0                       	smpsPan             panCenter, $00
000953F0 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000953F6                            
000953F6                            triple_Loop01:
000953F6 8282 82                    	dc.b	dSnare, dSnare, dSnare
000953F9                            
000953F9                            triple_Loop00:
000953F9 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00095405 06                         	dc.b	$06
00095406 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0009540B 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00095417 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0009541E F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00095423 0303 1B                    	dc.b	$03, $03, $1B
00095426 E0C0                       	smpsPan             panCenter, $00
00095428 F6FF C4                    	smpsJump triple_DAC
0009542B                            
0009542B                            ; FM1 Data
0009542B                            triple_FM1:
0009542B E0C0                       	smpsPan             panCenter, $00
0009542F 8018                       	dc.b	nRst, $18
00095431                            
00095431                            triple_Loop0B:
00095431 AC06 B8                    	dc.b	nG3, $06, nG4
00095434 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095439                            
00095439                            triple_Loop0C:
00095439 A7B3                       	dc.b	nD3, nD4
0009543B F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095440                            
00095440                            triple_Loop0D:
00095440 A9B5                       	dc.b	nE3, nE4
00095442 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00095447 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0009544F F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00095454 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095460 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0009546C AD                         	dc.b	nAb3
0009546D F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00095472 8018                       	dc.b	nRst, $18
00095474 E0C0                       	smpsPan             panCenter, $00
00095478 F6FF B1                    	smpsJump triple_FM1
0009547B                            
0009547B                            ; FM2 Data
0009547B                            triple_FM2:
0009547B E0C0                       	smpsPan             panCenter, $00
0009547F 8018                       	dc.b	nRst, $18
00095481                            
00095481                            triple_Loop07:
00095481 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009548D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095499 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0009549E 8003                       	dc.b	nRst, $03
000954A0                            
000954A0                            triple_Loop08:
000954A0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000954A6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000954AB B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000954B1                            
000954B1                            triple_Loop09:
000954B1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000954BD C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000954C9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000954CE 8003                       	dc.b	nRst, $03
000954D0                            
000954D0                            triple_Loop0A:
000954D0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000954D6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000954DB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000954E1 E0C0                       	smpsPan             panCenter, $00
000954E5 F6FF 94                    	smpsJump triple_FM2
000954E8                            
000954E8                            ; FM3 Data
000954E8                            triple_FM3:
000954E8 E0C0                       	smpsPan             panCenter, $00
000954EC 8018                       	dc.b	nRst, $18
000954EE                            
000954EE                            triple_Loop06:
000954EE B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000954F5 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000954FA 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00095506 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00095512 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00095515 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0009551A 8018                       	dc.b	nRst, $18
0009551C E0C0                       	smpsPan             panCenter, $00
00095520 F6FF C6                    	smpsJump triple_FM3
00095523                            
00095523                            ; FM4 Data
00095523                            triple_FM4:
00095523 E103                       	smpsAlterNote       $03
00095527 E0C0                       	smpsPan             panCenter, $00
00095529 8018                       	dc.b	nRst, $18
0009552B                            
0009552B                            triple_Loop02:
0009552B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095537 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095543 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095548 8003                       	dc.b	nRst, $03
0009554A                            
0009554A                            triple_Loop03:
0009554A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095550 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00095555 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009555B                            
0009555B                            triple_Loop04:
0009555B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095567 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095573 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095578 8003                       	dc.b	nRst, $03
0009557A                            
0009557A                            triple_Loop05:
0009557A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095580 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00095585 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009558B E0C0                       	smpsPan             panCenter, $00
0009558D F6FF 94                    	smpsJump triple_FM4
00095590                            
00095590                            ; PSG1 Data
00095590                            triple_PSG1:
00095590 8018                       	dc.b	nRst, $18
00095592                            
00095592                            triple_Loop0E:
00095592 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009559E 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000955AA 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000955B6 9402 8004                  	dc.b	nG1, $02, nRst, $04
000955BA F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000955BF A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000955CB 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000955D7 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000955E3 9402 8007                  	dc.b	nG1, $02, nRst, $07
000955E7                            
000955E7                            triple_Loop0F:
000955E7 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000955ED F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000955F2 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000955F8                            
000955F8                            triple_Loop10:
000955F8 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095604 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095610 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009561C 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095620 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00095625 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095631 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009563D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095649 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009564D                            
0009564D                            triple_Loop11:
0009564D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095653 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095658 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0009565E F500                       	smpsPSGvoice        $00
00095660 F6FF 2E                    	smpsJump triple_PSG1
00095663                            
00095663                            triple_Voices:
00095663                            ;	Voice $00
00095663                            ;	$3A
00095663                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00095663                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00095663                            	smpsVcAlgorithm     $02
00095663                            	smpsVcFeedback      $07
00095663                            	smpsVcUnusedBits    $00
00095663                            	smpsVcDetune        $00, $00, $00, $00
00095663                            	smpsVcCoarseFreq    $01, $01, $07, $01
00095663                            	smpsVcRateScale     $01, $02, $02, $02
00095663                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00095663                            	smpsVcAmpMod        $00, $00, $00, $00
00095663                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00095663                            	smpsVcDecayRate2    $00, $00, $00, $00
00095663                            	smpsVcDecayLevel    $00, $01, $0F, $01
00095663                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095663 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009567C                            
0009567C                            ;	Voice $01
0009567C                            ;	$20
0009567C                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009567C                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009567C                            	smpsVcAlgorithm     $00
0009567C                            	smpsVcFeedback      $04
0009567C                            	smpsVcUnusedBits    $00
0009567C                            	smpsVcDetune        $00, $00, $03, $07
0009567C                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009567C                            	smpsVcRateScale     $03, $03, $03, $02
0009567C                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009567C                            	smpsVcAmpMod        $00, $00, $00, $00
0009567C                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009567C                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009567C                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009567C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009567C 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009567C 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095696 00                         		even
00095696                            Music88:	incbin	sound\music88.bin; Extra Life
00095784                            		even
00095784                            Music89:	incbin	sound\music89.bin; Special Stage
0009964C 00                         		even
0009964C                            Music8A:	incbin	sound\music8A.bin; Title Screen
00099816                            		even
00099816                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00099AB0                            		even
00099AB0                            Music8C:	incbin	sound\music8C.bin; VS Boss
00099CCC                            		even
00099CCC                            Music8D:	incbin	sound\music8D.bin; Final Zone
00099EE8                            		even
00099EE8                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009A356 00                         		even
0009A356                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009A996 00                         		even
0009A996                            Music90:	incbin	sound\music90.bin ; Continue
0009AAF4                            		even
0009AAF4                            Music91:	incbin	sound\music91.bin ; Credits
0009BDC2                            		even
0009BDC2                            Music92:	incbin	sound\music92.bin ; Drowning
0009BEEC                            		even
0009BEEC                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009BFBC                            		even
0009BFBC                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009BFF6 00                         		even
0009BFF6                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009C030 00                         		even
0009C030                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009C06A 00                         		even
0009C06A                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009C0A4 00                         		even
0009C0A4                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009C0DE 00                         		even
0009C0DE                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009C118 00                         		even
0009C118                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009C152 00                         		even
0009C152                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009C18C 00                         		even
0009C18C                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009C1C6 00                         		even
0009C1C6                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009C200 00                         		even
0009C200                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009C6F0                            		even
0009C6F0                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009C72A 00                         		even
0009C72A                            ; ---------------------------------------------------------------------------
0009C72A                            ; Sound	effect pointers
0009C72A                            ; ---------------------------------------------------------------------------
0009C72A 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009C736 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009C742 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009C74E 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009C75A 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009C766 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009C772 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009C77E 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009C78A 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009C796 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009C7A2 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009C7AE 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009C7BA 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009C7C6 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009C7D2 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009C7DE 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009C7EA 0000 0000                  SoundD0Index:	dc.l SoundD0
0009C7EE                            SoundA0:	incbin	sound\soundA0.bin
0009C804                            		even
0009C804                            SoundA1:	incbin	sound\soundA1.bin
0009C82E                            		even
0009C82E                            SoundA2:	incbin	sound\soundA2.bin
0009C84E                            		even
0009C84E                            SoundA3:	incbin	sound\soundA3.bin
0009C880                            		even
0009C880                            SoundA4:	incbin	sound\soundA4.bin
0009C8B6                            		even
0009C8B6                            SoundA5:	incbin	sound\soundA5.bin
0009C8E2                            		even
0009C8E2                            SoundA6:	incbin	sound\soundA6.bin
0009C912                            		even
0009C912                            SoundA7:	incbin	sound\soundA7.bin
0009C942                            		even
0009C942                            SoundA8:	incbin	sound\soundA8.bin
0009C976                            		even
0009C976                            SoundA9:	incbin	sound\soundA9.bin
0009C988                            		even
0009C988                            SoundAA:	incbin	sound\soundAA.bin
0009C9CA                            		even
0009C9CA                            SoundAB:	incbin	sound\soundAB.bin
0009C9EA                            		even
0009C9EA                            SoundAC:	incbin	sound\soundAC.bin
0009CA1E                            		even
0009CA1E                            SoundAD:	incbin	sound\soundAD.bin
0009CA54                            		even
0009CA54                            SoundAE:	incbin	sound\soundAE.bin
0009CA9E                            		even
0009CA9E                            SoundAF:	incbin	sound\soundAF.bin
0009CACC                            		even
0009CACC                            SoundB0:	incbin	sound\soundB0.bin
0009CAFE                            		even
0009CAFE                            SoundB1:	incbin	sound\soundB1.bin
0009CB2A                            		even
0009CB2A                            SoundB2:	incbin	sound\soundB2.bin
0009CB7A                            		even
0009CB7A                            SoundB3:	incbin	sound\soundB3.bin
0009CBC4                            		even
0009CBC4                            SoundB4:	include	sound\soundB4.asm
0009CBC4                            SndB4_Bumper_Header:
0009CBC4 =00000001                  smpsHeaderStartSong = 1
0009CBC4 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009CBC6 01                         	smpsHeaderTempoSFX  $01
0009CBC7 03                         	smpsHeaderChanSFX   $03
0009CBC8                            
0009CBDA                            
0009CBDA                            ; FM5 Data
0009CBDA                            SndB4_Bumper_FM5:
0009CBDC F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009CBDF                            
0009CBDF                            ; FM4 Data
0009CBDF                            SndB4_Bumper_FM4:
0009CBDF F2                         	smpsStop
0009CBE0                            
0009CBE0                            SndB4_Bumper_Jump00:
0009CBE0 A020                       	dc.b	nG2, $20
0009CBE2 F2                         	smpsStop
0009CBE3                            
0009CBE3                            ; FM3 Data
0009CBE3                            SndB4_Bumper_FM3:
0009CBE3 F2                         	smpsStop
0009CBE4                            
0009CBE4                            SndB4_Bumper_Voices:
0009CBE4                            ;	Voice $00
0009CBE4                            ;	$32
0009CBE4                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009CBE4                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009CBE4                            	smpsVcAlgorithm     $02
0009CBE4                            	smpsVcFeedback      $06
0009CBE4                            	smpsVcUnusedBits    $00
0009CBE4                            	smpsVcDetune        $07, $07, $02, $00
0009CBE4                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009CBE4                            	smpsVcRateScale     $00, $00, $00, $00
0009CBE4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CBE4                            	smpsVcAmpMod        $00, $00, $00, $00
0009CBE4                            	smpsVcDecayRate1    $08, $00, $00, $09
0009CBE4                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009CBE4                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CBE4                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009CBE4 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009CBE4 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009CBFE 00                         		even
0009CBFE                            SoundB5:	incbin	sound\soundB5.bin
0009CC1C 00                         		even
0009CC1C                            SoundB6:	incbin	sound\soundB6.bin
0009CC3A                            		even
0009CC3A                            SoundB7:	incbin	sound\soundB7.bin
0009CC76                            		even
0009CC76                            SoundB8:	incbin	sound\soundB8.bin
0009CC94                            		even
0009CC94                            SoundB9:	incbin	sound\soundB9.bin
0009CCF8                            		even
0009CCF8                            SoundBA:	incbin	sound\soundBA.bin
0009CD20                            		even
0009CD20                            SoundBB:	incbin	sound\soundBB.bin
0009CD4C                            		even
0009CD4C                            SoundBC:	incbin	sound\soundBC.bin
0009CD8E                            		even
0009CD8E                            SoundBD:	incbin	sound\soundBD.bin
0009CDE2                            		even
0009CDE2                            SoundBE:	incbin	sound\soundBE.bin
0009CE1C                            		even
0009CE1C                            SoundBF:	incbin	sound\soundBF.bin
0009CE8E                            		even
0009CE8E                            SoundC0:	incbin	sound\soundC0.bin
0009CEBC                            		even
0009CEBC                            SoundC1:	incbin	sound\soundC1.bin
0009CF16                            		even
0009CF16                            SoundC2:	incbin	sound\soundC2.bin
0009CF40                            		even
0009CF40                            SoundC3:	incbin	sound\soundC3.bin
0009CFBA                            		even
0009CFBA                            SoundC4:	incbin	sound\soundC4.bin
0009D0B8                            		even
0009D0B8                            SoundC5:	incbin	sound\soundC5.bin
0009D120                            		even
0009D120                            SoundC6:	incbin	sound\soundC6.bin
0009D162                            		even
0009D162                            SoundC7:	incbin	sound\soundC7.bin
0009D190                            		even
0009D190                            SoundC8:	incbin	sound\soundC8.bin
0009D1A2                            		even
0009D1A2                            SoundC9:	incbin	sound\soundC9.bin
0009D1D0                            		even
0009D1D0                            SoundCA:	incbin	sound\soundCA.bin
0009D1FE                            		even
0009D1FE                            SoundCB:	incbin	sound\soundCB.bin
0009D24A                            		even
0009D24A                            SoundCC:	incbin	sound\C9.ssf
0009D278                            		even
0009D278                            SoundCD:	incbin	sound\soundCD.bin
0009D286                            		even
0009D286                            SoundCE:	incbin	sound\soundCE.bin
0009D2A4 00                         		even
0009D2A4                            SoundCF:	incbin	sound\soundCF.bin
0009D2DC                            		even
0009D2DC                            SoundD0:	incbin	sound\soundD0.bin
0009D316                            		even
0009D316                            SegaPCM:	incbin	sound\segapcm.bin
000B746C                            SegaPCM_end:	even
000B746C                            
000B746C                            IdiotPCM:	incbin	sound\youare.bin
000C153E 00                         IdiotPCM_end:	even
000C153E                            
000C153E                            ; end of 'ROM'
000C153E                            EndOfRom:
000C153E                            
000C153E                            
