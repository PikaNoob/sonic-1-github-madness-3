00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000326 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C 2011                       		move.l	(a1),d0
0000032E 7200                       		moveq	#0,d1
00000330                            
00000330                            loc_32C:
00000330 D258                       		add.w	(a0)+,d1
00000332 B088                       		cmp.l	a0,d0
00000334 64FA                       		bcc.s	loc_32C
00000336 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033C B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000342 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000346 7E00                       		moveq	#0,d7
00000348 3C3C 007F                  		move.w	#$7F,d6
0000034C                            
0000034C                            loc_348:
0000034C 2CC7                       		move.l	d7,(a6)+
0000034E 51CE FFFC                  		dbf	d6,loc_348
00000352 1039 00A1 0001             		move.b	($A10001).l,d0
00000358 0200 00C0                  		andi.b	#$C0,d0
0000035C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000360 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000368                            
00000368                            GameInit:
00000368 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036E 7E00                       		moveq	#0,d7
00000370 3C3C 3F7F                  		move.w	#$3F7F,d6
00000374                            
00000374                            GameClrRAM:
00000374 2CC7                       		move.l	d7,(a6)+
00000376 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037A                            
0000037A 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000380 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000388                            
00000388 6100 0000                  		bsr.w	VDPSetupGame
0000038C 6100 0000                  		bsr.w	SoundDriverLoad
00000390 6100 0000                  		bsr.w	JoypadInit
00000394 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039A                            
0000039A                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039A                            
0000039A                            MainGameLoop:
0000039A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000039E 0240 003C                  		andi.w	#$3C,d0
000003A2 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A6 60F2                       		bra.s	MainGameLoop
000003A8                            ; ===========================================================================
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            ; Main game mode array
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            
000003A8                            GameModeArray:
000003A8 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C8                            ; ===========================================================================
000003C8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            CheckSumError:
000003CE 6100 0000                  		bsr.w	VDPSetupGame
000003D2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DC 7E3F                       		moveq	#$3F,d7
000003DE                            
000003DE                            CheckSum_Red:
000003DE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EA                            
000003EA                            CheckSum_Loop:
000003EA 60FE                       		bra.s	CheckSum_Loop
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            BusError:
000003EC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            AddressError:
000003F4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            IllegalInstr:
000003FC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ZeroDivide:
00000408 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ChkInstr:
00000410 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            TrapvInstr:
00000418 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            PrivilegeViol:
00000420 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            Trace:
00000428 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1010Emu:
00000430 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            Line1111Emu:
0000043C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000442 54AF 0002                  		addq.l	#2,2(sp)
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            ErrorExcept:
00000448 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            loc_43A:
00000450 46FC 2700                  		move	#$2700,sr
00000454 544F                       		addq.w	#2,sp
00000456 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045A 544F                       		addq.w	#2,sp
0000045C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000462 6100 0000                  		bsr.w	ShowErrorMsg
00000466 202F 0002                  		move.l	2(sp),d0
0000046A 6100 0000                  		bsr.w	sub_5BA
0000046E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 6000                       		bra.s	loc_478
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_462:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E                            
0000048E                            loc_478:
0000048E 6100 0000                  		bsr.w	ErrorWaitForC
00000492 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000498 46FC 2300                  		move	#$2300,sr
0000049C 4E73                       		rte	
0000049E                            
0000049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049E                            
0000049E                            
0000049E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049E 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AE 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B4 323C 027F                  		move.w	#$27F,d1
000004B8                            
000004B8                            Error_LoadGfx:
000004B8 3C98                       		move.w	(a0)+,(a6)
000004BA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BE 7000                       		moveq	#0,d0		; clear	d0
000004C0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D6 7212                       		moveq	#$12,d1		; number of characters
000004D8                            
000004D8                            Error_LoopChars:
000004D8 7000                       		moveq	#0,d0
000004DA 1018                       		move.b	(a0)+,d0
000004DC 0640 0790                  		addi.w	#$790,d0
000004E0 3C80                       		move.w	d0,(a6)
000004E2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E6 4E75                       		rts	
000004E8                            ; End of function ShowErrorMsg
000004E8                            
000004E8                            ; ===========================================================================
000004E8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FC 0000                       		dc.w asc_5A6-ErrorText
000004FE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000511 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000524 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000537 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000570 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000583 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000596 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D0 00                         		even
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5BA:				; XREF: loc_43A; loc_462
000005D0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D4 7407                       		moveq	#7,d2
000005D6                            
000005D6                            loc_5C0:
000005D6 E998                       		rol.l	#4,d0
000005D8 6100                       		bsr.s	sub_5CA
000005DA 51CA FFFA                  		dbf	d2,loc_5C0
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5BA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            sub_5CA:				; XREF: sub_5BA
000005E0 3200                       		move.w	d0,d1
000005E2 0241 000F                  		andi.w	#$F,d1
000005E6 0C41 000A                  		cmpi.w	#$A,d1
000005EA 6500                       		bcs.s	loc_5D8
000005EC 5E41                       		addq.w	#7,d1
000005EE                            
000005EE                            loc_5D8:
000005EE 0641 07C0                  		addi.w	#$7C0,d1
000005F2 3C81                       		move.w	d1,(a6)
000005F4 4E75                       		rts	
000005F6                            ; End of function sub_5CA
000005F6                            
000005F6                            
000005F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F6                            
000005F6                            
000005F6                            ErrorWaitForC:				; XREF: loc_478
000005F6 6100 0000                  		bsr.w	ReadJoypads
000005FA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000600 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000604 4E75                       		rts	
00000606                            ; End of function ErrorWaitForC
00000606                            
00000606                            ; ===========================================================================
00000606                            
00000606                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D46                            Art_Text_end:		even
00000D46                            
00000D46                            ; ===========================================================================
00000D46                            ;VBlank
00000D46                            loc_B10:				; XREF: Vectors
00000D46 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D4E 6700                       		beq.s	loc_B88
00000D50 3039 00C0 0004             		move.w	($C00004).l,d0
00000D56 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D60 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D68 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D6E 6700                       		beq.s	loc_B42
00000D70 303C 0700                  		move.w	#$700,d0
00000D74                            
00000D74                            loc_B3E:
00000D74 51C8 FFFE                  		dbf	d0,loc_B3E
00000D78                            
00000D78                            loc_B42:
00000D78 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D7C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D82 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D88 0240 003E                  		andi.w	#$3E,d0
00000D8C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D90 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D94                            
00000D94                            loc_B5E:				; XREF: loc_B88
00000D94 4EB9 0000 0000             		jsr	sub_71B4C
00000D9A                            
00000D9A                            loc_B64:				; XREF: loc_D50
00000D9A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D9E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DA2 4E73                       		rte	
00000DA4                            ; ===========================================================================
00000DA4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DAC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DB0 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DB4 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB8 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DBC 0000                       		dc.w loc_E72-off_B6E
00000DBE                            ; ===========================================================================
00000DBE                            
00000DBE                            loc_B88:				; XREF: loc_B10; off_B6E
00000DBE 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DC4 6700                       		beq.s	loc_B9A
00000DC6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DCC 6600 FFC6                  		bne.w	loc_B5E
00000DD0                            
00000DD0                            loc_B9A:
00000DD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DD6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DDA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DE0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DE6 6700                       		beq.s	loc_BBA
00000DE8 303C 0700                  		move.w	#$700,d0
00000DEC                            
00000DEC                            loc_BB6:
00000DEC 51C8 FFFE                  		dbf	d0,loc_BB6
00000DF0                            
00000DF0                            loc_BBA:
00000DF0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DFE                            
00000DFE                            loc_BC8:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000E06 66F6                       		bne.s	loc_BC8
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_BFE
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_C22
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_BFE:				; XREF: loc_BC8
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_C22:				; XREF: loc_BC8
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E64 6000 FF2E                  		bra.w	loc_B5E
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C32:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C                            
00000E6C                            loc_C36:				; XREF: off_B6E
00000E6C 4A78 F614                  		tst.w	($FFFFF614).w
00000E70 6700 0000                  		beq.w	locret_C42
00000E74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E78                            
00000E78                            locret_C42:
00000E78 4E75                       		rts	
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_C44:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	sub_106E
00000E7E 6100 0000                  		bsr.w	sub_6886
00000E82 6100 0000                  		bsr.w	sub_1642
00000E86 4A78 F614                  		tst.w	($FFFFF614).w
00000E8A 6700 0000                  		beq.w	locret_C5C
00000E8E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E92                            
00000E92                            locret_C5C:
00000E92 4E75                       		rts	
00000E94                            ; ===========================================================================
00000E94                            
00000E94                            loc_C5E:				; XREF: off_B6E
00000E94 6100 0000                  		bsr.w	sub_106E
00000E98 4E75                       		rts	
00000E9A                            ; ===========================================================================
00000E9A                            
00000E9A                            loc_C64:				; XREF: off_B6E
00000E9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000EA0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000EA4                            
00000EA4                            loc_C6E:				; XREF: off_B6E
00000EA4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EAC                            
00000EAC                            loc_C76:
00000EAC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EB4 66F6                       		bne.s	loc_C76		; if not, branch
00000EB6 6100 0000                  		bsr.w	ReadJoypads
00000EBA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EBE 6600                       		bne.s	loc_CB0
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC C000                  		move.w	#$C000,(a5)
00000EDA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 6000                       		bra.s	loc_CD4
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            loc_CB0:				; XREF: loc_C76
00000EE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EF8 3ABC 977F                  		move.w	#$977F,(a5)
00000EFC 3ABC C000                  		move.w	#$C000,(a5)
00000F00 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0A                            
00000F0A                            loc_CD4:				; XREF: loc_C76
00000F0A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F44 3ABC 977F                  		move.w	#$977F,(a5)
00000F48 3ABC 7800                  		move.w	#$7800,(a5)
00000F4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F56 4A38 F767                  		tst.b	($FFFFF767).w
00000F5A 6700                       		beq.s	loc_D50
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F68 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7000                  		move.w	#$7000,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F86                            
00000F86                            loc_D50:
00000F86 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F8E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F94 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F9A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FA0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FA6 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FAC 6400                       		bcc.s	Demo_Time
00000FAE 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FB4 588F                       		addq.l	#4,sp
00000FB6 6000 FDE2                  		bra.w	loc_B64
00000FBA                            
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            ; Subroutine to	run a demo for an amount of time
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            
00000FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FBA                            
00000FBA                            
00000FBA                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FBA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FBE 4EB9 0000 0000             		jsr	AniArt_Load
00000FC4 4EB9 0000 0000             		jsr	HudUpdate
00000FCA 6100 0000                  		bsr.w	sub_165E
00000FCE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FD2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FD6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FDA                            
00000FDA                            Demo_TimeEnd:
00000FDA 4E75                       		rts	
00000FDC                            ; End of function Demo_Time
00000FDC                            
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_DA6:				; XREF: off_B6E
00000FDC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE4                            
00000FE4                            loc_DAE:
00000FE4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEC 66F6                       		bne.s	loc_DAE		; if not, branch
00000FEE 6100 0000                  		bsr.w	ReadJoypads
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FFE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC C000                  		move.w	#$C000,(a5)
0000100C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001022 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001028 3ABC 977F                  		move.w	#$977F,(a5)
0000102C 3ABC 7800                  		move.w	#$7800,(a5)
00001030 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001036 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000103A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001040 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000111E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001124                            
00001124                            loc_EEE:
00001124 3ABC 977F                  		move.w	#$977F,(a5)
00001128 3ABC 7C00                  		move.w	#$7C00,(a5)
0000112C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001132 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001136 4BF9 00C0 0004             		lea	($C00004).l,a5
0000113C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001142 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001148 3ABC 977F                  		move.w	#$977F,(a5)
0000114C 3ABC 7800                  		move.w	#$7800,(a5)
00001150 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001156 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000115A 4A38 F767                  		tst.b	($FFFFF767).w
0000115E 6700                       		beq.s	loc_F54
00001160 4BF9 00C0 0004             		lea	($C00004).l,a5
00001166 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000116C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001172 3ABC 977F                  		move.w	#$977F,(a5)
00001176 3ABC 7000                  		move.w	#$7000,(a5)
0000117A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001180 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001184 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000118A                            
0000118A                            loc_F54:
0000118A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001192 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001198 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000119E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011A4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011AA 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011AE 4EB9 0000 0000             		jsr	AniArt_Load
000011B4 4EB9 0000 0000             		jsr	HudUpdate
000011BA 6100 0000                  		bsr.w	sub_1642
000011BE 4E75                       		rts	
000011C0                            ; ===========================================================================
000011C0                            
000011C0                            loc_F8A:				; XREF: off_B6E
000011C0 6100 0000                  		bsr.w	sub_106E
000011C4 5238 F628                  		addq.b	#1,($FFFFF628).w
000011C8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011CE 4E75                       		rts	
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_F9A:				; XREF: off_B6E
000011D0 6100 0000                  		bsr.w	sub_106E
000011D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011D8 6000 0000                  		bra.w	sub_1642
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_FA6:				; XREF: off_B6E
000011DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011E4                            
000011E4                            loc_FAE:
000011E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011EC 66F6                       		bne.s	loc_FAE		; if not, branch
000011EE 6100 0000                  		bsr.w	ReadJoypads
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011FE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001204 3ABC 977F                  		move.w	#$977F,(a5)
00001208 3ABC C000                  		move.w	#$C000,(a5)
0000120C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001212 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001216 4BF9 00C0 0004             		lea	($C00004).l,a5
0000121C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001222 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001228 3ABC 977F                  		move.w	#$977F,(a5)
0000122C 3ABC 7800                  		move.w	#$7800,(a5)
00001230 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001236 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000123A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001240 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4A38 F64E                  		tst.b	($FFFFF64E).w
000012BE 6600                       		bne.s	loc_10B0
000012C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012F2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F8 3ABC 977F                  		move.w	#$977F,(a5)
000012FC 3ABC C000                  		move.w	#$C000,(a5)
00001300 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001306 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130A                            
0000130A                            loc_10D4:				; XREF: sub_106E
0000130A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001310 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001316 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000131C 3ABC 977F                  		move.w	#$977F,(a5)
00001320 3ABC 7800                  		move.w	#$7800,(a5)
00001324 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000132A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000133A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001340 3ABC 977F                  		move.w	#$977F,(a5)
00001344 3ABC 7C00                  		move.w	#$7C00,(a5)
00001348 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000134E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000135A 4E75                       		rts	
0000135C                            ; End of function sub_106E
0000135C                            
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            ; Subroutine to	move pallets from the RAM to CRAM
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            
0000135C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135C                            
0000135C                            
0000135C                            PalToCRAM:
0000135C 46FC 2700                  		move	#$2700,sr
00001360 4A78 F644                  		tst.w	($FFFFF644).w
00001364 6700                       		beq.s	locret_119C
00001366 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000136C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001370 43F9 00C0 0000             		lea	($C00000).l,a1
00001376 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000137A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001382 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C8 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013CC 4A38 F64F                  		tst.b	($FFFFF64F).w
000013D0 6600                       		bne.s	loc_119E
000013D2                            
000013D2                            locret_119C:
000013D2 4E73                       		rte	
000013D4                            ; ===========================================================================
000013D4                            
000013D4                            loc_119E:				; XREF: PalToCRAM
000013D4 4238 F64F                  		clr.b	($FFFFF64F).w
000013D8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013DC 6100 FBDC                  		bsr.w	Demo_Time
000013E0 4EB9 0000 0000             		jsr	sub_71B4C
000013E6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013EA 4E73                       		rte	
000013EC                            ; End of function PalToCRAM
000013EC                            
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Subroutine to	initialise joypads
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            
000013EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013EC                            
000013EC                            
000013EC                            JoypadInit:				; XREF: GameClrRAM
000013EC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013F4                            
000013F4                            Joypad_WaitZ80:
000013F4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013FC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013FE 7040                       		moveq	#$40,d0
00001400 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001406 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000140C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001412 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000141A 4E75                       		rts	
0000141C                            ; End of function JoypadInit
0000141C                            
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            ; Subroutine to	read joypad input, and send it to the RAM
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            
0000141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141C                            
0000141C                            
0000141C                            ReadJoypads:
0000141C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001420 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001426 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001428 5449                       		addq.w	#2,a1		; do the second	joypad
0000142A                            
0000142A                            Joypad_Read:
0000142A 12BC 0000                  		move.b	#0,(a1)
0000142E 4E71                       		nop	
00001430 4E71                       		nop	
00001432 1011                       		move.b	(a1),d0
00001434 E508                       		lsl.b	#2,d0
00001436 0200 00C0                  		andi.b	#$C0,d0
0000143A 12BC 0040                  		move.b	#$40,(a1)
0000143E 4E71                       		nop	
00001440 4E71                       		nop	
00001442 1211                       		move.b	(a1),d1
00001444 0201 003F                  		andi.b	#$3F,d1
00001448 8001                       		or.b	d1,d0
0000144A 4600                       		not.b	d0
0000144C 1210                       		move.b	(a0),d1
0000144E B101                       		eor.b	d0,d1
00001450 10C0                       		move.b	d0,(a0)+
00001452 C200                       		and.b	d0,d1
00001454 10C1                       		move.b	d1,(a0)+
00001456 4E75                       		rts	
00001458                            ; End of function ReadJoypads
00001458                            
00001458                            
00001458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001458                            
00001458                            
00001458                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001458 41F9 00C0 0004             		lea	($C00004).l,a0
0000145E 43F9 00C0 0000             		lea	($C00000).l,a1
00001464 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000146A 7E12                       		moveq	#$12,d7
0000146C                            
0000146C                            VDP_Loop:
0000146C 309A                       		move.w	(a2)+,(a0)
0000146E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001472                            
00001472 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001478 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001482 7000                       		moveq	#0,d0
00001484 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000148E 3E3C 003F                  		move.w	#$3F,d7
00001492                            
00001492                            VDP_ClrCRAM:
00001492 3280                       		move.w	d0,(a1)
00001494 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001498                            
00001498 42B8 F616                  		clr.l	($FFFFF616).w
0000149C 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A0 2F01                       		move.l	d1,-(sp)
000014A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B2 3ABC 9780                  		move.w	#$9780,(a5)
000014B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C4                            
000014C4                            loc_128E:
000014C4 3215                       		move.w	(a5),d1
000014C6 0801 0001                  		btst	#1,d1
000014CA 66F8                       		bne.s	loc_128E
000014CC                            
000014CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D0 221F                       		move.l	(sp)+,d1
000014D2 4E75                       		rts	
000014D4                            ; End of function VDPSetupGame
000014D4                            
000014D4                            ; ===========================================================================
000014D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	clear the screen
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ClearScreen:
000014FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001500 3ABC 8F01                  		move.w	#$8F01,(a5)
00001504 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150A 3ABC 9780                  		move.w	#$9780,(a5)
0000150E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001514 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151C                            
0000151C                            loc_12E6:
0000151C 3215                       		move.w	(a5),d1
0000151E 0801 0001                  		btst	#1,d1
00001522 66F8                       		bne.s	loc_12E6
00001524                            
00001524 3ABC 8F02                  		move.w	#$8F02,(a5)
00001528 4BF9 00C0 0004             		lea	($C00004).l,a5
0000152E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001532 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001538 3ABC 9780                  		move.w	#$9780,(a5)
0000153C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001542 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154A                            
0000154A                            loc_1314:
0000154A 3215                       		move.w	(a5),d1
0000154C 0801 0001                  		btst	#1,d1
00001550 66F8                       		bne.s	loc_1314
00001552                            
00001552 3ABC 8F02                  		move.w	#$8F02,(a5)
00001556 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000155E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001566 43F8 F800                  		lea	($FFFFF800).w,a1
0000156A 7000                       		moveq	#0,d0
0000156C 323C 009F                  		move.w	#$9F,d1
00001570                            
00001570                            loc_133A:
00001570 22C0                       		move.l	d0,(a1)+
00001572 51C9 FFFC                  		dbf	d1,loc_133A
00001576                            
00001576 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157A 7000                       		moveq	#0,d0
0000157C 323C 00FF                  		move.w	#$FF,d1
00001580                            
00001580                            loc_134A:
00001580 22C0                       		move.l	d0,(a1)+
00001582 51C9 FFFC                  		dbf	d1,loc_134A
00001586 4E75                       		rts	
00001588                            ; End of function ClearScreen
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	load the sound driver
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001588 4E71                       		nop	
0000158A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001592 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A0 43F9 00A0 0000             		lea	($A00000).l,a1
000015A6 6100 0000                  		bsr.w	KosDec		; decompress
000015AA 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B2 4E71                       		nop	
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CA 4E75                       		rts	
000015CC                            ; End of function SoundDriverLoad
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	play a sound or	music track
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PlaySound:
000015CC 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D0 4E75                       		rts	
000015D2                            ; End of function PlaySound
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	play a special sound/music (E0-E4)
000015D2                            ;
000015D2                            ; E0 - Fade out
000015D2                            ; E1 - Sega
000015D2                            ; E2 - Speed up
000015D2                            ; E3 - Normal speed
000015D2                            ; E4 - Stop
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PlaySound_Special:
000015D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D6 4E75                       		rts	
000015D8                            ; End of function PlaySound_Special
000015D8                            
000015D8                            ; ===========================================================================
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            ; Unused sound/music subroutine
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            
000015D8                            PlaySound_Unk:
000015D8 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DC 4E75                       		rts	
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	pause the game
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            PauseGame:				; XREF: Level_MainLoop; et al
000015DE 4E71                       		nop	
000015E0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E4 6700                       		beq.s	Unpause		; if not, branch
000015E6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EA 6600                       		bne.s	loc_13BE	; if yes, branch
000015EC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F4                            
000015F4                            loc_13BE:
000015F4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001600                            
00001600                            loc_13CA:
00001600 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001606 6100 0000                  		bsr.w	DelayProgram
0000160A 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000160E 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001610 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001616 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001618 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000161E 4E71                       		nop	
00001620 6000                       		bra.s	loc_1404
00001622                            ; ===========================================================================
00001622                            
00001622                            Pause_ChkBC:				; XREF: PauseGame
00001622 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001628 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001630 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001632                            
00001632                            Pause_ChkStart:				; XREF: PauseGame
00001632 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001638 67C6                       		beq.s	loc_13CA	; if not, branch
0000163A                            
0000163A                            loc_1404:				; XREF: PauseGame
0000163A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001640                            
00001640                            Unpause:				; XREF: PauseGame
00001640 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001646                            
00001646                            Pause_DoNothing:			; XREF: PauseGame
00001646 4E75                       		rts	
00001648                            ; ===========================================================================
00001648                            
00001648                            Pause_SlowMo:				; XREF: PauseGame
00001648 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654 4E75                       		rts	
00001656                            ; End of function PauseGame
00001656                            
00001656                            ; ---------------------------------------------------------------------------
00001656                            ; Subroutine to	display	patterns via the VDP
00001656                            ; ---------------------------------------------------------------------------
00001656                            
00001656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001656                            
00001656                            
00001656                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001656 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165C 283C 0080 0000             		move.l	#$800000,d4
00001662                            
00001662                            loc_142C:
00001662 2D40 0004                  		move.l	d0,4(a6)
00001666 3601                       		move.w	d1,d3
00001668                            
00001668                            loc_1432:
00001668 3C99                       		move.w	(a1)+,(a6)
0000166A 51CB FFFC                  		dbf	d3,loc_1432
0000166E D084                       		add.l	d4,d0
00001670 51CA FFF0                  		dbf	d2,loc_142C
00001674 4E75                       		rts	
00001676                            ; End of function ShowVDPGraphics
00001676                            
00001676                            ; ---------------------------------------------------------------------------
00001676                            ; Nemesis decompression	algorithm
00001676                            ; ---------------------------------------------------------------------------
00001676                            
00001676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001676                            
00001676                            
00001676                            NemDec:
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001680 49F9 00C0 0000             		lea	($C00000).l,a4
00001686 6000                       		bra.s	loc_145C
00001688                            ; ===========================================================================
00001688 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001692                            
00001692                            loc_145C:				; XREF: NemDec
00001692 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001696 3418                       		move.w	(a0)+,d2
00001698 E34A                       		lsl.w	#1,d2
0000169A 6400                       		bcc.s	loc_146A
0000169C D6FC 000A                  		adda.w	#$A,a3
000016A0                            
000016A0                            loc_146A:
000016A0 E54A                       		lsl.w	#2,d2
000016A2 3A42                       		movea.w	d2,a5
000016A4 7608                       		moveq	#8,d3
000016A6 7400                       		moveq	#0,d2
000016A8 7800                       		moveq	#0,d4
000016AA 6100 0000                  		bsr.w	NemDec4
000016AE 1A18                       		move.b	(a0)+,d5
000016B0 E145                       		asl.w	#8,d5
000016B2 1A18                       		move.b	(a0)+,d5
000016B4 3C3C 0010                  		move.w	#$10,d6
000016B8 6100                       		bsr.s	NemDec2
000016BA 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016BE 4E75                       		rts	
000016C0                            ; End of function NemDec
000016C0                            
000016C0                            
000016C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C0                            
000016C0                            
000016C0                            NemDec2:				; XREF: NemDec
000016C0 3E06                       		move.w	d6,d7
000016C2 5147                       		subq.w	#8,d7
000016C4 3205                       		move.w	d5,d1
000016C6 EE69                       		lsr.w	d7,d1
000016C8 0C01 00FC                  		cmpi.b	#-4,d1
000016CC 6400                       		bcc.s	loc_14D6
000016CE 0241 00FF                  		andi.w	#$FF,d1
000016D2 D241                       		add.w	d1,d1
000016D4 1031 1000                  		move.b	(a1,d1.w),d0
000016D8 4880                       		ext.w	d0
000016DA 9C40                       		sub.w	d0,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14B2
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14B2:
000016E8 1231 1001                  		move.b	1(a1,d1.w),d1
000016EC 3001                       		move.w	d1,d0
000016EE 0241 000F                  		andi.w	#$F,d1
000016F2 0240 00F0                  		andi.w	#$F0,d0
000016F6                            
000016F6                            loc_14C0:				; XREF: NemDec3
000016F6 E848                       		lsr.w	#4,d0
000016F8                            
000016F8                            loc_14C2:				; XREF: NemDec3
000016F8 E98C                       		lsl.l	#4,d4
000016FA 8801                       		or.b	d1,d4
000016FC 5343                       		subq.w	#1,d3
000016FE 6600                       		bne.s	loc_14D0
00001700 4ED3                       		jmp	(a3)
00001702                            ; End of function NemDec2
00001702                            
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            NemDec3:				; XREF: loc_1502
00001702 7800                       		moveq	#0,d4
00001704 7608                       		moveq	#8,d3
00001706                            
00001706                            loc_14D0:				; XREF: NemDec2
00001706 51C8 FFF0                  		dbf	d0,loc_14C2
0000170A 60B4                       		bra.s	NemDec2
0000170C                            ; ===========================================================================
0000170C                            
0000170C                            loc_14D6:				; XREF: NemDec2
0000170C 5D46                       		subq.w	#6,d6
0000170E 0C46 0009                  		cmpi.w	#9,d6
00001712 6400                       		bcc.s	loc_14E4
00001714 5046                       		addq.w	#8,d6
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A                            
0000171A                            loc_14E4:				; XREF: NemDec3
0000171A 5F46                       		subq.w	#7,d6
0000171C 3205                       		move.w	d5,d1
0000171E EC69                       		lsr.w	d6,d1
00001720 3001                       		move.w	d1,d0
00001722 0241 000F                  		andi.w	#$F,d1
00001726 0240 0070                  		andi.w	#$70,d0
0000172A 0C46 0009                  		cmpi.w	#9,d6
0000172E 64C6                       		bcc.s	loc_14C0
00001730 5046                       		addq.w	#8,d6
00001732 E145                       		asl.w	#8,d5
00001734 1A18                       		move.b	(a0)+,d5
00001736 60BE                       		bra.s	loc_14C0
00001738                            ; End of function NemDec3
00001738                            
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1502:				; XREF: NemDec
00001738 2884                       		move.l	d4,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66C2                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 2882                       		move.l	d2,(a4)
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66B6                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            ; ===========================================================================
0000174E                            
0000174E                            loc_1518:				; XREF: NemDec
0000174E 28C4                       		move.l	d4,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66AC                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758 B982                       		eor.l	d4,d2
0000175A 28C2                       		move.l	d2,(a4)+
0000175C 534D                       		subq.w	#1,a5
0000175E 380D                       		move.w	a5,d4
00001760 66A0                       		bne.s	NemDec3
00001762 4E75                       		rts	
00001764                            
00001764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001764                            
00001764                            
00001764                            NemDec4:				; XREF: NemDec
00001764 1018                       		move.b	(a0)+,d0
00001766                            
00001766                            loc_1530:
00001766 0C00 00FF                  		cmpi.b	#-1,d0
0000176A 6600                       		bne.s	loc_1538
0000176C 4E75                       		rts	
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1538:				; XREF: NemDec4
0000176E 3E00                       		move.w	d0,d7
00001770                            
00001770                            loc_153A:
00001770 1018                       		move.b	(a0)+,d0
00001772 0C00 0080                  		cmpi.b	#$80,d0
00001776 64EE                       		bcc.s	loc_1530
00001778 1200                       		move.b	d0,d1
0000177A 0247 000F                  		andi.w	#$F,d7
0000177E 0241 0070                  		andi.w	#$70,d1
00001782 8E41                       		or.w	d1,d7
00001784 0240 000F                  		andi.w	#$F,d0
00001788 1200                       		move.b	d0,d1
0000178A E149                       		lsl.w	#8,d1
0000178C 8E41                       		or.w	d1,d7
0000178E 7208                       		moveq	#8,d1
00001790 9240                       		sub.w	d0,d1
00001792 6600                       		bne.s	loc_1568
00001794 1018                       		move.b	(a0)+,d0
00001796 D040                       		add.w	d0,d0
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 60D2                       		bra.s	loc_153A
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_1568:				; XREF: NemDec4
0000179E 1018                       		move.b	(a0)+,d0
000017A0 E368                       		lsl.w	d1,d0
000017A2 D040                       		add.w	d0,d0
000017A4 7A01                       		moveq	#1,d5
000017A6 E36D                       		lsl.w	d1,d5
000017A8 5345                       		subq.w	#1,d5
000017AA                            
000017AA                            loc_1574:
000017AA 3387 0000                  		move.w	d7,(a1,d0.w)
000017AE 5440                       		addq.w	#2,d0
000017B0 51CD FFF8                  		dbf	d5,loc_1574
000017B4 60BA                       		bra.s	loc_153A
000017B6                            ; End of function NemDec4
000017B6                            
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            ; Subroutine to	load pattern load cues
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 45F8 F680                  		lea	($FFFFF680).w,a2
000017CE                            
000017CE                            loc_1598:
000017CE 4A92                       		tst.l	(a2)
000017D0 6700                       		beq.s	loc_15A0
000017D2 5C4A                       		addq.w	#6,a2
000017D4 60F8                       		bra.s	loc_1598
000017D6                            ; ===========================================================================
000017D6                            
000017D6                            loc_15A0:				; XREF: LoadPLC
000017D6 3019                       		move.w	(a1)+,d0
000017D8 6B00                       		bmi.s	loc_15AC
000017DA                            
000017DA                            loc_15A4:
000017DA 24D9                       		move.l	(a1)+,(a2)+
000017DC 34D9                       		move.w	(a1)+,(a2)+
000017DE 51C8 FFFA                  		dbf	d0,loc_15A4
000017E2                            
000017E2                            loc_15AC:
000017E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E6 4E75                       		rts	
000017E8                            ; End of function LoadPLC
000017E8                            
000017E8                            
000017E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E8                            
000017E8                            
000017E8                            LoadPLC2:
000017E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F2 D040                       		add.w	d0,d0
000017F4 3031 0000                  		move.w	(a1,d0.w),d0
000017F8 43F1 0000                  		lea	(a1,d0.w),a1
000017FC 6100                       		bsr.s	ClearPLC
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 3019                       		move.w	(a1)+,d0
00001804 6B00                       		bmi.s	loc_15D8
00001806                            
00001806                            loc_15D0:
00001806 24D9                       		move.l	(a1)+,(a2)+
00001808 34D9                       		move.w	(a1)+,(a2)+
0000180A 51C8 FFFA                  		dbf	d0,loc_15D0
0000180E                            
0000180E                            loc_15D8:
0000180E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001812 4E75                       		rts	
00001814                            ; End of function LoadPLC2
00001814                            
00001814                            ; ---------------------------------------------------------------------------
00001814                            ; Subroutine to	clear the pattern load cues
00001814                            ; ---------------------------------------------------------------------------
00001814                            
00001814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001814                            
00001814                            
00001814                            ClearPLC:				; XREF: LoadPLC2
00001814 45F8 F680                  		lea	($FFFFF680).w,a2
00001818 701F                       		moveq	#$1F,d0
0000181A                            
0000181A                            ClearPLC_Loop:
0000181A 429A                       		clr.l	(a2)+
0000181C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001820 4E75                       		rts	
00001822                            ; End of function ClearPLC
00001822                            
00001822                            ; ---------------------------------------------------------------------------
00001822                            ; Subroutine to	use graphics listed in a pattern load cue
00001822                            ; ---------------------------------------------------------------------------
00001822                            
00001822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001822                            
00001822                            
00001822                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001822 4AB8 F680                  		tst.l	($FFFFF680).w
00001826 6700                       		beq.s	locret_1640
00001828 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182C 6600                       		bne.s	locret_1640
0000182E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001832 47F9 0000 1738             		lea	(loc_1502).l,a3
00001838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183C 3418                       		move.w	(a0)+,d2
0000183E 6A00                       		bpl.s	loc_160E
00001840 D6FC 000A                  		adda.w	#$A,a3
00001844                            
00001844                            loc_160E:
00001844 0242 7FFF                  		andi.w	#$7FFF,d2
00001848 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184C 6100 FF16                  		bsr.w	NemDec4
00001850 1A18                       		move.b	(a0)+,d5
00001852 E145                       		asl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 7C10                       		moveq	#$10,d6
00001858 7000                       		moveq	#0,d0
0000185A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000185E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001862 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001866 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000186E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001872 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001876                            
00001876                            locret_1640:
00001876 4E75                       		rts	
00001878                            ; End of function RunPLC_RAM
00001878                            
00001878                            
00001878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001878                            
00001878                            
00001878                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001878 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187C 6700 0000                  		beq.w	locret_16DA
00001880 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001886 7000                       		moveq	#0,d0
00001888 3038 F684                  		move.w	($FFFFF684).w,d0
0000188C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001892 6000                       		bra.s	loc_1676
00001894                            ; End of function sub_1642
00001894                            
00001894                            
00001894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001894                            
00001894                            
00001894                            sub_165E:				; XREF: Demo_Time
00001894 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001898 6700                       		beq.s	locret_16DA
0000189A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AC                            
000018AC                            loc_1676:				; XREF: sub_1642
000018AC 49F9 00C0 0004             		lea	($C00004).l,a4
000018B2 E588                       		lsl.l	#2,d0
000018B4 E448                       		lsr.w	#2,d0
000018B6 0040 4000                  		ori.w	#$4000,d0
000018BA 4840                       		swap	d0
000018BC 2880                       		move.l	d0,(a4)
000018BE 594C                       		subq.w	#4,a4
000018C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E0                            
000018E0                            loc_16AA:				; XREF: sub_165E
000018E0 3A7C 0008                  		movea.w	#8,a5
000018E4 6100 FE1C                  		bsr.w	NemDec3
000018E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EC 6700                       		beq.s	loc_16DC
000018EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F2 66EC                       		bne.s	loc_16AA
000018F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000018F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001900 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001904 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001908 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001910                            
00001910                            locret_16DA:				; XREF: sub_1642
00001910 4E75                       		rts	
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_16DC:				; XREF: sub_165E
00001912 41F8 F680                  		lea	($FFFFF680).w,a0
00001916 7015                       		moveq	#$15,d0
00001918                            
00001918                            loc_16E2:				; XREF: sub_165E
00001918 20E8 0006                  		move.l	6(a0),(a0)+
0000191C 51C8 FFFA                  		dbf	d0,loc_16E2
00001920 4E75                       		rts	
00001922                            ; End of function sub_165E
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Subroutine to	execute	the pattern load cue
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            RunPLC_ROM:
00001922 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001928 D040                       		add.w	d0,d0
0000192A 3031 0000                  		move.w	(a1,d0.w),d0
0000192E 43F1 0000                  		lea	(a1,d0.w),a1
00001932 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001934                            
00001934                            RunPLC_Loop:
00001934 2059                       		movea.l	(a1)+,a0	; get art pointer
00001936 7000                       		moveq	#0,d0
00001938 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193A E588                       		lsl.l	#2,d0		; divide address by $20
0000193C E448                       		lsr.w	#2,d0
0000193E 0040 4000                  		ori.w	#$4000,d0
00001942 4840                       		swap	d0
00001944 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000194E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001952 4E75                       		rts	
00001954                            ; End of function RunPLC_ROM
00001954                            
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Enigma decompression algorithm
00001954                            ; ---------------------------------------------------------------------------
00001954                            
00001954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001954                            
00001954                            
00001954                            EniDec:
00001954 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001958 3640                       		movea.w	d0,a3
0000195A 1018                       		move.b	(a0)+,d0
0000195C 4880                       		ext.w	d0
0000195E 3A40                       		movea.w	d0,a5
00001960 1818                       		move.b	(a0)+,d4
00001962 E70C                       		lsl.b	#3,d4
00001964 3458                       		movea.w	(a0)+,a2
00001966 D4CB                       		adda.w	a3,a2
00001968 3858                       		movea.w	(a0)+,a4
0000196A D8CB                       		adda.w	a3,a4
0000196C 1A18                       		move.b	(a0)+,d5
0000196E E145                       		asl.w	#8,d5
00001970 1A18                       		move.b	(a0)+,d5
00001972 7C10                       		moveq	#$10,d6
00001974                            
00001974                            loc_173E:				; XREF: loc_1768
00001974 7007                       		moveq	#7,d0
00001976 3E06                       		move.w	d6,d7
00001978 9E40                       		sub.w	d0,d7
0000197A 3205                       		move.w	d5,d1
0000197C EE69                       		lsr.w	d7,d1
0000197E 0241 007F                  		andi.w	#$7F,d1
00001982 3401                       		move.w	d1,d2
00001984 0C41 0040                  		cmpi.w	#$40,d1
00001988 6400                       		bcc.s	loc_1758
0000198A 7006                       		moveq	#6,d0
0000198C E24A                       		lsr.w	#1,d2
0000198E                            
0000198E                            loc_1758:
0000198E 6100 0000                  		bsr.w	sub_188C
00001992 0242 000F                  		andi.w	#$F,d2
00001996 E849                       		lsr.w	#4,d1
00001998 D241                       		add.w	d1,d1
0000199A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000199E                            ; End of function EniDec
0000199E                            
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_1768:				; XREF: loc_17B4
0000199E 32CA                       		move.w	a2,(a1)+
000019A0 524A                       		addq.w	#1,a2
000019A2 51CA FFFA                  		dbf	d2,loc_1768
000019A6 60CC                       		bra.s	loc_173E
000019A8                            ; ===========================================================================
000019A8                            
000019A8                            loc_1772:				; XREF: loc_17B4
000019A8 32CC                       		move.w	a4,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_1772
000019AE 60C4                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_177A:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_177E:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 51CA FFFC                  		dbf	d2,loc_177E
000019BA 60B8                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1786:				; XREF: loc_17B4
000019BC 6100 0000                  		bsr.w	loc_17DC
000019C0                            
000019C0                            loc_178A:
000019C0 32C1                       		move.w	d1,(a1)+
000019C2 5241                       		addq.w	#1,d1
000019C4 51CA FFFA                  		dbf	d2,loc_178A
000019C8 60AA                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_1794:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_1798:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 5341                       		subq.w	#1,d1
000019D2 51CA FFFA                  		dbf	d2,loc_1798
000019D6 609C                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17A2:				; XREF: loc_17B4
000019D8 0C42 000F                  		cmpi.w	#$F,d2
000019DC 6700                       		beq.s	loc_17C4
000019DE                            
000019DE                            loc_17A8:
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 51CA FFF8                  		dbf	d2,loc_17A8
000019E8 608A                       		bra.s	loc_173E
000019EA                            ; ===========================================================================
000019EA                            
000019EA                            loc_17B4:				; XREF: EniDec
000019EA 60B2                       		bra.s	loc_1768
000019EC                            ; ===========================================================================
000019EC 60B0                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B8                       		bra.s	loc_1772
000019F0                            ; ===========================================================================
000019F0 60B6                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60BC                       		bra.s	loc_177A
000019F4                            ; ===========================================================================
000019F4 60C6                       		bra.s	loc_1786
000019F6                            ; ===========================================================================
000019F6 60D2                       		bra.s	loc_1794
000019F8                            ; ===========================================================================
000019F8 60DE                       		bra.s	loc_17A2
000019FA                            ; ===========================================================================
000019FA                            
000019FA                            loc_17C4:				; XREF: loc_17A2
000019FA 5348                       		subq.w	#1,a0
000019FC 0C46 0010                  		cmpi.w	#$10,d6
00001A00 6600                       		bne.s	loc_17CE
00001A02 5348                       		subq.w	#1,a0
00001A04                            
00001A04                            loc_17CE:
00001A04 3008                       		move.w	a0,d0
00001A06 E248                       		lsr.w	#1,d0
00001A08 6400                       		bcc.s	loc_17D6
00001A0A 5248                       		addq.w	#1,a0
00001A0C                            
00001A0C                            loc_17D6:
00001A0C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A10 4E75                       		rts	
00001A12                            ; ===========================================================================
00001A12                            
00001A12                            loc_17DC:				; XREF: loc_17A2
00001A12 360B                       		move.w	a3,d3
00001A14 1204                       		move.b	d4,d1
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_17EE
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_17EE
00001A20 0043 8000                  		ori.w	#-$8000,d3
00001A24                            
00001A24                            loc_17EE:
00001A24 D201                       		add.b	d1,d1
00001A26 6400                       		bcc.s	loc_17FC
00001A28 5346                       		subq.w	#1,d6
00001A2A 0D05                       		btst	d6,d5
00001A2C 6700                       		beq.s	loc_17FC
00001A2E 0643 4000                  		addi.w	#$4000,d3
00001A32                            
00001A32                            loc_17FC:
00001A32 D201                       		add.b	d1,d1
00001A34 6400                       		bcc.s	loc_180A
00001A36 5346                       		subq.w	#1,d6
00001A38 0D05                       		btst	d6,d5
00001A3A 6700                       		beq.s	loc_180A
00001A3C 0643 2000                  		addi.w	#$2000,d3
00001A40                            
00001A40                            loc_180A:
00001A40 D201                       		add.b	d1,d1
00001A42 6400                       		bcc.s	loc_1818
00001A44 5346                       		subq.w	#1,d6
00001A46 0D05                       		btst	d6,d5
00001A48 6700                       		beq.s	loc_1818
00001A4A 0043 1000                  		ori.w	#$1000,d3
00001A4E                            
00001A4E                            loc_1818:
00001A4E D201                       		add.b	d1,d1
00001A50 6400                       		bcc.s	loc_1826
00001A52 5346                       		subq.w	#1,d6
00001A54 0D05                       		btst	d6,d5
00001A56 6700                       		beq.s	loc_1826
00001A58 0043 0800                  		ori.w	#$800,d3
00001A5C                            
00001A5C                            loc_1826:
00001A5C 3205                       		move.w	d5,d1
00001A5E 3E06                       		move.w	d6,d7
00001A60 9E4D                       		sub.w	a5,d7
00001A62 6400                       		bcc.s	loc_1856
00001A64 3C07                       		move.w	d7,d6
00001A66 0646 0010                  		addi.w	#$10,d6
00001A6A 4447                       		neg.w	d7
00001A6C EF69                       		lsl.w	d7,d1
00001A6E 1A10                       		move.b	(a0),d5
00001A70 EF3D                       		rol.b	d7,d5
00001A72 DE47                       		add.w	d7,d7
00001A74 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A78 D245                       		add.w	d5,d1
00001A7A                            
00001A7A                            loc_1844:				; XREF: loc_1868
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 1A18                       		move.b	(a0)+,d5
00001A86 E14D                       		lsl.w	#8,d5
00001A88 1A18                       		move.b	(a0)+,d5
00001A8A 4E75                       		rts	
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1856:				; XREF: loc_1826
00001A8C 6700                       		beq.s	loc_1868
00001A8E EE69                       		lsr.w	d7,d1
00001A90 300D                       		move.w	a5,d0
00001A92 D040                       		add.w	d0,d0
00001A94 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A98 D243                       		add.w	d3,d1
00001A9A 300D                       		move.w	a5,d0
00001A9C 6000                       		bra.s	sub_188C
00001A9E                            ; ===========================================================================
00001A9E                            
00001A9E                            loc_1868:				; XREF: loc_1856
00001A9E 7C10                       		moveq	#$10,d6
00001AA0                            
00001AA0                            loc_186A:
00001AA0 60D8                       		bra.s	loc_1844
00001AA2                            ; ===========================================================================
00001AA2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AB8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            sub_188C:				; XREF: EniDec
00001AC2 9C40                       		sub.w	d0,d6
00001AC4 0C46 0009                  		cmpi.w	#9,d6
00001AC8 6400                       		bcc.s	locret_189A
00001ACA 5046                       		addq.w	#8,d6
00001ACC E145                       		asl.w	#8,d5
00001ACE 1A18                       		move.b	(a0)+,d5
00001AD0                            
00001AD0                            locret_189A:
00001AD0 4E75                       		rts	
00001AD2                            ; End of function sub_188C
00001AD2                            
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Kosinski decompression algorithm
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            KosDec:
00001AD2                            
00001AD2 =FFFFFFFE                  var_2		= -2
00001AD2 =FFFFFFFF                  var_1		= -1
00001AD2                            
00001AD2 558F                       		subq.l	#2,sp
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18A8:
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 40C6                       		move	sr,d6
00001AE2 51CC 0000                  		dbf	d4,loc_18BA
00001AE6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEA 1E98                       		move.b	(a0)+,(sp)
00001AEC 3A17                       		move.w	(sp),d5
00001AEE 780F                       		moveq	#$F,d4
00001AF0                            
00001AF0                            loc_18BA:
00001AF0 44C6                       		move	d6,ccr
00001AF2 6400                       		bcc.s	loc_18C2
00001AF4 12D8                       		move.b	(a0)+,(a1)+
00001AF6 60E6                       		bra.s	loc_18A8
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_18C2:				; XREF: KosDec
00001AF8 7600                       		moveq	#0,d3
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 40C6                       		move	sr,d6
00001AFE 51CC 0000                  		dbf	d4,loc_18D6
00001B02 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B06 1E98                       		move.b	(a0)+,(sp)
00001B08 3A17                       		move.w	(sp),d5
00001B0A 780F                       		moveq	#$F,d4
00001B0C                            
00001B0C                            loc_18D6:
00001B0C 44C6                       		move	d6,ccr
00001B0E 6500                       		bcs.s	loc_1906
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18EA
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18EA:
00001B20 E353                       		roxl.w	#1,d3
00001B22 E24D                       		lsr.w	#1,d5
00001B24 51CC 0000                  		dbf	d4,loc_18FC
00001B28 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2C 1E98                       		move.b	(a0)+,(sp)
00001B2E 3A17                       		move.w	(sp),d5
00001B30 780F                       		moveq	#$F,d4
00001B32                            
00001B32                            loc_18FC:
00001B32 E353                       		roxl.w	#1,d3
00001B34 5243                       		addq.w	#1,d3
00001B36 74FF                       		moveq	#-1,d2
00001B38 1418                       		move.b	(a0)+,d2
00001B3A 6000                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1906:				; XREF: loc_18C2
00001B3C 1018                       		move.b	(a0)+,d0
00001B3E 1218                       		move.b	(a0)+,d1
00001B40 74FF                       		moveq	#-1,d2
00001B42 1401                       		move.b	d1,d2
00001B44 EB4A                       		lsl.w	#5,d2
00001B46 1400                       		move.b	d0,d2
00001B48 0241 0007                  		andi.w	#7,d1
00001B4C 6700                       		beq.s	loc_1928
00001B4E 1601                       		move.b	d1,d3
00001B50 5243                       		addq.w	#1,d3
00001B52                            
00001B52                            loc_191C:
00001B52 1031 2000                  		move.b	(a1,d2.w),d0
00001B56 12C0                       		move.b	d0,(a1)+
00001B58 51CB FFF8                  		dbf	d3,loc_191C
00001B5C 6080                       		bra.s	loc_18A8
00001B5E                            ; ===========================================================================
00001B5E                            
00001B5E                            loc_1928:				; XREF: loc_1906
00001B5E 1218                       		move.b	(a0)+,d1
00001B60 6700                       		beq.s	loc_1938
00001B62 0C01 0001                  		cmpi.b	#1,d1
00001B66 6700 FF76                  		beq.w	loc_18A8
00001B6A 1601                       		move.b	d1,d3
00001B6C 60E4                       		bra.s	loc_191C
00001B6E                            ; ===========================================================================
00001B6E                            
00001B6E                            loc_1938:				; XREF: loc_1928
00001B6E 548F                       		addq.l	#2,sp
00001B70 4E75                       		rts	
00001B72                            ; End of function KosDec
00001B72                            
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routine loading subroutine
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            
00001B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B72                            
00001B72                            
00001B72                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B72 7400                       		moveq	#0,d2
00001B74 7000                       		moveq	#0,d0
00001B76 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7A D040                       		add.w	d0,d0		; multiply by 2
00001B7C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B80 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B84                            ; End of function PalCycle_Load
00001B84                            
00001B84                            ; ===========================================================================
00001B84                            ; ---------------------------------------------------------------------------
00001B84                            ; Pallet cycling routines
00001B84                            ; ---------------------------------------------------------------------------
00001B84 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B86 0000                       		dc.w PalCycle_LZ-PalCycle
00001B88 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B90 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B92                            
00001B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B92                            
00001B92                            
00001B92                            PalCycle_Title:				; XREF: TitleScreen
00001B92 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B98 6000                       		bra.s	loc_196A
00001B9A                            ; ===========================================================================
00001B9A                            
00001B9A                            PalCycle_GHZ:				; XREF: PalCycle
00001B9A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA0                            
00001BA0                            loc_196A:				; XREF: PalCycle_Title
00001BA0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA4 6A00                       		bpl.s	locret_1990
00001BA6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BAC 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB0 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB4 0240 0003                  		andi.w	#3,d0
00001BB8 E748                       		lsl.w	#3,d0
00001BBA 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BBE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC6                            
00001BC6                            locret_1990:
00001BC6 4E75                       		rts	
00001BC8                            ; End of function PalCycle_Title
00001BC8                            
00001BC8                            
00001BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BC8                            
00001BC8                            
00001BC8                            PalCycle_LZ:				; XREF: PalCycle
00001BC8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCC 6A00                       		bpl.s	loc_19D8
00001BCE 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD4 3038 F632                  		move.w	($FFFFF632).w,d0
00001BD8 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BDC 0240 0003                  		andi.w	#3,d0
00001BE0 E748                       		lsl.w	#3,d0
00001BE2 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BE8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BEE 6600                       		bne.s	loc_19C0
00001BF0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BF6                            
00001BF6                            loc_19C0:
00001BF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BFE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C02 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C0E                            
00001C0E                            loc_19D8:
00001C0E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C12 0240 0007                  		andi.w	#7,d0
00001C16 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1A 6700                       		beq.s	locret_1A3A
00001C1C 7201                       		moveq	#1,d1
00001C1E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C22 6700                       		beq.s	loc_19F0
00001C24 4441                       		neg.w	d1
00001C26                            
00001C26                            loc_19F0:
00001C26 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2A 0240 0003                  		andi.w	#3,d0
00001C2E D041                       		add.w	d1,d0
00001C30 0C40 0003                  		cmpi.w	#3,d0
00001C34 6500                       		bcs.s	loc_1A0A
00001C36 3200                       		move.w	d0,d1
00001C38 7000                       		moveq	#0,d0
00001C3A 4A41                       		tst.w	d1
00001C3C 6A00                       		bpl.s	loc_1A0A
00001C3E 7002                       		moveq	#2,d0
00001C40                            
00001C40                            loc_1A0A:
00001C40 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C44 D040                       		add.w	d0,d0
00001C46 3200                       		move.w	d0,d1
00001C48 D040                       		add.w	d0,d0
00001C4A D041                       		add.w	d1,d0
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C52 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C64 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C68 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C6C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C70                            
00001C70                            locret_1A3A:
00001C70 4E75                       		rts	
00001C72                            ; End of function PalCycle_LZ
00001C72                            
00001C72                            ; ===========================================================================
00001C72 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7A                            ; ===========================================================================
00001C7A                            
00001C7A                            PalCycle_MZ:				; XREF: PalCycle
00001C7A 4E75                       		rts	
00001C7C                            
00001C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7C                            
00001C7C                            
00001C7C                            PalCycle_SLZ:				; XREF: PalCycle
00001C7C 4E75                       		rts	
00001C7E                            ; End of function PalCycle_SLZ
00001C7E                            
00001C7E                            
00001C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7E                            
00001C7E                            
00001C7E                            PalCycle_SYZ:				; XREF: PalCycle
00001C7E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C82 6A00                       		bpl.s	locret_1AC6
00001C84 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8A 3038 F632                  		move.w	($FFFFF632).w,d0
00001C8E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C92 0240 0003                  		andi.w	#3,d0
00001C96 E548                       		lsl.w	#2,d0
00001C98 3200                       		move.w	d0,d1
00001C9A D040                       		add.w	d0,d0
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA2 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CAE 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB4 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CB8 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CBC 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC2                            
00001CC2                            locret_1AC6:
00001CC2 4E75                       		rts	
00001CC4                            ; End of function PalCycle_SYZ
00001CC4                            
00001CC4                            
00001CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC4                            
00001CC4                            
00001CC4                            PalCycle_SBZ:				; XREF: PalCycle
00001CC4 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCA 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CCE 6700                       		beq.s	loc_1ADA
00001CD0 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CD6                            
00001CD6                            loc_1ADA:
00001CD6 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDA 321A                       		move.w	(a2)+,d1
00001CDC                            
00001CDC                            loc_1AE0:
00001CDC 5311                       		subq.b	#1,(a1)
00001CDE 6B00                       		bmi.s	loc_1AEA
00001CE0 5489                       		addq.l	#2,a1
00001CE2 5C8A                       		addq.l	#6,a2
00001CE4 6000                       		bra.s	loc_1B06
00001CE6                            ; ===========================================================================
00001CE6                            
00001CE6                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CE6 12DA                       		move.b	(a2)+,(a1)+
00001CE8 1011                       		move.b	(a1),d0
00001CEA 5200                       		addq.b	#1,d0
00001CEC B01A                       		cmp.b	(a2)+,d0
00001CEE 6500                       		bcs.s	loc_1AF6
00001CF0 7000                       		moveq	#0,d0
00001CF2                            
00001CF2                            loc_1AF6:
00001CF2 12C0                       		move.b	d0,(a1)+
00001CF4 0240 000F                  		andi.w	#$F,d0
00001CF8 D040                       		add.w	d0,d0
00001CFA 305A                       		movea.w	(a2)+,a0
00001CFC 365A                       		movea.w	(a2)+,a3
00001CFE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D02                            
00001D02                            loc_1B06:				; XREF: PalCycle_SBZ
00001D02 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0A 6A00                       		bpl.s	locret_1B64
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D12 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D18 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D1C 6700                       		beq.s	loc_1B2E
00001D1E 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D24 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2A                            
00001D2A                            loc_1B2E:
00001D2A 72FF                       		moveq	#-1,d1
00001D2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D30 6700                       		beq.s	loc_1B38
00001D32 4441                       		neg.w	d1
00001D34                            
00001D34                            loc_1B38:
00001D34 3038 F632                  		move.w	($FFFFF632).w,d0
00001D38 0240 0003                  		andi.w	#3,d0
00001D3C D041                       		add.w	d1,d0
00001D3E 0C40 0003                  		cmpi.w	#3,d0
00001D42 6500                       		bcs.s	loc_1B52
00001D44 3200                       		move.w	d0,d1
00001D46 7000                       		moveq	#0,d0
00001D48 4A41                       		tst.w	d1
00001D4A 6A00                       		bpl.s	loc_1B52
00001D4C 7002                       		moveq	#2,d0
00001D4E                            
00001D4E                            loc_1B52:
00001D4E 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D52 D040                       		add.w	d0,d0
00001D54 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D60                            
00001D60                            locret_1B64:
00001D60 4E75                       		rts	
00001D62                            ; End of function PalCycle_SBZ
00001D62                            
00001D62                            ; ===========================================================================
00001D62                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D82                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA2                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC2                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD4                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DE6                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E4E                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E72                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E92                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA2                            
00001EA2                            Pal_SBZCycList:
00001EA2                            	include "_inc\SBZ pallet script 1.asm"
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2                            ; Scrap Brain Zone 1 pallet cycling script
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2 0008                       	dc.w 8			; number of entries - 1
00001EA4 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EA6 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EA8 FB50                       	dc.w $FB50		; RAM address
00001EAA 0D08                       	dc.b $D, 8
00001EAC 0000                       	dc.w Pal_SBZCyc2
00001EAE FB52                       	dc.w $FB52
00001EB0 0E08                       	dc.b $E, 8
00001EB2 0000                       	dc.w Pal_SBZCyc3
00001EB4 FB6E                       	dc.w $FB6E
00001EB6 0B08                       	dc.b $B, 8
00001EB8 0000                       	dc.w Pal_SBZCyc5
00001EBA FB70                       	dc.w $FB70
00001EBC 0708                       	dc.b 7,	8
00001EBE 0000                       	dc.w Pal_SBZCyc6
00001EC0 FB72                       	dc.w $FB72
00001EC2 1C10                       	dc.b $1C, $10
00001EC4 0000                       	dc.w Pal_SBZCyc7
00001EC6 FB7E                       	dc.w $FB7E
00001EC8 0303                       	dc.b 3,	3
00001ECA 0000                       	dc.w Pal_SBZCyc8
00001ECC FB78                       	dc.w $FB78
00001ECE 0303                       	dc.b 3,	3
00001ED0 0000                       	dc.w Pal_SBZCyc8+2
00001ED2 FB7A                       	dc.w $FB7A
00001ED4 0303                       	dc.b 3,	3
00001ED6 0000                       	dc.w Pal_SBZCyc8+4
00001ED8 FB7C                       	dc.w $FB7C
00001EDA                            	even
00001EDA                            	even
00001EDA                            
00001EDA                            Pal_SBZCycList2:
00001EDA                            	include "_inc\SBZ pallet script 2.asm"
00001EDA                            ; ---------------------------------------------------------------------------
00001EDA                            ; Scrap Brain Zone 2 pallet cycling script
00001EDA                            ; ---------------------------------------------------------------------------
00001EDA 0006                       	dc.w 6
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc1
00001EE0 FB50                       	dc.w $FB50
00001EE2 0D08                       	dc.b $D, 8
00001EE4 0000                       	dc.w Pal_SBZCyc2
00001EE6 FB52                       	dc.w $FB52
00001EE8 0908                       	dc.b 9,	8
00001EEA 0000                       	dc.w Pal_SBZCyc9
00001EEC FB70                       	dc.w $FB70
00001EEE 0708                       	dc.b 7,	8
00001EF0 0000                       	dc.w Pal_SBZCyc6
00001EF2 FB72                       	dc.w $FB72
00001EF4 0303                       	dc.b 3,	3
00001EF6 0000                       	dc.w Pal_SBZCyc8
00001EF8 FB78                       	dc.w $FB78
00001EFA 0303                       	dc.b 3,	3
00001EFC 0000                       	dc.w Pal_SBZCyc8+2
00001EFE FB7A                       	dc.w $FB7A
00001F00 0303                       	dc.b 3,	3
00001F02 0000                       	dc.w Pal_SBZCyc8+4
00001F04 FB7C                       	dc.w $FB7C
00001F06                            	even
00001F06                            	even
00001F06                            
00001F06                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F16                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F26                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F36                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F42                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F52                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F62                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F82                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F8C                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F9C                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FA8                            ; ---------------------------------------------------------------------------
00001FA8                            ; Subroutine to	fade out and fade in
00001FA8                            ; ---------------------------------------------------------------------------
00001FA8                            
00001FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA8                            
00001FA8                            
00001FA8                            Pal_FadeTo:
00001FA8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FAE                            
00001FAE                            Pal_FadeTo2:
00001FAE 7000                       		moveq	#0,d0
00001FB0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FB8 D0C0                       		adda.w	d0,a0
00001FBA 7200                       		moveq	#0,d1
00001FBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC0                            
00001FC0                            Pal_ToBlack:
00001FC0 30C1                       		move.w	d1,(a0)+
00001FC2 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FC6                            
00001FC6 383C 0015                  		move.w	#$15,d4
00001FCA 1A3C 0009                  		move.b	#9,d5
00001FCE                            
00001FCE                            loc_1DCE:
00001FCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD4 6100 0000                  		bsr.w	DelayProgram
00001FD8 6100                       		bsr.s	Pal_FadeIn
00001FDA 6100 F846                  		bsr.w	RunPLC_RAM
00001FDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001FE2 4E75                       		rts	
00001FE4                            ; End of function Pal_FadeTo
00001FE4                            
00001FE4                            ; ---------------------------------------------------------------------------
00001FE4                            ; Pallet fade-in subroutine
00001FE4                            ; ---------------------------------------------------------------------------
00001FE4                            
00001FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE4                            
00001FE4                            
00001FE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FE4 7000                       		moveq	#0,d0
00001FE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001FF2 D0C0                       		adda.w	d0,a0
00001FF4 D2C0                       		adda.w	d0,a1
00001FF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001FFA                            
00001FFA                            loc_1DFA:
00001FFA 6100                       		bsr.s	Pal_AddColor
00001FFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00002000 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002006 6600                       		bne.s	locret_1E24
00002008 7000                       		moveq	#0,d0
0000200A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000200E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002012 1038 F626                  		move.b	($FFFFF626).w,d0
00002016 D0C0                       		adda.w	d0,a0
00002018 D2C0                       		adda.w	d0,a1
0000201A 1038 F627                  		move.b	($FFFFF627).w,d0
0000201E                            
0000201E                            loc_1E1E:
0000201E 6100                       		bsr.s	Pal_AddColor
00002020 51C8 FFFC                  		dbf	d0,loc_1E1E
00002024                            
00002024                            locret_1E24:
00002024 4E75                       		rts	
00002026                            ; End of function Pal_FadeIn
00002026                            
00002026                            
00002026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002026                            
00002026                            
00002026                            Pal_AddColor:				; XREF: Pal_FadeIn
00002026 3419                       		move.w	(a1)+,d2
00002028 3610                       		move.w	(a0),d3
0000202A B642                       		cmp.w	d2,d3
0000202C 6700                       		beq.s	loc_1E4E
0000202E 3203                       		move.w	d3,d1
00002030 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002034 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002036 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002038 30C1                       		move.w	d1,(a0)+	; update pallet
0000203A 4E75                       		rts	
0000203C                            ; ===========================================================================
0000203C                            
0000203C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000203C 3203                       		move.w	d3,d1
0000203E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002042 B242                       		cmp.w	d2,d1
00002044 6200                       		bhi.s	Pal_AddRed
00002046 30C1                       		move.w	d1,(a0)+	; update pallet
00002048 4E75                       		rts	
0000204A                            ; ===========================================================================
0000204A                            
0000204A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000204A 5458                       		addq.w	#2,(a0)+	; increase red value
0000204C 4E75                       		rts	
0000204E                            ; ===========================================================================
0000204E                            
0000204E                            loc_1E4E:				; XREF: Pal_AddColor
0000204E 5448                       		addq.w	#2,a0
00002050 4E75                       		rts	
00002052                            ; End of function Pal_AddColor
00002052                            
00002052                            
00002052                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002052                            
00002052                            
00002052                            Pal_FadeFrom:
00002052 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002058 383C 0015                  		move.w	#$15,d4
0000205C                            loc_1E5C:
0000205C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002062 6100 0000                  		bsr.w	DelayProgram
00002066 6100                       		bsr.s	Pal_FadeOut
00002068 6100 F7B8                  		bsr.w	RunPLC_RAM
0000206C 51CC FFEE                  		dbf	d4,loc_1E5C
00002070 4E75                       		rts	
00002072                            ; End of function Pal_FadeFrom
00002072                            
00002072                            ; ---------------------------------------------------------------------------
00002072                            ; Pallet fade-out subroutine
00002072                            ; ---------------------------------------------------------------------------
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002072 7000                       		moveq	#0,d0
00002074 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E82:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E82
00002088                            
00002088 7000                       		moveq	#0,d0
0000208A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000208E 1038 F626                  		move.b	($FFFFF626).w,d0
00002092 D0C0                       		adda.w	d0,a0
00002094 1038 F627                  		move.b	($FFFFF627).w,d0
00002098                            
00002098                            loc_1E98:
00002098 6100                       		bsr.s	Pal_DecColor
0000209A 51C8 FFFC                  		dbf	d0,loc_1E98
0000209E 4E75                       		rts	
000020A0                            ; End of function Pal_FadeOut
000020A0                            
000020A0                            
000020A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020A0                            
000020A0                            
000020A0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020A0 3410                       		move.w	(a0),d2
000020A2 6700                       		beq.s	loc_1ECC
000020A4 3202                       		move.w	d2,d1
000020A6 0241 000E                  		andi.w	#$E,d1
000020AA 6700                       		beq.s	Pal_DecGreen
000020AC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020AE 4E75                       		rts	
000020B0                            ; ===========================================================================
000020B0                            
000020B0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020B0 3202                       		move.w	d2,d1
000020B2 0241 00E0                  		andi.w	#$E0,d1
000020B6 6700                       		beq.s	Pal_DecBlue
000020B8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020BC 4E75                       		rts	
000020BE                            ; ===========================================================================
000020BE                            
000020BE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020BE 3202                       		move.w	d2,d1
000020C0 0241 0E00                  		andi.w	#$E00,d1
000020C4 6700                       		beq.s	loc_1ECC
000020C6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020CA 4E75                       		rts	
000020CC                            ; ===========================================================================
000020CC                            
000020CC                            loc_1ECC:				; XREF: Pal_DecColor
000020CC 5448                       		addq.w	#2,a0
000020CE 4E75                       		rts	
000020D0                            ; End of function Pal_DecColor
000020D0                            
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            ; Subroutine to	fill the pallet	with white (special stage)
000020D0                            ; ---------------------------------------------------------------------------
000020D0                            
000020D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D0                            
000020D0                            
000020D0                            Pal_MakeWhite:				; XREF: SpecialStage
000020D0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D6 7000                       		moveq	#0,d0
000020D8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DC 1038 F626                  		move.b	($FFFFF626).w,d0
000020E0 D0C0                       		adda.w	d0,a0
000020E2 323C 0EEE                  		move.w	#$EEE,d1
000020E6 1038 F627                  		move.b	($FFFFF627).w,d0
000020EA                            
000020EA                            PalWhite_Loop:
000020EA 30C1                       		move.w	d1,(a0)+
000020EC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020F0 383C 0015                  		move.w	#$15,d4
000020F4                            
000020F4                            loc_1EF4:
000020F4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020FA 6100 0000                  		bsr.w	DelayProgram
000020FE 6100                       		bsr.s	Pal_WhiteToBlack
00002100 6100 F720                  		bsr.w	RunPLC_RAM
00002104 51CC FFEE                  		dbf	d4,loc_1EF4
00002108 4E75                       		rts	
0000210A                            ; End of function Pal_MakeWhite
0000210A                            
0000210A                            
0000210A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000210A                            
0000210A                            
0000210A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000210A 7000                       		moveq	#0,d0
0000210C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002110 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002114 1038 F626                  		move.b	($FFFFF626).w,d0
00002118 D0C0                       		adda.w	d0,a0
0000211A D2C0                       		adda.w	d0,a1
0000211C 1038 F627                  		move.b	($FFFFF627).w,d0
00002120                            
00002120                            loc_1F20:
00002120 6100                       		bsr.s	Pal_DecColor2
00002122 51C8 FFFC                  		dbf	d0,loc_1F20
00002126                            
00002126 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000212C 6600                       		bne.s	locret_1F4A
0000212E 7000                       		moveq	#0,d0
00002130 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002134 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002138 1038 F626                  		move.b	($FFFFF626).w,d0
0000213C D0C0                       		adda.w	d0,a0
0000213E D2C0                       		adda.w	d0,a1
00002140 1038 F627                  		move.b	($FFFFF627).w,d0
00002144                            
00002144                            loc_1F44:
00002144 6100                       		bsr.s	Pal_DecColor2
00002146 51C8 FFFC                  		dbf	d0,loc_1F44
0000214A                            
0000214A                            locret_1F4A:
0000214A 4E75                       		rts	
0000214C                            ; End of function Pal_WhiteToBlack
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000214C 3419                       		move.w	(a1)+,d2
0000214E 3610                       		move.w	(a0),d3
00002150 B642                       		cmp.w	d2,d3
00002152 6700                       		beq.s	loc_1F78
00002154 3203                       		move.w	d3,d1
00002156 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000215A 6500                       		bcs.s	loc_1F64
0000215C B242                       		cmp.w	d2,d1
0000215E 6500                       		bcs.s	loc_1F64
00002160 30C1                       		move.w	d1,(a0)+
00002162 4E75                       		rts	
00002164                            ; ===========================================================================
00002164                            
00002164                            loc_1F64:				; XREF: Pal_DecColor2
00002164 3203                       		move.w	d3,d1
00002166 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000216A 6500                       		bcs.s	loc_1F74
0000216C B242                       		cmp.w	d2,d1
0000216E 6500                       		bcs.s	loc_1F74
00002170 30C1                       		move.w	d1,(a0)+
00002172 4E75                       		rts	
00002174                            ; ===========================================================================
00002174                            
00002174                            loc_1F74:				; XREF: loc_1F64
00002174 5558                       		subq.w	#2,(a0)+	; decrease red value
00002176 4E75                       		rts	
00002178                            ; ===========================================================================
00002178                            
00002178                            loc_1F78:				; XREF: Pal_DecColor2
00002178 5448                       		addq.w	#2,a0
0000217A 4E75                       		rts	
0000217C                            ; End of function Pal_DecColor2
0000217C                            
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            ; Subroutine to	make a white flash when	you enter a special stage
0000217C                            ; ---------------------------------------------------------------------------
0000217C                            
0000217C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000217C                            
0000217C                            
0000217C                            Pal_MakeFlash:				; XREF: SpecialStage
0000217C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002182 383C 0015                  		move.w	#$15,d4
00002186                            
00002186                            loc_1F86:
00002186 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000218C 6100 0000                  		bsr.w	DelayProgram
00002190 6100                       		bsr.s	Pal_ToWhite
00002192 6100 F68E                  		bsr.w	RunPLC_RAM
00002196 51CC FFEE                  		dbf	d4,loc_1F86
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_MakeFlash
0000219C                            
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FAC:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021B2 7000                       		moveq	#0,d0
000021B4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021B8 1038 F626                  		move.b	($FFFFF626).w,d0
000021BC D0C0                       		adda.w	d0,a0
000021BE 1038 F627                  		move.b	($FFFFF627).w,d0
000021C2                            
000021C2                            loc_1FC2:
000021C2 6100                       		bsr.s	Pal_AddColor2
000021C4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021C8 4E75                       		rts	
000021CA                            ; End of function Pal_ToWhite
000021CA                            
000021CA                            
000021CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021CA                            
000021CA                            
000021CA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021CA 3410                       		move.w	(a0),d2
000021CC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021D0 6700                       		beq.s	loc_2006
000021D2 3202                       		move.w	d2,d1
000021D4 0241 000E                  		andi.w	#$E,d1
000021D8 0C41 000E                  		cmpi.w	#$E,d1
000021DC 6700                       		beq.s	loc_1FE2
000021DE 5458                       		addq.w	#2,(a0)+	; increase red value
000021E0 4E75                       		rts	
000021E2                            ; ===========================================================================
000021E2                            
000021E2                            loc_1FE2:				; XREF: Pal_AddColor2
000021E2 3202                       		move.w	d2,d1
000021E4 0241 00E0                  		andi.w	#$E0,d1
000021E8 0C41 00E0                  		cmpi.w	#$E0,d1
000021EC 6700                       		beq.s	loc_1FF4
000021EE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021F2 4E75                       		rts	
000021F4                            ; ===========================================================================
000021F4                            
000021F4                            loc_1FF4:				; XREF: loc_1FE2
000021F4 3202                       		move.w	d2,d1
000021F6 0241 0E00                  		andi.w	#$E00,d1
000021FA 0C41 0E00                  		cmpi.w	#$E00,d1
000021FE 6700                       		beq.s	loc_2006
00002200 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002204 4E75                       		rts	
00002206                            ; ===========================================================================
00002206                            
00002206                            loc_2006:				; XREF: Pal_AddColor2
00002206 5448                       		addq.w	#2,a0
00002208 4E75                       		rts	
0000220A                            ; End of function Pal_AddColor2
0000220A                            
0000220A                            ; ---------------------------------------------------------------------------
0000220A                            ; Pallet cycling routine - Sega	logo
0000220A                            ; ---------------------------------------------------------------------------
0000220A                            
0000220A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000220A                            
0000220A                            
0000220A                            PalCycle_Sega:				; XREF: SegaScreen
0000220A 4A38 F635                  		tst.b	($FFFFF635).w
0000220E 6600                       		bne.s	loc_206A
00002210 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002214 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000221A 7205                       		moveq	#5,d1
0000221C 3038 F632                  		move.w	($FFFFF632).w,d0
00002220                            
00002220                            loc_2020:
00002220 6A00                       		bpl.s	loc_202A
00002222 5448                       		addq.w	#2,a0
00002224 5341                       		subq.w	#1,d1
00002226 5440                       		addq.w	#2,d0
00002228 60F6                       		bra.s	loc_2020
0000222A                            ; ===========================================================================
0000222A                            
0000222A                            loc_202A:				; XREF: PalCycle_Sega
0000222A 3400                       		move.w	d0,d2
0000222C 0242 001E                  		andi.w	#$1E,d2
00002230 6600                       		bne.s	loc_2034
00002232 5440                       		addq.w	#2,d0
00002234                            
00002234                            loc_2034:
00002234 0C40 0060                  		cmpi.w	#$60,d0
00002238 6400                       		bcc.s	loc_203E
0000223A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000223E                            
0000223E                            loc_203E:
0000223E 5440                       		addq.w	#2,d0
00002240 51C9 FFE8                  		dbf	d1,loc_202A
00002244 3038 F632                  		move.w	($FFFFF632).w,d0
00002248 5440                       		addq.w	#2,d0
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2054
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2054:
00002254 0C40 0064                  		cmpi.w	#$64,d0
00002258 6D00                       		blt.s	loc_2062
0000225A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002260 70F4                       		moveq	#-$C,d0
00002262                            
00002262                            loc_2062:
00002262 31C0 F632                  		move.w	d0,($FFFFF632).w
00002266 7001                       		moveq	#1,d0
00002268 4E75                       		rts	
0000226A                            ; ===========================================================================
0000226A                            
0000226A                            loc_206A:				; XREF: loc_202A
0000226A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000226E 6A00                       		bpl.s	loc_20BC
00002270 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002276 3038 F632                  		move.w	($FFFFF632).w,d0
0000227A 0640 000C                  		addi.w	#$C,d0
0000227E 0C40 0030                  		cmpi.w	#$30,d0
00002282 6500                       		bcs.s	loc_2088
00002284 7000                       		moveq	#0,d0
00002286 4E75                       		rts	
00002288                            ; ===========================================================================
00002288                            
00002288                            loc_2088:				; XREF: loc_206A
00002288 31C0 F632                  		move.w	d0,($FFFFF632).w
0000228C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002292 41F0 0000                  		lea	(a0,d0.w),a0
00002296 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000229A 22D8                       		move.l	(a0)+,(a1)+
0000229C 22D8                       		move.l	(a0)+,(a1)+
0000229E 3298                       		move.w	(a0)+,(a1)
000022A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022A4 7000                       		moveq	#0,d0
000022A6 722C                       		moveq	#$2C,d1
000022A8                            
000022A8                            loc_20A8:
000022A8 3400                       		move.w	d0,d2
000022AA 0242 001E                  		andi.w	#$1E,d2
000022AE 6600                       		bne.s	loc_20B2
000022B0 5440                       		addq.w	#2,d0
000022B2                            
000022B2                            loc_20B2:
000022B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022B6 5440                       		addq.w	#2,d0
000022B8 51C9 FFEE                  		dbf	d1,loc_20A8
000022BC                            
000022BC                            loc_20BC:
000022BC 7001                       		moveq	#1,d0
000022BE 4E75                       		rts	
000022C0                            ; End of function PalCycle_Sega
000022C0                            
000022C0                            ; ===========================================================================
000022C0                            
000022C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000022FC                            
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            ; Subroutines to load pallets
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            PalLoad1:
000022FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002302 E748                       		lsl.w	#3,d0
00002304 D2C0                       		adda.w	d0,a1
00002306 2459                       		movea.l	(a1)+,a2
00002308 3659                       		movea.w	(a1)+,a3
0000230A D6FC 0080                  		adda.w	#$80,a3
0000230E 3E19                       		move.w	(a1)+,d7
00002310                            
00002310                            loc_2110:
00002310 26DA                       		move.l	(a2)+,(a3)+
00002312 51CF FFFC                  		dbf	d7,loc_2110
00002316 4E75                       		rts	
00002318                            ; End of function PalLoad1
00002318                            
00002318                            
00002318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002318                            
00002318                            
00002318                            PalLoad2:
00002318 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231E E748                       		lsl.w	#3,d0
00002320 D2C0                       		adda.w	d0,a1
00002322 2459                       		movea.l	(a1)+,a2
00002324 3659                       		movea.w	(a1)+,a3
00002326 3E19                       		move.w	(a1)+,d7
00002328                            
00002328                            loc_2128:
00002328 26DA                       		move.l	(a2)+,(a3)+
0000232A 51CF FFFC                  		dbf	d7,loc_2128
0000232E 4E75                       		rts	
00002330                            ; End of function PalLoad2
00002330                            
00002330                            ; ---------------------------------------------------------------------------
00002330                            ; Underwater pallet loading subroutine
00002330                            ; ---------------------------------------------------------------------------
00002330                            
00002330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002330                            
00002330                            
00002330                            PalLoad3_Water:
00002330 43F9 0000 0000             		lea	(PalPointers).l,a1
00002336 E748                       		lsl.w	#3,d0
00002338 D2C0                       		adda.w	d0,a1
0000233A 2459                       		movea.l	(a1)+,a2
0000233C 3659                       		movea.w	(a1)+,a3
0000233E 96FC 0080                  		suba.w	#$80,a3
00002342 3E19                       		move.w	(a1)+,d7
00002344                            
00002344                            loc_2144:
00002344 26DA                       		move.l	(a2)+,(a3)+
00002346 51CF FFFC                  		dbf	d7,loc_2144
0000234A 4E75                       		rts	
0000234C                            ; End of function PalLoad3_Water
0000234C                            
0000234C                            
0000234C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234C                            
0000234C                            
0000234C                            PalLoad4_Water:
0000234C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002352 E748                       		lsl.w	#3,d0
00002354 D2C0                       		adda.w	d0,a1
00002356 2459                       		movea.l	(a1)+,a2
00002358 3659                       		movea.w	(a1)+,a3
0000235A 96FC 0100                  		suba.w	#$100,a3
0000235E 3E19                       		move.w	(a1)+,d7
00002360                            
00002360                            loc_2160:
00002360 26DA                       		move.l	(a2)+,(a3)+
00002362 51CF FFFC                  		dbf	d7,loc_2160
00002366 4E75                       		rts	
00002368                            ; End of function PalLoad4_Water
00002368                            
00002368                            ; ===========================================================================
00002368                            ; ---------------------------------------------------------------------------
00002368                            ; Pallet pointers
00002368                            ; ---------------------------------------------------------------------------
00002368                            PalPointers:
00002368                            	include "_inc\Pallet pointers.asm"
00002368                            ; ---------------------------------------------------------------------------
00002368                            ; Pallet pointers
00002368                            ; ---------------------------------------------------------------------------
00002368 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000236C FB00                       	dc.w $FB00		; RAM address
0000236E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002370 0000 0000                  	dc.l Pal_Title
00002374 FB00                       	dc.w $FB00
00002376 001F                       	dc.w $1F
00002378 0000 0000                  	dc.l Pal_LevelSel
0000237C FB00                       	dc.w $FB00
0000237E 001F                       	dc.w $1F
00002380 0000 0000                  	dc.l Pal_Sonic
00002384 FB00                       	dc.w $FB00
00002386 0007                       	dc.w 7
00002388 0000 0000                  	dc.l Pal_GHZ
0000238C FB20                       	dc.w $FB20
0000238E 0017                       	dc.w $17
00002390 0000 0000                  	dc.l Pal_LZ
00002394 FB20                       	dc.w $FB20
00002396 0017                       	dc.w $17
00002398 0000 0000                  	dc.l Pal_MZ
0000239C FB20                       	dc.w $FB20
0000239E 0017                       	dc.w $17
000023A0 0000 0000                  	dc.l Pal_SLZ
000023A4 FB20                       	dc.w $FB20
000023A6 0017                       	dc.w $17
000023A8 0000 0000                  	dc.l Pal_SYZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_SBZ1
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_Special
000023BC FB00                       	dc.w $FB00
000023BE 001F                       	dc.w $1F
000023C0 0000 0000                  	dc.l Pal_LZWater
000023C4 FB00                       	dc.w $FB00
000023C6 001F                       	dc.w $1F
000023C8 0000 0000                  	dc.l Pal_SBZ3
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ3Water
000023D4 FB00                       	dc.w $FB00
000023D6 001F                       	dc.w $1F
000023D8 0000 0000                  	dc.l Pal_SBZ2
000023DC FB20                       	dc.w $FB20
000023DE 0017                       	dc.w $17
000023E0 0000 0000                  	dc.l Pal_LZSonWater
000023E4 FB00                       	dc.w $FB00
000023E6 0007                       	dc.w 7
000023E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000023EC FB00                       	dc.w $FB00
000023EE 0007                       	dc.w 7
000023F0 0000 0000                  	dc.l Pal_SpeResult
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SpeContinue
000023FC FB00                       	dc.w $FB00
000023FE 000F                       	dc.w $F
00002400 0000 0000                  	dc.l Pal_Ending
00002404 FB00                       	dc.w $FB00
00002406 001F                       	dc.w $1F
00002408 0000 0000                  	dc.l Pal_Idiot
0000240C FB20                       	dc.w $FB20
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_Gronic
00002414 FB00                       	dc.w $FB00
00002416 0007                       	dc.w 7
00002418 0000 0000                  	dc.l Pal_LZGroWater
0000241C FB00                       	dc.w $FB00
0000241E 0007                       	dc.w 7
00002420 0000 0000                  	dc.l Pal_SBZ3GroWat
00002424 FB00                       	dc.w $FB00
00002426 0007                       	dc.w 7
00002428 0000 0000                  	dc.l Pal_Anakama
0000242C FB00                       	dc.w $FB00
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C10                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C30                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C50                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002CD0                            
00002CD0                            ; ---------------------------------------------------------------------------
00002CD0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002CD0                            ; ---------------------------------------------------------------------------
00002CD0                            
00002CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CD0                            
00002CD0                            
00002CD0                            DelayProgram:				; XREF: PauseGame
00002CD0 46FC 2300                  		move	#$2300,sr
00002CD4                            
00002CD4                            loc_29AC:
00002CD4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002CD8 66FA                       		bne.s	loc_29AC
00002CDA 4E75                       		rts	
00002CDC                            ; End of function DelayProgram
00002CDC                            
00002CDC                            ; ---------------------------------------------------------------------------
00002CDC                            ; Subroutine to	generate a pseudo-random number	in d0
00002CDC                            ; ---------------------------------------------------------------------------
00002CDC                            
00002CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CDC                            
00002CDC                            
00002CDC                            RandomNumber:
00002CDC 2238 F636                  		move.l	($FFFFF636).w,d1
00002CE0 6600                       		bne.s	loc_29C0
00002CE2 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CE8                            
00002CE8                            loc_29C0:
00002CE8 2001                       		move.l	d1,d0
00002CEA E581                       		asl.l	#2,d1
00002CEC D280                       		add.l	d0,d1
00002CEE E781                       		asl.l	#3,d1
00002CF0 D280                       		add.l	d0,d1
00002CF2 3001                       		move.w	d1,d0
00002CF4 4841                       		swap	d1
00002CF6 D041                       		add.w	d1,d0
00002CF8 3200                       		move.w	d0,d1
00002CFA 4841                       		swap	d1
00002CFC 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D00 4E75                       		rts	
00002D02                            ; End of function RandomNumber
00002D02                            
00002D02                            
00002D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D02                            
00002D02                            
00002D02                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D02 0240 00FF                  		andi.w	#$FF,d0
00002D06 D040                       		add.w	d0,d0
00002D08 0640 0080                  		addi.w	#$80,d0
00002D0C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D10 0440 0080                  		subi.w	#$80,d0
00002D14 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D18 4E75                       		rts	
00002D1A                            ; End of function CalcSine
00002D1A                            
00002D1A                            ; ===========================================================================
00002D1A                            
00002D1A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F9A                            
00002F9A                            ; ===========================================================================
00002F9A 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F9E 3200                       		move.w	d0,d1
00002FA0 4841                       		swap	d1
00002FA2 7000                       		moveq	#0,d0
00002FA4 3200                       		move.w	d0,d1
00002FA6 7407                       		moveq	#7,d2
00002FA8                            
00002FA8                            loc_2C80:
00002FA8 E599                       		rol.l	#2,d1
00002FAA D040                       		add.w	d0,d0
00002FAC 5240                       		addq.w	#1,d0
00002FAE 9240                       		sub.w	d0,d1
00002FB0 6400                       		bcc.s	loc_2C9A
00002FB2 D240                       		add.w	d0,d1
00002FB4 5340                       		subq.w	#1,d0
00002FB6 51CA FFF0                  		dbf	d2,loc_2C80
00002FBA E248                       		lsr.w	#1,d0
00002FBC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FC0 4E75                       		rts	
00002FC2                            ; ===========================================================================
00002FC2                            
00002FC2                            loc_2C9A:
00002FC2 5240                       		addq.w	#1,d0
00002FC4 51CA FFE2                  		dbf	d2,loc_2C80
00002FC8 E248                       		lsr.w	#1,d0
00002FCA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FCE 4E75                       		rts	
00002FD0                            
00002FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FD0                            
00002FD0                            
00002FD0                            CalcAngle:
00002FD0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002FD4 7600                       		moveq	#0,d3
00002FD6 7800                       		moveq	#0,d4
00002FD8 3601                       		move.w	d1,d3
00002FDA 3802                       		move.w	d2,d4
00002FDC 8843                       		or.w	d3,d4
00002FDE 6700                       		beq.s	loc_2D04
00002FE0 3802                       		move.w	d2,d4
00002FE2 4A43                       		tst.w	d3
00002FE4 6A00 0000                  		bpl.w	loc_2CC2
00002FE8 4443                       		neg.w	d3
00002FEA                            
00002FEA                            loc_2CC2:
00002FEA 4A44                       		tst.w	d4
00002FEC 6A00 0000                  		bpl.w	loc_2CCA
00002FF0 4444                       		neg.w	d4
00002FF2                            
00002FF2                            loc_2CCA:
00002FF2 B843                       		cmp.w	d3,d4
00002FF4 6400 0000                  		bcc.w	loc_2CDC
00002FF8 E18C                       		lsl.l	#8,d4
00002FFA 88C3                       		divu.w	d3,d4
00002FFC 7000                       		moveq	#0,d0
00002FFE 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003002 6000                       		bra.s	loc_2CE6
00003004                            ; ===========================================================================
00003004                            
00003004                            loc_2CDC:				; XREF: CalcAngle
00003004 E18B                       		lsl.l	#8,d3
00003006 86C4                       		divu.w	d4,d3
00003008 7040                       		moveq	#$40,d0
0000300A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
0000300E                            
0000300E                            loc_2CE6:
0000300E 4A41                       		tst.w	d1
00003010 6A00 0000                  		bpl.w	loc_2CF2
00003014 4440                       		neg.w	d0
00003016 0640 0080                  		addi.w	#$80,d0
0000301A                            
0000301A                            loc_2CF2:
0000301A 4A42                       		tst.w	d2
0000301C 6A00 0000                  		bpl.w	loc_2CFE
00003020 4440                       		neg.w	d0
00003022 0640 0100                  		addi.w	#$100,d0
00003026                            
00003026                            loc_2CFE:
00003026 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000302A 4E75                       		rts	
0000302C                            ; ===========================================================================
0000302C                            
0000302C                            loc_2D04:				; XREF: CalcAngle
0000302C 303C 0040                  		move.w	#$40,d0
00003030 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003034 4E75                       		rts	
00003036                            ; End of function CalcAngle
00003036                            
00003036                            ; ===========================================================================
00003036                            
00003036                            Angle_Data:	incbin	misc\angles.bin
00003138                            
00003138                            ; ===========================================================================
00003138                            
00003138                            ; ---------------------------------------------------------------------------
00003138                            ; Sega screen
00003138                            ; ---------------------------------------------------------------------------
00003138                            
00003138                            SegaScreen:				; XREF: GameModeArray
00003138 103C 00E4                  		move.b	#$E4,d0
0000313C 6100 E494                  		bsr.w	PlaySound_Special ; stop music
00003140 6100 E6D2                  		bsr.w	ClearPLC
00003144 6100 EF0C                  		bsr.w	Pal_FadeFrom
00003148 4DF9 00C0 0004             		lea	($C00004).l,a6
0000314E 3CBC 8004                  		move.w	#$8004,(a6)
00003152 3CBC 8230                  		move.w	#$8230,(a6)
00003156 3CBC 8407                  		move.w	#$8407,(a6)
0000315A 3CBC 8700                  		move.w	#$8700,(a6)
0000315E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003162 4238 F64E                  		clr.b	($FFFFF64E).w
00003166 46FC 2700                  		move	#$2700,sr
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0200 00BF                  		andi.b	#$BF,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 E380                  		bsr.w	ClearScreen
0000317C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003186 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000318C 6100 E4E8                  		bsr.w	NemDec
00003190 43F9 00FF 0000             		lea	($FF0000).l,a1
00003196 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000319C 303C 0000                  		move.w	#0,d0
000031A0 6100 E7B2                  		bsr.w	EniDec
000031A4 43F9 00FF 0000             		lea	($FF0000).l,a1
000031AA 203C 6510 0003             		move.l	#$65100003,d0
000031B0 7217                       		moveq	#$17,d1
000031B2 7407                       		moveq	#7,d2
000031B4 6100 E4A0                  		bsr.w	ShowVDPGraphics
000031B8 43F9 00FF 0180             		lea	($FF0180).l,a1
000031BE 203C 4000 0003             		move.l	#$40000003,d0
000031C4 7227                       		moveq	#$27,d1
000031C6 741B                       		moveq	#$1B,d2
000031C8 6100 E48C                  		bsr.w	ShowVDPGraphics
000031CC 7000                       		moveq	#0,d0
000031CE 6100 F148                  		bsr.w	PalLoad2	; load Sega logo pallet
000031D2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031D8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000031DE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000031E4 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000031EA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031EE 0000 0040                  		ori.b	#$40,d0
000031F2 33C0 00C0 0004             		move.w	d0,($C00004).l
000031F8                            
000031F8                            Sega_WaitPallet:
000031F8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031FE 6100 FAD0                  		bsr.w	DelayProgram
00003202 6100 F006                  		bsr.w	PalCycle_Sega
00003206 66F0                       		bne.s	Sega_WaitPallet
00003208                            
00003208 103C 00E1                  		move.b	#$E1,d0
0000320C 6100 E3C4                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003210 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003216 6100 FAB8                  		bsr.w	DelayProgram
0000321A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003220                            
00003220                            Sega_WaitEnd:
00003220 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003226 6100 FAA8                  		bsr.w	DelayProgram
0000322A 4A78 F614                  		tst.w	($FFFFF614).w
0000322E 6700                       		beq.s	Sega_GotoTitle
00003230 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003236 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003238                            
00003238                            Sega_GotoTitle:
00003238 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000323E 4E75                       		rts	
00003240                            ; ===========================================================================
00003240                            
00003240                            ; ---------------------------------------------------------------------------
00003240                            ; Title	screen
00003240                            ; ---------------------------------------------------------------------------
00003240                            
00003240                            TitleScreen:				; XREF: GameModeArray
00003240 103C 00E4                  		move.b	#$E4,d0
00003244 6100 E38C                  		bsr.w	PlaySound_Special ; stop music
00003248 6100 EE08                  		bsr.w	Pal_FadeFrom
0000324C 6100 E5C6                  		bsr.w	ClearPLC
00003250 46FC 2700                  		move	#$2700,sr
00003254 6100 E332                  		bsr.w	SoundDriverLoad
00003258 4DF9 00C0 0004             		lea	($C00004).l,a6
0000325E 3CBC 8004                  		move.w	#$8004,(a6)
00003262 3CBC 8230                  		move.w	#$8230,(a6)
00003266 3CBC 8407                  		move.w	#$8407,(a6)
0000326A 3CBC 9001                  		move.w	#$9001,(a6)
0000326E 3CBC 9200                  		move.w	#$9200,(a6)
00003272 3CBC 8B03                  		move.w	#$8B03,(a6)
00003276 3CBC 8720                  		move.w	#$8720,(a6)
0000327A 4238 F64E                  		clr.b	($FFFFF64E).w
0000327E 6100 E27A                  		bsr.w	ClearScreen
00003282 43F8 D000                  		lea	($FFFFD000).w,a1
00003286 7000                       		moveq	#0,d0
00003288 323C 07FF                  		move.w	#$7FF,d1
0000328C                            
0000328C                            Title_ClrObjRam:
0000328C 22C0                       		move.l	d0,(a1)+
0000328E 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003292                            
00003292                            ; gomer
00003292 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000329C 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032A2 6100 E3D2                  		bsr.w	NemDec
000032A6 7003                       		moveq	#3,d0		; load Sonic's pallet
000032A8 6100 F052                  		bsr.w	PalLoad1
000032AC                            
000032AC 43F9 00FF 0000             		lea	($FF0000).l,a1
000032B2 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032B8 303C 0000                  		move.w	#0,d0
000032BC 6100 E696                  		bsr.w	EniDec
000032C0                            ; help how the fuck can i do this IT SHOWS NOTHING
000032C0 6100 ECE6                  		bsr.w	Pal_FadeTo
000032C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000032CA 203C 4000 0003             		move.l	#$40000003,d0
000032D0 7227                       		moveq	#$27,d1
000032D2 741B                       		moveq	#$1B,d2
000032D4 6100 E380                  		bsr.w	ShowVDPGraphics
000032D8                            
000032D8                            
000032D8 43F9 00FF 0000             		lea	($FF0000).l,a1
000032DE 203C 6000 0003             		move.l	#$60000003,d0
000032E4 7227                       		moveq	#$27,d1
000032E6 741B                       		moveq	#$1B,d2
000032E8                            
000032E8 6100 ED68                  		bsr.w	Pal_FadeFrom
000032EC                            
000032EC                            
000032EC 6100 E20C                  		bsr.w	ClearScreen
000032F0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032FA 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003300 6100 E374                  		bsr.w	NemDec
00003304 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000330E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003314 6100 E360                  		bsr.w	NemDec
00003318 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331E 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003324 303C 0000                  		move.w	#0,d0
00003328 6100 E62A                  		bsr.w	EniDec
0000332C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003332 203C 4000 0003             		move.l	#$40000003,d0
00003338 7227                       		moveq	#$27,d1
0000333A 741B                       		moveq	#$1B,d2
0000333C 6100 E318                  		bsr.w	ShowVDPGraphics
00003340 6100 ED10                  		bsr.w	Pal_FadeFrom
00003344 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003348 7000                       		moveq	#0,d0
0000334A 323C 001F                  		move.w	#$1F,d1
0000334E                            
0000334E                            
0000334E                            Title_ClrPallet:
0000334E 22C0                       		move.l	d0,(a1)+
00003350 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003354                            
00003354 7003                       		moveq	#3,d0		; load Sonic's pallet
00003356 6100 EFA4                  		bsr.w	PalLoad1
0000335A 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003360 4EB9 0000 0000             		jsr	ObjectsLoad
00003366 4EB9 0000 0000             		jsr	BuildSprites
0000336C 6100 EC3A                  		bsr.w	Pal_FadeTo
00003370 46FC 2700                  		move	#$2700,sr
00003374 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000337E 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003384 6100 E2F0                  		bsr.w	NemDec
00003388 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003392 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003398 6100 E2DC                  		bsr.w	NemDec
0000339C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033A6 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033AC 6100 E2C8                  		bsr.w	NemDec
000033B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000033B6 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033BE 4BF9 0000 0606             		lea	(Art_Text).l,a5
000033C4 323C 0BC4                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033C8                            
000033C8                            Title_LoadText:
000033C8 2C9D                       		move.l	(a5)+,(a6)
000033CA 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000033CE                            
000033CE 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000033D4 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000033DA 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000033E0 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000033E6 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000033EC 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000033F2 6100 0000                  		bsr.w	LevelSizeLoad
000033F6 6100 0000                  		bsr.w	DeformBgLayer
000033FA                            
000033FA 43F8 B000                  		lea	($FFFFB000).w,a1
000033FE 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003404 303C 0000                  		move.w	#0,d0
00003408 6100 E54A                  		bsr.w	EniDec
0000340C 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003412 43F9 00FF 0000             		lea	($FF0000).l,a1
00003418 6100 E6B8                  		bsr.w	KosDec
0000341C 6100 0000                  		bsr.w	LevelLayoutLoad
00003420                            
00003420 46FC 2700                  		move	#$2700,sr
00003424 6100 E0D4                  		bsr.w	ClearScreen
00003428 4BF9 00C0 0004             		lea	($C00004).l,a5
0000342E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003434 47F8 F708                  		lea	($FFFFF708).w,a3
00003438 49F8 A440                  		lea	($FFFFA440).w,a4
0000343C 343C 6000                  		move.w	#$6000,d2
00003440 6100 0000                  		bsr.w	LoadTilesFromStart2
00003444 43F9 00FF 0000             		lea	($FF0000).l,a1
0000344A 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003450 303C 0000                  		move.w	#0,d0
00003454 6100 E4FE                  		bsr.w	EniDec
00003458 43F9 00FF 0000             		lea	($FF0000).l,a1
0000345E 203C 4206 0003             		move.l	#$42060003,d0
00003464 7221                       		moveq	#$21,d1
00003466 7415                       		moveq	#$15,d2
00003468 6100 E1EC                  		bsr.w	ShowVDPGraphics
0000346C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003476 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000347C 6100 E1F8                  		bsr.w	NemDec
00003480 7001                       		moveq	#1,d0		; load title screen pallet
00003482 6100 EE78                  		bsr.w	PalLoad1
00003486 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000348A 6100 E146                  		bsr.w	PlaySound_Special
0000348E 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003494 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000349A 43F8 D080                  		lea	($FFFFD080).w,a1
0000349E 7000                       		moveq	#0,d0
000034A0 323C 000F                  		move.w	#$F,d1
000034A4                            
000034A4                            Title_ClrObjRam2:
000034A4 22C0                       		move.l	d0,(a1)+
000034A6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034AA                            
000034AA 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034B0 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034B6 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034BC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034C2 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034C8 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000034CE 4EB9 0000 0000             		jsr	ObjectsLoad
000034D4 6100 0000                  		bsr.w	DeformBgLayer
000034D8 4EB9 0000 0000             		jsr	BuildSprites
000034DE 7000                       		moveq	#0,d0
000034E0 6100 E306                  		bsr.w	LoadPLC2
000034E4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034EA 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000034F0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000034F4 0000 0040                  		ori.b	#$40,d0
000034F8 33C0 00C0 0004             		move.w	d0,($C00004).l
000034FE 6100 EAA8                  		bsr.w	Pal_FadeTo
00003502                            
00003502                            loc_317C:
00003502 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003508 6100 F7C6                  		bsr.w	DelayProgram
0000350C 4EB9 0000 0000             		jsr	ObjectsLoad
00003512 6100 0000                  		bsr.w	DeformBgLayer
00003516 4EB9 0000 0000             		jsr	BuildSprites
0000351C 6100 E674                  		bsr.w	PalCycle_Title
00003520 6100 E300                  		bsr.w	RunPLC_RAM
00003524 3038 D008                  		move.w	($FFFFD008).w,d0
00003528 5440                       		addq.w	#2,d0
0000352A 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000352E 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003532 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003534 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000353A 4E75                       		rts	
0000353C                            ; ===========================================================================
0000353C                            
0000353C                            Title_ChkRegion:
0000353C 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003540 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003542 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003548 6000                       		bra.s	Title_EnterCheat
0000354A                            ; ===========================================================================
0000354A                            
0000354A                            Title_RegionJ:				; XREF: Title_ChkRegion
0000354A 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003550                            
00003550                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003550 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003554 D0C0                       		adda.w	d0,a0
00003556 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000355A 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000355E B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003560 6600                       		bne.s	loc_3210	; if not, branch
00003562 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003566 4A00                       		tst.b	d0
00003568 6600                       		bne.s	Title_CountC
0000356A 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
0000356E 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003572 E249                       		lsr.w	#1,d1
00003574 0241 0003                  		andi.w	#3,d1
00003578 6700                       		beq.s	Title_PlayRing
0000357A 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000357E 6A00                       		bpl.s	Title_PlayRing
00003580 7201                       		moveq	#1,d1
00003582 1181 1001                  		move.b	d1,1(a0,d1.w)
00003586                            
00003586                            Title_PlayRing:
00003586 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000358C 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003590 6100 E040                  		bsr.w	PlaySound_Special
00003594 6000                       		bra.s	Title_CountC
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3210:				; XREF: Title_EnterCheat
00003596 4A00                       		tst.b	d0
00003598 6700                       		beq.s	Title_CountC
0000359A 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035A0 6700                       		beq.s	Title_CountC
000035A2 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035A8                            
000035A8                            Title_CountC:
000035A8 1038 F605                  		move.b	($FFFFF605).w,d0
000035AC 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035B0 6700                       		beq.s	loc_3230	; if not, branch
000035B2 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035B6                            
000035B6                            loc_3230:
000035B6 4A78 F614                  		tst.w	($FFFFF614).w
000035BA 6700 0000                  		beq.w	Demo
000035BE                            		; (temporary until we have an actual options screen)
000035BE 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035C4 6700                       		beq.s	@notc
000035C6                            
000035C6 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035CA 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
000035D0 6D00                       		blt.s	@notoverflow
000035D2 11FC 0000 FFE8             		move.b	#0,(v_character).w
000035D8                            	@notoverflow:
000035D8 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035DC 6100 DFF4                  		bsr.w	PlaySound_Special
000035E0                            	@notc:
000035E0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000035E6 6700 FF1A                  		beq.w	loc_317C	; if not, branch
000035EA                            
000035EA                            Title_ChkLevSel:
000035EA 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000035EE 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035F2 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035F8 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035FC                            		
000035FC                            		
000035FC 7002                       		moveq	#2,d0
000035FE 6100 ED18                  		bsr.w	PalLoad2	; load level select pallet
00003602 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003606 7000                       		moveq	#0,d0
00003608 323C 00DF                  		move.w	#$DF,d1
0000360C                            
0000360C                            Title_ClrScroll:
0000360C 22C0                       		move.l	d0,(a1)+
0000360E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003612                            
00003612 21C0 F616                  		move.l	d0,($FFFFF616).w
00003616 46FC 2700                  		move	#$2700,sr
0000361A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003620 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000362A 323C 03FF                  		move.w	#$3FF,d1
0000362E                            
0000362E                            Title_ClrVram:
0000362E 2C80                       		move.l	d0,(a6)
00003630 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003634                            
00003634 6100 0000                  		bsr.w	LevSelTextLoad
00003638                            		
00003638                            		; sound test fix
00003638 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000363C 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003642                            		
00003642 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003646 0C46 0014                  		cmpi.w	#$14,d6
0000364A 6700                       		beq.s	@issndtst
0000364C 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003650                            	@issndtst:
00003650 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003654 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003658                            		
00003658 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000365C 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003664                            		
00003664 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000366A 6700                       		beq.s	@issndtst2
0000366C                            		
0000366C 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003672 6100 0000                  		bsr.w	CStringSlop
00003676 6000                       		bra.s	LevelSelect
00003678                            	@issndtst2:
00003678 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000367E 6100 0000                  		bsr.w	CStringSlop
00003682                            ; ---------------------------------------------------------------------------
00003682                            ; Level	Select
00003682                            ; ---------------------------------------------------------------------------
00003682                            LevelSelect:
00003682 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003688 6100 F646                  		bsr.w	DelayProgram
0000368C 6100 0000                  		bsr.w	LevSelControls
00003690 6100 E190                  		bsr.w	RunPLC_RAM
00003694 4AB8 F680                  		tst.l	($FFFFF680).w
00003698 66E8                       		bne.s	LevelSelect
0000369A 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036A0 67E0                       		beq.s	LevelSelect	; if not, branch
000036A2 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036A6 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036AA 6600                       		bne.s	@dont	; if not, dont blow this place up
000036AC                            			
000036AC 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036B2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036B8 6100 F616                  		bsr.w	DelayProgram
000036BC                            	@dont:
000036BC 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036C0 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036C2                            		
000036C2 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036C8 67B8                       		beq.s	LevelSelect	; if not, branch
000036CA                            		
000036CA 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000036D0 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000036D2                            		
000036D2 1038 FF84                  		move.b	($FFFFFF84).w,d0
000036D6 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000036DA                            		
000036DA 4EB9 0000 0000             		jsr		ShowNow_Playing
000036E0 60A0                       		bra.s	LevelSelect
000036E2                            ; ===========================================================================
000036E2                            
000036E2                            LevSel_SEGA:				; XREF: LevelSelect
000036E2 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
000036E8 4E75                       		rts	
000036EA                            ; ===========================================================================
000036EA                            
000036EA                            LevSel_Ending:				; XREF: LevelSelect
000036EA 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000036F0 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036F6 4E75                       		rts	
000036F8                            ; ===========================================================================
000036F8                            
000036F8                            LevSel_Credits:				; XREF: LevelSelect
000036F8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036FE 103C 0091                  		move.b	#$91,d0
00003702 6100 DECE                  		bsr.w	PlaySound_Special ; play credits music
00003706 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            
0000370E                            LevSel_Level_SS:			; XREF: LevelSelect
0000370E D040                       		add.w	d0,d0
00003710 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003714 6B00 FF6C                  		bmi.w	LevelSelect
00003718 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000371C 6600                       		bne.s	LevSel_Level	; if not, branch
0000371E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003724 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003728 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000372E 7000                       		moveq	#0,d0
00003730 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003734 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003738 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000373C 4E75                       		rts	
0000373E                            ; ===========================================================================
0000373E                            
0000373E                            LevSel_Level:				; XREF: LevSel_Level_SS
0000373E 0240 3FFF                  		andi.w	#$3FFF,d0
00003742 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003746                            
00003746                            PlayLevel:				; XREF: ROM:00003246j ...
00003746 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000374C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003752 7000                       		moveq	#0,d0
00003754 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003758 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000375C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003760 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003764 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003768 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000376C 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003770 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003774 103C 00E0                  		move.b	#$E0,d0
00003778 6100 DE58                  		bsr.w	PlaySound_Special ; fade out music
0000377C 4E75                       		rts	
0000377E                            ; ===========================================================================
0000377E                            ; ---------------------------------------------------------------------------
0000377E                            ; Level	select - level pointers
0000377E                            ; ---------------------------------------------------------------------------
0000377E                            LSelectPointers:
0000377E                            		incbin	misc\ls_point.bin
000037A8                            		even
000037A8                            ; ---------------------------------------------------------------------------
000037A8                            ; Level	select codes
000037A8                            ; ---------------------------------------------------------------------------
000037A8                            LevelSelectCode_J:
000037A8                            		incbin	misc\ls_jcode.bin
000037AE                            		even
000037AE                            
000037AE                            LevelSelectCode_US:
000037AE                            		incbin	misc\ls_ucode.bin
000037B4                            		even
000037B4                            ; ===========================================================================
000037B4                            
000037B4                            ; ---------------------------------------------------------------------------
000037B4                            ; Demo mode
000037B4                            ; ---------------------------------------------------------------------------
000037B4                            
000037B4                            Demo:					; XREF: TitleScreen
000037B4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037BA                            
000037BA                            loc_33B6:				; XREF: loc_33E4
000037BA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037C0 6100 F50E                  		bsr.w	DelayProgram
000037C4 6100 0000                  		bsr.w	DeformBgLayer
000037C8 6100 E3A8                  		bsr.w	PalCycle_Load
000037CC 6100 E054                  		bsr.w	RunPLC_RAM
000037D0 3038 D008                  		move.w	($FFFFD008).w,d0
000037D4 5440                       		addq.w	#2,d0
000037D6 31C0 D008                  		move.w	d0,($FFFFD008).w
000037DA 0C40 1C00                  		cmpi.w	#$1C00,d0
000037DE 6500                       		bcs.s	loc_33E4
000037E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000037E6 4E75                       		rts	
000037E8                            ; ===========================================================================
000037E8                            
000037E8                            loc_33E4:				; XREF: Demo
000037E8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000037EE 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000037F2 4A78 F614                  		tst.w	($FFFFF614).w
000037F6 6600 FFC2                  		bne.w	loc_33B6
000037FA 103C 00E0                  		move.b	#$E0,d0
000037FE 6100 DDD2                  		bsr.w	PlaySound_Special ; fade out music
00003802 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003806 0240 0007                  		andi.w	#7,d0
0000380A D040                       		add.w	d0,d0
0000380C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003810 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003814 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003818 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000381E 6500                       		bcs.s	loc_3422	; if yes, branch
00003820 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003826                            
00003826                            loc_3422:
00003826 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000382C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003832 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003836 6600                       		bne.s	Demo_Level	; if not, branch
00003838 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000383E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003842 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003846                            
00003846                            Demo_Level:
00003846 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000384C 7000                       		moveq	#0,d0
0000384E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003852 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003856 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000385A 4E75                       		rts	
0000385C                            ; ===========================================================================
0000385C                            ; ---------------------------------------------------------------------------
0000385C                            ; Levels used in demos
0000385C                            ; ---------------------------------------------------------------------------
0000385C                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003864                            		even
00003864                            
00003864                            ; ---------------------------------------------------------------------------
00003864                            ; Subroutine to	change what you're selecting in the level select
00003864                            ; ---------------------------------------------------------------------------
00003864                            
00003864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003864                            
00003864                            
00003864                            LevSelControls:				; XREF: LevelSelect
00003864 1238 F605                  		move.b	($FFFFF605).w,d1
00003868 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000386C 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000386E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003872 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003876                            
00003876                            LevSel_UpDown:
00003876 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000387C 1238 F604                  		move.b	($FFFFF604).w,d1
00003880 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003884 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003888 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000388C 0801 0000                  		btst	#0,d1		; is up	pressed?
00003890 6700                       		beq.s	LevSel_Down	; if not, branch
00003892 5346                       		subq.w	#1,d6		; move up 1 selection
00003894 6400                       		bcc.s	LevSel_Down
00003896 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003898                            
00003898                            LevSel_Down:
00003898 0801 0001                  		btst	#1,d1		; is down pressed?
0000389C 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000389E 5246                       		addq.w	#1,d6		; move down 1 selection
000038A0 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038A4 6500                       		bcs.s	LevSel_Refresh
000038A6 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038A8 6000                       		bra.s	LevSel_Refresh
000038AA                            		
000038AA                            LevSel_LR:
000038AA 0801 0002                  		btst	#2,d1		; is left pressed?
000038AE 6700                       		beq.s	LevSel_Right	; if not, branch
000038B0 0446 0000                  		sub.w	#lsrow2size,d6
000038B4 64E2                       		bcc.s	LevSel_Down
000038B6 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038BA                            LevSel_Right:
000038BA 0801 0003                  		btst	#3,d1		; is right pressed?
000038BE 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038C0 0646 0000                  		add.w	#lsrow1size,d6
000038C4 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038C8 6500                       		bcs.s	LevSel_Refresh
000038CA 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000038CE                            ; ===========================================================================
000038CE                            LevSel_Refresh:
000038CE                            		
000038CE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038D2 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038D6                            		
000038D6 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038DC 6600                       		bne.s	@exitsndtest
000038DE                            		
000038DE 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000038E2 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000038E8 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038F0 6100 0000                  		bsr.w	CStringSlop
000038F4                            	@exitsndtest:
000038F4                            	
000038F4 363C C65F                  		move.w	#$C680-$21,d3
000038F8 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038FC 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003900                            		
00003900 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003906 6600                       		bne.s	@entersndtest
00003908                            		
00003908 363C C65F                  		move.w	#$C680-$21,d3
0000390C 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003912 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000391A 6100 0000                  		bsr.w	CStringSlop
0000391E                            	@entersndtest:
0000391E 4E75                       		rts	
00003920                            		
00003920                            LevSel_SndTest:				; XREF: LevSelControls
00003920 1238 F605                  		move.b	($FFFFF605).w,d1
00003924 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003928 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000392A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003930 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003934                            		
00003934 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003938 0801 0002                  		btst	#2,d1		; is left pressed?
0000393C 6700                       		beq.s	SndTest_Right	; if not, branch
0000393E 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003940                            		; no need the fact it's a byte does the trick
00003940                            
00003940                            SndTest_Right:
00003940 0801 0003                  		btst	#3,d1		; is right pressed?
00003944 6700                       		beq.s	SndTest_A	; if not, branch
00003946 5200                       		addq.b	#1,d0		; add 1	to sound test
00003948                            		; same here
00003948                            		
00003948                            SndTest_A:
00003948 0801 0006                  		btst	#6,d1		; is A pressed?
0000394C 6700                       		beq.s	SndTest_B	; if not, branch
0000394E 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003950 5100                       		subq.b	#8,d0
00003952                            		
00003952                            SndTest_B:
00003952 0801 0004                  		btst	#4,d1		; is B pressed?
00003956 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003958 5000                       		addq.b	#8,d0		; add $10 to sound test
0000395A 5000                       		addq.b	#8,d0
0000395C                            
0000395C                            SndTest_Refresh:
0000395C 363C C65F                  		move.w	#$C680-$21,d3
00003960 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00003964 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003968                            
00003968                            LevSel_NoMove:
00003968 4E75                       		rts	
0000396A                            ; End of function LevSelControls
0000396A                            
0000396A                            ; ---------------------------------------------------------------------------
0000396A                            ; Subroutine to load level select text
0000396A                            ; ---------------------------------------------------------------------------
0000396A                            
0000396A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000396A                            
0000396A                            LevSelTextLoad_loop:
0000396A 2D44 0004                  		move.l	d4,4(a6)
0000396E 6100 0000                  		bsr.w	LevSel_ChgLine
00003972 0684 0080 0000             		addi.l	#$800000,d4
00003978 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
0000397C 4E75                       		rts
0000397E                            LevSelTextLoad:				; XREF: TitleScreen
0000397E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003984 4DF9 00C0 0000             		lea	($C00000).l,a6
0000398A 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000398E 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003994                            		
00003994 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003998 61D0                       		bsr.s	LevSelTextLoad_loop
0000399A                            		
0000399A                            		
0000399A 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039A0 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039A4 61C4                       		bsr.s	LevSelTextLoad_loop
000039A6 363C C65F                  		move.w	#$C680-$21,d3
000039AA                            		
000039AA                            LevSelHighlightCode:
000039AA 4DF9 00C0 0000             		lea	($C00000).l,a6
000039B0 7000                       		moveq	#0,d0
000039B2 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039B6 3200                       		move.w	d0,d1
000039B8 283C 6086 0003             		move.l	#lsscrpos,d4
000039BE                            		
000039BE 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039C2 6D00                       		blt.s	@notsecond
000039C4                            		
000039C4 0440 0000                  		sub.w	#lsrow1size,d0
000039C8 0684 0024 0000             		addi.l	#lsoff,d4
000039CE                            	@notsecond:
000039CE EF48                       		lsl.w	#7,d0
000039D0 4840                       		swap	d0
000039D2 D880                       		add.l	d0,d4
000039D4 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039DA E749                       		lsl.w	#3,d1
000039DC D241                       		add.w	d1,d1
000039DE D2C1                       		adda.w	d1,a1
000039E0 2D44 0004                  		move.l	d4,4(a6)
000039E4 6100 0000                  		bsr.w	LevSel_ChgLine
000039E8 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000039EE 6700                       		beq.s	LevSelSndTest
000039F0 4E75                       		rts
000039F2                            
000039F2                            LevSelSndTest:
000039F2 0643 0030                  		add.w	#$30,d3
000039F6 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A00 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A04 1400                       		move.b	d0,d2
00003A06 E808                       		lsr.b	#4,d0
00003A08 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A0C 1002                       		move.b	d2,d0
00003A0E 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A12 4E75                       		rts	
00003A14                            ; End of function LevSelTextLoad
00003A14                            
00003A14                            
00003A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A14                            
00003A14                            
00003A14                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A14 0240 000F                  		andi.w	#$F,d0
00003A18 0C00 000A                  		cmpi.b	#$A,d0
00003A1C 6500                       		bcs.s	loc_3580
00003A1E 5E00                       		addi.b	#7,d0
00003A20                            
00003A20                            loc_3580:
00003A20 D043                       		add.w	d3,d0
00003A22 3C80                       		move.w	d0,(a6)
00003A24 4E75                       		rts	
00003A26                            ; End of function LevSel_ChgSnd
00003A26                            
00003A26                            
00003A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A26                            
00003A26                            
00003A26                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A26 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A28                            
00003A28                            @loop:
00003A28 7000                       		moveq	#0,d0
00003A2A 1019                       		move.b	(a1)+,d0
00003A2C 0C00 0020                  		cmpi.b	#$20,d0
00003A30 6E00                       		bgt.s	@draw
00003A32 3CBC 0000                  		move.w	#0,(a6)
00003A36 51CA FFF0                  		dbf	d2,@loop
00003A3A 4E75                       		rts	
00003A3C                            ; ===========================================================================
00003A3C                            
00003A3C                            @draw:				; XREF: LevSel_ChgLine
00003A3C D043                       		add.w	d3,d0
00003A3E 3C80                       		move.w	d0,(a6)
00003A40 51CA FFE6                  		dbf	d2,@loop
00003A44 4E75                       		rts	
00003A46                            ; End of function LevSel_ChgLine
00003A46                            		
00003A46                            CStringSlop_draw:
00003A46 D043                       		add.w	d3,d0
00003A48 3C80                       		move.w	d0,(a6)
00003A4A                            CStringSlop:				; XREF: LevSelTextLoad
00003A4A 7000                       		moveq	#0,d0
00003A4C 1019                       		move.b	(a1)+,d0
00003A4E 0C00 0020                  		cmpi.b	#$20,d0
00003A52 6EF2                       		bgt.s	CStringSlop_draw
00003A54                            		
00003A54 0C00 0001                  		cmpi.b	#1,d0
00003A58 6700                       		beq.s	@InsertSpaces
00003A5A 6500                       		blo.s	@end
00003A5C                            		
00003A5C 3CBC 0000                  		move.w	#0,(a6)
00003A60 60E8                       		bra.s	CStringSlop
00003A62                            	@end:
00003A62 4E75                       		rts
00003A64                            	@InsertSpaces:
00003A64 7000                       		moveq	#0,d0
00003A66 1019                       		move.b	(a1)+,d0
00003A68                            		
00003A68                            	@insert:
00003A68 3CBC 0000                  		move.w	#0,(a6)
00003A6C 51C8 FFFA                  		dbf.w	d0,@insert
00003A70 60D8                       		bra.s	CStringSlop
00003A72                            ; End of function LevSel_ChgLine
00003A72                            
00003A72                            ; ===========================================================================
00003A72                            ; ---------------------------------------------------------------------------
00003A72                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A72                            ; ---------------------------------------------------------------------------
00003A72                            LevelMenuText:	
00003A72 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A82 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A92 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AA2 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AB2 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AC2 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AD2 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003AE2 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AF2 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B02 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B12 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B22 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B32                            LMTSecondRow:
00003B32 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B42 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B52 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B62 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B72 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B82 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B92 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003BA2 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003BB2 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003BC2 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003BD2 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003BE2                            LMTSelectableEnd:
00003BE2 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003BF2                            LMTEnd:
00003BF2                            
00003BF2                            Now_Playing:
00003BF2 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C02                            		even
00003C02                            NP_Track:
00003C02 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C0A                            		even
00003C0A                            NP_SFX:
00003C0A 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C12                            		even
00003C12                            
00003C12                            ShowNow_Playing:
00003C12 1C00                       		move.b	d0,d6
00003C14 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C18 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C1C 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C22 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C2A 6100 FE1E                  		bsr.w	CStringSlop
00003C2E                            		
00003C2E 43FA FFD2                  		lea	NP_Track(pc),a1
00003C32 0C06 00A0                  		cmpi.b	#$A0,d6
00003C36 6D00                       		blt.s	@track
00003C38                            		
00003C38 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C3C                            	@track:
00003C3C 6100 FE0C                  		bsr.w	CStringSlop
00003C40                            		
00003C40 0643 0030                  		add.w	#$30,d3
00003C44 1006                       		move.b	d6,d0
00003C46 1400                       		move.b	d0,d2
00003C48 E808                       		lsr.b	#4,d0
00003C4A 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C4E 1002                       		move.b	d2,d0
00003C50 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C54 4E75                       		rts	
00003C56                            
00003C56                            ; 1 is insert spaces btw
00003C56                            Controls_Normal:
00003C56 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C62                            		even		
00003C62                            Controls_SND:
00003C62 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C88 00                         		even
00003C88                            ; ---------------------------------------------------------------------------
00003C88                            ; Music	playlist
00003C88                            ; ---------------------------------------------------------------------------
00003C88                            MusicList1:	incbin	misc\muslist1.bin
00003C90                            		even
00003C90                            MusicList2:	incbin	misc\muslist2.bin
00003C96                            		even
00003C96                            MusicList3:	incbin	misc\muslist3.bin
00003C9C                            		even
00003C9C                            MusicList4:	incbin	misc\muslist4.bin
00003CA2                            		even
00003CA2                            ; ===========================================================================
00003CA2                            
00003CA2                            ; ---------------------------------------------------------------------------
00003CA2                            ; Level
00003CA2                            ; ---------------------------------------------------------------------------
00003CA2                            
00003CA2                            Level:					; XREF: GameModeArray
00003CA2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003CA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CAC 6B00                       		bmi.s	loc_37B6
00003CAE 103C 00E0                  		move.b	#$E0,d0
00003CB2 6100 D91E                  		bsr.w	PlaySound_Special ; fade out music
00003CB6                            
00003CB6                            loc_37B6:
00003CB6 6100 DB5C                  		bsr.w	ClearPLC
00003CBA 6100 E396                  		bsr.w	Pal_FadeFrom
00003CBE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC2 6B00                       		bmi.s	Level_ClrRam
00003CC4 46FC 2700                  		move	#$2700,sr
00003CC8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003CD2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003CD8 6100 D99C                  		bsr.w	NemDec
00003CDC 46FC 2300                  		move	#$2300,sr
00003CE0 7000                       		moveq	#0,d0
00003CE2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CE6 E948                       		lsl.w	#4,d0
00003CE8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CEE 45F2 0000                  		lea	(a2,d0.w),a2
00003CF2 7000                       		moveq	#0,d0
00003CF4 1012                       		move.b	(a2),d0
00003CF6 6700                       		beq.s	loc_37FC
00003CF8 6100 DABC                  		bsr.w	LoadPLC		; load level patterns
00003CFC                            
00003CFC                            loc_37FC:
00003CFC 7001                       		moveq	#1,d0
00003CFE 6100 DAB6                  		bsr.w	LoadPLC		; load standard	patterns
00003D02                            
00003D02                            Level_ClrRam:
00003D02 43F8 D000                  		lea	($FFFFD000).w,a1
00003D06 7000                       		moveq	#0,d0
00003D08 323C 07FF                  		move.w	#$7FF,d1
00003D0C                            
00003D0C                            Level_ClrObjRam:
00003D0C 22C0                       		move.l	d0,(a1)+
00003D0E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003D12                            
00003D12 43F8 F628                  		lea	($FFFFF628).w,a1
00003D16 7000                       		moveq	#0,d0
00003D18 323C 0015                  		move.w	#$15,d1
00003D1C                            
00003D1C                            Level_ClrVars:
00003D1C 22C0                       		move.l	d0,(a1)+
00003D1E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003D22                            
00003D22 43F8 F700                  		lea	($FFFFF700).w,a1
00003D26 7000                       		moveq	#0,d0
00003D28 323C 003F                  		move.w	#$3F,d1
00003D2C                            
00003D2C                            Level_ClrVars2:
00003D2C 22C0                       		move.l	d0,(a1)+
00003D2E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D32                            
00003D32 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D36 7000                       		moveq	#0,d0
00003D38 323C 0047                  		move.w	#$47,d1
00003D3C                            
00003D3C                            Level_ClrVars3:
00003D3C 22C0                       		move.l	d0,(a1)+
00003D3E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D42                            
00003D42 46FC 2700                  		move	#$2700,sr
00003D46 6100 D7B2                  		bsr.w	ClearScreen
00003D4A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D50 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D54 3CBC 8230                  		move.w	#$8230,(a6)
00003D58 3CBC 8407                  		move.w	#$8407,(a6)
00003D5C 3CBC 857C                  		move.w	#$857C,(a6)
00003D60 3CBC 9001                  		move.w	#$9001,(a6)
00003D64 3CBC 8004                  		move.w	#$8004,(a6)
00003D68 3CBC 8720                  		move.w	#$8720,(a6)
00003D6C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D72 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D76 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D7C 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D7E 3CBC 8014                  		move.w	#$8014,(a6)
00003D82 7000                       		moveq	#0,d0
00003D84 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D88 D040                       		add.w	d0,d0
00003D8A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D90 3031 0000                  		move.w	(a1,d0.w),d0
00003D94 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D98 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D9C 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003DA0 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003DA4 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003DA8 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003DAE 6000 0000                  		bra.w	Level_LoadPal
00003DB2                            Player_Palette:
00003DB2                            		; normal, lz, sbz, blank
00003DB2 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003DBA                            		
00003DBA 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003DC2 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003DCA 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003DD2                            
00003DD2                            		; add more player palettes
00003DD2                            Level_LoadPal:
00003DD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003DD8 46FC 2300                  		move	#$2300,sr
00003DDC                            
00003DDC 7200                       		moveq	#0,d1
00003DDE 1238 FFE8                  		move.b	(v_character),d1
00003DE2 D241                       		add.w	d1,d1
00003DE4 D241                       		add.w	d1,d1
00003DE6 D241                       		add.w	d1,d1
00003DE8 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003DEC                            		
00003DEC 6100 E52A                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003DF0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DF6 6600                       		bne.s	Level_GetBgm	; if not, branch
00003DF8 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003DFC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003E02 6600                       		bne.s	Level_WaterPal	; if not, branch
00003E04 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003E08                            
00003E08                            Level_WaterPal:
00003E08 6100 E526                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003E0C 4A38 FE30                  		tst.b	($FFFFFE30).w
00003E10 6700                       		beq.s	Level_GetBgm
00003E12 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003E18                            
00003E18                            ; NineKode begins here - How to play different songs on different acts
00003E18                             
00003E18                            Level_GetBgm:
00003E18 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E1C 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003E20 7000                       		moveq	#0,d0
00003E22 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E26                             
00003E26 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003E2C 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003E2E 43F9 0000 3C88             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003E34 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E36                             
00003E36                            Level_GetBgm2:
00003E36 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003E3C 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003E3E 43F9 0000 3C90             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003E44 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E46                             
00003E46                            Level_GetBgm3:
00003E46 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003E4C 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003E4E 43F9 0000 3C96             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003E54 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E56                             
00003E56                            Level_GetBgm4:
00003E56 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E5C 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E5E 43F9 0000 3C9C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E64                             
00003E64                            Level_PlayBgm:
00003E64 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E68 6100 D762                  		bsr.w	PlaySound	; play music
00003E6C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E72                             
00003E72                            ; NineKode ends here
00003E72                            
00003E72                            Level_TtlCard:
00003E72 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E78 6100 EE56                  		bsr.w	DelayProgram
00003E7C 4EB9 0000 0000             		jsr	ObjectsLoad
00003E82 4EB9 0000 0000             		jsr	BuildSprites
00003E88 6100 D998                  		bsr.w	RunPLC_RAM
00003E8C 3038 D108                  		move.w	($FFFFD108).w,d0
00003E90 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E94 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E96 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E9A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E9C 4EB9 0000 0000             		jsr	Hud_Base
00003EA2                            
00003EA2                            loc_3946:
00003EA2 7003                       		moveq	#3,d0
00003EA4 6100 E456                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003EA8 6100 0000                  		bsr.w	LevelSizeLoad
00003EAC 6100 0000                  		bsr.w	DeformBgLayer
00003EB0 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003EB6 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003EBA 6100 0000                  		bsr.w	LoadTilesFromStart
00003EBE 4EB9 0000 0000             		jsr	FloorLog_Unk
00003EC4 6100 0000                  		bsr.w	ColIndexLoad
00003EC8 6100 0000                  		bsr.w	LZWaterEffects
00003ECC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003ED2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003ED6 6B00                       		bmi.s	Level_ChkDebug
00003ED8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003EDE                            
00003EDE                            Level_ChkDebug:
00003EDE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003EE2 6700                       		beq.s	Level_ChkWater	; if not, branch
00003EE4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003EEA 6700                       		beq.s	Level_ChkWater	; if not, branch
00003EEC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003EF2                            
00003EF2                            Level_ChkWater:
00003EF2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003EF8 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EFE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F04 6600                       		bne.s	Level_LoadObj	; if not, branch
00003F06 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003F0C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003F12 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003F18 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003F1E                            
00003F1E                            Level_LoadObj:
00003F1E 4EB9 0000 0000             		jsr	ObjPosLoad
00003F24 4EB9 0000 0000             		jsr	ObjectsLoad
00003F2A 4EB9 0000 0000             		jsr	BuildSprites
00003F30 7000                       		moveq	#0,d0
00003F32 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003F36 6600                       		bne.s	loc_39E8	; if yes, branch
00003F38 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F3C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F40 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003F44                            
00003F44                            loc_39E8:
00003F44 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003F48 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003F4C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003F50 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003F54                            		; move.b	d0,($FFFFFE2F).w
00003F54 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F5A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F5E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F62 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F66 6100 0000                  		bsr.w	OscillateNumInit
00003F6A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F70 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F76 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F7C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F82 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F88 7000                       		moveq	#0,d0
00003F8A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F8E E548                       		lsl.w	#2,d0
00003F90 2271 0000                  		movea.l	(a1,d0.w),a1
00003F94 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F98 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F9A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003FA0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003FA4 5340                       		subq.w	#1,d0
00003FA6 E548                       		lsl.w	#2,d0
00003FA8 2271 0000                  		movea.l	(a1,d0.w),a1
00003FAC                            
00003FAC                            Level_Demo:
00003FAC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003FB2 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003FB6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003FBC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FC0 6A00                       		bpl.s	Level_ChkWaterPal
00003FC2 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003FC8 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003FCE 6600                       		bne.s	Level_ChkWaterPal
00003FD0 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003FD6                            
00003FD6                            Level_ChkWaterPal:
00003FD6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003FDC 6600                       		bne.s	Level_Delay	; if not, branch
00003FDE 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003FE0 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003FE6 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003FE8 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003FEA                            
00003FEA                            Level_WaterPal2:
00003FEA 6100 E360                  		bsr.w	PalLoad4_Water
00003FEE                            
00003FEE                            Level_Delay:
00003FEE 323C 0003                  		move.w	#3,d1
00003FF2                            
00003FF2                            Level_DelayLoop:
00003FF2 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FF8 6100 ECD6                  		bsr.w	DelayProgram
00003FFC 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004000                            
00004000 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004006 6100 DFA6                  		bsr.w	Pal_FadeTo2
0000400A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000400E 6B00                       		bmi.s	Level_ClrCardArt
00004010 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004014 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004018 5838 D124                  		addq.b	#4,($FFFFD124).w
0000401C 5838 D164                  		addq.b	#4,($FFFFD164).w
00004020 6000                       		bra.s	Level_StartGame
00004022                            ; ===========================================================================
00004022                            
00004022                            Level_ClrCardArt:
00004022 7002                       		moveq	#2,d0
00004024 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000402A 7000                       		moveq	#0,d0
0000402C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004030 0640 0015                  		addi.w	#$15,d0
00004034 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000403A                            
0000403A                            Level_StartGame:
0000403A 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004040                            
00004040                            ; ---------------------------------------------------------------------------
00004040                            ; Main level loop (when	all title card and loading sequences are finished)
00004040                            ; ---------------------------------------------------------------------------
00004040                            
00004040                            Level_MainLoop:
00004040 6100 D59C                  		bsr.w	PauseGame
00004044 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000404A 6100 EC84                  		bsr.w	DelayProgram
0000404E 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004052 6100 0000                  		bsr.w	MoveSonicInDemo
00004056 6100 0000                  		bsr.w	LZWaterEffects
0000405A 4EB9 0000 0000             		jsr	ObjectsLoad
00004060 4A78 FE08                  		tst.w	($FFFFFE08).w
00004064 6600                       		bne.s	loc_3B10
00004066 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000406C 6400                       		bcc.s	loc_3B14
0000406E                            
0000406E                            loc_3B10:
0000406E 6100 0000                  		bsr.w	DeformBgLayer
00004072                            
00004072                            loc_3B14:
00004072 4EB9 0000 0000             		jsr	BuildSprites
00004078 4EB9 0000 0000             		jsr	ObjPosLoad
0000407E 6100 DAF2                  		bsr.w	PalCycle_Load
00004082 6100 D79E                  		bsr.w	RunPLC_RAM
00004086 6100 0000                  		bsr.w	OscillateNumDo
0000408A 6100 0000                  		bsr.w	ChangeRingFrame
0000408E 6100 0000                  		bsr.w	SignpostArtLoad
00004092 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004098 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000409A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
0000409E 6600 FC02                  		bne.w	Level		; if yes, branch
000040A2 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000040A8 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000040AC 4E75                       		rts	
000040AE                            ; ===========================================================================
000040AE                            
000040AE                            Level_ChkDemo:				; XREF: Level_MainLoop
000040AE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000040B2 6600                       		bne.s	Level_EndDemo	; if yes, branch
000040B4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000040B8 6700                       		beq.s	Level_EndDemo	; if not, branch
000040BA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040C0 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000040C4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040CA 4E75                       		rts	
000040CC                            ; ===========================================================================
000040CC                            
000040CC                            Level_EndDemo:				; XREF: Level_ChkDemo
000040CC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000040D2 6600                       		bne.s	loc_3B88	; if not, branch
000040D4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040DE 6A00                       		bpl.s	loc_3B88	; if yes, branch
000040E0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000040E6                            
000040E6                            loc_3B88:
000040E6 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000040EC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000040F2 4278 F794                  		clr.w	($FFFFF794).w
000040F6                            
000040F6                            loc_3B98:
000040F6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040FC 6100 EBD2                  		bsr.w	DelayProgram
00004100 6100 0000                  		bsr.w	MoveSonicInDemo
00004104 4EB9 0000 0000             		jsr	ObjectsLoad
0000410A 4EB9 0000 0000             		jsr	BuildSprites
00004110 4EB9 0000 0000             		jsr	ObjPosLoad
00004116 5378 F794                  		subq.w	#1,($FFFFF794).w
0000411A 6A00                       		bpl.s	loc_3BC8
0000411C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004122 6100 DF4E                  		bsr.w	Pal_FadeOut
00004126                            
00004126                            loc_3BC8:
00004126 4A78 F614                  		tst.w	($FFFFF614).w
0000412A 66CA                       		bne.s	loc_3B98
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E                            ; ---------------------------------------------------------------------------
0000412E                            ; Subroutine to	do special water effects in Labyrinth Zone
0000412E                            ; ---------------------------------------------------------------------------
0000412E                            
0000412E                            LZWaterEffects:				; XREF: Level
0000412E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004134 6600                       		bne.s	locret_3C28	; if not, branch
00004136 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000413C 6400                       		bcc.s	LZMoveWater
0000413E 6100 0000                  		bsr.w	LZWindTunnels
00004142 6100 0000                  		bsr.w	LZWaterSlides
00004146 6100 0000                  		bsr.w	LZDynamicWater
0000414A                            
0000414A                            LZMoveWater:
0000414A 4238 F64E                  		clr.b	($FFFFF64E).w
0000414E 7000                       		moveq	#0,d0
00004150 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004154 E248                       		lsr.w	#1,d0
00004156 D078 F648                  		add.w	($FFFFF648).w,d0
0000415A 31C0 F646                  		move.w	d0,($FFFFF646).w
0000415E 3038 F646                  		move.w	($FFFFF646).w,d0
00004162 9078 F704                  		sub.w	($FFFFF704).w,d0
00004166 6400                       		bcc.s	loc_3C1A
00004168 4A40                       		tst.w	d0
0000416A 6A00                       		bpl.s	loc_3C1A
0000416C 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004172 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004178                            
00004178                            loc_3C1A:
00004178 0C40 00DF                  		cmpi.w	#$DF,d0
0000417C 6500                       		bcs.s	loc_3C24
0000417E 303C 00DF                  		move.w	#$DF,d0
00004182                            
00004182                            loc_3C24:
00004182 11C0 F625                  		move.b	d0,($FFFFF625).w
00004186                            
00004186                            locret_3C28:
00004186 4E75                       		rts	
00004188                            ; ===========================================================================
00004188                            ; ---------------------------------------------------------------------------
00004188                            ; Labyrinth default water heights
00004188                            ; ---------------------------------------------------------------------------
00004188                            WaterHeight:	incbin	misc\lz_heigh.bin
00004190                            		even
00004190                            ; ===========================================================================
00004190                            
00004190                            ; ---------------------------------------------------------------------------
00004190                            ; Labyrinth dynamic water routines
00004190                            ; ---------------------------------------------------------------------------
00004190                            
00004190                            LZDynamicWater:				; XREF: LZWaterEffects
00004190 7000                       		moveq	#0,d0
00004192 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004196 D040                       		add.w	d0,d0
00004198 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000419C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000041A0 7200                       		moveq	#0,d1
000041A2 1238 F64C                  		move.b	($FFFFF64C).w,d1
000041A6 3038 F64A                  		move.w	($FFFFF64A).w,d0
000041AA 9078 F648                  		sub.w	($FFFFF648).w,d0
000041AE 6700                       		beq.s	locret_3C5A
000041B0 6400                       		bcc.s	loc_3C56
000041B2 4441                       		neg.w	d1
000041B4                            
000041B4                            loc_3C56:
000041B4 D378 F648                  		add.w	d1,($FFFFF648).w
000041B8                            
000041B8                            locret_3C5A:
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000041BC 0000                       		dc.w DynWater_LZ2-DynWater_Index
000041BE 0000                       		dc.w DynWater_LZ3-DynWater_Index
000041C0 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000041C2                            ; ===========================================================================
000041C2                            
000041C2                            DynWater_LZ1:				; XREF: DynWater_Index
000041C2 3038 F700                  		move.w	($FFFFF700).w,d0
000041C6 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041CA 6600                       		bne.s	loc_3CD0
000041CC 323C 00B8                  		move.w	#$B8,d1
000041D0 0C40 0600                  		cmpi.w	#$600,d0
000041D4 6500                       		bcs.s	loc_3CB4
000041D6 323C 0108                  		move.w	#$108,d1
000041DA 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000041E0 6500                       		bcs.s	loc_3CBA
000041E2 0C40 0C00                  		cmpi.w	#$C00,d0
000041E6 6500                       		bcs.s	loc_3CB4
000041E8 323C 0318                  		move.w	#$318,d1
000041EC 0C40 1080                  		cmpi.w	#$1080,d0
000041F0 6500                       		bcs.s	loc_3CB4
000041F2 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000041F8 323C 05C8                  		move.w	#$5C8,d1
000041FC 0C40 1380                  		cmpi.w	#$1380,d0
00004200 6500                       		bcs.s	loc_3CB4
00004202 323C 03A8                  		move.w	#$3A8,d1
00004206 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000420A 6600                       		bne.s	loc_3CB4
0000420C 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004212                            
00004212                            loc_3CB4:
00004212 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004216 4E75                       		rts	
00004218                            ; ===========================================================================
00004218                            
00004218                            loc_3CBA:				; XREF: DynWater_LZ1
00004218 0C40 0C80                  		cmpi.w	#$C80,d0
0000421C 65F4                       		bcs.s	loc_3CB4
0000421E 323C 00E8                  		move.w	#$E8,d1
00004222 0C40 1500                  		cmpi.w	#$1500,d0
00004226 65EA                       		bcs.s	loc_3CB4
00004228 323C 0108                  		move.w	#$108,d1
0000422C 60E4                       		bra.s	loc_3CB4
0000422E                            ; ===========================================================================
0000422E                            
0000422E                            loc_3CD0:				; XREF: DynWater_LZ1
0000422E 5302                       		subq.b	#1,d2
00004230 6600                       		bne.s	locret_3CF4
00004232 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004238 6400                       		bcc.s	locret_3CF4
0000423A 323C 03A8                  		move.w	#$3A8,d1
0000423E 0C40 1300                  		cmpi.w	#$1300,d0
00004242 6500                       		bcs.s	loc_3CF0
00004244 323C 0108                  		move.w	#$108,d1
00004248 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000424E                            
0000424E                            loc_3CF0:
0000424E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004252                            
00004252                            locret_3CF4:
00004252 4E75                       		rts	
00004254                            ; ===========================================================================
00004254                            
00004254                            DynWater_LZ2:				; XREF: DynWater_Index
00004254 3038 F700                  		move.w	($FFFFF700).w,d0
00004258 323C 0328                  		move.w	#$328,d1
0000425C 0C40 0500                  		cmpi.w	#$500,d0
00004260 6500                       		bcs.s	loc_3D12
00004262 323C 03C8                  		move.w	#$3C8,d1
00004266 0C40 0B00                  		cmpi.w	#$B00,d0
0000426A 6500                       		bcs.s	loc_3D12
0000426C 323C 0428                  		move.w	#$428,d1
00004270                            
00004270                            loc_3D12:
00004270 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004274 4E75                       		rts	
00004276                            ; ===========================================================================
00004276                            
00004276                            DynWater_LZ3:				; XREF: DynWater_Index
00004276 3038 F700                  		move.w	($FFFFF700).w,d0
0000427A 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000427E 6600                       		bne.s	loc_3D5E
00004280 323C 0500                  		move.w	#$500,d1
00004284 0C40 0600                  		cmpi.w	#$600,d0
00004288 6500                       		bcs.s	loc_3D54
0000428A 0C40 1B00                  		cmpi.w	#$1B00,d0
0000428E 6500                       		bcs.s	loc_3D54
00004290 323C 0850                  		move.w	#$850,d1
00004294                            
00004294                            loc_3D54:
00004294 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004298 31C1 F648                  		move.w	d1,($FFFFF648).w
0000429C 4E75                       		rts	
0000429E                            ; ===========================================================================
0000429E                            
0000429E                            loc_3D5E:				; XREF: DynWater_LZ3
0000429E 5302                       		subq.b	#1,d2
000042A0 6600                       		bne.s	loc_3DA8
000042A2 323C 04C8                  		move.w	#$4C8,d1
000042A6 0C40 0770                  		cmpi.w	#$770,d0
000042AA 6500                       		bcs.s	loc_3DA2
000042AC 323C 0308                  		move.w	#$308,d1
000042B0 0C40 1400                  		cmpi.w	#$1400,d0
000042B4 6500                       		bcs.s	loc_3DA2
000042B6 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000042BC 6700                       		beq.s	loc_3D8E
000042BE 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000042C4 6400                       		bcc.s	loc_3D8E
000042C6 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000042CC 6400                       		bcc.s	loc_3DA2
000042CE                            
000042CE                            loc_3D8E:
000042CE 323C 0508                  		move.w	#$508,d1
000042D2 31C1 F648                  		move.w	d1,($FFFFF648).w
000042D6 0C40 1770                  		cmpi.w	#$1770,d0
000042DA 6500                       		bcs.s	loc_3DA2
000042DC 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000042E2                            
000042E2                            loc_3DA2:
000042E2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042E6 4E75                       		rts	
000042E8                            ; ===========================================================================
000042E8                            
000042E8                            loc_3DA8:
000042E8 5302                       		subq.b	#1,d2
000042EA 6600                       		bne.s	loc_3DD2
000042EC 323C 0508                  		move.w	#$508,d1
000042F0 0C40 1860                  		cmpi.w	#$1860,d0
000042F4 6500                       		bcs.s	loc_3DCC
000042F6 323C 0188                  		move.w	#$188,d1
000042FA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042FE 6400                       		bcc.s	loc_3DC6
00004300 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004304 6600                       		bne.s	loc_3DCC
00004306                            
00004306                            loc_3DC6:
00004306 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000430C                            
0000430C                            loc_3DCC:
0000430C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004310 4E75                       		rts	
00004312                            ; ===========================================================================
00004312                            
00004312                            loc_3DD2:
00004312 5302                       		subq.b	#1,d2
00004314 6600                       		bne.s	loc_3E0E
00004316 323C 0188                  		move.w	#$188,d1
0000431A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000431E 6500                       		bcs.s	loc_3E04
00004320 323C 0900                  		move.w	#$900,d1
00004324 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004328 6500                       		bcs.s	loc_3E04
0000432A 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004330 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004336 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000433C 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004342 4E75                       		rts	
00004344                            ; ===========================================================================
00004344                            
00004344                            loc_3E04:
00004344 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004348 31C1 F648                  		move.w	d1,($FFFFF648).w
0000434C 4E75                       		rts	
0000434E                            ; ===========================================================================
0000434E                            
0000434E                            loc_3E0E:
0000434E 0C40 1E00                  		cmpi.w	#$1E00,d0
00004352 6500                       		bcs.s	locret_3E1A
00004354 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000435A                            
0000435A                            locret_3E1A:
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            DynWater_SBZ3:				; XREF: DynWater_Index
0000435C 323C 0228                  		move.w	#$228,d1
00004360 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004366 6500                       		bcs.s	loc_3E2C
00004368 323C 04C8                  		move.w	#$4C8,d1
0000436C                            
0000436C                            loc_3E2C:
0000436C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004370 4E75                       		rts
00004372                            
00004372                            ; ---------------------------------------------------------------------------
00004372                            ; Labyrinth Zone "wind tunnels"	subroutine
00004372                            ; ---------------------------------------------------------------------------
00004372                            
00004372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004372                            
00004372                            
00004372                            LZWindTunnels:				; XREF: LZWaterEffects
00004372 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004376 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000437A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004380 7000                       		moveq	#0,d0
00004382 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004386 E748                       		lsl.w	#3,d0
00004388 D4C0                       		adda.w	d0,a2
0000438A 7200                       		moveq	#0,d1
0000438C 4A38 FE11                  		tst.b	($FFFFFE11).w
00004390 6600                       		bne.s	loc_3E56
00004392 7201                       		moveq	#1,d1
00004394 514A                       		subq.w	#8,a2
00004396                            
00004396                            loc_3E56:
00004396 43F8 D000                  		lea	($FFFFD000).w,a1
0000439A                            
0000439A                            LZWind_Loop:
0000439A 3029 0008                  		move.w	8(a1),d0
0000439E B052                       		cmp.w	(a2),d0
000043A0 6500 0000                  		bcs.w	loc_3EF4
000043A4 B06A 0004                  		cmp.w	4(a2),d0
000043A8 6400 0000                  		bcc.w	loc_3EF4
000043AC 3429 000C                  		move.w	$C(a1),d2
000043B0 B46A 0002                  		cmp.w	2(a2),d2
000043B4 6500                       		bcs.s	loc_3EF4
000043B6 B46A 0006                  		cmp.w	6(a2),d2
000043BA 6400                       		bcc.s	loc_3EF4
000043BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043C0 0200 003F                  		andi.b	#$3F,d0
000043C4 6600                       		bne.s	loc_3E90
000043C6 303C 00D0                  		move.w	#$D0,d0
000043CA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rushing water sound
000043D0                            
000043D0                            loc_3E90:
000043D0 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000043D4 6600 0000                  		bne.w	locret_3F0A
000043D8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000043DE 6400                       		bcc.s	loc_3F06
000043E0 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000043E6 0440 0080                  		subi.w	#$80,d0
000043EA B052                       		cmp.w	(a2),d0
000043EC 6400                       		bcc.s	LZWind_Move
000043EE 7002                       		moveq	#2,d0
000043F0 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000043F6 6600                       		bne.s	loc_3EBA
000043F8 4440                       		neg.w	d0
000043FA                            
000043FA                            loc_3EBA:
000043FA D169 000C                  		add.w	d0,$C(a1)
000043FE                            
000043FE                            LZWind_Move:
000043FE 5869 0008                  		addq.w	#4,8(a1)
00004402 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004408 337C 0000 0012             		move.w	#0,$12(a1)
0000440E 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004414 08E9 0001 0022             		bset	#1,$22(a1)
0000441A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004420 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004422 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004426                            
00004426                            LZWind_MoveDown:
00004426 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000442C 6700                       		beq.s	locret_3EF2	; if not, branch
0000442E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004432                            
00004432                            locret_3EF2:
00004432 4E75                       		rts	
00004434                            ; ===========================================================================
00004434                            
00004434                            loc_3EF4:				; XREF: LZWindTunnels
00004434 504A                       		addq.w	#8,a2
00004436 51C9 FF62                  		dbf	d1,LZWind_Loop
0000443A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000443E 6700                       		beq.s	locret_3F0A
00004440 137C 0000 001C             		move.b	#0,$1C(a1)
00004446                            
00004446                            loc_3F06:
00004446 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000444A                            
0000444A                            locret_3F0A:
0000444A 4E75                       		rts	
0000444C                            ; End of function LZWindTunnels
0000444C                            
0000444C                            ; ===========================================================================
0000444C 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004454 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004466 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004474                            					; XREF: LZWindTunnels
00004474                            		even
00004474                            
00004474                            ; ---------------------------------------------------------------------------
00004474                            ; Labyrinth Zone water slide subroutine
00004474                            ; ---------------------------------------------------------------------------
00004474                            
00004474                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004474                            
00004474                            
00004474                            LZWaterSlides:				; XREF: LZWaterEffects
00004474 43F8 D000                  		lea	($FFFFD000).w,a1
00004478 0829 0001 0022             		btst	#1,$22(a1)
0000447E 6600                       		bne.s	loc_3F6A
00004480 3029 000C                  		move.w	$C(a1),d0
00004484 E248                       		lsr.w	#1,d0
00004486 0240 0380                  		andi.w	#$380,d0
0000448A 1229 0008                  		move.b	8(a1),d1
0000448E 0241 007F                  		andi.w	#$7F,d1
00004492 D041                       		add.w	d1,d0
00004494 45F8 A400                  		lea	($FFFFA400).w,a2
00004498 1032 0000                  		move.b	(a2,d0.w),d0
0000449C 45FA 0000                  		lea	byte_3FCF(pc),a2
000044A0 7206                       		moveq	#6,d1
000044A2                            
000044A2                            loc_3F62:
000044A2 B022                       		cmp.b	-(a2),d0
000044A4 57C9 FFFC                  		dbeq	d1,loc_3F62
000044A8 6700                       		beq.s	LZSlide_Move
000044AA                            
000044AA                            loc_3F6A:
000044AA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000044AE 6700                       		beq.s	locret_3F7A
000044B0 337C 0005 003E             		move.w	#5,$3E(a1)
000044B6 4238 F7CA                  		clr.b	($FFFFF7CA).w
000044BA                            
000044BA                            locret_3F7A:
000044BA 4E75                       		rts	
000044BC                            ; ===========================================================================
000044BC                            
000044BC                            LZSlide_Move:				; XREF: LZWaterSlides
000044BC 0C41 0003                  		cmpi.w	#3,d1
000044C0 6400                       		bcc.s	loc_3F84
000044C2 4E71                       		nop	
000044C4                            
000044C4                            loc_3F84:
000044C4 08A9 0000 0022             		bclr	#0,$22(a1)
000044CA 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000044CE 1340 0014                  		move.b	d0,$14(a1)
000044D2 6A00                       		bpl.s	loc_3F9A
000044D4 08E9 0000 0022             		bset	#0,$22(a1)
000044DA                            
000044DA                            loc_3F9A:
000044DA 4229 0015                  		clr.b	$15(a1)
000044DE 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000044E4 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000044EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044EE 0200 001F                  		andi.b	#$1F,d0
000044F2 6600                       		bne.s	locret_3FBE
000044F4 303C 00D0                  		move.w	#$D0,d0
000044F8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play water sound
000044FE                            
000044FE                            locret_3FBE:
000044FE 4E75                       		rts	
00004500                            ; End of function LZWaterSlides
00004500                            
00004500                            ; ===========================================================================
00004500 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000450F 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004510                            		even
00004510                            
00004510                            ; ---------------------------------------------------------------------------
00004510                            ; Subroutine to	move Sonic in demo mode
00004510                            ; ---------------------------------------------------------------------------
00004510                            
00004510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004510                            
00004510                            
00004510                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004510 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004514 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004516 4E75                       		rts	
00004518                            ; ===========================================================================
00004518                            
00004518                            ; This is an unused subroutine for recording a demo
00004518                            
00004518                            MoveDemo_Record:
00004518 43F9 0008 0000             		lea	($80000).l,a1
0000451E 3038 F790                  		move.w	($FFFFF790).w,d0
00004522 D2C0                       		adda.w	d0,a1
00004524 1038 F604                  		move.b	($FFFFF604).w,d0
00004528 B011                       		cmp.b	(a1),d0
0000452A 6600                       		bne.s	loc_3FFA
0000452C 5229 0001                  		addq.b	#1,1(a1)
00004530 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004536 6700                       		beq.s	loc_3FFA
00004538 4E75                       		rts	
0000453A                            ; ===========================================================================
0000453A                            
0000453A                            loc_3FFA:				; XREF: MoveDemo_Record
0000453A 1340 0002                  		move.b	d0,2(a1)
0000453E 137C 0000 0003             		move.b	#0,3(a1)
00004544 5478 F790                  		addq.w	#2,($FFFFF790).w
00004548 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000454E 4E75                       		rts	
00004550                            ; ===========================================================================
00004550                            
00004550                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004550 4A38 F604                  		tst.b	($FFFFF604).w
00004554 6A00                       		bpl.s	loc_4022
00004556 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000455A 6B00                       		bmi.s	loc_4022
0000455C 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004562                            
00004562                            loc_4022:
00004562 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004568 7000                       		moveq	#0,d0
0000456A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000456E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004574 6600                       		bne.s	loc_4038
00004576 7006                       		moveq	#6,d0
00004578                            
00004578                            loc_4038:
00004578 E548                       		lsl.w	#2,d0
0000457A 2271 0000                  		movea.l	(a1,d0.w),a1
0000457E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004582 6A00                       		bpl.s	loc_4056
00004584 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000458A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000458E 5340                       		subq.w	#1,d0
00004590 E548                       		lsl.w	#2,d0
00004592 2271 0000                  		movea.l	(a1,d0.w),a1
00004596                            
00004596                            loc_4056:
00004596 3038 F790                  		move.w	($FFFFF790).w,d0
0000459A D2C0                       		adda.w	d0,a1
0000459C 1011                       		move.b	(a1),d0
0000459E 41F8 F604                  		lea	($FFFFF604).w,a0
000045A2 1200                       		move.b	d0,d1
000045A4 1410                       		move.b	(a0),d2
000045A6 B500                       		eor.b	d2,d0
000045A8 10C1                       		move.b	d1,(a0)+
000045AA C001                       		and.b	d1,d0
000045AC 10C0                       		move.b	d0,(a0)+
000045AE 5338 F792                  		subq.b	#1,($FFFFF792).w
000045B2 6400                       		bcc.s	locret_407E
000045B4 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000045BA 5478 F790                  		addq.w	#2,($FFFFF790).w
000045BE                            
000045BE                            locret_407E:
000045BE 4E75                       		rts	
000045C0                            ; End of function MoveSonicInDemo
000045C0                            
000045C0                            ; ===========================================================================
000045C0                            ; ---------------------------------------------------------------------------
000045C0                            ; Demo sequence	pointers
000045C0                            ; ---------------------------------------------------------------------------
000045C0                            Demo_Index:
000045C0                            	include "_inc\Demo pointers for intro.asm"
000045C0                            ; ---------------------------------------------------------------------------
000045C0                            ; Demo sequence	pointers
000045C0                            ; ---------------------------------------------------------------------------
000045C0 0000 0000                  	dc.l Demo_GHZ
000045C4 0000 0000                  	dc.l Demo_GHZ
000045C8 0000 0000                  	dc.l Demo_MZ
000045CC 0000 0000                  	dc.l Demo_MZ
000045D0 0000 0000                  	dc.l Demo_SYZ
000045D4 0000 0000                  	dc.l Demo_SYZ
000045D8 0000 0000                  	dc.l Demo_SS
000045DC 0000 0000                  	dc.l Demo_SS
000045DC 0000 0000                  	dc.l Demo_SS
000045E0                            
000045E0                            Demo_EndIndex:
000045E0                            	include "_inc\Demo pointers for ending.asm"
000045E0                            ; ---------------------------------------------------------------------------
000045E0                            ; Demo (ending) sequence pointers
000045E0                            ; ---------------------------------------------------------------------------
000045E0 0000 0000                  	dc.l Demo_EndGHZ1
000045E4 0000 0000                  	dc.l Demo_EndMZ
000045E8 0000 0000                  	dc.l Demo_EndSYZ
000045EC 0000 0000                  	dc.l Demo_EndLZ
000045F0 0000 0000                  	dc.l Demo_EndSLZ
000045F4 0000 0000                  	dc.l Demo_EndSBZ1
000045F8 0000 0000                  	dc.l Demo_EndSBZ2
000045FC 0000 0000                  	dc.l Demo_EndGHZ2
000045FC 0000 0000                  	dc.l Demo_EndGHZ2
00004600                            
00004600 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004610 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004620 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004630                            		even
00004630                            
00004630                            ; ---------------------------------------------------------------------------
00004630                            ; Collision index loading subroutine
00004630                            ; ---------------------------------------------------------------------------
00004630                            
00004630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004630                            
00004630                            
00004630                            ColIndexLoad:				; XREF: Level
00004630 7000                       		moveq	#0,d0
00004632 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004636 E548                       		lsl.w	#2,d0
00004638 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000463E 4E75                       		rts	
00004640                            ; End of function ColIndexLoad
00004640                            
00004640                            ; ===========================================================================
00004640                            ; ---------------------------------------------------------------------------
00004640                            ; Collision index pointers
00004640                            ; ---------------------------------------------------------------------------
00004640                            ColPointers:
00004640                            	include "_inc\Collision index pointers.asm"
00004640                            ; ---------------------------------------------------------------------------
00004640                            ; Collision index pointers
00004640                            ; ---------------------------------------------------------------------------
00004640 0000 0000                  	dc.l Col_GHZ
00004644 0000 0000                  	dc.l Col_LZ
00004648 0000 0000                  	dc.l Col_MZ
0000464C 0000 0000                  	dc.l Col_SLZ
00004650 0000 0000                  	dc.l Col_SYZ
00004654 0000 0000                  	dc.l Col_SBZ
00004654 0000 0000                  	dc.l Col_SBZ
00004658                            
00004658                            ; ---------------------------------------------------------------------------
00004658                            ; Oscillating number subroutine
00004658                            ; ---------------------------------------------------------------------------
00004658                            
00004658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004658                            
00004658                            
00004658                            OscillateNumInit:			; XREF: Level
00004658 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000465C 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004662 7220                       		moveq	#$20,d1
00004664                            
00004664                            Osc_Loop:
00004664 32DA                       		move.w	(a2)+,(a1)+
00004666 51C9 FFFC                  		dbf	d1,Osc_Loop
0000466A 4E75                       		rts	
0000466C                            ; End of function OscillateNumInit
0000466C                            
0000466C                            ; ===========================================================================
0000466C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004670 0000 0080                  		dc.w 0,	$80
00004674 0000 0080                  		dc.w 0,	$80
00004678 0000 0080                  		dc.w 0,	$80
0000467C 0000 0080                  		dc.w 0,	$80
00004680 0000 0080                  		dc.w 0,	$80
00004684 0000 0080                  		dc.w 0,	$80
00004688 0000 0080                  		dc.w 0,	$80
0000468C 0000 0080                  		dc.w 0,	$80
00004690 0000 50F0                  		dc.w 0,	$50F0
00004694 011E 2080                  		dc.w $11E, $2080
00004698 00B4 3080                  		dc.w $B4, $3080
0000469C 010E 5080                  		dc.w $10E, $5080
000046A0 01C2 7080                  		dc.w $1C2, $7080
000046A4 0276 0080                  		dc.w $276, $80
000046A8 0000 0080                  		dc.w 0,	$80
000046AC 0000                       		dc.w 0
000046AE                            		even
000046AE                            
000046AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046AE                            
000046AE                            
000046AE                            OscillateNumDo:				; XREF: Level
000046AE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000046B4 6400                       		bcc.s	locret_41C4
000046B6 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000046BA 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046C0 3619                       		move.w	(a1)+,d3
000046C2 720F                       		moveq	#$F,d1
000046C4                            
000046C4                            loc_4184:
000046C4 341A                       		move.w	(a2)+,d2
000046C6 381A                       		move.w	(a2)+,d4
000046C8 0303                       		btst	d1,d3
000046CA 6600                       		bne.s	loc_41A4
000046CC 3029 0002                  		move.w	2(a1),d0
000046D0 D042                       		add.w	d2,d0
000046D2 3340 0002                  		move.w	d0,2(a1)
000046D6 D151                       		add.w	d0,0(a1)
000046D8 B811                       		cmp.b	0(a1),d4
000046DA 6200                       		bhi.s	loc_41BA
000046DC 03C3                       		bset	d1,d3
000046DE 6000                       		bra.s	loc_41BA
000046E0                            ; ===========================================================================
000046E0                            
000046E0                            loc_41A4:				; XREF: OscillateNumDo
000046E0 3029 0002                  		move.w	2(a1),d0
000046E4 9042                       		sub.w	d2,d0
000046E6 3340 0002                  		move.w	d0,2(a1)
000046EA D151                       		add.w	d0,0(a1)
000046EC B811                       		cmp.b	0(a1),d4
000046EE 6300                       		bls.s	loc_41BA
000046F0 0383                       		bclr	d1,d3
000046F2                            
000046F2                            loc_41BA:
000046F2 5849                       		addq.w	#4,a1
000046F4 51C9 FFCE                  		dbf	d1,loc_4184
000046F8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046FC                            
000046FC                            locret_41C4:
000046FC 4E75                       		rts	
000046FE                            ; End of function OscillateNumDo
000046FE                            
000046FE                            ; ===========================================================================
000046FE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004702 0002 0018                  		dc.w 2,	$18
00004706 0002 0020                  		dc.w 2,	$20
0000470A 0002 0030                  		dc.w 2,	$30
0000470E 0004 0020                  		dc.w 4,	$20
00004712 0008 0008                  		dc.w 8,	8
00004716 0008 0040                  		dc.w 8,	$40
0000471A 0004 0040                  		dc.w 4,	$40
0000471E 0002 0050                  		dc.w 2,	$50
00004722 0002 0050                  		dc.w 2,	$50
00004726 0002 0020                  		dc.w 2,	$20
0000472A 0003 0030                  		dc.w 3,	$30
0000472E 0005 0050                  		dc.w 5,	$50
00004732 0007 0070                  		dc.w 7,	$70
00004736 0002 0010                  		dc.w 2,	$10
0000473A 0002 0010                  		dc.w 2,	$10
0000473E                            		even
0000473E                            
0000473E                            ; ---------------------------------------------------------------------------
0000473E                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000473E                            ; ---------------------------------------------------------------------------
0000473E                            
0000473E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000473E                            
0000473E                            
0000473E                            ChangeRingFrame:			; XREF: Level
0000473E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004742 6A00                       		bpl.s	loc_421C
00004744 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000474A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000474E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004754                            
00004754                            loc_421C:
00004754 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004758 6A00                       		bpl.s	loc_4232
0000475A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004760 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004764 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000476A                            
0000476A                            loc_4232:
0000476A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000476E 6A00                       		bpl.s	loc_4250
00004770 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004776 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000477A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004780 6500                       		bcs.s	loc_4250
00004782 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004788                            
00004788                            loc_4250:
00004788 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000478C 6700                       		beq.s	locret_4272
0000478E 7000                       		moveq	#0,d0
00004790 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004794 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004798 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000479C EF58                       		rol.w	#7,d0
0000479E 0240 0003                  		andi.w	#3,d0
000047A2 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000047A6 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000047AA                            
000047AA                            locret_4272:
000047AA 4E75                       		rts	
000047AC                            ; End of function ChangeRingFrame
000047AC                            
000047AC                            ; ---------------------------------------------------------------------------
000047AC                            ; End-of-act signpost pattern loading subroutine
000047AC                            ; ---------------------------------------------------------------------------
000047AC                            
000047AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047AC                            
000047AC                            
000047AC                            SignpostArtLoad:			; XREF: Level
000047AC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000047B0 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000047B4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000047BA 6700                       		beq.s	Signpost_Exit	; if yes, branch
000047BC 3038 F700                  		move.w	($FFFFF700).w,d0
000047C0 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047C4 0441 0100                  		subi.w	#$100,d1
000047C8 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047CA 6D00                       		blt.s	Signpost_Exit	; if not, branch
000047CC 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000047D0 6700                       		beq.s	Signpost_Exit
000047D2 B278 F728                  		cmp.w	($FFFFF728).w,d1
000047D6 6700                       		beq.s	Signpost_Exit
000047D8 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000047DC 7012                       		moveq	#$12,d0
000047DE 6000 D008                  		bra.w	LoadPLC2	; load signpost	patterns
000047E2                            ; ===========================================================================
000047E2                            
000047E2                            Signpost_Exit:
000047E2 4E75                       		rts	
000047E4                            ; End of function SignpostArtLoad
000047E4                            
000047E4                            ; ===========================================================================
000047E4                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004864                            Demo_MZ:	incbin	demodata\i_mz.bin
00004994                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004A14                            Demo_SS:	incbin	demodata\i_ss.bin
00004B14                            ; ===========================================================================
00004B14                            
00004B14                            ; ---------------------------------------------------------------------------
00004B14                            ; Special Stage
00004B14                            ; ---------------------------------------------------------------------------
00004B14                            
00004B14                            SpecialStage:				; XREF: GameModeArray
00004B14 303C 00CA                  		move.w	#$CA,d0
00004B18 6100 CAB8                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004B1C 6100 D65E                  		bsr.w	Pal_MakeFlash
00004B20 46FC 2700                  		move	#$2700,sr
00004B24 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B2A 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B2E 3CBC 8004                  		move.w	#$8004,(a6)
00004B32 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B38 3CBC 9011                  		move.w	#$9011,(a6)
00004B3C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B40 0200 00BF                  		andi.b	#$BF,d0
00004B44 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B4A 6100 C9AE                  		bsr.w	ClearScreen
00004B4E 46FC 2300                  		move	#$2300,sr
00004B52 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B58 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B5C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B62 3ABC 9780                  		move.w	#$9780,(a5)
00004B66 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B6C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B74                            
00004B74                            loc_463C:
00004B74 3215                       		move.w	(a5),d1
00004B76 0801 0001                  		btst	#1,d1
00004B7A 66F8                       		bne.s	loc_463C
00004B7C 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B80 6100 0000                  		bsr.w	SS_BGLoad
00004B84 7014                       		moveq	#$14,d0
00004B86 6100 CD9A                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_ClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B9A                            
00004B9A 43F8 F700                  		lea	($FFFFF700).w,a1
00004B9E 7000                       		moveq	#0,d0
00004BA0 323C 003F                  		move.w	#$3F,d1
00004BA4                            
00004BA4                            SS_ClrRam:
00004BA4 22C0                       		move.l	d0,(a1)+
00004BA6 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004BAA                            
00004BAA 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004BAE 7000                       		moveq	#0,d0
00004BB0 323C 0027                  		move.w	#$27,d1
00004BB4                            
00004BB4                            SS_ClrRam2:
00004BB4 22C0                       		move.l	d0,(a1)+
00004BB6 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004BBA                            
00004BBA 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BBE 7000                       		moveq	#0,d0
00004BC0 323C 007F                  		move.w	#$7F,d1
00004BC4                            
00004BC4                            SS_ClrNemRam:
00004BC4 22C0                       		move.l	d0,(a1)+
00004BC6 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BCA                            
00004BCA 4238 F64E                  		clr.b	($FFFFF64E).w
00004BCE 4278 FE02                  		clr.w	($FFFFFE02).w
00004BD2 700A                       		moveq	#$A,d0
00004BD4 6100 D726                  		bsr.w	PalLoad1	; load special stage pallet
00004BD8 4EB9 0000 0000             		jsr	SS_Load
00004BDE 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004BE6 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004BEE 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004BF4 6100 0000                  		bsr.w	PalCycle_SS
00004BF8 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004BFC 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004C00 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004C06 303C 0089                  		move.w	#$89,d0
00004C0A 6100 C9C0                  		bsr.w	PlaySound	; play special stage BG	music
00004C0E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004C14 43F9 0000 45C0             		lea	(Demo_Index).l,a1
00004C1A 7006                       		moveq	#6,d0
00004C1C E548                       		lsl.w	#2,d0
00004C1E 2271 0000                  		movea.l	(a1,d0.w),a1
00004C22 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C28 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C2C 4278 FE20                  		clr.w	($FFFFFE20).w
00004C30 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C34 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C3A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C40                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C40                            ;		beq.s	SS_NoDebug	; if not, branch
00004C40                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C40                            ;		beq.s	SS_NoDebug	; if not, branch
00004C40                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C40                            
00004C40                            SS_NoDebug:
00004C40 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C44 0000 0040                  		ori.b	#$40,d0
00004C48 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C4E 6100 D480                  		bsr.w	Pal_MakeWhite
00004C52                            
00004C52                            ; ---------------------------------------------------------------------------
00004C52                            ; Main Special Stage loop
00004C52                            ; ---------------------------------------------------------------------------
00004C52                            
00004C52                            SS_MainLoop:
00004C52 6100 C98A                  		bsr.w	PauseGame
00004C56 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C5C 6100 E072                  		bsr.w	DelayProgram
00004C60 4A78 F784                          tst.w   ($FFFFF784).w
00004C64 6700                               beq.s   SS_NotReversed
00004C66 5378 F784                          subi.w  #1,($FFFFF784).w
00004C6A                            
00004C6A                            SS_NotReversed:
00004C6A 6100 F8A4                  		bsr.w	MoveSonicInDemo
00004C6E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C74 4EB9 0000 0000             		jsr	ObjectsLoad
00004C7A 4EB9 0000 0000             		jsr	BuildSprites
00004C80 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C86 6100 0000                  		bsr.w	SS_BGAnimate
00004C8A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C8E 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C90 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C94 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C98                            
00004C98                            SS_ChkEnd:
00004C98 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C9E 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004CA2                            
00004CA2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004CA6 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004CAA 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004CB0 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004CB6 6500                       		bcs.s	SS_End		; if not, branch
00004CB8 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004CBC                            
00004CBC                            SS_End:
00004CBC 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CC2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CC8 4278 F794                  		clr.w	($FFFFF794).w
00004CCC                            
00004CCC                            SS_EndLoop:
00004CCC 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004CD2 6100 DFFC                  		bsr.w	DelayProgram
00004CD6 6100 F838                  		bsr.w	MoveSonicInDemo
00004CDA 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CE0 4EB9 0000 0000             		jsr	ObjectsLoad
00004CE6 4EB9 0000 0000             		jsr	BuildSprites
00004CEC 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CF2 6100 0000                  		bsr.w	SS_BGAnimate
00004CF6 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CFA 6A00                       		bpl.s	loc_47D4
00004CFC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004D02 6100 D498                  		bsr.w	Pal_ToWhite
00004D06                            
00004D06                            loc_47D4:
00004D06 4A78 F614                  		tst.w	($FFFFF614).w
00004D0A 66C0                       		bne.s	SS_EndLoop
00004D0C                            
00004D0C 46FC 2700                  		move	#$2700,sr
00004D10 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D16 3CBC 8230                  		move.w	#$8230,(a6)
00004D1A 3CBC 8407                  		move.w	#$8407,(a6)
00004D1E 3CBC 9001                  		move.w	#$9001,(a6)
00004D22 6100 C7D6                  		bsr.w	ClearScreen
00004D26 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D30 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D36 6100 C93E                  		bsr.w	NemDec
00004D3A 4EB9 0000 0000             		jsr	Hud_Base
00004D40 46FC 2300                  		move	#$2300,sr
00004D44 7011                       		moveq	#$11,d0
00004D46 6100 D5D0                  		bsr.w	PalLoad2	; load results screen pallet
00004D4A 7000                       		moveq	#0,d0
00004D4C 6100 CA9A                  		bsr.w	LoadPLC2
00004D50 701B                       		moveq	#$1B,d0
00004D52 6100 CA62                  		bsr.w	LoadPLC		; load results screen patterns
00004D56 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D5C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D62 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D66 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D6A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D6E 303C 008E                  		move.w	#$8E,d0
00004D72 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D78 43F8 D000                  		lea	($FFFFD000).w,a1
00004D7C 7000                       		moveq	#0,d0
00004D7E 323C 07FF                  		move.w	#$7FF,d1
00004D82                            
00004D82                            SS_EndClrObjRam:
00004D82 22C0                       		move.l	d0,(a1)+
00004D84 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D88                            
00004D88 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D8E                            
00004D8E                            SS_NormalExit:
00004D8E 6100 C84E                  		bsr.w	PauseGame
00004D92 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D98 6100 DF36                  		bsr.w	DelayProgram
00004D9C 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA2 4EB9 0000 0000             		jsr	BuildSprites
00004DA8 6100 CA78                  		bsr.w	RunPLC_RAM
00004DAC 4A78 FE02                  		tst.w	($FFFFFE02).w
00004DB0 67DC                       		beq.s	SS_NormalExit
00004DB2 4AB8 F680                  		tst.l	($FFFFF680).w
00004DB6 66D6                       		bne.s	SS_NormalExit
00004DB8 303C 00CA                  		move.w	#$CA,d0
00004DBC 6100 C814                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DC0 6100 D3BA                  		bsr.w	Pal_MakeFlash
00004DC4 4E75                       		rts	
00004DC6                            ; ===========================================================================
00004DC6                            
00004DC6                            SS_ToSegaScreen:
00004DC6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004DCC 4E75                       		rts
00004DCE                            
00004DCE                            ; ---------------------------------------------------------------------------
00004DCE                            ; Special stage	background loading subroutine
00004DCE                            ; ---------------------------------------------------------------------------
00004DCE                            
00004DCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DCE                            
00004DCE                            
00004DCE                            SS_BGLoad:				; XREF: SpecialStage
00004DCE 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DD4 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004DDA 303C 4051                  		move.w	#$4051,d0
00004DDE 6100 CB74                  		bsr.w	EniDec
00004DE2 263C 5000 0001             		move.l	#$50000001,d3
00004DE8 45F9 00FF 0080             		lea	($FF0080).l,a2
00004DEE 7E06                       		moveq	#6,d7
00004DF0                            
00004DF0                            loc_48BE:
00004DF0 2003                       		move.l	d3,d0
00004DF2 7C03                       		moveq	#3,d6
00004DF4 7800                       		moveq	#0,d4
00004DF6 0C47 0003                  		cmpi.w	#3,d7
00004DFA 6400                       		bcc.s	loc_48CC
00004DFC 7801                       		moveq	#1,d4
00004DFE                            
00004DFE                            loc_48CC:
00004DFE 7A07                       		moveq	#7,d5
00004E00                            
00004E00                            loc_48CE:
00004E00 224A                       		movea.l	a2,a1
00004E02 0A04 0001                  		eori.b	#1,d4
00004E06 6600                       		bne.s	loc_48E2
00004E08 0C47 0006                  		cmpi.w	#6,d7
00004E0C 6600                       		bne.s	loc_48F2
00004E0E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E14                            
00004E14                            loc_48E2:
00004E14 48E7 F800                  		movem.l	d0-d4,-(sp)
00004E18 7207                       		moveq	#7,d1
00004E1A 7407                       		moveq	#7,d2
00004E1C 6100 C838                  		bsr.w	ShowVDPGraphics
00004E20 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E24                            
00004E24                            loc_48F2:
00004E24 0680 0010 0000             		addi.l	#$100000,d0
00004E2A 51CD FFD4                  		dbf	d5,loc_48CE
00004E2E 0680 0380 0000             		addi.l	#$3800000,d0
00004E34 0A04 0001                  		eori.b	#1,d4
00004E38 51CE FFC4                  		dbf	d6,loc_48CC
00004E3C 0683 1000 0000             		addi.l	#$10000000,d3
00004E42 6A00                       		bpl.s	loc_491C
00004E44 4843                       		swap	d3
00004E46 0683 0000 C000             		addi.l	#$C000,d3
00004E4C 4843                       		swap	d3
00004E4E                            
00004E4E                            loc_491C:
00004E4E D4FC 0080                  		adda.w	#$80,a2
00004E52 51CF FF9C                  		dbf	d7,loc_48BE
00004E56 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E5C 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E62 303C 4000                  		move.w	#$4000,d0
00004E66 6100 CAEC                  		bsr.w	EniDec
00004E6A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E70 203C 4000 0003             		move.l	#$40000003,d0
00004E76 723F                       		moveq	#$3F,d1
00004E78 741F                       		moveq	#$1F,d2
00004E7A 6100 C7DA                  		bsr.w	ShowVDPGraphics
00004E7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E84 203C 5000 0003             		move.l	#$50000003,d0
00004E8A 723F                       		moveq	#$3F,d1
00004E8C 743F                       		moveq	#$3F,d2
00004E8E 6100 C7C6                  		bsr.w	ShowVDPGraphics
00004E92 4E75                       		rts	
00004E94                            ; End of function SS_BGLoad
00004E94                            
00004E94                            ; ---------------------------------------------------------------------------
00004E94                            ; Pallet cycling routine - special stage
00004E94                            ; ---------------------------------------------------------------------------
00004E94                            
00004E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E94                            
00004E94                            
00004E94                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E94 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E98 6600                       		bne.s	locret_49E6
00004E9A 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E9E 6A00                       		bpl.s	locret_49E6
00004EA0 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EA6 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004EAA 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004EAE 0240 001F                  		andi.w	#$1F,d0
00004EB2 E548                       		lsl.w	#2,d0
00004EB4 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004EBA D0C0                       		adda.w	d0,a0
00004EBC 1018                       		move.b	(a0)+,d0
00004EBE 6A00                       		bpl.s	loc_4992
00004EC0 303C 01FF                  		move.w	#$1FF,d0
00004EC4                            
00004EC4                            loc_4992:
00004EC4 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004EC8 7000                       		moveq	#0,d0
00004ECA 1018                       		move.b	(a0)+,d0
00004ECC 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004ED0 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004ED6 43F1 0000                  		lea	(a1,d0.w),a1
00004EDA 303C 8200                  		move.w	#-$7E00,d0
00004EDE 1019                       		move.b	(a1)+,d0
00004EE0 3C80                       		move.w	d0,(a6)
00004EE2 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004EE6 303C 8400                  		move.w	#-$7C00,d0
00004EEA 1018                       		move.b	(a0)+,d0
00004EEC 3C80                       		move.w	d0,(a6)
00004EEE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EF8 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004F00 7000                       		moveq	#0,d0
00004F02 1018                       		move.b	(a0)+,d0
00004F04 6B00                       		bmi.s	loc_49E8
00004F06 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004F0C D2C0                       		adda.w	d0,a1
00004F0E 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004F12 24D9                       		move.l	(a1)+,(a2)+
00004F14 24D9                       		move.l	(a1)+,(a2)+
00004F16 24D9                       		move.l	(a1)+,(a2)+
00004F18                            
00004F18                            locret_49E6:
00004F18 4E75                       		rts	
00004F1A                            ; ===========================================================================
00004F1A                            
00004F1A                            loc_49E8:				; XREF: PalCycle_SS
00004F1A 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004F1E 0C40 008A                  		cmpi.w	#$8A,d0
00004F22 6500                       		bcs.s	loc_49F4
00004F24 5241                       		addq.w	#1,d1
00004F26                            
00004F26                            loc_49F4:
00004F26 C2FC 002A                  		mulu.w	#$2A,d1
00004F2A 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004F30 D2C1                       		adda.w	d1,a1
00004F32 0240 007F                  		andi.w	#$7F,d0
00004F36 0880 0000                  		bclr	#0,d0
00004F3A 6700                       		beq.s	loc_4A18
00004F3C 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004F40 24D1                       		move.l	(a1),(a2)+
00004F42 24E9 0004                  		move.l	4(a1),(a2)+
00004F46 24E9 0008                  		move.l	8(a1),(a2)+
00004F4A                            
00004F4A                            loc_4A18:
00004F4A D2FC 000C                  		adda.w	#$C,a1
00004F4E 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004F52 0C40 000A                  		cmpi.w	#$A,d0
00004F56 6500                       		bcs.s	loc_4A2E
00004F58 0440 000A                  		subi.w	#$A,d0
00004F5C 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F60                            
00004F60                            loc_4A2E:
00004F60 3200                       		move.w	d0,d1
00004F62 D040                       		add.w	d0,d0
00004F64 D041                       		add.w	d1,d0
00004F66 D2C0                       		adda.w	d0,a1
00004F68 24D9                       		move.l	(a1)+,(a2)+
00004F6A 34D9                       		move.w	(a1)+,(a2)+
00004F6C 4E75                       		rts	
00004F6E                            ; End of function PalCycle_SS
00004F6E                            
00004F6E                            ; ===========================================================================
00004F6E 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F7E                            					; XREF: PalCycle_SS
00004F7E 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F8E 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F9E FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004FAE 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004FBE 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004FCE 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004FDE FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004FEE                            		even
00004FEE 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FFC                            					; XREF: PalCycle_SS
00004FFC                            		even
00004FFC                            
00004FFC                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005044                            		even
00005044                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005116                            		even
00005116                            
00005116                            ; ---------------------------------------------------------------------------
00005116                            ; Subroutine to	make the special stage background animated
00005116                            ; ---------------------------------------------------------------------------
00005116                            
00005116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005116                            
00005116                            
00005116                            SS_BGAnimate:				; XREF: SpecialStage
00005116 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000511A 6600                       		bne.s	loc_4BF6
0000511C 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005122 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005128                            
00005128                            loc_4BF6:
00005128 0C40 0008                  		cmpi.w	#8,d0
0000512C 6400                       		bcc.s	loc_4C4E
0000512E 0C40 0006                  		cmpi.w	#6,d0
00005132 6600                       		bne.s	loc_4C10
00005134 5278 F718                  		addq.w	#1,($FFFFF718).w
00005138 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000513C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005142                            
00005142                            loc_4C10:
00005142 7000                       		moveq	#0,d0
00005144 3038 F708                  		move.w	($FFFFF708).w,d0
00005148 4440                       		neg.w	d0
0000514A 4840                       		swap	d0
0000514C 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005152 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005156 7609                       		moveq	#9,d3
00005158                            
00005158                            loc_4C26:
00005158 302B 0002                  		move.w	2(a3),d0
0000515C 6100 DBA4                  		bsr.w	CalcSine
00005160 7400                       		moveq	#0,d2
00005162 1419                       		move.b	(a1)+,d2
00005164 C1C2                       		muls.w	d2,d0
00005166 E080                       		asr.l	#8,d0
00005168 36C0                       		move.w	d0,(a3)+
0000516A 1419                       		move.b	(a1)+,d2
0000516C 4882                       		ext.w	d2
0000516E D55B                       		add.w	d2,(a3)+
00005170 51CB FFE6                  		dbf	d3,loc_4C26
00005174 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005178 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000517E 6000                       		bra.s	loc_4C7E
00005180                            ; ===========================================================================
00005180                            
00005180                            loc_4C4E:				; XREF: SS_BGAnimate
00005180 0C40 000C                  		cmpi.w	#$C,d0
00005184 6600                       		bne.s	loc_4C74
00005186 5378 F718                  		subq.w	#1,($FFFFF718).w
0000518A 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000518E 243C 0001 8000             		move.l	#$18000,d2
00005194 7206                       		moveq	#6,d1
00005196                            
00005196                            loc_4C64:
00005196 2013                       		move.l	(a3),d0
00005198 9082                       		sub.l	d2,d0
0000519A 26C0                       		move.l	d0,(a3)+
0000519C 0482 0000 2000             		subi.l	#$2000,d2
000051A2 51C9 FFF2                  		dbf	d1,loc_4C64
000051A6                            
000051A6                            loc_4C74:
000051A6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000051AA 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000051B0                            
000051B0                            loc_4C7E:
000051B0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000051B4 3038 F718                  		move.w	($FFFFF718).w,d0
000051B8 4440                       		neg.w	d0
000051BA 4840                       		swap	d0
000051BC 7600                       		moveq	#0,d3
000051BE 161A                       		move.b	(a2)+,d3
000051C0 3438 F70C                  		move.w	($FFFFF70C).w,d2
000051C4 4442                       		neg.w	d2
000051C6 0242 00FF                  		andi.w	#$FF,d2
000051CA E54A                       		lsl.w	#2,d2
000051CC                            
000051CC                            loc_4C9A:
000051CC 301B                       		move.w	(a3)+,d0
000051CE 544B                       		addq.w	#2,a3
000051D0 7200                       		moveq	#0,d1
000051D2 121A                       		move.b	(a2)+,d1
000051D4 5341                       		subq.w	#1,d1
000051D6                            
000051D6                            loc_4CA4:
000051D6 2380 2000                  		move.l	d0,(a1,d2.w)
000051DA 5842                       		addq.w	#4,d2
000051DC 0242 03FC                  		andi.w	#$3FC,d2
000051E0 51C9 FFF4                  		dbf	d1,loc_4CA4
000051E4 51CB FFE6                  		dbf	d3,loc_4C9A
000051E8 4E75                       		rts	
000051EA                            ; End of function SS_BGAnimate
000051EA                            
000051EA                            ; ===========================================================================
000051EA 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000051F6                            		even
000051F6 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051FE                            		even
000051FE 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005212                            		even
00005212                            					; XREF: SS_BGAnimate
00005212                            ; ===========================================================================
00005212                            
00005212                            ; ---------------------------------------------------------------------------
00005212                            ; Continue screen
00005212                            ; ---------------------------------------------------------------------------
00005212                            
00005212                            ContinueScreen:				; XREF: GameModeArray
00005212 6100 CE3E                  		bsr.w	Pal_FadeFrom
00005216 46FC 2700                  		move	#$2700,sr
0000521A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000521E 0200 00BF                  		andi.b	#$BF,d0
00005222 33C0 00C0 0004             		move.w	d0,($C00004).l
00005228 4DF9 00C0 0004             		lea	($C00004).l,a6
0000522E 3CBC 8004                  		move.w	#$8004,(a6)
00005232 3CBC 8700                  		move.w	#$8700,(a6)
00005236 6100 C2C2                  		bsr.w	ClearScreen
0000523A 43F8 D000                  		lea	($FFFFD000).w,a1
0000523E 7000                       		moveq	#0,d0
00005240 323C 07FF                  		move.w	#$7FF,d1
00005244                            
00005244                            Cont_ClrObjRam:
00005244 22C0                       		move.l	d0,(a1)+
00005246 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000524A                            
0000524A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005254 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000525A 6100 C41A                  		bsr.w	NemDec
0000525E 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005268 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000526E 6100 C406                  		bsr.w	NemDec
00005272 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000527C 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005282 6100 C3F2                  		bsr.w	NemDec
00005286 720A                       		moveq	#10,d1
00005288 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000528E 7012                       		moveq	#$12,d0
00005290 6100 D06A                  		bsr.w	PalLoad1	; load continue	screen pallet
00005294 103C 0090                  		move.b	#$90,d0
00005298 6100 C332                  		bsr.w	PlaySound	; play continue	music
0000529C 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000052A2 42B8 F700                  		clr.l	($FFFFF700).w
000052A6 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000052AE 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000052B4 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000052BA 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000052C0 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000052C6 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000052CC 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000052D2 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000052D8 4EB9 0000 0000             		jsr	ObjectsLoad
000052DE 4EB9 0000 0000             		jsr	BuildSprites
000052E4 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052E8 0000 0040                  		ori.b	#$40,d0
000052EC 33C0 00C0 0004             		move.w	d0,($C00004).l
000052F2 6100 CCB4                  		bsr.w	Pal_FadeTo
000052F6                            
000052F6                            ; ---------------------------------------------------------------------------
000052F6                            ; Continue screen main loop
000052F6                            ; ---------------------------------------------------------------------------
000052F6                            
000052F6                            Cont_MainLoop:
000052F6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052FC 6100 D9D2                  		bsr.w	DelayProgram
00005300 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005306 6400                       		bcc.s	loc_4DF2
00005308 46FC 2700                  		move	#$2700,sr
0000530C 3238 F614                  		move.w	($FFFFF614).w,d1
00005310 82FC 003C                  		divu.w	#$3C,d1
00005314 0281 0000 000F             		andi.l	#$F,d1
0000531A 4EB9 0000 0000             		jsr	ContScrCounter
00005320 46FC 2300                  		move	#$2300,sr
00005324                            
00005324                            loc_4DF2:
00005324 4EB9 0000 0000             		jsr	ObjectsLoad
0000532A 4EB9 0000 0000             		jsr	BuildSprites
00005330 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005336 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005338 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000533E 64B6                       		bcc.s	Cont_MainLoop
00005340 4A78 F614                  		tst.w	($FFFFF614).w
00005344 6600 FFB0                  		bne.w	Cont_MainLoop
00005348 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000534E 4E75                       		rts	
00005350                            ; ===========================================================================
00005350                            
00005350                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005350 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005356 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000535C 7000                       		moveq	#0,d0
0000535E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005362 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005366 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000536A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000536E 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005372 4E75                       		rts	
00005374                            ; ===========================================================================
00005374                            
00005374                            ; ---------------------------------------------------------------------------
00005374                            ; Object 80 - Continue screen elements
00005374                            ; ---------------------------------------------------------------------------
00005374                            
00005374                            Obj80:					; XREF: Obj_Index
00005374 7000                       		moveq	#0,d0
00005376 1028 0024                  		move.b	$24(a0),d0
0000537A 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000537E 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005382                            ; ===========================================================================
00005382 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005384 0000                       		dc.w Obj80_Display-Obj80_Index
00005386 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005388 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000538A                            ; ===========================================================================
0000538A                            
0000538A                            Obj80_Main:				; XREF: Obj80_Index
0000538A 5428 0024                  		addq.b	#2,$24(a0)
0000538E 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005396 317C 8500 0002             		move.w	#$8500,2(a0)
0000539C 117C 0000 0001             		move.b	#0,1(a0)
000053A2 117C 003C 0019             		move.b	#$3C,$19(a0)
000053A8 317C 0120 0008             		move.w	#$120,8(a0)
000053AE 317C 00C0 000A             		move.w	#$C0,$A(a0)
000053B4 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000053BA                            
000053BA                            Obj80_Display:				; XREF: Obj80_Index
000053BA 4EF9 0000 0000             		jmp	DisplaySprite
000053C0                            ; ===========================================================================
000053C0                            Obj80_MiniSonicPos:
000053C0 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000053D2 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000053DE                            ; ===========================================================================
000053DE                            
000053DE                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000053DE 2248                       		movea.l	a0,a1
000053E0 45F9 0000 53C0             		lea	(Obj80_MiniSonicPos).l,a2
000053E6 7200                       		moveq	#0,d1
000053E8 1238 FE18                  		move.b	($FFFFFE18).w,d1
000053EC 5501                       		subq.b	#2,d1
000053EE 6400                       		bcc.s	loc_4EC4
000053F0 4EF9 0000 0000             		jmp	DeleteObject
000053F6                            ; ===========================================================================
000053F6                            
000053F6                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000053F6 7601                       		moveq	#1,d3
000053F8 0C01 000E                  		cmpi.b	#$E,d1
000053FC 6500                       		bcs.s	loc_4ED0
000053FE 7600                       		moveq	#0,d3
00005400 720E                       		moveq	#$E,d1
00005402                            
00005402                            loc_4ED0:
00005402 1401                       		move.b	d1,d2
00005404 0202 0001                  		andi.b	#1,d2
00005408                            
00005408                            Obj80_MiniSonLoop:
00005408 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000540C 335A 0008                  		move.w	(a2)+,8(a1)
00005410 4A02                       		tst.b	d2
00005412 6700                       		beq.s	loc_4EEA
00005414 0469 000A 0008             		subi.w	#$A,8(a1)
0000541A                            
0000541A                            loc_4EEA:
0000541A 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005420 137C 0006 001A             		move.b	#6,$1A(a1)
00005426 137C 0006 0024             		move.b	#6,$24(a1)
0000542C 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005434 337C 8551 0002             		move.w	#$8551,2(a1)
0000543A 137C 0000 0001             		move.b	#0,1(a1)
00005440 43E9 0040                  		lea	$40(a1),a1
00005444 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005448 43E9 FFC0                  		lea	-$40(a1),a1
0000544C 1343 0028                  		move.b	d3,$28(a1)
00005450                            
00005450                            Obj80_ChkType:				; XREF: Obj80_Index
00005450 4A28 0028                  		tst.b	$28(a0)
00005454 6700                       		beq.s	loc_4F40
00005456 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000545C 6500                       		bcs.s	loc_4F40
0000545E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005462 0200 0001                  		andi.b	#1,d0
00005466 6600                       		bne.s	loc_4F40
00005468 4A78 D010                  		tst.w	($FFFFD010).w
0000546C 6600                       		bne.s	Obj80_Delete
0000546E 4E75                       		rts	
00005470                            ; ===========================================================================
00005470                            
00005470                            loc_4F40:				; XREF: Obj80_ChkType
00005470 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005474 0200 000F                  		andi.b	#$F,d0
00005478 6600                       		bne.s	Obj80_Display2
0000547A 0868 0000 001A             		bchg	#0,$1A(a0)
00005480                            
00005480                            Obj80_Display2:
00005480 4EF9 0000 0000             		jmp	DisplaySprite
00005486                            ; ===========================================================================
00005486                            
00005486                            Obj80_Delete:				; XREF: Obj80_ChkType
00005486 4EF9 0000 0000             		jmp	DeleteObject
0000548C                            ; ===========================================================================
0000548C                            
0000548C                            ; ---------------------------------------------------------------------------
0000548C                            ; Object 81 - Sonic on the continue screen
0000548C                            ; ---------------------------------------------------------------------------
0000548C                            
0000548C                            Obj81:					; XREF: Obj_Index
0000548C 7000                       		moveq	#0,d0
0000548E 1028 0024                  		move.b	$24(a0),d0
00005492 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005496 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
0000549A 4EF9 0000 0000             		jmp	DisplaySprite
000054A0                            ; ===========================================================================
000054A0 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000054A2 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000054A4 0000                       		dc.w Obj81_Animate-Obj81_Index
000054A6 0000                       		dc.w Obj81_Run-Obj81_Index
000054A8                            ; ===========================================================================
000054A8                            
000054A8                            Obj81_Main:				; XREF: Obj81_Index
000054A8 5428 0024                  		addq.b	#2,$24(a0)
000054AC 317C 00A0 0008             		move.w	#$A0,8(a0)
000054B2 317C 00C0 000C             		move.w	#$C0,$C(a0)
000054B8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054C0 317C 0780 0002             		move.w	#$780,2(a0)
000054C6 117C 0004 0001             		move.b	#4,1(a0)
000054CC 117C 0002 0018             		move.b	#2,$18(a0)
000054D2 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000054D8 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000054DE                            
000054DE                            Obj81_ChkLand:				; XREF: Obj81_Index
000054DE 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000054E4 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000054E6 5428 0024                  		addq.b	#2,$24(a0)
000054EA 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000054EE 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054F6 317C 8500 0002             		move.w	#$8500,2(a0)
000054FC 117C 0000 001C             		move.b	#0,$1C(a0)
00005502 6000                       		bra.s	Obj81_Animate
00005504                            ; ===========================================================================
00005504                            
00005504                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005504 4EB9 0000 0000             		jsr	SpeedToPos
0000550A 4EB9 0000 0000             		jsr	Sonic_Animate
00005510 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005516                            ; ===========================================================================
00005516                            
00005516                            Obj81_Animate:				; XREF: Obj81_Index
00005516 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000551A 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000551C 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005522 4EF9 0000 0000             		jmp	AnimateSprite
00005528                            ; ===========================================================================
00005528                            
00005528                            Obj81_GetUp:				; XREF: Obj81_Animate
00005528 5428 0024                  		addq.b	#2,$24(a0)
0000552C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005534 317C 0780 0002             		move.w	#$780,2(a0)
0000553A 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005540 4268 0014                  		clr.w	$14(a0)
00005544 5168 000C                  		subq.w	#8,$C(a0)
00005548 103C 00E0                  		move.b	#$E0,d0
0000554C 6100 C084                  		bsr.w	PlaySound_Special ; fade out music
00005550                            
00005550                            Obj81_Run:				; XREF: Obj81_Index
00005550 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005556 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005558 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000555E 6000                       		bra.s	Obj81_ShowRun
00005560                            ; ===========================================================================
00005560                            
00005560                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005560 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005566                            
00005566                            Obj81_ShowRun:				; XREF: Obj81_Run
00005566 4EB9 0000 0000             		jsr	SpeedToPos
0000556C 4EB9 0000 0000             		jsr	Sonic_Animate
00005572 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005578                            ; ===========================================================================
00005578                            Ani_obj81:
00005578                            	include "_anim\obj81.asm"
00005578                            ; ---------------------------------------------------------------------------
00005578                            ; Animation script - Sonic on the continue screen
00005578                            ; ---------------------------------------------------------------------------
00005578 0000                       		dc.w byte_504A-Ani_obj81
0000557A 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005586 00                         		even
00005586 00                         		even
00005586                            
00005586                            ; ---------------------------------------------------------------------------
00005586                            ; Sprite mappings - Continue screen
00005586                            ; ---------------------------------------------------------------------------
00005586                            Map_obj80:
00005586                            	include "_maps\obj80.asm"
00005586                            ; ---------------------------------------------------------------------------
00005586                            ; Sprite mappings - Continue screen
00005586                            ; ---------------------------------------------------------------------------
00005586 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000558A 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000558E 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005592 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005596 0B                         byte_5066:	dc.b $B
00005597 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
0000559C F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000055A1 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000055A6 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000055AB F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000055B0 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000055B5 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000055BA F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000055BF 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000055C4 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000055C9 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000055CE 03                         byte_509E:	dc.b 3
000055CF 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000055D4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055D9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055DE 03                         byte_50AE:	dc.b 3
000055DF 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000055E4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055E9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055EE 03                         byte_50BE:	dc.b 3
000055EF 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000055F4 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055F9 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055FE 02                         byte_50CE:	dc.b 2
000055FF 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005604 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005609 01                         byte_50D9:	dc.b 1
0000560A 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
0000560F 01                         byte_50DF:	dc.b 1
00005610 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005616 00                         		even
00005616 00                         		even
00005616                            
00005616                            ; ===========================================================================
00005616                            ; ---------------------------------------------------------------------------
00005616                            ; Ending sequence in Green Hill	Zone
00005616                            ; ---------------------------------------------------------------------------
00005616                            
00005616                            EndingSequence:				; XREF: GameModeArray
00005616 103C 00E4                  		move.b	#$E4,d0
0000561A 6100 BFB6                  		bsr.w	PlaySound_Special ; stop music
0000561E 6100 CA32                  		bsr.w	Pal_FadeFrom
00005622 43F8 D000                  		lea	($FFFFD000).w,a1
00005626 7000                       		moveq	#0,d0
00005628 323C 07FF                  		move.w	#$7FF,d1
0000562C                            
0000562C                            End_ClrObjRam:
0000562C 22C0                       		move.l	d0,(a1)+
0000562E 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005632                            
00005632 43F8 F628                  		lea	($FFFFF628).w,a1
00005636 7000                       		moveq	#0,d0
00005638 323C 0015                  		move.w	#$15,d1
0000563C                            
0000563C                            End_ClrRam:
0000563C 22C0                       		move.l	d0,(a1)+
0000563E 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005642                            
00005642 43F8 F700                  		lea	($FFFFF700).w,a1
00005646 7000                       		moveq	#0,d0
00005648 323C 003F                  		move.w	#$3F,d1
0000564C                            
0000564C                            End_ClrRam2:
0000564C 22C0                       		move.l	d0,(a1)+
0000564E 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005652                            
00005652 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005656 7000                       		moveq	#0,d0
00005658 323C 0047                  		move.w	#$47,d1
0000565C                            
0000565C                            End_ClrRam3:
0000565C 22C0                       		move.l	d0,(a1)+
0000565E 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005662                            
00005662 46FC 2700                  		move	#$2700,sr
00005666 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000566A 0200 00BF                  		andi.b	#$BF,d0
0000566E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005674 6100 BE84                  		bsr.w	ClearScreen
00005678 4DF9 00C0 0004             		lea	($C00004).l,a6
0000567E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005682 3CBC 8230                  		move.w	#$8230,(a6)
00005686 3CBC 8407                  		move.w	#$8407,(a6)
0000568A 3CBC 857C                  		move.w	#$857C,(a6)
0000568E 3CBC 9001                  		move.w	#$9001,(a6)
00005692 3CBC 8004                  		move.w	#$8004,(a6)
00005696 3CBC 8720                  		move.w	#$8720,(a6)
0000569A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000056A0 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000056A4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000056AA 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000056B0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000056B6 6700                       		beq.s	End_LoadData	; if yes, branch
000056B8 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000056BE                            
000056BE                            End_LoadData:
000056BE 701C                       		moveq	#$1C,d0
000056C0 6100 C260                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000056C4 4EB9 0000 0000             		jsr	Hud_Base
000056CA 6100 0000                  		bsr.w	LevelSizeLoad
000056CE 6100 0000                  		bsr.w	DeformBgLayer
000056D2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000056D8 6100 0000                  		bsr.w	MainLoadBlockLoad
000056DC 6100 0000                  		bsr.w	LoadTilesFromStart
000056E0 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000056E8 46FC 2300                  		move	#$2300,sr
000056EC 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000056F2 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000056F6 6100 C3DA                  		bsr.w	KosDec
000056FA 7003                       		moveq	#3,d0
000056FC 6100 CBFE                  		bsr.w	PalLoad1	; load Sonic's pallet
00005700 303C 008B                  		move.w	#$8B,d0
00005704 6100 BEC6                  		bsr.w	PlaySound	; play ending sequence music
00005708 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0000570E 6700                       		beq.s	End_LoadSonic	; if not, branch
00005710 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005716                            
00005716                            End_LoadSonic:
00005716 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000571C 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005722 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005728 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
0000572E 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005734 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000573A 4EB9 0000 0000             		jsr	ObjPosLoad
00005740 4EB9 0000 0000             		jsr	ObjectsLoad
00005746 4EB9 0000 0000             		jsr	BuildSprites
0000574C 7000                       		moveq	#0,d0
0000574E 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005752 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005756 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000575A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000575E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005762 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005766 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000576A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000576E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005772 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005776 6100 EEE0                  		bsr.w	OscillateNumInit
0000577A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005780 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005786 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000578C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005792 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005798 6100 D536                  		bsr.w	DelayProgram
0000579C 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057A0 0000 0040                  		ori.b	#$40,d0
000057A4 33C0 00C0 0004             		move.w	d0,($C00004).l
000057AA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057B0 6100 C7F6                  		bsr.w	Pal_FadeTo
000057B4                            
000057B4                            ; ---------------------------------------------------------------------------
000057B4                            ; Main ending sequence loop
000057B4                            ; ---------------------------------------------------------------------------
000057B4                            
000057B4                            End_MainLoop:
000057B4 6100 BE28                  		bsr.w	PauseGame
000057B8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057BE 6100 D510                  		bsr.w	DelayProgram
000057C2 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057C6 6100 0000                  		bsr.w	End_MoveSonic
000057CA 4EB9 0000 0000             		jsr	ObjectsLoad
000057D0 6100 0000                  		bsr.w	DeformBgLayer
000057D4 4EB9 0000 0000             		jsr	BuildSprites
000057DA 4EB9 0000 0000             		jsr	ObjPosLoad
000057E0 6100 C390                  		bsr.w	PalCycle_Load
000057E4 6100 EEC8                  		bsr.w	OscillateNumDo
000057E8 6100 EF54                  		bsr.w	ChangeRingFrame
000057EC 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000057F2 6700                       		beq.s	loc_52DA	; if yes, branch
000057F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057FA 103C 0091                  		move.b	#$91,d0
000057FE 6100 BDD2                  		bsr.w	PlaySound_Special ; play credits music
00005802 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005808 4E75                       		rts	
0000580A                            ; ===========================================================================
0000580A                            
0000580A                            loc_52DA:
0000580A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000580E 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005812                            
00005812 4278 FE02                  		clr.w	($FFFFFE02).w
00005816 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000581C 4278 F794                  		clr.w	($FFFFF794).w
00005820                            
00005820                            End_AllEmlds:				; XREF: loc_5334
00005820 6100 BDBC                  		bsr.w	PauseGame
00005824 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000582A 6100 D4A4                  		bsr.w	DelayProgram
0000582E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005832 6100 0000                  		bsr.w	End_MoveSonic
00005836 4EB9 0000 0000             		jsr	ObjectsLoad
0000583C 6100 0000                  		bsr.w	DeformBgLayer
00005840 4EB9 0000 0000             		jsr	BuildSprites
00005846 4EB9 0000 0000             		jsr	ObjPosLoad
0000584C 6100 EE60                  		bsr.w	OscillateNumDo
00005850 6100 EEEC                  		bsr.w	ChangeRingFrame
00005854 5378 F794                  		subq.w	#1,($FFFFF794).w
00005858 6A00                       		bpl.s	loc_5334
0000585A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005860 6100 C93A                  		bsr.w	Pal_ToWhite
00005864                            
00005864                            loc_5334:
00005864 4A78 FE02                  		tst.w	($FFFFFE02).w
00005868 6700 FFB6                  		beq.w	End_AllEmlds
0000586C 4278 FE02                  		clr.w	($FFFFFE02).w
00005870 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005876 4BF9 00C0 0004             		lea	($C00004).l,a5
0000587C 4DF9 00C0 0000             		lea	($C00000).l,a6
00005882 47F8 F700                  		lea	($FFFFF700).w,a3
00005886 49F8 A400                  		lea	($FFFFA400).w,a4
0000588A 343C 4000                  		move.w	#$4000,d2
0000588E 6100 0000                  		bsr.w	LoadTilesFromStart2
00005892 7013                       		moveq	#$13,d0
00005894 6100 CA66                  		bsr.w	PalLoad1	; load ending pallet
00005898 6100 C836                  		bsr.w	Pal_MakeWhite
0000589C 6000 FF16                  		bra.w	End_MainLoop
000058A0                            
000058A0                            ; ---------------------------------------------------------------------------
000058A0                            ; Subroutine controlling Sonic on the ending sequence
000058A0                            ; ---------------------------------------------------------------------------
000058A0                            
000058A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058A0                            
000058A0                            
000058A0                            End_MoveSonic:				; XREF: End_MainLoop
000058A0 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000058A4 6600                       		bne.s	End_MoveSonic2
000058A6 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000058AC 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000058AE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058B2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000058B8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000058BE 4E75                       		rts	
000058C0                            ; ===========================================================================
000058C0                            
000058C0                            End_MoveSonic2:				; XREF: End_MoveSonic
000058C0 5500                       		subq.b	#2,d0
000058C2 6600                       		bne.s	End_MoveSonic3
000058C4 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000058CA 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000058CC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058D0 7000                       		moveq	#0,d0
000058D2 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000058D6 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000058DA 31C0 D014                  		move.w	d0,($FFFFD014).w
000058DE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000058E4 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000058EA 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000058F0 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000058F6 4E75                       		rts	
000058F8                            ; ===========================================================================
000058F8                            
000058F8                            End_MoveSonic3:				; XREF: End_MoveSonic
000058F8 5500                       		subq.b	#2,d0
000058FA 6600                       		bne.s	End_MoveSonExit
000058FC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005900 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005906 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000590C 4278 D024                  		clr.w	($FFFFD024).w
00005910                            
00005910                            End_MoveSonExit:
00005910 4E75                       		rts	
00005912                            ; End of function End_MoveSonic
00005912                            
00005912                            ; ===========================================================================
00005912                            ; ---------------------------------------------------------------------------
00005912                            ; Object 87 - Sonic on ending sequence
00005912                            ; ---------------------------------------------------------------------------
00005912                            
00005912                            Obj87:					; XREF: Obj_Index
00005912 7000                       		moveq	#0,d0
00005914 1028 0025                  		move.b	$25(a0),d0
00005918 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000591C 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005920 4EF9 0000 0000             		jmp	DisplaySprite
00005926                            ; ===========================================================================
00005926 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000592A 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000592E 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005932 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005936 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000593A                            ; ===========================================================================
0000593A                            
0000593A                            Obj87_Main:				; XREF: Obj87_Index
0000593A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005940 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005942 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005948 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000594E 4E75                       		rts	
00005950                            ; ===========================================================================
00005950                            
00005950                            Obj87_Main2:				; XREF: Obj87_Main
00005950 5428 0025                  		addq.b	#2,$25(a0)
00005954 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000595C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005962 117C 0004 0001             		move.b	#4,1(a0)
00005968 4228 0022                  		clr.b	$22(a0)
0000596C 117C 0002 0018             		move.b	#2,$18(a0)
00005972 117C 0000 001A             		move.b	#0,$1A(a0)
00005978 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000597E                            
0000597E                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000597E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005982 6600                       		bne.s	Obj87_Wait
00005984 5428 0025                  		addq.b	#2,$25(a0)
00005988 317C 0001 001C             		move.w	#1,$1C(a0)
0000598E 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005994                            
00005994                            Obj87_Wait:
00005994 4E75                       		rts	
00005996                            ; ===========================================================================
00005996                            
00005996                            Obj87_LookUp:				; XREF: Obj87_Index
00005996 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000599E 6600                       		bne.s	locret_5480
000059A0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000059A6 317C 005A 0030             		move.w	#$5A,$30(a0)
000059AC 5428 0025                  		addq.b	#2,$25(a0)
000059B0                            
000059B0                            locret_5480:
000059B0 4E75                       		rts	
000059B2                            ; ===========================================================================
000059B2                            
000059B2                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000059B2 5368 0030                  		subq.w	#1,$30(a0)
000059B6 6600                       		bne.s	Obj87_Wait2
000059B8 43F8 D400                  		lea	($FFFFD400).w,a1
000059BC 323C 00FF                  		move.w	#$FF,d1
000059C0                            
000059C0                            Obj87_ClrLoop:
000059C0 4299                       		clr.l	(a1)+
000059C2 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000059C6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000059CC 5428 0025                  		addq.b	#2,$25(a0)
000059D0 117C 0001 001C             		move.b	#1,$1C(a0)
000059D6 317C 003C 0030             		move.w	#$3C,$30(a0)
000059DC                            
000059DC                            Obj87_Wait2:
000059DC 4E75                       		rts	
000059DE                            ; ===========================================================================
000059DE                            
000059DE                            Obj87_MakeLogo:				; XREF: Obj87_Index
000059DE 5368 0030                  		subq.w	#1,$30(a0)
000059E2 6600                       		bne.s	Obj87_Wait3
000059E4 5428 0025                  		addq.b	#2,$25(a0)
000059E8 317C 00B4 0030             		move.w	#$B4,$30(a0)
000059EE 117C 0002 001C             		move.b	#2,$1C(a0)
000059F4 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059FA                            
000059FA                            Obj87_Wait3:
000059FA 4E75                       		rts	
000059FC                            ; ===========================================================================
000059FC                            
000059FC                            Obj87_Animate:				; XREF: Obj87_Index
000059FC 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005A02 4EF9 0000 0000             		jmp	AnimateSprite
00005A08                            ; ===========================================================================
00005A08                            
00005A08                            Obj87_Leap:				; XREF: Obj87_Index
00005A08 5368 0030                  		subq.w	#1,$30(a0)
00005A0C 6600                       		bne.s	Obj87_Wait4
00005A0E 5428 0025                  		addq.b	#2,$25(a0)
00005A12 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A1A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A20 117C 0004 0001             		move.b	#4,1(a0)
00005A26 4228 0022                  		clr.b	$22(a0)
00005A2A 117C 0002 0018             		move.b	#2,$18(a0)
00005A30 117C 0005 001A             		move.b	#5,$1A(a0)
00005A36 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005A3C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A42 60B8                       		bra.s	Obj87_Animate
00005A44                            ; ===========================================================================
00005A44                            
00005A44                            Obj87_Wait4:				; XREF: Obj87_Leap
00005A44 4E75                       		rts	
00005A46                            ; ===========================================================================
00005A46                            Ani_obj87:
00005A46                            	include "_anim\obj87.asm"
00005A46                            ; ---------------------------------------------------------------------------
00005A46                            ; Animation script - Sonic on the ending sequence
00005A46                            ; ---------------------------------------------------------------------------
00005A46 0000                       		dc.w byte_551C-Ani_obj87
00005A48 0000                       		dc.w byte_552A-Ani_obj87
00005A4A 0000                       		dc.w byte_5534-Ani_obj87
00005A4C 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A5A 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A64 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A6C                            		even
00005A6C                            		even
00005A6C                            
00005A6C                            ; ===========================================================================
00005A6C                            ; ---------------------------------------------------------------------------
00005A6C                            ; Object 88 - chaos emeralds on	the ending sequence
00005A6C                            ; ---------------------------------------------------------------------------
00005A6C                            
00005A6C                            Obj88:					; XREF: Obj_Index
00005A6C 7000                       		moveq	#0,d0
00005A6E 1028 0024                  		move.b	$24(a0),d0
00005A72 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A76 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A7A 4EF9 0000 0000             		jmp	DisplaySprite
00005A80                            ; ===========================================================================
00005A80 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A82 0000                       		dc.w Obj88_Move-Obj88_Index
00005A84                            ; ===========================================================================
00005A84                            
00005A84                            Obj88_Main:				; XREF: Obj88_Index
00005A84 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A8A 6700                       		beq.s	Obj88_Main2
00005A8C 588F                       		addq.l	#4,sp
00005A8E 4E75                       		rts	
00005A90                            ; ===========================================================================
00005A90                            
00005A90                            Obj88_Main2:				; XREF: Obj88_Main
00005A90 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A96 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A9C 2248                       		movea.l	a0,a1
00005A9E 7600                       		moveq	#0,d3
00005AA0 7401                       		moveq	#1,d2
00005AA2 7205                       		moveq	#5,d1
00005AA4                            
00005AA4                            Obj88_MainLoop:
00005AA4 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005AA8 5429 0024                  		addq.b	#2,$24(a1)
00005AAC 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005AB4 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005ABA 137C 0004 0001             		move.b	#4,1(a1)
00005AC0 137C 0001 0018             		move.b	#1,$18(a1)
00005AC6 3368 0008 0038             		move.w	8(a0),$38(a1)
00005ACC 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005AD2 1342 001C                  		move.b	d2,$1C(a1)
00005AD6 1342 001A                  		move.b	d2,$1A(a1)
00005ADA 5202                       		addq.b	#1,d2
00005ADC 1343 0026                  		move.b	d3,$26(a1)
00005AE0 0603 002A                  		addi.b	#$2A,d3
00005AE4 43E9 0040                  		lea	$40(a1),a1
00005AE8 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005AEC                            
00005AEC                            Obj88_Move:				; XREF: Obj88_Index
00005AEC 3028 003E                  		move.w	$3E(a0),d0
00005AF0 D168 0026                  		add.w	d0,$26(a0)
00005AF4 1028 0026                  		move.b	$26(a0),d0
00005AF8 4EB9 0000 2D02             		jsr	(CalcSine).l
00005AFE 7800                       		moveq	#0,d4
00005B00 1828 003C                  		move.b	$3C(a0),d4
00005B04 C3C4                       		muls.w	d4,d1
00005B06 E081                       		asr.l	#8,d1
00005B08 C1C4                       		muls.w	d4,d0
00005B0A E080                       		asr.l	#8,d0
00005B0C D268 0038                  		add.w	$38(a0),d1
00005B10 D068 003A                  		add.w	$3A(a0),d0
00005B14 3141 0008                  		move.w	d1,8(a0)
00005B18 3140 000C                  		move.w	d0,$C(a0)
00005B1C 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005B22 6700                       		beq.s	loc_55FA
00005B24 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005B2A                            
00005B2A                            loc_55FA:
00005B2A 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005B30 6700                       		beq.s	loc_5608
00005B32 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005B38                            
00005B38                            loc_5608:
00005B38 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005B3E 6700                       		beq.s	locret_5614
00005B40 5368 003A                  		subq.w	#1,$3A(a0)
00005B44                            
00005B44                            locret_5614:
00005B44 4E75                       		rts	
00005B46                            ; ===========================================================================
00005B46                            ; ---------------------------------------------------------------------------
00005B46                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005B46                            ; ---------------------------------------------------------------------------
00005B46                            
00005B46                            Obj89:					; XREF: Obj_Index
00005B46 7000                       		moveq	#0,d0
00005B48 1028 0024                  		move.b	$24(a0),d0
00005B4C 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005B50 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B54                            ; ===========================================================================
00005B54 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B56 0000                       		dc.w Obj89_Move-Obj89_Index
00005B58 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B5A                            ; ===========================================================================
00005B5A                            
00005B5A                            Obj89_Main:				; XREF: Obj89_Index
00005B5A 5428 0024                  		addq.b	#2,$24(a0)
00005B5E 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B64 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B6A 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B72 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B78 117C 0000 0001             		move.b	#0,1(a0)
00005B7E 117C 0000 0018             		move.b	#0,$18(a0)
00005B84                            
00005B84                            Obj89_Move:				; XREF: Obj89_Index
00005B84 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B8A 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B8C 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B92 4EB9 0000 0000             		jsr	DisplaySprite
00005B98                            ; ===========================================================================
00005B98                            
00005B98                            Obj89_Delay:				; XREF: Obj89_Move
00005B98 5428 0024                  		addq.b	#2,$24(a0)
00005B9C 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005BA2                            
00005BA2                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005BA2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005BA6 6A00                       		bpl.s	Obj89_Display
00005BA8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005BAE                            
00005BAE                            Obj89_Display:
00005BAE 4EB9 0000 0000             		jsr	DisplaySprite
00005BB4                            ; ===========================================================================
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            ; Sprite mappings - Sonic on the ending	sequence
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            Map_obj87:
00005BB4                            	include "_maps\obj87.asm"
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            ; Sprite mappings - Sonic on the ending	sequence
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005BB8 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005BBC 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005BC0 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005BC4 02                         byte_5690:	dc.b 2
00005BC5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005BCA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BCF 03                         byte_569B:	dc.b 3
00005BD0 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005BD5 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005BDA 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BDF 02                         byte_56AB:	dc.b 2
00005BE0 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005BE5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005BEA 02                         byte_56B6:	dc.b 2
00005BEB EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005BF0 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005BF5 02                         byte_56C1:	dc.b 2
00005BF6 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BFB FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005C00 03                         byte_56CC:	dc.b 3
00005C01 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005C06 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005C0B 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005C10 07                         byte_56DC:	dc.b 7
00005C11 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005C16 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005C1B BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005C20 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005C25 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005C2A E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005C2F EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005C34 18                         byte_5700:	dc.b $18
00005C35 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005C3A 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005C3F 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005C44 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005C49 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005C4E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005C53 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C58 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C5D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C62 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C67 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C6C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C71 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C76 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C7B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C80 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C85 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C8A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C8F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C94 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C99 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C9E E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005CA3 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005CA8 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005CAE 00                         		even
00005CAE 00                         		even
00005CAE                            
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            ; Sprite mappings - chaos emeralds on the ending sequence
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            Map_obj88:
00005CAE                            	include "_maps\obj88.asm"
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE                            ; Sprite mappings - chaos emeralds on the ending sequence
00005CAE                            ; ---------------------------------------------------------------------------
00005CAE 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005CB2 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005CB6 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005CBA 0000                       		dc.w byte_57AC-Map_obj88
00005CBC 01                         byte_5788:	dc.b 1
00005CBD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005CC2 01                         byte_578E:	dc.b 1
00005CC3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005CC8 01                         byte_5794:	dc.b 1
00005CC9 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005CCE 01                         byte_579A:	dc.b 1
00005CCF F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005CD4 01                         byte_57A0:	dc.b 1
00005CD5 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005CDA 01                         byte_57A6:	dc.b 1
00005CDB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005CE0 01                         byte_57AC:	dc.b 1
00005CE1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005CE6                            		even
00005CE6                            		even
00005CE6                            
00005CE6                            ; ---------------------------------------------------------------------------
00005CE6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CE6                            ; ---------------------------------------------------------------------------
00005CE6                            Map_obj89:
00005CE6                            	include "_maps\obj89.asm"
00005CE6                            ; ---------------------------------------------------------------------------
00005CE6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CE6                            ; ---------------------------------------------------------------------------
00005CE6 0000                       		dc.w byte_57B4-Map_obj89
00005CE8 03                         byte_57B4:	dc.b 3
00005CE9 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005CEE F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005CF3 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CF8                            		even
00005CF8                            		even
00005CF8                            
00005CF8                            ; ===========================================================================
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            ; Credits ending sequence
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            
00005CF8                            Credits:				; XREF: GameModeArray
00005CF8 6100 BB1A                  		bsr.w	ClearPLC
00005CFC 6100 C354                  		bsr.w	Pal_FadeFrom
00005D00 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D06 3CBC 8004                  		move.w	#$8004,(a6)
00005D0A 3CBC 8230                  		move.w	#$8230,(a6)
00005D0E 3CBC 8407                  		move.w	#$8407,(a6)
00005D12 3CBC 9001                  		move.w	#$9001,(a6)
00005D16 3CBC 9200                  		move.w	#$9200,(a6)
00005D1A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D1E 3CBC 8720                  		move.w	#$8720,(a6)
00005D22 4238 F64E                  		clr.b	($FFFFF64E).w
00005D26 6100 B7D2                  		bsr.w	ClearScreen
00005D2A 43F8 D000                  		lea	($FFFFD000).w,a1
00005D2E 7000                       		moveq	#0,d0
00005D30 323C 07FF                  		move.w	#$7FF,d1
00005D34                            
00005D34                            Cred_ClrObjRam:
00005D34 22C0                       		move.l	d0,(a1)+
00005D36 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005D3A                            
00005D3A 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005D44 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005D4A 6100 B92A                  		bsr.w	NemDec
00005D4E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D52 7000                       		moveq	#0,d0
00005D54 323C 001F                  		move.w	#$1F,d1
00005D58                            
00005D58                            Cred_ClrPallet:
00005D58 22C0                       		move.l	d0,(a1)+
00005D5A 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D5E                            
00005D5E 7003                       		moveq	#3,d0
00005D60 6100 C59A                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D64 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D6A 4EB9 0000 0000             		jsr	ObjectsLoad
00005D70 4EB9 0000 0000             		jsr	BuildSprites
00005D76 6100 0000                  		bsr.w	EndingDemoLoad
00005D7A 7000                       		moveq	#0,d0
00005D7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D80 E948                       		lsl.w	#4,d0
00005D82 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D88 45F2 0000                  		lea	(a2,d0.w),a2
00005D8C 7000                       		moveq	#0,d0
00005D8E 1012                       		move.b	(a2),d0
00005D90 6700                       		beq.s	loc_5862
00005D92 6100 BA22                  		bsr.w	LoadPLC		; load level patterns
00005D96                            
00005D96                            loc_5862:
00005D96 7001                       		moveq	#1,d0
00005D98 6100 BA1C                  		bsr.w	LoadPLC		; load standard	level patterns
00005D9C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005DA2 6100 C204                  		bsr.w	Pal_FadeTo
00005DA6                            
00005DA6                            Cred_WaitLoop:
00005DA6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005DAC 6100 CF22                  		bsr.w	DelayProgram
00005DB0 6100 BA70                  		bsr.w	RunPLC_RAM
00005DB4 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005DB8 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005DBA 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005DBE 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005DC0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005DC6 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005DCA 4E75                       		rts	
00005DCC                            
00005DCC                            ; ---------------------------------------------------------------------------
00005DCC                            ; Ending sequence demo loading subroutine
00005DCC                            ; ---------------------------------------------------------------------------
00005DCC                            
00005DCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DCC                            
00005DCC                            
00005DCC                            EndingDemoLoad:				; XREF: Credits
00005DCC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005DD0 0240 000F                  		andi.w	#$F,d0
00005DD4 D040                       		add.w	d0,d0
00005DD6 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005DDA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005DDE 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005DE2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005DE8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005DEA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005DF0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005DF6 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DFC 7000                       		moveq	#0,d0
00005DFE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005E02 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005E06 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005E0A 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005E0E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005E14 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005E16 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005E1C 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005E20 303C 0008                  		move.w	#8,d0
00005E24                            
00005E24                            EndDemo_LampLoad:
00005E24 24D9                       		move.l	(a1)+,(a2)+
00005E26 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005E2A                            
00005E2A                            EndDemo_Exit:
00005E2A 4E75                       		rts	
00005E2C                            ; End of function EndingDemoLoad
00005E2C                            
00005E2C                            ; ===========================================================================
00005E2C                            ; ---------------------------------------------------------------------------
00005E2C                            ; Levels used in the end sequence demos
00005E2C                            ; ---------------------------------------------------------------------------
00005E2C                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005E3C                            
00005E3C                            ; ---------------------------------------------------------------------------
00005E3C                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005E3C                            ; ---------------------------------------------------------------------------
00005E3C                            EndDemo_LampVar:
00005E3C 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005E3E 0A00 062C 000D             		dc.w $A00, $62C, $D
00005E44 0000 0000                  		dc.l 0
00005E48 0000                       		dc.b 0,	0
00005E4A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E5E 0101                       		dc.b 1,	1
00005E60                            ; ===========================================================================
00005E60                            ; ---------------------------------------------------------------------------
00005E60                            ; "TRY AGAIN" and "END"	screens
00005E60                            ; ---------------------------------------------------------------------------
00005E60                            
00005E60                            TryAgainEnd:				; XREF: Credits
00005E60 6100 B9B2                  		bsr.w	ClearPLC
00005E64 6100 C1EC                  		bsr.w	Pal_FadeFrom
00005E68 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E6E 3CBC 8004                  		move.w	#$8004,(a6)
00005E72 3CBC 8230                  		move.w	#$8230,(a6)
00005E76 3CBC 8407                  		move.w	#$8407,(a6)
00005E7A 3CBC 9001                  		move.w	#$9001,(a6)
00005E7E 3CBC 9200                  		move.w	#$9200,(a6)
00005E82 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E86 3CBC 8720                  		move.w	#$8720,(a6)
00005E8A 4238 F64E                  		clr.b	($FFFFF64E).w
00005E8E 6100 B66A                  		bsr.w	ClearScreen
00005E92 43F8 D000                  		lea	($FFFFD000).w,a1
00005E96 7000                       		moveq	#0,d0
00005E98 323C 07FF                  		move.w	#$7FF,d1
00005E9C                            
00005E9C                            TryAg_ClrObjRam:
00005E9C 22C0                       		move.l	d0,(a1)+
00005E9E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005EA2                            
00005EA2 701D                       		moveq	#$1D,d0
00005EA4 6100 BA7C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005EA8 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005EAC 7000                       		moveq	#0,d0
00005EAE 323C 001F                  		move.w	#$1F,d1
00005EB2                            
00005EB2                            TryAg_ClrPallet:
00005EB2 22C0                       		move.l	d0,(a1)+
00005EB4 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005EB8                            
00005EB8 7013                       		moveq	#$13,d0
00005EBA 6100 C440                  		bsr.w	PalLoad1	; load ending pallet
00005EBE 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005EC2 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005EC8 4EB9 0000 0000             		jsr	ObjectsLoad
00005ECE 4EB9 0000 0000             		jsr	BuildSprites
00005ED4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005EDA 6100 C0CC                  		bsr.w	Pal_FadeTo
00005EDE                            
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            ; "TRY AGAIN" and "END"	screen main loop
00005EDE                            ; ---------------------------------------------------------------------------
00005EDE                            TryAg_MainLoop:
00005EDE 6100 B6FE                  		bsr.w	PauseGame
00005EE2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EE8 6100 CDE6                  		bsr.w	DelayProgram
00005EEC 4EB9 0000 0000             		jsr	ObjectsLoad
00005EF2 4EB9 0000 0000             		jsr	BuildSprites
00005EF8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EFE 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005F00 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005F04 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005F06 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005F0C 67D0                       		beq.s	TryAg_MainLoop
00005F0E                            
00005F0E                            TryAg_Exit:
00005F0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005F14 4E75                       		rts	
00005F16                            
00005F16                            ; ===========================================================================
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            
00005F16                            Obj8B:					; XREF: Obj_Index
00005F16 7000                       		moveq	#0,d0
00005F18 1028 0024                  		move.b	$24(a0),d0
00005F1C 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005F20 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005F24 4EF9 0000 0000             		jmp	DisplaySprite
00005F2A                            ; ===========================================================================
00005F2A 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005F2C 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005F2E 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005F30 0000                       		dc.w loc_5A8E-Obj8B_Index
00005F32                            ; ===========================================================================
00005F32                            
00005F32                            Obj8B_Main:				; XREF: Obj8B_Index
00005F32 5428 0024                  		addq.b	#2,$24(a0)
00005F36 317C 0120 0008             		move.w	#$120,8(a0)
00005F3C 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005F42 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005F4A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F50 117C 0000 0001             		move.b	#0,1(a0)
00005F56 117C 0002 0018             		move.b	#2,$18(a0)
00005F5C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F62 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F68 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F6A 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F70 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F76 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F7C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F82                            
00005F82                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F82 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F88 4EF9 0000 0000             		jmp	AnimateSprite
00005F8E                            ; ===========================================================================
00005F8E                            
00005F8E                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F8E 5428 0024                  		addq.b	#2,$24(a0)
00005F92 7002                       		moveq	#2,d0
00005F94 0828 0000 001C             		btst	#0,$1C(a0)
00005F9A 6700                       		beq.s	loc_5A6A
00005F9C 4440                       		neg.w	d0
00005F9E                            
00005F9E                            loc_5A6A:
00005F9E 43F8 D800                  		lea	($FFFFD800).w,a1
00005FA2 7205                       		moveq	#5,d1
00005FA4                            
00005FA4                            loc_5A70:
00005FA4 1340 003E                  		move.b	d0,$3E(a1)
00005FA8 3400                       		move.w	d0,d2
00005FAA E742                       		asl.w	#3,d2
00005FAC D529 0026                  		add.b	d2,$26(a1)
00005FB0 43E9 0040                  		lea	$40(a1),a1
00005FB4 51C9 FFEE                  		dbf	d1,loc_5A70
00005FB8 5228 001A                  		addq.b	#1,$1A(a0)
00005FBC 317C 0070 0030             		move.w	#112,$30(a0)
00005FC2                            
00005FC2                            loc_5A8E:				; XREF: Obj8B_Index
00005FC2 5368 0030                  		subq.w	#1,$30(a0)
00005FC6 6A00                       		bpl.s	locret_5AA0
00005FC8 0868 0000 001C             		bchg	#0,$1C(a0)
00005FCE 117C 0002 0024             		move.b	#2,$24(a0)
00005FD4                            
00005FD4                            locret_5AA0:
00005FD4 4E75                       		rts	
00005FD6                            ; ===========================================================================
00005FD6                            Ani_obj8B:
00005FD6                            	include "_anim\obj8B.asm"
00005FD6                            ; ---------------------------------------------------------------------------
00005FD6                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005FD6                            ; ---------------------------------------------------------------------------
00005FD6 0000                       		dc.w byte_5AA8-Ani_obj8B
00005FD8 0000                       		dc.w byte_5AAC-Ani_obj8B
00005FDA 0000                       		dc.w byte_5AB0-Ani_obj8B
00005FDC 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005FE0 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005FE4 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005FF6                            		even
00005FF6                            		even
00005FF6                            
00005FF6                            ; ===========================================================================
00005FF6                            ; ---------------------------------------------------------------------------
00005FF6                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005FF6                            ; ---------------------------------------------------------------------------
00005FF6                            
00005FF6                            Obj8C:					; XREF: Obj_Index
00005FF6 7000                       		moveq	#0,d0
00005FF8 1028 0024                  		move.b	$24(a0),d0
00005FFC 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006000 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006004 4EF9 0000 0000             		jmp	DisplaySprite
0000600A                            ; ===========================================================================
0000600A 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000600C 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000600E                            ; ===========================================================================
0000600E                            
0000600E                            Obj8C_Main:				; XREF: Obj8C_Index
0000600E 2248                       		movea.l	a0,a1
00006010 7400                       		moveq	#0,d2
00006012 7600                       		moveq	#0,d3
00006014 7205                       		moveq	#5,d1
00006016 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000601A                            
0000601A                            Obj8C_MakeEms:				; XREF: loc_5B42
0000601A 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000601E 5429 0024                  		addq.b	#2,$24(a1)
00006022 237C 0000 5CAE 0004        		move.l	#Map_obj88,4(a1)
0000602A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006030 137C 0000 0001             		move.b	#0,1(a1)
00006036 137C 0001 0018             		move.b	#1,$18(a1)
0000603C 337C 0104 0008             		move.w	#$104,8(a1)
00006042 337C 0120 0038             		move.w	#$120,$38(a1)
00006048 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000604E 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006054 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000605A 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000605E                            
0000605E                            Obj8C_ChkEms:
0000605E 7000                       		moveq	#0,d0
00006060 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006064 5340                       		subq.w	#1,d0
00006066 6500                       		bcs.s	loc_5B42
00006068                            
00006068                            Obj8C_ChkEmLoop:
00006068 B433 0000                  		cmp.b	(a3,d0.w),d2
0000606C 6600                       		bne.s	loc_5B3E
0000606E 5202                       		addq.b	#1,d2
00006070 60EC                       		bra.s	Obj8C_ChkEms
00006072                            ; ===========================================================================
00006072                            
00006072                            loc_5B3E:
00006072 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006076                            
00006076                            loc_5B42:
00006076 1342 001A                  		move.b	d2,$1A(a1)
0000607A 5229 001A                  		addq.b	#1,$1A(a1)
0000607E 5202                       		addq.b	#1,d2
00006080 137C 0080 0026             		move.b	#$80,$26(a1)
00006086 1343 001E                  		move.b	d3,$1E(a1)
0000608A 1343 001F                  		move.b	d3,$1F(a1)
0000608E 0643 000A                  		addi.w	#$A,d3
00006092 43E9 0040                  		lea	$40(a1),a1
00006096 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
0000609A                            
0000609A                            Obj8C_Move:				; XREF: Obj8C_Index
0000609A 4A68 003E                  		tst.w	$3E(a0)
0000609E 6700                       		beq.s	locret_5BBA
000060A0 4A28 001E                  		tst.b	$1E(a0)
000060A4 6700                       		beq.s	loc_5B78
000060A6 5328 001E                  		subq.b	#1,$1E(a0)
000060AA 6600                       		bne.s	loc_5B80
000060AC                            
000060AC                            loc_5B78:
000060AC 3028 003E                  		move.w	$3E(a0),d0
000060B0 D168 0026                  		add.w	d0,$26(a0)
000060B4                            
000060B4                            loc_5B80:
000060B4 1028 0026                  		move.b	$26(a0),d0
000060B8 6700                       		beq.s	loc_5B8C
000060BA 0C00 0080                  		cmpi.b	#$80,d0
000060BE 6600                       		bne.s	loc_5B96
000060C0                            
000060C0                            loc_5B8C:
000060C0 4268 003E                  		clr.w	$3E(a0)
000060C4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000060CA                            
000060CA                            loc_5B96:
000060CA 4EB9 0000 2D02             		jsr	(CalcSine).l
000060D0 7800                       		moveq	#0,d4
000060D2 1828 003C                  		move.b	$3C(a0),d4
000060D6 C3C4                       		muls.w	d4,d1
000060D8 E081                       		asr.l	#8,d1
000060DA C1C4                       		muls.w	d4,d0
000060DC E080                       		asr.l	#8,d0
000060DE D268 0038                  		add.w	$38(a0),d1
000060E2 D068 003A                  		add.w	$3A(a0),d0
000060E6 3141 0008                  		move.w	d1,8(a0)
000060EA 3140 000A                  		move.w	d0,$A(a0)
000060EE                            
000060EE                            locret_5BBA:
000060EE 4E75                       		rts	
000060F0                            ; ===========================================================================
000060F0                            ; ---------------------------------------------------------------------------
000060F0                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000060F0                            ; ---------------------------------------------------------------------------
000060F0                            Map_obj8B:
000060F0                            	include "_maps\obj8B.asm"
000060F0                            ; ---------------------------------------------------------------------------
000060F0                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000060F0                            ; ---------------------------------------------------------------------------
000060F0 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000060F4 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060F8 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060FC 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006100 08                         byte_5BCC:	dc.b 8
00006101 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006106 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000610B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006110 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006115 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000611A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000611F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006124 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006129 08                         byte_5BF5:	dc.b 8
0000612A E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000612F F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006134 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006139 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000613E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006143 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006148 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000614D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006152 08                         byte_5C1E:	dc.b 8
00006153 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006158 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000615D E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006162 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006167 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000616C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006171 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006176 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000617B 08                         byte_5C47:	dc.b 8
0000617C E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006181 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006186 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000618B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006190 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006195 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000619A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000619F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000061A4 0C                         byte_5C70:	dc.b $C
000061A5 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000061AA F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000061AF 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000061B4 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000061B9 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000061BE F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000061C3 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000061C8 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000061CD 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000061D2 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000061D7 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061DC 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061E1 0A                         byte_5CAD:	dc.b $A
000061E2 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000061E7 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000061EC F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000061F1 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000061F6 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061FB F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006200 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006205 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000620A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
0000620F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006214 0A                         byte_5CE0:	dc.b $A
00006215 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000621A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
0000621F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006224 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006229 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
0000622E EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006233 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006238 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000623D 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006242 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006247 0C                         byte_5D13:	dc.b $C
00006248 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000624D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006252 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006257 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000625C F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006261 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006266 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000626B 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006270 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006275 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000627A 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000627F 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006284                            		even
00006284                            		even
00006284                            
00006284                            ; ---------------------------------------------------------------------------
00006284                            ; Ending sequence demos
00006284                            ; ---------------------------------------------------------------------------
00006284                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000062B2                            		even
000062B2                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000062F2                            		even
000062F2                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006322                            		even
00006322                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006352                            		even
00006352                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006372                            		even
00006372                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006392                            		even
00006392                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000063C2                            		even
000063C2                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000063F2                            		even
000063F2                            
000063F2                            ; ---------------------------------------------------------------------------
000063F2                            ; Subroutine to	load level boundaries and start	locations
000063F2                            ; ---------------------------------------------------------------------------
000063F2                            
000063F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063F2                            
000063F2                            
000063F2                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000063F2 7000                       		moveq	#0,d0
000063F4 11C0 F740                  		move.b	d0,($FFFFF740).w
000063F8 11C0 F741                  		move.b	d0,($FFFFF741).w
000063FC 11C0 F746                  		move.b	d0,($FFFFF746).w
00006400 11C0 F748                  		move.b	d0,($FFFFF748).w
00006404 11C0 F742                  		move.b	d0,($FFFFF742).w
00006408 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000640C ED08                       		lsl.b	#6,d0
0000640E E848                       		lsr.w	#4,d0
00006410 3200                       		move.w	d0,d1
00006412 D040                       		add.w	d0,d0
00006414 D041                       		add.w	d1,d0
00006416 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000641A 3018                       		move.w	(a0)+,d0
0000641C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006420 2018                       		move.l	(a0)+,d0
00006422 21C0 F728                  		move.l	d0,($FFFFF728).w
00006426 21C0 F720                  		move.l	d0,($FFFFF720).w
0000642A 2018                       		move.l	(a0)+,d0
0000642C 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006430 21C0 F724                  		move.l	d0,($FFFFF724).w
00006434 3038 F728                  		move.w	($FFFFF728).w,d0
00006438 0640 0240                  		addi.w	#$240,d0
0000643C 31C0 F732                  		move.w	d0,($FFFFF732).w
00006440 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006446 3018                       		move.w	(a0)+,d0
00006448 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000644C 6000 0000                  		bra.w	LevSz_ChkLamp
00006450                            ; ===========================================================================
00006450                            ; ---------------------------------------------------------------------------
00006450                            ; Level size array and ending start location array
00006450                            ; ---------------------------------------------------------------------------
00006450                            LevelSizeArray:        ; GHZ
00006450 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
0000645C 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006468 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006474 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006480                                    ; LZ
00006480 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
0000648C 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006498 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000064A4 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000064B0                                    ; MZ
000064B0 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000064BC 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000064C8 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000064D4 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000064E0                                    ; SLZ
000064E0 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000064EC 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064F8 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006504 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006510                                    ; SYZ
00006510 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
0000651C 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006528 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006534 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006540                                    ; SBZ
00006540 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
0000654C 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006558 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006564 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006570                                    ; Ending
00006570 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
0000657C 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006588 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006594 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000065A0                                    even
000065A0                            EndingStLocArray:
000065A0                            		incbin	misc\sloc_end.bin
000065C0                            		even
000065C0                            
000065C0                            ; ===========================================================================
000065C0                            
000065C0                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000065C0 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000065C4 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000065C6 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000065CC 3238 D008                  		move.w	($FFFFD008).w,d1
000065D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000065D4 6000                       		bra.s	loc_60D0
000065D6                            ; ===========================================================================
000065D6                            
000065D6                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000065D6 3038 FE10                  		move.w	($FFFFFE10).w,d0
000065DA ED08                       		lsl.b	#6,d0
000065DC E848                       		lsr.w	#4,d0
000065DE 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000065E2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000065E6 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000065E8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065EC 5340                       		subq.w	#1,d0
000065EE E548                       		lsl.w	#2,d0
000065F0 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000065F4                            
000065F4                            LevSz_SonicPos:
000065F4 7200                       		moveq	#0,d1
000065F6 3219                       		move.w	(a1)+,d1
000065F8 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065FC 7000                       		moveq	#0,d0
000065FE 3011                       		move.w	(a1),d0
00006600 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006604                            
00006604                            loc_60D0:				; XREF: LevSz_ChkLamp
00006604 0441 00A0                  		subi.w	#$A0,d1
00006608 6400                       		bcc.s	loc_60D8
0000660A 7200                       		moveq	#0,d1
0000660C                            
0000660C                            loc_60D8:
0000660C 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006610 B242                       		cmp.w	d2,d1
00006612 6500                       		bcs.s	loc_60E2
00006614 3202                       		move.w	d2,d1
00006616                            
00006616                            loc_60E2:
00006616 31C1 F700                  		move.w	d1,($FFFFF700).w
0000661A 0440 0060                  		subi.w	#$60,d0
0000661E 6400                       		bcc.s	loc_60EE
00006620 7000                       		moveq	#0,d0
00006622                            
00006622                            loc_60EE:
00006622 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006626 6D00                       		blt.s	loc_60F8
00006628 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000662C                            
0000662C                            loc_60F8:
0000662C 31C0 F704                  		move.w	d0,($FFFFF704).w
00006630 6100 0000                  		bsr.w	BgScrollSpeed
00006634 7000                       		moveq	#0,d0
00006636 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000663A E508                       		lsl.b	#2,d0
0000663C 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006642 6000 0000                  		bra.w	LevSz_Unk
00006646                            ; ===========================================================================
00006646                            ; ---------------------------------------------------------------------------
00006646                            ; Sonic	start location array
00006646                            ; ---------------------------------------------------------------------------
00006646                            StartLocArray:	incbin	misc\sloc_lev.bin
000066B6                            		even
000066B6                            
000066B6                            ; ---------------------------------------------------------------------------
000066B6                            ; Which	256x256	tiles contain loops or roll-tunnels
000066B6                            ; ---------------------------------------------------------------------------
000066B6                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000066B6                            ; loop,	loop, tunnel, tunnel
000066B6                            ; ---------------------------------------------------------------------------
000066B6                            LoopTileNums:	incbin	misc\loopnums.bin
000066D2                            		even
000066D2                            
000066D2                            ; ===========================================================================
000066D2                            
000066D2                            LevSz_Unk:				; XREF: LevelSizeLoad
000066D2 7000                       		moveq	#0,d0
000066D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000066D8 E748                       		lsl.w	#3,d0
000066DA 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000066DE 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000066E2 24D9                       		move.l	(a1)+,(a2)+
000066E4 24D9                       		move.l	(a1)+,(a2)+
000066E6 4E75                       		rts	
000066E8                            ; End of function LevelSizeLoad
000066E8                            
000066E8                            ; ===========================================================================
000066E8 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000066F0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F8 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006700 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006708 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006710 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006718 0070 0100 0100 0100        		dc.l $700100, $1000100
00006720                            
00006720                            ; ---------------------------------------------------------------------------
00006720                            ; Subroutine to	set scroll speed of some backgrounds
00006720                            ; ---------------------------------------------------------------------------
00006720                            
00006720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006720                            
00006720                            
00006720                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006720 4A38 FE30                  		tst.b	($FFFFFE30).w
00006724 6600                       		bne.s	loc_6206
00006726 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000672A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000672E 31C1 F708                  		move.w	d1,($FFFFF708).w
00006732 31C1 F710                  		move.w	d1,($FFFFF710).w
00006736 31C1 F718                  		move.w	d1,($FFFFF718).w
0000673A                            
0000673A                            loc_6206:
0000673A 7400                       		moveq	#0,d2
0000673C 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006740 D442                       		add.w	d2,d2
00006742 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006746 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000674A                            ; End of function BgScrollSpeed
0000674A                            
0000674A                            ; ===========================================================================
0000674A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000674E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006752 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006756 0000                       		dc.w BgScroll_End-BgScroll_Index
00006758                            ; ===========================================================================
00006758                            
00006758                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006758 6000 0000                  		bra.w	Deform_GHZ
0000675C                            ; ===========================================================================
0000675C                            
0000675C                            BgScroll_LZ:				; XREF: BgScroll_Index
0000675C E280                       		asr.l	#1,d0
0000675E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006762 4E75                       		rts	
00006764                            ; ===========================================================================
00006764                            
00006764                            BgScroll_MZ:				; XREF: BgScroll_Index
00006764 4E75                       		rts	
00006766                            ; ===========================================================================
00006766                            
00006766                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006766 E280                       		asr.l	#1,d0
00006768 0640 00C0                  		addi.w	#$C0,d0
0000676C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006770 4E75                       		rts	
00006772                            ; ===========================================================================
00006772                            
00006772                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006772 E980                       		asl.l	#4,d0
00006774 2400                       		move.l	d0,d2
00006776 E380                       		asl.l	#1,d0
00006778 D082                       		add.l	d2,d0
0000677A E080                       		asr.l	#8,d0
0000677C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006780 31C0 F714                  		move.w	d0,($FFFFF714).w
00006784 4E75                       		rts	
00006786                            ; ===========================================================================
00006786                            
00006786                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006786 E980                       		asl.l	#4,d0
00006788 E380                       		asl.l	#1,d0
0000678A E080                       		asr.l	#8,d0
0000678C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006790 4E75                       		rts	
00006792                            ; ===========================================================================
00006792                            
00006792                            BgScroll_End:				; XREF: BgScroll_Index
00006792 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006798 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000679E 4E75                       		rts	
000067A0                            ; ===========================================================================
000067A0 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000067A6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000067AC 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000067B2 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000067B8 4E75                       		rts
000067BA                            
000067BA                            ; ---------------------------------------------------------------------------
000067BA                            ; Background layer deformation subroutines
000067BA                            ; ---------------------------------------------------------------------------
000067BA                            
000067BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067BA                            
000067BA                            
000067BA                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000067BA 4A38 F744                  		tst.b	($FFFFF744).w
000067BE 6700                       		beq.s	loc_628E
000067C0 4E75                       		rts	
000067C2                            ; ===========================================================================
000067C2                            
000067C2                            loc_628E:
000067C2 4278 F754                  		clr.w	($FFFFF754).w
000067C6 4278 F756                  		clr.w	($FFFFF756).w
000067CA 4278 F758                  		clr.w	($FFFFF758).w
000067CE 4278 F75A                  		clr.w	($FFFFF75A).w
000067D2 6100 0000                  		bsr.w	ScrollHoriz
000067D6 6100 0000                  		bsr.w	ScrollVertical
000067DA 6100 0000                  		bsr.w	DynScrResizeLoad
000067DE 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000067E4 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000067EA 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000067F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067F6 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067FC 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006802 7000                       		moveq	#0,d0
00006804 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006808 D040                       		add.w	d0,d0
0000680A 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
0000680E 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006812                            ; End of function DeformBgLayer
00006812                            
00006812                            ; ===========================================================================
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Offset index for background layer deformation	code
00006812                            ; ---------------------------------------------------------------------------
00006812 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006816 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000681A 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
0000681E 0000                       		dc.w Deform_GHZ-Deform_Index
00006820                            ; ---------------------------------------------------------------------------
00006820                            ; Green	Hill Zone background layer deformation code
00006820                            ; ---------------------------------------------------------------------------
00006820                            
00006820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006820                            
00006820                            
00006820                            Deform_GHZ:				; XREF: Deform_Index
00006820 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006824 48C4                       		ext.l	d4
00006826 EB84                       		asl.l	#5,d4
00006828 2204                       		move.l	d4,d1
0000682A E384                       		asl.l	#1,d4
0000682C D881                       		add.l	d1,d4
0000682E 7A00                       		moveq	#0,d5
00006830 6100 0000                  		bsr.w	ScrollBlock1
00006834 6100 0000                  		bsr.w	ScrollBlock4
00006838 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000683C 3038 F704                  		move.w	($FFFFF704).w,d0
00006840 0240 07FF                  		andi.w	#$7FF,d0
00006844 EA48                       		lsr.w	#5,d0
00006846 4440                       		neg.w	d0
00006848 0640 0026                  		addi.w	#$26,d0
0000684C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006850 3800                       		move.w	d0,d4
00006852 6100 0000                  		bsr.w	ScrollBlock3
00006856 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000685C 323C 006F                  		move.w	#$6F,d1
00006860 9244                       		sub.w	d4,d1
00006862 3038 F700                  		move.w	($FFFFF700).w,d0
00006866 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000686C 6600                       		bne.s	loc_633C
0000686E 7000                       		moveq	#0,d0
00006870                            
00006870                            loc_633C:
00006870 4440                       		neg.w	d0
00006872 4840                       		swap	d0
00006874 3038 F708                  		move.w	($FFFFF708).w,d0
00006878 4440                       		neg.w	d0
0000687A                            
0000687A                            loc_6346:
0000687A 22C0                       		move.l	d0,(a1)+
0000687C 51C9 FFFC                  		dbf	d1,loc_6346
00006880 323C 0027                  		move.w	#$27,d1
00006884 3038 F710                  		move.w	($FFFFF710).w,d0
00006888 4440                       		neg.w	d0
0000688A                            
0000688A                            loc_6356:
0000688A 22C0                       		move.l	d0,(a1)+
0000688C 51C9 FFFC                  		dbf	d1,loc_6356
00006890 3038 F710                  		move.w	($FFFFF710).w,d0
00006894 0640 0000                  		addi.w	#0,d0
00006898 3438 F700                  		move.w	($FFFFF700).w,d2
0000689C 0642 FE00                  		addi.w	#-$200,d2
000068A0 9440                       		sub.w	d0,d2
000068A2 48C2                       		ext.l	d2
000068A4 E182                       		asl.l	#8,d2
000068A6 85FC 0068                  		divs.w	#$68,d2
000068AA 48C2                       		ext.l	d2
000068AC E182                       		asl.l	#8,d2
000068AE 7600                       		moveq	#0,d3
000068B0 3600                       		move.w	d0,d3
000068B2 323C 0047                  		move.w	#$47,d1
000068B6 D244                       		add.w	d4,d1
000068B8                            
000068B8                            loc_6384:
000068B8 3003                       		move.w	d3,d0
000068BA 4440                       		neg.w	d0
000068BC 22C0                       		move.l	d0,(a1)+
000068BE 4843                       		swap	d3
000068C0 D682                       		add.l	d2,d3
000068C2 4843                       		swap	d3
000068C4 51C9 FFF2                  		dbf	d1,loc_6384
000068C8 4E75                       		rts	
000068CA                            ; End of function Deform_GHZ
000068CA                            
000068CA                            ; ---------------------------------------------------------------------------
000068CA                            ; Labyrinth Zone background layer deformation code
000068CA                            ; ---------------------------------------------------------------------------
000068CA                            
000068CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068CA                            
000068CA                            
000068CA                            Deform_LZ:				; XREF: Deform_Index
000068CA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068CE 48C4                       		ext.l	d4
000068D0 EF84                       		asl.l	#7,d4
000068D2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068D6 48C5                       		ext.l	d5
000068D8 EF85                       		asl.l	#7,d5
000068DA 6100 0000                  		bsr.w	ScrollBlock1
000068DE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068E4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068E8 323C 00DF                  		move.w	#$DF,d1
000068EC 3038 F700                  		move.w	($FFFFF700).w,d0
000068F0 4440                       		neg.w	d0
000068F2 4840                       		swap	d0
000068F4 3038 F708                  		move.w	($FFFFF708).w,d0
000068F8 4440                       		neg.w	d0
000068FA                            
000068FA                            loc_63C6:
000068FA 22C0                       		move.l	d0,(a1)+
000068FC 51C9 FFFC                  		dbf	d1,loc_63C6
00006900 3038 F646                  		move.w	($FFFFF646).w,d0
00006904 9078 F704                  		sub.w	($FFFFF704).w,d0
00006908 4E75                       		rts	
0000690A                            ; End of function Deform_LZ
0000690A                            
0000690A                            ; ---------------------------------------------------------------------------
0000690A                            ; Marble Zone background layer deformation code
0000690A                            ; ---------------------------------------------------------------------------
0000690A                            
0000690A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000690A                            
0000690A                            
0000690A                            Deform_MZ:				; XREF: Deform_Index
0000690A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000690E 48C4                       		ext.l	d4
00006910 ED84                       		asl.l	#6,d4
00006912 2204                       		move.l	d4,d1
00006914 E384                       		asl.l	#1,d4
00006916 D881                       		add.l	d1,d4
00006918 7A00                       		moveq	#0,d5
0000691A 6100 0000                  		bsr.w	ScrollBlock1
0000691E 303C 0200                  		move.w	#$200,d0
00006922 3238 F704                  		move.w	($FFFFF704).w,d1
00006926 0441 01C8                  		subi.w	#$1C8,d1
0000692A 6500                       		bcs.s	loc_6402
0000692C 3401                       		move.w	d1,d2
0000692E D241                       		add.w	d1,d1
00006930 D242                       		add.w	d2,d1
00006932 E441                       		asr.w	#2,d1
00006934 D041                       		add.w	d1,d0
00006936                            
00006936                            loc_6402:
00006936 31C0 F714                  		move.w	d0,($FFFFF714).w
0000693A 6100 0000                  		bsr.w	ScrollBlock3
0000693E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006944 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006948 323C 00DF                  		move.w	#$DF,d1
0000694C 3038 F700                  		move.w	($FFFFF700).w,d0
00006950 4440                       		neg.w	d0
00006952 4840                       		swap	d0
00006954 3038 F708                  		move.w	($FFFFF708).w,d0
00006958 4440                       		neg.w	d0
0000695A                            
0000695A                            loc_6426:
0000695A 22C0                       		move.l	d0,(a1)+
0000695C 51C9 FFFC                  		dbf	d1,loc_6426
00006960 4E75                       		rts	
00006962                            ; End of function Deform_MZ
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Star Light Zone background layer deformation code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SLZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 EB84                       		asl.l	#5,d4
0000696A 2204                       		move.l	d4,d1
0000696C E384                       		asl.l	#1,d4
0000696E D881                       		add.l	d1,d4
00006970 7A00                       		moveq	#0,d5
00006972 6100 0000                  		bsr.w	ScrollBlock1
00006976 6100 0000                  		bsr.w	ScrollBlock3
0000697A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000697E                            	;	move.w	($FFFFF704).w,d0
0000697E                            	;	andi.w	#$7FF,d0
0000697E EA48                       		lsr.w	#5,d0
00006980 4440                       		neg.w	d0
00006982 0640 0026                  		addi.w	#$26,d0
00006986 31C0 F714                  		move.w	d0,($FFFFF714).w
0000698A 3800                       		move.w	d0,d4
0000698C                            	;	bsr.w	ScrollBlock3
0000698C 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006992 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006996                            
00006996 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000699A 4440                       		neg.w	d0			; negate (positive to negative)
0000699C 4840                       		swap	d0			; send to the left side of d0
0000699E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069A2 45F8 A800                  		lea	($FFFFA800).w,a2
000069A6 069A 0000 5000             		addi.l	#$5000,(a2)+
000069AC 069A 0000 C000             		addi.l	#$C000,(a2)+
000069B2 3038 A800                  		move.w	($FFFFA800).w,d0
000069B6 4440                       		neg.w	d0			; negate (positive to negative)
000069B8 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069BA 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069BE                            slz_DeformLoop_1:
000069BE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069C0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000069C4                            
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C8 4440                       		neg.w	d0			; negate (positive to negative)
000069CA 4840                       		swap	d0			; send to the left side of d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D0 45F8 A800                  		lea	($FFFFA800).w,a2
000069D4 069A 0000 5000             		addi.l	#$5000,(a2)+
000069DA 069A 0000 C000             		addi.l	#$C000,(a2)+
000069E0 3038 A800                  		move.w	($FFFFA800).w,d0
000069E4 4440                       		neg.w	d0			; negate (positive to negative)
000069E6 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069E8 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069EC                            slz_DeformLoop_2:
000069EC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069EE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000069F2                            
000069F2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069F6 4440                       		neg.w	d0			; negate (positive to negative)
000069F8 4840                       		swap	d0			; send to the left side of d0
000069FA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069FE 45F8 A800                  		lea	($FFFFA800).w,a2
00006A02 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A08 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A0E 3038 A800                  		move.w	($FFFFA800).w,d0
00006A12 4440                       		neg.w	d0			; negate (positive to negative)
00006A14 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A16 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A1A                            slz_DeformLoop_3:
00006A1A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A1C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006A20                            
00006A20 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A24 4440                       		neg.w	d0			; negate (positive to negative)
00006A26 4840                       		swap	d0			; send to the left side of d0
00006A28 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A2C 45F8 A800                  		lea	($FFFFA800).w,a2
00006A30 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A36 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A3C 3038 A800                  		move.w	($FFFFA800).w,d0
00006A40 4440                       		neg.w	d0			; negate (positive to negative)
00006A42 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A44 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A48                            slz_DeformLoop_4:
00006A48 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A4A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006A4E                            
00006A4E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A52 4440                       		neg.w	d0			; negate (positive to negative)
00006A54 4840                       		swap	d0			; send to the left side of d0
00006A56 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A5A 45F8 A800                  		lea	($FFFFA800).w,a2
00006A5E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A64 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A6A 3038 A800                  		move.w	($FFFFA800).w,d0
00006A6E 4440                       		neg.w	d0			; negate (positive to negative)
00006A70 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A72 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A76                            slz_DeformLoop_5:
00006A76 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A78 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A7C                            
00006A7C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A80 4440                       		neg.w	d0			; negate (positive to negative)
00006A82 4840                       		swap	d0			; send to the left side of d0
00006A84 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A88 4440                       		neg.w	d0			; negate (positive to negative)
00006A8A EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A8C 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A90                            slz_DeformLoop_6:
00006A90 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A92 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A96                            
00006A96 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A9A 4440                       		neg.w	d0			; negate (positive to negative)
00006A9C 4840                       		swap	d0			; send to the left side of d0
00006A9E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AA2 4440                       		neg.w	d0			; negate (positive to negative)
00006AA4 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006AA6 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAA                            slz_DeformLoop_7:
00006AAA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AAC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006AB0                            
00006AB0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AB4 4440                       		neg.w	d0			; negate (positive to negative)
00006AB6 4840                       		swap	d0			; send to the left side of d0
00006AB8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006ABC 4440                       		neg.w	d0			; negate (positive to negative)
00006ABE EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006AC0 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AC4                            slz_DeformLoop_8:
00006AC4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006ACA                            
00006ACA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006ACE 4440                       		neg.w	d0			; negate (positive to negative)
00006AD0 4840                       		swap	d0			; send to the left side of d0
00006AD2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD6 4440                       		neg.w	d0			; negate (positive to negative)
00006AD8 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006ADA 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006ADE                            slz_DeformLoop_9:
00006ADE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AE0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006AE4                            
00006AE4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AE8 4440                       		neg.w	d0			; negate (positive to negative)
00006AEA 4840                       		swap	d0			; send to the left side of d0
00006AEC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AF0 4440                       		neg.w	d0			; negate (positive to negative)
00006AF2 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006AF4 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AF8                            slz_DeformLoop_10:
00006AF8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AFA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AFE                            
00006AFE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B02 4440                       		neg.w	d0			; negate (positive to negative)
00006B04 4840                       		swap	d0			; send to the left side of d0
00006B06 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B0A 4440                       		neg.w	d0			; negate (positive to negative)
00006B0C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B0E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B12                            slz_DeformLoop_11:
00006B12 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B14 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006B18                            
00006B18 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B1C 4440                       		neg.w	d0			; negate (positive to negative)
00006B1E 4840                       		swap	d0			; send to the left side of d0
00006B20 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B24 4440                       		neg.w	d0			; negate (positive to negative)
00006B26 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B28 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B2C                            slz_DeformLoop_12:
00006B2C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B2E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006B32                            
00006B32 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B36 4440                       		neg.w	d0			; negate (positive to negative)
00006B38 4840                       		swap	d0			; send to the left side of d0
00006B3A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B3E 4440                       		neg.w	d0			; negate (positive to negative)
00006B40 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B42 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B46                            slz_DeformLoop_13:
00006B46 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B48 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006B4C 4E75                       		rts	
00006B4E                            ; End of function Deform_SLZ
00006B4E 4E75                       		rts	
00006B50                            ; End of function Deform_SLZ_2
00006B50                            
00006B50                            ; ---------------------------------------------------------------------------
00006B50                            ; Spring Yard Zone background layer deformation	code
00006B50                            ; ---------------------------------------------------------------------------
00006B50                            
00006B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B50                            
00006B50                            
00006B50                            Deform_SYZ:				; XREF: Deform_Index
00006B50 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B54 48C4                       		ext.l	d4
00006B56 ED84                       		asl.l	#6,d4
00006B58 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B5C 48C5                       		ext.l	d5
00006B5E E985                       		asl.l	#4,d5
00006B60 2205                       		move.l	d5,d1
00006B62 E385                       		asl.l	#1,d5
00006B64 DA81                       		add.l	d1,d5
00006B66 6100 0000                  		bsr.w	ScrollBlock1
00006B6A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B70 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B74 323C 00DF                  		move.w	#$DF,d1
00006B78 3038 F700                  		move.w	($FFFFF700).w,d0
00006B7C 4440                       		neg.w	d0
00006B7E 4840                       		swap	d0
00006B80 3038 F708                  		move.w	($FFFFF708).w,d0
00006B84 4440                       		neg.w	d0
00006B86                            
00006B86                            loc_653C:
00006B86 22C0                       		move.l	d0,(a1)+
00006B88 51C9 FFFC                  		dbf	d1,loc_653C
00006B8C 4E75                       		rts	
00006B8E                            ; End of function Deform_SYZ
00006B8E                            
00006B8E                            ; ---------------------------------------------------------------------------
00006B8E                            ; Scrap	Brain Zone background layer deformation	code
00006B8E                            ; ---------------------------------------------------------------------------
00006B8E                            
00006B8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B8E                            
00006B8E                            
00006B8E                            Deform_SBZ:				; XREF: Deform_Index
00006B8E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B92 48C4                       		ext.l	d4
00006B94 ED84                       		asl.l	#6,d4
00006B96 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B9A 48C5                       		ext.l	d5
00006B9C E985                       		asl.l	#4,d5
00006B9E E385                       		asl.l	#1,d5
00006BA0 6100 0000                  		bsr.w	ScrollBlock1
00006BA4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006BAA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006BAE 323C 00DF                  		move.w	#$DF,d1
00006BB2 3038 F700                  		move.w	($FFFFF700).w,d0
00006BB6 4440                       		neg.w	d0
00006BB8 4840                       		swap	d0
00006BBA 3038 F708                  		move.w	($FFFFF708).w,d0
00006BBE 4440                       		neg.w	d0
00006BC0                            
00006BC0                            loc_6576:
00006BC0 22C0                       		move.l	d0,(a1)+
00006BC2 51C9 FFFC                  		dbf	d1,loc_6576
00006BC6 4E75                       		rts	
00006BC8                            ; End of function Deform_SBZ
00006BC8                            
00006BC8                            ; ---------------------------------------------------------------------------
00006BC8                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BC8                            ; ---------------------------------------------------------------------------
00006BC8                            
00006BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC8                            
00006BC8                            
00006BC8                            ScrollHoriz:				; XREF: DeformBgLayer
00006BC8 3838 F700                  		move.w	($FFFFF700).w,d4
00006BCC 6100                       		bsr.s	ScrollHoriz2
00006BCE 3038 F700                  		move.w	($FFFFF700).w,d0
00006BD2 0240 0010                  		andi.w	#$10,d0
00006BD6 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BDA B300                       		eor.b	d1,d0
00006BDC 6600                       		bne.s	locret_65B0
00006BDE 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BE4 3038 F700                  		move.w	($FFFFF700).w,d0
00006BE8 9044                       		sub.w	d4,d0
00006BEA 6A00                       		bpl.s	loc_65AA
00006BEC 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BF2 4E75                       		rts	
00006BF4                            ; ===========================================================================
00006BF4                            
00006BF4                            loc_65AA:
00006BF4 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BFA                            
00006BFA                            locret_65B0:
00006BFA 4E75                       		rts	
00006BFC                            ; End of function ScrollHoriz
00006BFC                            
00006BFC                            
00006BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BFC                            
00006BFC                            
00006BFC                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BFC 3038 D008                  		move.w	($FFFFD008).w,d0
00006C00 9078 F700                  		sub.w	($FFFFF700).w,d0
00006C04 0440 0090                  		subi.w	#$90,d0
00006C08 6500                       		bcs.s	loc_65F6
00006C0A 0440 0010                  		subi.w	#$10,d0
00006C0E 6400                       		bcc.s	loc_65CC
00006C10 4278 F73A                  		clr.w	($FFFFF73A).w
00006C14 4E75                       		rts	
00006C16                            ; ===========================================================================
00006C16                            
00006C16                            loc_65CC:
00006C16 0C40 0010                  		cmpi.w	#$10,d0
00006C1A 6500                       		bcs.s	loc_65D6
00006C1C 303C 0010                  		move.w	#$10,d0
00006C20                            
00006C20                            loc_65D6:
00006C20 D078 F700                  		add.w	($FFFFF700).w,d0
00006C24 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C28 6D00                       		blt.s	loc_65E4
00006C2A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C2E                            
00006C2E                            loc_65E4:
00006C2E 3200                       		move.w	d0,d1
00006C30 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C34 E141                       		asl.w	#8,d1
00006C36 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C3A 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C3E 4E75                       		rts	
00006C40                            ; ===========================================================================
00006C40                            
00006C40                            loc_65F6:				; XREF: ScrollHoriz2
00006C40 D078 F700                  		add.w	($FFFFF700).w,d0
00006C44 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C48 6EE4                       		bgt.s	loc_65E4
00006C4A 3038 F728                  		move.w	($FFFFF728).w,d0
00006C4E 60DE                       		bra.s	loc_65E4
00006C50                            ; End of function ScrollHoriz2
00006C50                            
00006C50                            ; ===========================================================================
00006C50 4A40                       		tst.w	d0
00006C52 6A00                       		bpl.s	loc_6610
00006C54 303C FFFE                  		move.w	#-2,d0
00006C58 60E6                       		bra.s	loc_65F6
00006C5A                            ; ===========================================================================
00006C5A                            
00006C5A                            loc_6610:
00006C5A 303C 0002                  		move.w	#2,d0
00006C5E 60B6                       		bra.s	loc_65CC
00006C60                            
00006C60                            ; ---------------------------------------------------------------------------
00006C60                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C60                            ; ---------------------------------------------------------------------------
00006C60                            
00006C60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C60                            
00006C60                            
00006C60                            ScrollVertical:				; XREF: DeformBgLayer
00006C60 7200                       		moveq	#0,d1
00006C62 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C66 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C6A 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C70 6700                       		beq.s	loc_662A
00006C72 5B40                       		subq.w	#5,d0
00006C74                            
00006C74                            loc_662A:
00006C74 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C7A 6700                       		beq.s	loc_664A
00006C7C 0640 0020                  		addi.w	#$20,d0
00006C80 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C84 6500                       		bcs.s	loc_6696
00006C86 0440 0040                  		subi.w	#$40,d0
00006C8A 6400                       		bcc.s	loc_6696
00006C8C 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C90 6600                       		bne.s	loc_66A8
00006C92 6000                       		bra.s	loc_6656
00006C94                            ; ===========================================================================
00006C94                            
00006C94                            loc_664A:
00006C94 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C98 6600                       		bne.s	loc_665C
00006C9A 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C9E 6600                       		bne.s	loc_66A8
00006CA0                            
00006CA0                            loc_6656:
00006CA0 4278 F73C                  		clr.w	($FFFFF73C).w
00006CA4 4E75                       		rts	
00006CA6                            ; ===========================================================================
00006CA6                            
00006CA6                            loc_665C:
00006CA6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006CAC 6600                       		bne.s	loc_6684
00006CAE 3238 D014                  		move.w	($FFFFD014).w,d1
00006CB2 6A00                       		bpl.s	loc_666C
00006CB4 4441                       		neg.w	d1
00006CB6                            
00006CB6                            loc_666C:
00006CB6 0C41 0800                  		cmpi.w	#$800,d1
00006CBA 6400                       		bcc.s	loc_6696
00006CBC 323C 0600                  		move.w	#$600,d1
00006CC0 0C40 0006                  		cmpi.w	#6,d0
00006CC4 6E00                       		bgt.s	loc_66F6
00006CC6 0C40 FFFA                  		cmpi.w	#-6,d0
00006CCA 6D00                       		blt.s	loc_66C0
00006CCC 6000                       		bra.s	loc_66AE
00006CCE                            ; ===========================================================================
00006CCE                            
00006CCE                            loc_6684:
00006CCE 323C 0200                  		move.w	#$200,d1
00006CD2 0C40 0002                  		cmpi.w	#2,d0
00006CD6 6E00                       		bgt.s	loc_66F6
00006CD8 0C40 FFFE                  		cmpi.w	#-2,d0
00006CDC 6D00                       		blt.s	loc_66C0
00006CDE 6000                       		bra.s	loc_66AE
00006CE0                            ; ===========================================================================
00006CE0                            
00006CE0                            loc_6696:
00006CE0 323C 1000                  		move.w	#$1000,d1
00006CE4 0C40 0010                  		cmpi.w	#$10,d0
00006CE8 6E00                       		bgt.s	loc_66F6
00006CEA 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CEE 6D00                       		blt.s	loc_66C0
00006CF0 6000                       		bra.s	loc_66AE
00006CF2                            ; ===========================================================================
00006CF2                            
00006CF2                            loc_66A8:
00006CF2 7000                       		moveq	#0,d0
00006CF4 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CF8                            
00006CF8                            loc_66AE:
00006CF8 7200                       		moveq	#0,d1
00006CFA 3200                       		move.w	d0,d1
00006CFC D278 F704                  		add.w	($FFFFF704).w,d1
00006D00 4A40                       		tst.w	d0
00006D02 6A00 0000                  		bpl.w	loc_6700
00006D06 6000 0000                  		bra.w	loc_66CC
00006D0A                            ; ===========================================================================
00006D0A                            
00006D0A                            loc_66C0:
00006D0A 4441                       		neg.w	d1
00006D0C 48C1                       		ext.l	d1
00006D0E E181                       		asl.l	#8,d1
00006D10 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D14 4841                       		swap	d1
00006D16                            
00006D16                            loc_66CC:
00006D16 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006D1A 6E00                       		bgt.s	loc_6724
00006D1C 0C41 FF00                  		cmpi.w	#-$100,d1
00006D20 6E00                       		bgt.s	loc_66F0
00006D22 0241 07FF                  		andi.w	#$7FF,d1
00006D26 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D2C 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D32 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D38 6000                       		bra.s	loc_6724
00006D3A                            ; ===========================================================================
00006D3A                            
00006D3A                            loc_66F0:
00006D3A 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D3E 6000                       		bra.s	loc_6724
00006D40                            ; ===========================================================================
00006D40                            
00006D40                            loc_66F6:
00006D40 48C1                       		ext.l	d1
00006D42 E181                       		asl.l	#8,d1
00006D44 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D48 4841                       		swap	d1
00006D4A                            
00006D4A                            loc_6700:
00006D4A B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D4E 6D00                       		blt.s	loc_6724
00006D50 0441 0800                  		subi.w	#$800,d1
00006D54 6500                       		bcs.s	loc_6720
00006D56 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D5C 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D62 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D68 6000                       		bra.s	loc_6724
00006D6A                            ; ===========================================================================
00006D6A                            
00006D6A                            loc_6720:
00006D6A 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D6E                            
00006D6E                            loc_6724:
00006D6E 3838 F704                  		move.w	($FFFFF704).w,d4
00006D72 4841                       		swap	d1
00006D74 2601                       		move.l	d1,d3
00006D76 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D7A E09B                       		ror.l	#8,d3
00006D7C 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D80 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D84 3038 F704                  		move.w	($FFFFF704).w,d0
00006D88 0240 0010                  		andi.w	#$10,d0
00006D8C 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D90 B300                       		eor.b	d1,d0
00006D92 6600                       		bne.s	locret_6766
00006D94 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D9A 3038 F704                  		move.w	($FFFFF704).w,d0
00006D9E 9044                       		sub.w	d4,d0
00006DA0 6A00                       		bpl.s	loc_6760
00006DA2 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006DA8 4E75                       		rts	
00006DAA                            ; ===========================================================================
00006DAA                            
00006DAA                            loc_6760:
00006DAA 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006DB0                            
00006DB0                            locret_6766:
00006DB0 4E75                       		rts	
00006DB2                            ; End of function ScrollVertical
00006DB2                            
00006DB2                            
00006DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB2                            
00006DB2                            
00006DB2                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006DB2 2438 F708                  		move.l	($FFFFF708).w,d2
00006DB6 2002                       		move.l	d2,d0
00006DB8 D084                       		add.l	d4,d0
00006DBA 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DBE 2200                       		move.l	d0,d1
00006DC0 4841                       		swap	d1
00006DC2 0241 0010                  		andi.w	#$10,d1
00006DC6 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DCA B701                       		eor.b	d3,d1
00006DCC 6600                       		bne.s	loc_679C
00006DCE 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DD4 9082                       		sub.l	d2,d0
00006DD6 6A00                       		bpl.s	loc_6796
00006DD8 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DDE 6000                       		bra.s	loc_679C
00006DE0                            ; ===========================================================================
00006DE0                            
00006DE0                            loc_6796:
00006DE0 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DE6                            
00006DE6                            loc_679C:
00006DE6 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DEA 2003                       		move.l	d3,d0
00006DEC D085                       		add.l	d5,d0
00006DEE 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DF2 2200                       		move.l	d0,d1
00006DF4 4841                       		swap	d1
00006DF6 0241 0010                  		andi.w	#$10,d1
00006DFA 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DFE B501                       		eor.b	d2,d1
00006E00 6600                       		bne.s	locret_67D0
00006E02 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E08 9083                       		sub.l	d3,d0
00006E0A 6A00                       		bpl.s	loc_67CA
00006E0C 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E12 4E75                       		rts	
00006E14                            ; ===========================================================================
00006E14                            
00006E14                            loc_67CA:
00006E14 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E1A                            
00006E1A                            locret_67D0:
00006E1A 4E75                       		rts	
00006E1C                            ; End of function ScrollBlock1
00006E1C                            
00006E1C                            
00006E1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E1C                            
00006E1C                            
00006E1C                            ScrollBlock2:				; XREF: Deform_SLZ
00006E1C 2438 F708                  		move.l	($FFFFF708).w,d2
00006E20 2002                       		move.l	d2,d0
00006E22 D084                       		add.l	d4,d0
00006E24 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E28 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E2C 2003                       		move.l	d3,d0
00006E2E D085                       		add.l	d5,d0
00006E30 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E34 2200                       		move.l	d0,d1
00006E36 4841                       		swap	d1
00006E38 0241 0010                  		andi.w	#$10,d1
00006E3C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E40 B501                       		eor.b	d2,d1
00006E42 6600                       		bne.s	locret_6812
00006E44 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E4A 9083                       		sub.l	d3,d0
00006E4C 6A00                       		bpl.s	loc_680C
00006E4E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E54 4E75                       		rts	
00006E56                            ; ===========================================================================
00006E56                            
00006E56                            loc_680C:
00006E56 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E5C                            
00006E5C                            locret_6812:
00006E5C 4E75                       		rts	
00006E5E                            ; End of function ScrollBlock2
00006E5E                            
00006E5E                            
00006E5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E5E                            
00006E5E                            
00006E5E                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E5E 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E62 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E66 3200                       		move.w	d0,d1
00006E68 0241 0010                  		andi.w	#$10,d1
00006E6C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E70 B501                       		eor.b	d2,d1
00006E72 6600                       		bne.s	locret_6842
00006E74 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E7A 9043                       		sub.w	d3,d0
00006E7C 6A00                       		bpl.s	loc_683C
00006E7E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E84 4E75                       		rts	
00006E86                            ; ===========================================================================
00006E86                            
00006E86                            loc_683C:
00006E86 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E8C                            
00006E8C                            locret_6842:
00006E8C 4E75                       		rts	
00006E8E                            ; End of function ScrollBlock3
00006E8E                            
00006E8E                            
00006E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E8E                            
00006E8E                            
00006E8E                            ScrollBlock4:				; XREF: Deform_GHZ
00006E8E 3438 F710                  		move.w	($FFFFF710).w,d2
00006E92 3638 F714                  		move.w	($FFFFF714).w,d3
00006E96 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E9A 48C0                       		ext.l	d0
00006E9C EF80                       		asl.l	#7,d0
00006E9E D1B8 F710                  		add.l	d0,($FFFFF710).w
00006EA2 3038 F710                  		move.w	($FFFFF710).w,d0
00006EA6 0240 0010                  		andi.w	#$10,d0
00006EAA 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006EAE B300                       		eor.b	d1,d0
00006EB0 6600                       		bne.s	locret_6884
00006EB2 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006EB8 3038 F710                  		move.w	($FFFFF710).w,d0
00006EBC 9042                       		sub.w	d2,d0
00006EBE 6A00                       		bpl.s	loc_687E
00006EC0 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EC6 6000                       		bra.s	locret_6884
00006EC8                            ; ===========================================================================
00006EC8                            
00006EC8                            loc_687E:
00006EC8 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006ECE                            
00006ECE                            locret_6884:
00006ECE 4E75                       		rts	
00006ED0                            ; End of function ScrollBlock4
00006ED0                            
00006ED0                            
00006ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ED0                            
00006ED0                            
00006ED0                            sub_6886:				; XREF: loc_C44
00006ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00006ED6 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EDC 45F8 F756                  		lea	($FFFFF756).w,a2
00006EE0 47F8 F708                  		lea	($FFFFF708).w,a3
00006EE4 49F8 A440                  		lea	($FFFFA440).w,a4
00006EE8 343C 6000                  		move.w	#$6000,d2
00006EEC 6100 0000                  		bsr.w	sub_6954
00006EF0 45F8 F758                  		lea	($FFFFF758).w,a2
00006EF4 47F8 F710                  		lea	($FFFFF710).w,a3
00006EF8 6000 0000                  		bra.w	sub_69F4
00006EFC                            ; End of function sub_6886
00006EFC                            
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            ; Subroutine to	display	correct	tiles as you move
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            
00006EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFC                            
00006EFC                            
00006EFC                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00006F02 4DF9 00C0 0000             		lea	($C00000).l,a6
00006F08 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006F0C 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006F10 49F8 A440                  		lea	($FFFFA440).w,a4
00006F14 343C 6000                  		move.w	#$6000,d2
00006F18 6100 0000                  		bsr.w	sub_6954
00006F1C 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F20 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F24 6100 0000                  		bsr.w	sub_69F4
00006F28 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F2C 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F30 49F8 A400                  		lea	($FFFFA400).w,a4
00006F34 343C 4000                  		move.w	#$4000,d2
00006F38 4A12                       		tst.b	(a2)
00006F3A 6700                       		beq.s	locret_6952
00006F3C 0892 0000                  		bclr	#0,(a2)
00006F40 6700                       		beq.s	loc_6908
00006F42 78F0                       		moveq	#-$10,d4
00006F44 7AF0                       		moveq	#-$10,d5
00006F46 6100 0000                  		bsr.w	sub_6C20
00006F4A 78F0                       		moveq	#-$10,d4
00006F4C 7AF0                       		moveq	#-$10,d5
00006F4E 6100 0000                  		bsr.w	sub_6AD8
00006F52                            
00006F52                            loc_6908:
00006F52 0892 0001                  		bclr	#1,(a2)
00006F56 6700                       		beq.s	loc_6922
00006F58 383C 00E0                  		move.w	#$E0,d4
00006F5C 7AF0                       		moveq	#-$10,d5
00006F5E 6100 0000                  		bsr.w	sub_6C20
00006F62 383C 00E0                  		move.w	#$E0,d4
00006F66 7AF0                       		moveq	#-$10,d5
00006F68 6100 0000                  		bsr.w	sub_6AD8
00006F6C                            
00006F6C                            loc_6922:
00006F6C 0892 0002                  		bclr	#2,(a2)
00006F70 6700                       		beq.s	loc_6938
00006F72 78F0                       		moveq	#-$10,d4
00006F74 7AF0                       		moveq	#-$10,d5
00006F76 6100 0000                  		bsr.w	sub_6C20
00006F7A 78F0                       		moveq	#-$10,d4
00006F7C 7AF0                       		moveq	#-$10,d5
00006F7E 6100 0000                  		bsr.w	sub_6B04
00006F82                            
00006F82                            loc_6938:
00006F82 0892 0003                  		bclr	#3,(a2)
00006F86 6700                       		beq.s	locret_6952
00006F88 78F0                       		moveq	#-$10,d4
00006F8A 3A3C 0140                  		move.w	#$140,d5
00006F8E 6100 0000                  		bsr.w	sub_6C20
00006F92 78F0                       		moveq	#-$10,d4
00006F94 3A3C 0140                  		move.w	#$140,d5
00006F98 6100 0000                  		bsr.w	sub_6B04
00006F9C                            
00006F9C                            locret_6952:
00006F9C 4E75                       		rts	
00006F9E                            ; End of function LoadTilesAsYouMove
00006F9E                            
00006F9E                            
00006F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F9E                            
00006F9E                            
00006F9E                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F9E 4A12                       		tst.b	(a2)
00006FA0 6700 0000                  		beq.w	locret_69F2
00006FA4 0892 0000                  		bclr	#0,(a2)
00006FA8 6700                       		beq.s	loc_6972
00006FAA 78F0                       		moveq	#-$10,d4
00006FAC 7AF0                       		moveq	#-$10,d5
00006FAE 6100 0000                  		bsr.w	sub_6C20
00006FB2 78F0                       		moveq	#-$10,d4
00006FB4 7AF0                       		moveq	#-$10,d5
00006FB6 7C1F                       		moveq	#$1F,d6
00006FB8 6100 0000                  		bsr.w	sub_6ADA
00006FBC                            
00006FBC                            loc_6972:
00006FBC 0892 0001                  		bclr	#1,(a2)
00006FC0 6700                       		beq.s	loc_698E
00006FC2 383C 00E0                  		move.w	#$E0,d4
00006FC6 7AF0                       		moveq	#-$10,d5
00006FC8 6100 0000                  		bsr.w	sub_6C20
00006FCC 383C 00E0                  		move.w	#$E0,d4
00006FD0 7AF0                       		moveq	#-$10,d5
00006FD2 7C1F                       		moveq	#$1F,d6
00006FD4 6100 0000                  		bsr.w	sub_6ADA
00006FD8                            
00006FD8                            loc_698E:
00006FD8 0892 0002                  		bclr	#2,(a2)
00006FDC 6700                       		beq.s	loc_69BE
00006FDE 78F0                       		moveq	#-$10,d4
00006FE0 7AF0                       		moveq	#-$10,d5
00006FE2 6100 0000                  		bsr.w	sub_6C20
00006FE6 78F0                       		moveq	#-$10,d4
00006FE8 7AF0                       		moveq	#-$10,d5
00006FEA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FEE 322B 0004                  		move.w	4(a3),d1
00006FF2 0241 FFF0                  		andi.w	#-$10,d1
00006FF6 9C41                       		sub.w	d1,d6
00006FF8 6D00                       		blt.s	loc_69BE
00006FFA E84E                       		lsr.w	#4,d6
00006FFC 0C46 000F                  		cmpi.w	#$F,d6
00007000 6500                       		bcs.s	loc_69BA
00007002 7C0F                       		moveq	#$F,d6
00007004                            
00007004                            loc_69BA:
00007004 6100 0000                  		bsr.w	sub_6B06
00007008                            
00007008                            loc_69BE:
00007008 0892 0003                  		bclr	#3,(a2)
0000700C 6700                       		beq.s	locret_69F2
0000700E 78F0                       		moveq	#-$10,d4
00007010 3A3C 0140                  		move.w	#$140,d5
00007014 6100 0000                  		bsr.w	sub_6C20
00007018 78F0                       		moveq	#-$10,d4
0000701A 3A3C 0140                  		move.w	#$140,d5
0000701E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007022 322B 0004                  		move.w	4(a3),d1
00007026 0241 FFF0                  		andi.w	#-$10,d1
0000702A 9C41                       		sub.w	d1,d6
0000702C 6D00                       		blt.s	locret_69F2
0000702E E84E                       		lsr.w	#4,d6
00007030 0C46 000F                  		cmpi.w	#$F,d6
00007034 6500                       		bcs.s	loc_69EE
00007036 7C0F                       		moveq	#$F,d6
00007038                            
00007038                            loc_69EE:
00007038 6100 0000                  		bsr.w	sub_6B06
0000703C                            
0000703C                            locret_69F2:
0000703C 4E75                       		rts	
0000703E                            ; End of function sub_6954
0000703E                            
0000703E                            
0000703E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000703E                            
0000703E                            
0000703E                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
0000703E 4A12                       		tst.b	(a2)
00007040 6700 0000                  		beq.w	locret_6A80
00007044 0892 0002                  		bclr	#2,(a2)
00007048 6700                       		beq.s	loc_6A3E
0000704A 0C53 0010                  		cmpi.w	#$10,(a3)
0000704E 6500                       		bcs.s	loc_6A3E
00007050 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007054 322B 0004                  		move.w	4(a3),d1
00007058 0241 FFF0                  		andi.w	#-$10,d1
0000705C 9841                       		sub.w	d1,d4
0000705E 3F04                       		move.w	d4,-(sp)
00007060 7AF0                       		moveq	#-$10,d5
00007062 6100 0000                  		bsr.w	sub_6C20
00007066 381F                       		move.w	(sp)+,d4
00007068 7AF0                       		moveq	#-$10,d5
0000706A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000706E 322B 0004                  		move.w	4(a3),d1
00007072 0241 FFF0                  		andi.w	#-$10,d1
00007076 9C41                       		sub.w	d1,d6
00007078 6D00                       		blt.s	loc_6A3E
0000707A E84E                       		lsr.w	#4,d6
0000707C 0446 000E                  		subi.w	#$E,d6
00007080 6400                       		bcc.s	loc_6A3E
00007082 4446                       		neg.w	d6
00007084 6100 0000                  		bsr.w	sub_6B06
00007088                            
00007088                            loc_6A3E:
00007088 0892 0003                  		bclr	#3,(a2)
0000708C 6700                       		beq.s	locret_6A80
0000708E 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007092 322B 0004                  		move.w	4(a3),d1
00007096 0241 FFF0                  		andi.w	#-$10,d1
0000709A 9841                       		sub.w	d1,d4
0000709C 3F04                       		move.w	d4,-(sp)
0000709E 3A3C 0140                  		move.w	#$140,d5
000070A2 6100 0000                  		bsr.w	sub_6C20
000070A6 381F                       		move.w	(sp)+,d4
000070A8 3A3C 0140                  		move.w	#$140,d5
000070AC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000070B0 322B 0004                  		move.w	4(a3),d1
000070B4 0241 FFF0                  		andi.w	#-$10,d1
000070B8 9C41                       		sub.w	d1,d6
000070BA 6D00                       		blt.s	locret_6A80
000070BC E84E                       		lsr.w	#4,d6
000070BE 0446 000E                  		subi.w	#$E,d6
000070C2 6400                       		bcc.s	locret_6A80
000070C4 4446                       		neg.w	d6
000070C6 6100 0000                  		bsr.w	sub_6B06
000070CA                            
000070CA                            locret_6A80:
000070CA 4E75                       		rts	
000070CC                            ; End of function sub_69F4
000070CC                            
000070CC                            ; ===========================================================================
000070CC 4A12                       		tst.b	(a2)
000070CE 6700                       		beq.s	locret_6AD6
000070D0 0892 0002                  		bclr	#2,(a2)
000070D4 6700                       		beq.s	loc_6AAC
000070D6 383C 00D0                  		move.w	#$D0,d4
000070DA 322B 0004                  		move.w	4(a3),d1
000070DE 0241 FFF0                  		andi.w	#-$10,d1
000070E2 9841                       		sub.w	d1,d4
000070E4 3F04                       		move.w	d4,-(sp)
000070E6 7AF0                       		moveq	#-$10,d5
000070E8 6100 0000                  		bsr.w	sub_6C3C
000070EC 381F                       		move.w	(sp)+,d4
000070EE 7AF0                       		moveq	#-$10,d5
000070F0 7C02                       		moveq	#2,d6
000070F2 6100 0000                  		bsr.w	sub_6B06
000070F6                            
000070F6                            loc_6AAC:
000070F6 0892 0003                  		bclr	#3,(a2)
000070FA 6700                       		beq.s	locret_6AD6
000070FC 383C 00D0                  		move.w	#$D0,d4
00007100 322B 0004                  		move.w	4(a3),d1
00007104 0241 FFF0                  		andi.w	#-$10,d1
00007108 9841                       		sub.w	d1,d4
0000710A 3F04                       		move.w	d4,-(sp)
0000710C 3A3C 0140                  		move.w	#$140,d5
00007110 6100 0000                  		bsr.w	sub_6C3C
00007114 381F                       		move.w	(sp)+,d4
00007116 3A3C 0140                  		move.w	#$140,d5
0000711A 7C02                       		moveq	#2,d6
0000711C 6100 0000                  		bsr.w	sub_6B06
00007120                            
00007120                            locret_6AD6:
00007120 4E75                       		rts	
00007122                            
00007122                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007122                            
00007122                            
00007122                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007122 7C15                       		moveq	#$15,d6
00007124                            ; End of function sub_6AD8
00007124                            
00007124                            
00007124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007124                            
00007124                            
00007124                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007124 2E3C 0080 0000             		move.l	#$800000,d7
0000712A 2200                       		move.l	d0,d1
0000712C                            
0000712C                            loc_6AE2:
0000712C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007130 6100 0000                  		bsr.w	sub_6BD6
00007134 2001                       		move.l	d1,d0
00007136 6100 0000                  		bsr.w	sub_6B32
0000713A 5801                       		addq.b	#4,d1
0000713C 0201 007F                  		andi.b	#$7F,d1
00007140 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007144 0645 0010                  		addi.w	#$10,d5
00007148 51CE FFE2                  		dbf	d6,loc_6AE2
0000714C 4E75                       		rts	
0000714E                            ; End of function sub_6ADA
0000714E                            
0000714E                            
0000714E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000714E                            
0000714E                            
0000714E                            sub_6B04:				; XREF: LoadTilesAsYouMove
0000714E 7C0F                       		moveq	#$F,d6
00007150                            ; End of function sub_6B04
00007150                            
00007150                            
00007150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007150                            
00007150                            
00007150                            sub_6B06:				; XREF: sub_6954
00007150 2E3C 0080 0000             		move.l	#$800000,d7
00007156 2200                       		move.l	d0,d1
00007158                            
00007158                            loc_6B0E:
00007158 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000715C 6100 0000                  		bsr.w	sub_6BD6
00007160 2001                       		move.l	d1,d0
00007162 6100 0000                  		bsr.w	sub_6B32
00007166 0641 0100                  		addi.w	#$100,d1
0000716A 0241 0FFF                  		andi.w	#$FFF,d1
0000716E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007172 0644 0010                  		addi.w	#$10,d4
00007176 51CE FFE0                  		dbf	d6,loc_6B0E
0000717A 4E75                       		rts	
0000717C                            ; End of function sub_6B06
0000717C                            
0000717C                            
0000717C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000717C                            
0000717C                            
0000717C                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
0000717C 8042                       		or.w	d2,d0
0000717E 4840                       		swap	d0
00007180 0810 0004                  		btst	#4,(a0)
00007184 6600                       		bne.s	loc_6B6E
00007186 0810 0003                  		btst	#3,(a0)
0000718A 6600                       		bne.s	loc_6B4E
0000718C 2A80                       		move.l	d0,(a5)
0000718E 2C99                       		move.l	(a1)+,(a6)
00007190 D087                       		add.l	d7,d0
00007192 2A80                       		move.l	d0,(a5)
00007194 2C99                       		move.l	(a1)+,(a6)
00007196 4E75                       		rts	
00007198                            ; ===========================================================================
00007198                            
00007198                            loc_6B4E:
00007198 2A80                       		move.l	d0,(a5)
0000719A 2819                       		move.l	(a1)+,d4
0000719C 0A84 0800 0800             		eori.l	#$8000800,d4
000071A2 4844                       		swap	d4
000071A4 2C84                       		move.l	d4,(a6)
000071A6 D087                       		add.l	d7,d0
000071A8 2A80                       		move.l	d0,(a5)
000071AA 2819                       		move.l	(a1)+,d4
000071AC 0A84 0800 0800             		eori.l	#$8000800,d4
000071B2 4844                       		swap	d4
000071B4 2C84                       		move.l	d4,(a6)
000071B6 4E75                       		rts	
000071B8                            ; ===========================================================================
000071B8                            
000071B8                            loc_6B6E:
000071B8 0810 0003                  		btst	#3,(a0)
000071BC 6600                       		bne.s	loc_6B90
000071BE 2A80                       		move.l	d0,(a5)
000071C0 2A19                       		move.l	(a1)+,d5
000071C2 2819                       		move.l	(a1)+,d4
000071C4 0A84 1000 1000             		eori.l	#$10001000,d4
000071CA 2C84                       		move.l	d4,(a6)
000071CC D087                       		add.l	d7,d0
000071CE 2A80                       		move.l	d0,(a5)
000071D0 0A85 1000 1000             		eori.l	#$10001000,d5
000071D6 2C85                       		move.l	d5,(a6)
000071D8 4E75                       		rts	
000071DA                            ; ===========================================================================
000071DA                            
000071DA                            loc_6B90:
000071DA 2A80                       		move.l	d0,(a5)
000071DC 2A19                       		move.l	(a1)+,d5
000071DE 2819                       		move.l	(a1)+,d4
000071E0 0A84 1800 1800             		eori.l	#$18001800,d4
000071E6 4844                       		swap	d4
000071E8 2C84                       		move.l	d4,(a6)
000071EA D087                       		add.l	d7,d0
000071EC 2A80                       		move.l	d0,(a5)
000071EE 0A85 1800 1800             		eori.l	#$18001800,d5
000071F4 4845                       		swap	d5
000071F6 2C85                       		move.l	d5,(a6)
000071F8 4E75                       		rts	
000071FA                            ; End of function sub_6B32
000071FA                            
000071FA                            ; ===========================================================================
000071FA 4E75                       		rts	
000071FC                            ; ===========================================================================
000071FC 2A80                       		move.l	d0,(a5)
000071FE 3A3C 2000                  		move.w	#$2000,d5
00007202 3819                       		move.w	(a1)+,d4
00007204 D845                       		add.w	d5,d4
00007206 3C84                       		move.w	d4,(a6)
00007208 3819                       		move.w	(a1)+,d4
0000720A D845                       		add.w	d5,d4
0000720C 3C84                       		move.w	d4,(a6)
0000720E D087                       		add.l	d7,d0
00007210 2A80                       		move.l	d0,(a5)
00007212 3819                       		move.w	(a1)+,d4
00007214 D845                       		add.w	d5,d4
00007216 3C84                       		move.w	d4,(a6)
00007218 3819                       		move.w	(a1)+,d4
0000721A D845                       		add.w	d5,d4
0000721C 3C84                       		move.w	d4,(a6)
0000721E 4E75                       		rts	
00007220                            
00007220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007220                            
00007220                            
00007220                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007220 43F8 B000                  		lea	($FFFFB000).w,a1
00007224 D86B 0004                  		add.w	4(a3),d4
00007228 DA53                       		add.w	(a3),d5
0000722A 3604                       		move.w	d4,d3
0000722C E24B                       		lsr.w	#1,d3
0000722E 0243 0380                  		andi.w	#$380,d3
00007232 E64D                       		lsr.w	#3,d5
00007234 3005                       		move.w	d5,d0
00007236 EA48                       		lsr.w	#5,d0
00007238 0240 007F                  		andi.w	#$7F,d0
0000723C D043                       		add.w	d3,d0
0000723E 76FF                       		moveq	#-1,d3
00007240 1634 0000                  		move.b	(a4,d0.w),d3
00007244 6700                       		beq.s	locret_6C1E
00007246 5303                       		subq.b	#1,d3
00007248 0243 007F                  		andi.w	#$7F,d3
0000724C EE5B                       		ror.w	#7,d3
0000724E D844                       		add.w	d4,d4
00007250 0244 01E0                  		andi.w	#$1E0,d4
00007254 0245 001E                  		andi.w	#$1E,d5
00007258 D644                       		add.w	d4,d3
0000725A D645                       		add.w	d5,d3
0000725C 2043                       		movea.l	d3,a0
0000725E 3610                       		move.w	(a0),d3
00007260 0243 03FF                  		andi.w	#$3FF,d3
00007264 E74B                       		lsl.w	#3,d3
00007266 D2C3                       		adda.w	d3,a1
00007268                            
00007268                            locret_6C1E:
00007268 4E75                       		rts	
0000726A                            ; End of function sub_6BD6
0000726A                            
0000726A                            
0000726A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000726A                            
0000726A                            
0000726A                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000726A D86B 0004                  		add.w	4(a3),d4
0000726E DA53                       		add.w	(a3),d5
00007270 0244 00F0                  		andi.w	#$F0,d4
00007274 0245 01F0                  		andi.w	#$1F0,d5
00007278 E94C                       		lsl.w	#4,d4
0000727A E44D                       		lsr.w	#2,d5
0000727C D845                       		add.w	d5,d4
0000727E 7003                       		moveq	#3,d0
00007280 4840                       		swap	d0
00007282 3004                       		move.w	d4,d0
00007284 4E75                       		rts	
00007286                            ; End of function sub_6C20
00007286                            
00007286                            
00007286                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007286                            ; not used
00007286                            
00007286                            
00007286                            sub_6C3C:
00007286 D86B 0004                  		add.w	4(a3),d4
0000728A DA53                       		add.w	(a3),d5
0000728C 0244 00F0                  		andi.w	#$F0,d4
00007290 0245 01F0                  		andi.w	#$1F0,d5
00007294 E94C                       		lsl.w	#4,d4
00007296 E44D                       		lsr.w	#2,d5
00007298 D845                       		add.w	d5,d4
0000729A 7002                       		moveq	#2,d0
0000729C 4840                       		swap	d0
0000729E 3004                       		move.w	d4,d0
000072A0 4E75                       		rts	
000072A2                            ; End of function sub_6C3C
000072A2                            
000072A2                            ; ---------------------------------------------------------------------------
000072A2                            ; Subroutine to	load tiles as soon as the level	appears
000072A2                            ; ---------------------------------------------------------------------------
000072A2                            
000072A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A2                            
000072A2                            
000072A2                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000072A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000072A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000072AE 47F8 F700                  		lea	($FFFFF700).w,a3
000072B2 49F8 A400                  		lea	($FFFFA400).w,a4
000072B6 343C 4000                  		move.w	#$4000,d2
000072BA 6100                       		bsr.s	LoadTilesFromStart2
000072BC 47F8 F708                  		lea	($FFFFF708).w,a3
000072C0 49F8 A440                  		lea	($FFFFA440).w,a4
000072C4 343C 6000                  		move.w	#$6000,d2
000072C8                            ; End of function LoadTilesFromStart
000072C8                            
000072C8                            
000072C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C8                            
000072C8                            
000072C8                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072C8 78F0                       		moveq	#-$10,d4
000072CA 7C0F                       		moveq	#$F,d6
000072CC                            
000072CC                            loc_6C82:
000072CC 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072D0 7A00                       		moveq	#0,d5
000072D2 3204                       		move.w	d4,d1
000072D4 6100 FF94                  		bsr.w	sub_6C20
000072D8 3801                       		move.w	d1,d4
000072DA 7A00                       		moveq	#0,d5
000072DC 7C1F                       		moveq	#$1F,d6
000072DE 6100 FE44                  		bsr.w	sub_6ADA
000072E2 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072E6 0644 0010                  		addi.w	#$10,d4
000072EA 51CE FFE0                  		dbf	d6,loc_6C82
000072EE 4E75                       		rts	
000072F0                            ; End of function LoadTilesFromStart2
000072F0                            
000072F0                            ; ---------------------------------------------------------------------------
000072F0                            ; Main Load Block loading subroutine
000072F0                            ; ---------------------------------------------------------------------------
000072F0                            
000072F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F0                            
000072F0                            
000072F0                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072F0 7000                       		moveq	#0,d0
000072F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072F6 E948                       		lsl.w	#4,d0
000072F8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072FE 45F2 0000                  		lea	(a2,d0.w),a2
00007302 2F0A                       		move.l	a2,-(sp)
00007304 588A                       		addq.l	#4,a2
00007306 205A                       		movea.l	(a2)+,a0
00007308 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000730C 303C 0000                  		move.w	#0,d0
00007310 6100 A642                  		bsr.w	EniDec
00007314 205A                       		movea.l	(a2)+,a0
00007316 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000731C 6100 A7B4                  		bsr.w	KosDec
00007320 6100 0000                  		bsr.w	LevelLayoutLoad
00007324 301A                       		move.w	(a2)+,d0
00007326 3012                       		move.w	(a2),d0
00007328 0240 00FF                  		andi.w	#$FF,d0
0000732C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007332 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007334 700C                       		moveq	#$C,d0		; use SB3 pallet
00007336                            
00007336                            MLB_ChkSBZPal:
00007336 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000733C 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
0000733E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007344 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007346                            
00007346                            MLB_UsePal0E:
00007346 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007348                            
00007348                            MLB_NormalPal:
00007348 6100 AFB2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000734C 245F                       		movea.l	(sp)+,a2
0000734E 584A                       		addq.w	#4,a2
00007350 7000                       		moveq	#0,d0
00007352 1012                       		move.b	(a2),d0
00007354 6700                       		beq.s	locret_6D10
00007356 6100 A45E                  		bsr.w	LoadPLC		; load pattern load cues
0000735A                            
0000735A                            locret_6D10:
0000735A 4E75                       		rts	
0000735C                            ; End of function MainLoadBlockLoad
0000735C                            
0000735C                            ; ---------------------------------------------------------------------------
0000735C                            ; Level	layout loading subroutine
0000735C                            ; ---------------------------------------------------------------------------
0000735C                            
0000735C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000735C                            
0000735C                            
0000735C                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000735C 47F8 A400                  		lea	($FFFFA400).w,a3
00007360 323C 01FF                  		move.w	#$1FF,d1
00007364 7000                       		moveq	#0,d0
00007366                            
00007366                            LevLoad_ClrRam:
00007366 26C0                       		move.l	d0,(a3)+
00007368 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000736C                            
0000736C 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007370 7200                       		moveq	#0,d1
00007372 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007376 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000737A 7202                       		moveq	#2,d1
0000737C                            ; End of function LevelLayoutLoad
0000737C                            
0000737C                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000737C                            
0000737C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000737C                            
0000737C                            
0000737C                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000737C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007380 ED08                       		lsl.b	#6,d0
00007382 EA48                       		lsr.w	#5,d0
00007384 3400                       		move.w	d0,d2
00007386 D040                       		add.w	d0,d0
00007388 D042                       		add.w	d2,d0
0000738A D041                       		add.w	d1,d0
0000738C 43F9 0000 0000             		lea	(Level_Index).l,a1
00007392 3031 0000                  		move.w	(a1,d0.w),d0
00007396 43F1 0000                  		lea	(a1,d0.w),a1
0000739A 7200                       		moveq	#0,d1
0000739C 3401                       		move.w	d1,d2
0000739E 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000073A0 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000073A2                            
000073A2                            LevLoad_NumRows:
000073A2 3001                       		move.w	d1,d0
000073A4 204B                       		movea.l	a3,a0
000073A6                            
000073A6                            LevLoad_Row:
000073A6 10D9                       		move.b	(a1)+,(a0)+
000073A8 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000073AC 47EB 0080                  		lea	$80(a3),a3	; do next row
000073B0 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000073B4 4E75                       		rts	
000073B6                            ; End of function LevelLayoutLoad2
000073B6                            
000073B6                            ; ---------------------------------------------------------------------------
000073B6                            ; Dynamic screen resize	loading	subroutine
000073B6                            ; ---------------------------------------------------------------------------
000073B6                            
000073B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073B6                            
000073B6                            
000073B6                            DynScrResizeLoad:			; XREF: DeformBgLayer
000073B6 7000                       		moveq	#0,d0
000073B8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000073BC D040                       		add.w	d0,d0
000073BE 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073C2 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073C6 7202                       		moveq	#2,d1
000073C8 3038 F726                  		move.w	($FFFFF726).w,d0
000073CC 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000073D0 6700                       		beq.s	locret_6DAA
000073D2 6400                       		bcc.s	loc_6DAC
000073D4 4441                       		neg.w	d1
000073D6 3038 F704                  		move.w	($FFFFF704).w,d0
000073DA B078 F726                  		cmp.w	($FFFFF726).w,d0
000073DE 6300                       		bls.s	loc_6DA0
000073E0 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073E4 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073EA                            
000073EA                            loc_6DA0:
000073EA D378 F72E                  		add.w	d1,($FFFFF72E).w
000073EE 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073F4                            
000073F4                            locret_6DAA:
000073F4 4E75                       		rts	
000073F6                            ; ===========================================================================
000073F6                            
000073F6                            loc_6DAC:				; XREF: DynScrResizeLoad
000073F6 3038 F704                  		move.w	($FFFFF704).w,d0
000073FA 5040                       		addq.w	#8,d0
000073FC B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007400 6500                       		bcs.s	loc_6DC4
00007402 0838 0001 D022             		btst	#1,($FFFFD022).w
00007408 6700                       		beq.s	loc_6DC4
0000740A D241                       		add.w	d1,d1
0000740C D241                       		add.w	d1,d1
0000740E                            
0000740E                            loc_6DC4:
0000740E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007412 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007418 4E75                       		rts	
0000741A                            ; End of function DynScrResizeLoad
0000741A                            
0000741A                            ; ===========================================================================
0000741A                            ; ---------------------------------------------------------------------------
0000741A                            ; Offset index for dynamic screen resizing
0000741A                            ; ---------------------------------------------------------------------------
0000741A 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000741E 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007422 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007426 0000                       		dc.w Resize_Ending-Resize_Index
00007428                            ; ===========================================================================
00007428                            ; ---------------------------------------------------------------------------
00007428                            ; Green	Hill Zone dynamic screen resizing
00007428                            ; ---------------------------------------------------------------------------
00007428                            
00007428                            Resize_GHZ:				; XREF: Resize_Index
00007428 7000                       		moveq	#0,d0
0000742A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000742E D040                       		add.w	d0,d0
00007430 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007434 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007438                            ; ===========================================================================
00007438 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000743A 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000743C 0000                       		dc.w Resize_GHZ3-Resize_GHZx
0000743E                            ; ===========================================================================
0000743E                            
0000743E                            Resize_GHZ1:
0000743E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007444 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000744A 6500                       		bcs.s	locret_6E08	; if not, branch
0000744C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007452                            
00007452                            locret_6E08:
00007452 4E75                       		rts	
00007454                            ; ===========================================================================
00007454                            
00007454                            Resize_GHZ2:
00007454 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000745A 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007460 6500                       		bcs.s	locret_6E3A
00007462 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007468 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000746E 6500                       		bcs.s	locret_6E3A
00007470 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007476 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
0000747C 6500                       		bcs.s	locret_6E3A
0000747E 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007484 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
0000748A 6500                       		bcs.s	locret_6E3A
0000748C 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007492                            		
00007492                            locret_6E3A:
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            Resize_GHZ3:
00007494 7000                       		moveq	#0,d0
00007496 1038 F742                  		move.b	($FFFFF742).w,d0
0000749A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000749E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000074A2                            ; ===========================================================================
000074A2 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000074A4 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000074A6 0000                       		dc.w Resize_GHZ3end-off_6E4A
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            Resize_GHZ3main:
000074A8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074AE 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000074B4 6500                       		bcs.s	locret_6E96
000074B6 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000074BC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_6E96
000074C4 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000074CA 6500                       		bcs.s	loc_6E98
000074CC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074D2 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000074D8 6400                       		bcc.s	loc_6E8E
000074DA 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074E0 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074E6                            
000074E6                            loc_6E8E:
000074E6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074EC 6400                       		bcc.s	loc_6E98
000074EE                            
000074EE                            locret_6E96:
000074EE 4E75                       		rts	
000074F0                            ; ===========================================================================
000074F0                            
000074F0                            loc_6E98:
000074F0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000074FA 4E75                       		rts	
000074FC                            ; ===========================================================================
000074FC                            
000074FC                            Resize_GHZ3boss:
000074FC 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007502 6400                       		bcc.s	loc_6EB0
00007504 5538 F742                  		subq.b	#2,($FFFFF742).w
00007508                            
00007508                            loc_6EB0:
00007508 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_6EE8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_6ED0
00007516 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000751A 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007520 337C 0280 000C             		move.w	#$280,$C(a1)
00007526                            
00007526                            loc_6ED0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A0A0                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A27A                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_6EE8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_GHZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Labyrinth Zone dynamic screen	resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_LZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000755A 0000                       		dc.w Resize_LZ12-Resize_LZx
0000755C 0000                       		dc.w Resize_LZ3-Resize_LZx
0000755E 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_LZ12:
00007560 4E75                       		rts	
00007562                            ; ===========================================================================
00007562                            
00007562                            Resize_LZ3:
00007562 7000                       		moveq	#0,d0
00007564 1038 F742                  		move.b	($FFFFF742).w,d0
00007568 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
0000756C 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007570                            ; ===========================================================================
00007570                            off_6E4A2:	
00007570 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007572 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007574                            ; ===========================================================================
00007574                            Resize_LZ3boss:
00007574 4A38 F742                  		tst.b	($FFFFF742).w
00007578 6600                       		bne.s	locret_6F62
0000757A 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007580 6500                       		bcs.s	locret_6F62
00007582 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007588 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000758E                            
0000758E 6100 0000                  		bsr.w	SingleObjLoad
00007592 6600                       		bne.s	loc_6F4A
00007594 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007598 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000759E 337C 06E0 000C             		move.w	#$6E0,$C(a1)
000075A4                            loc_6F4A:
000075A4 303C 008C                  		move.w	#$8C,d0
000075A8 6100 A022                  		bsr.w	PlaySound	; play boss music
000075AC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075B6 7020                       		moveq	#$20,d0
000075B8 6000 A1FC                  		bra.w	LoadPLC		; load boss patterns
000075BC                            ; ===========================================================================
000075BC                            
000075BC                            locret_6F62:
000075BC 4E75                       		rts	
000075BE                            ; ===========================================================================
000075BE                            
000075BE                            Resize_LZ3end:
000075BE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075C4 4E75                       		rts	
000075C6                            ; ===========================================================================
000075C6                            
000075C6                            Resize_SBZ3:
000075C6 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075CC 6500                       		bcs.s	locret_6F8C
000075CE 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000075D4 6400                       		bcc.s	locret_6F8C	; if not, branch
000075D6 4238 FE30                  		clr.b	($FFFFFE30).w
000075DA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075E0 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075E6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075EC                            
000075EC                            locret_6F8C:
000075EC 4E75                       		rts	
000075EE                            ; ===========================================================================
000075EE                            ; ---------------------------------------------------------------------------
000075EE                            ; Marble Zone dynamic screen resizing
000075EE                            ; ---------------------------------------------------------------------------
000075EE                            
000075EE                            Resize_MZ:				; XREF: Resize_Index
000075EE 7000                       		moveq	#0,d0
000075F0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075F4 D040                       		add.w	d0,d0
000075F6 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075FA 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075FE                            ; ===========================================================================
000075FE 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007600 0000                       		dc.w Resize_MZ2-Resize_MZx
00007602 0000                       		dc.w Resize_MZ3-Resize_MZx
00007604                            ; ===========================================================================
00007604                            
00007604                            Resize_MZ1:
00007604 7000                       		moveq	#0,d0
00007606 1038 F742                  		move.b	($FFFFF742).w,d0
0000760A 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000760E 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007612                            ; ===========================================================================
00007612 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007614 0000                       		dc.w loc_6FEA-off_6FB2
00007616 0000                       		dc.w loc_702E-off_6FB2
00007618 0000                       		dc.w loc_7050-off_6FB2
0000761A                            ; ===========================================================================
0000761A                            
0000761A                            loc_6FBA:
0000761A 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007620 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007626 6500                       		bcs.s	locret_6FE8
00007628 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000762E 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007634 6500                       		bcs.s	locret_6FE8
00007636 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000763C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007642 6500                       		bcs.s	locret_6FE8
00007644 5438 F742                  		addq.b	#2,($FFFFF742).w
00007648                            
00007648                            locret_6FE8:
00007648 4E75                       		rts	
0000764A                            ; ===========================================================================
0000764A                            
0000764A                            loc_6FEA:
0000764A 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007650 6400                       		bcc.s	loc_6FF8
00007652 5538 F742                  		subq.b	#2,($FFFFF742).w
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            loc_6FF8:
00007658 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000765E 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007664 6400                       		bcc.s	locret_702C
00007666 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000766C 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007672 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007678 6400                       		bcc.s	locret_702C
0000767A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007680 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007686 6500                       		bcs.s	locret_702C
00007688 5438 F742                  		addq.b	#2,($FFFFF742).w
0000768C                            
0000768C                            locret_702C:
0000768C 4E75                       		rts	
0000768E                            ; ===========================================================================
0000768E                            
0000768E                            loc_702E:
0000768E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007694 6400                       		bcc.s	loc_703C
00007696 5538 F742                  		subq.b	#2,($FFFFF742).w
0000769A 4E75                       		rts	
0000769C                            ; ===========================================================================
0000769C                            
0000769C                            loc_703C:
0000769C 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000076A2 6500                       		bcs.s	locret_704E
000076A4 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000076AA 5438 F742                  		addq.b	#2,($FFFFF742).w
000076AE                            
000076AE                            locret_704E:
000076AE 4E75                       		rts	
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            loc_7050:
000076B0 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000076B6 6500                       		bcs.s	locret_7072
000076B8 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000076BE 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000076C4 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_7072
000076CC 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076D2                            
000076D2                            locret_7072:
000076D2 4E75                       		rts	
000076D4                            ; ===========================================================================
000076D4                            
000076D4                            Resize_MZ2:
000076D4 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076DA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076E0 6500                       		bcs.s	locret_7088
000076E2 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076E8                            
000076E8                            locret_7088:
000076E8 4E75                       		rts	
000076EA                            ; ===========================================================================
000076EA                            
000076EA                            Resize_MZ3:
000076EA 7000                       		moveq	#0,d0
000076EC 1038 F742                  		move.b	($FFFFF742).w,d0
000076F0 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076F4 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076F8                            ; ===========================================================================
000076F8 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076FA 0000                       		dc.w Resize_MZ3end-off_7098
000076FC                            ; ===========================================================================
000076FC                            
000076FC                            Resize_MZ3boss:
000076FC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007702 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007708 6500                       		bcs.s	locret_70E8
0000770A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007710 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007716 6500                       		bcs.s	locret_70E8
00007718 6100 0000                  		bsr.w	SingleObjLoad
0000771C 6600                       		bne.s	loc_70D0
0000771E 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007722 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007728 337C 022C 000C             		move.w	#$22C,$C(a1)
0000772E                            
0000772E                            loc_70D0:
0000772E 303C 008C                  		move.w	#$8C,d0
00007732 6100 9E98                  		bsr.w	PlaySound	; play boss music
00007736 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000773C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007740 7011                       		moveq	#$11,d0
00007742 6000 A072                  		bra.w	LoadPLC		; load boss patterns
00007746                            ; ===========================================================================
00007746                            
00007746                            locret_70E8:
00007746 4E75                       		rts	
00007748                            ; ===========================================================================
00007748                            
00007748                            Resize_MZ3end:
00007748 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000774E 4E75                       		rts	
00007750                            ; ===========================================================================
00007750                            ; ---------------------------------------------------------------------------
00007750                            ; Star Light Zone dynamic screen resizing
00007750                            ; ---------------------------------------------------------------------------
00007750                            
00007750                            Resize_SLZ:				; XREF: Resize_Index
00007750 7000                       		moveq	#0,d0
00007752 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007756 D040                       		add.w	d0,d0
00007758 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000775C 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007760                            ; ===========================================================================
00007760 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007762 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007764 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007766                            ; ===========================================================================
00007766                            
00007766                            Resize_SLZ1:
00007766 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000776C 4E75                       		rts	
0000776E                            
0000776E                            Resize_SLZ2:
0000776E 4E75                       		rts	
00007770                            ; ===========================================================================
00007770                            
00007770                            Resize_SLZ3:
00007770 7000                       		moveq	#0,d0
00007772 1038 F742                  		move.b	($FFFFF742).w,d0
00007776 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000777A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000777E                            ; ===========================================================================
0000777E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007780 0000                       		dc.w Resize_SLZ3boss-off_7118
00007782 0000                       		dc.w Resize_SLZ3end-off_7118
00007784                            ; ===========================================================================
00007784                            
00007784                            Resize_SLZ3main:
00007784 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000778A 6500                       		bcs.s	locret_7130
0000778C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007792 5438 F742                  		addq.b	#2,($FFFFF742).w
00007796                            
00007796                            locret_7130:
00007796 4E75                       		rts	
00007798                            ; ===========================================================================
00007798                            
00007798                            Resize_SLZ3boss:
00007798 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000779E 6500                       		bcs.s	locret_715C
000077A0 6100 0000                  		bsr.w	SingleObjLoad
000077A4 6600                       		bne.s	loc_7144
000077A6 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000077AA                            
000077AA                            loc_7144:
000077AA 303C 008C                  		move.w	#$8C,d0
000077AE 6100 9E1C                  		bsr.w	PlaySound	; play boss music
000077B2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077B8 5438 F742                  		addq.b	#2,($FFFFF742).w
000077BC 7011                       		moveq	#$11,d0
000077BE 6000 9FF6                  		bra.w	LoadPLC		; load boss patterns
000077C2                            ; ===========================================================================
000077C2                            
000077C2                            locret_715C:
000077C2 4E75                       		rts	
000077C4                            ; ===========================================================================
000077C4                            
000077C4                            Resize_SLZ3end:
000077C4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077CA 4E75                       		rts
000077CC 4E75                       		rts
000077CE                            ; ===========================================================================
000077CE                            ; ---------------------------------------------------------------------------
000077CE                            ; Spring Yard Zone dynamic screen resizing
000077CE                            ; ---------------------------------------------------------------------------
000077CE                            
000077CE                            Resize_SYZ:				; XREF: Resize_Index
000077CE 7000                       		moveq	#0,d0
000077D0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077D4 D040                       		add.w	d0,d0
000077D6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000077DA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077DE                            ; ===========================================================================
000077DE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077E0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077E2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077E4                            ; ===========================================================================
000077E4                            
000077E4                            Resize_SYZ1:
000077E4 4E75                       		rts	
000077E6                            ; ===========================================================================
000077E6                            
000077E6                            Resize_SYZ2:
000077E6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077EC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077F2 6500                       		bcs.s	locret_71A2
000077F4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077FA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007800 6500                       		bcs.s	locret_71A2
00007802 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007808                            
00007808                            locret_71A2:
00007808 4E75                       		rts	
0000780A                            ; ===========================================================================
0000780A                            
0000780A                            Resize_SYZ3:
0000780A 7000                       		moveq	#0,d0
0000780C 1038 F742                  		move.b	($FFFFF742).w,d0
00007810 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007814 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007818                            ; ===========================================================================
00007818 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000781A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000781C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000781E                            ; ===========================================================================
0000781E                            
0000781E                            Resize_SYZ3main:
0000781E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007824 6500                       		bcs.s	locret_71CE
00007826 6100 0000                  		bsr.w	SingleObjLoad
0000782A 6600                       		bne.s	locret_71CE
0000782C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007830 5438 F742                  		addq.b	#2,($FFFFF742).w
00007834                            
00007834                            locret_71CE:
00007834 4E75                       		rts	
00007836                            ; ===========================================================================
00007836                            
00007836                            Resize_SYZ3boss:
00007836 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000783C 6500                       		bcs.s	locret_7200
0000783E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007844 6100 0000                  		bsr.w	SingleObjLoad
00007848 6600                       		bne.s	loc_71EC
0000784A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000784E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007852                            
00007852                            loc_71EC:
00007852 303C 008C                  		move.w	#$8C,d0
00007856 6100 9D74                  		bsr.w	PlaySound	; play boss music
0000785A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007860 7011                       		moveq	#$11,d0
00007862 6000 9F52                  		bra.w	LoadPLC		; load boss patterns
00007866                            ; ===========================================================================
00007866                            
00007866                            locret_7200:
00007866 4E75                       		rts	
00007868                            ; ===========================================================================
00007868                            
00007868                            Resize_SYZ3end:
00007868 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000786E 4E75                       		rts	
00007870                            ; ===========================================================================
00007870                            ; ---------------------------------------------------------------------------
00007870                            ; Scrap	Brain Zone dynamic screen resizing
00007870                            ; ---------------------------------------------------------------------------
00007870                            
00007870                            Resize_SBZ:				; XREF: Resize_Index
00007870 7000                       		moveq	#0,d0
00007872 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007876 D040                       		add.w	d0,d0
00007878 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000787C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007880                            ; ===========================================================================
00007880 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007882 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007884 0000                       		dc.w Resize_FZ-Resize_SBZx
00007886                            ; ===========================================================================
00007886                            
00007886                            Resize_SBZ1:
00007886 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000788C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007892 6500                       		bcs.s	locret_7242
00007894 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000789A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000078A0 6500                       		bcs.s	locret_7242
000078A2 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000078A8                            
000078A8                            locret_7242:
000078A8 4E75                       		rts	
000078AA                            ; ===========================================================================
000078AA                            
000078AA                            Resize_SBZ2:
000078AA 7000                       		moveq	#0,d0
000078AC 1038 F742                  		move.b	($FFFFF742).w,d0
000078B0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000078B4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000078B8                            ; ===========================================================================
000078B8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000078BA 0000                       		dc.w Resize_SBZ2boss-off_7252
000078BC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000078BE 0000                       		dc.w Resize_SBZ2end-off_7252
000078C0                            ; ===========================================================================
000078C0                            
000078C0                            Resize_SBZ2main:
000078C0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000078C6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000078CC 6500                       		bcs.s	locret_727A
000078CE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000078D4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000078DA 6500                       		bcs.s	locret_727A
000078DC 5438 F742                  		addq.b	#2,($FFFFF742).w
000078E0                            
000078E0                            locret_727A:
000078E0 4E75                       		rts	
000078E2                            ; ===========================================================================
000078E2                            
000078E2                            Resize_SBZ2boss:
000078E2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078E8 6500                       		bcs.s	locret_7298
000078EA 6100 0000                  		bsr.w	SingleObjLoad
000078EE 6600                       		bne.s	locret_7298
000078F0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F8 701E                       		moveq	#$1E,d0
000078FA 6000 9EBA                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078FE                            ; ===========================================================================
000078FE                            
000078FE                            locret_7298:
000078FE 4E75                       		rts	
00007900                            ; ===========================================================================
00007900                            
00007900                            Resize_SBZ2boss2:
00007900 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007906 6500                       		bcs.s	loc_72B6
00007908 6100 0000                  		bsr.w	SingleObjLoad
0000790C 6600                       		bne.s	loc_72B0
0000790E 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007912 5438 F742                  		addq.b	#2,($FFFFF742).w
00007916                            
00007916                            loc_72B0:
00007916 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000791C                            
0000791C                            loc_72B6:
0000791C 6000                       		bra.s	loc_72C2
0000791E                            ; ===========================================================================
0000791E                            
0000791E                            Resize_SBZ2end:
0000791E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007924 6500                       		bcs.s	loc_72C2
00007926 4E75                       		rts	
00007928                            ; ===========================================================================
00007928                            
00007928                            loc_72C2:
00007928 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000792E 4E75                       		rts	
00007930                            ; ===========================================================================
00007930                            
00007930                            Resize_FZ:
00007930 7000                       		moveq	#0,d0
00007932 1038 F742                  		move.b	($FFFFF742).w,d0
00007936 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000793A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000793E                            ; ===========================================================================
0000793E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007942 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007946 0000                       		dc.w Resize_FZend2-off_72D8
00007948                            ; ===========================================================================
00007948                            
00007948                            Resize_FZmain:
00007948 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000794E 6500                       		bcs.s	loc_72F4
00007950 5438 F742                  		addq.b	#2,($FFFFF742).w
00007954 701F                       		moveq	#$1F,d0
00007956 6100 9E5E                  		bsr.w	LoadPLC		; load FZ boss patterns
0000795A                            
0000795A                            loc_72F4:
0000795A 60CC                       		bra.s	loc_72C2
0000795C                            ; ===========================================================================
0000795C                            
0000795C                            Resize_FZboss:
0000795C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007962 6500                       		bcs.s	loc_7312
00007964 6100 0000                  		bsr.w	SingleObjLoad
00007968 6600                       		bne.s	loc_7312
0000796A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000796E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007972 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007978                            
00007978                            loc_7312:
00007978 60AE                       		bra.s	loc_72C2
0000797A                            ; ===========================================================================
0000797A                            
0000797A                            Resize_FZend:
0000797A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007980 6500                       		bcs.s	loc_7320
00007982 5438 F742                  		addq.b	#2,($FFFFF742).w
00007986                            
00007986                            loc_7320:
00007986 60A0                       		bra.s	loc_72C2
00007988                            ; ===========================================================================
00007988                            
00007988                            locret_7322:
00007988 4E75                       		rts	
0000798A                            ; ===========================================================================
0000798A                            
0000798A                            Resize_FZend2:
0000798A 609C                       		bra.s	loc_72C2
0000798C                            ; ===========================================================================
0000798C                            ; ---------------------------------------------------------------------------
0000798C                            ; Ending sequence dynamic screen resizing (empty)
0000798C                            ; ---------------------------------------------------------------------------
0000798C                            
0000798C                            Resize_Ending:				; XREF: Resize_Index
0000798C 4E75                       		rts	
0000798E                            ; ===========================================================================
0000798E                            ; ---------------------------------------------------------------------------
0000798E                            ; Object 11 - GHZ bridge
0000798E                            ; ---------------------------------------------------------------------------
0000798E                            
0000798E                            Obj11:					; XREF: Obj_Index
0000798E 7000                       		moveq	#0,d0
00007990 1028 0024                  		move.b	$24(a0),d0
00007994 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007998 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000799C                            ; ===========================================================================
0000799C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000079A0 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000079A4 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000079A8                            ; ===========================================================================
000079A8                            
000079A8                            Obj11_Main:				; XREF: Obj11_Index
000079A8 5428 0024                  		addq.b	#2,$24(a0)
000079AC 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000079B4 317C 438E 0002             		move.w	#$438E,2(a0)
000079BA 117C 0004 0001             		move.b	#4,1(a0)
000079C0 117C 0003 0018             		move.b	#3,$18(a0)
000079C6 117C 0080 0019             		move.b	#$80,$19(a0)
000079CC 3428 000C                  		move.w	$C(a0),d2
000079D0 3628 0008                  		move.w	8(a0),d3
000079D4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000079D6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000079DA 7200                       		moveq	#0,d1
000079DC 1212                       		move.b	(a2),d1		; copy a2 to d1
000079DE 14FC 0000                  		move.b	#0,(a2)+
000079E2 3001                       		move.w	d1,d0
000079E4 E248                       		lsr.w	#1,d0
000079E6 E948                       		lsl.w	#4,d0
000079E8 9640                       		sub.w	d0,d3
000079EA 5501                       		subq.b	#2,d1
000079EC 6500                       		bcs.s	Obj11_Action
000079EE                            
000079EE                            Obj11_MakeBdg:
000079EE 6100 0000                  		bsr.w	SingleObjLoad
000079F2 6600                       		bne.s	Obj11_Action
000079F4 5228 0028                  		addq.b	#1,$28(a0)
000079F8 B668 0008                  		cmp.w	8(a0),d3
000079FC 6600                       		bne.s	loc_73B8
000079FE 0643 0010                  		addi.w	#$10,d3
00007A02 3142 000C                  		move.w	d2,$C(a0)
00007A06 3142 003C                  		move.w	d2,$3C(a0)
00007A0A 3A08                       		move.w	a0,d5
00007A0C 0445 D000                  		subi.w	#-$3000,d5
00007A10 EC4D                       		lsr.w	#6,d5
00007A12 0245 007F                  		andi.w	#$7F,d5
00007A16 14C5                       		move.b	d5,(a2)+
00007A18 5228 0028                  		addq.b	#1,$28(a0)
00007A1C                            
00007A1C                            loc_73B8:				; XREF: ROM:00007398j
00007A1C 3A09                       		move.w	a1,d5
00007A1E 0445 D000                  		subi.w	#-$3000,d5
00007A22 EC4D                       		lsr.w	#6,d5
00007A24 0245 007F                  		andi.w	#$7F,d5
00007A28 14C5                       		move.b	d5,(a2)+
00007A2A 137C 000A 0024             		move.b	#$A,$24(a1)
00007A30 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A32 3342 000C                  		move.w	d2,$C(a1)
00007A36 3342 003C                  		move.w	d2,$3C(a1)
00007A3A 3343 0008                  		move.w	d3,8(a1)
00007A3E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A46 337C 438E 0002             		move.w	#$438E,2(a1)
00007A4C 137C 0004 0001             		move.b	#4,1(a1)
00007A52 137C 0003 0018             		move.b	#3,$18(a1)
00007A58 137C 0008 0019             		move.b	#8,$19(a1)
00007A5E 0643 0010                  		addi.w	#$10,d3
00007A62 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A66                            
00007A66                            Obj11_Action:				; XREF: Obj11_Index
00007A66 6100                       		bsr.s	Obj11_Solid
00007A68 4A28 003E                  		tst.b	$3E(a0)
00007A6C 6700                       		beq.s	Obj11_Display
00007A6E 5928 003E                  		subq.b	#4,$3E(a0)
00007A72 6100 0000                  		bsr.w	Obj11_Bend
00007A76                            
00007A76                            Obj11_Display:
00007A76 6100 0000                  		bsr.w	DisplaySprite
00007A7A 6000 0000                  		bra.w	Obj11_ChkDel
00007A7E                            
00007A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A7E                            
00007A7E                            
00007A7E                            Obj11_Solid:				; XREF: Obj11_Action
00007A7E 7200                       		moveq	#0,d1
00007A80 1228 0028                  		move.b	$28(a0),d1
00007A84 E749                       		lsl.w	#3,d1
00007A86 3401                       		move.w	d1,d2
00007A88 5041                       		addq.w	#8,d1
00007A8A D442                       		add.w	d2,d2
00007A8C 43F8 D000                  		lea	($FFFFD000).w,a1
00007A90 4A69 0012                  		tst.w	$12(a1)
00007A94 6B00 0000                  		bmi.w	locret_751E
00007A98 3029 0008                  		move.w	8(a1),d0
00007A9C 9068 0008                  		sub.w	8(a0),d0
00007AA0 D041                       		add.w	d1,d0
00007AA2 6B00 0000                  		bmi.w	locret_751E
00007AA6 B042                       		cmp.w	d2,d0
00007AA8 6400 0000                  		bcc.w	locret_751E
00007AAC 6000                       		bra.s	Platform2
00007AAE                            ; End of function Obj11_Solid
00007AAE                            
00007AAE                            ; ---------------------------------------------------------------------------
00007AAE                            ; Platform subroutine
00007AAE                            ; ---------------------------------------------------------------------------
00007AAE                            
00007AAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AAE                            
00007AAE                            
00007AAE                            PlatformObject:
00007AAE 43F8 D000                  		lea	($FFFFD000).w,a1
00007AB2 4A69 0012                  		tst.w	$12(a1)
00007AB6 6B00 0000                  		bmi.w	locret_751E
00007ABA 3029 0008                  		move.w	8(a1),d0
00007ABE 9068 0008                  		sub.w	8(a0),d0
00007AC2 D041                       		add.w	d1,d0
00007AC4 6B00 0000                  		bmi.w	locret_751E
00007AC8 D241                       		add.w	d1,d1
00007ACA B041                       		cmp.w	d1,d0
00007ACC 6400 0000                  		bcc.w	locret_751E
00007AD0                            
00007AD0                            Platform2:
00007AD0 3028 000C                  		move.w	$C(a0),d0
00007AD4 5140                       		subq.w	#8,d0
00007AD6                            
00007AD6                            Platform3:
00007AD6 3429 000C                  		move.w	$C(a1),d2
00007ADA 1229 0016                  		move.b	$16(a1),d1
00007ADE 4881                       		ext.w	d1
00007AE0 D242                       		add.w	d2,d1
00007AE2 5841                       		addq.w	#4,d1
00007AE4 9041                       		sub.w	d1,d0
00007AE6 6200 0000                  		bhi.w	locret_751E
00007AEA 0C40 FFF0                  		cmpi.w	#-$10,d0
00007AEE 6500 0000                  		bcs.w	locret_751E
00007AF2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007AF6 6B00 0000                  		bmi.w	locret_751E
00007AFA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007B00 6400 0000                  		bcc.w	locret_751E
00007B04 D440                       		add.w	d0,d2
00007B06 5642                       		addq.w	#3,d2
00007B08 3342 000C                  		move.w	d2,$C(a1)
00007B0C 5428 0024                  		addq.b	#2,$24(a0)
00007B10                            
00007B10                            loc_74AE:
00007B10 0829 0003 0022             		btst	#3,$22(a1)
00007B16 6700                       		beq.s	loc_74DC
00007B18 7000                       		moveq	#0,d0
00007B1A 1029 003D                  		move.b	$3D(a1),d0
00007B1E ED48                       		lsl.w	#6,d0
00007B20 0680 00FF D000             		addi.l	#$FFD000,d0
00007B26 2440                       		movea.l	d0,a2
00007B28 08AA 0003 0022             		bclr	#3,$22(a2)
00007B2E 422A 0025                  		clr.b	$25(a2)
00007B32 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B38 6600                       		bne.s	loc_74DC
00007B3A 552A 0024                  		subq.b	#2,$24(a2)
00007B3E                            
00007B3E                            loc_74DC:
00007B3E 3008                       		move.w	a0,d0
00007B40 0440 D000                  		subi.w	#-$3000,d0
00007B44 EC48                       		lsr.w	#6,d0
00007B46 0240 007F                  		andi.w	#$7F,d0
00007B4A 1340 003D                  		move.b	d0,$3D(a1)
00007B4E 137C 0000 0026             		move.b	#0,$26(a1)
00007B54 337C 0000 0012             		move.w	#0,$12(a1)
00007B5A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B60 0829 0001 0022             		btst	#1,$22(a1)
00007B66 6700                       		beq.s	loc_7512
00007B68 2F08                       		move.l	a0,-(sp)
00007B6A 2049                       		movea.l	a1,a0
00007B6C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B72 205F                       		movea.l	(sp)+,a0
00007B74                            
00007B74                            loc_7512:
00007B74 08E9 0003 0022             		bset	#3,$22(a1)
00007B7A 08E8 0003 0022             		bset	#3,$22(a0)
00007B80                            
00007B80                            locret_751E:
00007B80 4E75                       		rts	
00007B82                            ; End of function PlatformObject
00007B82                            
00007B82                            ; ---------------------------------------------------------------------------
00007B82                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B82                            ; ---------------------------------------------------------------------------
00007B82                            
00007B82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B82                            
00007B82                            
00007B82                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B82 43F8 D000                  		lea	($FFFFD000).w,a1
00007B86 4A69 0012                  		tst.w	$12(a1)
00007B8A 6B00 FFF4                  		bmi.w	locret_751E
00007B8E 3029 0008                  		move.w	8(a1),d0
00007B92 9068 0008                  		sub.w	8(a0),d0
00007B96 D041                       		add.w	d1,d0
00007B98 6BE6                       		bmi.s	locret_751E
00007B9A D241                       		add.w	d1,d1
00007B9C B041                       		cmp.w	d1,d0
00007B9E 64E0                       		bcc.s	locret_751E
00007BA0 0828 0000 0001             		btst	#0,1(a0)
00007BA6 6700                       		beq.s	loc_754A
00007BA8 4640                       		not.w	d0
00007BAA D041                       		add.w	d1,d0
00007BAC                            
00007BAC                            loc_754A:
00007BAC E248                       		lsr.w	#1,d0
00007BAE 7600                       		moveq	#0,d3
00007BB0 1632 0000                  		move.b	(a2,d0.w),d3
00007BB4 3028 000C                  		move.w	$C(a0),d0
00007BB8 9043                       		sub.w	d3,d0
00007BBA 6000 FF1A                  		bra.w	Platform3
00007BBE                            ; End of function SlopeObject
00007BBE                            
00007BBE                            
00007BBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBE                            
00007BBE                            
00007BBE                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007BBE 43F8 D000                  		lea	($FFFFD000).w,a1
00007BC2 4A69 0012                  		tst.w	$12(a1)
00007BC6 6B00 FFB8                  		bmi.w	locret_751E
00007BCA 3029 0008                  		move.w	8(a1),d0
00007BCE 9068 0008                  		sub.w	8(a0),d0
00007BD2 D041                       		add.w	d1,d0
00007BD4 6B00 FFAA                  		bmi.w	locret_751E
00007BD8 D241                       		add.w	d1,d1
00007BDA B041                       		cmp.w	d1,d0
00007BDC 6400 FFA2                  		bcc.w	locret_751E
00007BE0 3028 000C                  		move.w	$C(a0),d0
00007BE4 9043                       		sub.w	d3,d0
00007BE6 6000 FEEE                  		bra.w	Platform3
00007BEA                            ; End of function Obj15_Solid
00007BEA                            
00007BEA                            ; ===========================================================================
00007BEA                            
00007BEA                            Obj11_Action2:				; XREF: Obj11_Index
00007BEA 6100                       		bsr.s	Obj11_WalkOff
00007BEC 6100 0000                  		bsr.w	DisplaySprite
00007BF0 6000 0000                  		bra.w	Obj11_ChkDel
00007BF4                            
00007BF4                            ; ---------------------------------------------------------------------------
00007BF4                            ; Subroutine allowing Sonic to walk off a bridge
00007BF4                            ; ---------------------------------------------------------------------------
00007BF4                            
00007BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF4                            
00007BF4                            
00007BF4                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BF4 7200                       		moveq	#0,d1
00007BF6 1228 0028                  		move.b	$28(a0),d1
00007BFA E749                       		lsl.w	#3,d1
00007BFC 3401                       		move.w	d1,d2
00007BFE 5041                       		addq.w	#8,d1
00007C00 6100                       		bsr.s	ExitPlatform2
00007C02 6400                       		bcc.s	locret_75BE
00007C04 E848                       		lsr.w	#4,d0
00007C06 1140 003F                  		move.b	d0,$3F(a0)
00007C0A 1028 003E                  		move.b	$3E(a0),d0
00007C0E 0C00 0040                  		cmpi.b	#$40,d0
00007C12 6700                       		beq.s	loc_75B6
00007C14 5828 003E                  		addq.b	#4,$3E(a0)
00007C18                            
00007C18                            loc_75B6:
00007C18 6100 0000                  		bsr.w	Obj11_Bend
00007C1C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007C20                            
00007C20                            locret_75BE:
00007C20 4E75                       		rts	
00007C22                            ; End of function Obj11_WalkOff
00007C22                            
00007C22                            ; ---------------------------------------------------------------------------
00007C22                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007C22                            ; ---------------------------------------------------------------------------
00007C22                            
00007C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C22                            
00007C22                            
00007C22                            ExitPlatform:
00007C22 3401                       		move.w	d1,d2
00007C24                            
00007C24                            ExitPlatform2:
00007C24 D442                       		add.w	d2,d2
00007C26 43F8 D000                  		lea	($FFFFD000).w,a1
00007C2A 0829 0001 0022             		btst	#1,$22(a1)
00007C30 6600                       		bne.s	loc_75E0
00007C32 3029 0008                  		move.w	8(a1),d0
00007C36 9068 0008                  		sub.w	8(a0),d0
00007C3A D041                       		add.w	d1,d0
00007C3C 6B00                       		bmi.s	loc_75E0
00007C3E B042                       		cmp.w	d2,d0
00007C40 6500                       		bcs.s	locret_75F2
00007C42                            
00007C42                            loc_75E0:
00007C42 08A9 0003 0022             		bclr	#3,$22(a1)
00007C48 117C 0002 0024             		move.b	#2,$24(a0)
00007C4E 08A8 0003 0022             		bclr	#3,$22(a0)
00007C54                            
00007C54                            locret_75F2:
00007C54 4E75                       		rts	
00007C56                            ; End of function ExitPlatform
00007C56                            
00007C56                            
00007C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C56                            
00007C56                            
00007C56                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C56 7000                       		moveq	#0,d0
00007C58 1028 003F                  		move.b	$3F(a0),d0
00007C5C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C60 ED48                       		lsl.w	#6,d0
00007C62 0680 00FF D000             		addi.l	#$FFD000,d0
00007C68 2440                       		movea.l	d0,a2
00007C6A 43F8 D000                  		lea	($FFFFD000).w,a1
00007C6E 302A 000C                  		move.w	$C(a2),d0
00007C72 5140                       		subq.w	#8,d0
00007C74 7200                       		moveq	#0,d1
00007C76 1229 0016                  		move.b	$16(a1),d1
00007C7A 9041                       		sub.w	d1,d0
00007C7C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C80 4E75                       		rts	
00007C82                            ; End of function Obj11_MoveSonic
00007C82                            
00007C82                            
00007C82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C82                            
00007C82                            
00007C82                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C82 1028 003E                  		move.b	$3E(a0),d0
00007C86 6100 B07A                  		bsr.w	CalcSine
00007C8A 3800                       		move.w	d0,d4
00007C8C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C92 7000                       		moveq	#0,d0
00007C94 1028 0028                  		move.b	$28(a0),d0
00007C98 E948                       		lsl.w	#4,d0
00007C9A 7600                       		moveq	#0,d3
00007C9C 1628 003F                  		move.b	$3F(a0),d3
00007CA0 3403                       		move.w	d3,d2
00007CA2 D640                       		add.w	d0,d3
00007CA4 7A00                       		moveq	#0,d5
00007CA6 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007CAC 1A35 3000                  		move.b	(a5,d3.w),d5
00007CB0 0243 000F                  		andi.w	#$F,d3
00007CB4 E94B                       		lsl.w	#4,d3
00007CB6 47F4 3000                  		lea	(a4,d3.w),a3
00007CBA 45E8 0029                  		lea	$29(a0),a2
00007CBE                            
00007CBE                            loc_765C:
00007CBE 7000                       		moveq	#0,d0
00007CC0 101A                       		move.b	(a2)+,d0
00007CC2 ED48                       		lsl.w	#6,d0
00007CC4 0680 00FF D000             		addi.l	#$FFD000,d0
00007CCA 2240                       		movea.l	d0,a1
00007CCC 7000                       		moveq	#0,d0
00007CCE 101B                       		move.b	(a3)+,d0
00007CD0 5240                       		addq.w	#1,d0
00007CD2 C0C5                       		mulu.w	d5,d0
00007CD4 C0C4                       		mulu.w	d4,d0
00007CD6 4840                       		swap	d0
00007CD8 D069 003C                  		add.w	$3C(a1),d0
00007CDC 3340 000C                  		move.w	d0,$C(a1)
00007CE0 51CA FFDC                  		dbf	d2,loc_765C
00007CE4 7000                       		moveq	#0,d0
00007CE6 1028 0028                  		move.b	$28(a0),d0
00007CEA 7600                       		moveq	#0,d3
00007CEC 1628 003F                  		move.b	$3F(a0),d3
00007CF0 5203                       		addq.b	#1,d3
00007CF2 9600                       		sub.b	d0,d3
00007CF4 4403                       		neg.b	d3
00007CF6 6B00                       		bmi.s	locret_76CA
00007CF8 3403                       		move.w	d3,d2
00007CFA E94B                       		lsl.w	#4,d3
00007CFC 47F4 3000                  		lea	(a4,d3.w),a3
00007D00 D6C2                       		adda.w	d2,a3
00007D02 5342                       		subq.w	#1,d2
00007D04 6500                       		bcs.s	locret_76CA
00007D06                            
00007D06                            loc_76A4:
00007D06 7000                       		moveq	#0,d0
00007D08 101A                       		move.b	(a2)+,d0
00007D0A ED48                       		lsl.w	#6,d0
00007D0C 0680 00FF D000             		addi.l	#$FFD000,d0
00007D12 2240                       		movea.l	d0,a1
00007D14 7000                       		moveq	#0,d0
00007D16 1023                       		move.b	-(a3),d0
00007D18 5240                       		addq.w	#1,d0
00007D1A C0C5                       		mulu.w	d5,d0
00007D1C C0C4                       		mulu.w	d4,d0
00007D1E 4840                       		swap	d0
00007D20 D069 003C                  		add.w	$3C(a1),d0
00007D24 3340 000C                  		move.w	d0,$C(a1)
00007D28 51CA FFDC                  		dbf	d2,loc_76A4
00007D2C                            
00007D2C                            locret_76CA:
00007D2C 4E75                       		rts	
00007D2E                            ; End of function Obj11_Bend
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            ; ---------------------------------------------------------------------------
00007D2E                            ; GHZ bridge-bending data
00007D2E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D2E                            ; ---------------------------------------------------------------------------
00007D2E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E3E                            		even
00007E3E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F3E                            		even
00007F3E                            
00007F3E                            ; ===========================================================================
00007F3E                            
00007F3E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F3E 3028 0008                  		move.w	8(a0),d0
00007F42 0240 FF80                  		andi.w	#$FF80,d0
00007F46 3238 F700                  		move.w	($FFFFF700).w,d1
00007F4A 0441 0080                  		subi.w	#$80,d1
00007F4E 0241 FF80                  		andi.w	#$FF80,d1
00007F52 9041                       		sub.w	d1,d0
00007F54 0C40 0280                  		cmpi.w	#$280,d0
00007F58 6200 0000                  		bhi.w	Obj11_DelAll
00007F5C 4E75                       		rts	
00007F5E                            ; ===========================================================================
00007F5E                            
00007F5E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F5E 7400                       		moveq	#0,d2
00007F60 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F64 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F66 5302                       		subq.b	#1,d2		; subtract 1
00007F68 6500                       		bcs.s	Obj11_Delete
00007F6A                            
00007F6A                            Obj11_DelLoop:
00007F6A 7000                       		moveq	#0,d0
00007F6C 101A                       		move.b	(a2)+,d0
00007F6E ED48                       		lsl.w	#6,d0
00007F70 0680 00FF D000             		addi.l	#$FFD000,d0
00007F76 2240                       		movea.l	d0,a1
00007F78 B048                       		cmp.w	a0,d0
00007F7A 6700                       		beq.s	loc_791E
00007F7C 6100 0000                  		bsr.w	DeleteObject2
00007F80                            
00007F80                            loc_791E:
00007F80 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F84                            
00007F84                            Obj11_Delete:
00007F84 6100 0000                  		bsr.w	DeleteObject
00007F88 4E75                       		rts	
00007F8A                            ; ===========================================================================
00007F8A                            
00007F8A                            Obj11_Delete2:				; XREF: Obj11_Index
00007F8A 6100 0000                  		bsr.w	DeleteObject
00007F8E 4E75                       		rts	
00007F90                            ; ===========================================================================
00007F90                            
00007F90                            Obj11_Display2:				; XREF: Obj11_Index
00007F90 6100 0000                  		bsr.w	DisplaySprite
00007F94 4E75                       		rts	
00007F96                            ; ===========================================================================
00007F96                            ; ---------------------------------------------------------------------------
00007F96                            ; Sprite mappings - GHZ	bridge
00007F96                            ; ---------------------------------------------------------------------------
00007F96                            Map_obj11:
00007F96                            	include "_maps\obj11.asm"
00007F96                            ; ---------------------------------------------------------------------------
00007F96                            ; Sprite mappings - GHZ	bridge
00007F96                            ; ---------------------------------------------------------------------------
00007F96 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F9A 0000                       		dc.w byte_794B-Map_obj11
00007F9C 01                         byte_793A:	dc.b 1
00007F9D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007FA2 02                         byte_7940:	dc.b 2
00007FA3 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007FA8 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007FAD 01                         byte_794B:	dc.b 1
00007FAE FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007FB4 00                         		even
00007FB4 00                         		even
00007FB4                            
00007FB4                            ; ===========================================================================
00007FB4                            ; ---------------------------------------------------------------------------
00007FB4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007FB4                            ;	    - spiked ball on a chain (SBZ)
00007FB4                            ; ---------------------------------------------------------------------------
00007FB4                            
00007FB4                            Obj15:					; XREF: Obj_Index
00007FB4 7000                       		moveq	#0,d0
00007FB6 1028 0024                  		move.b	$24(a0),d0
00007FBA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007FBE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007FC2                            ; ===========================================================================
00007FC2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007FC6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007FCA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007FCE 0000                       		dc.w Obj15_Action-Obj15_Index
00007FD0                            ; ===========================================================================
00007FD0                            
00007FD0                            Obj15_Main:				; XREF: Obj15_Index
00007FD0 5428 0024                  		addq.b	#2,$24(a0)
00007FD4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FDC 317C 4380 0002             		move.w	#$4380,2(a0)
00007FE2 117C 0004 0001             		move.b	#4,1(a0)
00007FE8 117C 0003 0018             		move.b	#3,$18(a0)
00007FEE 117C 0018 0019             		move.b	#$18,$19(a0)
00007FF4 117C 0008 0016             		move.b	#8,$16(a0)
00007FFA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008000 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008006 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000800C 6600                       		bne.s	Obj15_NotSLZ
0000800E 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008016 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000801C 117C 0020 0019             		move.b	#$20,$19(a0)
00008022 117C 0010 0016             		move.b	#$10,$16(a0)
00008028 117C 0099 0020             		move.b	#$99,$20(a0)
0000802E                            
0000802E                            Obj15_NotSLZ:
0000802E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008034 6600                       		bne.s	Obj15_SetLength
00008036 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000803E 317C 0391 0002             		move.w	#$391,2(a0)
00008044 117C 0018 0019             		move.b	#$18,$19(a0)
0000804A 117C 0018 0016             		move.b	#$18,$16(a0)
00008050 117C 0086 0020             		move.b	#$86,$20(a0)
00008056 117C 000C 0024             		move.b	#$C,$24(a0)
0000805C                            
0000805C                            Obj15_SetLength:
0000805C 1810                       		move.b	0(a0),d4
0000805E 7200                       		moveq	#0,d1
00008060 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008064 1212                       		move.b	(a2),d1		; move a2 to d1
00008066 3F01                       		move.w	d1,-(sp)
00008068 0241 000F                  		andi.w	#$F,d1
0000806C 14FC 0000                  		move.b	#0,(a2)+
00008070 3601                       		move.w	d1,d3
00008072 E94B                       		lsl.w	#4,d3
00008074 5003                       		addq.b	#8,d3
00008076 1143 003C                  		move.b	d3,$3C(a0)
0000807A 5103                       		subq.b	#8,d3
0000807C 4A28 001A                  		tst.b	$1A(a0)
00008080 6700                       		beq.s	Obj15_MakeChain
00008082 5003                       		addq.b	#8,d3
00008084 5341                       		subq.w	#1,d1
00008086                            
00008086                            Obj15_MakeChain:
00008086 6100 0000                  		bsr.w	SingleObjLoad
0000808A 6600                       		bne.s	loc_7A92
0000808C 5228 0028                  		addq.b	#1,$28(a0)
00008090 3A09                       		move.w	a1,d5
00008092 0445 D000                  		subi.w	#-$3000,d5
00008096 EC4D                       		lsr.w	#6,d5
00008098 0245 007F                  		andi.w	#$7F,d5
0000809C 14C5                       		move.b	d5,(a2)+
0000809E 137C 000A 0024             		move.b	#$A,$24(a1)
000080A4 1284                       		move.b	d4,0(a1)	; load swinging	object
000080A6 2368 0004 0004             		move.l	4(a0),4(a1)
000080AC 3368 0002 0002             		move.w	2(a0),2(a1)
000080B2 08A9 0006 0002             		bclr	#6,2(a1)
000080B8 137C 0004 0001             		move.b	#4,1(a1)
000080BE 137C 0004 0018             		move.b	#4,$18(a1)
000080C4 137C 0008 0019             		move.b	#8,$19(a1)
000080CA 137C 0001 001A             		move.b	#1,$1A(a1)
000080D0 1343 003C                  		move.b	d3,$3C(a1)
000080D4 0403 0010                  		subi.b	#$10,d3
000080D8 6400                       		bcc.s	loc_7A8E
000080DA 137C 0002 001A             		move.b	#2,$1A(a1)
000080E0 137C 0003 0018             		move.b	#3,$18(a1)
000080E6 08E9 0006 0002             		bset	#6,2(a1)
000080EC                            
000080EC                            loc_7A8E:
000080EC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080F0                            
000080F0                            loc_7A92:
000080F0 3A08                       		move.w	a0,d5
000080F2 0445 D000                  		subi.w	#-$3000,d5
000080F6 EC4D                       		lsr.w	#6,d5
000080F8 0245 007F                  		andi.w	#$7F,d5
000080FC 14C5                       		move.b	d5,(a2)+
000080FE 317C 4080 0026             		move.w	#$4080,$26(a0)
00008104 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000810A 321F                       		move.w	(sp)+,d1
0000810C 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008110 6700                       		beq.s	loc_7AD4	; if not, branch
00008112 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000811A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008120 117C 0001 001A             		move.b	#1,$1A(a0)
00008126 117C 0002 0018             		move.b	#2,$18(a0)
0000812C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008132                            
00008132                            loc_7AD4:
00008132 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008138 6700                       		beq.s	Obj15_Action	; if yes, branch
0000813A                            
0000813A                            Obj15_SetSolid:				; XREF: Obj15_Index
0000813A 7200                       		moveq	#0,d1
0000813C 1228 0019                  		move.b	$19(a0),d1
00008140 7600                       		moveq	#0,d3
00008142 1628 0016                  		move.b	$16(a0),d3
00008146 6100 FA76                  		bsr.w	Obj15_Solid
0000814A                            
0000814A                            Obj15_Action:				; XREF: Obj15_Index
0000814A 6100 0000                  		bsr.w	Obj15_Move
0000814E 6100 0000                  		bsr.w	DisplaySprite
00008152 6000 0000                  		bra.w	Obj15_ChkDel
00008156                            ; ===========================================================================
00008156                            
00008156                            Obj15_Action2:				; XREF: Obj15_Index
00008156 7200                       		moveq	#0,d1
00008158 1228 0019                  		move.b	$19(a0),d1
0000815C 6100 FAC4                  		bsr.w	ExitPlatform
00008160 3F28 0008                  		move.w	8(a0),-(sp)
00008164 6100 0000                  		bsr.w	Obj15_Move
00008168 341F                       		move.w	(sp)+,d2
0000816A 7600                       		moveq	#0,d3
0000816C 1628 0016                  		move.b	$16(a0),d3
00008170 5203                       		addq.b	#1,d3
00008172 6100 0000                  		bsr.w	MvSonicOnPtfm
00008176 6100 0000                  		bsr.w	DisplaySprite
0000817A 6000 0000                  		bra.w	Obj15_ChkDel
0000817E                            
0000817E 4E75                       		rts
00008180                            
00008180                            ; ---------------------------------------------------------------------------
00008180                            ; Subroutine to	change Sonic's position with a platform
00008180                            ; ---------------------------------------------------------------------------
00008180                            
00008180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008180                            
00008180                            
00008180                            MvSonicOnPtfm:
00008180 43F8 D000                  		lea	($FFFFD000).w,a1
00008184 3028 000C                  		move.w	$C(a0),d0
00008188 9043                       		sub.w	d3,d0
0000818A 6000                       		bra.s	MvSonic2
0000818C                            ; End of function MvSonicOnPtfm
0000818C                            
0000818C                            ; ---------------------------------------------------------------------------
0000818C                            ; Subroutine to	change Sonic's position with a platform
0000818C                            ; ---------------------------------------------------------------------------
0000818C                            
0000818C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000818C                            
0000818C                            
0000818C                            MvSonicOnPtfm2:
0000818C 43F8 D000                  		lea	($FFFFD000).w,a1
00008190 3028 000C                  		move.w	$C(a0),d0
00008194 0440 0009                  		subi.w	#9,d0
00008198                            
00008198                            MvSonic2:
00008198 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000819C 6B00                       		bmi.s	locret_7B62
0000819E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000081A4 6400                       		bcc.s	locret_7B62
000081A6 4A78 FE08                  		tst.w	($FFFFFE08).w
000081AA 6600                       		bne.s	locret_7B62
000081AC 7200                       		moveq	#0,d1
000081AE 1229 0016                  		move.b	$16(a1),d1
000081B2 9041                       		sub.w	d1,d0
000081B4 3340 000C                  		move.w	d0,$C(a1)
000081B8 9468 0008                  		sub.w	8(a0),d2
000081BC 9569 0008                  		sub.w	d2,8(a1)
000081C0                            
000081C0                            locret_7B62:
000081C0 4E75                       		rts	
000081C2                            ; End of function MvSonicOnPtfm2
000081C2                            
000081C2                            
000081C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C2                            
000081C2                            
000081C2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000081C2 1038 FE78                  		move.b	($FFFFFE78).w,d0
000081C6 323C 0080                  		move.w	#$80,d1
000081CA 0828 0000 0022             		btst	#0,$22(a0)
000081D0 6700                       		beq.s	loc_7B78
000081D2 4440                       		neg.w	d0
000081D4 D041                       		add.w	d1,d0
000081D6                            
000081D6                            loc_7B78:
000081D6 6000                       		bra.s	Obj15_Move2
000081D8                            ; End of function Obj15_Move
000081D8                            
000081D8                            
000081D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D8                            
000081D8                            
000081D8                            Obj48_Move:				; XREF: Obj48_Display2
000081D8 4A28 003D                  		tst.b	$3D(a0)
000081DC 6600                       		bne.s	loc_7B9C
000081DE 3028 003E                  		move.w	$3E(a0),d0
000081E2 5040                       		addq.w	#8,d0
000081E4 3140 003E                  		move.w	d0,$3E(a0)
000081E8 D168 0026                  		add.w	d0,$26(a0)
000081EC 0C40 0200                  		cmpi.w	#$200,d0
000081F0 6600                       		bne.s	loc_7BB6
000081F2 117C 0001 003D             		move.b	#1,$3D(a0)
000081F8 6000                       		bra.s	loc_7BB6
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            loc_7B9C:
000081FA 3028 003E                  		move.w	$3E(a0),d0
000081FE 5140                       		subq.w	#8,d0
00008200 3140 003E                  		move.w	d0,$3E(a0)
00008204 D168 0026                  		add.w	d0,$26(a0)
00008208 0C40 FE00                  		cmpi.w	#-$200,d0
0000820C 6600                       		bne.s	loc_7BB6
0000820E 117C 0000 003D             		move.b	#0,$3D(a0)
00008214                            
00008214                            loc_7BB6:
00008214 1028 0026                  		move.b	$26(a0),d0
00008218                            ; End of function Obj48_Move
00008218                            
00008218                            
00008218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008218                            
00008218                            
00008218                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008218 6100 AAE8                  		bsr.w	CalcSine
0000821C 3428 0038                  		move.w	$38(a0),d2
00008220 3628 003A                  		move.w	$3A(a0),d3
00008224 45E8 0028                  		lea	$28(a0),a2
00008228 7C00                       		moveq	#0,d6
0000822A 1C1A                       		move.b	(a2)+,d6
0000822C                            
0000822C                            loc_7BCE:
0000822C 7800                       		moveq	#0,d4
0000822E 181A                       		move.b	(a2)+,d4
00008230 ED4C                       		lsl.w	#6,d4
00008232 0684 00FF D000             		addi.l	#$FFD000,d4
00008238 2244                       		movea.l	d4,a1
0000823A 7800                       		moveq	#0,d4
0000823C 1829 003C                  		move.b	$3C(a1),d4
00008240 2A04                       		move.l	d4,d5
00008242 C9C0                       		muls.w	d0,d4
00008244 E084                       		asr.l	#8,d4
00008246 CBC1                       		muls.w	d1,d5
00008248 E085                       		asr.l	#8,d5
0000824A D842                       		add.w	d2,d4
0000824C DA43                       		add.w	d3,d5
0000824E 3344 000C                  		move.w	d4,$C(a1)
00008252 3345 0008                  		move.w	d5,8(a1)
00008256 51CE FFD4                  		dbf	d6,loc_7BCE
0000825A 4E75                       		rts	
0000825C                            ; End of function Obj15_Move2
0000825C                            
0000825C                            ; ===========================================================================
0000825C                            
0000825C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000825C 3028 003A                  		move.w	$3A(a0),d0
00008260 0240 FF80                  		andi.w	#$FF80,d0
00008264 3238 F700                  		move.w	($FFFFF700).w,d1
00008268 0441 0080                  		subi.w	#$80,d1
0000826C 0241 FF80                  		andi.w	#$FF80,d1
00008270 9041                       		sub.w	d1,d0
00008272 0C40 0280                  		cmpi.w	#$280,d0
00008276 6200 0000                  		bhi.w	Obj15_DelAll
0000827A 4E75                       		rts	
0000827C                            ; ===========================================================================
0000827C                            
0000827C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000827C 7400                       		moveq	#0,d2
0000827E 45E8 0028                  		lea	$28(a0),a2
00008282 141A                       		move.b	(a2)+,d2
00008284                            
00008284                            Obj15_DelLoop:
00008284 7000                       		moveq	#0,d0
00008286 101A                       		move.b	(a2)+,d0
00008288 ED48                       		lsl.w	#6,d0
0000828A 0680 00FF D000             		addi.l	#$FFD000,d0
00008290 2240                       		movea.l	d0,a1
00008292 6100 0000                  		bsr.w	DeleteObject2
00008296 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000829A 4E75                       		rts	
0000829C                            ; ===========================================================================
0000829C                            
0000829C                            Obj15_Delete:				; XREF: Obj15_Index
0000829C 6100 0000                  		bsr.w	DeleteObject
000082A0 4E75                       		rts	
000082A2                            ; ===========================================================================
000082A2                            
000082A2                            Obj15_Display:				; XREF: Obj15_Index
000082A2 6000 0000                  		bra.w	DisplaySprite
000082A6                            ; ===========================================================================
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            Map_obj15:
000082A6                            	include "_maps\obj15ghz.asm"
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000082A6                            ; ---------------------------------------------------------------------------
000082A6 0000                       		dc.w byte_7C4E-Map_obj15
000082A8 0000                       		dc.w byte_7C59-Map_obj15
000082AA 0000                       		dc.w byte_7C5F-Map_obj15
000082AC 02                         byte_7C4E:	dc.b 2
000082AD F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000082B2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000082B7 01                         byte_7C59:	dc.b 1
000082B8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000082BD 01                         byte_7C5F:	dc.b 1
000082BE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000082C4 00                         		even
000082C4 00                         		even
000082C4                            
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            ; Sprite mappings - SLZ	swinging platforms
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            Map_obj15a:
000082C4                            	include "_maps\obj15slz.asm"
000082C4                            ; ---------------------------------------------------------------------------
000082C4                            ; Sprite mappings - SLZ	swinging platforms
000082C4                            ; ---------------------------------------------------------------------------
000082C4 0000                       		dc.w byte_7C6C-Map_obj15a
000082C6 0000                       		dc.w byte_7C95-Map_obj15a
000082C8 0000                       		dc.w byte_7C9B-Map_obj15a
000082CA 08                         byte_7C6C:	dc.b 8
000082CB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082D0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000082D5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000082DA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082DF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082E4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082E9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082EE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082F3 01                         byte_7C95:	dc.b 1
000082F4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082F9 01                         byte_7C9B:	dc.b 1
000082FA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008300 00                         		even
00008300 00                         		even
00008300                            
00008300                            ; ===========================================================================
00008300                            ; ---------------------------------------------------------------------------
00008300                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008300                            ; ---------------------------------------------------------------------------
00008300                            
00008300                            Obj17:					; XREF: Obj_Index
00008300 7000                       		moveq	#0,d0
00008302 1028 0024                  		move.b	$24(a0),d0
00008306 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000830A 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000830E                            ; ===========================================================================
0000830E 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008310 0000                       		dc.w Obj17_Action-Obj17_Index
00008312 0000                       		dc.w Obj17_Action-Obj17_Index
00008314 0000                       		dc.w Obj17_Delete-Obj17_Index
00008316 0000                       		dc.w Obj17_Display-Obj17_Index
00008318                            ; ===========================================================================
00008318                            
00008318                            Obj17_Main:				; XREF: Obj17_Index
00008318 5428 0024                  		addq.b	#2,$24(a0)
0000831C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008324 317C 4398 0002             		move.w	#$4398,2(a0)
0000832A 117C 0007 0022             		move.b	#7,$22(a0)
00008330 117C 0004 0001             		move.b	#4,1(a0)
00008336 117C 0003 0018             		move.b	#3,$18(a0)
0000833C 117C 0008 0019             		move.b	#8,$19(a0)
00008342 3428 000C                  		move.w	$C(a0),d2
00008346 3628 0008                  		move.w	8(a0),d3
0000834A 1810                       		move.b	0(a0),d4
0000834C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008350 7200                       		moveq	#0,d1
00008352 1212                       		move.b	(a2),d1		; move a2 to d1
00008354 14FC 0000                  		move.b	#0,(a2)+
00008358 3001                       		move.w	d1,d0
0000835A E248                       		lsr.w	#1,d0
0000835C E948                       		lsl.w	#4,d0
0000835E 9640                       		sub.w	d0,d3
00008360 5501                       		subq.b	#2,d1
00008362 6500                       		bcs.s	Obj17_Action
00008364 7C00                       		moveq	#0,d6
00008366                            
00008366                            Obj17_MakeHelix:
00008366 6100 0000                  		bsr.w	SingleObjLoad
0000836A 6600                       		bne.s	Obj17_Action
0000836C 5228 0028                  		addq.b	#1,$28(a0)
00008370 3A09                       		move.w	a1,d5
00008372 0445 D000                  		subi.w	#$D000,d5
00008376 EC4D                       		lsr.w	#6,d5
00008378 0245 007F                  		andi.w	#$7F,d5
0000837C 14C5                       		move.b	d5,(a2)+
0000837E 137C 0008 0024             		move.b	#8,$24(a1)
00008384 1284                       		move.b	d4,0(a1)
00008386 3342 000C                  		move.w	d2,$C(a1)
0000838A 3343 0008                  		move.w	d3,8(a1)
0000838E 2368 0004 0004             		move.l	4(a0),4(a1)
00008394 337C 4398 0002             		move.w	#$4398,2(a1)
0000839A 137C 0004 0001             		move.b	#4,1(a1)
000083A0 137C 0003 0018             		move.b	#3,$18(a1)
000083A6 137C 0008 0019             		move.b	#8,$19(a1)
000083AC 1346 003E                  		move.b	d6,$3E(a1)
000083B0 5206                       		addq.b	#1,d6
000083B2 0206 0007                  		andi.b	#7,d6
000083B6 0643 0010                  		addi.w	#$10,d3
000083BA B668 0008                  		cmp.w	8(a0),d3
000083BE 6600                       		bne.s	loc_7D78
000083C0 1146 003E                  		move.b	d6,$3E(a0)
000083C4 5206                       		addq.b	#1,d6
000083C6 0206 0007                  		andi.b	#7,d6
000083CA 0643 0010                  		addi.w	#$10,d3
000083CE 5228 0028                  		addq.b	#1,$28(a0)
000083D2                            
000083D2                            loc_7D78:
000083D2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000083D6                            
000083D6                            Obj17_Action:				; XREF: Obj17_Index
000083D6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000083DA 6100 0000                  		bsr.w	DisplaySprite
000083DE 6000 0000                  		bra.w	Obj17_ChkDel
000083E2                            
000083E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083E2                            
000083E2                            
000083E2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083E2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083E6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083EC D028 003E                  		add.b	$3E(a0),d0
000083F0 0200 0007                  		andi.b	#7,d0
000083F4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083F8 6600                       		bne.s	locret_7DA6
000083FA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008400                            
00008400                            locret_7DA6:
00008400 4E75                       		rts	
00008402                            ; End of function Obj17_RotateSpikes
00008402                            
00008402                            ; ===========================================================================
00008402                            
00008402                            Obj17_ChkDel:				; XREF: Obj17_Action
00008402 3028 0008                  		move.w	8(a0),d0
00008406 0240 FF80                  		andi.w	#$FF80,d0
0000840A 3238 F700                  		move.w	($FFFFF700).w,d1
0000840E 0441 0080                  		subi.w	#$80,d1
00008412 0241 FF80                  		andi.w	#$FF80,d1
00008416 9041                       		sub.w	d1,d0
00008418 0C40 0280                  		cmpi.w	#$280,d0
0000841C 6200 0000                  		bhi.w	Obj17_DelAll
00008420 4E75                       		rts	
00008422                            ; ===========================================================================
00008422                            
00008422                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008422 7400                       		moveq	#0,d2
00008424 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008428 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000842A 5502                       		subq.b	#2,d2
0000842C 6500                       		bcs.s	Obj17_Delete
0000842E                            
0000842E                            Obj17_DelLoop:
0000842E 7000                       		moveq	#0,d0
00008430 101A                       		move.b	(a2)+,d0
00008432 ED48                       		lsl.w	#6,d0
00008434 0680 00FF D000             		addi.l	#$FFD000,d0
0000843A 2240                       		movea.l	d0,a1
0000843C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008440 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008444                            
00008444                            Obj17_Delete:				; XREF: Obj17_Index
00008444 6100 0000                  		bsr.w	DeleteObject
00008448 4E75                       		rts	
0000844A                            ; ===========================================================================
0000844A                            
0000844A                            Obj17_Display:				; XREF: Obj17_Index
0000844A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000844E 6000 0000                  		bra.w	DisplaySprite
00008452                            ; ===========================================================================
00008452                            ; ---------------------------------------------------------------------------
00008452                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008452                            ; ---------------------------------------------------------------------------
00008452                            Map_obj17:
00008452                            	include "_maps\obj17.asm"
00008452                            ; ---------------------------------------------------------------------------
00008452                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008452                            ; ---------------------------------------------------------------------------
00008452 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008456 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000845A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000845E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008462 01                         byte_7E08:	dc.b 1
00008463 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008468 01                         byte_7E0E:	dc.b 1
00008469 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000846E 01                         byte_7E14:	dc.b 1
0000846F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008474 01                         byte_7E1A:	dc.b 1
00008475 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000847A 01                         byte_7E20:	dc.b 1
0000847B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008480 01                         byte_7E26:	dc.b 1
00008481 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008486 01                         byte_7E2C:	dc.b 1
00008487 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000848C                            		even
0000848C                            		even
0000848C                            
0000848C                            ; ===========================================================================
0000848C                            ; ---------------------------------------------------------------------------
0000848C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000848C                            ; ---------------------------------------------------------------------------
0000848C                            
0000848C                            Obj18:					; XREF: Obj_Index
0000848C 7000                       		moveq	#0,d0
0000848E 1028 0024                  		move.b	$24(a0),d0
00008492 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008496 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000849A                            ; ===========================================================================
0000849A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000849C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000849E 0000                       		dc.w Obj18_Action2-Obj18_Index
000084A0 0000                       		dc.w Obj18_Delete-Obj18_Index
000084A2 0000                       		dc.w Obj18_Action-Obj18_Index
000084A4                            ; ===========================================================================
000084A4                            
000084A4                            Obj18_Main:				; XREF: Obj18_Index
000084A4 5428 0024                  		addq.b	#2,$24(a0)
000084A8 317C 4000 0002             		move.w	#$4000,2(a0)
000084AE 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000084B6 117C 0020 0019             		move.b	#$20,$19(a0)
000084BC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000084C2 6600                       		bne.s	Obj18_NotSYZ
000084C4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000084CC 117C 0020 0019             		move.b	#$20,$19(a0)
000084D2                            
000084D2                            Obj18_NotSYZ:
000084D2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000084D8 6600                       		bne.s	Obj18_NotSLZ
000084DA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084E2 117C 0020 0019             		move.b	#$20,$19(a0)
000084E8 317C 4000 0002             		move.w	#$4000,2(a0)
000084EE 117C 0003 0028             		move.b	#3,$28(a0)
000084F4                            
000084F4                            Obj18_NotSLZ:
000084F4 117C 0004 0001             		move.b	#4,1(a0)
000084FA 117C 0004 0018             		move.b	#4,$18(a0)
00008500 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008506 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000850C 3168 0008 0032             		move.w	8(a0),$32(a0)
00008512 317C 0080 0026             		move.w	#$80,$26(a0)
00008518 7200                       		moveq	#0,d1
0000851A 1028 0028                  		move.b	$28(a0),d0
0000851E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008522 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008524 5201                       		addq.b	#1,d1		; use frame #1
00008526 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000852C                            
0000852C                            Obj18_SetFrame:
0000852C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008530                            
00008530                            Obj18_Solid:				; XREF: Obj18_Index
00008530 4A28 0038                  		tst.b	$38(a0)
00008534 6700                       		beq.s	loc_7EE0
00008536 5928 0038                  		subq.b	#4,$38(a0)
0000853A                            
0000853A                            loc_7EE0:
0000853A 7200                       		moveq	#0,d1
0000853C 1228 0019                  		move.b	$19(a0),d1
00008540 6100 F56C                  		bsr.w	PlatformObject
00008544                            
00008544                            Obj18_Action:				; XREF: Obj18_Index
00008544 6100 0000                  		bsr.w	Obj18_Move
00008548 6100 0000                  		bsr.w	Obj18_Nudge
0000854C 6100 0000                  		bsr.w	DisplaySprite
00008550 6000 0000                  		bra.w	Obj18_ChkDel
00008554                            ; ===========================================================================
00008554                            
00008554                            Obj18_Action2:				; XREF: Obj18_Index
00008554 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000855A 6700                       		beq.s	loc_7F06
0000855C 5828 0038                  		addq.b	#4,$38(a0)
00008560                            
00008560                            loc_7F06:
00008560 7200                       		moveq	#0,d1
00008562 1228 0019                  		move.b	$19(a0),d1
00008566 6100 F6BA                  		bsr.w	ExitPlatform
0000856A 3F28 0008                  		move.w	8(a0),-(sp)
0000856E 6100 0000                  		bsr.w	Obj18_Move
00008572 6100 0000                  		bsr.w	Obj18_Nudge
00008576 341F                       		move.w	(sp)+,d2
00008578 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000857C 6100 0000                  		bsr.w	DisplaySprite
00008580 6000 0000                  		bra.w	Obj18_ChkDel
00008584                            
00008584 4E75                       		rts
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Subroutine to	move platform slightly when you	stand on it
00008586                            ; ---------------------------------------------------------------------------
00008586                            
00008586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008586                            
00008586                            
00008586                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008586 1028 0038                  		move.b	$38(a0),d0
0000858A 6100 A776                  		bsr.w	CalcSine
0000858E 323C 0400                  		move.w	#$400,d1
00008592 C1C1                       		muls.w	d1,d0
00008594 4840                       		swap	d0
00008596 D068 002C                  		add.w	$2C(a0),d0
0000859A 3140 000C                  		move.w	d0,$C(a0)
0000859E 4E75                       		rts	
000085A0                            ; End of function Obj18_Nudge
000085A0                            
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            ; Subroutine to	move platforms
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            
000085A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085A0                            
000085A0                            
000085A0                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000085A0 7000                       		moveq	#0,d0
000085A2 1028 0028                  		move.b	$28(a0),d0
000085A6 0240 000F                  		andi.w	#$F,d0
000085AA D040                       		add.w	d0,d0
000085AC 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000085B0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000085B4                            ; End of function Obj18_Move
000085B4                            
000085B4                            ; ===========================================================================
000085B4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000085B8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000085BC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000085C0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000085C4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000085C8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000085CC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000085CE                            ; ===========================================================================
000085CE                            
000085CE                            Obj18_Type00:
000085CE 4E75                       		rts			; platform 00 doesn't move
000085D0                            ; ===========================================================================
000085D0                            
000085D0                            Obj18_Type05:
000085D0 3028 0032                  		move.w	$32(a0),d0
000085D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085D8 4401                       		neg.b	d1		; reverse platform-motion
000085DA 0601 0040                  		addi.b	#$40,d1
000085DE 6000                       		bra.s	Obj18_01_Move
000085E0                            ; ===========================================================================
000085E0                            
000085E0                            Obj18_Type01:
000085E0 3028 0032                  		move.w	$32(a0),d0
000085E4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085E8 0401 0040                  		subi.b	#$40,d1
000085EC                            
000085EC                            Obj18_01_Move:
000085EC 4881                       		ext.w	d1
000085EE D041                       		add.w	d1,d0
000085F0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085F4 6000 0000                  		bra.w	Obj18_ChgMotion
000085F8                            ; ===========================================================================
000085F8                            
000085F8                            Obj18_Type0C:
000085F8 3028 0034                  		move.w	$34(a0),d0
000085FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008600 4401                       		neg.b	d1		; reverse platform-motion
00008602 0601 0030                  		addi.b	#$30,d1
00008606 6000                       		bra.s	Obj18_02_Move
00008608                            ; ===========================================================================
00008608                            
00008608                            Obj18_Type0B:
00008608 3028 0034                  		move.w	$34(a0),d0
0000860C 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008610 0401 0030                  		subi.b	#$30,d1
00008614 6000                       		bra.s	Obj18_02_Move
00008616                            ; ===========================================================================
00008616                            
00008616                            Obj18_Type06:
00008616 3028 0034                  		move.w	$34(a0),d0
0000861A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000861E 4401                       		neg.b	d1		; reverse platform-motion
00008620 0601 0040                  		addi.b	#$40,d1
00008624 6000                       		bra.s	Obj18_02_Move
00008626                            ; ===========================================================================
00008626                            
00008626                            Obj18_Type02:
00008626 3028 0034                  		move.w	$34(a0),d0
0000862A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000862E 0401 0040                  		subi.b	#$40,d1
00008632                            
00008632                            Obj18_02_Move:
00008632 4881                       		ext.w	d1
00008634 D041                       		add.w	d1,d0
00008636 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000863A 6000 0000                  		bra.w	Obj18_ChgMotion
0000863E                            ; ===========================================================================
0000863E                            
0000863E                            Obj18_Type03:
0000863E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008642 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008644 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000864A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000864C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008652                            
00008652                            Obj18_03_NoMove:
00008652 4E75                       		rts	
00008654                            ; ===========================================================================
00008654                            
00008654                            Obj18_03_Wait:
00008654 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008658 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000865A 317C 0020 003A             		move.w	#32,$3A(a0)
00008660 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008664 4E75                       		rts	
00008666                            ; ===========================================================================
00008666                            
00008666                            Obj18_Type04:
00008666 4A68 003A                  		tst.w	$3A(a0)
0000866A 6700                       		beq.s	loc_8048
0000866C 5368 003A                  		subq.w	#1,$3A(a0)
00008670 6600                       		bne.s	loc_8048
00008672 0828 0003 0022             		btst	#3,$22(a0)
00008678 6700                       		beq.s	loc_8042
0000867A 08E9 0001 0022             		bset	#1,$22(a1)
00008680 08A9 0003 0022             		bclr	#3,$22(a1)
00008686 137C 0002 0024             		move.b	#2,$24(a1)
0000868C 08A8 0003 0022             		bclr	#3,$22(a0)
00008692 4228 0025                  		clr.b	$25(a0)
00008696 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000869C                            
0000869C                            loc_8042:
0000869C 117C 0008 0024             		move.b	#8,$24(a0)
000086A2                            
000086A2                            loc_8048:
000086A2 2628 002C                  		move.l	$2C(a0),d3
000086A6 3028 0012                  		move.w	$12(a0),d0
000086AA 48C0                       		ext.l	d0
000086AC E180                       		asl.l	#8,d0
000086AE D680                       		add.l	d0,d3
000086B0 2143 002C                  		move.l	d3,$2C(a0)
000086B4 0668 0038 0012             		addi.w	#$38,$12(a0)
000086BA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000086BE 0640 00E0                  		addi.w	#$E0,d0
000086C2 B068 002C                  		cmp.w	$2C(a0),d0
000086C6 6400                       		bcc.s	locret_8074
000086C8 117C 0006 0024             		move.b	#6,$24(a0)
000086CE                            
000086CE                            locret_8074:
000086CE 4E75                       		rts	
000086D0                            ; ===========================================================================
000086D0                            
000086D0                            Obj18_Type07:
000086D0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000086D4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000086D6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000086DA 7000                       		moveq	#0,d0
000086DC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086E0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086E2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086E6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086E8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086EE                            
000086EE                            Obj18_07_NoMove:
000086EE 4E75                       		rts	
000086F0                            ; ===========================================================================
000086F0                            
000086F0                            Obj18_07_Wait:
000086F0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086F4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086F6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086FA 4E75                       		rts	
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            Obj18_Type08:
000086FC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008700 3028 0034                  		move.w	$34(a0),d0
00008704 0440 0200                  		subi.w	#$200,d0
00008708 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000870C 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000870E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008712                            
00008712                            Obj18_08_NoStop:
00008712 4E75                       		rts	
00008714                            ; ===========================================================================
00008714                            
00008714                            Obj18_Type0A:
00008714 3028 0034                  		move.w	$34(a0),d0
00008718 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000871C 0401 0040                  		subi.b	#$40,d1
00008720 4881                       		ext.w	d1
00008722 E241                       		asr.w	#1,d1
00008724 D041                       		add.w	d1,d0
00008726 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000872A                            
0000872A                            Obj18_ChgMotion:
0000872A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008730 4E75                       		rts	
00008732                            ; ===========================================================================
00008732                            
00008732                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008732 3028 0032                  		move.w	$32(a0),d0
00008736 0240 FF80                  		andi.w	#$FF80,d0
0000873A 3238 F700                  		move.w	($FFFFF700).w,d1
0000873E 0441 0080                  		subi.w	#$80,d1
00008742 0241 FF80                  		andi.w	#$FF80,d1
00008746 9041                       		sub.w	d1,d0
00008748 0C40 0280                  		cmpi.w	#$280,d0
0000874C 6200                       		bhi.s	Obj18_Delete
0000874E 4E75                       		rts	
00008750                            ; ===========================================================================
00008750                            
00008750                            Obj18_Delete:				; XREF: Obj18_Index
00008750 6000 0000                  		bra.w	DeleteObject
00008754                            ; ===========================================================================
00008754                            ; ---------------------------------------------------------------------------
00008754                            ; Sprite mappings - unused
00008754                            ; ---------------------------------------------------------------------------
00008754                            Map_obj18x:
00008754                            	include "_maps\obj18x.asm"
00008754                            ; ---------------------------------------------------------------------------
00008754                            ; Sprite mappings - unused
00008754                            ; ---------------------------------------------------------------------------
00008754 0000                       		dc.w byte_80FE-Map_obj18x
00008756 0000                       		dc.w byte_8109-Map_obj18x
00008758 02                         byte_80FE:	dc.b 2
00008759 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000875E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008763 0A                         byte_8109:	dc.b $A
00008764 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008769 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000876E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008773 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008778 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000877D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008782 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008787 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000878C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008791 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008796                            		even
00008796                            		even
00008796                            
00008796                            ; ---------------------------------------------------------------------------
00008796                            ; Sprite mappings - GHZ	platforms
00008796                            ; ---------------------------------------------------------------------------
00008796                            Map_obj18:
00008796                            	include "_maps\obj18ghz.asm"
00008796                            ; ---------------------------------------------------------------------------
00008796                            ; Sprite mappings - GHZ	platforms
00008796                            ; ---------------------------------------------------------------------------
00008796 0000                       		dc.w byte_8140-Map_obj18
00008798 0000                       		dc.w byte_8155-Map_obj18
0000879A 04                         byte_8140:	dc.b 4
0000879B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000087A0 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000087A5 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000087AA F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000087AF 0A                         byte_8155:	dc.b $A
000087B0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000087B5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000087BA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000087BF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000087C4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087C9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000087CE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000087D3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000087D8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087DD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087E2                            		even
000087E2                            		even
000087E2                            
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            ; Sprite mappings - SYZ	platforms
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            Map_obj18a:
000087E2                            	include "_maps\obj18syz.asm"
000087E2                            ; ---------------------------------------------------------------------------
000087E2                            ; Sprite mappings - SYZ	platforms
000087E2                            ; ---------------------------------------------------------------------------
000087E2 0000                       		dc.w byte_818A-Map_obj18a
000087E4 03                         byte_818A:	dc.b 3
000087E5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087EA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087EF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087F4                            		even
000087F4                            		even
000087F4                            
000087F4                            ; ---------------------------------------------------------------------------
000087F4                            ; Sprite mappings - SLZ	platforms
000087F4                            ; ---------------------------------------------------------------------------
000087F4                            Map_obj18b:
000087F4                            	include "_maps\obj18slz.asm"
000087F4                            ; ---------------------------------------------------------------------------
000087F4                            ; Sprite mappings - SLZ	platforms
000087F4                            ; ---------------------------------------------------------------------------
000087F4 0000                       		dc.w byte_819C-Map_obj18b
000087F6 02                         byte_819C:	dc.b 2
000087F7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087FC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008802 00                         		even
00008802 00                         		even
00008802                            
00008802                            ; ===========================================================================
00008802                            ; ---------------------------------------------------------------------------
00008802                            ; Object 19 - Pearto bombs
00008802                            ; ---------------------------------------------------------------------------
00008802                            Obj19:					; XREF: Obj_Index
00008802 7000                       		moveq	#0,d0
00008804 1028 0024                  		move.b	$24(a0),d0
00008808 323B 0000                  		move.w	off_7070(pc,d0.w),d1
0000880C 4EFB 1000                  		jmp	off_7070(pc,d1.w)
00008810                            ; ---------------------------------------------------------------------------
00008810                            
00008810 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008816                            ; ---------------------------------------------------------------------------
00008816                            
00008816                            loc_7076:
00008816 5428 0024                  		addq.b	#2,$24(a0)
0000881A 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
00008822 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008828 117C 0004 0001             		move.b	#4,1(a0)
0000882E 117C 0003 0019             		move.b	#3,$19(a0)
00008834 117C 0087 0020             		move.b	#$87,$20(a0)
0000883A 117C 0008 0018             		move.b	#8,$18(a0)
00008840 317C 0018 0030             		move.w	#$18,$30(a0)
00008846                            
00008846                            loc_70A6:
00008846 0828 0007 0022             		btst	#7,$22(a0)
0000884C 6600                       		bne.s	loc_70C2
0000884E 4A68 0030                  		tst.w	$30(a0)
00008852 6600                       		bne.s	loc_70D2
00008854 4EB9 0000 0000             		jsr	ObjHitFloor
0000885A 4A41                       		tst.w	d1
0000885C 6A00                       		bpl.s	loc_70D6
0000885E D368 000C                  		add.w	d1,$C(a0)
00008862                            
00008862                            loc_70C2:
00008862 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008866 117C 0000 0024             		move.b	#0,$24(a0)
0000886C                            ; ---------------------------------------------------------------------------
0000886C                            
0000886C                            loc_70D2:
0000886C 5368 0030                  		subq.w	#1,$30(a0)
00008870                            
00008870                            loc_70D6:
00008870 6100 0000                  		bsr.w	ObjectFall
00008874 6100 0000                  		bsr.w	DisplaySprite
00008878 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000887C 0640 00E0                  		addi.w	#$E0,d0
00008880 B068 000C                  		cmp.w	$C(a0),d0
00008884 6500                       		bcs.s	loc_70EE
00008886 4E75                       		rts
00008888                            ; ---------------------------------------------------------------------------
00008888                            
00008888                            loc_70EE:
00008888 6100 0000                  		bsr.w	DeleteObject
0000888C 4E75                       		rts
0000888E                            		
0000888E                            Map_obj19:
0000888E                            	include "_maps\obj19.asm"
0000888E                            Map_02b4:
0000888E 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008890 01                         Map_02b4_2: 	dc.b $1
00008891 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008896                            	even
00008896                            	even
00008896                            ; ===========================================================================
00008896                            ; ---------------------------------------------------------------------------
00008896                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008896                            ; ---------------------------------------------------------------------------
00008896                            Map_obj48:
00008896                            	include "_maps\obj48.asm"
00008896                            ; ---------------------------------------------------------------------------
00008896                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008896                            ; ---------------------------------------------------------------------------
00008896 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
0000889A 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000889E 06                         byte_81B2:	dc.b 6
0000889F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000088A4 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000088A9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000088AE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000088B3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000088B8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000088BD 04                         byte_81D1:	dc.b 4
000088BE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000088C3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000088C8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000088CD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000088D2 04                         byte_81E6:	dc.b 4
000088D3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000088D8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088DD 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088E2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088E7 04                         byte_81FB:	dc.b 4
000088E8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088ED E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088F2 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088F7 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088FC                            		even
000088FC                            		even
000088FC                            
000088FC                            ; ===========================================================================
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Object 1A - GHZ collapsing ledge
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            
000088FC                            Obj1A:					; XREF: Obj_Index
000088FC 7000                       		moveq	#0,d0
000088FE 1028 0024                  		move.b	$24(a0),d0
00008902 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008906 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000890A                            ; ===========================================================================
0000890A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000890E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008912 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008916                            ; ===========================================================================
00008916                            
00008916                            Obj1A_Main:				; XREF: Obj1A_Index
00008916 5428 0024                  		addq.b	#2,$24(a0)
0000891A 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008922 317C 4000 0002             		move.w	#$4000,2(a0)
00008928 0028 0004 0001             		ori.b	#4,1(a0)
0000892E 117C 0004 0018             		move.b	#4,$18(a0)
00008934 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000893A 117C 0064 0019             		move.b	#$64,$19(a0)
00008940 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008946 117C 0038 0016             		move.b	#$38,$16(a0)
0000894C 08E8 0004 0001             		bset	#4,1(a0)
00008952                            
00008952                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008952 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008956 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008958 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000895C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008960 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008964                            
00008964                            Obj1A_Slope:
00008964 323C 0030                  		move.w	#$30,d1
00008968 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000896E 6100 F212                  		bsr.w	SlopeObject
00008972 6000 0000                  		bra.w	MarkObjGone
00008976                            ; ===========================================================================
00008976                            
00008976                            Obj1A_Touch:				; XREF: Obj1A_Index
00008976 4A28 0038                  		tst.b	$38(a0)
0000897A 6700 0000                  		beq.w	loc_847A
0000897E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008984 5328 0038                  		subq.b	#1,$38(a0)
00008988                            
00008988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008988                            
00008988                            
00008988                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008988 323C 0030                  		move.w	#$30,d1
0000898C 6100 F294                  		bsr.w	ExitPlatform
00008990 323C 0030                  		move.w	#$30,d1
00008994 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000899A 3428 0008                  		move.w	8(a0),d2
0000899E 6100 0000                  		bsr.w	SlopeObject2
000089A2 6000 0000                  		bra.w	MarkObjGone
000089A6                            ; End of function Obj1A_WalkOff
000089A6                            
000089A6                            ; ===========================================================================
000089A6                            
000089A6                            Obj1A_Display:				; XREF: Obj1A_Index
000089A6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000089AA 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000089AC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000089B0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000089B4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089B8 6000 0000                  		bra.w	DisplaySprite
000089BC                            ; ===========================================================================
000089BC                            
000089BC                            loc_82D0:				; XREF: Obj1A_Display
000089BC 5328 0038                  		subq.b	#1,$38(a0)
000089C0 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000089C4 43F8 D000                  		lea	($FFFFD000).w,a1
000089C8 0829 0003 0022             		btst	#3,$22(a1)
000089CE 6700                       		beq.s	loc_82FC
000089D0 4A28 0038                  		tst.b	$38(a0)
000089D4 6600                       		bne.s	locret_8308
000089D6 08A9 0003 0022             		bclr	#3,$22(a1)
000089DC 08A9 0005 0022             		bclr	#5,$22(a1)
000089E2 137C 0001 001D             		move.b	#1,$1D(a1)
000089E8                            
000089E8                            loc_82FC:
000089E8 117C 0000 003A             		move.b	#0,$3A(a0)
000089EE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089F4                            
000089F4                            locret_8308:
000089F4 4E75                       		rts	
000089F6                            ; ===========================================================================
000089F6                            
000089F6                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089F6 6100 0000                  		bsr.w	ObjectFall
000089FA 6100 0000                  		bsr.w	DisplaySprite
000089FE 4A28 0001                  		tst.b	1(a0)
00008A02 6A00                       		bpl.s	Obj1A_Delete
00008A04 4E75                       		rts	
00008A06                            ; ===========================================================================
00008A06                            
00008A06                            Obj1A_Delete:				; XREF: Obj1A_Index
00008A06 6100 0000                  		bsr.w	DeleteObject
00008A0A 4E75                       		rts	
00008A0C                            ; ===========================================================================
00008A0C                            ; ---------------------------------------------------------------------------
00008A0C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008A0C                            ; ---------------------------------------------------------------------------
00008A0C                            
00008A0C                            Obj53:					; XREF: Obj_Index
00008A0C 7000                       		moveq	#0,d0
00008A0E 1028 0024                  		move.b	$24(a0),d0
00008A12 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008A16 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008A1A                            ; ===========================================================================
00008A1A 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008A1E 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008A22 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A26                            ; ===========================================================================
00008A26                            
00008A26                            Obj53_Main:				; XREF: Obj53_Index
00008A26 5428 0024                  		addq.b	#2,$24(a0)
00008A2A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A32 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A38 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A3E 6600                       		bne.s	Obj53_NotSLZ
00008A40 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A46 5428 001A                  		addq.b	#2,$1A(a0)
00008A4A                            
00008A4A                            Obj53_NotSLZ:
00008A4A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A50 6600                       		bne.s	Obj53_NotSBZ
00008A52 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A58                            
00008A58                            Obj53_NotSBZ:
00008A58 0028 0004 0001             		ori.b	#4,1(a0)
00008A5E 117C 0004 0018             		move.b	#4,$18(a0)
00008A64 117C 0007 0038             		move.b	#7,$38(a0)
00008A6A 117C 0044 0019             		move.b	#$44,$19(a0)
00008A70                            
00008A70                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A70 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A74 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A76 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A7A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A7E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A82                            
00008A82                            Obj53_Solid:
00008A82 323C 0020                  		move.w	#$20,d1
00008A86 6100 F026                  		bsr.w	PlatformObject
00008A8A 4A28 0028                  		tst.b	$28(a0)
00008A8E 6A00                       		bpl.s	Obj53_MarkAsGone
00008A90 0829 0003 0022             		btst	#3,$22(a1)
00008A96 6700                       		beq.s	Obj53_MarkAsGone
00008A98 08A8 0000 0001             		bclr	#0,1(a0)
00008A9E 3029 0008                  		move.w	8(a1),d0
00008AA2 9068 0008                  		sub.w	8(a0),d0
00008AA6 6400                       		bcc.s	Obj53_MarkAsGone
00008AA8 08E8 0000 0001             		bset	#0,1(a0)
00008AAE                            
00008AAE                            Obj53_MarkAsGone:
00008AAE 6000 0000                  		bra.w	MarkObjGone
00008AB2                            ; ===========================================================================
00008AB2                            
00008AB2                            Obj53_Touch:				; XREF: Obj53_Index
00008AB2 4A28 0038                  		tst.b	$38(a0)
00008AB6 6700 0000                  		beq.w	loc_8458
00008ABA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AC0 5328 0038                  		subq.b	#1,$38(a0)
00008AC4                            
00008AC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AC4                            
00008AC4                            
00008AC4                            Obj53_WalkOff:				; XREF: Obj53_Index
00008AC4 323C 0020                  		move.w	#$20,d1
00008AC8 6100 F158                  		bsr.w	ExitPlatform
00008ACC 3428 0008                  		move.w	8(a0),d2
00008AD0 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008AD4 6000 0000                  		bra.w	MarkObjGone
00008AD8                            ; End of function Obj53_WalkOff
00008AD8                            
00008AD8                            ; ===========================================================================
00008AD8                            
00008AD8                            Obj53_Display:				; XREF: Obj53_Index
00008AD8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008ADC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008ADE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008AE2 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008AE6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AEA 6000 0000                  		bra.w	DisplaySprite
00008AEE                            ; ===========================================================================
00008AEE                            
00008AEE                            loc_8402:
00008AEE 5328 0038                  		subq.b	#1,$38(a0)
00008AF2 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008AF6 43F8 D000                  		lea	($FFFFD000).w,a1
00008AFA 0829 0003 0022             		btst	#3,$22(a1)
00008B00 6700                       		beq.s	loc_842E
00008B02 4A28 0038                  		tst.b	$38(a0)
00008B06 6600                       		bne.s	locret_843A
00008B08 08A9 0003 0022             		bclr	#3,$22(a1)
00008B0E 08A9 0005 0022             		bclr	#5,$22(a1)
00008B14 137C 0001 001D             		move.b	#1,$1D(a1)
00008B1A                            
00008B1A                            loc_842E:
00008B1A 117C 0000 003A             		move.b	#0,$3A(a0)
00008B20 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B26                            
00008B26                            locret_843A:
00008B26 4E75                       		rts	
00008B28                            ; ===========================================================================
00008B28                            
00008B28                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B28 6100 0000                  		bsr.w	ObjectFall
00008B2C 6100 0000                  		bsr.w	DisplaySprite
00008B30 4A28 0001                  		tst.b	1(a0)
00008B34 6A00                       		bpl.s	Obj53_Delete
00008B36 4E75                       		rts	
00008B38                            ; ===========================================================================
00008B38                            
00008B38                            Obj53_Delete:				; XREF: Obj53_Index
00008B38 6100 0000                  		bsr.w	DeleteObject
00008B3C 4E75                       		rts	
00008B3E                            ; ===========================================================================
00008B3E                            
00008B3E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B3E 117C 0000 003A             		move.b	#0,$3A(a0)
00008B44                            
00008B44                            loc_8458:				; XREF: Obj53_Touch
00008B44 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B4A 0828 0000 0028             		btst	#0,$28(a0)
00008B50 6700                       		beq.s	loc_846C
00008B52 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B58                            
00008B58                            loc_846C:
00008B58 7207                       		moveq	#7,d1
00008B5A 5228 001A                  		addq.b	#1,$1A(a0)
00008B5E 6000                       		bra.s	loc_8486
00008B60                            ; ===========================================================================
00008B60                            
00008B60                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B60 117C 0000 003A             		move.b	#0,$3A(a0)
00008B66                            
00008B66                            loc_847A:				; XREF: Obj1A_Touch
00008B66 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B6C 7218                       		moveq	#$18,d1
00008B6E 5428 001A                  		addq.b	#2,$1A(a0)
00008B72                            
00008B72                            loc_8486:				; XREF: Obj53_Collapse
00008B72 7000                       		moveq	#0,d0
00008B74 1028 001A                  		move.b	$1A(a0),d0
00008B78 D040                       		add.w	d0,d0
00008B7A 2668 0004                  		movea.l	4(a0),a3
00008B7E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B82 524B                       		addq.w	#1,a3
00008B84 08E8 0005 0001             		bset	#5,1(a0)
00008B8A 1810                       		move.b	0(a0),d4
00008B8C 1A28 0001                  		move.b	1(a0),d5
00008B90 2248                       		movea.l	a0,a1
00008B92 6000                       		bra.s	loc_84B2
00008B94                            ; ===========================================================================
00008B94                            
00008B94                            loc_84AA:
00008B94 6100 0000                  		bsr.w	SingleObjLoad
00008B98 6600                       		bne.s	loc_84F2
00008B9A 5A4B                       		addq.w	#5,a3
00008B9C                            
00008B9C                            loc_84B2:
00008B9C 137C 0006 0024             		move.b	#6,$24(a1)
00008BA2 1284                       		move.b	d4,0(a1)
00008BA4 234B 0004                  		move.l	a3,4(a1)
00008BA8 1345 0001                  		move.b	d5,1(a1)
00008BAC 3368 0008 0008             		move.w	8(a0),8(a1)
00008BB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008BB8 3368 0002 0002             		move.w	2(a0),2(a1)
00008BBE 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008BC4 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008BCA 135C 0038                  		move.b	(a4)+,$38(a1)
00008BCE B3C8                       		cmpa.l	a0,a1
00008BD0 6400                       		bcc.s	loc_84EE
00008BD2 6100 0000                  		bsr.w	DisplaySprite2
00008BD6                            
00008BD6                            loc_84EE:
00008BD6 51C9 FFBC                  		dbf	d1,loc_84AA
00008BDA                            
00008BDA                            loc_84F2:
00008BDA 6100 0000                  		bsr.w	DisplaySprite
00008BDE 303C 00B9                  		move.w	#$B9,d0
00008BE2 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BE8                            ; ===========================================================================
00008BE8                            ; ---------------------------------------------------------------------------
00008BE8                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BE8                            ; ---------------------------------------------------------------------------
00008BE8 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BF8 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008C02 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008C0A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008C12                            
00008C12                            ; ---------------------------------------------------------------------------
00008C12                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008C12                            ; ---------------------------------------------------------------------------
00008C12                            
00008C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C12                            
00008C12                            
00008C12                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008C12 43F8 D000                  		lea	($FFFFD000).w,a1
00008C16 0829 0003 0022             		btst	#3,$22(a1)
00008C1C 6700                       		beq.s	locret_856E
00008C1E 3029 0008                  		move.w	8(a1),d0
00008C22 9068 0008                  		sub.w	8(a0),d0
00008C26 D041                       		add.w	d1,d0
00008C28 E248                       		lsr.w	#1,d0
00008C2A 0828 0000 0001             		btst	#0,1(a0)
00008C30 6700                       		beq.s	loc_854E
00008C32 4640                       		not.w	d0
00008C34 D041                       		add.w	d1,d0
00008C36                            
00008C36                            loc_854E:
00008C36 7200                       		moveq	#0,d1
00008C38 1232 0000                  		move.b	(a2,d0.w),d1
00008C3C 3028 000C                  		move.w	$C(a0),d0
00008C40 9041                       		sub.w	d1,d0
00008C42 7200                       		moveq	#0,d1
00008C44 1229 0016                  		move.b	$16(a1),d1
00008C48 9041                       		sub.w	d1,d0
00008C4A 3340 000C                  		move.w	d0,$C(a1)
00008C4E 9468 0008                  		sub.w	8(a0),d2
00008C52 9569 0008                  		sub.w	d2,8(a1)
00008C56                            
00008C56                            locret_856E:
00008C56 4E75                       		rts	
00008C58                            ; End of function SlopeObject2
00008C58                            
00008C58                            ; ===========================================================================
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            ; Collision data for GHZ collapsing ledge
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            Obj1A_SlopeData:
00008C58                            		incbin	misc\ghzledge.bin
00008C88                            		even
00008C88                            
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            ; Sprite mappings - GHZ	collapsing ledge
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            Map_obj1A:
00008C88                            	include "_maps\obj1A.asm"
00008C88                            ; ---------------------------------------------------------------------------
00008C88                            ; Sprite mappings - GHZ	collapsing ledge
00008C88                            ; ---------------------------------------------------------------------------
00008C88 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C8C 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C90 10                         byte_85A8:	dc.b $10
00008C91 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C96 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C9B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CA0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CA5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CAA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008CAF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CB4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CB9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CBE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CC3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CC8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CCD 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CD2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CD7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CDC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CE1 10                         byte_85F9:	dc.b $10
00008CE2 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CE7 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CEC E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CF1 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CF6 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CFB D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D00 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008D05 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008D0A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D0F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D14 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008D19 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D1E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D23 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D28 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D2D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D32 19                         byte_864A:	dc.b $19
00008D33 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D38 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D3D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D42 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D47 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D4C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D51 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D56 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D5B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D60 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D65 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D6A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D6F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D74 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D79 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D7E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D83 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D88 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D8D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D92 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D97 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D9C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008DA1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DA6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DAB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DB0 19                         byte_86C8:	dc.b $19
00008DB1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008DB6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008DBB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008DC0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008DC5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DCA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DCF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DD4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DD9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DDE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DE3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DE8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DED F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DF2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DF7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DFC F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008E01 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008E06 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008E0B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E10 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008E15 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008E1A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E1F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008E24 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E29 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E2E                            		even
00008E2E                            		even
00008E2E                            
00008E2E                            ; ---------------------------------------------------------------------------
00008E2E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E2E                            ; ---------------------------------------------------------------------------
00008E2E                            Map_obj53:
00008E2E                            	include "_maps\obj53.asm"
00008E2E                            ; ---------------------------------------------------------------------------
00008E2E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E2E                            ; ---------------------------------------------------------------------------
00008E2E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E32 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E36 04                         byte_874E:	dc.b 4
00008E37 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E3C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E41 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E46 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E4B 08                         byte_8763:	dc.b 8
00008E4C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E51 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E56 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E5B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E60 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E65 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E6A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E6F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E74 04                         byte_878C:	dc.b 4
00008E75 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E7A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E7F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E84 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E89 08                         byte_87A1:	dc.b 8
00008E8A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E8F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E94 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E99 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E9E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008EA3 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008EA8 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008EAD 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008EB2                            		even
00008EB2                            		even
00008EB2                            
00008EB2                            ; ===========================================================================
00008EB2                            ; ---------------------------------------------------------------------------
00008EB2                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008EB2                            ; ---------------------------------------------------------------------------
00008EB2                            
00008EB2                            Obj1C:					; XREF: Obj_Index
00008EB2 7000                       		moveq	#0,d0
00008EB4 1028 0024                  		move.b	$24(a0),d0
00008EB8 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008EBC 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008EC0                            ; ===========================================================================
00008EC0 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008EC2 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008EC4                            ; ===========================================================================
00008EC4                            
00008EC4                            Obj1C_Main:				; XREF: Obj1C_Index
00008EC4 5428 0024                  		addq.b	#2,$24(a0)
00008EC8 7000                       		moveq	#0,d0
00008ECA 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008ECE C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008ED2 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008ED6 2159 0004                  		move.l	(a1)+,4(a0)
00008EDA 3159 0002                  		move.w	(a1)+,2(a0)
00008EDE 0028 0004 0001             		ori.b	#4,1(a0)
00008EE4 1159 001A                  		move.b	(a1)+,$1A(a0)
00008EE8 1159 0019                  		move.b	(a1)+,$19(a0)
00008EEC 1159 0018                  		move.b	(a1)+,$18(a0)
00008EF0 1159 0020                  		move.b	(a1)+,$20(a0)
00008EF4                            
00008EF4                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008EF4 3028 0008                  		move.w	8(a0),d0
00008EF8 0240 FF80                  		andi.w	#$FF80,d0
00008EFC 3238 F700                  		move.w	($FFFFF700).w,d1
00008F00 0441 0080                  		subi.w	#$80,d1
00008F04 0241 FF80                  		andi.w	#$FF80,d1
00008F08 9041                       		sub.w	d1,d0
00008F0A 0C40 0280                  		cmpi.w	#$280,d0
00008F0E 6200 0000                  		bhi.w	DeleteObject
00008F12 6000 0000                  		bra.w	DisplaySprite
00008F16                            ; ===========================================================================
00008F16                            ; ---------------------------------------------------------------------------
00008F16                            ; Variables for	object $1C are stored in an array
00008F16                            ; ---------------------------------------------------------------------------
00008F16 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008F1A 44D8                       		dc.w $44D8		; VRAM setting
00008F1C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008F20 0000 0000                  		dc.l Map_obj1C
00008F24 44D8                       		dc.w $44D8
00008F26 0008 0200                  		dc.b 0,	8, 2, 0
00008F2A 0000 0000                  		dc.l Map_obj1C
00008F2E 44D8                       		dc.w $44D8
00008F30 0008 0200                  		dc.b 0,	8, 2, 0
00008F34 0000 7F96                  		dc.l Map_obj11
00008F38 438E                       		dc.w $438E
00008F3A 0110 0100                  		dc.b 1,	$10, 1,	0
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Sprite mappings - SLZ	lava thrower
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            Map_obj1C:
00008F3E                            	include "_maps\obj1C.asm"
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E                            ; Sprite mappings - SLZ	lava thrower
00008F3E                            ; ---------------------------------------------------------------------------
00008F3E 0000                       		dc.w byte_8858-Map_obj1C
00008F40 01                         byte_8858:	dc.b 1
00008F41 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F46                            		even
00008F46                            		even
00008F46                            
00008F46                            ; ===========================================================================
00008F46                            ; ---------------------------------------------------------------------------
00008F46                            ; Object 1D - switch that activates when Sonic touches it
00008F46                            ; (this	is not used anywhere in	the game)
00008F46                            ; ---------------------------------------------------------------------------
00008F46                            
00008F46                            Obj1D:					; XREF: Obj_Index
00008F46 7000                       		moveq	#0,d0
00008F48 1028 0024                  		move.b	$24(a0),d0
00008F4C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F50 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F54                            ; ===========================================================================
00008F54 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F56 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F58 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F5A                            ; ===========================================================================
00008F5A                            
00008F5A                            Obj1D_Main:				; XREF: Obj1D_Index
00008F5A 5428 0024                  		addq.b	#2,$24(a0)
00008F5E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F66 317C 4000 0002             		move.w	#$4000,2(a0)
00008F6C 117C 0004 0001             		move.b	#4,1(a0)
00008F72 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F78 117C 0010 0019             		move.b	#$10,$19(a0)
00008F7E 117C 0005 0018             		move.b	#5,$18(a0)
00008F84                            
00008F84                            Obj1D_Action:				; XREF: Obj1D_Index
00008F84 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F8A 323C 0010                  		move.w	#$10,d1
00008F8E 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F92 6700                       		beq.s	Obj1D_ChkDel
00008F94 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F98 7001                       		moveq	#1,d0
00008F9A 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F9E                            
00008F9E                            Obj1D_ChkDel:
00008F9E 6100 0000                  		bsr.w	DisplaySprite
00008FA2 3028 0008                  		move.w	8(a0),d0
00008FA6 0240 FF80                  		andi.w	#$FF80,d0
00008FAA 3238 F700                  		move.w	($FFFFF700).w,d1
00008FAE 0441 0080                  		subi.w	#$80,d1
00008FB2 0241 FF80                  		andi.w	#$FF80,d1
00008FB6 9041                       		sub.w	d1,d0
00008FB8 0C40 0280                  		cmpi.w	#$280,d0
00008FBC 6200 0000                  		bhi.w	Obj1D_Delete
00008FC0 4E75                       		rts	
00008FC2                            ; ===========================================================================
00008FC2                            
00008FC2                            Obj1D_Delete:				; XREF: Obj1D_Index
00008FC2 6100 0000                  		bsr.w	DeleteObject
00008FC6 4E75                       		rts	
00008FC8                            ; ---------------------------------------------------------------------------
00008FC8                            ; Subroutine to	check if Sonic touches the object
00008FC8                            ; ---------------------------------------------------------------------------
00008FC8                            
00008FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FC8                            
00008FC8                            
00008FC8                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008FC8 43F8 D000                  		lea	($FFFFD000).w,a1
00008FCC 3029 0008                  		move.w	8(a1),d0
00008FD0 9068 0008                  		sub.w	8(a0),d0
00008FD4 D041                       		add.w	d1,d0
00008FD6 6B00                       		bmi.s	loc_8918
00008FD8 D241                       		add.w	d1,d1
00008FDA B041                       		cmp.w	d1,d0
00008FDC 6400                       		bcc.s	loc_8918
00008FDE 3429 000C                  		move.w	$C(a1),d2
00008FE2 1229 0016                  		move.b	$16(a1),d1
00008FE6 4881                       		ext.w	d1
00008FE8 D242                       		add.w	d2,d1
00008FEA 3028 000C                  		move.w	$C(a0),d0
00008FEE 0440 0010                  		subi.w	#$10,d0
00008FF2 9041                       		sub.w	d1,d0
00008FF4 6200                       		bhi.s	loc_8918
00008FF6 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FFA 6500                       		bcs.s	loc_8918
00008FFC 70FF                       		moveq	#-1,d0
00008FFE 4E75                       		rts	
00009000                            ; ===========================================================================
00009000                            
00009000                            loc_8918:
00009000 7000                       		moveq	#0,d0
00009002 4E75                       		rts	
00009004                            ; End of function Obj1D_ChkTouch
00009004                            
00009004                            ; ===========================================================================
00009004                            ; ---------------------------------------------------------------------------
00009004                            ; Sprite mappings - object 1D
00009004                            ; ---------------------------------------------------------------------------
00009004                            Map_obj1D:
00009004                            	include "_maps\obj1D.asm"
00009004                            ; ---------------------------------------------------------------------------
00009004                            ; Sprite mappings - object 1D
00009004                            ; ---------------------------------------------------------------------------
00009004 0000                       		dc.w byte_891E-Map_obj1D
00009006 04                         byte_891E:	dc.b 4
00009007 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000900C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00009011 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009016 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000901C 00                         		even
0000901C 00                         		even
0000901C                            
0000901C                            ; ===========================================================================
0000901C                            ; ---------------------------------------------------------------------------
0000901C                            ; Object 2A - doors (SBZ)
0000901C                            ; ---------------------------------------------------------------------------
0000901C                            
0000901C                            Obj2A:					; XREF: Obj_Index
0000901C 7000                       		moveq	#0,d0
0000901E 1028 0024                  		move.b	$24(a0),d0
00009022 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009026 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
0000902A                            ; ===========================================================================
0000902A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
0000902C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000902E                            ; ===========================================================================
0000902E                            
0000902E                            Obj2A_Main:				; XREF: Obj2A_Index
0000902E 5428 0024                  		addq.b	#2,$24(a0)
00009032 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
0000903A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009040 0028 0004 0001             		ori.b	#4,1(a0)
00009046 117C 0008 0019             		move.b	#8,$19(a0)
0000904C 117C 0004 0018             		move.b	#4,$18(a0)
00009052                            
00009052                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009052 323C 0040                  		move.w	#$40,d1
00009056 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000905A 3038 D008                  		move.w	($FFFFD008).w,d0
0000905E D041                       		add.w	d1,d0
00009060 B068 0008                  		cmp.w	8(a0),d0
00009064 6500                       		bcs.s	Obj2A_Animate
00009066 9041                       		sub.w	d1,d0
00009068 9041                       		sub.w	d1,d0
0000906A B068 0008                  		cmp.w	8(a0),d0
0000906E 6400                       		bcc.s	Obj2A_Animate
00009070 D041                       		add.w	d1,d0
00009072 B068 0008                  		cmp.w	8(a0),d0
00009076 6400                       		bcc.s	loc_899A
00009078 0828 0000 0022             		btst	#0,$22(a0)
0000907E 6600                       		bne.s	Obj2A_Animate
00009080 6000                       		bra.s	Obj2A_Open
00009082                            ; ===========================================================================
00009082                            
00009082                            loc_899A:				; XREF: Obj2A_OpenShut
00009082 0828 0000 0022             		btst	#0,$22(a0)
00009088 6700                       		beq.s	Obj2A_Animate
0000908A                            
0000908A                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000908A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009090                            
00009090                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009090 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009096 6100 0000                  		bsr.w	AnimateSprite
0000909A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000909E 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
000090A0 323C 0011                  		move.w	#$11,d1
000090A4 343C 0020                  		move.w	#$20,d2
000090A8 3602                       		move.w	d2,d3
000090AA 5243                       		addq.w	#1,d3
000090AC 3828 0008                  		move.w	8(a0),d4
000090B0 6100 0000                  		bsr.w	SolidObject
000090B4                            
000090B4                            Obj2A_MarkAsUsed:
000090B4 6000 0000                  		bra.w	MarkObjGone
000090B8                            ; ===========================================================================
000090B8                            Ani_obj2A:
000090B8                            	include "_anim\obj2A.asm"
000090B8                            ; ---------------------------------------------------------------------------
000090B8                            ; Animation script - doors (SBZ)
000090B8                            ; ---------------------------------------------------------------------------
000090B8 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000090BA 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000090BC 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000090C8 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000090D4                            		even
000090D4                            		even
000090D4                            
000090D4                            ; ---------------------------------------------------------------------------
000090D4                            ; Sprite mappings - doors (SBZ)
000090D4                            ; ---------------------------------------------------------------------------
000090D4                            Map_obj2A:
000090D4                            	include "_maps\obj2A.asm"
000090D4                            ; ---------------------------------------------------------------------------
000090D4                            ; Sprite mappings - doors (SBZ)
000090D4                            ; ---------------------------------------------------------------------------
000090D4 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000090D8 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090DC 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090E0 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090E4 0000                       		dc.w byte_8A56-Map_obj2A
000090E6 02                         byte_89FE:	dc.b 2
000090E7 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090EC 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090F1 02                         byte_8A09:	dc.b 2
000090F2 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090F7 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090FC 02                         byte_8A14:	dc.b 2
000090FD D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009102 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009107 02                         byte_8A1F:	dc.b 2
00009108 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000910D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00009112 02                         byte_8A2A:	dc.b 2
00009113 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009118 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
0000911D 02                         byte_8A35:	dc.b 2
0000911E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00009123 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009128 02                         byte_8A40:	dc.b 2
00009129 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000912E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00009133 02                         byte_8A4B:	dc.b 2
00009134 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009139 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000913E 02                         byte_8A56:	dc.b 2
0000913F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009144 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000914A 00                         		even
0000914A 00                         		even
0000914A                            
0000914A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000914A                            
0000914A                            
0000914A                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000914A 6100 0000                  		bsr.w	Obj44_SolidWall2
0000914E 6700                       		beq.s	loc_8AA8
00009150 6B00 0000                  		bmi.w	loc_8AC4
00009154 4A40                       		tst.w	d0
00009156 6700 0000                  		beq.w	loc_8A92
0000915A 6B00                       		bmi.s	loc_8A7C
0000915C 4A69 0010                  		tst.w	$10(a1)
00009160 6B00                       		bmi.s	loc_8A92
00009162 6000                       		bra.s	loc_8A82
00009164                            ; ===========================================================================
00009164                            
00009164                            loc_8A7C:
00009164 4A69 0010                  		tst.w	$10(a1)
00009168 6A00                       		bpl.s	loc_8A92
0000916A                            
0000916A                            loc_8A82:
0000916A 9169 0008                  		sub.w	d0,8(a1)
0000916E 337C 0000 0014             		move.w	#0,$14(a1)
00009174 337C 0000 0010             		move.w	#0,$10(a1)
0000917A                            
0000917A                            loc_8A92:
0000917A 0829 0001 0022             		btst	#1,$22(a1)
00009180 6600                       		bne.s	loc_8AB6
00009182 08E9 0005 0022             		bset	#5,$22(a1)
00009188 08E8 0005 0022             		bset	#5,$22(a0)
0000918E 4E75                       		rts	
00009190                            ; ===========================================================================
00009190                            
00009190                            loc_8AA8:
00009190 0828 0005 0022             		btst	#5,$22(a0)
00009196 6700                       		beq.s	locret_8AC2
00009198 337C 0001 001C             		move.w	#1,$1C(a1)
0000919E                            
0000919E                            loc_8AB6:
0000919E 08A8 0005 0022             		bclr	#5,$22(a0)
000091A4 08A9 0005 0022             		bclr	#5,$22(a1)
000091AA                            
000091AA                            locret_8AC2:
000091AA 4E75                       		rts	
000091AC                            ; ===========================================================================
000091AC                            
000091AC                            loc_8AC4:
000091AC 4A69 0012                  		tst.w	$12(a1)
000091B0 6A00                       		bpl.s	locret_8AD8
000091B2 4A43                       		tst.w	d3
000091B4 6A00                       		bpl.s	locret_8AD8
000091B6 9769 000C                  		sub.w	d3,$C(a1)
000091BA 337C 0000 0012             		move.w	#0,$12(a1)
000091C0                            
000091C0                            locret_8AD8:
000091C0 4E75                       		rts	
000091C2                            ; End of function Obj44_SolidWall
000091C2                            
000091C2                            
000091C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091C2                            
000091C2                            
000091C2                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000091C2 43F8 D000                  		lea	($FFFFD000).w,a1
000091C6 3029 0008                  		move.w	8(a1),d0
000091CA 9068 0008                  		sub.w	8(a0),d0
000091CE D041                       		add.w	d1,d0
000091D0 6B00                       		bmi.s	loc_8B48
000091D2 3601                       		move.w	d1,d3
000091D4 D643                       		add.w	d3,d3
000091D6 B043                       		cmp.w	d3,d0
000091D8 6200                       		bhi.s	loc_8B48
000091DA 1629 0016                  		move.b	$16(a1),d3
000091DE 4883                       		ext.w	d3
000091E0 D443                       		add.w	d3,d2
000091E2 3629 000C                  		move.w	$C(a1),d3
000091E6 9668 000C                  		sub.w	$C(a0),d3
000091EA D642                       		add.w	d2,d3
000091EC 6B00                       		bmi.s	loc_8B48
000091EE 3802                       		move.w	d2,d4
000091F0 D844                       		add.w	d4,d4
000091F2 B644                       		cmp.w	d4,d3
000091F4 6400                       		bcc.s	loc_8B48
000091F6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091FA 6B00                       		bmi.s	loc_8B48
000091FC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009202 6400                       		bcc.s	loc_8B48
00009204 4A78 FE08                  		tst.w	($FFFFFE08).w
00009208 6600                       		bne.s	loc_8B48
0000920A 3A00                       		move.w	d0,d5
0000920C B240                       		cmp.w	d0,d1
0000920E 6400                       		bcc.s	loc_8B30
00009210 D241                       		add.w	d1,d1
00009212 9041                       		sub.w	d1,d0
00009214 3A00                       		move.w	d0,d5
00009216 4445                       		neg.w	d5
00009218                            
00009218                            loc_8B30:
00009218 3203                       		move.w	d3,d1
0000921A B443                       		cmp.w	d3,d2
0000921C 6400                       		bcc.s	loc_8B3C
0000921E 9644                       		sub.w	d4,d3
00009220 3203                       		move.w	d3,d1
00009222 4441                       		neg.w	d1
00009224                            
00009224                            loc_8B3C:
00009224 BA41                       		cmp.w	d1,d5
00009226 6200                       		bhi.s	loc_8B44
00009228 7801                       		moveq	#1,d4
0000922A 4E75                       		rts	
0000922C                            ; ===========================================================================
0000922C                            
0000922C                            loc_8B44:
0000922C 78FF                       		moveq	#-1,d4
0000922E 4E75                       		rts	
00009230                            ; ===========================================================================
00009230                            
00009230                            loc_8B48:
00009230 7800                       		moveq	#0,d4
00009232 4E75                       		rts	
00009234                            ; End of function Obj44_SolidWall2
00009234                            
00009234                            ; ===========================================================================
00009234                            ; ---------------------------------------------------------------------------
00009234                            ; Object 1E - Ball Hog enemy (SBZ)
00009234                            ; ---------------------------------------------------------------------------
00009234                            
00009234                            Obj1E:					; XREF: Obj_Index
00009234 7000                       		moveq	#0,d0
00009236 1028 0024                  		move.b	$24(a0),d0
0000923A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000923E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009242                            ; ===========================================================================
00009242 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009244 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009246                            ; ===========================================================================
00009246                            
00009246                            Obj1E_Main:				; XREF: Obj1E_Index
00009246 117C 0013 0016             		move.b	#$13,$16(a0)
0000924C 117C 0008 0017             		move.b	#8,$17(a0)
00009252 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000925A 317C 2302 0002             		move.w	#$2302,2(a0)
00009260 117C 0004 0001             		move.b	#4,1(a0)
00009266 117C 0004 0018             		move.b	#4,$18(a0)
0000926C 117C 0005 0020             		move.b	#5,$20(a0)
00009272 117C 000C 0019             		move.b	#$C,$19(a0)
00009278 6100 0000                  		bsr.w	ObjectFall
0000927C 4EB9 0000 0000             		jsr	ObjHitFloor
00009282 4A41                       		tst.w	d1
00009284 6A00                       		bpl.s	locret_8BAC
00009286 D368 000C                  		add.w	d1,$C(a0)
0000928A 317C 0000 0012             		move.w	#0,$12(a0)
00009290 5428 0024                  		addq.b	#2,$24(a0)
00009294                            
00009294                            locret_8BAC:
00009294 4E75                       		rts	
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj1E_Action:				; XREF: Obj1E_Index
00009296 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000929C 6100 0000                  		bsr.w	AnimateSprite
000092A0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
000092A6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
000092A8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
000092AC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
000092AE 6000                       		bra.s	Obj1E_MarkAsGone
000092B0                            ; ===========================================================================
000092B0                            
000092B0                            Obj1E_SetBall:				; XREF: Obj1E_Action
000092B0 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000092B4                            
000092B4                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000092B4 6000 0000                  		bra.w	MarkObjGone
000092B8                            ; ===========================================================================
000092B8                            
000092B8                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000092B8 117C 0001 0032             		move.b	#1,$32(a0)
000092BE 6100 0000                  		bsr.w	SingleObjLoad
000092C2 6600                       		bne.s	loc_8C1A
000092C4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000092C8 3368 0008 0008             		move.w	8(a0),8(a1)
000092CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092D4 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000092DA 337C 0000 0012             		move.w	#0,$12(a1)
000092E0 70FC                       		moveq	#-4,d0
000092E2 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092E8 6700                       		beq.s	loc_8C0A	; if not, branch
000092EA 4440                       		neg.w	d0
000092EC 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092F0                            
000092F0                            loc_8C0A:
000092F0 D169 0008                  		add.w	d0,8(a1)
000092F4 0669 000C 000C             		addi.w	#$C,$C(a1)
000092FA 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009300                            
00009300                            loc_8C1A:
00009300 60B2                       		bra.s	Obj1E_MarkAsGone
00009302                            ; ===========================================================================
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009302                            ; ---------------------------------------------------------------------------
00009302                            
00009302                            Obj20:					; XREF: Obj_Index
00009302 7000                       		moveq	#0,d0
00009304 1028 0024                  		move.b	$24(a0),d0
00009308 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000930C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009310                            ; ===========================================================================
00009310 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009312 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009314                            ; ===========================================================================
00009314                            
00009314                            Obj20_Main:				; XREF: Obj20_Index
00009314 5428 0024                  		addq.b	#2,$24(a0)
00009318 117C 0007 0016             		move.b	#7,$16(a0)
0000931E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009326 317C 2302 0002             		move.w	#$2302,2(a0)
0000932C 117C 0004 0001             		move.b	#4,1(a0)
00009332 117C 0003 0018             		move.b	#3,$18(a0)
00009338 117C 0087 0020             		move.b	#$87,$20(a0)
0000933E 117C 0008 0019             		move.b	#8,$19(a0)
00009344 7000                       		moveq	#0,d0
00009346 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000934A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000934E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009352 117C 0004 001A             		move.b	#4,$1A(a0)
00009358                            
00009358                            Obj20_Bounce:				; XREF: Obj20_Index
00009358 4EB9 0000 0000             		jsr	ObjectFall
0000935E 4A68 0012                  		tst.w	$12(a0)
00009362 6B00                       		bmi.s	Obj20_ChkExplode
00009364 4EB9 0000 0000             		jsr	ObjHitFloor
0000936A 4A41                       		tst.w	d1
0000936C 6A00                       		bpl.s	Obj20_ChkExplode
0000936E D368 000C                  		add.w	d1,$C(a0)
00009372 317C FD00 0012             		move.w	#-$300,$12(a0)
00009378 4A03                       		tst.b	d3
0000937A 6700                       		beq.s	Obj20_ChkExplode
0000937C 6B00                       		bmi.s	loc_8CA4
0000937E 4A68 0010                  		tst.w	$10(a0)
00009382 6A00                       		bpl.s	Obj20_ChkExplode
00009384 4468 0010                  		neg.w	$10(a0)
00009388 6000                       		bra.s	Obj20_ChkExplode
0000938A                            ; ===========================================================================
0000938A                            
0000938A                            loc_8CA4:				; XREF: Obj20_Bounce
0000938A 4A68 0010                  		tst.w	$10(a0)
0000938E 6B00                       		bmi.s	Obj20_ChkExplode
00009390 4468 0010                  		neg.w	$10(a0)
00009394                            
00009394                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009394 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009398 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000939A 10BC 0024                  		move.b	#$24,0(a0)
0000939E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000093A2 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000093A8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000093AC                            ; ===========================================================================
000093AC                            
000093AC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000093AC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000093B0 6A00                       		bpl.s	Obj20_Display
000093B2 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000093B8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000093BE                            
000093BE                            Obj20_Display:
000093BE 6100 0000                  		bsr.w	DisplaySprite
000093C2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000093C6 0640 00E0                  		addi.w	#$E0,d0
000093CA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000093CE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000093D2 4E75                       		rts	
000093D4                            ; ===========================================================================
000093D4                            ; ---------------------------------------------------------------------------
000093D4                            ; Object 24 - explosion	from a destroyed monitor
000093D4                            ; ---------------------------------------------------------------------------
000093D4                            
000093D4                            Obj24:					; XREF: Obj_Index
000093D4 7000                       		moveq	#0,d0
000093D6 1028 0024                  		move.b	$24(a0),d0
000093DA 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093DE 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093E2                            ; ===========================================================================
000093E2 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093E4 0000                       		dc.w Obj24_Animate-Obj24_Index
000093E6                            ; ===========================================================================
000093E6                            
000093E6                            Obj24_Main:				; XREF: Obj24_Index
000093E6 5428 0024                  		addq.b	#2,$24(a0)
000093EA 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093F2 317C 041C 0002             		move.w	#$41C,2(a0)
000093F8 117C 0004 0001             		move.b	#4,1(a0)
000093FE 117C 0001 0018             		move.b	#1,$18(a0)
00009404 117C 0000 0020             		move.b	#0,$20(a0)
0000940A 117C 000C 0019             		move.b	#$C,$19(a0)
00009410 117C 0009 001E             		move.b	#9,$1E(a0)
00009416 117C 0000 001A             		move.b	#0,$1A(a0)
0000941C 303C 00A5                  		move.w	#$A5,d0
00009420 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play explosion sound
00009426                            
00009426                            Obj24_Animate:				; XREF: Obj24_Index
00009426 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000942A 6A00                       		bpl.s	Obj24_Display
0000942C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009432 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009436 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000943C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009440                            
00009440                            Obj24_Display:
00009440 6000 0000                  		bra.w	DisplaySprite
00009444                            ; ===========================================================================
00009444                            ; ---------------------------------------------------------------------------
00009444                            ; Object 27 - explosion	from a destroyed enemy
00009444                            ; ---------------------------------------------------------------------------
00009444                            
00009444                            Obj27:					; XREF: Obj_Index
00009444 7000                       		moveq	#0,d0
00009446 1028 0024                  		move.b	$24(a0),d0
0000944A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000944E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009452                            ; ===========================================================================
00009452 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009454 0000                       		dc.w Obj27_Main-Obj27_Index
00009456 0000                       		dc.w Obj27_Animate-Obj27_Index
00009458                            ; ===========================================================================
00009458                            
00009458                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009458 5428 0024                  		addq.b	#2,$24(a0)
0000945C 6100 0000                  		bsr.w	SingleObjLoad
00009460 6600                       		bne.s	Obj27_Main
00009462 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009466 3368 0008 0008             		move.w	8(a0),8(a1)
0000946C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009472 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009478                            
00009478                            Obj27_Main:				; XREF: Obj27_Index
00009478 5428 0024                  		addq.b	#2,$24(a0)
0000947C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009484 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000948A 117C 0004 0001             		move.b	#4,1(a0)
00009490 117C 0001 0018             		move.b	#1,$18(a0)
00009496 117C 0000 0020             		move.b	#0,$20(a0)
0000949C 117C 000C 0019             		move.b	#$C,$19(a0)
000094A2                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094A2 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094A8 117C 0000 001A             		move.b	#0,$1A(a0)
000094AE 303C 00C1                  		move.w	#$C1,d0
000094B2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000094B8                            
000094B8 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000094BE 1028 0028                  		move.b	$28(a0),d0
000094C2 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000094C8 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000094CE                            
000094CE                            Obj27_Animate:				; XREF: Obj27_Index
000094CE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094D2 6A00                       		bpl.s	Obj27_Display
000094D4                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094D4 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094DA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094DE 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094E4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094E8                            
000094E8                            Obj27_Display:
000094E8 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094EE 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094F4 6000 0000                  		bra.w	DisplaySprite
000094F8                            ; ===========================================================================
000094F8                            ; ---------------------------------------------------------------------------
000094F8                            Obj27_ExplosionXYSpd:
000094F8                            		; dc.w	-$350, -$300	; Left
000094F8                            		; dc.w	-$200, -$450	; Near middle (left)
000094F8                            		; dc.w	0, -$500	; Middle
000094F8                            		; dc.w	$200, -$450	; Near middle (right)
000094F8                            		; dc.w	$350, -$300	; Right
000094F8                            
000094F8 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094FC FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009500 0000 FA00                  		dc.w	0, -$600	; Middle
00009504 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009508 0150 FC00                  		dc.w	$150, -$400	; Right
0000950C                            
0000950C 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009526                            ; ---------------------------------------------------------------------------
00009526                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009526                            ; ---------------------------------------------------------------------------
00009526                            
00009526                            Obj3F:					; XREF: Obj_Index
00009526 7000                       		moveq	#0,d0
00009528 1028 0024                  		move.b	$24(a0),d0
0000952C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009530 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009534                            ; ===========================================================================
00009534 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009536 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009538                            ; ===========================================================================
00009538                            
00009538                            Obj3F_Main:				; XREF: Obj3F_Index
00009538 5428 0024                  		addq.b	#2,$24(a0)
0000953C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009544 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000954A 117C 0004 0001             		move.b	#4,1(a0)
00009550 117C 0001 0018             		move.b	#1,$18(a0)
00009556 117C 0000 0020             		move.b	#0,$20(a0)
0000955C 117C 000C 0019             		move.b	#$C,$19(a0)
00009562 117C 0007 001E             		move.b	#7,$1E(a0)
00009568 117C 0000 001A             		move.b	#0,$1A(a0)
0000956E 303C 00C4                  		move.w	#$C4,d0
00009572 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009578                            ; ===========================================================================
00009578                            Ani_obj1E:
00009578                            	include "_anim\obj1E.asm"
00009578                            ; ---------------------------------------------------------------------------
00009578                            ; Animation script - doors (SBZ)
00009578                            ; ---------------------------------------------------------------------------
00009578 0000                       		dc.w byte_8E4A-Ani_obj1E
0000957A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009592 00                         		even
00009592 00                         		even
00009592                            
00009592                            ; ---------------------------------------------------------------------------
00009592                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009592                            ; ---------------------------------------------------------------------------
00009592                            Map_obj1E:
00009592                            	include "_maps\obj1E.asm"
00009592                            Map_a7ad:
00009592 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009594 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009596 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009598 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
0000959A 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
0000959C 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
0000959E 02                         Map_a7ad_C: 	dc.b $2
0000959F EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000095A4 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000095A9 02                         Map_a7ad_17: 	dc.b $2
000095AA EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
000095AF FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000095B4 02                         Map_a7ad_22: 	dc.b $2
000095B5 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
000095BA 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
000095BF 02                         Map_a7ad_2D: 	dc.b $2
000095C0 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000095C5 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000095CA 02                         Map_a7ad_38: 	dc.b $2
000095CB F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000095D0 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000095D5 02                         Map_a7ad_43: 	dc.b $2
000095D6 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000095DB E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000095E0                            	even
000095E0                            	even
000095E0                            
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Sprite mappings - explosion
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            Map_obj24:
000095E0                            	include "_maps\obj24.asm"
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Sprite mappings - explosion
000095E0                            ; ---------------------------------------------------------------------------
000095E0 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095E4 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095E8 01                         byte_8EAE:	dc.b 1
000095E9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095EE 01                         byte_8EB4:	dc.b 1
000095EF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095F4 01                         byte_8EBA:	dc.b 1
000095F5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095FA 01                         byte_8EC0:	dc.b 1
000095FB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009600                            		even
00009600                            		even
00009600                            
00009600                            ; ---------------------------------------------------------------------------
00009600                            ; Sprite mappings - explosion
00009600                            ; ---------------------------------------------------------------------------
00009600 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009604 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009608 0000                       		dc.w byte_8EF7-Map_obj27
0000960A 01                         byte_8ED0:	dc.b 1
0000960B F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009610 01                         byte_8ED6:	dc.b 1
00009611 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009616 01                         byte_8EDC:	dc.b 1
00009617 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000961C 04                         byte_8EE2:	dc.b 4
0000961D EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009622 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009627 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000962C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009631 04                         byte_8EF7:	dc.b 4
00009632 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009637 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000963C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009641 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009646                            		even
00009646                            ; ---------------------------------------------------------------------------
00009646                            ; Sprite mappings - explosion from when	a boss is destroyed
00009646                            ; ---------------------------------------------------------------------------
00009646 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009648 0000                       		dc.w byte_8F16-Map_obj3F
0000964A 0000                       		dc.w byte_8F1C-Map_obj3F
0000964C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000964E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009650 01                         byte_8F16:	dc.b 1
00009651 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009656 01                         byte_8F1C:	dc.b 1
00009657 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000965C                            		even
0000965C                            ; ===========================================================================
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            ; Object 28 - animals
0000965C                            ; ---------------------------------------------------------------------------
0000965C                            
0000965C                            Obj28:					; XREF: Obj_Index
0000965C 7000                       		moveq	#0,d0
0000965E 1028 0024                  		move.b	$24(a0),d0
00009662 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009666 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000966A                            ; ===========================================================================
0000966A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000966E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009672 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009676 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000967A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000967E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009682 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009686 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000968A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000968E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009692 0000                       		dc.w loc_92D6-Obj28_Index
00009694                            
00009694 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000096A0                            
000096A0 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000096A4 0000 0000                  		dc.l Map_obj28
000096A8 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000096AC 0000 0000                  		dc.l Map_obj28a		; mappings address
000096B0 FE80 FD00                  		dc.w $FE80, $FD00
000096B4 0000 0000                  		dc.l Map_obj28
000096B8 FEC0 FE80                  		dc.w $FEC0, $FE80
000096BC 0000 0000                  		dc.l Map_obj28a
000096C0 FE40 FD00                  		dc.w $FE40, $FD00
000096C4 0000 0000                  		dc.l Map_obj28b
000096C8 FD00 FC00                  		dc.w $FD00, $FC00
000096CC 0000 0000                  		dc.l Map_obj28a
000096D0 FD80 FC80                  		dc.w $FD80, $FC80
000096D4 0000 0000                  		dc.l Map_obj28b
000096D8                            
000096D8 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096E8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096F8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009704                            
00009704 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009718 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000972C 0000 0000                  		dc.l Map_obj28b
00009730                            
00009730 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009742 0565 05B3                  		dc.w $565, $5B3
00009746                            ; ===========================================================================
00009746                            
00009746                            Obj28_Ending:				; XREF: Obj28_Index
00009746 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000974A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000974E 7000                       		moveq	#0,d0
00009750 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009754 D040                       		add.w	d0,d0		; multiply d0 by 2
00009756 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000975A 0440 0014                  		subi.w	#$14,d0
0000975E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009764 D040                       		add.w	d0,d0
00009766 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000976C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009770 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009776 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000977C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009782 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009788 117C 000C 0016             		move.b	#$C,$16(a0)
0000978E 117C 0004 0001             		move.b	#4,1(a0)
00009794 08E8 0000 0001             		bset	#0,1(a0)
0000979A 117C 0006 0018             		move.b	#6,$18(a0)
000097A0 117C 0008 0019             		move.b	#8,$19(a0)
000097A6 117C 0007 001E             		move.b	#7,$1E(a0)
000097AC 6000 0000                  		bra.w	DisplaySprite
000097B0                            ; ===========================================================================
000097B0                            
000097B0                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000097B0 5428 0024                  		addq.b	#2,$24(a0)
000097B4 6100 9526                  		bsr.w	RandomNumber
000097B8 0240 0001                  		andi.w	#1,d0
000097BC 7200                       		moveq	#0,d1
000097BE 1238 FE10                  		move.b	($FFFFFE10).w,d1
000097C2 D241                       		add.w	d1,d1
000097C4 D240                       		add.w	d0,d1
000097C6 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000097CA 1031 1000                  		move.b	(a1,d1.w),d0
000097CE 1140 0030                  		move.b	d0,$30(a0)
000097D2 E748                       		lsl.w	#3,d0
000097D4 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097D8 D2C0                       		adda.w	d0,a1
000097DA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097DE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097E2 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097E6 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097EC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097F2 6700                       		beq.s	loc_90C0	; if yes, branch
000097F4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097FA                            
000097FA                            loc_90C0:
000097FA 117C 000C 0016             		move.b	#$C,$16(a0)
00009800 117C 0004 0001             		move.b	#4,1(a0)
00009806 08E8 0000 0001             		bset	#0,1(a0)
0000980C 117C 0006 0018             		move.b	#6,$18(a0)
00009812 117C 0008 0019             		move.b	#8,$19(a0)
00009818 117C 0007 001E             		move.b	#7,$1E(a0)
0000981E 117C 0002 001A             		move.b	#2,$1A(a0)
00009824 317C FC00 0012             		move.w	#-$400,$12(a0)
0000982A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000982E 6600                       		bne.s	loc_911C
00009830 6100 0000                  		bsr.w	SingleObjLoad
00009834 6600                       		bne.s	Obj28_Display
00009836 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000983A 3368 0008 0008             		move.w	8(a0),8(a1)
00009840 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009846 3028 003E                  		move.w	$3E(a0),d0
0000984A E248                       		lsr.w	#1,d0
0000984C 1340 001A                  		move.b	d0,$1A(a1)
00009850                            
00009850                            Obj28_Display:
00009850 6000 0000                  		bra.w	DisplaySprite
00009854                            ; ===========================================================================
00009854                            
00009854                            loc_911C:
00009854 117C 0012 0024             		move.b	#$12,$24(a0)
0000985A 4268 0010                  		clr.w	$10(a0)
0000985E 6000 0000                  		bra.w	DisplaySprite
00009862                            ; ===========================================================================
00009862                            
00009862                            loc_912A:				; XREF: Obj28_Index
00009862 4A28 0001                  		tst.b	1(a0)
00009866 6A00 0000                  		bpl.w	DeleteObject
0000986A 6100 0000                  		bsr.w	ObjectFall
0000986E 4A68 0012                  		tst.w	$12(a0)
00009872 6B00                       		bmi.s	loc_9180
00009874 4EB9 0000 0000             		jsr	ObjHitFloor
0000987A 4A41                       		tst.w	d1
0000987C 6A00                       		bpl.s	loc_9180
0000987E D368 000C                  		add.w	d1,$C(a0)
00009882 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009888 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000988E 117C 0001 001A             		move.b	#1,$1A(a0)
00009894 1028 0030                  		move.b	$30(a0),d0
00009898 D000                       		add.b	d0,d0
0000989A 5800                       		addq.b	#4,d0
0000989C 1140 0024                  		move.b	d0,$24(a0)
000098A0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000098A4 6700                       		beq.s	loc_9180
000098A6 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000098AC 6700                       		beq.s	loc_9180
000098AE 4468 0010                  		neg.w	$10(a0)
000098B2 0868 0000 0001             		bchg	#0,1(a0)
000098B8                            
000098B8                            loc_9180:
000098B8 6000 0000                  		bra.w	DisplaySprite
000098BC                            ; ===========================================================================
000098BC                            
000098BC                            loc_9184:				; XREF: Obj28_Index
000098BC 6100 0000                  		bsr.w	ObjectFall
000098C0 117C 0001 001A             		move.b	#1,$1A(a0)
000098C6 4A68 0012                  		tst.w	$12(a0)
000098CA 6B00                       		bmi.s	loc_91AE
000098CC 117C 0000 001A             		move.b	#0,$1A(a0)
000098D2 4EB9 0000 0000             		jsr	ObjHitFloor
000098D8 4A41                       		tst.w	d1
000098DA 6A00                       		bpl.s	loc_91AE
000098DC D368 000C                  		add.w	d1,$C(a0)
000098E0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098E6                            
000098E6                            loc_91AE:
000098E6 4A28 0028                  		tst.b	$28(a0)
000098EA 6600                       		bne.s	loc_9224
000098EC 4A28 0001                  		tst.b	1(a0)
000098F0 6A00 0000                  		bpl.w	DeleteObject
000098F4 6000 0000                  		bra.w	DisplaySprite
000098F8                            ; ===========================================================================
000098F8                            
000098F8                            loc_91C0:				; XREF: Obj28_Index
000098F8 6100 0000                  		bsr.w	SpeedToPos
000098FC 0668 0018 0012             		addi.w	#$18,$12(a0)
00009902 4A68 0012                  		tst.w	$12(a0)
00009906 6B00                       		bmi.s	loc_91FC
00009908 4EB9 0000 0000             		jsr	ObjHitFloor
0000990E 4A41                       		tst.w	d1
00009910 6A00                       		bpl.s	loc_91FC
00009912 D368 000C                  		add.w	d1,$C(a0)
00009916 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000991C 4A28 0028                  		tst.b	$28(a0)
00009920 6700                       		beq.s	loc_91FC
00009922 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009928 6700                       		beq.s	loc_91FC
0000992A 4468 0010                  		neg.w	$10(a0)
0000992E 0868 0000 0001             		bchg	#0,1(a0)
00009934                            
00009934                            loc_91FC:
00009934 5328 001E                  		subq.b	#1,$1E(a0)
00009938 6A00                       		bpl.s	loc_9212
0000993A 117C 0001 001E             		move.b	#1,$1E(a0)
00009940 5228 001A                  		addq.b	#1,$1A(a0)
00009944 0228 0001 001A             		andi.b	#1,$1A(a0)
0000994A                            
0000994A                            loc_9212:
0000994A 4A28 0028                  		tst.b	$28(a0)
0000994E 6600                       		bne.s	loc_9224
00009950 4A28 0001                  		tst.b	1(a0)
00009954 6A00 0000                  		bpl.w	DeleteObject
00009958 6000 0000                  		bra.w	DisplaySprite
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            loc_9224:				; XREF: Obj28_Index
0000995C 3028 0008                  		move.w	8(a0),d0
00009960 9078 D008                  		sub.w	($FFFFD008).w,d0
00009964 6500                       		bcs.s	loc_923C
00009966 0440 0180                  		subi.w	#$180,d0
0000996A 6A00                       		bpl.s	loc_923C
0000996C 4A28 0001                  		tst.b	1(a0)
00009970 6A00 0000                  		bpl.w	DeleteObject
00009974                            
00009974                            loc_923C:
00009974 6000 0000                  		bra.w	DisplaySprite
00009978                            ; ===========================================================================
00009978                            
00009978                            loc_9240:				; XREF: Obj28_Index
00009978 4A28 0001                  		tst.b	1(a0)
0000997C 6A00 0000                  		bpl.w	DeleteObject
00009980 5368 0036                  		subq.w	#1,$36(a0)
00009984 6600 0000                  		bne.w	loc_925C
00009988 117C 0002 0024             		move.b	#2,$24(a0)
0000998E 117C 0003 0018             		move.b	#3,$18(a0)
00009994                            
00009994                            loc_925C:
00009994 6000 0000                  		bra.w	DisplaySprite
00009998                            ; ===========================================================================
00009998                            
00009998                            loc_9260:				; XREF: Obj28_Index
00009998 6100 0000                  		bsr.w	sub_9404
0000999C 6400                       		bcc.s	loc_927C
0000999E 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099A4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099AA 117C 000E 0024             		move.b	#$E,$24(a0)
000099B0 6000 FF46                  		bra.w	loc_91C0
000099B4                            ; ===========================================================================
000099B4                            
000099B4                            loc_927C:
000099B4 6000 FFA6                  		bra.w	loc_9224
000099B8                            ; ===========================================================================
000099B8                            
000099B8                            loc_9280:				; XREF: Obj28_Index
000099B8 6100 0000                  		bsr.w	sub_9404
000099BC 6A00                       		bpl.s	loc_92B6
000099BE 4268 0010                  		clr.w	$10(a0)
000099C2 4268 0032                  		clr.w	$32(a0)
000099C6 6100 0000                  		bsr.w	SpeedToPos
000099CA 0668 0018 0012             		addi.w	#$18,$12(a0)
000099D0 6100 0000                  		bsr.w	loc_93C4
000099D4 6100 0000                  		bsr.w	loc_93EC
000099D8 5328 001E                  		subq.b	#1,$1E(a0)
000099DC 6A00                       		bpl.s	loc_92B6
000099DE 117C 0001 001E             		move.b	#1,$1E(a0)
000099E4 5228 001A                  		addq.b	#1,$1A(a0)
000099E8 0228 0001 001A             		andi.b	#1,$1A(a0)
000099EE                            
000099EE                            loc_92B6:
000099EE 6000 FF6C                  		bra.w	loc_9224
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            loc_92BA:				; XREF: Obj28_Index
000099F2 6100 0000                  		bsr.w	sub_9404
000099F6 6A00                       		bpl.s	loc_9310
000099F8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099FE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A04 117C 0004 0024             		move.b	#4,$24(a0)
00009A0A 6000 FEB0                  		bra.w	loc_9184
00009A0E                            ; ===========================================================================
00009A0E                            
00009A0E                            loc_92D6:				; XREF: Obj28_Index
00009A0E 6100 0000                  		bsr.w	ObjectFall
00009A12 117C 0001 001A             		move.b	#1,$1A(a0)
00009A18 4A68 0012                  		tst.w	$12(a0)
00009A1C 6B00                       		bmi.s	loc_9310
00009A1E 117C 0000 001A             		move.b	#0,$1A(a0)
00009A24 4EB9 0000 0000             		jsr	ObjHitFloor
00009A2A 4A41                       		tst.w	d1
00009A2C 6A00                       		bpl.s	loc_9310
00009A2E 4628 0029                  		not.b	$29(a0)
00009A32 6600                       		bne.s	loc_9306
00009A34 4468 0010                  		neg.w	$10(a0)
00009A38 0868 0000 0001             		bchg	#0,1(a0)
00009A3E                            
00009A3E                            loc_9306:
00009A3E D368 000C                  		add.w	d1,$C(a0)
00009A42 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A48                            
00009A48                            loc_9310:
00009A48 6000 FF12                  		bra.w	loc_9224
00009A4C                            ; ===========================================================================
00009A4C                            
00009A4C                            loc_9314:				; XREF: Obj28_Index
00009A4C 6100 0000                  		bsr.w	sub_9404
00009A50 6A00                       		bpl.s	loc_932E
00009A52 4268 0010                  		clr.w	$10(a0)
00009A56 4268 0032                  		clr.w	$32(a0)
00009A5A 6100 0000                  		bsr.w	ObjectFall
00009A5E 6100 0000                  		bsr.w	loc_93C4
00009A62 6100 0000                  		bsr.w	loc_93EC
00009A66                            
00009A66                            loc_932E:
00009A66 6000 FEF4                  		bra.w	loc_9224
00009A6A                            ; ===========================================================================
00009A6A                            
00009A6A                            loc_9332:				; XREF: Obj28_Index
00009A6A 6100 0000                  		bsr.w	sub_9404
00009A6E 6A00                       		bpl.s	loc_936C
00009A70 6100 0000                  		bsr.w	ObjectFall
00009A74 117C 0001 001A             		move.b	#1,$1A(a0)
00009A7A 4A68 0012                  		tst.w	$12(a0)
00009A7E 6B00                       		bmi.s	loc_936C
00009A80 117C 0000 001A             		move.b	#0,$1A(a0)
00009A86 4EB9 0000 0000             		jsr	ObjHitFloor
00009A8C 4A41                       		tst.w	d1
00009A8E 6A00                       		bpl.s	loc_936C
00009A90 4468 0010                  		neg.w	$10(a0)
00009A94 0868 0000 0001             		bchg	#0,1(a0)
00009A9A D368 000C                  		add.w	d1,$C(a0)
00009A9E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AA4                            
00009AA4                            loc_936C:
00009AA4 6000 FEB6                  		bra.w	loc_9224
00009AA8                            ; ===========================================================================
00009AA8                            
00009AA8                            loc_9370:				; XREF: Obj28_Index
00009AA8 6100 0000                  		bsr.w	sub_9404
00009AAC 6A00                       		bpl.s	loc_93C0
00009AAE 6100 0000                  		bsr.w	SpeedToPos
00009AB2 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AB8 4A68 0012                  		tst.w	$12(a0)
00009ABC 6B00                       		bmi.s	loc_93AA
00009ABE 4EB9 0000 0000             		jsr	ObjHitFloor
00009AC4 4A41                       		tst.w	d1
00009AC6 6A00                       		bpl.s	loc_93AA
00009AC8 4628 0029                  		not.b	$29(a0)
00009ACC 6600                       		bne.s	loc_93A0
00009ACE 4468 0010                  		neg.w	$10(a0)
00009AD2 0868 0000 0001             		bchg	#0,1(a0)
00009AD8                            
00009AD8                            loc_93A0:
00009AD8 D368 000C                  		add.w	d1,$C(a0)
00009ADC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AE2                            
00009AE2                            loc_93AA:
00009AE2 5328 001E                  		subq.b	#1,$1E(a0)
00009AE6 6A00                       		bpl.s	loc_93C0
00009AE8 117C 0001 001E             		move.b	#1,$1E(a0)
00009AEE 5228 001A                  		addq.b	#1,$1A(a0)
00009AF2 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AF8                            
00009AF8                            loc_93C0:
00009AF8 6000 FE62                  		bra.w	loc_9224
00009AFC                            ; ===========================================================================
00009AFC                            
00009AFC                            loc_93C4:
00009AFC 117C 0001 001A             		move.b	#1,$1A(a0)
00009B02 4A68 0012                  		tst.w	$12(a0)
00009B06 6B00                       		bmi.s	locret_93EA
00009B08 117C 0000 001A             		move.b	#0,$1A(a0)
00009B0E 4EB9 0000 0000             		jsr	ObjHitFloor
00009B14 4A41                       		tst.w	d1
00009B16 6A00                       		bpl.s	locret_93EA
00009B18 D368 000C                  		add.w	d1,$C(a0)
00009B1C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B22                            
00009B22                            locret_93EA:
00009B22 4E75                       		rts	
00009B24                            ; ===========================================================================
00009B24                            
00009B24                            loc_93EC:
00009B24 08E8 0000 0001             		bset	#0,1(a0)
00009B2A 3028 0008                  		move.w	8(a0),d0
00009B2E 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B32 6400                       		bcc.s	locret_9402
00009B34 08A8 0000 0001             		bclr	#0,1(a0)
00009B3A                            
00009B3A                            locret_9402:
00009B3A 4E75                       		rts	
00009B3C                            
00009B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B3C                            
00009B3C                            
00009B3C                            sub_9404:
00009B3C 3038 D008                  		move.w	($FFFFD008).w,d0
00009B40 9068 0008                  		sub.w	8(a0),d0
00009B44 0440 00B8                  		subi.w	#$B8,d0
00009B48 4E75                       		rts	
00009B4A                            ; End of function sub_9404
00009B4A                            
00009B4A                            ; ===========================================================================
00009B4A                            ; ---------------------------------------------------------------------------
00009B4A                            ; Object 29 - points that appear when you destroy something
00009B4A                            ; ---------------------------------------------------------------------------
00009B4A                            
00009B4A                            Obj29:					; XREF: Obj_Index
00009B4A 7000                       		moveq	#0,d0
00009B4C 1028 0024                  		move.b	$24(a0),d0
00009B50 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B54 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B58 6000 0000                  		bra.w	DisplaySprite
00009B5C                            ; ===========================================================================
00009B5C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B5E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B60                            ; ===========================================================================
00009B60                            
00009B60                            Obj29_Main:				; XREF: Obj29_Index
00009B60 5428 0024                  		addq.b	#2,$24(a0)
00009B64 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B6C 317C 2797 0002             		move.w	#$2797,2(a0)
00009B72 117C 0004 0001             		move.b	#4,1(a0)
00009B78 117C 0001 0018             		move.b	#1,$18(a0)
00009B7E 117C 0008 0019             		move.b	#8,$19(a0)
00009B84 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B8A                            
00009B8A                            Obj29_Slower:				; XREF: Obj29_Index
00009B8A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B8E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B92 6100 0000                  		bsr.w	SpeedToPos
00009B96 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            ; ---------------------------------------------------------------------------
00009B9E                            ; Sprite mappings - animals
00009B9E                            ; ---------------------------------------------------------------------------
00009B9E                            Map_obj28:
00009B9E                            	include "_maps\obj28.asm"
00009B9E                            ; ---------------------------------------------------------------------------
00009B9E                            ; Sprite mappings - animals
00009B9E                            ; ---------------------------------------------------------------------------
00009B9E 0000                       		dc.w byte_9472-Map_obj28
00009BA0 0000                       		dc.w byte_9478-Map_obj28
00009BA2 0000                       		dc.w byte_946C-Map_obj28
00009BA4 01                         byte_946C:	dc.b 1
00009BA5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BAA 01                         byte_9472:	dc.b 1
00009BAB F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009BB0 01                         byte_9478:	dc.b 1
00009BB1 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009BB6                            		even
00009BB6                            		even
00009BB6                            
00009BB6                            Map_obj28a:
00009BB6                            	include "_maps\obj28a.asm"
00009BB6                            ; ---------------------------------------------------------------------------
00009BB6                            ; Sprite mappings - animals
00009BB6                            ; ---------------------------------------------------------------------------
00009BB6 0000                       		dc.w byte_948A-Map_obj28a
00009BB8 0000                       		dc.w byte_9490-Map_obj28a
00009BBA 0000                       		dc.w byte_9484-Map_obj28a
00009BBC 01                         byte_9484:	dc.b 1
00009BBD F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BC2 01                         byte_948A:	dc.b 1
00009BC3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009BC8 01                         byte_9490:	dc.b 1
00009BC9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009BCE                            		even
00009BCE                            		even
00009BCE                            
00009BCE                            Map_obj28b:
00009BCE                            	include "_maps\obj28b.asm"
00009BCE                            ; ---------------------------------------------------------------------------
00009BCE                            ; Sprite mappings - animals
00009BCE                            ; ---------------------------------------------------------------------------
00009BCE 0000                       		dc.w byte_94A2-Map_obj28b
00009BD0 0000                       		dc.w byte_94A8-Map_obj28b
00009BD2 0000                       		dc.w byte_949C-Map_obj28b
00009BD4 01                         byte_949C:	dc.b 1
00009BD5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BDA 01                         byte_94A2:	dc.b 1
00009BDB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BE0 01                         byte_94A8:	dc.b 1
00009BE1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BE6                            		even
00009BE6                            		even
00009BE6                            
00009BE6                            ; ---------------------------------------------------------------------------
00009BE6                            ; Sprite mappings - points that	appear when you	destroy	something
00009BE6                            ; ---------------------------------------------------------------------------
00009BE6                            Map_obj29:
00009BE6                            	include "_maps\obj29.asm"
00009BE6                            ; ---------------------------------------------------------------------------
00009BE6                            ; Sprite mappings - points that	appear when you	destroy	something
00009BE6                            ; ---------------------------------------------------------------------------
00009BE6 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BEA 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BEE 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BF2 0000                       		dc.w byte_94E5-Map_obj29
00009BF4 01                         byte_94BC:	dc.b 1
00009BF5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BFA 01                         byte_94C2:	dc.b 1
00009BFB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009C00 01                         byte_94C8:	dc.b 1
00009C01 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009C06 01                         byte_94CE:	dc.b 1
00009C07 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009C0C 01                         byte_94D4:	dc.b 1
00009C0D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009C12 02                         byte_94DA:	dc.b 2
00009C13 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009C18 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009C1D 02                         byte_94E5:	dc.b 2
00009C1E FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009C23 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009C28                            		even
00009C28                            		even
00009C28                            
00009C28                            ; ===========================================================================
00009C28                            ; ---------------------------------------------------------------------------
00009C28                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009C28                            ; ---------------------------------------------------------------------------
00009C28                            
00009C28                            Obj1F:					; XREF: Obj_Index
00009C28 7000                       		moveq	#0,d0
00009C2A 1028 0024                  		move.b	$24(a0),d0
00009C2E 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C32 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C36                            ; ===========================================================================
00009C36 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C38 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C3A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C3C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C3E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C40                            ; ===========================================================================
00009C40                            
00009C40                            Obj1F_Main:				; XREF: Obj1F_Index
00009C40 117C 0010 0016             		move.b	#$10,$16(a0)
00009C46 117C 0008 0017             		move.b	#8,$17(a0)
00009C4C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C54 317C 0400 0002             		move.w	#$400,2(a0)
00009C5A 117C 0004 0001             		move.b	#4,1(a0)
00009C60 117C 0003 0018             		move.b	#3,$18(a0)
00009C66 117C 0006 0020             		move.b	#6,$20(a0)
00009C6C 117C 0015 0019             		move.b	#$15,$19(a0)
00009C72 6100 0000                  		bsr.w	ObjectFall
00009C76 4EB9 0000 0000             		jsr	ObjHitFloor
00009C7C 4A41                       		tst.w	d1
00009C7E 6A00                       		bpl.s	locret_955A
00009C80 D368 000C                  		add.w	d1,$C(a0)
00009C84 1143 0026                  		move.b	d3,$26(a0)
00009C88 317C 0000 0012             		move.w	#0,$12(a0)
00009C8E 5428 0024                  		addq.b	#2,$24(a0)
00009C92                            
00009C92                            locret_955A:
00009C92 4E75                       		rts	
00009C94                            ; ===========================================================================
00009C94                            
00009C94                            Obj1F_Action:				; XREF: Obj1F_Index
00009C94 7000                       		moveq	#0,d0
00009C96 1028 0025                  		move.b	$25(a0),d0
00009C9A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C9E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009CA2 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009CA8 6100 0000                  		bsr.w	AnimateSprite
00009CAC 6000 0000                  		bra.w	MarkObjGone
00009CB0                            ; ===========================================================================
00009CB0 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009CB2 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009CB4                            ; ===========================================================================
00009CB4                            
00009CB4                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009CB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009CB8 6A00                       		bpl.s	locret_95B6
00009CBA 4A28 0001                  		tst.b	1(a0)
00009CBE 6A00                       		bpl.s	Obj1F_Move
00009CC0 0868 0001 0032             		bchg	#1,$32(a0)
00009CC6 6600                       		bne.s	Obj1F_MakeFire
00009CC8                            
00009CC8                            Obj1F_Move:
00009CC8 5428 0025                  		addq.b	#2,$25(a0)
00009CCC 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CD2 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CD8 6100 0000                  		bsr.w	Obj1F_SetAni
00009CDC 5600                       		addq.b	#3,d0
00009CDE 1140 001C                  		move.b	d0,$1C(a0)
00009CE2 0868 0000 0022             		bchg	#0,$22(a0)
00009CE8 6600                       		bne.s	locret_95B6
00009CEA 4468 0010                  		neg.w	$10(a0)		; change direction
00009CEE                            
00009CEE                            locret_95B6:
00009CEE 4E75                       		rts	
00009CF0                            ; ===========================================================================
00009CF0                            
00009CF0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CF0 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CF6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CFC 6100 0000                  		bsr.w	SingleObjLoad
00009D00 6600                       		bne.s	Obj1F_MakeFire2
00009D02 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009D06 137C 0006 0024             		move.b	#6,$24(a1)
00009D0C 3368 0008 0008             		move.w	8(a0),8(a1)
00009D12 0469 0010 0008             		subi.w	#$10,8(a1)
00009D18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D1E 337C FF00 0010             		move.w	#-$100,$10(a1)
00009D24                            
00009D24                            Obj1F_MakeFire2:
00009D24 6100 0000                  		bsr.w	SingleObjLoad
00009D28 6600                       		bne.s	locret_9618
00009D2A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D2E 137C 0006 0024             		move.b	#6,$24(a1)
00009D34 3368 0008 0008             		move.w	8(a0),8(a1)
00009D3A 0669 0010 0008             		addi.w	#$10,8(a1)
00009D40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D46 337C 0100 0010             		move.w	#$100,$10(a1)
00009D4C                            
00009D4C                            locret_9618:
00009D4C 4E75                       		rts	
00009D4E                            ; ===========================================================================
00009D4E                            
00009D4E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D4E 5368 0030                  		subq.w	#1,$30(a0)
00009D52 6B00                       		bmi.s	loc_966E
00009D54 6100 0000                  		bsr.w	SpeedToPos
00009D58 0868 0000 0032             		bchg	#0,$32(a0)
00009D5E 6600                       		bne.s	loc_9654
00009D60 3628 0008                  		move.w	8(a0),d3
00009D64 0643 0010                  		addi.w	#$10,d3
00009D68 0828 0000 0022             		btst	#0,$22(a0)
00009D6E 6700                       		beq.s	loc_9640
00009D70 0443 0020                  		subi.w	#$20,d3
00009D74                            
00009D74                            loc_9640:
00009D74 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D7A 0C41 FFF8                  		cmpi.w	#-8,d1
00009D7E 6D00                       		blt.s	loc_966E
00009D80 0C41 000C                  		cmpi.w	#$C,d1
00009D84 6C00                       		bge.s	loc_966E
00009D86 4E75                       		rts	
00009D88                            ; ===========================================================================
00009D88                            
00009D88                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D88 4EB9 0000 0000             		jsr	ObjHitFloor
00009D8E D368 000C                  		add.w	d1,$C(a0)
00009D92 1143 0026                  		move.b	d3,$26(a0)
00009D96 6100 0000                  		bsr.w	Obj1F_SetAni
00009D9A 5600                       		addq.b	#3,d0
00009D9C 1140 001C                  		move.b	d0,$1C(a0)
00009DA0 4E75                       		rts	
00009DA2                            ; ===========================================================================
00009DA2                            
00009DA2                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009DA2 5528 0025                  		subq.b	#2,$25(a0)
00009DA6 317C 003B 0030             		move.w	#59,$30(a0)
00009DAC 317C 0000 0010             		move.w	#0,$10(a0)
00009DB2 6100 0000                  		bsr.w	Obj1F_SetAni
00009DB6 1140 001C                  		move.b	d0,$1C(a0)
00009DBA 4E75                       		rts	
00009DBC                            ; ---------------------------------------------------------------------------
00009DBC                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009DBC                            ; ---------------------------------------------------------------------------
00009DBC                            
00009DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DBC                            
00009DBC                            
00009DBC                            Obj1F_SetAni:				; XREF: loc_966E
00009DBC 7000                       		moveq	#0,d0
00009DBE 1628 0026                  		move.b	$26(a0),d3
00009DC2 6B00                       		bmi.s	loc_96A4
00009DC4 0C03 0006                  		cmpi.b	#6,d3
00009DC8 6500                       		bcs.s	locret_96A2
00009DCA 7001                       		moveq	#1,d0
00009DCC 0828 0000 0022             		btst	#0,$22(a0)
00009DD2 6600                       		bne.s	locret_96A2
00009DD4 7002                       		moveq	#2,d0
00009DD6                            
00009DD6                            locret_96A2:
00009DD6 4E75                       		rts	
00009DD8                            ; ===========================================================================
00009DD8                            
00009DD8                            loc_96A4:				; XREF: Obj1F_SetAni
00009DD8 0C03 00FA                  		cmpi.b	#-6,d3
00009DDC 6200                       		bhi.s	locret_96B6
00009DDE 7002                       		moveq	#2,d0
00009DE0 0828 0000 0022             		btst	#0,$22(a0)
00009DE6 6600                       		bne.s	locret_96B6
00009DE8 7001                       		moveq	#1,d0
00009DEA                            
00009DEA                            locret_96B6:
00009DEA 4E75                       		rts	
00009DEC                            ; End of function Obj1F_SetAni
00009DEC                            
00009DEC                            ; ===========================================================================
00009DEC                            
00009DEC                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DEC 6100 0000                  		bsr.w	DeleteObject
00009DF0 4E75                       		rts	
00009DF2                            ; ===========================================================================
00009DF2                            ; ---------------------------------------------------------------------------
00009DF2                            ; Sub-object - missile that the	Crabmeat throws
00009DF2                            ; ---------------------------------------------------------------------------
00009DF2                            
00009DF2                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DF2 5428 0024                  		addq.b	#2,$24(a0)
00009DF6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DFE 317C 0400 0002             		move.w	#$400,2(a0)
00009E04 117C 0004 0001             		move.b	#4,1(a0)
00009E0A 117C 0003 0018             		move.b	#3,$18(a0)
00009E10 117C 0087 0020             		move.b	#$87,$20(a0)
00009E16 117C 0008 0019             		move.b	#8,$19(a0)
00009E1C 317C FC00 0012             		move.w	#-$400,$12(a0)
00009E22 117C 0007 001C             		move.b	#7,$1C(a0)
00009E28                            
00009E28                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009E28 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E2E 6100 0000                  		bsr.w	AnimateSprite
00009E32 6100 0000                  		bsr.w	ObjectFall
00009E36 6100 0000                  		bsr.w	DisplaySprite
00009E3A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E3E 0640 00E0                  		addi.w	#$E0,d0
00009E42 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E46 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E48 4E75                       		rts	
00009E4A                            ; ===========================================================================
00009E4A                            
00009E4A                            Obj1F_Delete2:
00009E4A 6000 0000                  		bra.w	DeleteObject
00009E4E                            ; ===========================================================================
00009E4E                            Ani_obj1F:
00009E4E                            	include "_anim\obj1F.asm"
00009E4E                            ; ---------------------------------------------------------------------------
00009E4E                            ; Animation script - Crabmeat enemy
00009E4E                            ; ---------------------------------------------------------------------------
00009E4E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E54 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E5A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E5E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E62 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E66 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E6A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E70 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E76 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E7C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E80 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E84                            		even
00009E84                            		even
00009E84                            
00009E84                            ; ---------------------------------------------------------------------------
00009E84                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E84                            ; ---------------------------------------------------------------------------
00009E84                            Map_obj1F:
00009E84                            	include "_maps\obj1F.asm"
00009E84                            Map_1514:
00009E84 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E86 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E88 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E8A 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E8C 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E8E 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E90 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E92 03                         Map_1514_E: 	dc.b $3
00009E93 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E98 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E9D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EA2 03                         Map_1514_1E: 	dc.b $3
00009EA3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EA8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EAD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EB2 03                         Map_1514_2E: 	dc.b $3
00009EB3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EB8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EBD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EC2 03                         Map_1514_3E: 	dc.b $3
00009EC3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EC8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009ECD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009ED2 03                         Map_1514_4E: 	dc.b $3
00009ED3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009ED8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EDD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EE2 01                         Map_1514_5E: 	dc.b $1
00009EE3 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009EE8 01                         Map_1514_64: 	dc.b $1
00009EE9 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009EEE                            	even
00009EEE                            	even
00009EEE                            
00009EEE                            ; ===========================================================================
00009EEE                            ; ---------------------------------------------------------------------------
00009EEE                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009EEE                            ; ---------------------------------------------------------------------------
00009EEE                            
00009EEE                            Obj22:					; XREF: Obj_Index
00009EEE 7000                       		moveq	#0,d0
00009EF0 1028 0024                  		move.b	$24(a0),d0
00009EF4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009EF8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009EFC                            ; ===========================================================================
00009EFC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009EFE 0000                       		dc.w Obj22_Action-Obj22_Index
00009F00 0000                       		dc.w Obj22_Delete-Obj22_Index
00009F02                            ; ===========================================================================
00009F02                            
00009F02                            Obj22_Main:				; XREF: Obj22_Index
00009F02 5428 0024                  		addq.b	#2,$24(a0)
00009F06 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009F0E 317C 0444 0002             		move.w	#$444,2(a0)
00009F14 117C 0004 0001             		move.b	#4,1(a0)
00009F1A 117C 0003 0018             		move.b	#3,$18(a0)
00009F20 117C 0008 0020             		move.b	#8,$20(a0)
00009F26 117C 0018 0019             		move.b	#$18,$19(a0)
00009F2C                            
00009F2C                            Obj22_Action:				; XREF: Obj22_Index
00009F2C 7000                       		moveq	#0,d0
00009F2E 1028 0025                  		move.b	$25(a0),d0
00009F32 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F36 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F3A 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F40 6100 0000                  		bsr.w	AnimateSprite
00009F44 6000 0000                  		bra.w	MarkObjGone
00009F48                            ; ===========================================================================
00009F48 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F4A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F4C                            ; ===========================================================================
00009F4C                            
00009F4C                            Obj22_Move:				; XREF: Obj22_Index2
00009F4C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F50 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F52 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F58 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F5A 5428 0025                  		addq.b	#2,$25(a0)
00009F5E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F64 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F6A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F70 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F76 6600                       		bne.s	locret_986C	; if not, branch
00009F78 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F7C                            
00009F7C                            locret_986C:
00009F7C 4E75                       		rts	
00009F7E                            ; ===========================================================================
00009F7E                            
00009F7E                            Obj22_Fire:				; XREF: Obj22_Move
00009F7E 6100 0000                  		bsr.w	SingleObjLoad
00009F82 6600                       		bne.s	locret_98D0
00009F84 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F88 3368 0008 0008             		move.w	8(a0),8(a1)
00009F8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F94 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F9A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009FA0 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009FA6 303C 0018                  		move.w	#$18,d0
00009FAA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009FB0 6600                       		bne.s	loc_98AA	; if not, branch
00009FB2 4440                       		neg.w	d0
00009FB4 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009FB8                            
00009FB8                            loc_98AA:
00009FB8 D169 0008                  		add.w	d0,8(a1)
00009FBC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009FC2 337C 000E 0032             		move.w	#$E,$32(a1)
00009FC8 2348 003C                  		move.l	a0,$3C(a1)
00009FCC 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009FD2 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FD8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FDE                            
00009FDE                            locret_98D0:
00009FDE 4E75                       		rts	
00009FE0                            ; ===========================================================================
00009FE0                            
00009FE0                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FE0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FE4 6B00                       		bmi.s	Obj22_ChgDir
00009FE6 6100 0000                  		bsr.w	SpeedToPos
00009FEA 4A28 0034                  		tst.b	$34(a0)
00009FEE 6600                       		bne.s	locret_992A
00009FF0 3038 D008                  		move.w	($FFFFD008).w,d0
00009FF4 9068 0008                  		sub.w	8(a0),d0
00009FF8 6A00                       		bpl.s	Obj22_SetNrSonic
00009FFA 4440                       		neg.w	d0
00009FFC                            
00009FFC                            Obj22_SetNrSonic:
00009FFC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A000 6400                       		bcc.s	locret_992A	; if not, branch
0000A002 4A28 0001                  		tst.b	1(a0)
0000A006 6A00                       		bpl.s	locret_992A
0000A008 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A00E 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A014 6000                       		bra.s	Obj22_Stop
0000A016                            ; ===========================================================================
0000A016                            
0000A016                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A016 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A01C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A022 317C 003B 0032             		move.w	#59,$32(a0)
0000A028                            
0000A028                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A028 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A02C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A032 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A038                            
0000A038                            locret_992A:
0000A038 4E75                       		rts	
0000A03A                            ; ===========================================================================
0000A03A                            
0000A03A                            Obj22_Delete:				; XREF: Obj22_Index
0000A03A 6100 0000                  		bsr.w	DeleteObject
0000A03E 4E75                       		rts	
0000A040                            ; ===========================================================================
0000A040                            ; ---------------------------------------------------------------------------
0000A040                            ; Object 23 - missile that Buzz	Bomber throws
0000A040                            ; ---------------------------------------------------------------------------
0000A040                            
0000A040                            Obj23:					; XREF: Obj_Index
0000A040 7000                       		moveq	#0,d0
0000A042 1028 0024                  		move.b	$24(a0),d0
0000A046 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A04A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A04E                            ; ===========================================================================
0000A04E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A050 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A052 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A054 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A056 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A058                            ; ===========================================================================
0000A058                            
0000A058                            Obj23_Main:				; XREF: Obj23_Index
0000A058 5368 0032                  		subq.w	#1,$32(a0)
0000A05C 6A00                       		bpl.s	Obj23_ChkCancel
0000A05E 5428 0024                  		addq.b	#2,$24(a0)
0000A062 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A06A 317C 2444 0002             		move.w	#$2444,2(a0)
0000A070 117C 0004 0001             		move.b	#4,1(a0)
0000A076 117C 0003 0018             		move.b	#3,$18(a0)
0000A07C 117C 0008 0019             		move.b	#8,$19(a0)
0000A082 0228 0003 0022             		andi.b	#3,$22(a0)
0000A088 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A08C 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A08E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A094 117C 0087 0020             		move.b	#$87,$20(a0)
0000A09A 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0A0 6000                       		bra.s	Obj23_Animate2
0000A0A2                            ; ===========================================================================
0000A0A2                            
0000A0A2                            Obj23_Animate:				; XREF: Obj23_Index
0000A0A2 6100                       		bsr.s	Obj23_ChkCancel
0000A0A4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0AA 6100 0000                  		bsr.w	AnimateSprite
0000A0AE 6000 0000                  		bra.w	DisplaySprite
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A0B2                            ; destroyed, and if it has, then cancel	the missile
0000A0B2                            ; ---------------------------------------------------------------------------
0000A0B2                            
0000A0B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0B2                            
0000A0B2                            
0000A0B2                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A0B2 2268 003C                  		movea.l	$3C(a0),a1
0000A0B6 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A0BA 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A0BC 4E75                       		rts	
0000A0BE                            ; End of function Obj23_ChkCancel
0000A0BE                            
0000A0BE                            ; ===========================================================================
0000A0BE                            
0000A0BE                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A0BE 0828 0007 0022             		btst	#7,$22(a0)
0000A0C4 6600                       		bne.s	Obj23_Explode
0000A0C6 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0D2 6100 0000                  		bsr.w	SpeedToPos
0000A0D6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0DC 6100 0000                  		bsr.w	AnimateSprite
0000A0E0 6100 0000                  		bsr.w	DisplaySprite
0000A0E4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0E8 0640 00E0                  		addi.w	#$E0,d0
0000A0EC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0F0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0F2 4E75                       		rts	
0000A0F4                            ; ===========================================================================
0000A0F4                            
0000A0F4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0F4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0F8 117C 0000 0024             		move.b	#0,$24(a0)
0000A0FE 6000 F2D4                  		bra.w	Obj24
0000A102                            ; ===========================================================================
0000A102                            
0000A102                            Obj23_Delete:				; XREF: Obj23_Index
0000A102 6100 0000                  		bsr.w	DeleteObject
0000A106 4E75                       		rts	
0000A108                            ; ===========================================================================
0000A108                            
0000A108                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A108 4A28 0001                  		tst.b	1(a0)
0000A10C 6AF4                       		bpl.s	Obj23_Delete
0000A10E 6100 0000                  		bsr.w	SpeedToPos
0000A112                            
0000A112                            Obj23_Animate2:				; XREF: Obj23_Main
0000A112 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A118 6100 0000                  		bsr.w	AnimateSprite
0000A11C 6100 0000                  		bsr.w	DisplaySprite
0000A120 4E75                       		rts	
0000A122                            ; ===========================================================================
0000A122                            Ani_obj22:
0000A122                            	include "_anim\obj22.asm"
0000A122                            ; ---------------------------------------------------------------------------
0000A122                            ; Animation script - Buzz Bomber enemy
0000A122                            ; ---------------------------------------------------------------------------
0000A122 0000                       		dc.w byte_9A1E-Ani_obj22
0000A124 0000                       		dc.w byte_9A22-Ani_obj22
0000A126 0000                       		dc.w byte_9A26-Ani_obj22
0000A128 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A12C 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A130 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A134                            		even
0000A134                            		even
0000A134                            
0000A134                            Ani_obj23:
0000A134                            	include "_anim\obj23.asm"
0000A134                            ; ---------------------------------------------------------------------------
0000A134                            ; Animation script - missile that Buzz Bomber throws
0000A134                            ; ---------------------------------------------------------------------------
0000A134 0000                       		dc.w byte_9A2E-Ani_obj23
0000A136 0000                       		dc.w byte_9A32-Ani_obj23
0000A138 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A13C 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A140                            		even
0000A140                            		even
0000A140                            
0000A140                            ; ---------------------------------------------------------------------------
0000A140                            ; Sprite mappings - Buzz Bomber	enemy
0000A140                            ; ---------------------------------------------------------------------------
0000A140                            Map_obj22:
0000A140                            	include "_maps\obj22.asm"
0000A140                            Map_e97a:
0000A140 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A142 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A144 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A146 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A148 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A14A 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A14C 06                         Map_e97a_C: 	dc.b $6
0000A14D F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A152 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A157 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A15C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A161 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A166 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A16B 06                         Map_e97a_2B: 	dc.b $6
0000A16C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A171 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A176 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A17B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A180 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A185 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A18A 07                         Map_e97a_4A: 	dc.b $7
0000A18B 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A190 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A195 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A19A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A19F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1A4 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1A9 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1AE 07                         Map_e97a_6E: 	dc.b $7
0000A1AF 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A1B4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A1B9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A1BE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A1C3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1C8 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A1CD F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1D2 06                         Map_e97a_92: 	dc.b $6
0000A1D3 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1D8 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1DD 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1E2 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1E7 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1EC F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1F1 04                         Map_e97a_B1: 	dc.b $4
0000A1F2 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1F7 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1FC 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A201 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A206                            	even
0000A206                            	even
0000A206                            
0000A206                            ; ---------------------------------------------------------------------------
0000A206                            ; Sprite mappings - missile that Buzz Bomber throws
0000A206                            ; ---------------------------------------------------------------------------
0000A206                            Map_obj23:
0000A206                            	include "_maps\obj23.asm"
0000A206                            ; ---------------------------------------------------------------------------
0000A206                            ; Sprite mappings - missile that Buzz Bomber throws
0000A206                            ; ---------------------------------------------------------------------------
0000A206 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A20A 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A20E 01                         byte_9B0E:	dc.b 1
0000A20F F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A214 01                         byte_9B14:	dc.b 1
0000A215 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A21A 01                         byte_9B1A:	dc.b 1
0000A21B F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A220 01                         byte_9B20:	dc.b 1
0000A221 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A226                            		even
0000A226                            		even
0000A226                            
0000A226                            ; ===========================================================================
0000A226                            ; ---------------------------------------------------------------------------
0000A226                            ; Object 25 - rings
0000A226                            ; ---------------------------------------------------------------------------
0000A226                            
0000A226                            Obj25:					; XREF: Obj_Index
0000A226 7000                       		moveq	#0,d0
0000A228 1028 0024                  		move.b	$24(a0),d0
0000A22C 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A230 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A234                            ; ===========================================================================
0000A234 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A236 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A238 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A23A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A23C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A23E                            ; ---------------------------------------------------------------------------
0000A23E                            ; Distances between rings (format: horizontal, vertical)
0000A23E                            ; ---------------------------------------------------------------------------
0000A23E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A240 1800                       		dc.b $18, 0		; horizontal normal
0000A242 2000                       		dc.b $20, 0		; horizontal wide
0000A244 0010                       		dc.b 0,	$10		; vertical tight
0000A246 0018                       		dc.b 0,	$18		; vertical normal
0000A248 0020                       		dc.b 0,	$20		; vertical wide
0000A24A 1010                       		dc.b $10, $10		; diagonal
0000A24C 1818                       		dc.b $18, $18
0000A24E 2020                       		dc.b $20, $20
0000A250 F010                       		dc.b $F0, $10
0000A252 E818                       		dc.b $E8, $18
0000A254 E020                       		dc.b $E0, $20
0000A256 1008                       		dc.b $10, 8
0000A258 1810                       		dc.b $18, $10
0000A25A F008                       		dc.b $F0, 8
0000A25C E810                       		dc.b $E8, $10
0000A25E                            ; ===========================================================================
0000A25E                            
0000A25E                            Obj25_Main:				; XREF: Obj25_Index
0000A25E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A262 7000                       		moveq	#0,d0
0000A264 1028 0023                  		move.b	$23(a0),d0
0000A268 45F2 0002                  		lea	2(a2,d0.w),a2
0000A26C 1812                       		move.b	(a2),d4
0000A26E 1228 0028                  		move.b	$28(a0),d1
0000A272 1001                       		move.b	d1,d0
0000A274 0241 0007                  		andi.w	#7,d1
0000A278 0C41 0007                  		cmpi.w	#7,d1
0000A27C 6600                       		bne.s	loc_9B80
0000A27E 7206                       		moveq	#6,d1
0000A280                            
0000A280                            loc_9B80:
0000A280 4841                       		swap	d1
0000A282 323C 0000                  		move.w	#0,d1
0000A286 E808                       		lsr.b	#4,d0
0000A288 D040                       		add.w	d0,d0
0000A28A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A28E 4885                       		ext.w	d5
0000A290 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A294 4886                       		ext.w	d6
0000A296 2248                       		movea.l	a0,a1
0000A298 3428 0008                  		move.w	8(a0),d2
0000A29C 3628 000C                  		move.w	$C(a0),d3
0000A2A0 E20C                       		lsr.b	#1,d4
0000A2A2 6500                       		bcs.s	loc_9C02
0000A2A4 0892 0007                  		bclr	#7,(a2)
0000A2A8 6000                       		bra.s	loc_9BBA
0000A2AA                            ; ===========================================================================
0000A2AA                            
0000A2AA                            Obj25_MakeRings:
0000A2AA 4841                       		swap	d1
0000A2AC E20C                       		lsr.b	#1,d4
0000A2AE 6500                       		bcs.s	loc_9C02
0000A2B0 0892 0007                  		bclr	#7,(a2)
0000A2B4 6100 0000                  		bsr.w	SingleObjLoad
0000A2B8 6600                       		bne.s	loc_9C0E
0000A2BA                            
0000A2BA                            loc_9BBA:				; XREF: Obj25_Main
0000A2BA 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A2BE 5429 0024                  		addq.b	#2,$24(a1)
0000A2C2 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A2C6 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A2CC 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A2D0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2D8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2DE 137C 0004 0001             		move.b	#4,1(a1)
0000A2E4 137C 0002 0018             		move.b	#2,$18(a1)
0000A2EA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2F0 137C 0008 0019             		move.b	#8,$19(a1)
0000A2F6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2FC 1341 0034                  		move.b	d1,$34(a1)
0000A300                            
0000A300                            loc_9C02:
0000A300 5241                       		addq.w	#1,d1
0000A302 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A304 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A306 4841                       		swap	d1
0000A308 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A30C                            
0000A30C                            loc_9C0E:
0000A30C 0812 0000                  		btst	#0,(a2)
0000A310 6600 0000                  		bne.w	DeleteObject
0000A314                            
0000A314                            Obj25_Animate:				; XREF: Obj25_Index
0000A314 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A31A 6100 0000                  		bsr.w	DisplaySprite
0000A31E 3028 0032                  		move.w	$32(a0),d0
0000A322 0240 FF80                  		andi.w	#$FF80,d0
0000A326 3238 F700                  		move.w	($FFFFF700).w,d1
0000A32A 0441 0080                  		subi.w	#$80,d1
0000A32E 0241 FF80                  		andi.w	#$FF80,d1
0000A332 9041                       		sub.w	d1,d0
0000A334 0C40 0280                  		cmpi.w	#$280,d0
0000A338 6200                       		bhi.s	Obj25_Delete
0000A33A 4E75                       		rts	
0000A33C                            ; ===========================================================================
0000A33C                            
0000A33C                            Obj25_Collect:				; XREF: Obj25_Index
0000A33C 5428 0024                  		addq.b	#2,$24(a0)
0000A340 117C 0000 0020             		move.b	#0,$20(a0)
0000A346 117C 0001 0018             		move.b	#1,$18(a0)
0000A34C 6100 0000                  		bsr.w	CollectRing
0000A350 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A354 7000                       		moveq	#0,d0
0000A356 1028 0023                  		move.b	$23(a0),d0
0000A35A 1228 0034                  		move.b	$34(a0),d1
0000A35E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A362                            
0000A362                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A362 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A368 6100 0000                  		bsr.w	AnimateSprite
0000A36C 6000 0000                  		bra.w	DisplaySprite
0000A370                            ; ===========================================================================
0000A370                            
0000A370                            Obj25_Delete:				; XREF: Obj25_Index
0000A370 6000 0000                  		bra.w	DeleteObject
0000A374                            
0000A374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A374                            
0000A374                            
0000A374                            CollectRing:				; XREF: Obj25_Collect
0000A374 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A378 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A37E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A382 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A388 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A38A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A390 6700                       		beq.s	loc_9CA4
0000A392 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A398 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A39A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A3A0 6600                       		bne.s	Obj25_PlaySnd
0000A3A2                            
0000A3A2                            loc_9CA4:
0000A3A2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A3A6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A3AA 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A3AE                            
0000A3AE                            Obj25_PlaySnd:
0000A3AE 4EF9 0000 15D2             		jmp	(PlaySound_Special).l
0000A3B4                            ; End of function CollectRing
0000A3B4                            
0000A3B4                            ; ===========================================================================
0000A3B4                            ; ---------------------------------------------------------------------------
0000A3B4                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A3B4                            ; ---------------------------------------------------------------------------
0000A3B4                            
0000A3B4                            Obj37:					; XREF: Obj_Index
0000A3B4 7000                       		moveq	#0,d0
0000A3B6 1028 0024                  		move.b	$24(a0),d0
0000A3BA 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A3BE 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A3C2                            ; ===========================================================================
0000A3C2 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A3C4 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A3C6 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A3C8 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A3CA 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A3CC                            ; ===========================================================================
0000A3CC                            
0000A3CC                            Obj37_CountRings:			; XREF: Obj37_Index
0000A3CC 2248                       		movea.l	a0,a1
0000A3CE 7A00                       		moveq	#0,d5
0000A3D0 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A3D4 7020                       		moveq	#32,d0
0000A3D6 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3D8 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3DA 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3DC                            
0000A3DC                            loc_9CDE:
0000A3DC 5345                       		subq.w	#1,d5
0000A3DE 383C 0288                  		move.w	#$288,d4
0000A3E2 6000                       		bra.s	Obj37_MakeRings
0000A3E4                            ; ===========================================================================
0000A3E4                            
0000A3E4                            Obj37_Loop:
0000A3E4 6100 0000                  		bsr.w	SingleObjLoad
0000A3E8 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3EC                            
0000A3EC                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3EC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3F0 5429 0024                  		addq.b	#2,$24(a1)
0000A3F4 137C 0008 0016             		move.b	#8,$16(a1)
0000A3FA 137C 0008 0017             		move.b	#8,$17(a1)
0000A400 3368 0008 0008             		move.w	8(a0),8(a1)
0000A406 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A40C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A414 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A41A 137C 0004 0001             		move.b	#4,1(a1)
0000A420 137C 0003 0018             		move.b	#3,$18(a1)
0000A426 137C 0047 0020             		move.b	#$47,$20(a1)
0000A42C 137C 0008 0019             		move.b	#8,$19(a1)
0000A432 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A438 4A44                       		tst.w	d4
0000A43A 6B00                       		bmi.s	loc_9D62
0000A43C 3004                       		move.w	d4,d0
0000A43E 6100 88C2                  		bsr.w	CalcSine
0000A442 3404                       		move.w	d4,d2
0000A444 E04A                       		lsr.w	#8,d2
0000A446 E560                       		asl.w	d2,d0
0000A448 E561                       		asl.w	d2,d1
0000A44A 3400                       		move.w	d0,d2
0000A44C 3601                       		move.w	d1,d3
0000A44E 0604 0010                  		addi.b	#$10,d4
0000A452 6400                       		bcc.s	loc_9D62
0000A454 0444 0080                  		subi.w	#$80,d4
0000A458 6400                       		bcc.s	loc_9D62
0000A45A 383C 0288                  		move.w	#$288,d4
0000A45E                            
0000A45E                            loc_9D62:
0000A45E 3342 0010                  		move.w	d2,$10(a1)
0000A462 3343 0012                  		move.w	d3,$12(a1)
0000A466 4442                       		neg.w	d2
0000A468 4444                       		neg.w	d4
0000A46A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A46E                            
0000A46E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A46E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A474 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A47A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A480 303C 00C6                  		move.w	#$C6,d0
0000A484 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A48A                            
0000A48A                            Obj37_Bounce:				; XREF: Obj37_Index
0000A48A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A490 6100 0000                  		bsr.w	SpeedToPos
0000A494 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A49A 6B00                       		bmi.s	Obj37_ChkDel
0000A49C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A4A0 D007                       		add.b	d7,d0
0000A4A2 0200 0003                  		andi.b	#3,d0
0000A4A6 6600                       		bne.s	Obj37_ChkDel
0000A4A8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A4AE 4A41                       		tst.w	d1
0000A4B0 6A00                       		bpl.s	Obj37_ChkDel
0000A4B2 D368 000C                  		add.w	d1,$C(a0)
0000A4B6 3028 0012                  		move.w	$12(a0),d0
0000A4BA E440                       		asr.w	#2,d0
0000A4BC 9168 0012                  		sub.w	d0,$12(a0)
0000A4C0 4468 0012                  		neg.w	$12(a0)
0000A4C4                            
0000A4C4                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A4C4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A4C8 6700                       		beq.s	Obj37_Delete
0000A4CA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4CE 0640 00E0                  		addi.w	#$E0,d0
0000A4D2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A4D6 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4D8 6000 0000                  		bra.w	DisplaySprite
0000A4DC                            ; ===========================================================================
0000A4DC                            
0000A4DC                            Obj37_Collect:				; XREF: Obj37_Index
0000A4DC 5428 0024                  		addq.b	#2,$24(a0)
0000A4E0 117C 0000 0020             		move.b	#0,$20(a0)
0000A4E6 117C 0001 0018             		move.b	#1,$18(a0)
0000A4EC 6100 FE86                  		bsr.w	CollectRing
0000A4F0                            
0000A4F0                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4F0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4F6 6100 0000                  		bsr.w	AnimateSprite
0000A4FA 6000 0000                  		bra.w	DisplaySprite
0000A4FE                            ; ===========================================================================
0000A4FE                            
0000A4FE                            Obj37_Delete:				; XREF: Obj37_Index
0000A4FE 6000 0000                  		bra.w	DeleteObject
0000A502                            ; ===========================================================================
0000A502                            ; ---------------------------------------------------------------------------
0000A502                            ; Object 4B - giant ring for entry to special stage
0000A502                            ; ---------------------------------------------------------------------------
0000A502                            
0000A502                            Obj4B:					; XREF: Obj_Index
0000A502 7000                       		moveq	#0,d0
0000A504 1028 0024                  		move.b	$24(a0),d0
0000A508 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A50C 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A510                            ; ===========================================================================
0000A510 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A512 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A514 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A516 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A518                            ; ===========================================================================
0000A518                            
0000A518                            Obj4B_Main:				; XREF: Obj4B_Index
0000A518 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A520 317C 2400 0002             		move.w	#$2400,2(a0)
0000A526 0028 0004 0001             		ori.b	#4,1(a0)
0000A52C 117C 0040 0019             		move.b	#$40,$19(a0)
0000A532 4A28 0001                  		tst.b	1(a0)
0000A536 6A00                       		bpl.s	Obj4B_Animate
0000A538 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A53E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A542 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A548 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A54A 4E75                       		rts	
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A54C 5428 0024                  		addq.b	#2,$24(a0)
0000A550 117C 0002 0018             		move.b	#2,$18(a0)
0000A556 117C 0052 0020             		move.b	#$52,$20(a0)
0000A55C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A562                            
0000A562                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A562 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A568 3028 0008                  		move.w	8(a0),d0
0000A56C 0240 FF80                  		andi.w	#$FF80,d0
0000A570 3238 F700                  		move.w	($FFFFF700).w,d1
0000A574 0441 0080                  		subi.w	#$80,d1
0000A578 0241 FF80                  		andi.w	#$FF80,d1
0000A57C 9041                       		sub.w	d1,d0
0000A57E 0C40 0280                  		cmpi.w	#$280,d0
0000A582 6200 0000                  		bhi.w	DeleteObject
0000A586 6000 0000                  		bra.w	DisplaySprite
0000A58A                            ; ===========================================================================
0000A58A                            
0000A58A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A58A 5528 0024                  		subq.b	#2,$24(a0)
0000A58E 117C 0000 0020             		move.b	#0,$20(a0)
0000A594 6100 0000                  		bsr.w	SingleObjLoad
0000A598 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A59C 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A5A0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5AC 2348 003C                  		move.l	a0,$3C(a1)
0000A5B0 3038 D008                  		move.w	($FFFFD008).w,d0
0000A5B4 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A5B8 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A5BA 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A5C0                            
0000A5C0                            Obj4B_PlaySnd:
0000A5C0 303C 00C3                  		move.w	#$C3,d0
0000A5C4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A5CA 6096                       		bra.s	Obj4B_Animate
0000A5CC                            ; ===========================================================================
0000A5CC                            
0000A5CC                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A5CC 6000 0000                  		bra.w	DeleteObject
0000A5D0                            ; ===========================================================================
0000A5D0                            ; ---------------------------------------------------------------------------
0000A5D0                            ; Object 7C - flash effect when	you collect the	giant ring
0000A5D0                            ; ---------------------------------------------------------------------------
0000A5D0                            
0000A5D0                            Obj7C:					; XREF: Obj_Index
0000A5D0 7000                       		moveq	#0,d0
0000A5D2 1028 0024                  		move.b	$24(a0),d0
0000A5D6 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5DA 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5DE                            ; ===========================================================================
0000A5DE 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5E0 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5E2 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5E4                            ; ===========================================================================
0000A5E4                            
0000A5E4                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5E4 5428 0024                  		addq.b	#2,$24(a0)
0000A5E8 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5F0 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5F6 0028 0004 0001             		ori.b	#4,1(a0)
0000A5FC 117C 0000 0018             		move.b	#0,$18(a0)
0000A602 117C 0020 0019             		move.b	#$20,$19(a0)
0000A608 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A60E                            
0000A60E                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A60E 6100                       		bsr.s	Obj7C_Collect
0000A610 3028 0008                  		move.w	8(a0),d0
0000A614 0240 FF80                  		andi.w	#$FF80,d0
0000A618 3238 F700                  		move.w	($FFFFF700).w,d1
0000A61C 0441 0080                  		subi.w	#$80,d1
0000A620 0241 FF80                  		andi.w	#$FF80,d1
0000A624 9041                       		sub.w	d1,d0
0000A626 0C40 0280                  		cmpi.w	#$280,d0
0000A62A 6200 0000                  		bhi.w	DeleteObject
0000A62E 6000 0000                  		bra.w	DisplaySprite
0000A632                            
0000A632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A632                            
0000A632                            
0000A632                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A632 5328 001E                  		subq.b	#1,$1E(a0)
0000A636 6A00                       		bpl.s	locret_9F76
0000A638 117C 0001 001E             		move.b	#1,$1E(a0)
0000A63E 5228 001A                  		addq.b	#1,$1A(a0)
0000A642 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A648 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A64A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A650 6600                       		bne.s	locret_9F76	; if not, branch
0000A652 2268 003C                  		movea.l	$3C(a0),a1
0000A656 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A65C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A662 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A668 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A66C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A670                            
0000A670                            locret_9F76:
0000A670 4E75                       		rts	
0000A672                            ; ===========================================================================
0000A672                            
0000A672                            Obj7C_End:				; XREF: Obj7C_Collect
0000A672 5428 0024                  		addq.b	#2,$24(a0)
0000A676 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A67C 588F                       		addq.l	#4,sp
0000A67E 4E75                       		rts	
0000A680                            ; End of function Obj7C_Collect
0000A680                            
0000A680                            ; ===========================================================================
0000A680                            
0000A680                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A680 6000 0000                  		bra.w	DeleteObject
0000A684                            ; ===========================================================================
0000A684                            Ani_obj25:
0000A684                            	include "_anim\obj25.asm"
0000A684                            ; ---------------------------------------------------------------------------
0000A684                            ; Animation script - ring
0000A684                            ; ---------------------------------------------------------------------------
0000A684 0000                       		dc.w byte_9F8C-Ani_obj25
0000A686 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A68C                            		even
0000A68C                            		even
0000A68C                            
0000A68C                            ; ---------------------------------------------------------------------------
0000A68C                            ; Sprite mappings - rings
0000A68C                            ; ---------------------------------------------------------------------------
0000A68C                            Map_obj25:
0000A68C                            	include "_maps\obj25.asm"
0000A68C                            ; ---------------------------------------------------------------------------
0000A68C                            ; Sprite mappings - rings
0000A68C                            ; ---------------------------------------------------------------------------
0000A68C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A690 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A694 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A698 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A69C 01                         byte_9FA2:	dc.b 1
0000A69D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A6A2 01                         byte_9FA8:	dc.b 1
0000A6A3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A6A8 01                         byte_9FAE:	dc.b 1
0000A6A9 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A6AE 01                         byte_9FB4:	dc.b 1
0000A6AF F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A6B4 01                         byte_9FBA:	dc.b 1
0000A6B5 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A6BA 01                         byte_9FC0:	dc.b 1
0000A6BB F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A6C0 01                         byte_9FC6:	dc.b 1
0000A6C1 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A6C6 01                         byte_9FCC:	dc.b 1
0000A6C7 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A6CC                            		even
0000A6CC                            		even
0000A6CC                            
0000A6CC                            ; ---------------------------------------------------------------------------
0000A6CC                            ; Sprite mappings - giant ring
0000A6CC                            ; ---------------------------------------------------------------------------
0000A6CC                            Map_obj4B:
0000A6CC                            	include "_maps\obj4B.asm"
0000A6CC                            ; ---------------------------------------------------------------------------
0000A6CC                            ; Sprite mappings - giant ring
0000A6CC                            ; ---------------------------------------------------------------------------
0000A6CC 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A6D0 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A6D4 0A                         byte_9FDA:	dc.b $A
0000A6D5 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6DA E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6DF E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6E4 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6E9 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6EE F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6F3 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6F8 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6FD 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A702 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A707 08                         byte_A00D:	dc.b 8
0000A708 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A70D E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A712 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A717 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A71C F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A721 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A726 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A72B 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A730 04                         byte_A036:	dc.b 4
0000A731 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A736 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A73B 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A740 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A745 08                         byte_A04B:	dc.b 8
0000A746 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A74B E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A750 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A755 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A75A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A75F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A764 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A769 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A76E                            		even
0000A76E                            		even
0000A76E                            
0000A76E                            ; ---------------------------------------------------------------------------
0000A76E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A76E                            ; ---------------------------------------------------------------------------
0000A76E                            Map_obj7C:
0000A76E                            	include "_maps\obj7C.asm"
0000A76E                            ; ---------------------------------------------------------------------------
0000A76E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A76E                            ; ---------------------------------------------------------------------------
0000A76E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A772 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A776 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A77A 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A77E 02                         byte_A084:	dc.b 2
0000A77F E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A784 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A789 04                         byte_A08F:	dc.b 4
0000A78A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A78F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A794 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A799 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A79E 04                         byte_A0A4:	dc.b 4
0000A79F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A7A4 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A7A9 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A7AE 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A7B3 04                         byte_A0B9:	dc.b 4
0000A7B4 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A7B9 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A7BE 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A7C3 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A7C8 04                         byte_A0CE:	dc.b 4
0000A7C9 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A7CE E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A7D3 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7D8 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7DD 04                         byte_A0E3:	dc.b 4
0000A7DE E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7E3 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7E8 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7ED 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7F2 02                         byte_A0F8:	dc.b 2
0000A7F3 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7F8 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7FD 04                         byte_A103:	dc.b 4
0000A7FE E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A803 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A808 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A80D 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A812                            		even
0000A812                            		even
0000A812                            
0000A812                            ; ===========================================================================
0000A812                            ; ---------------------------------------------------------------------------
0000A812                            ; Object 26 - monitors
0000A812                            ; ---------------------------------------------------------------------------
0000A812                            
0000A812                            Obj26:					; XREF: Obj_Index
0000A812 7000                       		moveq	#0,d0
0000A814 1028 0024                  		move.b	$24(a0),d0
0000A818 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A81C 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A820                            ; ===========================================================================
0000A820 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A822 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A824 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A826 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A828 0000                       		dc.w Obj26_Display-Obj26_Index
0000A82A                            ; ===========================================================================
0000A82A                            
0000A82A                            Obj26_Main:				; XREF: Obj26_Index
0000A82A 5428 0024                  		addq.b	#2,$24(a0)
0000A82E 117C 000E 0016             		move.b	#$E,$16(a0)
0000A834 117C 000E 0017             		move.b	#$E,$17(a0)
0000A83A 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A842 317C 0680 0002             		move.w	#$680,2(a0)
0000A848 117C 0004 0001             		move.b	#4,1(a0)
0000A84E 117C 0003 0018             		move.b	#3,$18(a0)
0000A854 117C 000F 0019             		move.b	#$F,$19(a0)
0000A85A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A85E 7000                       		moveq	#0,d0
0000A860 1028 0023                  		move.b	$23(a0),d0
0000A864 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A86A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A870 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A872 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A878 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A87E 4E75                       		rts	
0000A880                            ; ===========================================================================
0000A880                            
0000A880                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A880 117C 0046 0020             		move.b	#$46,$20(a0)
0000A886 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A88C                            
0000A88C                            Obj26_Solid:				; XREF: Obj26_Index
0000A88C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A890 6700                       		beq.s	loc_A1EC	; if not, branch
0000A892 5500                       		subq.b	#2,d0
0000A894 6600                       		bne.s	Obj26_Fall
0000A896 7200                       		moveq	#0,d1
0000A898 1228 0019                  		move.b	$19(a0),d1
0000A89C 0641 000B                  		addi.w	#$B,d1
0000A8A0 6100 D380                  		bsr.w	ExitPlatform
0000A8A4 0829 0003 0022             		btst	#3,$22(a1)
0000A8AA 6600 0000                  		bne.w	loc_A1BC
0000A8AE 4228 0025                  		clr.b	$25(a0)
0000A8B2 6000 0000                  		bra.w	Obj26_Animate
0000A8B6                            ; ===========================================================================
0000A8B6                            
0000A8B6                            loc_A1BC:				; XREF: Obj26_Solid
0000A8B6 363C 0010                  		move.w	#$10,d3
0000A8BA 3428 0008                  		move.w	8(a0),d2
0000A8BE 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000A8C2 6000 0000                  		bra.w	Obj26_Animate
0000A8C6                            ; ===========================================================================
0000A8C6                            
0000A8C6                            Obj26_Fall:				; XREF: Obj26_Solid
0000A8C6 6100 0000                  		bsr.w	ObjectFall
0000A8CA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8D0 4A41                       		tst.w	d1
0000A8D2 6A00 0000                  		bpl.w	Obj26_Animate
0000A8D6 D368 000C                  		add.w	d1,$C(a0)
0000A8DA 4268 0012                  		clr.w	$12(a0)
0000A8DE 4228 0025                  		clr.b	$25(a0)
0000A8E2 6000 0000                  		bra.w	Obj26_Animate
0000A8E6                            ; ===========================================================================
0000A8E6                            
0000A8E6                            loc_A1EC:				; XREF: Obj26_Solid
0000A8E6 323C 001A                  		move.w	#$1A,d1
0000A8EA 343C 000F                  		move.w	#$F,d2
0000A8EE 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8F2 6700 0000                  		beq.w	loc_A25C
0000A8F6 4A69 0012                  		tst.w	$12(a1)
0000A8FA 6B00                       		bmi.s	loc_A20A
0000A8FC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A902 6700                       		beq.s	loc_A25C	; if yes, branch
0000A904                            
0000A904                            loc_A20A:
0000A904 4A41                       		tst.w	d1
0000A906 6A00                       		bpl.s	loc_A220
0000A908 9769 000C                  		sub.w	d3,$C(a1)
0000A90C 6100 D202                  		bsr.w	loc_74AE
0000A910 117C 0002 0025             		move.b	#2,$25(a0)
0000A916 6000 0000                  		bra.w	Obj26_Animate
0000A91A                            ; ===========================================================================
0000A91A                            
0000A91A                            loc_A220:
0000A91A 4A40                       		tst.w	d0
0000A91C 6700 0000                  		beq.w	loc_A246
0000A920 6B00                       		bmi.s	loc_A230
0000A922 4A69 0010                  		tst.w	$10(a1)
0000A926 6B00                       		bmi.s	loc_A246
0000A928 6000                       		bra.s	loc_A236
0000A92A                            ; ===========================================================================
0000A92A                            
0000A92A                            loc_A230:
0000A92A 4A69 0010                  		tst.w	$10(a1)
0000A92E 6A00                       		bpl.s	loc_A246
0000A930                            
0000A930                            loc_A236:
0000A930 9169 0008                  		sub.w	d0,8(a1)
0000A934 337C 0000 0014             		move.w	#0,$14(a1)
0000A93A 337C 0000 0010             		move.w	#0,$10(a1)
0000A940                            
0000A940                            loc_A246:
0000A940 0829 0001 0022             		btst	#1,$22(a1)
0000A946 6600                       		bne.s	loc_A26A
0000A948 08E9 0005 0022             		bset	#5,$22(a1)
0000A94E 08E8 0005 0022             		bset	#5,$22(a0)
0000A954 6000                       		bra.s	Obj26_Animate
0000A956                            ; ===========================================================================
0000A956                            
0000A956                            loc_A25C:
0000A956 0828 0005 0022             		btst	#5,$22(a0)
0000A95C 6700                       		beq.s	Obj26_Animate
0000A95E 337C 0001 001C             		move.w	#1,$1C(a1)
0000A964                            
0000A964                            loc_A26A:
0000A964 08A8 0005 0022             		bclr	#5,$22(a0)
0000A96A 08A9 0005 0022             		bclr	#5,$22(a1)
0000A970                            
0000A970                            Obj26_Animate:				; XREF: Obj26_Index
0000A970 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A976 6100 0000                  		bsr.w	AnimateSprite
0000A97A                            
0000A97A                            Obj26_Display:				; XREF: Obj26_Index
0000A97A 6100 0000                  		bsr.w	DisplaySprite
0000A97E 3028 0008                  		move.w	8(a0),d0
0000A982 0240 FF80                  		andi.w	#$FF80,d0
0000A986 3238 F700                  		move.w	($FFFFF700).w,d1
0000A98A 0441 0080                  		subi.w	#$80,d1
0000A98E 0241 FF80                  		andi.w	#$FF80,d1
0000A992 9041                       		sub.w	d1,d0
0000A994 0C40 0280                  		cmpi.w	#$280,d0
0000A998 6200 0000                  		bhi.w	DeleteObject
0000A99C 4E75                       		rts	
0000A99E                            ; ===========================================================================
0000A99E                            
0000A99E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A99E 5428 0024                  		addq.b	#2,$24(a0)
0000A9A2 117C 0000 0020             		move.b	#0,$20(a0)
0000A9A8 6100 0000                  		bsr.w	SingleObjLoad
0000A9AC 6600                       		bne.s	Obj26_Explode
0000A9AE 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A9B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9BE 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A9C4 7400                       		moveq	#0,d2	; GMZ
0000A9C6 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A9C8                            
0000A9C8                            Obj26_Explode:
0000A9C8 6100 0000                  		bsr.w	SingleObjLoad
0000A9CC 6600                       		bne.s	Obj26_SetBroken
0000A9CE 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A9D2 5429 0024                  		addq.b	#2,$24(a1)
0000A9D6 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9E6                            
0000A9E6                            Obj26_NextExplosion:
0000A9E6 5802                       		addq.b	#4,d2
0000A9E8 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9EC                            
0000A9EC                            Obj26_SetBroken:
0000A9EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9F0 7000                       		moveq	#0,d0
0000A9F2 1028 0023                  		move.b	$23(a0),d0
0000A9F6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9FC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000AA02 6000 0000                  		bra.w	DisplaySprite
0000AA06                            ; ===========================================================================
0000AA06                            ; ---------------------------------------------------------------------------
0000AA06                            ; Object 2E - contents of monitors
0000AA06                            ; ---------------------------------------------------------------------------
0000AA06                            
0000AA06                            Obj2E:					; XREF: Obj_Index
0000AA06 7000                       		moveq	#0,d0
0000AA08 1028 0024                  		move.b	$24(a0),d0
0000AA0C 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000AA10 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AA14 6000 0000                  		bra.w	DisplaySprite
0000AA18                            ; ===========================================================================
0000AA18 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AA1A 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AA1C 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AA1E                            ; ===========================================================================
0000AA1E                            
0000AA1E                            Obj2E_Main:				; XREF: Obj2E_Index
0000AA1E 5428 0024                  		addq.b	#2,$24(a0)
0000AA22 317C 0680 0002             		move.w	#$680,2(a0)
0000AA28 117C 0024 0001             		move.b	#$24,1(a0)
0000AA2E 117C 0003 0018             		move.b	#3,$18(a0)
0000AA34 117C 0008 0019             		move.b	#8,$19(a0)
0000AA3A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA40 7000                       		moveq	#0,d0
0000AA42 1028 001C                  		move.b	$1C(a0),d0
0000AA46 5400                       		addq.b	#2,d0
0000AA48 1140 001A                  		move.b	d0,$1A(a0)
0000AA4C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA52 D000                       		add.b	d0,d0
0000AA54 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA58 5249                       		addq.w	#1,a1
0000AA5A 2149 0004                  		move.l	a1,4(a0)
0000AA5E                            
0000AA5E                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA5E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA62 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA66 6100 0000                  		bsr.w	SpeedToPos
0000AA6A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA70 4E75                       		rts	
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA72 5428 0024                  		addq.b	#2,$24(a0)
0000AA76 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA7C 1028 001C                  		move.b	$1C(a0),d0
0000AA80 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA84 6600                       		bne.s	Obj2E_ChkSonic
0000AA86 4E75                       		rts			; Eggman monitor does nothing
0000AA88                            ; ===========================================================================
0000AA88                            
0000AA88                            Obj2E_ChkSonic:
0000AA88 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA8C 6600                       		bne.s	Obj2E_ChkShoes
0000AA8E                            
0000AA8E                            ExtraLife:
0000AA8E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA92 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA96 303C 0088                  		move.w	#$88,d0
0000AA9A 4EF9 0000 15CC             		jmp	(PlaySound).l	; play extra life music
0000AAA0                            ; ===========================================================================
0000AAA0                            
0000AAA0                            Obj2E_ChkShoes:
0000AAA0 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AAA4 6600                       		bne.s	Obj2E_ChkShield
0000AAA6 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AAAC 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AAB2 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AAB8 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AABE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AAC4 303C 00E2                  		move.w	#$E2,d0
0000AAC8 4EF9 0000 15CC             		jmp	(PlaySound).l	; Speed	up the music
0000AACE                            ; ===========================================================================
0000AACE                            
0000AACE                            Obj2E_ChkShield:
0000AACE 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AAD2 6600                       		bne.s	Obj2E_ChkInvinc
0000AAD4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AADA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AAE0 303C 00AF                  		move.w	#$AF,d0
0000AAE4 4EF9 0000 15CC             		jmp	(PlaySound).l	; play shield sound
0000AAEA                            ; ===========================================================================
0000AAEA                            
0000AAEA                            Obj2E_ChkInvinc:
0000AAEA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AAEE 6600                       		bne.s	Obj2E_ChkRings
0000AAF0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AAF6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AAFC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AB02 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AB08 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AB0E 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AB14 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AB1A 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AB20 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AB26 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AB2C 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB30 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB32 303C 0087                  		move.w	#$87,d0
0000AB36 4EF9 0000 15CC             		jmp	(PlaySound).l	; play invincibility music
0000AB3C                            ; ===========================================================================
0000AB3C                            
0000AB3C                            Obj2E_NoMusic:
0000AB3C 4E75                       		rts	
0000AB3E                            ; ===========================================================================
0000AB3E                            
0000AB3E                            Obj2E_ChkRings:
0000AB3E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB42 6600                       		bne.s	Obj2E_ChkS
0000AB44 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB4A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB50 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB56 6500                       		bcs.s	Obj2E_RingSound
0000AB58 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB5E 6700 FF2E                  		beq.w	ExtraLife
0000AB62 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB68 6500                       		bcs.s	Obj2E_RingSound
0000AB6A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB70 6700 FF1C                  		beq.w	ExtraLife
0000AB74                            
0000AB74                            Obj2E_RingSound:
0000AB74 303C 00B5                  		move.w	#$B5,d0
0000AB78 4EF9 0000 15CC             		jmp	(PlaySound).l	; play ring sound
0000AB7E                            ; ===========================================================================
0000AB7E                            
0000AB7E                            Obj2E_ChkS:
0000AB7E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB82 6600                       		bne.s	Obj2E_ChkEnd
0000AB84                            		; nop	
0000AB84 7201                       		moveq	#1,d1
0000AB86 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB8A                            
0000AB8A                            Obj2E_ChkEnd:
0000AB8A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB8C                            ; ===========================================================================
0000AB8C                            
0000AB8C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB8C 5368 001E                  		subq.w	#1,$1E(a0)
0000AB90 6B00 0000                  		bmi.w	DeleteObject
0000AB94 4E75                       		rts	
0000AB96                            ; ---------------------------------------------------------------------------
0000AB96                            ; Subroutine to	make the sides of a monitor solid
0000AB96                            ; ---------------------------------------------------------------------------
0000AB96                            
0000AB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB96                            
0000AB96                            
0000AB96                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB96 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB9A 3029 0008                  		move.w	8(a1),d0
0000AB9E 9068 0008                  		sub.w	8(a0),d0
0000ABA2 D041                       		add.w	d1,d0
0000ABA4 6B00                       		bmi.s	loc_A4E6
0000ABA6 3601                       		move.w	d1,d3
0000ABA8 D643                       		add.w	d3,d3
0000ABAA B043                       		cmp.w	d3,d0
0000ABAC 6200                       		bhi.s	loc_A4E6
0000ABAE 1629 0016                  		move.b	$16(a1),d3
0000ABB2 4883                       		ext.w	d3
0000ABB4 D443                       		add.w	d3,d2
0000ABB6 3629 000C                  		move.w	$C(a1),d3
0000ABBA 9668 000C                  		sub.w	$C(a0),d3
0000ABBE D642                       		add.w	d2,d3
0000ABC0 6B00                       		bmi.s	loc_A4E6
0000ABC2 D442                       		add.w	d2,d2
0000ABC4 B642                       		cmp.w	d2,d3
0000ABC6 6400                       		bcc.s	loc_A4E6
0000ABC8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000ABCC 6B00                       		bmi.s	loc_A4E6
0000ABCE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ABD4 6400                       		bcc.s	loc_A4E6
0000ABD6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABDA 6600                       		bne.s	loc_A4E6
0000ABDC B240                       		cmp.w	d0,d1
0000ABDE 6400                       		bcc.s	loc_A4DC
0000ABE0 D241                       		add.w	d1,d1
0000ABE2 9041                       		sub.w	d1,d0
0000ABE4                            
0000ABE4                            loc_A4DC:
0000ABE4 0C43 0010                  		cmpi.w	#$10,d3
0000ABE8 6500                       		bcs.s	loc_A4EA
0000ABEA                            
0000ABEA                            loc_A4E2:
0000ABEA 7201                       		moveq	#1,d1
0000ABEC 4E75                       		rts	
0000ABEE                            ; ===========================================================================
0000ABEE                            
0000ABEE                            loc_A4E6:
0000ABEE 7200                       		moveq	#0,d1
0000ABF0 4E75                       		rts	
0000ABF2                            ; ===========================================================================
0000ABF2                            
0000ABF2                            loc_A4EA:
0000ABF2 7200                       		moveq	#0,d1
0000ABF4 1228 0019                  		move.b	$19(a0),d1
0000ABF8 5841                       		addq.w	#4,d1
0000ABFA 3401                       		move.w	d1,d2
0000ABFC D442                       		add.w	d2,d2
0000ABFE D269 0008                  		add.w	8(a1),d1
0000AC02 9268 0008                  		sub.w	8(a0),d1
0000AC06 6BE2                       		bmi.s	loc_A4E2
0000AC08 B242                       		cmp.w	d2,d1
0000AC0A 64DE                       		bcc.s	loc_A4E2
0000AC0C 72FF                       		moveq	#-1,d1
0000AC0E 4E75                       		rts	
0000AC10                            ; End of function Obj26_SolidSides
0000AC10                            
0000AC10                            ; ===========================================================================
0000AC10                            Ani_obj26:
0000AC10                            	include "_anim\obj26.asm"
0000AC10                            ; ---------------------------------------------------------------------------
0000AC10                            ; Animation script - monitors
0000AC10                            ; ---------------------------------------------------------------------------
0000AC10 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AC16 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AC1C 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AC22 0000                       		dc.w byte_A582-Ani_obj26
0000AC24 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AC2A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC36 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC42 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC4E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC5A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC66 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC72 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC7E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC8A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC92                            		even
0000AC92                            		even
0000AC92                            
0000AC92                            ; ---------------------------------------------------------------------------
0000AC92                            ; Sprite mappings - monitors
0000AC92                            ; ---------------------------------------------------------------------------
0000AC92                            Map_obj26:
0000AC92                            	include "_maps\obj26.asm"
0000AC92                            ; ================================================================================
0000AC92                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC92                            ; ================================================================================
0000AC92                            
0000AC92                            DATAY1U343IF3L:
0000AC92 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC96 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC9A 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC9E 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000ACA2 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000ACA6 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000ACAA 05                         DATAY1U343IF3L_0: dc.b $5
0000ACAB E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACB0 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACB5 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACBA 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACBF 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACC4 06                         DATAY1U343IF3L_1: dc.b $6
0000ACC5 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ACCA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACCF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACD4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACD9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACDE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE3 05                         DATAY1U343IF3L_2: dc.b $5
0000ACE4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACE9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACEE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACF3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACF8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACFD 05                         DATAY1U343IF3L_3: dc.b $5
0000ACFE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD03 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD08 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD0D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD12 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD17 06                         DATAY1U343IF3L_4: dc.b $6
0000AD18 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AD1D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD22 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD27 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD2C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD31 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD36 06                         DATAY1U343IF3L_5: dc.b $6
0000AD37 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD3C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD41 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD46 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD4B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD50 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD55 06                         DATAY1U343IF3L_6: dc.b $6
0000AD56 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD5B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD60 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD65 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD6A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD6F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD74 06                         DATAY1U343IF3L_7: dc.b $6
0000AD75 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD7A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD7F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD84 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD89 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD8E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD93 06                         DATAY1U343IF3L_8: dc.b $6
0000AD94 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD99 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD9E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADA3 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADA8 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADAD 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADB2 06                         DATAY1U343IF3L_9: dc.b $6
0000ADB3 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000ADB8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADBD 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADC2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADC7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADCC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADD1 05                         DATAY1U343IF3L_A: dc.b $5
0000ADD2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADD7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADDC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADE1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADE6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADEB 01                         DATAY1U343IF3L_B: dc.b $1
0000ADEC FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADF2 00                         	even
0000ADF2 00                         	even
0000ADF2                            
0000ADF2                            ; ===========================================================================
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            ; Object 0E - Sonic on the title screen
0000ADF2                            ; ---------------------------------------------------------------------------
0000ADF2                            
0000ADF2                            Obj0E:					; XREF: Obj_Index
0000ADF2 7000                       		moveq	#0,d0
0000ADF4 1028 0024                  		move.b	$24(a0),d0
0000ADF8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADFC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AE00                            ; ===========================================================================
0000AE00 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AE02 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AE04 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AE06 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AE08                            ; ===========================================================================
0000AE08                            
0000AE08                            Obj0E_Main:				; XREF: Obj0E_Index
0000AE08 5428 0024                  		addq.b	#2,$24(a0)
0000AE0C 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AE12 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AE18 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AE20 317C 2300 0002             		move.w	#$2300,2(a0)
0000AE26 117C 0001 0018             		move.b	#1,$18(a0)
0000AE2C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE32 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE38 6100 0000                  		bsr.w	AnimateSprite
0000AE3C                            
0000AE3C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE3C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE40 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE42 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE46 6000 0000                  		bra.w	DisplaySprite
0000AE4A                            ; ===========================================================================
0000AE4A                            
0000AE4A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE4A 4E75                       		rts	
0000AE4C                            ; ===========================================================================
0000AE4C                            
0000AE4C                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE4C 5168 000A                  		subq.w	#8,$A(a0)
0000AE50 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE56 6600                       		bne.s	Obj0E_Display
0000AE58 5428 0024                  		addq.b	#2,$24(a0)
0000AE5C                            
0000AE5C                            Obj0E_Display:
0000AE5C 6000 0000                  		bra.w	DisplaySprite
0000AE60                            ; ===========================================================================
0000AE60 4E75                       		rts	
0000AE62                            ; ===========================================================================
0000AE62                            
0000AE62                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE62 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE68 6100 0000                  		bsr.w	AnimateSprite
0000AE6C 6000 0000                  		bra.w	DisplaySprite
0000AE70                            ; ===========================================================================
0000AE70 4E75                       		rts	
0000AE72                            ; ===========================================================================
0000AE72                            ; ---------------------------------------------------------------------------
0000AE72                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE72                            ; ---------------------------------------------------------------------------
0000AE72                            
0000AE72                            Obj0F:					; XREF: Obj_Index
0000AE72 7000                       		moveq	#0,d0
0000AE74 1028 0024                  		move.b	$24(a0),d0
0000AE78 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE7C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE80 6000 0000                  		bra.w	DisplaySprite
0000AE84                            ; ===========================================================================
0000AE84 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE86 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE88 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE8A                            ; ===========================================================================
0000AE8A                            
0000AE8A                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE8A 5428 0024                  		addq.b	#2,$24(a0)
0000AE8E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE94 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE9A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AEA2 317C 0200 0002             		move.w	#$200,2(a0)
0000AEA8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AEAE 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AEB0 5428 0024                  		addq.b	#2,$24(a0)
0000AEB4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AEBA 6600                       		bne.s	locret_A6F8	; if not, branch
0000AEBC 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AEC2 317C 0170 0008             		move.w	#$170,8(a0)
0000AEC8 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AECE                            
0000AECE                            locret_A6F8:				; XREF: Obj0F_Index
0000AECE 4E75                       		rts	
0000AED0                            ; ===========================================================================
0000AED0                            
0000AED0                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AED0 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AED6 6000 0000                  		bra.w	AnimateSprite
0000AEDA                            ; ===========================================================================
0000AEDA                            Ani_obj0E:
0000AEDA                            	include "_anim\obj0E.asm"
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            ; Animation script - Sonic on the title screen
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA 0000                       		dc.w byte_A706-Ani_obj0E
0000AEDC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AEE8                            		even
0000AEE8                            		even
0000AEE8                            
0000AEE8                            Ani_obj0F:
0000AEE8                            	include "_anim\obj0F.asm"
0000AEE8                            ; ---------------------------------------------------------------------------
0000AEE8                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AEE8                            ; ---------------------------------------------------------------------------
0000AEE8 0000                       		dc.w byte_A714-Ani_obj0F
0000AEEA 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AEEE                            		even
0000AEEE                            		even
0000AEEE                            
0000AEEE                            ; ---------------------------------------------------------------------------
0000AEEE                            ; Subroutine to	animate	a sprite using an animation script
0000AEEE                            ; ---------------------------------------------------------------------------
0000AEEE                            
0000AEEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEEE                            
0000AEEE                            
0000AEEE                            AnimateSprite:
0000AEEE 7000                       		moveq	#0,d0
0000AEF0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AEF4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AEF8 6700                       		beq.s	Anim_Run	; if not, branch
0000AEFA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AEFE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF04 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AF0A                            
0000AF0A                            Anim_Run:
0000AF0A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AF0E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AF10 D040                       		add.w	d0,d0
0000AF12 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AF16 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AF1A 7200                       		moveq	#0,d1
0000AF1C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AF20 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AF24 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AF26                            
0000AF26                            Anim_Next:
0000AF26 1200                       		move.b	d0,d1
0000AF28 0200 001F                  		andi.b	#$1F,d0
0000AF2C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF30 1028 0022                  		move.b	$22(a0),d0
0000AF34 E719                       		rol.b	#3,d1
0000AF36 B101                       		eor.b	d0,d1
0000AF38 0201 0003                  		andi.b	#3,d1
0000AF3C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF42 8328 0001                  		or.b	d1,1(a0)
0000AF46 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF4A                            
0000AF4A                            Anim_Wait:
0000AF4A 4E75                       		rts	
0000AF4C                            ; ===========================================================================
0000AF4C                            
0000AF4C                            Anim_End_FF:
0000AF4C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF4E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF50 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF56 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF5A 60CA                       		bra.s	Anim_Next
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Anim_End_FE:
0000AF5C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF5E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF60 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF64 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF68 9200                       		sub.b	d0,d1
0000AF6A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF6E 60B6                       		bra.s	Anim_Next
0000AF70                            ; ===========================================================================
0000AF70                            
0000AF70                            Anim_End_FD:
0000AF70 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF72 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF74 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF7A                            
0000AF7A                            Anim_End_FC:
0000AF7A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF7C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF7E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF82                            
0000AF82                            Anim_End_FB:
0000AF82 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF84 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF86 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF8C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF90                            
0000AF90                            Anim_End_FA:
0000AF90 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF92 6600                       		bne.s	Anim_End	; if not, branch
0000AF94 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF98                            
0000AF98                            Anim_End:
0000AF98 4E75                       		rts	
0000AF9A                            ; End of function AnimateSprite
0000AF9A                            
0000AF9A                            ; ===========================================================================
0000AF9A                            ; ---------------------------------------------------------------------------
0000AF9A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF9A                            ; ---------------------------------------------------------------------------
0000AF9A                            Map_obj0F:
0000AF9A                            	include "_maps\obj0F.asm"
0000AF9A                            ; ---------------------------------------------------------------------------
0000AF9A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF9A                            ; ---------------------------------------------------------------------------
0000AF9A 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF9C 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF9E 0000                       		dc.w byte_A7EB-Map_obj0F
0000AFA0 0000                       		dc.w byte_A882-Map_obj0F
0000AFA2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AFA3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AFA8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AFAD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AFB2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AFB7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AFBC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AFC1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AFC2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFCC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFD1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFD6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFDB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFE0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFE5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFEA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFEF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFF4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFFE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B003 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B008 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B00D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B012 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B017 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B01C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B021 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B026 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B02B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B030 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B035 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B03A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B03F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B044 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B049 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B04E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B053 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B058 01                         byte_A882:	dc.b 1			; "TM"
0000B059 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B05E                            		even
0000B05E                            		even
0000B05E                            
0000B05E                            ; ---------------------------------------------------------------------------
0000B05E                            ; Sprite mappings - Sonic on the title screen
0000B05E                            ; ---------------------------------------------------------------------------
0000B05E                            Map_obj0E:
0000B05E                            	include "_maps\obj0E.asm"
0000B05E                            ; ================================================================================
0000B05E                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B05E                            ; ================================================================================
0000B05E                            
0000B05E                            DATAGKI0HYDQBXP:
0000B05E 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B062 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B066 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B06A 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B06E 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B06F 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B074 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B079 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B07E 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B083 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B088 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B08D 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B092 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B097 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B098 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B09D 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B0A2 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B0A7 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B0AC 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B0B1 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B0B6 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B0BB 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B0C0 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B0C5 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B0CA 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B0CF 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B0D0 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B0D5 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0DA F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0DF 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0E4 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0E9 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0EE 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0F3 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0F8 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0FD 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B102 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B107 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B108 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B10D F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B112 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B117 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B11C 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B121 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B126 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B12B 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B130 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B135 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B13A 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B13B F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B140 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B145 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B14A 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B14F 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B154 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B159 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B15E 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B163 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B168 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B16D 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B172 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B177 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B17C 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B181 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B186 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B18B 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B18C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B191 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B196 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B19B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1A0 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1A5 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1AA 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1AF EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1B4 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1B9 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1BE 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1C3 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B1C4 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B1C9 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B1CE 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1D3 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1D8 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1DD 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1E2 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1E7 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1EC 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1F1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1F6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1FB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B200 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B205 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B20A 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B20F 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B210 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B215 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B21A 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B21F EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B224 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B229 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B22E EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B233 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B238 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B23D EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B242 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B247 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B24C EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B251 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B256 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B25C 00                         	even
0000B25C 00                         	even
0000B25C                            
0000B25C                            ; ===========================================================================
0000B25C                            ; ---------------------------------------------------------------------------
0000B25C                            ; Object 2B - Chopper enemy (GHZ)
0000B25C                            ; ---------------------------------------------------------------------------
0000B25C                            
0000B25C                            Obj2B:					; XREF: Obj_Index
0000B25C 7000                       		moveq	#0,d0
0000B25E 1028 0024                  		move.b	$24(a0),d0
0000B262 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B266 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B26A 6000 0000                  		bra.w	MarkObjGone
0000B26E                            ; ===========================================================================
0000B26E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B270 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B272                            ; ===========================================================================
0000B272                            
0000B272                            Obj2B_Main:				; XREF: Obj2B_Index
0000B272 5428 0024                  		addq.b	#2,$24(a0)
0000B276 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B27E 317C 047B 0002             		move.w	#$47B,2(a0)
0000B284 117C 0004 0001             		move.b	#4,1(a0)
0000B28A 117C 0004 0018             		move.b	#4,$18(a0)
0000B290 117C 0009 0020             		move.b	#9,$20(a0)
0000B296 117C 0010 0019             		move.b	#$10,$19(a0)
0000B29C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2A2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B2A8                            
0000B2A8                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B2A8 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B2AE 6100 FC3E                  		bsr.w	AnimateSprite
0000B2B2 6100 0000                  		bsr.w	SpeedToPos
0000B2B6 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B2BC 3028 0030                  		move.w	$30(a0),d0
0000B2C0 B068 000C                  		cmp.w	$C(a0),d0
0000B2C4 6400                       		bcc.s	Obj2B_ChgAni
0000B2C6 3140 000C                  		move.w	d0,$C(a0)
0000B2CA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2D0                            
0000B2D0                            Obj2B_ChgAni:
0000B2D0 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2D6 0440 00C0                  		subi.w	#$C0,d0
0000B2DA B068 000C                  		cmp.w	$C(a0),d0
0000B2DE 6400                       		bcc.s	locret_ABB6
0000B2E0 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2E6 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2EA 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2EC 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2F2                            
0000B2F2                            locret_ABB6:
0000B2F2 4E75                       		rts	
0000B2F4                            ; ===========================================================================
0000B2F4                            Ani_obj2B:
0000B2F4                            	include "_anim\obj2B.asm"
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4                            ; Animation script - Chopper enemy
0000B2F4                            ; ---------------------------------------------------------------------------
0000B2F4 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2F6 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2F8 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2FA 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2FE 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B302 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B306 00                         		even
0000B306 00                         		even
0000B306                            
0000B306                            ; ---------------------------------------------------------------------------
0000B306                            ; Sprite mappings - Chopper enemy (GHZ)
0000B306                            ; ---------------------------------------------------------------------------
0000B306                            Map_obj2B:
0000B306                            	include "_maps\obj2B.asm"
0000B306                            Map_1ff1:
0000B306 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B308 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B30A 02                         Map_1ff1_4: 	dc.b $2
0000B30B E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B310 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B315 02                         Map_1ff1_F: 	dc.b $2
0000B316 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B31B 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B320                            	even
0000B320                            	even
0000B320                            
0000B320                            ; ===========================================================================
0000B320                            ; ---------------------------------------------------------------------------
0000B320                            ; Object 2C - Jaws enemy (LZ)
0000B320                            ; ---------------------------------------------------------------------------
0000B320                            
0000B320                            Obj2C:					; XREF: Obj_Index
0000B320 7000                       		moveq	#0,d0
0000B322 1028 0024                  		move.b	$24(a0),d0
0000B326 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B32A 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B32E                            ; ===========================================================================
0000B32E 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B330 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B332                            ; ===========================================================================
0000B332                            
0000B332                            Obj2C_Main:				; XREF: Obj2C_Index
0000B332 5428 0024                  		addq.b	#2,$24(a0)
0000B336 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B33E 317C 2486 0002             		move.w	#$2486,2(a0)
0000B344 0028 0004 0001             		ori.b	#4,1(a0)
0000B34A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B350 117C 0004 0018             		move.b	#4,$18(a0)
0000B356 117C 0010 0019             		move.b	#$10,$19(a0)
0000B35C 7000                       		moveq	#0,d0
0000B35E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B362 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B364 5340                       		subq.w	#1,d0
0000B366 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B36A 3140 0032                  		move.w	d0,$32(a0)
0000B36E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B374 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B37A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B37C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B380                            
0000B380                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B380 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B384 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B386 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B38C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B390 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B396 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B39C                            
0000B39C                            Obj2C_Animate:
0000B39C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B3A2 6100 FB4A                  		bsr.w	AnimateSprite
0000B3A6 6100 0000                  		bsr.w	SpeedToPos
0000B3AA 6000 0000                  		bra.w	MarkObjGone
0000B3AE                            ; ===========================================================================
0000B3AE                            Ani_obj2C:
0000B3AE                            	include "_anim\obj2C.asm"
0000B3AE                            ; ---------------------------------------------------------------------------
0000B3AE                            ; Animation script - Jaws enemy
0000B3AE                            ; ---------------------------------------------------------------------------
0000B3AE 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B3B0 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B3B6                            		even
0000B3B6                            		even
0000B3B6                            
0000B3B6                            ; ---------------------------------------------------------------------------
0000B3B6                            ; Sprite mappings - Jaws enemy (LZ)
0000B3B6                            ; ---------------------------------------------------------------------------
0000B3B6                            Map_obj2C:
0000B3B6                            	include "_maps\obj2C.asm"
0000B3B6                            ; ---------------------------------------------------------------------------
0000B3B6                            ; Sprite mappings - Jaws enemy (LZ)
0000B3B6                            ; ---------------------------------------------------------------------------
0000B3B6 0000                       		dc.w byte_AC78-Map_obj2C
0000B3B8 0000                       		dc.w byte_AC83-Map_obj2C
0000B3BA 0000                       		dc.w byte_AC8E-Map_obj2C
0000B3BC 0000                       		dc.w byte_AC99-Map_obj2C
0000B3BE 02                         byte_AC78:	dc.b 2
0000B3BF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3C4 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B3C9 02                         byte_AC83:	dc.b 2
0000B3CA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3CF F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3D4 02                         byte_AC8E:	dc.b 2
0000B3D5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3DA F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3DF 02                         byte_AC99:	dc.b 2
0000B3E0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3E5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3EA                            		even
0000B3EA                            		even
0000B3EA                            
0000B3EA                            ; ===========================================================================
0000B3EA                            ; ---------------------------------------------------------------------------
0000B3EA                            ; Object 2D - Burrobot enemy (LZ)
0000B3EA                            ; ---------------------------------------------------------------------------
0000B3EA                            
0000B3EA                            Obj2D:					; XREF: Obj_Index
0000B3EA 7000                       		moveq	#0,d0
0000B3EC 1028 0024                  		move.b	$24(a0),d0
0000B3F0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3F4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3F8                            ; ===========================================================================
0000B3F8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3FA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3FC                            ; ===========================================================================
0000B3FC                            
0000B3FC                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3FC 5428 0024                  		addq.b	#2,$24(a0)
0000B400 117C 0013 0016             		move.b	#$13,$16(a0)
0000B406 117C 0008 0017             		move.b	#8,$17(a0)
0000B40C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B414 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B41A 0028 0004 0001             		ori.b	#4,1(a0)
0000B420 117C 0004 0018             		move.b	#4,$18(a0)
0000B426 117C 0005 0020             		move.b	#5,$20(a0)
0000B42C 117C 000C 0019             		move.b	#$C,$19(a0)
0000B432 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B436 117C 0002 001C             		move.b	#2,$1C(a0)
0000B43C                            
0000B43C                            Obj2D_Action:				; XREF: Obj2D_Index
0000B43C 7000                       		moveq	#0,d0
0000B43E 1028 0025                  		move.b	$25(a0),d0
0000B442 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B446 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B44A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B450 6100 FA9C                  		bsr.w	AnimateSprite
0000B454 6000 0000                  		bra.w	MarkObjGone
0000B458                            ; ===========================================================================
0000B458 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B45A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B45C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B45E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B460                            ; ===========================================================================
0000B460                            
0000B460                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B460 5368 0030                  		subq.w	#1,$30(a0)
0000B464 6A00                       		bpl.s	locret_AD42
0000B466 5428 0025                  		addq.b	#2,$25(a0)
0000B46A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B470 317C 0080 0010             		move.w	#$80,$10(a0)
0000B476 117C 0001 001C             		move.b	#1,$1C(a0)
0000B47C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B482 6700                       		beq.s	locret_AD42
0000B484 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B488                            
0000B488                            locret_AD42:
0000B488 4E75                       		rts	
0000B48A                            ; ===========================================================================
0000B48A                            
0000B48A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B48A 5368 0030                  		subq.w	#1,$30(a0)
0000B48E 6B00                       		bmi.s	loc_AD84
0000B490 6100 0000                  		bsr.w	SpeedToPos
0000B494 0868 0000 0032             		bchg	#0,$32(a0)
0000B49A 6600                       		bne.s	loc_AD78
0000B49C 3628 0008                  		move.w	8(a0),d3
0000B4A0 0643 000C                  		addi.w	#$C,d3
0000B4A4 0828 0000 0022             		btst	#0,$22(a0)
0000B4AA 6600                       		bne.s	loc_AD6A
0000B4AC 0443 0018                  		subi.w	#$18,d3
0000B4B0                            
0000B4B0                            loc_AD6A:
0000B4B0 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B4B6 0C41 000C                  		cmpi.w	#$C,d1
0000B4BA 6C00                       		bge.s	loc_AD84
0000B4BC 4E75                       		rts	
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            loc_AD78:				; XREF: Obj2D_Move
0000B4BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4C4 D368 000C                  		add.w	d1,$C(a0)
0000B4C8 4E75                       		rts	
0000B4CA                            ; ===========================================================================
0000B4CA                            
0000B4CA                            loc_AD84:				; XREF: Obj2D_Move
0000B4CA 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4D0 6700                       		beq.s	loc_ADA4
0000B4D2 5528 0025                  		subq.b	#2,$25(a0)
0000B4D6 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4DC 317C 0000 0010             		move.w	#0,$10(a0)
0000B4E2 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4E8 4E75                       		rts	
0000B4EA                            ; ===========================================================================
0000B4EA                            
0000B4EA                            loc_ADA4:
0000B4EA 5428 0025                  		addq.b	#2,$25(a0)
0000B4EE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4F4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4FA 4E75                       		rts	
0000B4FC                            ; ===========================================================================
0000B4FC                            
0000B4FC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4FC 6100 0000                  		bsr.w	SpeedToPos
0000B500 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B506 6B00                       		bmi.s	locret_ADF0
0000B508 117C 0003 001C             		move.b	#3,$1C(a0)
0000B50E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B514 4A41                       		tst.w	d1
0000B516 6A00                       		bpl.s	locret_ADF0
0000B518 D368 000C                  		add.w	d1,$C(a0)
0000B51C 317C 0000 0012             		move.w	#0,$12(a0)
0000B522 117C 0001 001C             		move.b	#1,$1C(a0)
0000B528 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B52E 5528 0025                  		subq.b	#2,$25(a0)
0000B532 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B536                            
0000B536                            locret_ADF0:
0000B536 4E75                       		rts	
0000B538                            ; ===========================================================================
0000B538                            
0000B538                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B538 343C 0060                  		move.w	#$60,d2
0000B53C 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B540 6400                       		bcc.s	locret_AE20
0000B542 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B546 9068 000C                  		sub.w	$C(a0),d0
0000B54A 6400                       		bcc.s	locret_AE20
0000B54C 0C40 FF80                  		cmpi.w	#-$80,d0
0000B550 6500                       		bcs.s	locret_AE20
0000B552 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B556 6600                       		bne.s	locret_AE20
0000B558 5528 0025                  		subq.b	#2,$25(a0)
0000B55C 3141 0010                  		move.w	d1,$10(a0)
0000B560 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B566                            
0000B566                            locret_AE20:
0000B566 4E75                       		rts	
0000B568                            
0000B568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B568                            
0000B568                            
0000B568                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B568 323C 0080                  		move.w	#$80,d1
0000B56C 08E8 0000 0022             		bset	#0,$22(a0)
0000B572 3038 D008                  		move.w	($FFFFD008).w,d0
0000B576 9068 0008                  		sub.w	8(a0),d0
0000B57A 6400                       		bcc.s	loc_AE40
0000B57C 4440                       		neg.w	d0
0000B57E 4441                       		neg.w	d1
0000B580 08A8 0000 0022             		bclr	#0,$22(a0)
0000B586                            
0000B586                            loc_AE40:
0000B586 B042                       		cmp.w	d2,d0
0000B588 4E75                       		rts	
0000B58A                            ; End of function Obj2D_ChkSonic2
0000B58A                            
0000B58A                            ; ===========================================================================
0000B58A                            Ani_obj2D:
0000B58A                            	include "_anim\obj2D.asm"
0000B58A                            ; ---------------------------------------------------------------------------
0000B58A                            ; Animation script - Burrobot enemy but craig
0000B58A                            ; ---------------------------------------------------------------------------
0000B58A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B58C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B58E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B590 0000                       		dc.w byte_AE58-Ani_obj2D
0000B592 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B595 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B599 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B5A7 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B5AA                            		even
0000B5AA                            		even
0000B5AA                            
0000B5AA                            ; ---------------------------------------------------------------------------
0000B5AA                            ; Sprite mappings - Burrobot enemy (LZ)
0000B5AA                            ; ---------------------------------------------------------------------------
0000B5AA                            Map_obj2D:
0000B5AA                            	include "_maps\obj2D.asm"
0000B5AA                            Map_e3a3:
0000B5AA 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B5AC 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B5AE 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B5B0 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B5B2 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B5B4 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B5B6 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B5B8 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B5BA 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B5BC 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B5BE 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B5C0 02                         Map_e3a3_16: 	dc.b $2
0000B5C1 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B5C6 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B5CB 02                         Map_e3a3_21: 	dc.b $2
0000B5CC EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B5D1 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B5D6 02                         Map_e3a3_2C: 	dc.b $2
0000B5D7 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5DC 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5E1 02                         Map_e3a3_37: 	dc.b $2
0000B5E2 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5E7 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5EC 02                         Map_e3a3_42: 	dc.b $2
0000B5ED EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5F2 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5F7 02                         Map_e3a3_4D: 	dc.b $2
0000B5F8 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5FD FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B602 02                         Map_e3a3_58: 	dc.b $2
0000B603 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B608 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B60D 02                         Map_e3a3_63: 	dc.b $2
0000B60E EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B613 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B618 02                         Map_e3a3_6E: 	dc.b $2
0000B619 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B61E FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B623 02                         Map_e3a3_79: 	dc.b $2
0000B624 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B629 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B62E 02                         Map_e3a3_84: 	dc.b $2
0000B62F EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B634 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B63A 00                         	even
0000B63A 00                         	even
0000B63A                            
0000B63A                            ; ===========================================================================
0000B63A                            ; ---------------------------------------------------------------------------
0000B63A                            ; Object 2F - large moving platforms (MZ)
0000B63A                            ; ---------------------------------------------------------------------------
0000B63A                            
0000B63A                            Obj2F:					; XREF: Obj_Index
0000B63A 7000                       		moveq	#0,d0
0000B63C 1028 0024                  		move.b	$24(a0),d0
0000B640 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B644 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B648                            ; ===========================================================================
0000B648 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B64A 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B64C                            
0000B64C 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B64E 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B650 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B652 0140                       		dc.b 1,	$40
0000B654 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B656 0220                       		dc.b 2,	$20
0000B658                            ; ===========================================================================
0000B658                            
0000B658                            Obj2F_Main:				; XREF: Obj2F_Index
0000B658 5428 0024                  		addq.b	#2,$24(a0)
0000B65C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B664 317C C000 0002             		move.w	#$C000,2(a0)
0000B66A 117C 0004 0001             		move.b	#4,1(a0)
0000B670 117C 0005 0018             		move.b	#5,$18(a0)
0000B676 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B67C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B682 7000                       		moveq	#0,d0
0000B684 1028 0028                  		move.b	$28(a0),d0
0000B688 E448                       		lsr.w	#2,d0
0000B68A 0240 001C                  		andi.w	#$1C,d0
0000B68E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B692 3019                       		move.w	(a1)+,d0
0000B694 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B698 214A 0030                  		move.l	a2,$30(a0)
0000B69C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B6A0 1151 0019                  		move.b	(a1),$19(a0)
0000B6A4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B6AA 117C 0040 0016             		move.b	#$40,$16(a0)
0000B6B0 08E8 0004 0001             		bset	#4,1(a0)
0000B6B6                            
0000B6B6                            Obj2F_Action:				; XREF: Obj2F_Index
0000B6B6 6100 0000                  		bsr.w	Obj2F_Types
0000B6BA 4A28 0025                  		tst.b	$25(a0)
0000B6BE 6700                       		beq.s	Obj2F_Solid
0000B6C0 7200                       		moveq	#0,d1
0000B6C2 1228 0019                  		move.b	$19(a0),d1
0000B6C6 0641 000B                  		addi.w	#$B,d1
0000B6CA 6100 C556                  		bsr.w	ExitPlatform
0000B6CE 0829 0003 0022             		btst	#3,$22(a1)
0000B6D4 6600 0000                  		bne.w	Obj2F_Slope
0000B6D8 4228 0025                  		clr.b	$25(a0)
0000B6DC 6000                       		bra.s	Obj2F_Display
0000B6DE                            ; ===========================================================================
0000B6DE                            
0000B6DE                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6DE 7200                       		moveq	#0,d1
0000B6E0 1228 0019                  		move.b	$19(a0),d1
0000B6E4 0641 000B                  		addi.w	#$B,d1
0000B6E8 2468 0030                  		movea.l	$30(a0),a2
0000B6EC 3428 0008                  		move.w	8(a0),d2
0000B6F0 6100 D520                  		bsr.w	SlopeObject2
0000B6F4 6000                       		bra.s	Obj2F_Display
0000B6F6                            ; ===========================================================================
0000B6F6                            
0000B6F6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6F6 7200                       		moveq	#0,d1
0000B6F8 1228 0019                  		move.b	$19(a0),d1
0000B6FC 0641 000B                  		addi.w	#$B,d1
0000B700 343C 0020                  		move.w	#$20,d2
0000B704 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B70A 6600                       		bne.s	loc_AF8E
0000B70C 343C 0030                  		move.w	#$30,d2
0000B710                            
0000B710                            loc_AF8E:
0000B710 2468 0030                  		movea.l	$30(a0),a2
0000B714 6100 0000                  		bsr.w	SolidObject2F
0000B718                            
0000B718                            Obj2F_Display:				; XREF: Obj2F_Action
0000B718 6100 0000                  		bsr.w	DisplaySprite
0000B71C 6000 0000                  		bra.w	Obj2F_ChkDel
0000B720                            
0000B720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B720                            
0000B720                            
0000B720                            Obj2F_Types:				; XREF: Obj2F_Action
0000B720 7000                       		moveq	#0,d0
0000B722 1028 0028                  		move.b	$28(a0),d0
0000B726 0240 0007                  		andi.w	#7,d0
0000B72A D040                       		add.w	d0,d0
0000B72C 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B730 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B734                            ; End of function Obj2F_Types
0000B734                            
0000B734                            ; ===========================================================================
0000B734 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B736 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B738 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B73A 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B73C 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B73E 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B740                            ; ===========================================================================
0000B740                            
0000B740                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B740 4E75                       		rts			; type 00 platform doesn't move
0000B742                            ; ===========================================================================
0000B742                            
0000B742                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B742 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B746 323C 0020                  		move.w	#$20,d1
0000B74A 6000                       		bra.s	Obj2F_Move
0000B74C                            ; ===========================================================================
0000B74C                            
0000B74C                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B74C 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B750 323C 0030                  		move.w	#$30,d1
0000B754 6000                       		bra.s	Obj2F_Move
0000B756                            ; ===========================================================================
0000B756                            
0000B756                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B756 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B75A 323C 0040                  		move.w	#$40,d1
0000B75E 6000                       		bra.s	Obj2F_Move
0000B760                            ; ===========================================================================
0000B760                            
0000B760                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B760 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B764 323C 0060                  		move.w	#$60,d1
0000B768                            
0000B768                            Obj2F_Move:
0000B768 0828 0003 0028             		btst	#3,$28(a0)
0000B76E 6700                       		beq.s	loc_AFF2
0000B770 4440                       		neg.w	d0
0000B772 D041                       		add.w	d1,d0
0000B774                            
0000B774                            loc_AFF2:
0000B774 3228 002C                  		move.w	$2C(a0),d1
0000B778 9240                       		sub.w	d0,d1
0000B77A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B77E 4E75                       		rts	
0000B780                            ; ===========================================================================
0000B780                            
0000B780                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B780 1028 0034                  		move.b	$34(a0),d0
0000B784 4A28 0025                  		tst.b	$25(a0)
0000B788 6600                       		bne.s	loc_B010
0000B78A 5500                       		subq.b	#2,d0
0000B78C 6400                       		bcc.s	loc_B01C
0000B78E 7000                       		moveq	#0,d0
0000B790 6000                       		bra.s	loc_B01C
0000B792                            ; ===========================================================================
0000B792                            
0000B792                            loc_B010:
0000B792 5800                       		addq.b	#4,d0
0000B794 0C00 0040                  		cmpi.b	#$40,d0
0000B798 6500                       		bcs.s	loc_B01C
0000B79A 103C 0040                  		move.b	#$40,d0
0000B79E                            
0000B79E                            loc_B01C:
0000B79E 1140 0034                  		move.b	d0,$34(a0)
0000B7A2 4EB9 0000 2D02             		jsr	(CalcSine).l
0000B7A8 E848                       		lsr.w	#4,d0
0000B7AA 3200                       		move.w	d0,d1
0000B7AC D068 002C                  		add.w	$2C(a0),d0
0000B7B0 3140 000C                  		move.w	d0,$C(a0)
0000B7B4 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B7BA 6600                       		bne.s	loc_B07A
0000B7BC 4A28 0035                  		tst.b	$35(a0)
0000B7C0 6600                       		bne.s	loc_B07A
0000B7C2 117C 0001 0035             		move.b	#1,$35(a0)
0000B7C8 6100 0000                  		bsr.w	SingleObjLoad2
0000B7CC 6600                       		bne.s	loc_B07A
0000B7CE 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7D8 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7DE 5069 002C                  		addq.w	#8,$2C(a1)
0000B7E2 5769 002C                  		subq.w	#3,$2C(a1)
0000B7E6 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7EC 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7F2 2348 0038                  		move.l	a0,$38(a1)
0000B7F6 2448                       		movea.l	a0,a2
0000B7F8 6100                       		bsr.s	sub_B09C
0000B7FA                            
0000B7FA                            loc_B07A:
0000B7FA 7400                       		moveq	#0,d2
0000B7FC 45E8 0036                  		lea	$36(a0),a2
0000B800 141A                       		move.b	(a2)+,d2
0000B802 5302                       		subq.b	#1,d2
0000B804 6500                       		bcs.s	locret_B09A
0000B806                            
0000B806                            loc_B086:
0000B806 7000                       		moveq	#0,d0
0000B808 101A                       		move.b	(a2)+,d0
0000B80A ED48                       		lsl.w	#6,d0
0000B80C 0640 D000                  		addi.w	#-$3000,d0
0000B810 3240                       		movea.w	d0,a1
0000B812 3341 003C                  		move.w	d1,$3C(a1)
0000B816 51CA FFEE                  		dbf	d2,loc_B086
0000B81A                            
0000B81A                            locret_B09A:
0000B81A 4E75                       		rts	
0000B81C                            
0000B81C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B81C                            
0000B81C                            
0000B81C                            sub_B09C:
0000B81C 45EA 0036                  		lea	$36(a2),a2
0000B820 7000                       		moveq	#0,d0
0000B822 1012                       		move.b	(a2),d0
0000B824 5212                       		addq.b	#1,(a2)
0000B826 45F2 0001                  		lea	1(a2,d0.w),a2
0000B82A 3009                       		move.w	a1,d0
0000B82C 0440 D000                  		subi.w	#-$3000,d0
0000B830 EC48                       		lsr.w	#6,d0
0000B832 0240 007F                  		andi.w	#$7F,d0
0000B836 1480                       		move.b	d0,(a2)
0000B838 4E75                       		rts	
0000B83A                            ; End of function sub_B09C
0000B83A                            
0000B83A                            ; ===========================================================================
0000B83A                            
0000B83A                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B83A 4A28 0035                  		tst.b	$35(a0)
0000B83E 6700                       		beq.s	loc_B0C6
0000B840 4A28 0001                  		tst.b	1(a0)
0000B844 6A00                       		bpl.s	Obj2F_DelFlames
0000B846                            
0000B846                            loc_B0C6:
0000B846 3028 002A                  		move.w	$2A(a0),d0
0000B84A 0240 FF80                  		andi.w	#$FF80,d0
0000B84E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B852 0441 0080                  		subi.w	#$80,d1
0000B856 0241 FF80                  		andi.w	#$FF80,d1
0000B85A 9041                       		sub.w	d1,d0
0000B85C 0C40 0280                  		cmpi.w	#$280,d0
0000B860 6200 0000                  		bhi.w	DeleteObject
0000B864 4E75                       		rts	
0000B866                            ; ===========================================================================
0000B866                            
0000B866                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B866 7400                       		moveq	#0,d2
0000B868                            
0000B868                            loc_B0E8:
0000B868 45E8 0036                  		lea	$36(a0),a2
0000B86C 1412                       		move.b	(a2),d2
0000B86E 421A                       		clr.b	(a2)+
0000B870 5302                       		subq.b	#1,d2
0000B872 6500                       		bcs.s	locret_B116
0000B874                            
0000B874                            loc_B0F4:
0000B874 7000                       		moveq	#0,d0
0000B876 1012                       		move.b	(a2),d0
0000B878 421A                       		clr.b	(a2)+
0000B87A ED48                       		lsl.w	#6,d0
0000B87C 0640 D000                  		addi.w	#-$3000,d0
0000B880 3240                       		movea.w	d0,a1
0000B882 6100 0000                  		bsr.w	DeleteObject2
0000B886 51CA FFEC                  		dbf	d2,loc_B0F4
0000B88A 117C 0000 0035             		move.b	#0,$35(a0)
0000B890 117C 0000 0034             		move.b	#0,$34(a0)
0000B896                            
0000B896                            locret_B116:
0000B896 4E75                       		rts	
0000B898                            ; ===========================================================================
0000B898                            ; ---------------------------------------------------------------------------
0000B898                            ; Collision data for large moving platforms (MZ)
0000B898                            ; ---------------------------------------------------------------------------
0000B898                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8E4                            		even
0000B8E4                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B910                            		even
0000B910                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B95C                            		even
0000B95C                            ; ===========================================================================
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B95C                            ; (appears when	you walk on sinking platforms)
0000B95C                            ; ---------------------------------------------------------------------------
0000B95C                            
0000B95C                            Obj35:					; XREF: Obj_Index
0000B95C 7000                       		moveq	#0,d0
0000B95E 1028 0024                  		move.b	$24(a0),d0
0000B962 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B966 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B96A                            ; ===========================================================================
0000B96A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B96C 0000                       		dc.w loc_B238-Obj35_Index
0000B96E 0000                       		dc.w Obj35_Move-Obj35_Index
0000B970                            ; ===========================================================================
0000B970                            
0000B970                            Obj35_Main:				; XREF: Obj35_Index
0000B970 5428 0024                  		addq.b	#2,$24(a0)
0000B974 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B97C 317C 0345 0002             		move.w	#$345,2(a0)
0000B982 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B988 117C 0004 0001             		move.b	#4,1(a0)
0000B98E 117C 0001 0018             		move.b	#1,$18(a0)
0000B994 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B99A 117C 0008 0019             		move.b	#8,$19(a0)
0000B9A0 303C 00C8                  		move.w	#$C8,d0
0000B9A4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000B9AA 4A28 0028                  		tst.b	$28(a0)
0000B9AE 6700                       		beq.s	loc_B238
0000B9B0 5428 0024                  		addq.b	#2,$24(a0)
0000B9B4 6000 0000                  		bra.w	Obj35_Move
0000B9B8                            ; ===========================================================================
0000B9B8                            
0000B9B8                            loc_B238:				; XREF: Obj35_Index
0000B9B8 2268 0030                  		movea.l	$30(a0),a1
0000B9BC 3228 0008                  		move.w	8(a0),d1
0000B9C0 9268 002A                  		sub.w	$2A(a0),d1
0000B9C4 0641 000C                  		addi.w	#$C,d1
0000B9C8 3001                       		move.w	d1,d0
0000B9CA E248                       		lsr.w	#1,d0
0000B9CC 1031 0000                  		move.b	(a1,d0.w),d0
0000B9D0 4440                       		neg.w	d0
0000B9D2 D068 002C                  		add.w	$2C(a0),d0
0000B9D6 3400                       		move.w	d0,d2
0000B9D8 D068 003C                  		add.w	$3C(a0),d0
0000B9DC 3140 000C                  		move.w	d0,$C(a0)
0000B9E0 0C41 0084                  		cmpi.w	#$84,d1
0000B9E4 6400                       		bcc.s	loc_B2B0
0000B9E6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9EE 0C41 0080                  		cmpi.w	#$80,d1
0000B9F2 6400                       		bcc.s	loc_B2B0
0000B9F4 2028 0008                  		move.l	8(a0),d0
0000B9F8 0680 0008 0000             		addi.l	#$80000,d0
0000B9FE 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BA04 6600                       		bne.s	loc_B2B0
0000BA06 6100 0000                  		bsr.w	SingleObjLoad2
0000BA0A 6600                       		bne.s	loc_B2B0
0000BA0C 12BC 0035                  		move.b	#$35,0(a1)
0000BA10 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA16 3342 002C                  		move.w	d2,$2C(a1)
0000BA1A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BA20 137C 0001 0028             		move.b	#1,$28(a1)
0000BA26 2468 0038                  		movea.l	$38(a0),a2
0000BA2A 6100 FDF0                  		bsr.w	sub_B09C
0000BA2E                            
0000BA2E                            loc_B2B0:
0000BA2E 6000                       		bra.s	Obj35_Animate
0000BA30                            ; ===========================================================================
0000BA30                            
0000BA30                            Obj35_Move:				; XREF: Obj35_Index
0000BA30 3028 002C                  		move.w	$2C(a0),d0
0000BA34 D068 003C                  		add.w	$3C(a0),d0
0000BA38 3140 000C                  		move.w	d0,$C(a0)
0000BA3C                            
0000BA3C                            Obj35_Animate:				; XREF: loc_B238
0000BA3C 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA42 6100 F4AA                  		bsr.w	AnimateSprite
0000BA46 6000 0000                  		bra.w	DisplaySprite
0000BA4A                            ; ===========================================================================
0000BA4A                            Ani_obj35:
0000BA4A                            	include "_anim\obj35.asm"
0000BA4A                            ; ---------------------------------------------------------------------------
0000BA4A                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA4A                            ; ---------------------------------------------------------------------------
0000BA4A 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA4C 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA52                            		even
0000BA52                            		even
0000BA52                            
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52                            ; Sprite mappings - large moving platforms (MZ)
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52                            Map_obj2F:
0000BA52                            	include "_maps\obj2F.asm"
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52                            ; Sprite mappings - large moving platforms (MZ)
0000BA52                            ; ---------------------------------------------------------------------------
0000BA52 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA54 0000                       		dc.w byte_B31C-Map_obj2F
0000BA56 0000                       		dc.w byte_B34F-Map_obj2F
0000BA58 0D                         byte_B2DA:	dc.b $D
0000BA59 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA5E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA63 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA68 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA6D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA72 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA77 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA7C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA81 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA86 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA8B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA90 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA95 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA9A 0A                         byte_B31C:	dc.b $A
0000BA9B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BAA0 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BAA5 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BAAA C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BAAF E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BAB4 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAB9 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BABE E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BAC3 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BAC8 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BACD 06                         byte_B34F:	dc.b 6
0000BACE D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BAD3 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAD8 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BADD D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BAE2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BAE7 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BAEC                            		even
0000BAEC                            		even
0000BAEC                            
0000BAEC                            ; ---------------------------------------------------------------------------
0000BAEC                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BAEC                            ; ---------------------------------------------------------------------------
0000BAEC                            Map_obj14:
0000BAEC                            	include "_maps\obj14.asm"
0000BAEC                            ; --------------------------------------------------------------------------------
0000BAEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BAEC                            ; --------------------------------------------------------------------------------
0000BAEC                            
0000BAEC                            SME_C6wT7:	
0000BAEC 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BAF0 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BAF4 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BAF8 01                         SME_C6wT7_C:	dc.b 1	
0000BAF9 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAFE 01                         SME_C6wT7_12:	dc.b 1	
0000BAFF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BB04 02                         SME_C6wT7_18:	dc.b 2	
0000BB05 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BB0A E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BB0F 01                         SME_C6wT7_23:	dc.b 1	
0000BB10 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BB15 01                         SME_C6wT7_29:	dc.b 1	
0000BB16 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BB1B 01                         SME_C6wT7_2F:	dc.b 1	
0000BB1C F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BB22 00                         		even
0000BB22 00                         		even
0000BB22                            
0000BB22                            ; ===========================================================================
0000BB22                            ; ---------------------------------------------------------------------------
0000BB22                            ; Object 30 - large green glassy blocks	(MZ)
0000BB22                            ; ---------------------------------------------------------------------------
0000BB22                            
0000BB22                            Obj30:					; XREF: Obj_Index
0000BB22 7000                       		moveq	#0,d0
0000BB24 1028 0024                  		move.b	$24(a0),d0
0000BB28 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB2C 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB30 3028 0008                  		move.w	8(a0),d0
0000BB34 0240 FF80                  		andi.w	#$FF80,d0
0000BB38 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB3C 0441 0080                  		subi.w	#$80,d1
0000BB40 0241 FF80                  		andi.w	#$FF80,d1
0000BB44 9041                       		sub.w	d1,d0
0000BB46 0C40 0280                  		cmpi.w	#$280,d0
0000BB4A 6200 0000                  		bhi.w	Obj30_Delete
0000BB4E 6000 0000                  		bra.w	DisplaySprite
0000BB52                            ; ===========================================================================
0000BB52                            
0000BB52                            Obj30_Delete:
0000BB52 6000 0000                  		bra.w	DeleteObject
0000BB56                            ; ===========================================================================
0000BB56 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB58 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB5A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB5C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB5E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB60                            
0000BB60 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB63 0400 01                    		dc.b 4,	0, 1
0000BB66 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB69 0800 01                    		dc.b 8,	0, 1
0000BB6C                            ; ===========================================================================
0000BB6C                            
0000BB6C                            Obj30_Main:				; XREF: Obj30_Index
0000BB6C 45F9 0000 BB60             		lea	(Obj30_Vars1).l,a2
0000BB72 7201                       		moveq	#1,d1
0000BB74 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB7A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB80 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB82 45F9 0000 BB66             		lea	(Obj30_Vars2).l,a2
0000BB88 7201                       		moveq	#1,d1
0000BB8A 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB90                            
0000BB90                            loc_B40C:
0000BB90 2248                       		movea.l	a0,a1
0000BB92 6000                       		bra.s	Obj30_Load	; load main object
0000BB94                            ; ===========================================================================
0000BB94                            
0000BB94                            Obj30_Loop:
0000BB94 6100 0000                  		bsr.w	SingleObjLoad2
0000BB98 6600                       		bne.s	loc_B480
0000BB9A                            
0000BB9A                            Obj30_Load:				; XREF: Obj30_Main
0000BB9A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB9E 12BC 0030                  		move.b	#$30,0(a1)
0000BBA2 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBA8 101A                       		move.b	(a2)+,d0
0000BBAA 4880                       		ext.w	d0
0000BBAC D068 000C                  		add.w	$C(a0),d0
0000BBB0 3340 000C                  		move.w	d0,$C(a1)
0000BBB4 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BBBC 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BBC2 137C 0004 0001             		move.b	#4,1(a1)
0000BBC8 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBCE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBD4 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBDA 137C 0004 0018             		move.b	#4,$18(a1)
0000BBE0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBE4 2348 003C                  		move.l	a0,$3C(a1)
0000BBE8 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBEC                            
0000BBEC 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBF2 137C 0003 0018             		move.b	#3,$18(a1)
0000BBF8 5029 0028                  		addq.b	#8,$28(a1)
0000BBFC 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BC02                            
0000BC02                            loc_B480:
0000BC02 317C 0090 0032             		move.w	#$90,$32(a0)
0000BC08 08E8 0004 0001             		bset	#4,1(a0)
0000BC0E                            
0000BC0E                            Obj30_Block012:				; XREF: Obj30_Index
0000BC0E 6100 0000                  		bsr.w	Obj30_Types
0000BC12 323C 002B                  		move.w	#$2B,d1
0000BC16 343C 0048                  		move.w	#$48,d2
0000BC1A 363C 0049                  		move.w	#$49,d3
0000BC1E 3828 0008                  		move.w	8(a0),d4
0000BC22 6000 0000                  		bra.w	SolidObject
0000BC26                            ; ===========================================================================
0000BC26                            
0000BC26                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BC26 2268 003C                  		movea.l	$3C(a0),a1
0000BC2A 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC30 6000 0000                  		bra.w	Obj30_Types
0000BC34                            ; ===========================================================================
0000BC34                            
0000BC34                            Obj30_Block34:				; XREF: Obj30_Index
0000BC34 6100 0000                  		bsr.w	Obj30_Types
0000BC38 323C 002B                  		move.w	#$2B,d1
0000BC3C 343C 0038                  		move.w	#$38,d2
0000BC40 363C 0039                  		move.w	#$39,d3
0000BC44 3828 0008                  		move.w	8(a0),d4
0000BC48 6000 0000                  		bra.w	SolidObject
0000BC4C                            ; ===========================================================================
0000BC4C                            
0000BC4C                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC4C 2268 003C                  		movea.l	$3C(a0),a1
0000BC50 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC56 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC5C 6000 0002                  		bra.w	*+4
0000BC60                            
0000BC60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC60                            
0000BC60                            
0000BC60                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC60 7000                       		moveq	#0,d0
0000BC62 1028 0028                  		move.b	$28(a0),d0
0000BC66 0240 0007                  		andi.w	#7,d0
0000BC6A D040                       		add.w	d0,d0
0000BC6C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC70 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC74                            ; End of function Obj30_Types
0000BC74                            
0000BC74                            ; ===========================================================================
0000BC74 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC76 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC78 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC7A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC7C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC7E                            ; ===========================================================================
0000BC7E                            
0000BC7E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC7E 4E75                       		rts	
0000BC80                            ; ===========================================================================
0000BC80                            
0000BC80                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC80 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC84 323C 0040                  		move.w	#$40,d1
0000BC88 6000                       		bra.s	loc_B514
0000BC8A                            ; ===========================================================================
0000BC8A                            
0000BC8A                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC8A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC8E 323C 0040                  		move.w	#$40,d1
0000BC92 4440                       		neg.w	d0
0000BC94 D041                       		add.w	d1,d0
0000BC96                            
0000BC96                            loc_B514:				; XREF: Obj30_Type01
0000BC96 0828 0003 0028             		btst	#3,$28(a0)
0000BC9C 6700                       		beq.s	loc_B526
0000BC9E 4440                       		neg.w	d0
0000BCA0 D041                       		add.w	d1,d0
0000BCA2 E208                       		lsr.b	#1,d0
0000BCA4 0640 0020                  		addi.w	#$20,d0
0000BCA8                            
0000BCA8                            loc_B526:
0000BCA8 6000 0000                  		bra.w	loc_B5EE
0000BCAC                            ; ===========================================================================
0000BCAC                            
0000BCAC                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BCAC 0828 0003 0028             		btst	#3,$28(a0)
0000BCB2 6700                       		beq.s	loc_B53E
0000BCB4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCB8 0440 0010                  		subi.w	#$10,d0
0000BCBC 6000 0000                  		bra.w	loc_B5EE
0000BCC0                            ; ===========================================================================
0000BCC0                            
0000BCC0                            loc_B53E:
0000BCC0 0828 0003 0022             		btst	#3,$22(a0)
0000BCC6 6600                       		bne.s	loc_B54E
0000BCC8 08A8 0000 0034             		bclr	#0,$34(a0)
0000BCCE 6000                       		bra.s	loc_B582
0000BCD0                            ; ===========================================================================
0000BCD0                            
0000BCD0                            loc_B54E:
0000BCD0 4A28 0034                  		tst.b	$34(a0)
0000BCD4 6600                       		bne.s	loc_B582
0000BCD6 117C 0001 0034             		move.b	#1,$34(a0)
0000BCDC 08E8 0000 0035             		bset	#0,$35(a0)
0000BCE2 6700                       		beq.s	loc_B582
0000BCE4 08E8 0007 0034             		bset	#7,$34(a0)
0000BCEA 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCF0 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCF6 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCFC 6600                       		bne.s	loc_B582
0000BCFE 317C 0040 0036             		move.w	#$40,$36(a0)
0000BD04                            
0000BD04                            loc_B582:
0000BD04 4A28 0034                  		tst.b	$34(a0)
0000BD08 6A00                       		bpl.s	loc_B5AA
0000BD0A 4A28 0038                  		tst.b	$38(a0)
0000BD0E 6700                       		beq.s	loc_B594
0000BD10 5328 0038                  		subq.b	#1,$38(a0)
0000BD14 6600                       		bne.s	loc_B5AA
0000BD16                            
0000BD16                            loc_B594:
0000BD16 4A68 0032                  		tst.w	$32(a0)
0000BD1A 6700                       		beq.s	loc_B5A4
0000BD1C 5368 0032                  		subq.w	#1,$32(a0)
0000BD20 5368 0036                  		subq.w	#1,$36(a0)
0000BD24 6600                       		bne.s	loc_B5AA
0000BD26                            
0000BD26                            loc_B5A4:
0000BD26 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD2C                            
0000BD2C                            loc_B5AA:
0000BD2C 3028 0032                  		move.w	$32(a0),d0
0000BD30 6000                       		bra.s	loc_B5EE
0000BD32                            ; ===========================================================================
0000BD32                            
0000BD32                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD32 0828 0003 0028             		btst	#3,$28(a0)
0000BD38 6700                       		beq.s	Obj30_ChkSwitch
0000BD3A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD3E 0440 0010                  		subi.w	#$10,d0
0000BD42 6000                       		bra.s	loc_B5EE
0000BD44                            ; ===========================================================================
0000BD44                            
0000BD44                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD44 4A28 0034                  		tst.b	$34(a0)
0000BD48 6600                       		bne.s	loc_B5E0
0000BD4A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD4E 7000                       		moveq	#0,d0
0000BD50 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD54 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD56 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD5A 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD5C 117C 0001 0034             		move.b	#1,$34(a0)
0000BD62                            
0000BD62                            loc_B5E0:
0000BD62 4A68 0032                  		tst.w	$32(a0)
0000BD66 6700                       		beq.s	loc_B5EA
0000BD68 5568 0032                  		subq.w	#2,$32(a0)
0000BD6C                            
0000BD6C                            loc_B5EA:
0000BD6C 3028 0032                  		move.w	$32(a0),d0
0000BD70                            
0000BD70                            loc_B5EE:
0000BD70 3228 0030                  		move.w	$30(a0),d1
0000BD74 9240                       		sub.w	d0,d1
0000BD76 3141 000C                  		move.w	d1,$C(a0)
0000BD7A 4E75                       		rts	
0000BD7C                            ; ===========================================================================
0000BD7C                            ; ---------------------------------------------------------------------------
0000BD7C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD7C                            ; ---------------------------------------------------------------------------
0000BD7C                            Map_obj30:
0000BD7C                            	include "_maps\obj30.asm"
0000BD7C                            ; ---------------------------------------------------------------------------
0000BD7C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD7C                            ; ---------------------------------------------------------------------------
0000BD7C 0000                       		dc.w byte_B600-Map_obj30
0000BD7E 0000                       		dc.w byte_B63D-Map_obj30
0000BD80 0000                       		dc.w byte_B648-Map_obj30
0000BD82 0C                         byte_B600:	dc.b $C
0000BD83 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD88 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD8D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD92 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD97 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD9C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BDA1 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BDA6 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BDAB 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BDB0 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BDB5 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BDBA 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BDBF 02                         byte_B63D:	dc.b 2
0000BDC0 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BDC5 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BDCA 0A                         byte_B648:	dc.b $A
0000BDCB C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDD0 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDD5 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDDA D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDDF F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDE4 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDE9 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDEE 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDF3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDF8 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDFE 00                         		even
0000BDFE 00                         		even
0000BDFE                            
0000BDFE                            ; ===========================================================================
0000BDFE                            ; ---------------------------------------------------------------------------
0000BDFE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDFE                            ; ---------------------------------------------------------------------------
0000BDFE                            
0000BDFE                            Obj31:					; XREF: Obj_Index
0000BDFE 7000                       		moveq	#0,d0
0000BE00 1028 0024                  		move.b	$24(a0),d0
0000BE04 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BE08 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BE0C                            ; ===========================================================================
0000BE0C 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BE0E 0000                       		dc.w loc_B798-Obj31_Index
0000BE10 0000                       		dc.w loc_B7FE-Obj31_Index
0000BE12 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BE14 0000                       		dc.w loc_B7E2-Obj31_Index
0000BE16                            
0000BE16 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BE18 0100                       		dc.b 1,	0
0000BE1A                            
0000BE1A 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BE1D 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BE20 08CC 03                    		dc.b 8,	$CC, 3
0000BE23 06F0 02                    		dc.b 6,	$F0, 2
0000BE26                            
0000BE26 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BE2A 5000 7800                  		dc.w $5000, $7800
0000BE2E 3800 5800                  		dc.w $3800, $5800
0000BE32 B800                       		dc.w $B800
0000BE34                            ; ===========================================================================
0000BE34                            
0000BE34                            Obj31_Main:				; XREF: Obj31_Index
0000BE34 7000                       		moveq	#0,d0
0000BE36 1028 0028                  		move.b	$28(a0),d0
0000BE3A 6A00                       		bpl.s	loc_B6CE
0000BE3C 0240 007F                  		andi.w	#$7F,d0
0000BE40 D040                       		add.w	d0,d0
0000BE42 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE46 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE4A 101A                       		move.b	(a2)+,d0
0000BE4C 1140 0028                  		move.b	d0,$28(a0)
0000BE50                            
0000BE50                            loc_B6CE:
0000BE50 0200 000F                  		andi.b	#$F,d0
0000BE54 D040                       		add.w	d0,d0
0000BE56 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE5A 4A40                       		tst.w	d0
0000BE5C 6600                       		bne.s	loc_B6E0
0000BE5E 3142 0032                  		move.w	d2,$32(a0)
0000BE62                            
0000BE62                            loc_B6E0:
0000BE62 45F9 0000 BE1A             		lea	(Obj31_Var).l,a2
0000BE68 2248                       		movea.l	a0,a1
0000BE6A 7203                       		moveq	#3,d1
0000BE6C 6000                       		bra.s	Obj31_MakeStomper
0000BE6E                            ; ===========================================================================
0000BE6E                            
0000BE6E                            Obj31_Loop:
0000BE6E 6100 0000                  		bsr.w	SingleObjLoad2
0000BE72 6600 0000                  		bne.w	Obj31_SetSize
0000BE76                            
0000BE76                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE76 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE7A 12BC 0031                  		move.b	#$31,0(a1)
0000BE7E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE84 101A                       		move.b	(a2)+,d0
0000BE86 4880                       		ext.w	d0
0000BE88 D068 000C                  		add.w	$C(a0),d0
0000BE8C 3340 000C                  		move.w	d0,$C(a1)
0000BE90 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE98 337C 0300 0002             		move.w	#$300,2(a1)
0000BE9E 137C 0004 0001             		move.b	#4,1(a1)
0000BEA4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BEAA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BEB0 137C 0010 0019             		move.b	#$10,$19(a1)
0000BEB6 3342 0034                  		move.w	d2,$34(a1)
0000BEBA 137C 0004 0018             		move.b	#4,$18(a1)
0000BEC0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BEC4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BECA 6600                       		bne.s	loc_B76A
0000BECC 5341                       		subq.w	#1,d1
0000BECE 1028 0028                  		move.b	$28(a0),d0
0000BED2 0240 00F0                  		andi.w	#$F0,d0
0000BED6 0C40 0020                  		cmpi.w	#$20,d0
0000BEDA 679A                       		beq.s	Obj31_MakeStomper
0000BEDC 137C 0038 0019             		move.b	#$38,$19(a1)
0000BEE2 137C 0090 0020             		move.b	#$90,$20(a1)
0000BEE8 5241                       		addq.w	#1,d1
0000BEEA                            
0000BEEA                            loc_B76A:
0000BEEA 2348 003C                  		move.l	a0,$3C(a1)
0000BEEE 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BEF2                            
0000BEF2 137C 0003 0018             		move.b	#3,$18(a1)
0000BEF8                            
0000BEF8                            Obj31_SetSize:
0000BEF8 7000                       		moveq	#0,d0
0000BEFA 1028 0028                  		move.b	$28(a0),d0
0000BEFE E648                       		lsr.w	#3,d0
0000BF00 0200 000E                  		andi.b	#$E,d0
0000BF04 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BF08 115A 0019                  		move.b	(a2)+,$19(a0)
0000BF0C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BF10 6000                       		bra.s	loc_B798
0000BF12                            ; ===========================================================================
0000BF12 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BF14 3009                       		dc.b $30, 9
0000BF16 100A                       		dc.b $10, $A
0000BF18                            ; ===========================================================================
0000BF18                            
0000BF18                            loc_B798:				; XREF: Obj31_Index
0000BF18 6100 0000                  		bsr.w	Obj31_Types
0000BF1C 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BF22 7200                       		moveq	#0,d1
0000BF24 1228 0019                  		move.b	$19(a0),d1
0000BF28 0641 000B                  		addi.w	#$B,d1
0000BF2C 343C 000C                  		move.w	#$C,d2
0000BF30 363C 000D                  		move.w	#$D,d3
0000BF34 3828 0008                  		move.w	8(a0),d4
0000BF38 6100 0000                  		bsr.w	SolidObject
0000BF3C 0828 0003 0022             		btst	#3,$22(a0)
0000BF42 6700                       		beq.s	Obj31_Display
0000BF44 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF4A 6400                       		bcc.s	Obj31_Display
0000BF4C 2448                       		movea.l	a0,a2
0000BF4E 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF52 4EB9 0000 0000             		jsr	KillSonic
0000BF58 204A                       		movea.l	a2,a0
0000BF5A                            
0000BF5A                            Obj31_Display:
0000BF5A 6100 0000                  		bsr.w	DisplaySprite
0000BF5E 6000 0000                  		bra.w	Obj31_ChkDel
0000BF62                            ; ===========================================================================
0000BF62                            
0000BF62                            loc_B7E2:				; XREF: Obj31_Index
0000BF62 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF68 08E8 0004 0001             		bset	#4,1(a0)
0000BF6E 2268 003C                  		movea.l	$3C(a0),a1
0000BF72 1029 0032                  		move.b	$32(a1),d0
0000BF76 EA08                       		lsr.b	#5,d0
0000BF78 5600                       		addq.b	#3,d0
0000BF7A 1140 001A                  		move.b	d0,$1A(a0)
0000BF7E                            
0000BF7E                            loc_B7FE:				; XREF: Obj31_Index
0000BF7E 2268 003C                  		movea.l	$3C(a0),a1
0000BF82 7000                       		moveq	#0,d0
0000BF84 1029 0032                  		move.b	$32(a1),d0
0000BF88 D068 0030                  		add.w	$30(a0),d0
0000BF8C 3140 000C                  		move.w	d0,$C(a0)
0000BF90                            
0000BF90                            Obj31_Display2:				; XREF: Obj31_Index
0000BF90 6100 0000                  		bsr.w	DisplaySprite
0000BF94                            
0000BF94                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF94 3028 0008                  		move.w	8(a0),d0
0000BF98 0240 FF80                  		andi.w	#$FF80,d0
0000BF9C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFA0 0441 0080                  		subi.w	#$80,d1
0000BFA4 0241 FF80                  		andi.w	#$FF80,d1
0000BFA8 9041                       		sub.w	d1,d0
0000BFAA 0C40 0280                  		cmpi.w	#$280,d0
0000BFAE 6200 0000                  		bhi.w	DeleteObject
0000BFB2 4E75                       		rts	
0000BFB4                            ; ===========================================================================
0000BFB4                            
0000BFB4                            Obj31_Types:				; XREF: loc_B798
0000BFB4 1028 0028                  		move.b	$28(a0),d0
0000BFB8 0240 000F                  		andi.w	#$F,d0
0000BFBC D040                       		add.w	d0,d0
0000BFBE 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BFC2 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BFC6                            ; ===========================================================================
0000BFC6 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BFC8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFCA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFCC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFCE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFD0 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFD2 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFD4                            ; ===========================================================================
0000BFD4                            
0000BFD4                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFD4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFD8 7000                       		moveq	#0,d0
0000BFDA 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFDE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFE2 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFE4 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFE8 6A00                       		bpl.s	loc_B872
0000BFEA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFF0 6700                       		beq.s	loc_B8A0
0000BFF2                            
0000BFF2                            loc_B872:
0000BFF2 4A68 0032                  		tst.w	$32(a0)
0000BFF6 6700                       		beq.s	loc_B8A0
0000BFF8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFFC 0200 000F                  		andi.b	#$F,d0
0000C000 6600                       		bne.s	loc_B892
0000C002 4A28 0001                  		tst.b	1(a0)
0000C006 6A00                       		bpl.s	loc_B892
0000C008 303C 00C7                  		move.w	#$C7,d0
0000C00C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C012                            
0000C012                            loc_B892:
0000C012 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C018 6400                       		bcc.s	Obj31_Restart
0000C01A 317C 0000 0032             		move.w	#0,$32(a0)
0000C020                            
0000C020                            loc_B8A0:
0000C020 317C 0000 0012             		move.w	#0,$12(a0)
0000C026 6000                       		bra.s	Obj31_Restart
0000C028                            ; ===========================================================================
0000C028                            
0000C028                            loc_B8A8:				; XREF: Obj31_Type00
0000C028 3228 0034                  		move.w	$34(a0),d1
0000C02C B268 0032                  		cmp.w	$32(a0),d1
0000C030 6700                       		beq.s	Obj31_Restart
0000C032 3028 0012                  		move.w	$12(a0),d0
0000C036 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C03C D168 0032                  		add.w	d0,$32(a0)
0000C040 B268 0032                  		cmp.w	$32(a0),d1
0000C044 6200                       		bhi.s	Obj31_Restart
0000C046 3141 0032                  		move.w	d1,$32(a0)
0000C04A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C050 4A28 0001                  		tst.b	1(a0)
0000C054 6A00                       		bpl.s	Obj31_Restart
0000C056 303C 00BD                  		move.w	#$BD,d0
0000C05A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C060                            
0000C060                            Obj31_Restart:
0000C060 7000                       		moveq	#0,d0
0000C062 1028 0032                  		move.b	$32(a0),d0
0000C066 D068 0030                  		add.w	$30(a0),d0
0000C06A 3140 000C                  		move.w	d0,$C(a0)
0000C06E 4E75                       		rts	
0000C070                            ; ===========================================================================
0000C070                            
0000C070                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C070 4A68 0036                  		tst.w	$36(a0)
0000C074 6700                       		beq.s	loc_B938
0000C076 4A68 0038                  		tst.w	$38(a0)
0000C07A 6700                       		beq.s	loc_B902
0000C07C 5368 0038                  		subq.w	#1,$38(a0)
0000C080 6000                       		bra.s	loc_B97C
0000C082                            ; ===========================================================================
0000C082                            
0000C082                            loc_B902:
0000C082 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C086 0200 000F                  		andi.b	#$F,d0
0000C08A 6600                       		bne.s	loc_B91C
0000C08C 4A28 0001                  		tst.b	1(a0)
0000C090 6A00                       		bpl.s	loc_B91C
0000C092 303C 00C7                  		move.w	#$C7,d0
0000C096 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C09C                            
0000C09C                            loc_B91C:
0000C09C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C0A2 6400                       		bcc.s	loc_B97C
0000C0A4 317C 0000 0032             		move.w	#0,$32(a0)
0000C0AA 317C 0000 0012             		move.w	#0,$12(a0)
0000C0B0 317C 0000 0036             		move.w	#0,$36(a0)
0000C0B6 6000                       		bra.s	loc_B97C
0000C0B8                            ; ===========================================================================
0000C0B8                            
0000C0B8                            loc_B938:				; XREF: Obj31_Type01
0000C0B8 3228 0034                  		move.w	$34(a0),d1
0000C0BC B268 0032                  		cmp.w	$32(a0),d1
0000C0C0 6700                       		beq.s	loc_B97C
0000C0C2 3028 0012                  		move.w	$12(a0),d0
0000C0C6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C0CC D168 0032                  		add.w	d0,$32(a0)
0000C0D0 B268 0032                  		cmp.w	$32(a0),d1
0000C0D4 6200                       		bhi.s	loc_B97C
0000C0D6 3141 0032                  		move.w	d1,$32(a0)
0000C0DA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0E0 317C 0001 0036             		move.w	#1,$36(a0)
0000C0E6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0EC 4A28 0001                  		tst.b	1(a0)
0000C0F0 6A00                       		bpl.s	loc_B97C
0000C0F2 303C 00BD                  		move.w	#$BD,d0
0000C0F6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0FC                            
0000C0FC                            loc_B97C:
0000C0FC 6000 FF62                  		bra.w	Obj31_Restart
0000C100                            ; ===========================================================================
0000C100                            
0000C100                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C100 3038 D008                  		move.w	($FFFFD008).w,d0
0000C104 9068 0008                  		sub.w	8(a0),d0
0000C108 6400                       		bcc.s	loc_B98C
0000C10A 4440                       		neg.w	d0
0000C10C                            
0000C10C                            loc_B98C:
0000C10C 0C40 0090                  		cmpi.w	#$90,d0
0000C110 6400                       		bcc.s	loc_B996
0000C112 5228 0028                  		addq.b	#1,$28(a0)
0000C116                            
0000C116                            loc_B996:
0000C116 6000 FF48                  		bra.w	Obj31_Restart
0000C11A                            ; ===========================================================================
0000C11A                            ; ---------------------------------------------------------------------------
0000C11A                            ; Object 45 - spiked metal block from beta version (MZ)
0000C11A                            ; ---------------------------------------------------------------------------
0000C11A                            
0000C11A                            Obj45:					; XREF: Obj_Index
0000C11A 7000                       		moveq	#0,d0
0000C11C 1028 0024                  		move.b	$24(a0),d0
0000C120 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C124 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C128                            ; ===========================================================================
0000C128 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C12A 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C12C 0000                       		dc.w loc_BA8E-Obj45_Index
0000C12E 0000                       		dc.w Obj45_Display-Obj45_Index
0000C130 0000                       		dc.w loc_BA7A-Obj45_Index
0000C132                            
0000C132 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C135 04E4 01                    		dc.b	4, $E4,	  1
0000C138 0834 03                    		dc.b	8, $34,	  3
0000C13B 0628 02                    		dc.b	6, $28,	  2
0000C13E                            
0000C13E 3800                       word_B9BE:	dc.w $3800
0000C140 A000                       		dc.w -$6000
0000C142 5000                       		dc.w $5000
0000C144                            ; ===========================================================================
0000C144                            
0000C144                            Obj45_Main:				; XREF: Obj45_Index
0000C144 7000                       		moveq	#0,d0
0000C146 1028 0028                  		move.b	$28(a0),d0
0000C14A D040                       		add.w	d0,d0
0000C14C 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C150 45F9 0000 C132             		lea	(Obj45_Var).l,a2
0000C156 2248                       		movea.l	a0,a1
0000C158 7203                       		moveq	#3,d1
0000C15A 6000                       		bra.s	Obj45_Load
0000C15C                            ; ===========================================================================
0000C15C                            
0000C15C                            Obj45_Loop:
0000C15C 6100 0000                  		bsr.w	SingleObjLoad2
0000C160 6600                       		bne.s	loc_BA52
0000C162                            
0000C162                            Obj45_Load:				; XREF: Obj45_Main
0000C162 135A 0024                  		move.b	(a2)+,$24(a1)
0000C166 12BC 0045                  		move.b	#$45,0(a1)
0000C16A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C170 101A                       		move.b	(a2)+,d0
0000C172 4880                       		ext.w	d0
0000C174 D068 0008                  		add.w	8(a0),d0
0000C178 3340 0008                  		move.w	d0,8(a1)
0000C17C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C184 337C 0300 0002             		move.w	#$300,2(a1)
0000C18A 137C 0004 0001             		move.b	#4,1(a1)
0000C190 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C196 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C19C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C1A2 137C 0020 0019             		move.b	#$20,$19(a1)
0000C1A8 3342 0034                  		move.w	d2,$34(a1)
0000C1AC 137C 0004 0018             		move.b	#4,$18(a1)
0000C1B2 0C12 0001                  		cmpi.b	#1,(a2)
0000C1B6 6600                       		bne.s	loc_BA40
0000C1B8 137C 0091 0020             		move.b	#$91,$20(a1)
0000C1BE                            
0000C1BE                            loc_BA40:
0000C1BE 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C1C2 2348 003C                  		move.l	a0,$3C(a1)
0000C1C6 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C1CA                            
0000C1CA 137C 0003 0018             		move.b	#3,$18(a1)
0000C1D0                            
0000C1D0                            loc_BA52:
0000C1D0 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1D6                            
0000C1D6                            Obj45_Solid:				; XREF: Obj45_Index
0000C1D6 3F28 0008                  		move.w	8(a0),-(sp)
0000C1DA 6100 0000                  		bsr.w	Obj45_Move
0000C1DE 323C 0017                  		move.w	#$17,d1
0000C1E2 343C 0020                  		move.w	#$20,d2
0000C1E6 363C 0020                  		move.w	#$20,d3
0000C1EA 381F                       		move.w	(sp)+,d4
0000C1EC 6100 0000                  		bsr.w	SolidObject
0000C1F0 6100 0000                  		bsr.w	DisplaySprite
0000C1F4 6000 0000                  		bra.w	Obj45_ChkDel
0000C1F8                            ; ===========================================================================
0000C1F8                            
0000C1F8                            loc_BA7A:				; XREF: Obj45_Index
0000C1F8 2268 003C                  		movea.l	$3C(a0),a1
0000C1FC 1029 0032                  		move.b	$32(a1),d0
0000C200 0600 0010                  		addi.b	#$10,d0
0000C204 EA08                       		lsr.b	#5,d0
0000C206 5600                       		addq.b	#3,d0
0000C208 1140 001A                  		move.b	d0,$1A(a0)
0000C20C                            
0000C20C                            loc_BA8E:				; XREF: Obj45_Index
0000C20C 2268 003C                  		movea.l	$3C(a0),a1
0000C210 7000                       		moveq	#0,d0
0000C212 1029 0032                  		move.b	$32(a1),d0
0000C216 4440                       		neg.w	d0
0000C218 D068 0030                  		add.w	$30(a0),d0
0000C21C 3140 0008                  		move.w	d0,8(a0)
0000C220                            
0000C220                            Obj45_Display:				; XREF: Obj45_Index
0000C220 6100 0000                  		bsr.w	DisplaySprite
0000C224                            
0000C224                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C224 3028 003A                  		move.w	$3A(a0),d0
0000C228 0240 FF80                  		andi.w	#$FF80,d0
0000C22C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C230 0441 0080                  		subi.w	#$80,d1
0000C234 0241 FF80                  		andi.w	#$FF80,d1
0000C238 9041                       		sub.w	d1,d0
0000C23A 0C40 0280                  		cmpi.w	#$280,d0
0000C23E 6200 0000                  		bhi.w	DeleteObject
0000C242 4E75                       		rts	
0000C244                            
0000C244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C244                            
0000C244                            
0000C244                            Obj45_Move:				; XREF: Obj45_Solid
0000C244 7000                       		moveq	#0,d0
0000C246 1028 0028                  		move.b	$28(a0),d0
0000C24A D040                       		add.w	d0,d0
0000C24C 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C250 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C254                            ; End of function Obj45_Move
0000C254                            
0000C254                            ; ===========================================================================
0000C254 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C256 0000                       		dc.w loc_BADA-off_BAD6
0000C258                            ; ===========================================================================
0000C258                            
0000C258                            loc_BADA:				; XREF: off_BAD6
0000C258 4A68 0036                  		tst.w	$36(a0)
0000C25C 6700                       		beq.s	loc_BB08
0000C25E 4A68 0038                  		tst.w	$38(a0)
0000C262 6700                       		beq.s	loc_BAEC
0000C264 5368 0038                  		subq.w	#1,$38(a0)
0000C268 6000                       		bra.s	loc_BB3C
0000C26A                            ; ===========================================================================
0000C26A                            
0000C26A                            loc_BAEC:
0000C26A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C270 6400                       		bcc.s	loc_BB3C
0000C272 317C 0000 0032             		move.w	#0,$32(a0)
0000C278 317C 0000 0010             		move.w	#0,$10(a0)
0000C27E 317C 0000 0036             		move.w	#0,$36(a0)
0000C284 6000                       		bra.s	loc_BB3C
0000C286                            ; ===========================================================================
0000C286                            
0000C286                            loc_BB08:				; XREF: loc_BADA
0000C286 3228 0034                  		move.w	$34(a0),d1
0000C28A B268 0032                  		cmp.w	$32(a0),d1
0000C28E 6700                       		beq.s	loc_BB3C
0000C290 3028 0010                  		move.w	$10(a0),d0
0000C294 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C29A D168 0032                  		add.w	d0,$32(a0)
0000C29E B268 0032                  		cmp.w	$32(a0),d1
0000C2A2 6200                       		bhi.s	loc_BB3C
0000C2A4 3141 0032                  		move.w	d1,$32(a0)
0000C2A8 317C 0000 0010             		move.w	#0,$10(a0)
0000C2AE 317C 0001 0036             		move.w	#1,$36(a0)
0000C2B4 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C2BA                            
0000C2BA                            loc_BB3C:
0000C2BA 7000                       		moveq	#0,d0
0000C2BC 1028 0032                  		move.b	$32(a0),d0
0000C2C0 4440                       		neg.w	d0
0000C2C2 D068 0030                  		add.w	$30(a0),d0
0000C2C6 3140 0008                  		move.w	d0,8(a0)
0000C2CA 4E75                       		rts	
0000C2CC                            ; ===========================================================================
0000C2CC                            ; ---------------------------------------------------------------------------
0000C2CC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2CC                            ; ---------------------------------------------------------------------------
0000C2CC                            Map_obj31:
0000C2CC                            	include "_maps\obj31.asm"
0000C2CC                            ; ---------------------------------------------------------------------------
0000C2CC                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2CC                            ; ---------------------------------------------------------------------------
0000C2CC 0000                       		dc.w byte_BB64-Map_obj31
0000C2CE 0000                       		dc.w byte_BB7E-Map_obj31
0000C2D0 0000                       		dc.w byte_BB98-Map_obj31
0000C2D2 0000                       		dc.w byte_BB9E-Map_obj31
0000C2D4 0000                       		dc.w byte_BBA9-Map_obj31
0000C2D6 0000                       		dc.w byte_BBBE-Map_obj31
0000C2D8 0000                       		dc.w byte_BBDD-Map_obj31
0000C2DA 0000                       		dc.w byte_BC06-Map_obj31
0000C2DC 0000                       		dc.w byte_BC06-Map_obj31
0000C2DE 0000                       		dc.w byte_BC39-Map_obj31
0000C2E0 0000                       		dc.w byte_BC53-Map_obj31
0000C2E2 05                         byte_BB64:	dc.b 5
0000C2E3 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2E8 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2ED EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2F2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2F7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2FC 05                         byte_BB7E:	dc.b 5
0000C2FD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C302 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C307 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C30C F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C311 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C316 01                         byte_BB98:	dc.b 1
0000C317 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C31C 02                         byte_BB9E:	dc.b 2
0000C31D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C322 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C327 04                         byte_BBA9:	dc.b 4
0000C328 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C32D F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C332 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C337 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C33C 06                         byte_BBBE:	dc.b 6
0000C33D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C342 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C347 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C34C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C351 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C356 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C35B 08                         byte_BBDD:	dc.b 8
0000C35C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C361 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C366 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C36B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C370 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C375 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C37A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C37F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C384 0A                         byte_BC06:	dc.b $A
0000C385 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C38A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C38F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C394 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C399 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C39E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C3A3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C3A8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C3AD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C3B2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C3B7 05                         byte_BC39:	dc.b 5
0000C3B8 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C3BD F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C3C2 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C3C7 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C3CC EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3D1 01                         byte_BC53:	dc.b 1
0000C3D2 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3D8 00                         		even
0000C3D8 00                         		even
0000C3D8                            
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8                            Map_obj45:
0000C3D8                            	include "_maps\obj45.asm"
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8 0000                       		dc.w byte_BC6C-Map_obj45
0000C3DA 0000                       		dc.w byte_BC7C-Map_obj45
0000C3DC 0000                       		dc.w byte_BC8C-Map_obj45
0000C3DE 0000                       		dc.w byte_BC92-Map_obj45
0000C3E0 0000                       		dc.w byte_BC9D-Map_obj45
0000C3E2 0000                       		dc.w byte_BCB2-Map_obj45
0000C3E4 0000                       		dc.w byte_BCD1-Map_obj45
0000C3E6 0000                       		dc.w byte_BCFA-Map_obj45
0000C3E8 0000                       		dc.w byte_BCFA-Map_obj45
0000C3EA 03                         byte_BC6C:	dc.b 3
0000C3EB E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3F0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3F5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3FA 03                         byte_BC7C:	dc.b 3
0000C3FB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C400 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C405 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C40A 01                         byte_BC8C:	dc.b 1
0000C40B F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C410 02                         byte_BC92:	dc.b 2
0000C411 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C416 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C41B 04                         byte_BC9D:	dc.b 4
0000C41C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C421 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C426 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C42B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C430 06                         byte_BCB2:	dc.b 6
0000C431 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C436 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C43B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C440 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C445 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C44A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C44F 08                         byte_BCD1:	dc.b 8
0000C450 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C455 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C45A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C45F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C464 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C469 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C46E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C473 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C478 08                         byte_BCFA:	dc.b 8
0000C479 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C47E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C483 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C488 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C48D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C492 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C497 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C49C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C4A1 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C4A6 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C4AC 00                         		even
0000C4AC 00                         		even
0000C4AC                            
0000C4AC                            ; ===========================================================================
0000C4AC                            ; ---------------------------------------------------------------------------
0000C4AC                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C4AC                            ; ---------------------------------------------------------------------------
0000C4AC                            
0000C4AC                            Obj32:					; XREF: Obj_Index
0000C4AC 7000                       		moveq	#0,d0
0000C4AE 1028 0024                  		move.b	$24(a0),d0
0000C4B2 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C4B6 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C4BA                            ; ===========================================================================
0000C4BA 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C4BC 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C4BE                            ; ===========================================================================
0000C4BE                            
0000C4BE                            Obj32_Main:				; XREF: Obj32_Index
0000C4BE 5428 0024                  		addq.b	#2,$24(a0)
0000C4C2 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C4CA 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4D0 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4D6 6700                       		beq.s	loc_BD60
0000C4D8 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4DE                            
0000C4DE                            loc_BD60:
0000C4DE 117C 0004 0001             		move.b	#4,1(a0)
0000C4E4 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4EA 117C 0004 0018             		move.b	#4,$18(a0)
0000C4F0 5668 000C                  		addq.w	#3,$C(a0)
0000C4F4                            
0000C4F4                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4F4 4A28 0001                  		tst.b	1(a0)
0000C4F8 6A00                       		bpl.s	Obj32_Display
0000C4FA 323C 001B                  		move.w	#$1B,d1
0000C4FE 343C 0005                  		move.w	#5,d2
0000C502 363C 0005                  		move.w	#5,d3
0000C506 3828 0008                  		move.w	8(a0),d4
0000C50A 6100 0000                  		bsr.w	SolidObject
0000C50E 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C514 1028 0028                  		move.b	$28(a0),d0
0000C518 0240 000F                  		andi.w	#$F,d0
0000C51C 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C520 47F3 0000                  		lea	(a3,d0.w),a3
0000C524 7600                       		moveq	#0,d3
0000C526 0828 0006 0028             		btst	#6,$28(a0)
0000C52C 6700                       		beq.s	loc_BDB2
0000C52E 7607                       		moveq	#7,d3
0000C530                            
0000C530                            loc_BDB2:
0000C530 4A28 0028                  		tst.b	$28(a0)
0000C534 6A00                       		bpl.s	loc_BDBE
0000C536 6100 0000                  		bsr.w	Obj32_MZBlock
0000C53A 6600                       		bne.s	loc_BDC8
0000C53C                            
0000C53C                            loc_BDBE:
0000C53C 4A28 0025                  		tst.b	$25(a0)
0000C540 6600                       		bne.s	loc_BDC8
0000C542 0793                       		bclr	d3,(a3)
0000C544 6000                       		bra.s	loc_BDDE
0000C546                            ; ===========================================================================
0000C546                            
0000C546                            loc_BDC8:
0000C546 4A13                       		tst.b	(a3)
0000C548 6600                       		bne.s	loc_BDD6
0000C54A 303C 00CD                  		move.w	#$CD,d0
0000C54E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play switch sound
0000C554                            
0000C554                            loc_BDD6:
0000C554 07D3                       		bset	d3,(a3)
0000C556 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C55C                            
0000C55C                            loc_BDDE:
0000C55C 0828 0005 0028             		btst	#5,$28(a0)
0000C562 6700                       		beq.s	Obj32_Display
0000C564 5328 001E                  		subq.b	#1,$1E(a0)
0000C568 6A00                       		bpl.s	Obj32_Display
0000C56A 117C 0007 001E             		move.b	#7,$1E(a0)
0000C570 0868 0001 001A             		bchg	#1,$1A(a0)
0000C576                            
0000C576                            Obj32_Display:
0000C576 6100 0000                  		bsr.w	DisplaySprite
0000C57A 3028 0008                  		move.w	8(a0),d0
0000C57E 0240 FF80                  		andi.w	#$FF80,d0
0000C582 3238 F700                  		move.w	($FFFFF700).w,d1
0000C586 0441 0080                  		subi.w	#$80,d1
0000C58A 0241 FF80                  		andi.w	#$FF80,d1
0000C58E 9041                       		sub.w	d1,d0
0000C590 0C40 0280                  		cmpi.w	#$280,d0
0000C594 6200 0000                  		bhi.w	Obj32_Delete
0000C598 4E75                       		rts	
0000C59A                            ; ===========================================================================
0000C59A                            
0000C59A                            Obj32_Delete:
0000C59A 6100 0000                  		bsr.w	DeleteObject
0000C59E 4E75                       		rts	
0000C5A0                            
0000C5A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5A0                            
0000C5A0                            
0000C5A0                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C5A0 3F03                       		move.w	d3,-(sp)
0000C5A2 3428 0008                  		move.w	8(a0),d2
0000C5A6 3628 000C                  		move.w	$C(a0),d3
0000C5AA 0442 0010                  		subi.w	#$10,d2
0000C5AE 5143                       		subq.w	#8,d3
0000C5B0 383C 0020                  		move.w	#$20,d4
0000C5B4 3A3C 0010                  		move.w	#$10,d5
0000C5B8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C5BC 3C3C 005F                  		move.w	#$5F,d6
0000C5C0                            
0000C5C0                            Obj32_MZLoop:
0000C5C0 4A29 0001                  		tst.b	1(a1)
0000C5C4 6A00                       		bpl.s	loc_BE4E
0000C5C6 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C5CA 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C5CC                            
0000C5CC                            loc_BE4E:
0000C5CC 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5D0 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5D4                            
0000C5D4 361F                       		move.w	(sp)+,d3
0000C5D6 7000                       		moveq	#0,d0
0000C5D8                            
0000C5D8                            locret_BE5A:
0000C5D8 4E75                       		rts	
0000C5DA                            ; ===========================================================================
0000C5DA 1010                       Obj32_MZData:	dc.b $10, $10
0000C5DC                            ; ===========================================================================
0000C5DC                            
0000C5DC                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5DC 7001                       		moveq	#1,d0
0000C5DE 0240 003F                  		andi.w	#$3F,d0
0000C5E2 D040                       		add.w	d0,d0
0000C5E4 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5E8 121A                       		move.b	(a2)+,d1
0000C5EA 4881                       		ext.w	d1
0000C5EC 3029 0008                  		move.w	8(a1),d0
0000C5F0 9041                       		sub.w	d1,d0
0000C5F2 9042                       		sub.w	d2,d0
0000C5F4 6400                       		bcc.s	loc_BE80
0000C5F6 D241                       		add.w	d1,d1
0000C5F8 D041                       		add.w	d1,d0
0000C5FA 6500                       		bcs.s	loc_BE84
0000C5FC 60CE                       		bra.s	loc_BE4E
0000C5FE                            ; ===========================================================================
0000C5FE                            
0000C5FE                            loc_BE80:
0000C5FE B044                       		cmp.w	d4,d0
0000C600 62CA                       		bhi.s	loc_BE4E
0000C602                            
0000C602                            loc_BE84:
0000C602 121A                       		move.b	(a2)+,d1
0000C604 4881                       		ext.w	d1
0000C606 3029 000C                  		move.w	$C(a1),d0
0000C60A 9041                       		sub.w	d1,d0
0000C60C 9043                       		sub.w	d3,d0
0000C60E 6400                       		bcc.s	loc_BE9A
0000C610 D241                       		add.w	d1,d1
0000C612 D041                       		add.w	d1,d0
0000C614 6500                       		bcs.s	loc_BE9E
0000C616 60B4                       		bra.s	loc_BE4E
0000C618                            ; ===========================================================================
0000C618                            
0000C618                            loc_BE9A:
0000C618 B045                       		cmp.w	d5,d0
0000C61A 62B0                       		bhi.s	loc_BE4E
0000C61C                            
0000C61C                            loc_BE9E:
0000C61C 361F                       		move.w	(sp)+,d3
0000C61E 7001                       		moveq	#1,d0
0000C620 4E75                       		rts	
0000C622                            ; End of function Obj32_MZBlock
0000C622                            
0000C622                            ; ===========================================================================
0000C622                            ; ---------------------------------------------------------------------------
0000C622                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C622                            ; ---------------------------------------------------------------------------
0000C622                            Map_obj32:
0000C622                            	include "_maps\obj32.asm"
0000C622                            ; ---------------------------------------------------------------------------
0000C622                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C622                            ; ---------------------------------------------------------------------------
0000C622 0000                       		dc.w byte_BEAC-Map_obj32
0000C624 0000                       		dc.w byte_BEB7-Map_obj32
0000C626 0000                       		dc.w byte_BEC2-Map_obj32
0000C628 0000                       		dc.w byte_BEB7-Map_obj32
0000C62A 02                         byte_BEAC:	dc.b 2
0000C62B F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C630 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C635 02                         byte_BEB7:	dc.b 2
0000C636 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C63B F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C640 02                         byte_BEC2:	dc.b 2
0000C641 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C646 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C64B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C650                            		even
0000C650                            		even
0000C650                            
0000C650                            ; ===========================================================================
0000C650                            ; ---------------------------------------------------------------------------
0000C650                            ; Object 33 - pushable blocks (MZ, LZ)
0000C650                            ; ---------------------------------------------------------------------------
0000C650                            
0000C650                            Obj33:					; XREF: Obj_Index
0000C650 7000                       		moveq	#0,d0
0000C652 1028 0024                  		move.b	$24(a0),d0
0000C656 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C65A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C65E                            ; ===========================================================================
0000C65E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C660 0000                       		dc.w loc_BF6E-Obj33_Index
0000C662 0000                       		dc.w loc_C02C-Obj33_Index
0000C664                            
0000C664 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C666 4001                       		dc.b $40, 1
0000C668                            ; ===========================================================================
0000C668                            
0000C668                            Obj33_Main:				; XREF: Obj33_Index
0000C668 5428 0024                  		addq.b	#2,$24(a0)
0000C66C 117C 000F 0016             		move.b	#$F,$16(a0)
0000C672 117C 000F 0017             		move.b	#$F,$17(a0)
0000C678 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C680 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C686 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C68C 6600                       		bne.s	loc_BF16
0000C68E 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C694                            
0000C694                            loc_BF16:
0000C694 117C 0004 0001             		move.b	#4,1(a0)
0000C69A 117C 0003 0018             		move.b	#3,$18(a0)
0000C6A0 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C6A6 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C6AC 7000                       		moveq	#0,d0
0000C6AE 1028 0028                  		move.b	$28(a0),d0
0000C6B2 D040                       		add.w	d0,d0
0000C6B4 0240 000E                  		andi.w	#$E,d0
0000C6B8 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C6BC 115A 0019                  		move.b	(a2)+,$19(a0)
0000C6C0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C6C4 4A28 0028                  		tst.b	$28(a0)
0000C6C8 6700                       		beq.s	Obj33_ChkGone
0000C6CA 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6D0                            
0000C6D0                            Obj33_ChkGone:
0000C6D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6D4 7000                       		moveq	#0,d0
0000C6D6 1028 0023                  		move.b	$23(a0),d0
0000C6DA 6700                       		beq.s	loc_BF6E
0000C6DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6E2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6E8 6600 0000                  		bne.w	DeleteObject
0000C6EC                            
0000C6EC                            loc_BF6E:				; XREF: Obj33_Index
0000C6EC 4A28 0032                  		tst.b	$32(a0)
0000C6F0 6600 0000                  		bne.w	loc_C046
0000C6F4 7200                       		moveq	#0,d1
0000C6F6 1228 0019                  		move.b	$19(a0),d1
0000C6FA 0641 000B                  		addi.w	#$B,d1
0000C6FE 343C 0010                  		move.w	#$10,d2
0000C702 363C 0011                  		move.w	#$11,d3
0000C706 3828 0008                  		move.w	8(a0),d4
0000C70A 6100 0000                  		bsr.w	loc_C186
0000C70E 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C714 6600                       		bne.s	loc_BFC6	; if not, branch
0000C716 08A8 0007 0028             		bclr	#7,$28(a0)
0000C71C 3028 0008                  		move.w	8(a0),d0
0000C720 0C40 0A20                  		cmpi.w	#$A20,d0
0000C724 6500                       		bcs.s	loc_BFC6
0000C726 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C72A 6400                       		bcc.s	loc_BFC6
0000C72C 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C730 0440 001C                  		subi.w	#$1C,d0
0000C734 3140 000C                  		move.w	d0,$C(a0)
0000C738 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C73E 08E8 0007 0028             		bset	#7,$28(a0)
0000C744                            
0000C744                            loc_BFC6:
0000C744 3028 0008                  		move.w	8(a0),d0
0000C748 0240 FF80                  		andi.w	#$FF80,d0
0000C74C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C750 0441 0080                  		subi.w	#$80,d1
0000C754 0241 FF80                  		andi.w	#$FF80,d1
0000C758 9041                       		sub.w	d1,d0
0000C75A 0C40 0280                  		cmpi.w	#$280,d0
0000C75E 6200                       		bhi.s	loc_BFE6
0000C760 6000 0000                  		bra.w	DisplaySprite
0000C764                            ; ===========================================================================
0000C764                            
0000C764                            loc_BFE6:
0000C764 3028 0034                  		move.w	$34(a0),d0
0000C768 0240 FF80                  		andi.w	#$FF80,d0
0000C76C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C770 0441 0080                  		subi.w	#$80,d1
0000C774 0241 FF80                  		andi.w	#$FF80,d1
0000C778 9041                       		sub.w	d1,d0
0000C77A 0C40 0280                  		cmpi.w	#$280,d0
0000C77E 6200                       		bhi.s	loc_C016
0000C780 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C786 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C78C 117C 0004 0024             		move.b	#4,$24(a0)
0000C792 6000                       		bra.s	loc_C02C
0000C794                            ; ===========================================================================
0000C794                            
0000C794                            loc_C016:
0000C794 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C798 7000                       		moveq	#0,d0
0000C79A 1028 0023                  		move.b	$23(a0),d0
0000C79E 6700                       		beq.s	loc_C028
0000C7A0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C7A6                            
0000C7A6                            loc_C028:
0000C7A6 6000 0000                  		bra.w	DeleteObject
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            loc_C02C:				; XREF: Obj33_Index
0000C7AA 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C7AE 6700                       		beq.s	locret_C044
0000C7B0 117C 0002 0024             		move.b	#2,$24(a0)
0000C7B6 4228 0032                  		clr.b	$32(a0)
0000C7BA 4268 0010                  		clr.w	$10(a0)
0000C7BE 4268 0012                  		clr.w	$12(a0)
0000C7C2                            
0000C7C2                            locret_C044:
0000C7C2 4E75                       		rts	
0000C7C4                            ; ===========================================================================
0000C7C4                            
0000C7C4                            loc_C046:				; XREF: loc_BF6E
0000C7C4 3F28 0008                  		move.w	8(a0),-(sp)
0000C7C8 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C7CE 6400                       		bcc.s	loc_C056
0000C7D0 6100 0000                  		bsr.w	SpeedToPos
0000C7D4                            
0000C7D4                            loc_C056:
0000C7D4 0828 0001 0022             		btst	#1,$22(a0)
0000C7DA 6700                       		beq.s	loc_C0A0
0000C7DC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7E2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7E8 4A41                       		tst.w	d1
0000C7EA 6A00 0000                  		bpl.w	loc_C09E
0000C7EE D368 000C                  		add.w	d1,$C(a0)
0000C7F2 4268 0012                  		clr.w	$12(a0)
0000C7F6 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7FC 3011                       		move.w	(a1),d0
0000C7FE 0240 03FF                  		andi.w	#$3FF,d0
0000C802 0C40 016A                  		cmpi.w	#$16A,d0
0000C806 6500                       		bcs.s	loc_C09E
0000C808 3028 0030                  		move.w	$30(a0),d0
0000C80C E640                       		asr.w	#3,d0
0000C80E 3140 0010                  		move.w	d0,$10(a0)
0000C812 117C 0001 0032             		move.b	#1,$32(a0)
0000C818 4268 000E                  		clr.w	$E(a0)
0000C81C                            
0000C81C                            loc_C09E:
0000C81C 6000                       		bra.s	loc_C0E6
0000C81E                            ; ===========================================================================
0000C81E                            
0000C81E                            loc_C0A0:
0000C81E 4A68 0010                  		tst.w	$10(a0)
0000C822 6700 0000                  		beq.w	loc_C0D6
0000C826 6B00                       		bmi.s	loc_C0BC
0000C828 7600                       		moveq	#0,d3
0000C82A 1628 0019                  		move.b	$19(a0),d3
0000C82E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C834 4A41                       		tst.w	d1		; has block touched a wall?
0000C836 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C838 6000                       		bra.s	loc_C0E6
0000C83A                            ; ===========================================================================
0000C83A                            
0000C83A                            loc_C0BC:
0000C83A 7600                       		moveq	#0,d3
0000C83C 1628 0019                  		move.b	$19(a0),d3
0000C840 4643                       		not.w	d3
0000C842 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C848 4A41                       		tst.w	d1		; has block touched a wall?
0000C84A 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C84C 6000                       		bra.s	loc_C0E6
0000C84E                            ; ===========================================================================
0000C84E                            
0000C84E                            Obj33_StopPush:
0000C84E 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C852 6000                       		bra.s	loc_C0E6
0000C854                            ; ===========================================================================
0000C854                            
0000C854                            loc_C0D6:
0000C854 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C85C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C862 6400                       		bcc.s	loc_C104
0000C864                            
0000C864                            loc_C0E6:
0000C864 7200                       		moveq	#0,d1
0000C866 1228 0019                  		move.b	$19(a0),d1
0000C86A 0641 000B                  		addi.w	#$B,d1
0000C86E 343C 0010                  		move.w	#$10,d2
0000C872 363C 0011                  		move.w	#$11,d3
0000C876 381F                       		move.w	(sp)+,d4
0000C878 6100 0000                  		bsr.w	loc_C186
0000C87C 6100                       		bsr.s	Obj33_ChkLava
0000C87E 6000 FEC4                  		bra.w	loc_BFC6
0000C882                            ; ===========================================================================
0000C882                            
0000C882                            loc_C104:
0000C882 381F                       		move.w	(sp)+,d4
0000C884 43F8 D000                  		lea	($FFFFD000).w,a1
0000C888 08A9 0003 0022             		bclr	#3,$22(a1)
0000C88E 08A8 0003 0022             		bclr	#3,$22(a0)
0000C894 6000 FECE                  		bra.w	loc_BFE6
0000C898                            ; ===========================================================================
0000C898                            
0000C898                            Obj33_ChkLava:
0000C898 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C89E 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C8A0 343C FFE0                  		move.w	#-$20,d2
0000C8A4 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C8AA 6700                       		beq.s	Obj33_LoadLava
0000C8AC 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C8B2 6700                       		beq.s	Obj33_LoadLava
0000C8B4 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C8BA 6700                       		beq.s	Obj33_LoadLava
0000C8BC 4E75                       		rts	
0000C8BE                            ; ===========================================================================
0000C8BE                            
0000C8BE                            Obj33_ChkLava2:
0000C8BE 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C8C4 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C8C6 343C 0020                  		move.w	#$20,d2
0000C8CA 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8D0 6700                       		beq.s	Obj33_LoadLava
0000C8D2 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8D8 6700                       		beq.s	Obj33_LoadLava
0000C8DA                            
0000C8DA                            Obj33_NoLava:
0000C8DA 4E75                       		rts	
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            Obj33_LoadLava:
0000C8DC 6100 0000                  		bsr.w	SingleObjLoad
0000C8E0 6600                       		bne.s	locret_C184
0000C8E2 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8EC D569 0008                  		add.w	d2,8(a1)
0000C8F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8F6 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8FC 2348 003C                  		move.l	a0,$3C(a1)
0000C900                            
0000C900                            locret_C184:
0000C900 4E75                       		rts	
0000C902                            ; ===========================================================================
0000C902                            
0000C902                            loc_C186:				; XREF: loc_BF6E
0000C902 1028 0025                  		move.b	$25(a0),d0
0000C906 6700 0000                  		beq.w	loc_C218
0000C90A 5500                       		subq.b	#2,d0
0000C90C 6600                       		bne.s	loc_C1AA
0000C90E 6100 B312                  		bsr.w	ExitPlatform
0000C912 0829 0003 0022             		btst	#3,$22(a1)
0000C918 6600                       		bne.s	loc_C1A4
0000C91A 4228 0025                  		clr.b	$25(a0)
0000C91E 4E75                       		rts	
0000C920                            ; ===========================================================================
0000C920                            
0000C920                            loc_C1A4:
0000C920 3404                       		move.w	d4,d2
0000C922 6000 B85C                  		bra.w	MvSonicOnPtfm
0000C926                            ; ===========================================================================
0000C926                            
0000C926                            loc_C1AA:
0000C926 5500                       		subq.b	#2,d0
0000C928 6600                       		bne.s	loc_C1F2
0000C92A 6100 0000                  		bsr.w	SpeedToPos
0000C92E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C934 4EB9 0000 0000             		jsr	ObjHitFloor
0000C93A 4A41                       		tst.w	d1
0000C93C 6A00 0000                  		bpl.w	locret_C1F0
0000C940 D368 000C                  		add.w	d1,$C(a0)
0000C944 4268 0012                  		clr.w	$12(a0)
0000C948 4228 0025                  		clr.b	$25(a0)
0000C94C 3011                       		move.w	(a1),d0
0000C94E 0240 03FF                  		andi.w	#$3FF,d0
0000C952 0C40 016A                  		cmpi.w	#$16A,d0
0000C956 6500                       		bcs.s	locret_C1F0
0000C958 3028 0030                  		move.w	$30(a0),d0
0000C95C E640                       		asr.w	#3,d0
0000C95E 3140 0010                  		move.w	d0,$10(a0)
0000C962 117C 0001 0032             		move.b	#1,$32(a0)
0000C968 4268 000E                  		clr.w	$E(a0)
0000C96C                            
0000C96C                            locret_C1F0:
0000C96C 4E75                       		rts	
0000C96E                            ; ===========================================================================
0000C96E                            
0000C96E                            loc_C1F2:
0000C96E 6100 0000                  		bsr.w	SpeedToPos
0000C972 3028 0008                  		move.w	8(a0),d0
0000C976 0240 000C                  		andi.w	#$C,d0
0000C97A 6600 0000                  		bne.w	locret_C2E4
0000C97E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C984 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C98A 4268 0010                  		clr.w	$10(a0)
0000C98E 5528 0025                  		subq.b	#2,$25(a0)
0000C992 4E75                       		rts	
0000C994                            ; ===========================================================================
0000C994                            
0000C994                            loc_C218:
0000C994 6100 0000                  		bsr.w	loc_FAC8
0000C998 4A44                       		tst.w	d4
0000C99A 6700 0000                  		beq.w	locret_C2E4
0000C99E 6B00 0000                  		bmi.w	locret_C2E4
0000C9A2 4A28 0032                  		tst.b	$32(a0)
0000C9A6 6700                       		beq.s	loc_C230
0000C9A8 6000 0000                  		bra.w	locret_C2E4
0000C9AC                            ; ===========================================================================
0000C9AC                            
0000C9AC                            loc_C230:
0000C9AC 4A40                       		tst.w	d0
0000C9AE 6700 0000                  		beq.w	locret_C2E4
0000C9B2 6B00                       		bmi.s	loc_C268
0000C9B4 0829 0000 0022             		btst	#0,$22(a1)
0000C9BA 6600 0000                  		bne.w	locret_C2E4
0000C9BE 3F00                       		move.w	d0,-(sp)
0000C9C0 7600                       		moveq	#0,d3
0000C9C2 1628 0019                  		move.b	$19(a0),d3
0000C9C6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9CC 301F                       		move.w	(sp)+,d0
0000C9CE 4A41                       		tst.w	d1
0000C9D0 6B00 0000                  		bmi.w	locret_C2E4
0000C9D4 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9DC 7001                       		moveq	#1,d0
0000C9DE 323C 0040                  		move.w	#$40,d1
0000C9E2 6000                       		bra.s	loc_C294
0000C9E4                            ; ===========================================================================
0000C9E4                            
0000C9E4                            loc_C268:
0000C9E4 0829 0000 0022             		btst	#0,$22(a1)
0000C9EA 6700                       		beq.s	locret_C2E4
0000C9EC 3F00                       		move.w	d0,-(sp)
0000C9EE 7600                       		moveq	#0,d3
0000C9F0 1628 0019                  		move.b	$19(a0),d3
0000C9F4 4643                       		not.w	d3
0000C9F6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9FC 301F                       		move.w	(sp)+,d0
0000C9FE 4A41                       		tst.w	d1
0000CA00 6B00                       		bmi.s	locret_C2E4
0000CA02 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CA0A 70FF                       		moveq	#-1,d0
0000CA0C 323C FFC0                  		move.w	#-$40,d1
0000CA10                            
0000CA10                            loc_C294:
0000CA10 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA14 D169 0008                  		add.w	d0,8(a1)
0000CA18 3341 0014                  		move.w	d1,$14(a1)
0000CA1C 337C 0000 0010             		move.w	#0,$10(a1)
0000CA22 3F00                       		move.w	d0,-(sp)
0000CA24 303C 00A7                  		move.w	#$A7,d0
0000CA28 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA2E 301F                       		move.w	(sp)+,d0
0000CA30 4A28 0028                  		tst.b	$28(a0)
0000CA34 6B00                       		bmi.s	locret_C2E4
0000CA36 3F00                       		move.w	d0,-(sp)
0000CA38 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA3E 301F                       		move.w	(sp)+,d0
0000CA40 0C41 0004                  		cmpi.w	#4,d1
0000CA44 6F00                       		ble.s	loc_C2E0
0000CA46 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA4C 4A40                       		tst.w	d0
0000CA4E 6A00                       		bpl.s	loc_C2D8
0000CA50 4468 0010                  		neg.w	$10(a0)
0000CA54                            
0000CA54                            loc_C2D8:
0000CA54 117C 0006 0025             		move.b	#6,$25(a0)
0000CA5A 6000                       		bra.s	locret_C2E4
0000CA5C                            ; ===========================================================================
0000CA5C                            
0000CA5C                            loc_C2E0:
0000CA5C D368 000C                  		add.w	d1,$C(a0)
0000CA60                            
0000CA60                            locret_C2E4:
0000CA60 4E75                       		rts	
0000CA62                            ; ===========================================================================
0000CA62                            ; ---------------------------------------------------------------------------
0000CA62                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA62                            ; ---------------------------------------------------------------------------
0000CA62                            Map_obj33:
0000CA62                            	include "_maps\obj33.asm"
0000CA62                            ; ---------------------------------------------------------------------------
0000CA62                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA62                            ; ---------------------------------------------------------------------------
0000CA62 0000                       		dc.w byte_C2EA-Map_obj33
0000CA64 0000                       		dc.w byte_C2F0-Map_obj33
0000CA66 01                         byte_C2EA:	dc.b 1
0000CA67 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA6C 04                         byte_C2F0:	dc.b 4
0000CA6D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA72 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA77 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA7C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA82 00                         		even
0000CA82 00                         		even
0000CA82                            
0000CA82                            ; ===========================================================================
0000CA82                            ; ---------------------------------------------------------------------------
0000CA82                            ; Object 34 - zone title cards
0000CA82                            ; ---------------------------------------------------------------------------
0000CA82                            Obj34:					; XREF: Obj_Index
0000CA82 7000                       		moveq	#0,d0
0000CA84 1028 0024                  		move.b	$24(a0),d0
0000CA88 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA8C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA90                            ; ===========================================================================
0000CA90 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA92 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA94 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA96 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA98                            ; ===========================================================================
0000CA98                            
0000CA98                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA98 2248                       		movea.l	a0,a1
0000CA9A 7000                       		moveq	#0,d0
0000CA9C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CAA0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CAA6 6600                       		bne.s	Obj34_CheckFZ
0000CAA8 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CAAA                            
0000CAAA                            Obj34_CheckFZ:
0000CAAA 3400                       		move.w	d0,d2
0000CAAC 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CAB2 6600                       		bne.s	Obj34_LoadConfig
0000CAB4 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CAB6 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CAB8                            
0000CAB8                            Obj34_LoadConfig:
0000CAB8 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CABE E948                       		lsl.w	#4,d0
0000CAC0 D6C0                       		adda.w	d0,a3
0000CAC2 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CAC8 7203                       		moveq	#3,d1
0000CACA                            
0000CACA                            Obj34_Loop:
0000CACA 12BC 0034                  		move.b	#$34,0(a1)
0000CACE 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CAD2 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CAD6 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CADA 335A 000A                  		move.w	(a2)+,$A(a1)
0000CADE 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAE2 101A                       		move.b	(a2)+,d0
0000CAE4 6600                       		bne.s	Obj34_ActNumber
0000CAE6 1002                       		move.b	d2,d0
0000CAE8                            
0000CAE8                            Obj34_ActNumber:
0000CAE8 0C00 0007                  		cmpi.b	#7,d0
0000CAEC 6600                       		bne.s	Obj34_MakeSprite
0000CAEE D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CAF2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CAF8 6600                       		bne.s	Obj34_MakeSprite
0000CAFA 5300                       		subq.b	#1,d0
0000CAFC                            
0000CAFC                            Obj34_MakeSprite:
0000CAFC 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CB00 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CB08 337C 8580 0002             		move.w	#$8580,2(a1)
0000CB0E 137C 0078 0019             		move.b	#$78,$19(a1)
0000CB14 137C 0000 0001             		move.b	#0,1(a1)
0000CB1A 137C 0000 0018             		move.b	#0,$18(a1)
0000CB20 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CB26 43E9 0040                  		lea	$40(a1),a1	; next object
0000CB2A 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB2E                            
0000CB2E                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB2E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB30 3028 0030                  		move.w	$30(a0),d0
0000CB34 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB38 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB3A 6C00                       		bge.s	Obj34_Move
0000CB3C 4441                       		neg.w	d1
0000CB3E                            
0000CB3E                            Obj34_Move:
0000CB3E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB42                            
0000CB42                            loc_C3C8:
0000CB42 3028 0008                  		move.w	8(a0),d0
0000CB46 6B00                       		bmi.s	locret_C3D8
0000CB48 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB4C 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB4E 6000 0000                  		bra.w	DisplaySprite
0000CB52                            ; ===========================================================================
0000CB52                            
0000CB52                            locret_C3D8:
0000CB52 4E75                       		rts	
0000CB54                            ; ===========================================================================
0000CB54                            
0000CB54                            Obj34_Wait:				; XREF: Obj34_Index
0000CB54 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB58 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB5A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB5E 6000 0000                  		bra.w	DisplaySprite
0000CB62                            ; ===========================================================================
0000CB62                            
0000CB62                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB62 4A28 0001                  		tst.b	1(a0)
0000CB66 6A00                       		bpl.s	Obj34_ChangeArt
0000CB68 7220                       		moveq	#$20,d1
0000CB6A 3028 0032                  		move.w	$32(a0),d0
0000CB6E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB72 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB74 6C00                       		bge.s	Obj34_Move2
0000CB76 4441                       		neg.w	d1
0000CB78                            
0000CB78                            Obj34_Move2:
0000CB78 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB7C 3028 0008                  		move.w	8(a0),d0
0000CB80 6B00                       		bmi.s	locret_C412
0000CB82 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB86 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB88 6000 0000                  		bra.w	DisplaySprite
0000CB8C                            ; ===========================================================================
0000CB8C                            
0000CB8C                            locret_C412:
0000CB8C 4E75                       		rts	
0000CB8E                            ; ===========================================================================
0000CB8E                            
0000CB8E                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB8E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB94 6600                       		bne.s	Obj34_Delete
0000CB96 7002                       		moveq	#2,d0
0000CB98 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CB9E 7000                       		moveq	#0,d0
0000CBA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBA4 0640 0015                  		addi.w	#$15,d0
0000CBA8 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns
0000CBAE                            
0000CBAE                            Obj34_Delete:
0000CBAE 6000 0000                  		bra.w	DeleteObject
0000CBB2                            ; ===========================================================================
0000CBB2 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CBB4 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CBB6 00E4                       		dc.w $E4
0000CBB8 0206                       		dc.b 2,	6
0000CBBA 00EA                       		dc.w $EA
0000CBBC 0207                       		dc.b 2,	7
0000CBBE 00E0                       		dc.w $E0
0000CBC0 020A                       		dc.b 2,	$A
0000CBC2                            ; ---------------------------------------------------------------------------
0000CBC2                            ; Title	card configuration data
0000CBC2                            ; Format:
0000CBC2                            ; 4 bytes per item (YYYY XXXX)
0000CBC2                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CBC2                            ; ---------------------------------------------------------------------------
0000CBC2 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBD2 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBE2 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBF2 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CC02 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CC12 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CC22 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC32                            ; ===========================================================================
0000CC32                            ; ---------------------------------------------------------------------------
0000CC32                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC32                            ; ---------------------------------------------------------------------------
0000CC32                            
0000CC32                            Obj39:					; XREF: Obj_Index
0000CC32 7000                       		moveq	#0,d0
0000CC34 1028 0024                  		move.b	$24(a0),d0
0000CC38 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC3C 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC40                            ; ===========================================================================
0000CC40 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC42 0000                       		dc.w loc_C50C-Obj39_Index
0000CC44 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC46                            ; ===========================================================================
0000CC46                            
0000CC46                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC46 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC4A 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC4C 4E75                       		rts	
0000CC4E                            ; ===========================================================================
0000CC4E                            
0000CC4E                            Obj39_Main:
0000CC4E 5428 0024                  		addq.b	#2,$24(a0)
0000CC52 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC58 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC5E 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC60 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC66                            
0000CC66                            loc_C4EC:
0000CC66 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC6C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC74 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC7A 117C 0000 0001             		move.b	#0,1(a0)
0000CC80 117C 0000 0018             		move.b	#0,$18(a0)
0000CC86                            
0000CC86                            loc_C50C:				; XREF: Obj39_Index
0000CC86 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC88 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC8E 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC90 6500                       		bcs.s	Obj39_Move
0000CC92 4441                       		neg.w	d1
0000CC94                            
0000CC94                            Obj39_Move:
0000CC94 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC98 6000 0000                  		bra.w	DisplaySprite
0000CC9C                            ; ===========================================================================
0000CC9C                            
0000CC9C                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC9C 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CCA2 5428 0024                  		addq.b	#2,$24(a0)
0000CCA6 4E75                       		rts	
0000CCA8                            ; ===========================================================================
0000CCA8                            
0000CCA8                            Obj39_Wait:				; XREF: Obj39_Index
0000CCA8 1038 F605                  		move.b	($FFFFF605).w,d0
0000CCAC 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CCB0 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CCB2 0828 0000 001A             		btst	#0,$1A(a0)
0000CCB8 6600                       		bne.s	Obj39_Display
0000CCBA 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CCBE 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CCC0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCC4 6000 0000                  		bra.w	DisplaySprite
0000CCC8                            ; ===========================================================================
0000CCC8                            
0000CCC8                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCC8 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCCC 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCCE 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCD4 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCD8 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCE0 6000                       		bra.s	Obj39_Display
0000CCE2                            ; ===========================================================================
0000CCE2                            
0000CCE2                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCE2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCE8                            
0000CCE8                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCE8 6000 0000                  		bra.w	DisplaySprite
0000CCEC                            ; ===========================================================================
0000CCEC                            ; ---------------------------------------------------------------------------
0000CCEC                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCEC                            ; ---------------------------------------------------------------------------
0000CCEC                            
0000CCEC                            Obj3A:					; XREF: Obj_Index
0000CCEC 7000                       		moveq	#0,d0
0000CCEE 1028 0024                  		move.b	$24(a0),d0
0000CCF2 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCF6 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCFA                            ; ===========================================================================
0000CCFA 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCFC 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCFE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD00 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CD02 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD04 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CD06 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CD08 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CD0A 0000                       		dc.w loc_C766-Obj3A_Index
0000CD0C                            ; ===========================================================================
0000CD0C                            
0000CD0C                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CD0C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD10 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CD12 4E75                       		rts	
0000CD14                            ; ===========================================================================
0000CD14                            
0000CD14                            Obj3A_Main:
0000CD14 2248                       		movea.l	a0,a1
0000CD16 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CD1C 7206                       		moveq	#6,d1
0000CD1E                            
0000CD1E                            Obj3A_Loop:
0000CD1E 12BC 003A                  		move.b	#$3A,0(a1)
0000CD22 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD26 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD2A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD2E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD32 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD36 101A                       		move.b	(a2)+,d0
0000CD38 0C00 0006                  		cmpi.b	#6,d0
0000CD3C 6600                       		bne.s	loc_C5CA
0000CD3E D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD42                            
0000CD42                            loc_C5CA:
0000CD42 1340 001A                  		move.b	d0,$1A(a1)
0000CD46 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD4E 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD54 137C 0000 0001             		move.b	#0,1(a1)
0000CD5A 43E9 0040                  		lea	$40(a1),a1
0000CD5E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD62                            
0000CD62                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD62 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD64 3028 0030                  		move.w	$30(a0),d0
0000CD68 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD6C 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD6E 6C00                       		bge.s	Obj3A_Move
0000CD70 4441                       		neg.w	d1
0000CD72                            
0000CD72                            Obj3A_Move:
0000CD72 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD76                            
0000CD76                            loc_C5FE:				; XREF: loc_C61A
0000CD76 3028 0008                  		move.w	8(a0),d0
0000CD7A 6B00                       		bmi.s	locret_C60E
0000CD7C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD80 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD82 6000 0000                  		bra.w	DisplaySprite
0000CD86                            ; ===========================================================================
0000CD86                            
0000CD86                            locret_C60E:
0000CD86 4E75                       		rts	
0000CD88                            ; ===========================================================================
0000CD88                            
0000CD88                            loc_C610:				; XREF: loc_C61A
0000CD88 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD8E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD92                            ; ===========================================================================
0000CD92                            
0000CD92                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD92 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD98 67EE                       		beq.s	loc_C610
0000CD9A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CDA0 66D4                       		bne.s	loc_C5FE
0000CDA2 5428 0024                  		addq.b	#2,$24(a0)
0000CDA6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDAC                            
0000CDAC                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CDAC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDB0 6600                       		bne.s	Obj3A_Display
0000CDB2 5428 0024                  		addq.b	#2,$24(a0)
0000CDB6                            
0000CDB6                            Obj3A_Display:
0000CDB6 6000 0000                  		bra.w	DisplaySprite
0000CDBA                            ; ===========================================================================
0000CDBA                            
0000CDBA                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CDBA 6100 0000                  		bsr.w	DisplaySprite
0000CDBE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CDC4 7000                       		moveq	#0,d0
0000CDC6 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDCA 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDCC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDD0 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDD6                            
0000CDD6                            Obj3A_RingBonus:
0000CDD6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDDA 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDDC 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDE0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDE6                            
0000CDE6                            Obj3A_ChkBonus:
0000CDE6 4A40                       		tst.w	d0		; is there any bonus?
0000CDE8 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDEA 303C 00C5                  		move.w	#$C5,d0
0000CDEE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDF4 5428 0024                  		addq.b	#2,$24(a0)
0000CDF8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDFE 6600                       		bne.s	Obj3A_SetDelay
0000CE00 5828 0024                  		addq.b	#4,$24(a0)
0000CE04                            
0000CE04                            Obj3A_SetDelay:
0000CE04 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE0A                            
0000CE0A                            locret_C692:
0000CE0A 4E75                       		rts	
0000CE0C                            ; ===========================================================================
0000CE0C                            
0000CE0C                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CE0C 4EB9 0000 0000             		jsr	AddPoints
0000CE12 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE16 0200 0003                  		andi.b	#3,d0
0000CE1A 66EE                       		bne.s	locret_C692
0000CE1C 303C 00CD                  		move.w	#$CD,d0
0000CE20 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE26                            ; ===========================================================================
0000CE26                            
0000CE26                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE26 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE2A 0240 0007                  		andi.w	#7,d0
0000CE2E E748                       		lsl.w	#3,d0
0000CE30 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE34 0241 0003                  		andi.w	#3,d1
0000CE38 D241                       		add.w	d1,d1
0000CE3A D041                       		add.w	d1,d0
0000CE3C 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE40 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE44 4A40                       		tst.w	d0
0000CE46 6600                       		bne.s	Obj3A_ChkSS
0000CE48 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE4E 6000                       		bra.s	Obj3A_Display2
0000CE50                            ; ===========================================================================
0000CE50                            
0000CE50                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE50 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE54 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE58 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE5A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE60 6000                       		bra.s	Obj3A_Display2
0000CE62                            ; ===========================================================================
0000CE62                            
0000CE62                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE62 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE68                            
0000CE68                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE68 6000 0000                  		bra.w	DisplaySprite
0000CE6C                            ; ===========================================================================
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C                            ; Level	order array
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE9C                            		even
0000CE9C                            ; ===========================================================================
0000CE9C                            
0000CE9C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE9C 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE9E 3028 0032                  		move.w	$32(a0),d0
0000CEA2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CEA6 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CEA8 6C00                       		bge.s	Obj3A_Move2
0000CEAA 4441                       		neg.w	d1
0000CEAC                            
0000CEAC                            Obj3A_Move2:
0000CEAC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEB0 3028 0008                  		move.w	8(a0),d0
0000CEB4 6B00                       		bmi.s	locret_C748
0000CEB6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEBA 6400                       		bcc.s	locret_C748	; if yes, branch
0000CEBC 6000 0000                  		bra.w	DisplaySprite
0000CEC0                            ; ===========================================================================
0000CEC0                            
0000CEC0                            locret_C748:
0000CEC0 4E75                       		rts	
0000CEC2                            ; ===========================================================================
0000CEC2                            
0000CEC2                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CEC2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEC8 6600 0000                  		bne.w	DeleteObject
0000CECC 5428 0024                  		addq.b	#2,$24(a0)
0000CED0 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CED4 303C 008D                  		move.w	#$8D,d0
0000CED8 4EF9 0000 15CC             		jmp	(PlaySound).l	; play FZ music
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            loc_C766:				; XREF: Obj3A_Index
0000CEDE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CEE2 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CEE8 6700 0000                  		beq.w	DeleteObject
0000CEEC 4E75                       		rts	
0000CEEE                            ; ===========================================================================
0000CEEE 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CEF4 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CEF6 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CEFC 0201                       		dc.b 2,	1
0000CEFE 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CF04 0206                       		dc.b 2,	6
0000CF06 0520 0120 00EC             		dc.w $520, $120, $EC
0000CF0C 0202                       		dc.b 2,	2
0000CF0E 0540 0120 00FC             		dc.w $540, $120, $FC
0000CF14 0203                       		dc.b 2,	3
0000CF16 0560 0120 010C             		dc.w $560, $120, $10C
0000CF1C 0204                       		dc.b 2,	4
0000CF1E 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CF24 0205                       		dc.b 2,	5
0000CF26                            ; ===========================================================================
0000CF26                            ; ---------------------------------------------------------------------------
0000CF26                            ; Object 7E - special stage results screen
0000CF26                            ; ---------------------------------------------------------------------------
0000CF26                            
0000CF26                            Obj7E:					; XREF: Obj_Index
0000CF26 7000                       		moveq	#0,d0
0000CF28 1028 0024                  		move.b	$24(a0),d0
0000CF2C 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF30 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF34                            ; ===========================================================================
0000CF34 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF36 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF38 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF3A 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF3C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF3E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF40 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF42 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF44 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF46 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF48 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF4A                            ; ===========================================================================
0000CF4A                            
0000CF4A                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF4A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF4E 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF50 4E75                       		rts	
0000CF52                            ; ===========================================================================
0000CF52                            
0000CF52                            Obj7E_Main:
0000CF52 2248                       		movea.l	a0,a1
0000CF54 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF5A 7203                       		moveq	#3,d1
0000CF5C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF62 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF64 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF66                            
0000CF66                            Obj7E_Loop:
0000CF66 12BC 007E                  		move.b	#$7E,0(a1)
0000CF6A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF6E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF72 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF76 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF7A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF7E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF86 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF8C 137C 0000 0001             		move.b	#0,1(a1)
0000CF92 43E9 0040                  		lea	$40(a1),a1
0000CF96 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF9A                            
0000CF9A 7007                       		moveq	#7,d0
0000CF9C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CFA0 6700                       		beq.s	loc_C842
0000CFA2 7000                       		moveq	#0,d0
0000CFA4 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CFA8 6600                       		bne.s	loc_C842	; if not, branch
0000CFAA 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CFAC 317C 0018 0008             		move.w	#$18,8(a0)
0000CFB2 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CFB8                            
0000CFB8                            loc_C842:
0000CFB8 1140 001A                  		move.b	d0,$1A(a0)
0000CFBC                            
0000CFBC                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CFBC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFBE 3028 0030                  		move.w	$30(a0),d0
0000CFC2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFC6 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFC8 6C00                       		bge.s	Obj7E_Move
0000CFCA 4441                       		neg.w	d1
0000CFCC                            
0000CFCC                            Obj7E_Move:
0000CFCC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFD0                            
0000CFD0                            loc_C85A:				; XREF: loc_C86C
0000CFD0 3028 0008                  		move.w	8(a0),d0
0000CFD4 6B00                       		bmi.s	locret_C86A
0000CFD6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFDA 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFDC 6000 0000                  		bra.w	DisplaySprite
0000CFE0                            ; ===========================================================================
0000CFE0                            
0000CFE0                            locret_C86A:
0000CFE0 4E75                       		rts	
0000CFE2                            ; ===========================================================================
0000CFE2                            
0000CFE2                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFE2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFE8 66E6                       		bne.s	loc_C85A
0000CFEA 5428 0024                  		addq.b	#2,$24(a0)
0000CFEE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFF4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFFA                            
0000CFFA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFFA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFFE 6600                       		bne.s	Obj7E_Display
0000D000 5428 0024                  		addq.b	#2,$24(a0)
0000D004                            
0000D004                            Obj7E_Display:
0000D004 6000 0000                  		bra.w	DisplaySprite
0000D008                            ; ===========================================================================
0000D008                            
0000D008                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D008 6100 0000                  		bsr.w	DisplaySprite
0000D00C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D012 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D016 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D018 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D01E 700A                       		moveq	#10,d0		; add 10 to score
0000D020 4EB9 0000 0000             		jsr	AddPoints
0000D026 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D02A 0200 0003                  		andi.b	#3,d0
0000D02E 6600                       		bne.s	locret_C8EA
0000D030 303C 00CD                  		move.w	#$CD,d0
0000D034 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D03A                            ; ===========================================================================
0000D03A                            
0000D03A                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D03A 303C 00C5                  		move.w	#$C5,d0
0000D03E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D044 5428 0024                  		addq.b	#2,$24(a0)
0000D048 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D04E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D054 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D056 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D05C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D060                            
0000D060                            locret_C8EA:
0000D060 4E75                       		rts	
0000D062                            ; ===========================================================================
0000D062                            
0000D062                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D062 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D068 6000 0000                  		bra.w	DisplaySprite
0000D06C                            ; ===========================================================================
0000D06C                            
0000D06C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D06C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D072 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D078 303C 00BF                  		move.w	#$BF,d0
0000D07C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play continues music
0000D082 5428 0024                  		addq.b	#2,$24(a0)
0000D086 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D08C 6000 0000                  		bra.w	DisplaySprite
0000D090                            ; ===========================================================================
0000D090                            
0000D090                            loc_C91A:				; XREF: Obj7E_Index
0000D090 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D094 0200 000F                  		andi.b	#$F,d0
0000D098 6600                       		bne.s	Obj7E_Display2
0000D09A 0868 0000 001A             		bchg	#0,$1A(a0)
0000D0A0                            
0000D0A0                            Obj7E_Display2:
0000D0A0 6000 0000                  		bra.w	DisplaySprite
0000D0A4                            ; ===========================================================================
0000D0A4 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D0AA 0200                       		dc.b 2,	0		; rountine number, frame number
0000D0AC 0320 0120 0118             		dc.w $320, $120, $118
0000D0B2 0201                       		dc.b 2,	1
0000D0B4 0360 0120 0128             		dc.w $360, $120, $128
0000D0BA 0202                       		dc.b 2,	2
0000D0BC 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D0C2 0203                       		dc.b 2,	3
0000D0C4 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0CA 0206                       		dc.b 2,	6
0000D0CC                            ; ===========================================================================
0000D0CC                            ; ---------------------------------------------------------------------------
0000D0CC                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0CC                            ; ---------------------------------------------------------------------------
0000D0CC                            
0000D0CC                            Obj7F:					; XREF: Obj_Index
0000D0CC 7000                       		moveq	#0,d0
0000D0CE 1028 0024                  		move.b	$24(a0),d0
0000D0D2 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0D6 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0DA                            ; ===========================================================================
0000D0DA 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0DC 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0DE                            
0000D0DE                            ; ---------------------------------------------------------------------------
0000D0DE                            ; X-axis positions for chaos emeralds
0000D0DE                            ; ---------------------------------------------------------------------------
0000D0DE 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0EA                            ; ===========================================================================
0000D0EA                            
0000D0EA                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0EA 2248                       		movea.l	a0,a1
0000D0EC 45F9 0000 D0DE             		lea	(Obj7F_PosData).l,a2
0000D0F2 7400                       		moveq	#0,d2
0000D0F4 7200                       		moveq	#0,d1
0000D0F6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0FA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0FC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D100                            
0000D100                            Obj7F_Loop:
0000D100 12BC 007F                  		move.b	#$7F,0(a1)
0000D104 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D108 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D10E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D112 1633 2000                  		move.b	(a3,d2.w),d3
0000D116 1343 001A                  		move.b	d3,$1A(a1)
0000D11A 1343 001C                  		move.b	d3,$1C(a1)
0000D11E 5202                       		addq.b	#1,d2
0000D120 5429 0024                  		addq.b	#2,$24(a1)
0000D124 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D12C 337C 8541 0002             		move.w	#$8541,2(a1)
0000D132 137C 0000 0001             		move.b	#0,1(a1)
0000D138 43E9 0040                  		lea	$40(a1),a1	; next object
0000D13C 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D140                            
0000D140                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D140 1028 001A                  		move.b	$1A(a0),d0
0000D144 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D14A 0C00 0006                  		cmpi.b	#6,d0
0000D14E 6600                       		bne.s	Obj7F_Display
0000D150 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D156                            
0000D156                            Obj7F_Display:
0000D156 6000 0000                  		bra.w	DisplaySprite
0000D15A                            ; ===========================================================================
0000D15A                            ; ---------------------------------------------------------------------------
0000D15A                            ; Sprite mappings - zone title cards
0000D15A                            ; ---------------------------------------------------------------------------
0000D15A                            Map_obj34:
0000D15A                                    include "_maps\obj34.asm"
0000D15A                            Map_c5df:
0000D15A 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D15C 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D15E 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D160 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D162 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D164 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D166 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D168 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D16A 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D16C 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D16E 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D170 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D172 0C                         Map_c5df_18: 	dc.b $C
0000D173 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D178 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D17D F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D182 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D187 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D18C F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D191 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D196 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D19B F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D1A0 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D1A5 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D1AA F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D1AF 16                         Map_c5df_55: 	dc.b $16
0000D1B0 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D1B5 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D1BA F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D1BF F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D1C4 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D1C9 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D1CE F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D1D3 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D1D8 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D1DD F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D1E2 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D1E7 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D1EC F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D1F1 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D1F6 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D1FB F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D200 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D205 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D20A F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D20F F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D214 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D219 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D21E 05                         Map_c5df_C4: 	dc.b $5
0000D21F F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D224 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D229 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D22E F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D233 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D238 11                         Map_c5df_DE: 	dc.b $11
0000D239 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D23E F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D243 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D248 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D24D F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D252 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D257 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D25C F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D261 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D266 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D26B F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D270 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D275 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D27A F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D27F F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D284 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D289 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D28E 15                         Map_c5df_134: 	dc.b $15
0000D28F F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D294 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D299 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D29E F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D2A3 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D2A8 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D2AD F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D2B2 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D2B7 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D2BC F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D2C1 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D2C6 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D2CB F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D2D0 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D2D5 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D2DA F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D2DF F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D2E4 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D2E9 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D2EE F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D2F3 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D2F8 07                         Map_c5df_19E: 	dc.b $7
0000D2F9 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D2FE F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D303 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D308 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D30D F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D312 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D317 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D31C 04                         Map_c5df_1C2: 	dc.b $4
0000D31D F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D322 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D327 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D32C F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D331 02                         Map_c5df_1D7: 	dc.b $2
0000D332 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D337 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D33C 02                         Map_c5df_1E2: 	dc.b $2
0000D33D 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D342 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D347 02                         Map_c5df_1ED: 	dc.b $2
0000D348 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D34D F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D352 0D                         Map_c5df_1F8: 	dc.b $D
0000D353 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D358 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D35D EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D362 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D367 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D36C 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D371 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D376 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D37B EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D380 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D385 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D38A 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D38F 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D394 05                         Map_c5df_23A: 	dc.b $5
0000D395 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D39A F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D39F F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D3A4 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D3A9 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D3AE                            	even
0000D3AE                            	even
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            Map_obj39:
0000D3AE                            	include "_maps\obj39.asm"
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D3AE                            ; ---------------------------------------------------------------------------
0000D3AE 0000                       		dc.w byte_CBAC-Map_obj39
0000D3B0 0000                       		dc.w byte_CBB7-Map_obj39
0000D3B2 0000                       		dc.w byte_CBC2-Map_obj39
0000D3B4 0000                       		dc.w byte_CBCD-Map_obj39
0000D3B6 02                         byte_CBAC:	dc.b 2
0000D3B7 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D3BC F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D3C1 02                         byte_CBB7:	dc.b 2
0000D3C2 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D3C7 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D3CC 02                         byte_CBC2:	dc.b 2
0000D3CD F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3D2 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3D7 02                         byte_CBCD:	dc.b 2
0000D3D8 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3DD F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3E2                            		even
0000D3E2                            		even
0000D3E2                            
0000D3E2                            ; ---------------------------------------------------------------------------
0000D3E2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3E2                            ; ---------------------------------------------------------------------------
0000D3E2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D3E4 0000                       		dc.w byte_CC13-Map_obj3A
0000D3E6 0000                       		dc.w byte_CC32-Map_obj3A
0000D3E8 0000                       		dc.w byte_CC51-Map_obj3A
0000D3EA 0000                       		dc.w byte_CC75-Map_obj3A
0000D3EC                            		;dc.w byte_CB47-Map_obj3A
0000D3EC                            		;dc.w byte_CB26-Map_obj3A
0000D3EC                            		;dc.w byte_CB31-Map_obj3A
0000D3EC                            		;dc.w byte_CB3C-Map_obj3A
0000D3EC 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D3ED F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D3F2 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D3F7 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3FC F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D401 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D406 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D40B F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D410 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D415 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D41A F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D41F F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D424 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D429 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D42E F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D433 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D438 06                         byte_CC13:	dc.b 6			; PASSED
0000D439 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D43E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D443 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D448 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D44D F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D452 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D457 06                         byte_CC32:	dc.b 6			; SCORE
0000D458 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D45D F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D462 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D467 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D46C F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D471 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D476 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D477 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D47C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D481 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D486 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D48B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D490 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D495 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D49A 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D49B F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D4A0 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4A5 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4AA F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4AF FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4B4 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4B9 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4BE                            		even
0000D4BE                            ; ---------------------------------------------------------------------------
0000D4BE                            ; Sprite mappings - special stage results screen
0000D4BE                            ; ---------------------------------------------------------------------------
0000D4BE 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D4C0 0000                       		dc.w byte_CCEE-Map_obj7E
0000D4C2 0000                       		dc.w byte_CD0D-Map_obj7E
0000D4C4                            		;dc.w byte_CB47-Map_obj7E
0000D4C4 0000                       		dc.w byte_CD31-Map_obj7E
0000D4C6 0000                       		dc.w byte_CD46-Map_obj7E
0000D4C8 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4CA 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4CC 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4CE 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4CF F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4D4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4D9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4DE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4E3 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D4E8 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D4ED F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D4F2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D4F7 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4FC F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D501 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D506 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D50B F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D510 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D511 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D516 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D51B F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D520 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D525 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D52A FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D52F 07                         byte_CD0D:	dc.b 7
0000D530 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D535 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D53A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D53F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D544 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D549 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D54E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D553 04                         byte_CD31:	dc.b 4
0000D554 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D559 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D55E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D563 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D568 04                         byte_CD46:	dc.b 4
0000D569 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D56E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D573 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D578 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D57D 03                         byte_CD5B:	dc.b 3
0000D57E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D583 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D588 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D58D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D58E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D593 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D598 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D59D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D5A2 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5A7 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D5AC F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D5B1 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D5B6 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D5BB F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D5C0 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5C5 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5CA 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5CB F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5D0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5D5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5DA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5DF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D5E4 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D5E9 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D5EE F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D5F3 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D5F8 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5FD F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D602 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D607 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D60C F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D611 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D616                            		even
0000D616                            ; ---------------------------------------------------------------------------
0000D616                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D616                            ; ---------------------------------------------------------------------------
0000D616                            Map_obj7F:
0000D616                            	include "_maps\obj7F.asm"
0000D616                            ; ---------------------------------------------------------------------------
0000D616                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D616                            ; ---------------------------------------------------------------------------
0000D616 0000                       		dc.w byte_CE02-Map_obj7F
0000D618 0000                       		dc.w byte_CE08-Map_obj7F
0000D61A 0000                       		dc.w byte_CE0E-Map_obj7F
0000D61C 0000                       		dc.w byte_CE14-Map_obj7F
0000D61E 0000                       		dc.w byte_CE1A-Map_obj7F
0000D620 0000                       		dc.w byte_CE20-Map_obj7F
0000D622 0000                       		dc.w byte_CE26-Map_obj7F
0000D624 01                         byte_CE02:	dc.b 1
0000D625 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D62A 01                         byte_CE08:	dc.b 1
0000D62B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D630 01                         byte_CE0E:	dc.b 1
0000D631 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D636 01                         byte_CE14:	dc.b 1
0000D637 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D63C 01                         byte_CE1A:	dc.b 1
0000D63D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D642 01                         byte_CE20:	dc.b 1
0000D643 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D648 00                         byte_CE26:	dc.b 0			; Blank frame
0000D64A 00                         		even
0000D64A 00                         		even
0000D64A                            
0000D64A                            ; ===========================================================================
0000D64A                            ; ---------------------------------------------------------------------------
0000D64A                            ; Object 36 - spikes
0000D64A                            ; ---------------------------------------------------------------------------
0000D64A                            
0000D64A                            Obj36:					; XREF: Obj_Index
0000D64A 7000                       		moveq	#0,d0
0000D64C 1028 0024                  		move.b	$24(a0),d0
0000D650 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D654 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D658                            ; ===========================================================================
0000D658 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D65A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D65C                            
0000D65C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D65E 0110                       		dc.b 1,	$10
0000D660 0204                       		dc.b 2,	4
0000D662 031C                       		dc.b 3,	$1C
0000D664 0440                       		dc.b 4,	$40
0000D666 0510                       		dc.b 5,	$10
0000D668                            ; ===========================================================================
0000D668                            
0000D668                            Obj36_Main:				; XREF: Obj36_Index
0000D668 5428 0024                  		addq.b	#2,$24(a0)
0000D66C 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D674 317C 051B 0002             		move.w	#$51B,2(a0)
0000D67A 0028 0004 0001             		ori.b	#4,1(a0)
0000D680 117C 0004 0018             		move.b	#4,$18(a0)
0000D686 1028 0028                  		move.b	$28(a0),d0
0000D68A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D690 0240 00F0                  		andi.w	#$F0,d0
0000D694 43F9 0000 D65C             		lea	(Obj36_Var).l,a1
0000D69A E648                       		lsr.w	#3,d0
0000D69C D2C0                       		adda.w	d0,a1
0000D69E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D6A2 1159 0019                  		move.b	(a1)+,$19(a0)
0000D6A6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D6AC 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D6B2                            
0000D6B2                            Obj36_Solid:				; XREF: Obj36_Index
0000D6B2 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D6B6 343C 0004                  		move.w	#4,d2
0000D6BA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D6C0 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D6C2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6C8 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6CA 343C 0014                  		move.w	#$14,d2
0000D6CE                            
0000D6CE                            ; Spikes types $1x and $5x face	sideways
0000D6CE                            
0000D6CE                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6CE 323C 001B                  		move.w	#$1B,d1
0000D6D2 3602                       		move.w	d2,d3
0000D6D4 5243                       		addq.w	#1,d3
0000D6D6 3828 0008                  		move.w	8(a0),d4
0000D6DA 6100 0000                  		bsr.w	SolidObject
0000D6DE 0828 0003 0022             		btst	#3,$22(a0)
0000D6E4 6600                       		bne.s	Obj36_Display
0000D6E6 0C44 0001                  		cmpi.w	#1,d4
0000D6EA 6700                       		beq.s	Obj36_Hurt
0000D6EC 6000                       		bra.s	Obj36_Display
0000D6EE                            ; ===========================================================================
0000D6EE                            
0000D6EE                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D6EE                            
0000D6EE                            Obj36_Upright:				; XREF: Obj36_Solid
0000D6EE 7200                       		moveq	#0,d1
0000D6F0 1228 0019                  		move.b	$19(a0),d1
0000D6F4 0641 000B                  		addi.w	#$B,d1
0000D6F8 343C 0010                  		move.w	#$10,d2
0000D6FC 363C 0011                  		move.w	#$11,d3
0000D700 3828 0008                  		move.w	8(a0),d4
0000D704 6100 0000                  		bsr.w	SolidObject
0000D708 0828 0003 0022             		btst	#3,$22(a0)
0000D70E 6600                       		bne.s	Obj36_Hurt
0000D710 4A44                       		tst.w	d4
0000D712 6A00                       		bpl.s	Obj36_Display
0000D714                            
0000D714                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D714 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D718 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D71A 2F08                       		move.l	a0,-(sp)
0000D71C 2448                       		movea.l	a0,a2
0000D71E 41F8 D000                  		lea	($FFFFD000).w,a0
0000D722 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D728 6400                       		bcc.s	loc_CF20
0000D72A 2628 000C                  		move.l	$C(a0),d3
0000D72E 3028 0012                  		move.w	$12(a0),d0
0000D732 48C0                       		ext.l	d0
0000D734 E180                       		asl.l	#8,d0
0000D736 9680                       		sub.l	d0,d3
0000D738 2143 000C                  		move.l	d3,$C(a0)
0000D73C 4EB9 0000 0000             		jsr	HurtSonic
0000D742                            
0000D742                            loc_CF20:
0000D742 205F                       		movea.l	(sp)+,a0
0000D744                            
0000D744                            Obj36_Display:
0000D744 6100 0000                  		bsr.w	DisplaySprite
0000D748 3028 0030                  		move.w	$30(a0),d0
0000D74C 0240 FF80                  		andi.w	#$FF80,d0
0000D750 3238 F700                  		move.w	($FFFFF700).w,d1
0000D754 0441 0080                  		subi.w	#$80,d1
0000D758 0241 FF80                  		andi.w	#$FF80,d1
0000D75C 9041                       		sub.w	d1,d0
0000D75E 0C40 0280                  		cmpi.w	#$280,d0
0000D762 6200 0000                  		bhi.w	DeleteObject
0000D766 4E75                       		rts	
0000D768                            ; ===========================================================================
0000D768                            
0000D768                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D768 7000                       		moveq	#0,d0
0000D76A 1028 0028                  		move.b	$28(a0),d0
0000D76E D040                       		add.w	d0,d0
0000D770 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D774 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D778                            ; ===========================================================================
0000D778 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D77A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D77C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D77E                            ; ===========================================================================
0000D77E                            
0000D77E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D77E 4E75                       		rts			; don't move the object
0000D780                            ; ===========================================================================
0000D780                            
0000D780                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D780 6100 0000                  		bsr.w	Obj36_Wait
0000D784 7000                       		moveq	#0,d0
0000D786 1028 0034                  		move.b	$34(a0),d0
0000D78A D068 0032                  		add.w	$32(a0),d0
0000D78E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D792 4E75                       		rts	
0000D794                            ; ===========================================================================
0000D794                            
0000D794                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D794 6100 0000                  		bsr.w	Obj36_Wait
0000D798 7000                       		moveq	#0,d0
0000D79A 1028 0034                  		move.b	$34(a0),d0
0000D79E D068 0030                  		add.w	$30(a0),d0
0000D7A2 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D7A6 4E75                       		rts	
0000D7A8                            ; ===========================================================================
0000D7A8                            
0000D7A8                            Obj36_Wait:
0000D7A8 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D7AC 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D7AE 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D7B2 6600                       		bne.s	locret_CFE6
0000D7B4 4A28 0001                  		tst.b	1(a0)
0000D7B8 6A00                       		bpl.s	locret_CFE6
0000D7BA 303C 00B6                  		move.w	#$B6,d0
0000D7BE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7C4 6000                       		bra.s	locret_CFE6
0000D7C6                            ; ===========================================================================
0000D7C6                            
0000D7C6                            loc_CFA4:
0000D7C6 4A68 0036                  		tst.w	$36(a0)
0000D7CA 6700                       		beq.s	loc_CFC6
0000D7CC 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7D2 6400                       		bcc.s	locret_CFE6
0000D7D4 317C 0000 0034             		move.w	#0,$34(a0)
0000D7DA 317C 0000 0036             		move.w	#0,$36(a0)
0000D7E0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7E6 6000                       		bra.s	locret_CFE6
0000D7E8                            ; ===========================================================================
0000D7E8                            
0000D7E8                            loc_CFC6:
0000D7E8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D7EE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D7F4 6500                       		bcs.s	locret_CFE6
0000D7F6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7FC 317C 0001 0036             		move.w	#1,$36(a0)
0000D802 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D808                            
0000D808                            locret_CFE6:
0000D808 4E75                       		rts	
0000D80A                            ; ===========================================================================
0000D80A                            ; ---------------------------------------------------------------------------
0000D80A                            ; Sprite mappings - spikes
0000D80A                            ; ---------------------------------------------------------------------------
0000D80A                            Map_obj36:
0000D80A                            	include "_maps\obj36.asm"
0000D80A                            Map_obj36_inner:
0000D80A 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D80C 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D80E 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D810 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D812 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D814 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D816 03                         Map_obj36_inner_C: 	dc.b $3
0000D817 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D81C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D821 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D826 03                         Map_obj36_inner_1C: 	dc.b $3
0000D827 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D82C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D831 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D836 01                         Map_obj36_inner_2C: 	dc.b $1
0000D837 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D83C 03                         Map_obj36_inner_32: 	dc.b $3
0000D83D F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D842 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D847 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D84C 06                         Map_obj36_inner_42: 	dc.b $6
0000D84D F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D852 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D857 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D85C F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D861 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D866 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D86B 01                         Map_obj36_inner_61: 	dc.b $1
0000D86C FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D872 00                         	even
0000D872 00                         	even
0000D872                            
0000D872                            ; ===========================================================================
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            ; Object 3B - purple rock (GHZ)
0000D872                            ; ---------------------------------------------------------------------------
0000D872                            
0000D872                            Obj3B:					; XREF: Obj_Index
0000D872 7000                       		moveq	#0,d0
0000D874 1028 0024                  		move.b	$24(a0),d0
0000D878 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D87C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D880                            ; ===========================================================================
0000D880 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D882 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D884                            ; ===========================================================================
0000D884                            
0000D884                            Obj3B_Main:				; XREF: Obj3B_Index
0000D884 5428 0024                  		addq.b	#2,$24(a0)
0000D888 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D890 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D896 117C 0004 0001             		move.b	#4,1(a0)
0000D89C 117C 0013 0019             		move.b	#$13,$19(a0)
0000D8A2 117C 0004 0018             		move.b	#4,$18(a0)
0000D8A8                            
0000D8A8                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D8A8 323C 001B                  		move.w	#$1B,d1
0000D8AC 343C 0010                  		move.w	#$10,d2
0000D8B0 363C 0010                  		move.w	#$10,d3
0000D8B4 3828 0008                  		move.w	8(a0),d4
0000D8B8 6100 0000                  		bsr.w	SolidObject
0000D8BC 6100 0000                  		bsr.w	DisplaySprite
0000D8C0 3028 0008                  		move.w	8(a0),d0
0000D8C4 0240 FF80                  		andi.w	#$FF80,d0
0000D8C8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8CC 0441 0080                  		subi.w	#$80,d1
0000D8D0 0241 FF80                  		andi.w	#$FF80,d1
0000D8D4 9041                       		sub.w	d1,d0
0000D8D6 0C40 0280                  		cmpi.w	#$280,d0
0000D8DA 6200 0000                  		bhi.w	DeleteObject
0000D8DE 4E75                       		rts	
0000D8E0                            ; ===========================================================================
0000D8E0                            ; ---------------------------------------------------------------------------
0000D8E0                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8E0                            ; ---------------------------------------------------------------------------
0000D8E0                            
0000D8E0                            Obj49:					; XREF: Obj_Index
0000D8E0 7000                       		moveq	#0,d0
0000D8E2 1028 0024                  		move.b	$24(a0),d0
0000D8E6 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D8EA 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D8EE                            ; ===========================================================================
0000D8EE 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D8F0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D8F2                            ; ===========================================================================
0000D8F2                            
0000D8F2                            Obj49_Main:				; XREF: Obj49_Index
0000D8F2 5428 0024                  		addq.b	#2,$24(a0)
0000D8F6 117C 0004 0001             		move.b	#4,1(a0)
0000D8FC                            
0000D8FC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8FC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D900 0200 003F                  		andi.b	#$3F,d0
0000D904 6600                       		bne.s	Obj49_ChkDel
0000D906 303C 00D0                  		move.w	#$D0,d0
0000D90A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D910                            
0000D910                            Obj49_ChkDel:
0000D910 3028 0008                  		move.w	8(a0),d0
0000D914 0240 FF80                  		andi.w	#$FF80,d0
0000D918 3238 F700                  		move.w	($FFFFF700).w,d1
0000D91C 0441 0080                  		subi.w	#$80,d1
0000D920 0241 FF80                  		andi.w	#$FF80,d1
0000D924 9041                       		sub.w	d1,d0
0000D926 0C40 0280                  		cmpi.w	#$280,d0
0000D92A 6200 0000                  		bhi.w	DeleteObject
0000D92E 4E75                       		rts	
0000D930                            ; ===========================================================================
0000D930                            ; ---------------------------------------------------------------------------
0000D930                            ; Sprite mappings - purple rock	(GHZ)
0000D930                            ; ---------------------------------------------------------------------------
0000D930                            Map_obj3B:
0000D930                            	include "_maps\obj3B.asm"
0000D930                            ; ---------------------------------------------------------------------------
0000D930                            ; Sprite mappings - purple rock	(GHZ)
0000D930                            ; ---------------------------------------------------------------------------
0000D930 0000                       		dc.w byte_D110-Map_obj3B
0000D932 02                         byte_D110:	dc.b 2
0000D933 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D938 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D93E 00                         		even
0000D93E 00                         		even
0000D93E                            
0000D93E                            ; ===========================================================================
0000D93E                            ; ---------------------------------------------------------------------------
0000D93E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D93E                            ; ---------------------------------------------------------------------------
0000D93E                            
0000D93E                            Obj3C:					; XREF: Obj_Index
0000D93E 7000                       		moveq	#0,d0
0000D940 1028 0024                  		move.b	$24(a0),d0
0000D944 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D948 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D94C 6000 0000                  		bra.w	MarkObjGone
0000D950                            ; ===========================================================================
0000D950 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D952 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D954 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D956                            ; ===========================================================================
0000D956                            
0000D956                            Obj3C_Main:				; XREF: Obj3C_Index
0000D956 5428 0024                  		addq.b	#2,$24(a0)
0000D95A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D962 317C 450F 0002             		move.w	#$450F,2(a0)
0000D968 117C 0004 0001             		move.b	#4,1(a0)
0000D96E 117C 0010 0019             		move.b	#$10,$19(a0)
0000D974 117C 0004 0018             		move.b	#4,$18(a0)
0000D97A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D980                            
0000D980                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D980 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D986 323C 001B                  		move.w	#$1B,d1
0000D98A 343C 0020                  		move.w	#$20,d2
0000D98E 363C 0020                  		move.w	#$20,d3
0000D992 3828 0008                  		move.w	8(a0),d4
0000D996 6100 0000                  		bsr.w	SolidObject
0000D99A 0828 0005 0022             		btst	#5,$22(a0)
0000D9A0 6600                       		bne.s	Obj3C_ChkRoll
0000D9A2                            
0000D9A2                            locret_D180:
0000D9A2 4E75                       		rts	
0000D9A4                            ; ===========================================================================
0000D9A4                            
0000D9A4                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D9A4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D9AA 66F6                       		bne.s	locret_D180	; if not, branch
0000D9AC 3028 0030                  		move.w	$30(a0),d0
0000D9B0 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D9B2 4440                       		neg.w	d0
0000D9B4                            
0000D9B4                            Obj3C_ChkSpeed:
0000D9B4 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D9B8 65E8                       		bcs.s	locret_D180	; if not, branch
0000D9BA 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D9C0 5869 0008                  		addq.w	#4,8(a1)
0000D9C4 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9CA 3028 0008                  		move.w	8(a0),d0
0000D9CE B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9D2 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9D4 5169 0008                  		subq.w	#8,8(a1)
0000D9D8 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9DE                            
0000D9DE                            Obj3C_Smash:
0000D9DE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D9E4 08A8 0005 0022             		bclr	#5,$22(a0)
0000D9EA 08A9 0005 0022             		bclr	#5,$22(a1)
0000D9F0 7207                       		moveq	#7,d1		; load 8 fragments
0000D9F2 343C 0070                  		move.w	#$70,d2
0000D9F6 6100                       		bsr.s	SmashObject
0000D9F8                            
0000D9F8                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D9F8 6100 0000                  		bsr.w	SpeedToPos
0000D9FC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DA02 6100 0000                  		bsr.w	DisplaySprite
0000DA06 4A28 0001                  		tst.b	1(a0)
0000DA0A 6A00 0000                  		bpl.w	DeleteObject
0000DA0E 4E75                       		rts	
0000DA10                            
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DA10                            ; ---------------------------------------------------------------------------
0000DA10                            
0000DA10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA10                            
0000DA10                            
0000DA10                            SmashObject:				; XREF: Obj3C_Smash
0000DA10 7000                       		moveq	#0,d0
0000DA12 1028 001A                  		move.b	$1A(a0),d0
0000DA16 D040                       		add.w	d0,d0
0000DA18 2668 0004                  		movea.l	4(a0),a3
0000DA1C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA20 524B                       		addq.w	#1,a3
0000DA22 08E8 0005 0001             		bset	#5,1(a0)
0000DA28 1810                       		move.b	0(a0),d4
0000DA2A 1A28 0001                  		move.b	1(a0),d5
0000DA2E 2248                       		movea.l	a0,a1
0000DA30 6000                       		bra.s	Smash_LoadFrag
0000DA32                            ; ===========================================================================
0000DA32                            
0000DA32                            Smash_Loop:
0000DA32 6100 0000                  		bsr.w	SingleObjLoad
0000DA36 6600                       		bne.s	Smash_PlaySnd
0000DA38 5A4B                       		addq.w	#5,a3
0000DA3A                            
0000DA3A                            Smash_LoadFrag:				; XREF: SmashObject
0000DA3A 137C 0004 0024             		move.b	#4,$24(a1)
0000DA40 1284                       		move.b	d4,0(a1)
0000DA42 234B 0004                  		move.l	a3,4(a1)
0000DA46 1345 0001                  		move.b	d5,1(a1)
0000DA4A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA50 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA56 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA5C 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA62 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA68 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA6C 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA70 B3C8                       		cmpa.l	a0,a1
0000DA72 6400                       		bcc.s	loc_D268
0000DA74 2F08                       		move.l	a0,-(sp)
0000DA76 2049                       		movea.l	a1,a0
0000DA78 6100 0000                  		bsr.w	SpeedToPos
0000DA7C D568 0012                  		add.w	d2,$12(a0)
0000DA80 205F                       		movea.l	(sp)+,a0
0000DA82 6100 0000                  		bsr.w	DisplaySprite2
0000DA86                            
0000DA86                            loc_D268:
0000DA86 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA8A                            
0000DA8A                            Smash_PlaySnd:
0000DA8A 303C 00CB                  		move.w	#$CB,d0
0000DA8E 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA94                            ; End of function SmashObject
0000DA94                            
0000DA94                            ; ===========================================================================
0000DA94                            ; Smashed block	fragment speeds
0000DA94                            ;
0000DA94 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA98 0600 FF00                  		dc.w $600, $FF00
0000DA9C 0600 0100                  		dc.w $600, $100
0000DAA0 0400 0500                  		dc.w $400, $500
0000DAA4 0600 FA00                  		dc.w $600, $FA00
0000DAA8 0800 FE00                  		dc.w $800, $FE00
0000DAAC 0800 0200                  		dc.w $800, $200
0000DAB0 0600 0600                  		dc.w $600, $600
0000DAB4                            
0000DAB4 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DAB8 F800 FE00                  		dc.w $F800, $FE00
0000DABC F800 0200                  		dc.w $F800, $200
0000DAC0 FA00 0600                  		dc.w $FA00, $600
0000DAC4 FC00 FB00                  		dc.w $FC00, $FB00
0000DAC8 FA00 FF00                  		dc.w $FA00, $FF00
0000DACC FA00 0100                  		dc.w $FA00, $100
0000DAD0 FC00 0500                  		dc.w $FC00, $500
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4                            Map_obj3C:
0000DAD4                            	include "_maps\obj3C.asm"
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DAD4                            ; ---------------------------------------------------------------------------
0000DAD4 0000                       		dc.w byte_D2BC-Map_obj3C
0000DAD6 0000                       		dc.w byte_D2E5-Map_obj3C
0000DAD8 0000                       		dc.w byte_D30E-Map_obj3C
0000DADA 08                         byte_D2BC:	dc.b 8
0000DADB E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DAE0 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DAE5 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DAEA 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DAEF E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAF4 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAF9 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DAFE 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB03 08                         byte_D2E5:	dc.b 8
0000DB04 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB09 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB0E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB13 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB18 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB1D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB22 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB27 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB2C 08                         byte_D30E:	dc.b 8
0000DB2D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB32 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB37 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB3C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB41 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB46 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB4B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB50 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB56 00                         		even
0000DB56 00                         		even
0000DB56                            
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            ; Object code loading subroutine
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            
0000DB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB56                            
0000DB56                            
0000DB56                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB56 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB5A 7E7F                       		moveq	#$7F,d7
0000DB5C 7000                       		moveq	#0,d0
0000DB5E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB64 6400                       		bcc.s	loc_D362
0000DB66                            
0000DB66                            loc_D348:
0000DB66 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB68 6700                       		beq.s	loc_D358
0000DB6A D040                       		add.w	d0,d0
0000DB6C D040                       		add.w	d0,d0
0000DB6E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB72 4E91                       		jsr	(a1)		; run the object's code
0000DB74 7000                       		moveq	#0,d0
0000DB76                            
0000DB76                            loc_D358:
0000DB76 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB7A 51CF FFEA                  		dbf	d7,loc_D348
0000DB7E 4E75                       		rts	
0000DB80                            ; ===========================================================================
0000DB80                            
0000DB80                            loc_D362:
0000DB80 7E1F                       		moveq	#$1F,d7
0000DB82 61E2                       		bsr.s	loc_D348
0000DB84 7E5F                       		moveq	#$5F,d7
0000DB86                            
0000DB86                            loc_D368:
0000DB86 7000                       		moveq	#0,d0
0000DB88 1010                       		move.b	(a0),d0
0000DB8A 6700                       		beq.s	loc_D378
0000DB8C 4A28 0001                  		tst.b	1(a0)
0000DB90 6A00                       		bpl.s	loc_D378
0000DB92 6100 0000                  		bsr.w	DisplaySprite
0000DB96                            
0000DB96                            loc_D378:
0000DB96 41E8 0040                  		lea	$40(a0),a0
0000DB9A                            
0000DB9A                            loc_D37C:
0000DB9A 51CF FFEA                  		dbf	d7,loc_D368
0000DB9E 4E75                       		rts	
0000DBA0                            ; End of function ObjectsLoad
0000DBA0                            
0000DBA0                            ; ===========================================================================
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            ; Object pointers
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            Obj_Index:
0000DBA0                            	include "_inc\Object pointers.asm"
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0                            ; Object pointers
0000DBA0                            ; ---------------------------------------------------------------------------
0000DBA0 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DBB0 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DBC0 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBD0 0000 0000 0000 ADF2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBE0 0000 798E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DBF0 0000 7FB4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DC00 0000 8802 0000 88FC 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DC10 0000 8F46 0000 9234 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC20 0000 0000 0000 9EEE 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC30 0000 A226 0000 A812 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC40 0000 9B4A 0000 901C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC50 0000 B3EA 0000 AA06 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC60 0000 BDFE 0000 C4AC 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC70 0000 B95C 0000 D64A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC80 0000 CC32 0000 CCEC 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC90 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DCA0 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DCB0 0000 C11A 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DCC0 0000 D8E0 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCE0 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DCF0 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DD00 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DD10 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD20 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD30 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD40 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD50 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD60 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD70 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD80 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD90 0000 0000 0000 CF26 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DDA0 0000 548C 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DDB0 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DDC0 0000 5B46 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDC0 0000 5B46 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDD0                            
0000DDD0                            ; ---------------------------------------------------------------------------
0000DDD0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDD0                            ; ---------------------------------------------------------------------------
0000DDD0                            
0000DDD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDD0                            
0000DDD0                            
0000DDD0                            ObjectFall:
0000DDD0 2428 0008                  		move.l	8(a0),d2
0000DDD4 2628 000C                  		move.l	$C(a0),d3
0000DDD8 3028 0010                  		move.w	$10(a0),d0
0000DDDC 48C0                       		ext.l	d0
0000DDDE E180                       		asl.l	#8,d0
0000DDE0 D480                       		add.l	d0,d2
0000DDE2 3028 0012                  		move.w	$12(a0),d0
0000DDE6 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DDEC 48C0                       		ext.l	d0
0000DDEE E180                       		asl.l	#8,d0
0000DDF0 D680                       		add.l	d0,d3
0000DDF2 2142 0008                  		move.l	d2,8(a0)
0000DDF6 2143 000C                  		move.l	d3,$C(a0)
0000DDFA 4E75                       		rts	
0000DDFC                            ; End of function ObjectFall
0000DDFC                            
0000DDFC                            ; ---------------------------------------------------------------------------
0000DDFC                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDFC                            ; ---------------------------------------------------------------------------
0000DDFC                            
0000DDFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDFC                            
0000DDFC                            
0000DDFC                            ObjectFallNoJump:
0000DDFC 2428 0008                  		move.l	8(a0),d2
0000DE00 2628 000C                  		move.l	$C(a0),d3
0000DE04 3028 0010                  		move.w	$10(a0),d0
0000DE08 48C0                       		ext.l	d0
0000DE0A E180                       		asl.l	#8,d0
0000DE0C D480                       		add.l	d0,d2
0000DE0E                            ;		cmpi.b	#1,obID(a0)
0000DE0E                            ;		beq.s	ObjectFallSonic
0000DE0E 3028 000C                  		move.w	$C(a0),d0
0000DE12 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DE16                            ;		ext.l	d0
0000DE16                            ;		asl.l	#8,d0
0000DE16                            ;		add.l	d0,d3
0000DE16 2142 0008                  		move.l	d2,$8(a0)
0000DE1A                            ;		move.l	d3,obY(a0)
0000DE1A 4E75                       		rts	
0000DE1C                            
0000DE1C                            ; End of function ObjectFall
0000DE1C                            
0000DE1C                            JumpFallSonic:
0000DE1C 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DE22                                    
0000DE22 E180                               asl.l    #8,d0                ; Apply X speed
0000DE24 D1A8 0008                          add.l    d0,$8(a0)
0000DE28                                    
0000DE28 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DE2C 4A41                               tst.w    d1                ; Are we falling?
0000DE2E 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DE30 4440                               neg.w    d0                ; Make Y movement go up
0000DE32                                    
0000DE32                            .SetYSpeed:
0000DE32 48C0                               ext.l    d0                ; Apply Y speed
0000DE34 E180                               asl.l    #8,d0
0000DE36 D1A8 000C                          add.l    d0,$C(a0)
0000DE3A 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DE40 4E75                               rts
0000DE42                            
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            ; Subroutine translating object	speed to update	object position
0000DE42                            ; ---------------------------------------------------------------------------
0000DE42                            
0000DE42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE42                            
0000DE42                            
0000DE42                            SpeedToPos:
0000DE42 2428 0008                  		move.l	8(a0),d2
0000DE46 2628 000C                  		move.l	$C(a0),d3
0000DE4A 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DE4E 48C0                       		ext.l	d0
0000DE50 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DE52 D480                       		add.l	d0,d2		; add to x-axis	position
0000DE54 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DE58 48C0                       		ext.l	d0
0000DE5A E180                       		asl.l	#8,d0		; multiply by $100
0000DE5C D680                       		add.l	d0,d3		; add to y-axis	position
0000DE5E 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DE62 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DE66 4E75                       		rts	
0000DE68                            ; End of function SpeedToPos
0000DE68                            
0000DE68                            ; ---------------------------------------------------------------------------
0000DE68                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DE68                            ; ---------------------------------------------------------------------------
0000DE68                            
0000DE68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE68                            
0000DE68                            
0000DE68                            DisplaySprite:
0000DE68 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE6C 3028 0018                  		move.w	$18(a0),d0
0000DE70 E248                       		lsr.w	#1,d0
0000DE72 0240 0380                  		andi.w	#$380,d0
0000DE76 D2C0                       		adda.w	d0,a1
0000DE78 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE7C 6400                       		bcc.s	locret_D620
0000DE7E 5451                       		addq.w	#2,(a1)
0000DE80 D2D1                       		adda.w	(a1),a1
0000DE82 3288                       		move.w	a0,(a1)
0000DE84                            
0000DE84                            locret_D620:
0000DE84 4E75                       		rts	
0000DE86                            ; End of function DisplaySprite
0000DE86                            
0000DE86                            ; ---------------------------------------------------------------------------
0000DE86                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DE86                            ; ---------------------------------------------------------------------------
0000DE86                            
0000DE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE86                            
0000DE86                            
0000DE86                            DisplaySprite2:
0000DE86 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DE8A 3029 0018                  		move.w	$18(a1),d0
0000DE8E E248                       		lsr.w	#1,d0
0000DE90 0240 0380                  		andi.w	#$380,d0
0000DE94 D4C0                       		adda.w	d0,a2
0000DE96 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DE9A 6400                       		bcc.s	locret_D63E
0000DE9C 5452                       		addq.w	#2,(a2)
0000DE9E D4D2                       		adda.w	(a2),a2
0000DEA0 3489                       		move.w	a1,(a2)
0000DEA2                            
0000DEA2                            locret_D63E:
0000DEA2 4E75                       		rts	
0000DEA4                            ; End of function DisplaySprite2
0000DEA4                            
0000DEA4                            ; ---------------------------------------------------------------------------
0000DEA4                            ; Subroutine to	delete an object
0000DEA4                            ; ---------------------------------------------------------------------------
0000DEA4                            
0000DEA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA4                            
0000DEA4                            
0000DEA4                            DeleteObject:
0000DEA4 2248                       		movea.l	a0,a1
0000DEA6                            
0000DEA6                            DeleteObject2:
0000DEA6 7200                       		moveq	#0,d1
0000DEA8 700F                       		moveq	#$F,d0
0000DEAA                            
0000DEAA                            loc_D646:
0000DEAA 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DEAC 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DEB0 4E75                       		rts	
0000DEB2                            ; End of function DeleteObject
0000DEB2                            
0000DEB2                            ; ===========================================================================
0000DEB2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DEB6 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DEBA 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DEBE 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DEC2                            ; ---------------------------------------------------------------------------
0000DEC2                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DEC2                            ; ---------------------------------------------------------------------------
0000DEC2                            
0000DEC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEC2                            
0000DEC2                            
0000DEC2                            BuildSprites:				; XREF: TitleScreen; et al
0000DEC2 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DEC6 7A00                       		moveq	#0,d5
0000DEC8 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DECC 7E07                       		moveq	#7,d7
0000DECE                            
0000DECE                            loc_D66A:
0000DECE 4A54                       		tst.w	(a4)
0000DED0 6700 0000                  		beq.w	loc_D72E
0000DED4 7C02                       		moveq	#2,d6
0000DED6                            
0000DED6                            loc_D672:
0000DED6 3074 6000                  		movea.w	(a4,d6.w),a0
0000DEDA 4A10                       		tst.b	(a0)
0000DEDC 6700 0000                  		beq.w	loc_D726
0000DEE0 08A8 0007 0001             		bclr	#7,1(a0)
0000DEE6 1028 0001                  		move.b	1(a0),d0
0000DEEA 1800                       		move.b	d0,d4
0000DEEC 0240 000C                  		andi.w	#$C,d0
0000DEF0 6700                       		beq.s	loc_D6DE
0000DEF2 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DEF6 7000                       		moveq	#0,d0
0000DEF8 1028 0019                  		move.b	$19(a0),d0
0000DEFC 3628 0008                  		move.w	8(a0),d3
0000DF00 9651                       		sub.w	(a1),d3
0000DF02 3203                       		move.w	d3,d1
0000DF04 D240                       		add.w	d0,d1
0000DF06 6B00 0000                  		bmi.w	loc_D726
0000DF0A 3203                       		move.w	d3,d1
0000DF0C 9240                       		sub.w	d0,d1
0000DF0E 0C41 0140                  		cmpi.w	#$140,d1
0000DF12 6C00                       		bge.s	loc_D726
0000DF14 0643 0080                  		addi.w	#$80,d3
0000DF18 0804 0004                  		btst	#4,d4
0000DF1C 6700                       		beq.s	loc_D6E8
0000DF1E 7000                       		moveq	#0,d0
0000DF20 1028 0016                  		move.b	$16(a0),d0
0000DF24 3428 000C                  		move.w	$C(a0),d2
0000DF28 9469 0004                  		sub.w	4(a1),d2
0000DF2C 3202                       		move.w	d2,d1
0000DF2E D240                       		add.w	d0,d1
0000DF30 6B00                       		bmi.s	loc_D726
0000DF32 3202                       		move.w	d2,d1
0000DF34 9240                       		sub.w	d0,d1
0000DF36 0C41 00E0                  		cmpi.w	#$E0,d1
0000DF3A 6C00                       		bge.s	loc_D726
0000DF3C 0642 0080                  		addi.w	#$80,d2
0000DF40 6000                       		bra.s	loc_D700
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            loc_D6DE:
0000DF42 3428 000A                  		move.w	$A(a0),d2
0000DF46 3628 0008                  		move.w	8(a0),d3
0000DF4A 6000                       		bra.s	loc_D700
0000DF4C                            ; ===========================================================================
0000DF4C                            
0000DF4C                            loc_D6E8:
0000DF4C 3428 000C                  		move.w	$C(a0),d2
0000DF50 9469 0004                  		sub.w	4(a1),d2
0000DF54 0642 0080                  		addi.w	#$80,d2
0000DF58 0C42 0060                  		cmpi.w	#$60,d2
0000DF5C 6500                       		bcs.s	loc_D726
0000DF5E 0C42 0180                  		cmpi.w	#$180,d2
0000DF62 6400                       		bcc.s	loc_D726
0000DF64                            
0000DF64                            loc_D700:
0000DF64 2268 0004                  		movea.l	4(a0),a1
0000DF68 7200                       		moveq	#0,d1
0000DF6A 0804 0005                  		btst	#5,d4
0000DF6E 6600                       		bne.s	loc_D71C
0000DF70 1228 001A                  		move.b	$1A(a0),d1
0000DF74 D201                       		add.b	d1,d1
0000DF76 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF7A 1219                       		move.b	(a1)+,d1
0000DF7C 5301                       		subq.b	#1,d1
0000DF7E 6B00                       		bmi.s	loc_D720
0000DF80                            
0000DF80                            loc_D71C:
0000DF80 6100 0000                  		bsr.w	sub_D750
0000DF84                            
0000DF84                            loc_D720:
0000DF84 08E8 0007 0001             		bset	#7,1(a0)
0000DF8A                            
0000DF8A                            loc_D726:
0000DF8A 5446                       		addq.w	#2,d6
0000DF8C 5554                       		subq.w	#2,(a4)
0000DF8E 6600 FF46                  		bne.w	loc_D672
0000DF92                            
0000DF92                            loc_D72E:
0000DF92 49EC 0080                  		lea	$80(a4),a4
0000DF96 51CF FF36                  		dbf	d7,loc_D66A
0000DF9A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DF9E 0C05 0050                  		cmpi.b	#$50,d5
0000DFA2 6700                       		beq.s	loc_D748
0000DFA4 24BC 0000 0000             		move.l	#0,(a2)
0000DFAA 4E75                       		rts	
0000DFAC                            ; ===========================================================================
0000DFAC                            
0000DFAC                            loc_D748:
0000DFAC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DFB2 4E75                       		rts	
0000DFB4                            ; End of function BuildSprites
0000DFB4                            
0000DFB4                            
0000DFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFB4                            
0000DFB4                            
0000DFB4                            sub_D750:				; XREF: BuildSprites
0000DFB4 3668 0002                  		movea.w	2(a0),a3
0000DFB8 0804 0000                  		btst	#0,d4
0000DFBC 6600                       		bne.s	loc_D796
0000DFBE 0804 0001                  		btst	#1,d4
0000DFC2 6600 0000                  		bne.w	loc_D7E4
0000DFC6                            ; End of function sub_D750
0000DFC6                            
0000DFC6                            
0000DFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFC6                            
0000DFC6                            
0000DFC6                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DFC6 0C05 0050                  		cmpi.b	#$50,d5
0000DFCA 6700                       		beq.s	locret_D794
0000DFCC 1019                       		move.b	(a1)+,d0
0000DFCE 4880                       		ext.w	d0
0000DFD0 D042                       		add.w	d2,d0
0000DFD2 34C0                       		move.w	d0,(a2)+
0000DFD4 14D9                       		move.b	(a1)+,(a2)+
0000DFD6 5205                       		addq.b	#1,d5
0000DFD8 14C5                       		move.b	d5,(a2)+
0000DFDA 1019                       		move.b	(a1)+,d0
0000DFDC E148                       		lsl.w	#8,d0
0000DFDE 1019                       		move.b	(a1)+,d0
0000DFE0 D04B                       		add.w	a3,d0
0000DFE2 34C0                       		move.w	d0,(a2)+
0000DFE4 1019                       		move.b	(a1)+,d0
0000DFE6 4880                       		ext.w	d0
0000DFE8 D043                       		add.w	d3,d0
0000DFEA 0240 01FF                  		andi.w	#$1FF,d0
0000DFEE 6600                       		bne.s	loc_D78E
0000DFF0 5240                       		addq.w	#1,d0
0000DFF2                            
0000DFF2                            loc_D78E:
0000DFF2 34C0                       		move.w	d0,(a2)+
0000DFF4 51C9 FFD0                  		dbf	d1,sub_D762
0000DFF8                            
0000DFF8                            locret_D794:
0000DFF8 4E75                       		rts	
0000DFFA                            ; End of function sub_D762
0000DFFA                            
0000DFFA                            ; ===========================================================================
0000DFFA                            
0000DFFA                            loc_D796:
0000DFFA 0804 0001                  		btst	#1,d4
0000DFFE 6600 0000                  		bne.w	loc_D82A
0000E002                            
0000E002                            loc_D79E:
0000E002 0C05 0050                  		cmpi.b	#$50,d5
0000E006 6700                       		beq.s	locret_D7E2
0000E008 1019                       		move.b	(a1)+,d0
0000E00A 4880                       		ext.w	d0
0000E00C D042                       		add.w	d2,d0
0000E00E 34C0                       		move.w	d0,(a2)+
0000E010 1819                       		move.b	(a1)+,d4
0000E012 14C4                       		move.b	d4,(a2)+
0000E014 5205                       		addq.b	#1,d5
0000E016 14C5                       		move.b	d5,(a2)+
0000E018 1019                       		move.b	(a1)+,d0
0000E01A E148                       		lsl.w	#8,d0
0000E01C 1019                       		move.b	(a1)+,d0
0000E01E D04B                       		add.w	a3,d0
0000E020 0A40 0800                  		eori.w	#$800,d0
0000E024 34C0                       		move.w	d0,(a2)+
0000E026 1019                       		move.b	(a1)+,d0
0000E028 4880                       		ext.w	d0
0000E02A 4440                       		neg.w	d0
0000E02C D804                       		add.b	d4,d4
0000E02E 0244 0018                  		andi.w	#$18,d4
0000E032 5044                       		addq.w	#8,d4
0000E034 9044                       		sub.w	d4,d0
0000E036 D043                       		add.w	d3,d0
0000E038 0240 01FF                  		andi.w	#$1FF,d0
0000E03C 6600                       		bne.s	loc_D7DC
0000E03E 5240                       		addq.w	#1,d0
0000E040                            
0000E040                            loc_D7DC:
0000E040 34C0                       		move.w	d0,(a2)+
0000E042 51C9 FFBE                  		dbf	d1,loc_D79E
0000E046                            
0000E046                            locret_D7E2:
0000E046 4E75                       		rts	
0000E048                            ; ===========================================================================
0000E048                            
0000E048                            loc_D7E4:				; XREF: sub_D750
0000E048 0C05 0050                  		cmpi.b	#$50,d5
0000E04C 6700                       		beq.s	locret_D828
0000E04E 1019                       		move.b	(a1)+,d0
0000E050 1811                       		move.b	(a1),d4
0000E052 4880                       		ext.w	d0
0000E054 4440                       		neg.w	d0
0000E056 E70C                       		lsl.b	#3,d4
0000E058 0244 0018                  		andi.w	#$18,d4
0000E05C 5044                       		addq.w	#8,d4
0000E05E 9044                       		sub.w	d4,d0
0000E060 D042                       		add.w	d2,d0
0000E062 34C0                       		move.w	d0,(a2)+
0000E064 14D9                       		move.b	(a1)+,(a2)+
0000E066 5205                       		addq.b	#1,d5
0000E068 14C5                       		move.b	d5,(a2)+
0000E06A 1019                       		move.b	(a1)+,d0
0000E06C E148                       		lsl.w	#8,d0
0000E06E 1019                       		move.b	(a1)+,d0
0000E070 D04B                       		add.w	a3,d0
0000E072 0A40 1000                  		eori.w	#$1000,d0
0000E076 34C0                       		move.w	d0,(a2)+
0000E078 1019                       		move.b	(a1)+,d0
0000E07A 4880                       		ext.w	d0
0000E07C D043                       		add.w	d3,d0
0000E07E 0240 01FF                  		andi.w	#$1FF,d0
0000E082 6600                       		bne.s	loc_D822
0000E084 5240                       		addq.w	#1,d0
0000E086                            
0000E086                            loc_D822:
0000E086 34C0                       		move.w	d0,(a2)+
0000E088 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E08C                            
0000E08C                            locret_D828:
0000E08C 4E75                       		rts	
0000E08E                            ; ===========================================================================
0000E08E                            
0000E08E                            loc_D82A:
0000E08E 0C05 0050                  		cmpi.b	#$50,d5
0000E092 6700                       		beq.s	locret_D87C
0000E094 1019                       		move.b	(a1)+,d0
0000E096 1811                       		move.b	(a1),d4
0000E098 4880                       		ext.w	d0
0000E09A 4440                       		neg.w	d0
0000E09C E70C                       		lsl.b	#3,d4
0000E09E 0244 0018                  		andi.w	#$18,d4
0000E0A2 5044                       		addq.w	#8,d4
0000E0A4 9044                       		sub.w	d4,d0
0000E0A6 D042                       		add.w	d2,d0
0000E0A8 34C0                       		move.w	d0,(a2)+
0000E0AA 1819                       		move.b	(a1)+,d4
0000E0AC 14C4                       		move.b	d4,(a2)+
0000E0AE 5205                       		addq.b	#1,d5
0000E0B0 14C5                       		move.b	d5,(a2)+
0000E0B2 1019                       		move.b	(a1)+,d0
0000E0B4 E148                       		lsl.w	#8,d0
0000E0B6 1019                       		move.b	(a1)+,d0
0000E0B8 D04B                       		add.w	a3,d0
0000E0BA 0A40 1800                  		eori.w	#$1800,d0
0000E0BE 34C0                       		move.w	d0,(a2)+
0000E0C0 1019                       		move.b	(a1)+,d0
0000E0C2 4880                       		ext.w	d0
0000E0C4 4440                       		neg.w	d0
0000E0C6 D804                       		add.b	d4,d4
0000E0C8 0244 0018                  		andi.w	#$18,d4
0000E0CC 5044                       		addq.w	#8,d4
0000E0CE 9044                       		sub.w	d4,d0
0000E0D0 D043                       		add.w	d3,d0
0000E0D2 0240 01FF                  		andi.w	#$1FF,d0
0000E0D6 6600                       		bne.s	loc_D876
0000E0D8 5240                       		addq.w	#1,d0
0000E0DA                            
0000E0DA                            loc_D876:
0000E0DA 34C0                       		move.w	d0,(a2)+
0000E0DC 51C9 FFB0                  		dbf	d1,loc_D82A
0000E0E0                            
0000E0E0                            locret_D87C:
0000E0E0 4E75                       		rts	
0000E0E2                            ; ---------------------------------------------------------------------------
0000E0E2                            ; Subroutine to	check if an object is on the screen
0000E0E2                            ; ---------------------------------------------------------------------------
0000E0E2                            
0000E0E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0E2                            
0000E0E2                            
0000E0E2                            ChkObjOnScreen:
0000E0E2 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E0E6 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E0EA 6B00                       		bmi.s	NotOnScreen
0000E0EC 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E0F0 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E0F2                            
0000E0F2 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E0F6 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E0FA 6B00                       		bmi.s	NotOnScreen
0000E0FC 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E100 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E102                            
0000E102 7000                       		moveq	#0,d0		; set flag to 0
0000E104 4E75                       		rts	
0000E106                            ; ===========================================================================
0000E106                            
0000E106                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E106 7001                       		moveq	#1,d0		; set flag to 1
0000E108 4E75                       		rts	
0000E10A                            ; End of function ChkObjOnScreen
0000E10A                            
0000E10A                            
0000E10A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E10A                            
0000E10A                            
0000E10A                            ChkObjOnScreen2:
0000E10A 7200                       		moveq	#0,d1
0000E10C 1228 0019                  		move.b	$19(a0),d1
0000E110 3028 0008                  		move.w	8(a0),d0
0000E114 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E118 D041                       		add.w	d1,d0
0000E11A 6B00                       		bmi.s	NotOnScreen2
0000E11C D241                       		add.w	d1,d1
0000E11E 9041                       		sub.w	d1,d0
0000E120 0C40 0140                  		cmpi.w	#320,d0
0000E124 6C00                       		bge.s	NotOnScreen2
0000E126                            
0000E126 3228 000C                  		move.w	$C(a0),d1
0000E12A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E12E 6B00                       		bmi.s	NotOnScreen2
0000E130 0C41 00E0                  		cmpi.w	#224,d1
0000E134 6C00                       		bge.s	NotOnScreen2
0000E136                            
0000E136 7000                       		moveq	#0,d0
0000E138 4E75                       		rts	
0000E13A                            ; ===========================================================================
0000E13A                            
0000E13A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E13A 7001                       		moveq	#1,d0
0000E13C 4E75                       		rts	
0000E13E                            ; End of function ChkObjOnScreen2
0000E13E                            
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            ; Subroutine to	load a level's objects
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            
0000E13E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E13E                            
0000E13E                            
0000E13E                            ObjPosLoad:				; XREF: Level; et al
0000E13E 7000                       		moveq	#0,d0
0000E140 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E144 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E148 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E14C                            ; End of function ObjPosLoad
0000E14C                            
0000E14C                            ; ===========================================================================
0000E14C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E14E 0000                       		dc.w OPL_Next-OPL_Index
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            OPL_Main:				; XREF: OPL_Index
0000E150 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E154 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E158 ED08                       		lsl.b	#6,d0
0000E15A E848                       		lsr.w	#4,d0
0000E15C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E162 2248                       		movea.l	a0,a1
0000E164 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E168 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E16C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E170 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E174 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E178 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E17C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E180 34FC 0101                  		move.w	#$101,(a2)+
0000E184 303C 005E                  		move.w	#$5E,d0
0000E188                            
0000E188                            OPL_ClrList:
0000E188 429A                       		clr.l	(a2)+
0000E18A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E18E                            
0000E18E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E192 7400                       		moveq	#0,d2
0000E194 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E198 0446 0080                  		subi.w	#$80,d6
0000E19C 6400                       		bcc.s	loc_D93C
0000E19E 7C00                       		moveq	#0,d6
0000E1A0                            
0000E1A0                            loc_D93C:
0000E1A0 0246 FF80                  		andi.w	#$FF80,d6
0000E1A4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1A8                            
0000E1A8                            loc_D944:
0000E1A8 BC50                       		cmp.w	(a0),d6
0000E1AA 6300                       		bls.s	loc_D956
0000E1AC 4A28 0004                  		tst.b	4(a0)
0000E1B0 6A00                       		bpl.s	loc_D952
0000E1B2 1412                       		move.b	(a2),d2
0000E1B4 5212                       		addq.b	#1,(a2)
0000E1B6                            
0000E1B6                            loc_D952:
0000E1B6 5C48                       		addq.w	#6,a0
0000E1B8 60EE                       		bra.s	loc_D944
0000E1BA                            ; ===========================================================================
0000E1BA                            
0000E1BA                            loc_D956:
0000E1BA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1BE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1C2 0446 0080                  		subi.w	#$80,d6
0000E1C6 6500                       		bcs.s	loc_D976
0000E1C8                            
0000E1C8                            loc_D964:
0000E1C8 BC50                       		cmp.w	(a0),d6
0000E1CA 6300                       		bls.s	loc_D976
0000E1CC 4A28 0004                  		tst.b	4(a0)
0000E1D0 6A00                       		bpl.s	loc_D972
0000E1D2 522A 0001                  		addq.b	#1,1(a2)
0000E1D6                            
0000E1D6                            loc_D972:
0000E1D6 5C48                       		addq.w	#6,a0
0000E1D8 60EE                       		bra.s	loc_D964
0000E1DA                            ; ===========================================================================
0000E1DA                            
0000E1DA                            loc_D976:
0000E1DA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1DE 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E1E4                            
0000E1E4                            OPL_Next:				; XREF: OPL_Index
0000E1E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1E8 7400                       		moveq	#0,d2
0000E1EA 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E1EE 0246 FF80                  		andi.w	#$FF80,d6
0000E1F2 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E1F6 6700 0000                  		beq.w	locret_DA3A
0000E1FA 6C00                       		bge.s	loc_D9F6
0000E1FC 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E200 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E204 0446 0080                  		subi.w	#$80,d6
0000E208 6500                       		bcs.s	loc_D9D2
0000E20A                            
0000E20A                            loc_D9A6:
0000E20A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E20E 6C00                       		bge.s	loc_D9D2
0000E210 5D48                       		subq.w	#6,a0
0000E212 4A28 0004                  		tst.b	4(a0)
0000E216 6A00                       		bpl.s	loc_D9BC
0000E218 532A 0001                  		subq.b	#1,1(a2)
0000E21C 142A 0001                  		move.b	1(a2),d2
0000E220                            
0000E220                            loc_D9BC:
0000E220 6100 0000                  		bsr.w	loc_DA3C
0000E224 6600                       		bne.s	loc_D9C6
0000E226 5D48                       		subq.w	#6,a0
0000E228 60E0                       		bra.s	loc_D9A6
0000E22A                            ; ===========================================================================
0000E22A                            
0000E22A                            loc_D9C6:
0000E22A 4A28 0004                  		tst.b	4(a0)
0000E22E 6A00                       		bpl.s	loc_D9D0
0000E230 522A 0001                  		addq.b	#1,1(a2)
0000E234                            
0000E234                            loc_D9D0:
0000E234 5C48                       		addq.w	#6,a0
0000E236                            
0000E236                            loc_D9D2:
0000E236 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E23A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E23E 0646 0300                  		addi.w	#$300,d6
0000E242                            
0000E242                            loc_D9DE:
0000E242 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E246 6E00                       		bgt.s	loc_D9F0
0000E248 4A28 FFFE                  		tst.b	-2(a0)
0000E24C 6A00                       		bpl.s	loc_D9EC
0000E24E 5312                       		subq.b	#1,(a2)
0000E250                            
0000E250                            loc_D9EC:
0000E250 5D48                       		subq.w	#6,a0
0000E252 60EE                       		bra.s	loc_D9DE
0000E254                            ; ===========================================================================
0000E254                            
0000E254                            loc_D9F0:
0000E254 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E258 4E75                       		rts	
0000E25A                            ; ===========================================================================
0000E25A                            
0000E25A                            loc_D9F6:
0000E25A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E25E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E262 0646 0280                  		addi.w	#$280,d6
0000E266                            
0000E266                            loc_DA02:
0000E266 BC50                       		cmp.w	(a0),d6
0000E268 6300                       		bls.s	loc_DA16
0000E26A 4A28 0004                  		tst.b	4(a0)
0000E26E 6A00                       		bpl.s	loc_DA10
0000E270 1412                       		move.b	(a2),d2
0000E272 5212                       		addq.b	#1,(a2)
0000E274                            
0000E274                            loc_DA10:
0000E274 6100 0000                  		bsr.w	loc_DA3C
0000E278 67EC                       		beq.s	loc_DA02
0000E27A                            
0000E27A                            loc_DA16:
0000E27A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E27E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E282 0446 0300                  		subi.w	#$300,d6
0000E286 6500                       		bcs.s	loc_DA36
0000E288                            
0000E288                            loc_DA24:
0000E288 BC50                       		cmp.w	(a0),d6
0000E28A 6300                       		bls.s	loc_DA36
0000E28C 4A28 0004                  		tst.b	4(a0)
0000E290 6A00                       		bpl.s	loc_DA32
0000E292 522A 0001                  		addq.b	#1,1(a2)
0000E296                            
0000E296                            loc_DA32:
0000E296 5C48                       		addq.w	#6,a0
0000E298 60EE                       		bra.s	loc_DA24
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            loc_DA36:
0000E29A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E29E                            
0000E29E                            locret_DA3A:
0000E29E 4E75                       		rts	
0000E2A0                            ; ===========================================================================
0000E2A0                            
0000E2A0                            loc_DA3C:
0000E2A0 4A28 0004                  		tst.b	4(a0)
0000E2A4 6A00                       		bpl.s	OPL_MakeItem
0000E2A6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E2AC 6700                       		beq.s	OPL_MakeItem
0000E2AE 5C48                       		addq.w	#6,a0
0000E2B0 7000                       		moveq	#0,d0
0000E2B2 4E75                       		rts	
0000E2B4                            ; ===========================================================================
0000E2B4                            
0000E2B4                            OPL_MakeItem:
0000E2B4 6100 0000                  		bsr.w	SingleObjLoad
0000E2B8 6600                       		bne.s	locret_DA8A
0000E2BA 3358 0008                  		move.w	(a0)+,8(a1)
0000E2BE 3018                       		move.w	(a0)+,d0
0000E2C0 3200                       		move.w	d0,d1
0000E2C2 0240 0FFF                  		andi.w	#$FFF,d0
0000E2C6 3340 000C                  		move.w	d0,$C(a1)
0000E2CA E559                       		rol.w	#2,d1
0000E2CC 0201 0003                  		andi.b	#3,d1
0000E2D0 1341 0001                  		move.b	d1,1(a1)
0000E2D4 1341 0022                  		move.b	d1,$22(a1)
0000E2D8 1018                       		move.b	(a0)+,d0
0000E2DA 6A00                       		bpl.s	loc_DA80
0000E2DC 0200 007F                  		andi.b	#$7F,d0
0000E2E0 1342 0023                  		move.b	d2,$23(a1)
0000E2E4                            
0000E2E4                            loc_DA80:
0000E2E4 1280                       		move.b	d0,0(a1)
0000E2E6 1358 0028                  		move.b	(a0)+,$28(a1)
0000E2EA 7000                       		moveq	#0,d0
0000E2EC                            
0000E2EC                            locret_DA8A:
0000E2EC 4E75                       		rts	
0000E2EE                            ; ---------------------------------------------------------------------------
0000E2EE                            ; Single object	loading	subroutine
0000E2EE                            ; ---------------------------------------------------------------------------
0000E2EE                            
0000E2EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2EE                            
0000E2EE                            
0000E2EE                            SingleObjLoad:
0000E2EE 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E2F2 303C 005F                  		move.w	#$5F,d0
0000E2F6                            
0000E2F6                            loc_DA94:
0000E2F6 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E2F8 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E2FA 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E2FE 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E302                            
0000E302                            locret_DAA0:
0000E302 4E75                       		rts	
0000E304                            ; End of function SingleObjLoad
0000E304                            
0000E304                            
0000E304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E304                            
0000E304                            
0000E304                            SingleObjLoad2:
0000E304 2248                       		movea.l	a0,a1
0000E306 303C F000                  		move.w	#-$1000,d0
0000E30A 9048                       		sub.w	a0,d0
0000E30C EC48                       		lsr.w	#6,d0
0000E30E 5340                       		subq.w	#1,d0
0000E310 6500                       		bcs.s	locret_DABC
0000E312                            
0000E312                            loc_DAB0:
0000E312 4A11                       		tst.b	(a1)
0000E314 6700                       		beq.s	locret_DABC
0000E316 43E9 0040                  		lea	$40(a1),a1
0000E31A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E31E                            
0000E31E                            locret_DABC:
0000E31E 4E75                       		rts	
0000E320                            ; End of function SingleObjLoad2
0000E320                            
0000E320                            ; ===========================================================================
0000E320                            ; ---------------------------------------------------------------------------
0000E320                            ; Object 41 - springs
0000E320                            ; ---------------------------------------------------------------------------
0000E320                            
0000E320                            Obj41:					; XREF: Obj_Index
0000E320 7000                       		moveq	#0,d0
0000E322 1028 0024                  		move.b	$24(a0),d0
0000E326 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E32A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E32E 6100 FB38                  		bsr.w	DisplaySprite
0000E332 3028 0008                  		move.w	8(a0),d0
0000E336 0240 FF80                  		andi.w	#$FF80,d0
0000E33A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E33E 0441 0080                  		subi.w	#$80,d1
0000E342 0241 FF80                  		andi.w	#$FF80,d1
0000E346 9041                       		sub.w	d1,d0
0000E348 0C40 0280                  		cmpi.w	#$280,d0
0000E34C 6200 FB56                  		bhi.w	DeleteObject
0000E350 4E75                       		rts	
0000E352                            ; ===========================================================================
0000E352 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E354 0000                       		dc.w Obj41_Up-Obj41_Index
0000E356 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E358 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E35A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E35C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E35E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E360 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E362 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E364 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E366                            
0000E366 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E368 F600                       		dc.w -$A00		; power	of yellow spring
0000E36A                            ; ===========================================================================
0000E36A                            
0000E36A                            Obj41_Main:				; XREF: Obj41_Index
0000E36A 5428 0024                  		addq.b	#2,$24(a0)
0000E36E 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E376 317C 0523 0002             		move.w	#$523,2(a0)
0000E37C 0028 0004 0001             		ori.b	#4,1(a0)
0000E382 117C 0010 0019             		move.b	#$10,$19(a0)
0000E388 117C 0004 0018             		move.b	#4,$18(a0)
0000E38E 1028 0028                  		move.b	$28(a0),d0
0000E392 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E396 6700                       		beq.s	loc_DB54	; if not, branch
0000E398 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E39E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3A4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E3AA 317C 0533 0002             		move.w	#$533,2(a0)
0000E3B0 117C 0008 0019             		move.b	#8,$19(a0)
0000E3B6                            
0000E3B6                            loc_DB54:
0000E3B6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E3BA 6700                       		beq.s	loc_DB66	; if not, branch
0000E3BC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E3C2 08E8 0001 0022             		bset	#1,$22(a0)
0000E3C8                            
0000E3C8                            loc_DB66:
0000E3C8 0800 0001                  		btst	#1,d0
0000E3CC 6700                       		beq.s	loc_DB72
0000E3CE 08E8 0005 0002             		bset	#5,2(a0)
0000E3D4                            
0000E3D4                            loc_DB72:
0000E3D4 0240 000F                  		andi.w	#$F,d0
0000E3D8 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E3DE 4E75                       		rts	
0000E3E0                            ; ===========================================================================
0000E3E0                            
0000E3E0                            Obj41_Up:				; XREF: Obj41_Index
0000E3E0 323C 001B                  		move.w	#$1B,d1
0000E3E4 343C 0008                  		move.w	#8,d2
0000E3E8 363C 0010                  		move.w	#$10,d3
0000E3EC 3828 0008                  		move.w	8(a0),d4
0000E3F0 6100 0000                  		bsr.w	SolidObject
0000E3F4 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E3F8 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E3FA 4E75                       		rts	
0000E3FC                            ; ===========================================================================
0000E3FC                            
0000E3FC                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E3FC 5428 0024                  		addq.b	#2,$24(a0)
0000E400 5069 000C                  		addq.w	#8,$C(a1)
0000E404 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E40A 08E9 0001 0022             		bset	#1,$22(a1)
0000E410 08A9 0003 0022             		bclr	#3,$22(a1)
0000E416 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E41C 137C 0002 0024             		move.b	#2,$24(a1)
0000E422 08A8 0003 0022             		bclr	#3,$22(a0)
0000E428 4228 0025                  		clr.b	$25(a0)
0000E42C 303C 00CC                  		move.w	#$CC,d0
0000E430 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E436                            
0000E436                            Obj41_AniUp:				; XREF: Obj41_Index
0000E436 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E43C 6000 CAB0                  		bra.w	AnimateSprite
0000E440                            ; ===========================================================================
0000E440                            
0000E440                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E440 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E446 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E44A 4E75                       		rts	
0000E44C                            ; ===========================================================================
0000E44C                            
0000E44C                            Obj41_LR:				; XREF: Obj41_Index
0000E44C 323C 0013                  		move.w	#$13,d1
0000E450 343C 000E                  		move.w	#$E,d2
0000E454 363C 000F                  		move.w	#$F,d3
0000E458 3828 0008                  		move.w	8(a0),d4
0000E45C 6100 0000                  		bsr.w	SolidObject
0000E460 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E466 6600                       		bne.s	loc_DC0C
0000E468 117C 0008 0024             		move.b	#8,$24(a0)
0000E46E                            
0000E46E                            loc_DC0C:
0000E46E 0828 0005 0022             		btst	#5,$22(a0)
0000E474 6600                       		bne.s	Obj41_BounceLR
0000E476 4E75                       		rts	
0000E478                            ; ===========================================================================
0000E478                            
0000E478                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E478 5428 0024                  		addq.b	#2,$24(a0)
0000E47C 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E482 5069 0008                  		addq.w	#8,8(a1)
0000E486 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E48C 6600                       		bne.s	loc_DC36	; if yes, branch
0000E48E 0469 0010 0008             		subi.w	#$10,8(a1)
0000E494 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E498                            
0000E498                            loc_DC36:
0000E498 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E49E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E4A4 0869 0000 0022             		bchg	#0,$22(a1)
0000E4AA 0829 0002 0022             		btst	#2,$22(a1)
0000E4B0 6600                       		bne.s	loc_DC56
0000E4B2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E4B8                            
0000E4B8                            loc_DC56:
0000E4B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E4C4 303C 00CC                  		move.w	#$CC,d0
0000E4C8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4CE                            
0000E4CE                            Obj41_AniLR:				; XREF: Obj41_Index
0000E4CE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4D4 6000 CA18                  		bra.w	AnimateSprite
0000E4D8                            ; ===========================================================================
0000E4D8                            
0000E4D8                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E4D8 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E4DE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E4E2 4E75                       		rts	
0000E4E4                            ; ===========================================================================
0000E4E4                            
0000E4E4                            Obj41_Dwn:				; XREF: Obj41_Index
0000E4E4 323C 001B                  		move.w	#$1B,d1
0000E4E8 343C 0008                  		move.w	#8,d2
0000E4EC 363C 0010                  		move.w	#$10,d3
0000E4F0 3828 0008                  		move.w	8(a0),d4
0000E4F4 6100 0000                  		bsr.w	SolidObject
0000E4F8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E4FE 6600                       		bne.s	loc_DCA4
0000E500 117C 000E 0024             		move.b	#$E,$24(a0)
0000E506                            
0000E506                            loc_DCA4:
0000E506 4A28 0025                  		tst.b	$25(a0)
0000E50A 6600                       		bne.s	locret_DCAE
0000E50C 4A44                       		tst.w	d4
0000E50E 6B00                       		bmi.s	Obj41_BounceDwn
0000E510                            
0000E510                            locret_DCAE:
0000E510 4E75                       		rts	
0000E512                            ; ===========================================================================
0000E512                            
0000E512                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E512 5428 0024                  		addq.b	#2,$24(a0)
0000E516 5169 000C                  		subq.w	#8,$C(a1)
0000E51A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E520 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E524 08E9 0001 0022             		bset	#1,$22(a1)
0000E52A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E530 137C 0002 0024             		move.b	#2,$24(a1)
0000E536 08A8 0003 0022             		bclr	#3,$22(a0)
0000E53C 4228 0025                  		clr.b	$25(a0)
0000E540 303C 00CC                  		move.w	#$CC,d0
0000E544 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E54A                            
0000E54A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E54A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E550 6000 C99C                  		bra.w	AnimateSprite
0000E554                            ; ===========================================================================
0000E554                            
0000E554                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E554 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E55A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E55E 4E75                       		rts	
0000E560                            ; ===========================================================================
0000E560                            Ani_obj41:
0000E560                            	include "_anim\obj41.asm"
0000E560                            ; ---------------------------------------------------------------------------
0000E560                            ; Animation script - springs
0000E560                            ; ---------------------------------------------------------------------------
0000E560 0000                       		dc.w byte_DD02-Ani_obj41
0000E562 0000                       		dc.w byte_DD0E-Ani_obj41
0000E564 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E570 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E57C                            		even
0000E57C                            		even
0000E57C                            
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            ; Sprite mappings - springs
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            Map_obj41:
0000E57C                            	include "_maps\obj41.asm"
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C                            ; Sprite mappings - springs
0000E57C                            ; ---------------------------------------------------------------------------
0000E57C 0000                       		dc.w byte_DD26-Map_obj41
0000E57E 0000                       		dc.w byte_DD31-Map_obj41
0000E580 0000                       		dc.w byte_DD37-Map_obj41
0000E582 0000                       		dc.w byte_DD47-Map_obj41
0000E584 0000                       		dc.w byte_DD4D-Map_obj41
0000E586 0000                       		dc.w byte_DD53-Map_obj41
0000E588 02                         byte_DD26:	dc.b 2
0000E589 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E58E 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E593 01                         byte_DD31:	dc.b 1
0000E594 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E599 03                         byte_DD37:	dc.b 3
0000E59A E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E59F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E5A4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E5A9 01                         byte_DD47:	dc.b 1
0000E5AA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E5AF 01                         byte_DD4D:	dc.b 1
0000E5B0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E5B5 04                         byte_DD53:	dc.b 4
0000E5B6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E5BB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E5C0 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E5C5 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E5CA                            		even
0000E5CA                            		even
0000E5CA                            
0000E5CA                            ; ===========================================================================
0000E5CA                            ; ---------------------------------------------------------------------------
0000E5CA                            ; Object 42 - Newtron enemy (GHZ)
0000E5CA                            ; ---------------------------------------------------------------------------
0000E5CA                            
0000E5CA                            Obj42:					; XREF: Obj_Index
0000E5CA 7000                       		moveq	#0,d0
0000E5CC 1028 0024                  		move.b	$24(a0),d0
0000E5D0 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E5D4 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E5D8                            ; ===========================================================================
0000E5D8 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E5DA 0000                       		dc.w Obj42_Action-Obj42_Index
0000E5DC 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E5DE                            ; ===========================================================================
0000E5DE                            
0000E5DE                            Obj42_Main:				; XREF: Obj42_Index
0000E5DE 5428 0024                  		addq.b	#2,$24(a0)
0000E5E2 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E5EA 317C 049B 0002             		move.w	#$49B,2(a0)
0000E5F0 117C 0004 0001             		move.b	#4,1(a0)
0000E5F6 117C 0004 0018             		move.b	#4,$18(a0)
0000E5FC 117C 0014 0019             		move.b	#$14,$19(a0)
0000E602 117C 0010 0016             		move.b	#$10,$16(a0)
0000E608 117C 0008 0017             		move.b	#8,$17(a0)
0000E60E                            
0000E60E                            Obj42_Action:				; XREF: Obj42_Index
0000E60E 7000                       		moveq	#0,d0
0000E610 1028 0025                  		move.b	$25(a0),d0
0000E614 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E618 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E61C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E622 6100 C8CA                  		bsr.w	AnimateSprite
0000E626 6000 0000                  		bra.w	MarkObjGone
0000E62A                            ; ===========================================================================
0000E62A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E62C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E62E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E630 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E632 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E634                            ; ===========================================================================
0000E634                            
0000E634                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E634 08E8 0000 0022             		bset	#0,$22(a0)
0000E63A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E63E 9068 0008                  		sub.w	8(a0),d0
0000E642 6400                       		bcc.s	loc_DDEA
0000E644 4440                       		neg.w	d0
0000E646 08A8 0000 0022             		bclr	#0,$22(a0)
0000E64C                            
0000E64C                            loc_DDEA:
0000E64C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E650 6400                       		bcc.s	locret_DE12	; if not, branch
0000E652 5428 0025                  		addq.b	#2,$25(a0)
0000E656 117C 0001 001C             		move.b	#1,$1C(a0)
0000E65C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E660 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E662 317C 249B 0002             		move.w	#$249B,2(a0)
0000E668 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E66E 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E674                            
0000E674                            locret_DE12:
0000E674 4E75                       		rts	
0000E676                            ; ===========================================================================
0000E676                            
0000E676                            Obj42_Type00:				; XREF: Obj42_Index2
0000E676 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E67C 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E67E 08E8 0000 0022             		bset	#0,$22(a0)
0000E684 3038 D008                  		move.w	($FFFFD008).w,d0
0000E688 9068 0008                  		sub.w	8(a0),d0
0000E68C 6400                       		bcc.s	locret_DE32
0000E68E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E694                            
0000E694                            locret_DE32:
0000E694 4E75                       		rts	
0000E696                            ; ===========================================================================
0000E696                            
0000E696                            Obj42_Fall:				; XREF: Obj42_Type00
0000E696 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E69C 6600                       		bne.s	loc_DE42
0000E69E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E6A4                            
0000E6A4                            loc_DE42:
0000E6A4 6100 F72A                  		bsr.w	ObjectFall
0000E6A8 6100 0000                  		bsr.w	ObjHitFloor
0000E6AC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E6AE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E6B0 D368 000C                  		add.w	d1,$C(a0)
0000E6B4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E6BA 5428 0025                  		addq.b	#2,$25(a0)
0000E6BE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6C4 0828 0005 0002             		btst	#5,2(a0)
0000E6CA 6700                       		beq.s	Obj42_Move
0000E6CC 5228 001C                  		addq.b	#1,$1C(a0)
0000E6D0                            
0000E6D0                            Obj42_Move:
0000E6D0 117C 000D 0020             		move.b	#$D,$20(a0)
0000E6D6 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E6DC 0828 0000 0022             		btst	#0,$22(a0)
0000E6E2 6600                       		bne.s	locret_DE86
0000E6E4 4468 0010                  		neg.w	$10(a0)
0000E6E8                            
0000E6E8                            locret_DE86:
0000E6E8 4E75                       		rts	
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E6EA 6100 F756                  		bsr.w	SpeedToPos
0000E6EE 6100 0000                  		bsr.w	ObjHitFloor
0000E6F2 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6F6 6D00                       		blt.s	loc_DEA2
0000E6F8 0C41 000C                  		cmpi.w	#$C,d1
0000E6FC 6C00                       		bge.s	loc_DEA2
0000E6FE D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E702 4E75                       		rts	
0000E704                            ; ===========================================================================
0000E704                            
0000E704                            loc_DEA2:
0000E704 5428 0025                  		addq.b	#2,$25(a0)
0000E708 4E75                       		rts	
0000E70A                            ; ===========================================================================
0000E70A                            
0000E70A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E70A 6100 F736                  		bsr.w	SpeedToPos
0000E70E 4E75                       		rts	
0000E710                            ; ===========================================================================
0000E710                            
0000E710                            Obj42_Type01:				; XREF: Obj42_Index2
0000E710 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E716 6600                       		bne.s	Obj42_FireMissile
0000E718 117C 000C 0020             		move.b	#$C,$20(a0)
0000E71E                            
0000E71E                            Obj42_FireMissile:
0000E71E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E724 6600                       		bne.s	locret_DF14
0000E726 4A28 0032                  		tst.b	$32(a0)
0000E72A 6600                       		bne.s	locret_DF14
0000E72C 117C 0001 0032             		move.b	#1,$32(a0)
0000E732 6100 FBBA                  		bsr.w	SingleObjLoad
0000E736 6600                       		bne.s	locret_DF14
0000E738 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E73C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E742 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E748 5169 000C                  		subq.w	#8,$C(a1)
0000E74C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E752 303C 0014                  		move.w	#$14,d0
0000E756 0828 0000 0022             		btst	#0,$22(a0)
0000E75C 6600                       		bne.s	loc_DF04
0000E75E 4440                       		neg.w	d0
0000E760 4469 0010                  		neg.w	$10(a1)
0000E764                            
0000E764                            loc_DF04:
0000E764 D169 0008                  		add.w	d0,8(a1)
0000E768 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E76E 137C 0001 0028             		move.b	#1,$28(a1)
0000E774                            
0000E774                            locret_DF14:
0000E774 4E75                       		rts	
0000E776                            ; ===========================================================================
0000E776                            
0000E776                            Obj42_Delete:				; XREF: Obj42_Index
0000E776 6000 F72C                  		bra.w	DeleteObject
0000E77A                            ; ===========================================================================
0000E77A                            Ani_obj42:
0000E77A                            	include "_anim\obj42.asm"
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A                            ; Animation script - Newtron enemy
0000E77A                            ; ---------------------------------------------------------------------------
0000E77A 0000                       		dc.w byte_DF24-Ani_obj42
0000E77C 0000                       		dc.w byte_DF28-Ani_obj42
0000E77E 0000                       		dc.w byte_DF30-Ani_obj42
0000E780 0000                       		dc.w byte_DF34-Ani_obj42
0000E782 0000                       		dc.w byte_DF38-Ani_obj42
0000E784 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E788 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E790 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E794 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E798 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E7A2                            		even
0000E7A2                            		even
0000E7A2                            
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            Map_obj42:
0000E7A2                            	include "_maps\obj42.asm"
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E7A2                            ; ---------------------------------------------------------------------------
0000E7A2 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E7A6 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E7AA 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E7AE 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E7B2 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E7B6 0000                       		dc.w byte_DFF8-Map_obj42
0000E7B8 03                         byte_DF58:	dc.b 3
0000E7B9 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E7BE F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E7C3 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E7C8 03                         byte_DF68:	dc.b 3
0000E7C9 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E7CE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7D3 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7D8 03                         byte_DF78:	dc.b 3
0000E7D9 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E7DE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7E3 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7E8 04                         byte_DF88:	dc.b 4
0000E7E9 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E7EE EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7F3 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E7F8 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E7FD 03                         byte_DF9D:	dc.b 3
0000E7FE F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E803 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E808 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E80D 02                         byte_DFAD:	dc.b 2
0000E80E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E813 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E818 03                         byte_DFB8:	dc.b 3
0000E819 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E81E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E823 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E828 03                         byte_DFC8:	dc.b 3
0000E829 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E82E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E833 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E838 03                         byte_DFD8:	dc.b 3
0000E839 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E83E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E843 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E848 03                         byte_DFE8:	dc.b 3
0000E849 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E84E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E853 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E858 00                         byte_DFF8:	dc.b 0
0000E85A 00                         		even
0000E85A 00                         		even
0000E85A                            
0000E85A                            ; ===========================================================================
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            ; Object 43 - Roller enemy (SYZ)
0000E85A                            ; ---------------------------------------------------------------------------
0000E85A                            
0000E85A                            Obj43:					; XREF: Obj_Index
0000E85A 7000                       		moveq	#0,d0
0000E85C 1028 0024                  		move.b	$24(a0),d0
0000E860 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E864 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E868                            ; ===========================================================================
0000E868 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E86A 0000                       		dc.w Obj43_Action-Obj43_Index
0000E86C                            ; ===========================================================================
0000E86C                            
0000E86C                            Obj43_Main:				; XREF: Obj43_Index
0000E86C 117C 000E 0016             		move.b	#$E,$16(a0)
0000E872 117C 0008 0017             		move.b	#8,$17(a0)
0000E878 6100 F556                  		bsr.w	ObjectFall
0000E87C 6100 0000                  		bsr.w	ObjHitFloor
0000E880 4A41                       		tst.w	d1
0000E882 6A00                       		bpl.s	locret_E052
0000E884 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E888 317C 0000 0012             		move.w	#0,$12(a0)
0000E88E 5428 0024                  		addq.b	#2,$24(a0)
0000E892 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E89A 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E8A0 117C 0004 0001             		move.b	#4,1(a0)
0000E8A6 117C 0004 0018             		move.b	#4,$18(a0)
0000E8AC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8B2                            
0000E8B2                            locret_E052:
0000E8B2 4E75                       		rts	
0000E8B4                            ; ===========================================================================
0000E8B4                            
0000E8B4                            Obj43_Action:				; XREF: Obj43_Index
0000E8B4 7000                       		moveq	#0,d0
0000E8B6 1028 0025                  		move.b	$25(a0),d0
0000E8BA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E8BE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E8C2 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E8C8 6100 C624                  		bsr.w	AnimateSprite
0000E8CC 3028 0008                  		move.w	8(a0),d0
0000E8D0 0240 FF80                  		andi.w	#$FF80,d0
0000E8D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8D8 0441 0080                  		subi.w	#$80,d1
0000E8DC 0241 FF80                  		andi.w	#$FF80,d1
0000E8E0 9041                       		sub.w	d1,d0
0000E8E2 0C40 0280                  		cmpi.w	#$280,d0
0000E8E6 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E8EA 6000 F57C                  		bra.w	DisplaySprite
0000E8EE                            ; ===========================================================================
0000E8EE                            
0000E8EE                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E8EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E8F2 7000                       		moveq	#0,d0
0000E8F4 1028 0023                  		move.b	$23(a0),d0
0000E8F8 6700                       		beq.s	Obj43_Delete
0000E8FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E900                            
0000E900                            Obj43_Delete:
0000E900 6000 F5A2                  		bra.w	DeleteObject
0000E904                            ; ===========================================================================
0000E904 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E906 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E908 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E90A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E90C                            ; ===========================================================================
0000E90C                            
0000E90C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E90C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E910 0440 0100                  		subi.w	#$100,d0
0000E914 6500                       		bcs.s	loc_E0D2
0000E916 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E91A 6500                       		bcs.s	loc_E0D2
0000E91C 5828 0025                  		addq.b	#4,$25(a0)
0000E920 117C 0002 001C             		move.b	#2,$1C(a0)
0000E926 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E92C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E932                            
0000E932                            loc_E0D2:
0000E932 588F                       		addq.l	#4,sp
0000E934 4E75                       		rts	
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E936 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E93C 6700                       		beq.s	loc_E0F8
0000E93E 5368 0030                  		subq.w	#1,$30(a0)
0000E942 6A00                       		bpl.s	locret_E0F6
0000E944 117C 0001 001C             		move.b	#1,$1C(a0)
0000E94A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E950 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E956                            
0000E956                            locret_E0F6:
0000E956 4E75                       		rts	
0000E958                            ; ===========================================================================
0000E958                            
0000E958                            loc_E0F8:
0000E958 5428 0025                  		addq.b	#2,$25(a0)
0000E95C 4E75                       		rts	
0000E95E                            ; ===========================================================================
0000E95E                            
0000E95E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E95E 6100 0000                  		bsr.w	Obj43_Stop
0000E962 6100 F4DE                  		bsr.w	SpeedToPos
0000E966 6100 0000                  		bsr.w	ObjHitFloor
0000E96A 0C41 FFF8                  		cmpi.w	#-8,d1
0000E96E 6D00                       		blt.s	Obj43_Jump
0000E970 0C41 000C                  		cmpi.w	#$C,d1
0000E974 6C00                       		bge.s	Obj43_Jump
0000E976 D368 000C                  		add.w	d1,$C(a0)
0000E97A 4E75                       		rts	
0000E97C                            ; ===========================================================================
0000E97C                            
0000E97C                            Obj43_Jump:
0000E97C 5428 0025                  		addq.b	#2,$25(a0)
0000E980 08E8 0000 0032             		bset	#0,$32(a0)
0000E986 6700                       		beq.s	locret_E12E
0000E988 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E98E                            
0000E98E                            locret_E12E:
0000E98E 4E75                       		rts	
0000E990                            ; ===========================================================================
0000E990                            
0000E990                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E990 6100 F43E                  		bsr.w	ObjectFall
0000E994 4A68 0012                  		tst.w	$12(a0)
0000E998 6B00                       		bmi.s	locret_E150
0000E99A 6100 0000                  		bsr.w	ObjHitFloor
0000E99E 4A41                       		tst.w	d1
0000E9A0 6A00                       		bpl.s	locret_E150
0000E9A2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E9A6 5528 0025                  		subq.b	#2,$25(a0)
0000E9AA 317C 0000 0012             		move.w	#0,$12(a0)
0000E9B0                            
0000E9B0                            locret_E150:
0000E9B0 4E75                       		rts	
0000E9B2                            
0000E9B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9B2                            
0000E9B2                            
0000E9B2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E9B2 4A28 0032                  		tst.b	$32(a0)
0000E9B6 6B00                       		bmi.s	locret_E188
0000E9B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9BC 0440 0030                  		subi.w	#$30,d0
0000E9C0 9068 0008                  		sub.w	8(a0),d0
0000E9C4 6400                       		bcc.s	locret_E188
0000E9C6 117C 0000 001C             		move.b	#0,$1C(a0)
0000E9CC 117C 000E 0020             		move.b	#$E,$20(a0)
0000E9D2 4268 0010                  		clr.w	$10(a0)
0000E9D6 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E9DC 117C 0002 0025             		move.b	#2,$25(a0)
0000E9E2 08E8 0007 0032             		bset	#7,$32(a0)
0000E9E8                            
0000E9E8                            locret_E188:
0000E9E8 4E75                       		rts	
0000E9EA                            ; End of function Obj43_Stop
0000E9EA                            
0000E9EA                            ; ===========================================================================
0000E9EA                            Ani_obj43:
0000E9EA                            	include "_anim\obj43.asm"
0000E9EA                            ; ---------------------------------------------------------------------------
0000E9EA                            ; Animation script - Roller enemy
0000E9EA                            ; ---------------------------------------------------------------------------
0000E9EA 0000                       		dc.w byte_E190-Ani_obj43
0000E9EC 0000                       		dc.w byte_E196-Ani_obj43
0000E9EE 0000                       		dc.w byte_E19C-Ani_obj43
0000E9F0 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E9F6 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E9FC 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EA02 00                         		even
0000EA02 00                         		even
0000EA02                            
0000EA02                            ; ---------------------------------------------------------------------------
0000EA02                            ; Sprite mappings - Roller enemy (SYZ)
0000EA02                            ; ---------------------------------------------------------------------------
0000EA02                            Map_obj43:
0000EA02                            	include "_maps\obj43.asm"
0000EA02                            Map_61da:
0000EA02 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EA04 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EA06 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EA08 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EA0A 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EA0C 02                         Map_61da_A: 	dc.b $2
0000EA0D DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EA12 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EA17 02                         Map_61da_15: 	dc.b $2
0000EA18 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EA1D FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EA22 01                         Map_61da_20: 	dc.b $1
0000EA23 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EA28 01                         Map_61da_26: 	dc.b $1
0000EA29 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EA2E 01                         Map_61da_2C: 	dc.b $1
0000EA2F F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EA34                            	even
0000EA34                            	even
0000EA34                            
0000EA34                            ; ===========================================================================
0000EA34                            ; ---------------------------------------------------------------------------
0000EA34                            ; Object 44 - walls (GHZ)
0000EA34                            ; ---------------------------------------------------------------------------
0000EA34                            
0000EA34                            Obj44:					; XREF: Obj_Index
0000EA34 7000                       		moveq	#0,d0
0000EA36 1028 0024                  		move.b	$24(a0),d0
0000EA3A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EA3E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EA42                            ; ===========================================================================
0000EA42 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EA44 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EA46 0000                       		dc.w Obj44_Display-Obj44_Index
0000EA48                            ; ===========================================================================
0000EA48                            
0000EA48                            Obj44_Main:				; XREF: Obj44_Index
0000EA48 5428 0024                  		addq.b	#2,$24(a0)
0000EA4C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EA54 317C 434C 0002             		move.w	#$434C,2(a0)
0000EA5A 0028 0004 0001             		ori.b	#4,1(a0)
0000EA60 117C 0008 0019             		move.b	#8,$19(a0)
0000EA66 117C 0006 0018             		move.b	#6,$18(a0)
0000EA6C 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA72 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA78 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA7A 5428 0024                  		addq.b	#2,$24(a0)
0000EA7E 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA80                            ; ===========================================================================
0000EA80                            
0000EA80                            Obj44_Solid:				; XREF: Obj44_Index
0000EA80 323C 0013                  		move.w	#$13,d1
0000EA84 343C 0028                  		move.w	#$28,d2
0000EA88 6100 A6C0                  		bsr.w	Obj44_SolidWall
0000EA8C                            
0000EA8C                            Obj44_Display:				; XREF: Obj44_Index
0000EA8C 6100 F3DA                  		bsr.w	DisplaySprite
0000EA90 3028 0008                  		move.w	8(a0),d0
0000EA94 0240 FF80                  		andi.w	#$FF80,d0
0000EA98 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA9C 0441 0080                  		subi.w	#$80,d1
0000EAA0 0241 FF80                  		andi.w	#$FF80,d1
0000EAA4 9041                       		sub.w	d1,d0
0000EAA6 0C40 0280                  		cmpi.w	#$280,d0
0000EAAA 6200 F3F8                  		bhi.w	DeleteObject
0000EAAE 4E75                       		rts	
0000EAB0                            ; ===========================================================================
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            ; Sprite mappings - walls (GHZ)
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            Map_obj44:
0000EAB0                            	include "_maps\obj44.asm"
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0                            ; Sprite mappings - walls (GHZ)
0000EAB0                            ; ---------------------------------------------------------------------------
0000EAB0 0000                       		dc.w byte_E256-Map_obj44
0000EAB2 0000                       		dc.w byte_E26B-Map_obj44
0000EAB4 0000                       		dc.w byte_E280-Map_obj44
0000EAB6 04                         byte_E256:	dc.b 4
0000EAB7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EABC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EAC1 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EAC6 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EACB 04                         byte_E26B:	dc.b 4
0000EACC E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EAD1 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EAD6 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EADB 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EAE0 04                         byte_E280:	dc.b 4
0000EAE1 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EAE6 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EAEB 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EAF0 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EAF6 00                         		even
0000EAF6 00                         		even
0000EAF6                            
0000EAF6                            ; ===========================================================================
0000EAF6                            ; ---------------------------------------------------------------------------
0000EAF6                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EAF6                            ; ---------------------------------------------------------------------------
0000EAF6                            
0000EAF6                            Obj13:					; XREF: Obj_Index
0000EAF6 7000                       		moveq	#0,d0
0000EAF8 1028 0024                  		move.b	$24(a0),d0
0000EAFC 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EB00 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EB04 6000 0000                  		bra.w	Obj14_ChkDel
0000EB08                            ; ===========================================================================
0000EB08 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EB0A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EB0C                            ; ---------------------------------------------------------------------------
0000EB0C                            ;
0000EB0C                            ; Lava ball production rates
0000EB0C                            ;
0000EB0C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EB12                            ; ===========================================================================
0000EB12                            
0000EB12                            Obj13_Main:				; XREF: Obj13_Index
0000EB12 5428 0024                  		addq.b	#2,$24(a0)
0000EB16 1028 0028                  		move.b	$28(a0),d0
0000EB1A E848                       		lsr.w	#4,d0
0000EB1C 0240 000F                  		andi.w	#$F,d0
0000EB20 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EB26 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EB2C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EB32                            
0000EB32                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EB32 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EB36 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EB38 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EB3E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EB42 6600                       		bne.s	locret_E302
0000EB44 6100 F7A8                  		bsr.w	SingleObjLoad
0000EB48 6600                       		bne.s	locret_E302
0000EB4A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EB4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB54 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB5A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EB60                            
0000EB60                            locret_E302:
0000EB60 4E75                       		rts	
0000EB62                            ; ===========================================================================
0000EB62                            ; ---------------------------------------------------------------------------
0000EB62                            ; Object 14 - lava balls (MZ, SLZ)
0000EB62                            ; ---------------------------------------------------------------------------
0000EB62                            
0000EB62                            Obj14:					; XREF: Obj_Index
0000EB62 7000                       		moveq	#0,d0
0000EB64 1028 0024                  		move.b	$24(a0),d0
0000EB68 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB6C 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB70 6000 F2F6                  		bra.w	DisplaySprite
0000EB74                            ; ===========================================================================
0000EB74 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB76 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB78 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB7A                            
0000EB7A FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EB84 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EB8C                            ; ===========================================================================
0000EB8C                            
0000EB8C                            Obj14_Main:				; XREF: Obj14_Index
0000EB8C 5428 0024                  		addq.b	#2,$24(a0)
0000EB90 117C 0008 0016             		move.b	#8,$16(a0)
0000EB96 117C 0008 0017             		move.b	#8,$17(a0)
0000EB9C 217C 0000 BAEC 0004        		move.l	#Map_obj14,4(a0)
0000EBA4 317C 0345 0002             		move.w	#$345,2(a0)
0000EBAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EBB0 6600                       		bne.s	loc_E35A
0000EBB2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EBB8                            
0000EBB8                            loc_E35A:
0000EBB8 117C 0004 0001             		move.b	#4,1(a0)
0000EBBE 117C 0003 0018             		move.b	#3,$18(a0)
0000EBC4 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EBCA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EBD0 4A28 0029                  		tst.b	$29(a0)
0000EBD4 6700                       		beq.s	Obj14_SetSpeed
0000EBD6 5428 0018                  		addq.b	#2,$18(a0)
0000EBDA                            
0000EBDA                            Obj14_SetSpeed:
0000EBDA 7000                       		moveq	#0,d0
0000EBDC 1028 0028                  		move.b	$28(a0),d0
0000EBE0 D040                       		add.w	d0,d0
0000EBE2 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EBE8 117C 0008 0019             		move.b	#8,$19(a0)
0000EBEE 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EBF4 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EBF6 117C 0010 0019             		move.b	#$10,$19(a0)
0000EBFC 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EC02 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EC08 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EC0E                            
0000EC0E                            Obj14_PlaySnd:
0000EC0E 303C 00AE                  		move.w	#$AE,d0
0000EC12 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EC18                            
0000EC18                            Obj14_Action:				; XREF: Obj14_Index
0000EC18 7000                       		moveq	#0,d0
0000EC1A 1028 0028                  		move.b	$28(a0),d0
0000EC1E D040                       		add.w	d0,d0
0000EC20 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EC24 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EC28 6100 F218                  		bsr.w	SpeedToPos
0000EC2C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EC32 6100 C2BA                  		bsr.w	AnimateSprite
0000EC36                            
0000EC36                            Obj14_ChkDel:				; XREF: Obj13
0000EC36 3028 0008                  		move.w	8(a0),d0
0000EC3A 0240 FF80                  		andi.w	#$FF80,d0
0000EC3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC42 0441 0080                  		subi.w	#$80,d1
0000EC46 0241 FF80                  		andi.w	#$FF80,d1
0000EC4A 9041                       		sub.w	d1,d0
0000EC4C 0C40 0280                  		cmpi.w	#$280,d0
0000EC50 6200 F252                  		bhi.w	DeleteObject
0000EC54 4E75                       		rts	
0000EC56                            ; ===========================================================================
0000EC56 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC5A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC5E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EC62 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EC66 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EC68                            ; ===========================================================================
0000EC68                            ; lavaball types 00-03 fly up and fall back down
0000EC68                            
0000EC68                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EC68 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC6E 3028 0030                  		move.w	$30(a0),d0
0000EC72 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC76 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC78 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC7C                            
0000EC7C                            loc_E41E:
0000EC7C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC82 4A68 0012                  		tst.w	$12(a0)
0000EC86 6A00                       		bpl.s	locret_E430
0000EC88 08E8 0001 0022             		bset	#1,$22(a0)
0000EC8E                            
0000EC8E                            locret_E430:
0000EC8E 4E75                       		rts	
0000EC90                            ; ===========================================================================
0000EC90                            ; lavaball type	04 flies up until it hits the ceiling
0000EC90                            
0000EC90                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EC90 08E8 0001 0022             		bset	#1,$22(a0)
0000EC96 6100 0000                  		bsr.w	ObjHitCeiling
0000EC9A 4A41                       		tst.w	d1
0000EC9C 6A00                       		bpl.s	locret_E452
0000EC9E 117C 0008 0028             		move.b	#8,$28(a0)
0000ECA4 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000ECB0                            
0000ECB0                            locret_E452:
0000ECB0 4E75                       		rts	
0000ECB2                            ; ===========================================================================
0000ECB2                            ; lavaball type	05 falls down until it hits the	floor
0000ECB2                            
0000ECB2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000ECB2 08A8 0001 0022             		bclr	#1,$22(a0)
0000ECB8 6100 0000                  		bsr.w	ObjHitFloor
0000ECBC 4A41                       		tst.w	d1
0000ECBE 6A00                       		bpl.s	locret_E474
0000ECC0 117C 0008 0028             		move.b	#8,$28(a0)
0000ECC6 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECCC 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000ECD2                            
0000ECD2                            locret_E474:
0000ECD2 4E75                       		rts	
0000ECD4                            ; ===========================================================================
0000ECD4                            ; lavaball types 06-07 move sideways
0000ECD4                            
0000ECD4                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000ECD4 08E8 0000 0022             		bset	#0,$22(a0)
0000ECDA 76F8                       		moveq	#-8,d3
0000ECDC 6100 0000                  		bsr.w	ObjHitWallLeft
0000ECE0 4A41                       		tst.w	d1
0000ECE2 6A00                       		bpl.s	locret_E498
0000ECE4 117C 0008 0028             		move.b	#8,$28(a0)
0000ECEA 117C 0003 001C             		move.b	#3,$1C(a0)
0000ECF0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ECF6                            
0000ECF6                            locret_E498:
0000ECF6 4E75                       		rts	
0000ECF8                            ; ===========================================================================
0000ECF8                            
0000ECF8                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000ECF8 08A8 0000 0022             		bclr	#0,$22(a0)
0000ECFE 7608                       		moveq	#8,d3
0000ED00 6100 0000                  		bsr.w	ObjHitWallRight
0000ED04 4A41                       		tst.w	d1
0000ED06 6A00                       		bpl.s	locret_E4BC
0000ED08 117C 0008 0028             		move.b	#8,$28(a0)
0000ED0E 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED14 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED1A                            
0000ED1A                            locret_E4BC:
0000ED1A 4E75                       		rts	
0000ED1C                            ; ===========================================================================
0000ED1C                            
0000ED1C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ED1C 4E75                       		rts	
0000ED1E                            ; ===========================================================================
0000ED1E                            
0000ED1E                            Obj14_Delete:				; XREF: Obj14_Index
0000ED1E 6000 F184                  		bra.w	DeleteObject
0000ED22                            ; ===========================================================================
0000ED22                            Ani_obj14:
0000ED22                            	include "_anim\obj14.asm"
0000ED22                            ; ---------------------------------------------------------------------------
0000ED22                            ; Animation script - lava balls
0000ED22                            ; ---------------------------------------------------------------------------
0000ED22 0000                       		dc.w byte_E4CC-Ani_obj14
0000ED24 0000                       		dc.w byte_E4D2-Ani_obj14
0000ED26 0000                       		dc.w byte_E4D6-Ani_obj14
0000ED28 0000                       		dc.w byte_E4DC-Ani_obj14
0000ED2A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ED30 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ED34 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ED3A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ED3E                            		even
0000ED3E                            		even
0000ED3E                            
0000ED3E                            ; ===========================================================================
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            ; Object 6D - flame thrower (SBZ)
0000ED3E                            ; ---------------------------------------------------------------------------
0000ED3E                            
0000ED3E                            Obj6D:					; XREF: Obj_Index
0000ED3E 7000                       		moveq	#0,d0
0000ED40 1028 0024                  		move.b	$24(a0),d0
0000ED44 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ED48 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ED4C                            ; ===========================================================================
0000ED4C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ED4E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ED50                            ; ===========================================================================
0000ED50                            
0000ED50                            Obj6D_Main:				; XREF: Obj6D_Index
0000ED50 5428 0024                  		addq.b	#2,$24(a0)
0000ED54 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ED5C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ED62 0028 0004 0001             		ori.b	#4,1(a0)
0000ED68 117C 0001 0018             		move.b	#1,$18(a0)
0000ED6E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED74 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED7A 1028 0028                  		move.b	$28(a0),d0
0000ED7E 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED82 D040                       		add.w	d0,d0		; multiply by 2
0000ED84 3140 0030                  		move.w	d0,$30(a0)
0000ED88 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ED8C 1028 0028                  		move.b	$28(a0),d0
0000ED90 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ED94 EB48                       		lsl.w	#5,d0		; multiply by $20
0000ED96 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ED9A 117C 000A 0036             		move.b	#$A,$36(a0)
0000EDA0 0828 0001 0022             		btst	#1,$22(a0)
0000EDA6 6700                       		beq.s	Obj6D_Action
0000EDA8 117C 0002 001C             		move.b	#2,$1C(a0)
0000EDAE 117C 0015 0036             		move.b	#$15,$36(a0)
0000EDB4                            
0000EDB4                            Obj6D_Action:				; XREF: Obj6D_Index
0000EDB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EDB8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EDBA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EDC0 0868 0000 001C             		bchg	#0,$1C(a0)
0000EDC6 6700                       		beq.s	loc_E57A
0000EDC8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EDCE 303C 00B3                  		move.w	#$B3,d0
0000EDD2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000EDD8                            
0000EDD8                            loc_E57A:
0000EDD8 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EDDE 6100 C10E                  		bsr.w	AnimateSprite
0000EDE2 117C 0000 0020             		move.b	#0,$20(a0)
0000EDE8 1028 0036                  		move.b	$36(a0),d0
0000EDEC B028 001A                  		cmp.b	$1A(a0),d0
0000EDF0 6600                       		bne.s	Obj6D_ChkDel
0000EDF2 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EDF8                            
0000EDF8                            Obj6D_ChkDel:
0000EDF8 3028 0008                  		move.w	8(a0),d0
0000EDFC 0240 FF80                  		andi.w	#$FF80,d0
0000EE00 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE04 0441 0080                  		subi.w	#$80,d1
0000EE08 0241 FF80                  		andi.w	#$FF80,d1
0000EE0C 9041                       		sub.w	d1,d0
0000EE0E 0C40 0280                  		cmpi.w	#$280,d0
0000EE12 6200 F090                  		bhi.w	DeleteObject
0000EE16 6000 F050                  		bra.w	DisplaySprite
0000EE1A                            ; ===========================================================================
0000EE1A                            Ani_obj6D:
0000EE1A                            	include "_anim\obj6D.asm"
0000EE1A                            ; ---------------------------------------------------------------------------
0000EE1A                            ; Animation script - flamethrower (SBZ)
0000EE1A                            ; ---------------------------------------------------------------------------
0000EE1A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EE1C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EE1E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EE20 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EE22 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EE30 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EE3A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EE48 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EE52                            		even
0000EE52                            		even
0000EE52                            
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Sprite mappings - flame thrower (SBZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            Map_obj6D:
0000EE52                            	include "_maps\obj6D.asm"
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52                            ; Sprite mappings - flame thrower (SBZ)
0000EE52                            ; ---------------------------------------------------------------------------
0000EE52 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EE56 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EE5A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EE5E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EE62 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EE66 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE6A 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE6E 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE72 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE76 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE7A 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE7E 01                         byte_E620:	dc.b 1
0000EE7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE84 02                         byte_E626:	dc.b 2
0000EE85 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE8A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE8F 02                         byte_E631:	dc.b 2
0000EE90 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE95 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE9A 03                         byte_E63C:	dc.b 3
0000EE9B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEA5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEAA 03                         byte_E64C:	dc.b 3
0000EEAB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEB0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEB5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEBA 04                         byte_E65C:	dc.b 4
0000EEBB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEC0 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EECA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EECF 04                         byte_E671:	dc.b 4
0000EED0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EED5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEDA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEDF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEE4 05                         byte_E686:	dc.b 5
0000EEE5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEEA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEEF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEF4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEF9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEFE 05                         byte_E6A0:	dc.b 5
0000EEFF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF04 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF09 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF0E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF13 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF18 06                         byte_E6BA:	dc.b 6
0000EF19 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF1E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF23 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF28 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF2D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF32 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF37 06                         byte_E6D9:	dc.b 6
0000EF38 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF3D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF42 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF4C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF51 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF56 01                         byte_E6F8:	dc.b 1
0000EF57 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF5C 02                         byte_E6FE:	dc.b 2
0000EF5D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF62 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF67 02                         byte_E709:	dc.b 2
0000EF68 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF6D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF72 03                         byte_E714:	dc.b 3
0000EF73 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF78 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF7D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF82 03                         byte_E724:	dc.b 3
0000EF83 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF88 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF8D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF92 04                         byte_E734:	dc.b 4
0000EF93 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF98 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFA7 04                         byte_E749:	dc.b 4
0000EFA8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFAD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFB2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFB7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFBC 05                         byte_E75E:	dc.b 5
0000EFBD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EFC2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFC7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFCC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFD1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFD6 05                         byte_E778:	dc.b 5
0000EFD7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFDC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFE1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFE6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFEB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFF0 06                         byte_E792:	dc.b 6
0000EFF1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EFF6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EFFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F000 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F005 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F00A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F00F 06                         byte_E7B1:	dc.b 6
0000F010 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F015 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F01A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F01F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F024 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F029 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F02E                            		even
0000F02E                            		even
0000F02E                            
0000F02E                            ; ===========================================================================
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F02E                            ; ---------------------------------------------------------------------------
0000F02E                            
0000F02E                            Obj46:					; XREF: Obj_Index
0000F02E 7000                       		moveq	#0,d0
0000F030 1028 0024                  		move.b	$24(a0),d0
0000F034 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F038 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F03C                            ; ===========================================================================
0000F03C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F03E 0000                       		dc.w Obj46_Action-Obj46_Index
0000F040                            ; ===========================================================================
0000F040                            
0000F040                            Obj46_Main:				; XREF: Obj46_Index
0000F040 5428 0024                  		addq.b	#2,$24(a0)
0000F044 117C 000F 0016             		move.b	#$F,$16(a0)
0000F04A 117C 000F 0017             		move.b	#$F,$17(a0)
0000F050 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F058 317C 4000 0002             		move.w	#$4000,2(a0)
0000F05E 117C 0004 0001             		move.b	#4,1(a0)
0000F064 117C 0003 0018             		move.b	#3,$18(a0)
0000F06A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F070 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F076 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F07C                            
0000F07C                            Obj46_Action:				; XREF: Obj46_Index
0000F07C 4A28 0001                  		tst.b	1(a0)
0000F080 6A00                       		bpl.s	Obj46_ChkDel
0000F082 7000                       		moveq	#0,d0
0000F084 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F088 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F08C D040                       		add.w	d0,d0
0000F08E 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F092 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F096 323C 001B                  		move.w	#$1B,d1
0000F09A 343C 0010                  		move.w	#$10,d2
0000F09E 363C 0011                  		move.w	#$11,d3
0000F0A2 3828 0008                  		move.w	8(a0),d4
0000F0A6 6100 0000                  		bsr.w	SolidObject
0000F0AA                            
0000F0AA                            Obj46_ChkDel:
0000F0AA 6100 EDBC                  		bsr.w	DisplaySprite
0000F0AE 3028 0008                  		move.w	8(a0),d0
0000F0B2 0240 FF80                  		andi.w	#$FF80,d0
0000F0B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0BA 0441 0080                  		subi.w	#$80,d1
0000F0BE 0241 FF80                  		andi.w	#$FF80,d1
0000F0C2 9041                       		sub.w	d1,d0
0000F0C4 0C40 0280                  		cmpi.w	#$280,d0
0000F0C8 6200 EDDA                  		bhi.w	DeleteObject
0000F0CC 4E75                       		rts	
0000F0CE                            ; ===========================================================================
0000F0CE 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F0D0 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F0D2 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F0D4 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F0D6 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F0D8                            ; ===========================================================================
0000F0D8                            
0000F0D8                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F0D8 4E75                       		rts	
0000F0DA                            ; ===========================================================================
0000F0DA                            
0000F0DA                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F0DA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0DE 9068 0008                  		sub.w	8(a0),d0
0000F0E2 6400                       		bcc.s	loc_E888
0000F0E4 4440                       		neg.w	d0
0000F0E6                            
0000F0E6                            loc_E888:
0000F0E6 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F0EA 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F0EC 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F0F2                            
0000F0F2                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F0F2 7000                       		moveq	#0,d0
0000F0F4 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F0F8 0828 0003 0028             		btst	#3,$28(a0)
0000F0FE 6700                       		beq.s	loc_E8A8
0000F100 4440                       		neg.w	d0
0000F102 0640 0010                  		addi.w	#$10,d0
0000F106                            
0000F106                            loc_E8A8:
0000F106 3228 0030                  		move.w	$30(a0),d1
0000F10A 9240                       		sub.w	d0,d1
0000F10C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F110 4E75                       		rts	
0000F112                            ; ===========================================================================
0000F112                            
0000F112                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F112 6100 ED2E                  		bsr.w	SpeedToPos
0000F116 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F11C 6100 0000                  		bsr.w	ObjHitFloor
0000F120 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F122 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F126 D368 000C                  		add.w	d1,$C(a0)
0000F12A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F12E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F134 117C 0004 0028             		move.b	#4,$28(a0)
0000F13A 3011                       		move.w	(a1),d0
0000F13C 0240 03FF                  		andi.w	#$3FF,d0
0000F140 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F144 6400                       		bcc.s	locret_E8EE
0000F146 117C 0000 0028             		move.b	#0,$28(a0)
0000F14C                            
0000F14C                            locret_E8EE:
0000F14C 4E75                       		rts	
0000F14E                            ; ===========================================================================
0000F14E                            
0000F14E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F14E 7000                       		moveq	#0,d0
0000F150 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F154 E648                       		lsr.w	#3,d0
0000F156 3228 0030                  		move.w	$30(a0),d1
0000F15A 9240                       		sub.w	d0,d1
0000F15C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F160 4E75                       		rts	
0000F162                            ; ===========================================================================
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            Map_obj46:
0000F162                            	include "_maps\obj46.asm"
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F162                            ; ---------------------------------------------------------------------------
0000F162 0000                       		dc.w byte_E906-Map_obj46
0000F164 01                         byte_E906:	dc.b 1
0000F165 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F16A                            		even
0000F16A                            		even
0000F16A                            
0000F16A                            ; ===========================================================================
0000F16A                            ; ---------------------------------------------------------------------------
0000F16A                            ; Object 12 - lamp (SYZ)
0000F16A                            ; ---------------------------------------------------------------------------
0000F16A                            
0000F16A                            Obj12:					; XREF: Obj_Index
0000F16A 7000                       		moveq	#0,d0
0000F16C 1028 0024                  		move.b	$24(a0),d0
0000F170 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F174 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F178                            ; ===========================================================================
0000F178 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F17A 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F17C                            ; ===========================================================================
0000F17C                            
0000F17C                            Obj12_Main:				; XREF: Obj12_Index
0000F17C 5428 0024                  		addq.b	#2,$24(a0)
0000F180 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F188 317C 0000 0002             		move.w	#0,2(a0)
0000F18E 117C 0004 0001             		move.b	#4,1(a0)
0000F194 117C 0010 0019             		move.b	#$10,$19(a0)
0000F19A 117C 0006 0018             		move.b	#6,$18(a0)
0000F1A0                            
0000F1A0                            Obj12_Animate:				; XREF: Obj12_Index
0000F1A0 5328 001E                  		subq.b	#1,$1E(a0)
0000F1A4 6A00                       		bpl.s	Obj12_ChkDel
0000F1A6 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1AC 5228 001A                  		addq.b	#1,$1A(a0)
0000F1B0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F1B6 6500                       		bcs.s	Obj12_ChkDel
0000F1B8 117C 0000 001A             		move.b	#0,$1A(a0)
0000F1BE                            
0000F1BE                            Obj12_ChkDel:
0000F1BE 3028 0008                  		move.w	8(a0),d0
0000F1C2 0240 FF80                  		andi.w	#$FF80,d0
0000F1C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1CA 0441 0080                  		subi.w	#$80,d1
0000F1CE 0241 FF80                  		andi.w	#$FF80,d1
0000F1D2 9041                       		sub.w	d1,d0
0000F1D4 0C40 0280                  		cmpi.w	#$280,d0
0000F1D8 6200 ECCA                  		bhi.w	DeleteObject
0000F1DC 6000 EC8A                  		bra.w	DisplaySprite
0000F1E0                            ; ===========================================================================
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            ; Sprite mappings - lamp (SYZ)
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            Map_obj12:
0000F1E0                            	include "_maps\obj12.asm"
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0                            ; Sprite mappings - lamp (SYZ)
0000F1E0                            ; ---------------------------------------------------------------------------
0000F1E0 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F1E4 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F1E8 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F1EC 02                         byte_E98E:	dc.b 2
0000F1ED F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F1F2 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F1F7 02                         byte_E999:	dc.b 2
0000F1F8 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F1FD 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F202 02                         byte_E9A4:	dc.b 2
0000F203 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F208 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F20D 02                         byte_E9AF:	dc.b 2
0000F20E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F213 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F218 02                         byte_E9BA:	dc.b 2
0000F219 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F21E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F223 02                         byte_E9C5:	dc.b 2
0000F224 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F229 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F22E                            		even
0000F22E                            		even
0000F22E                            
0000F22E                            ; ===========================================================================
0000F22E                            ; ---------------------------------------------------------------------------
0000F22E                            ; Object 47 - pinball bumper (SYZ)
0000F22E                            ; ---------------------------------------------------------------------------
0000F22E                            
0000F22E                            Obj47:					; XREF: Obj_Index
0000F22E 7000                       		moveq	#0,d0
0000F230 1028 0024                  		move.b	$24(a0),d0
0000F234 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F238 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F23C                            ; ===========================================================================
0000F23C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F23E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            Obj47_Main:				; XREF: Obj47_Index
0000F240 5428 0024                  		addq.b	#2,$24(a0)
0000F244 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F24C 317C 0380 0002             		move.w	#$380,2(a0)
0000F252 117C 0004 0001             		move.b	#4,1(a0)
0000F258 117C 0010 0019             		move.b	#$10,$19(a0)
0000F25E 117C 0001 0018             		move.b	#1,$18(a0)
0000F264 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F26A                            
0000F26A                            Obj47_Hit:				; XREF: Obj47_Index
0000F26A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F26E 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F272 4228 0021                  		clr.b	$21(a0)
0000F276 43F8 D000                  		lea	($FFFFD000).w,a1
0000F27A 3228 0008                  		move.w	8(a0),d1
0000F27E 3428 000C                  		move.w	$C(a0),d2
0000F282 9269 0008                  		sub.w	8(a1),d1
0000F286 9469 000C                  		sub.w	$C(a1),d2
0000F28A 4EB9 0000 2FD0             		jsr	(CalcAngle).l
0000F290 4EB9 0000 2D02             		jsr	(CalcSine).l
0000F296 C3FC F900                  		muls.w	#-$700,d1
0000F29A E081                       		asr.l	#8,d1
0000F29C 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F2A0 C1FC F900                  		muls.w	#-$700,d0
0000F2A4 E080                       		asr.l	#8,d0
0000F2A6 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F2AA 08E9 0001 0022             		bset	#1,$22(a1)
0000F2B0 08A9 0004 0022             		bclr	#4,$22(a1)
0000F2B6 08A9 0005 0022             		bclr	#5,$22(a1)
0000F2BC 4229 003C                  		clr.b	$3C(a1)
0000F2C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F2C6 303C 00B4                  		move.w	#$B4,d0
0000F2CA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F2D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2D4 7000                       		moveq	#0,d0
0000F2D6 1028 0023                  		move.b	$23(a0),d0
0000F2DA 6700                       		beq.s	Obj47_Score
0000F2DC 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F2E2 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F2E4 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F2E8                            
0000F2E8                            Obj47_Score:
0000F2E8 7001                       		moveq	#1,d0
0000F2EA 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F2F0 6100 EFFC                  		bsr.w	SingleObjLoad
0000F2F4 6600                       		bne.s	Obj47_Display
0000F2F6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F2FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F300 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F306 137C 0004 001A             		move.b	#4,$1A(a1)
0000F30C                            
0000F30C                            Obj47_Display:
0000F30C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F312 6100 BBDA                  		bsr.w	AnimateSprite
0000F316 3028 0008                  		move.w	8(a0),d0
0000F31A 0240 FF80                  		andi.w	#$FF80,d0
0000F31E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F322 0441 0080                  		subi.w	#$80,d1
0000F326 0241 FF80                  		andi.w	#$FF80,d1
0000F32A 9041                       		sub.w	d1,d0
0000F32C 0C40 0280                  		cmpi.w	#$280,d0
0000F330 6200                       		bhi.s	Obj47_ChkHit
0000F332 6000 EB34                  		bra.w	DisplaySprite
0000F336                            ; ===========================================================================
0000F336                            
0000F336                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F336 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F33A 7000                       		moveq	#0,d0
0000F33C 1028 0023                  		move.b	$23(a0),d0
0000F340 6700                       		beq.s	Obj47_Delete
0000F342 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F348                            
0000F348                            Obj47_Delete:
0000F348 6000 EB5A                  		bra.w	DeleteObject
0000F34C                            ; ===========================================================================
0000F34C                            Ani_obj47:
0000F34C                            	include "_anim\obj47.asm"
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C                            ; Animation script - flamethrower (SBZ)
0000F34C                            ; ---------------------------------------------------------------------------
0000F34C 0000                       		dc.w byte_EAF4-Ani_obj47
0000F34E 0000                       		dc.w byte_EAF8-Ani_obj47
0000F350 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F354 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F35C                            		even
0000F35C                            		even
0000F35C                            
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            ; Sprite mappings - pinball bumper (SYZ)
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            Map_obj47:
0000F35C                            	include "_maps\obj47.asm"
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C                            ; Sprite mappings - pinball bumper (SYZ)
0000F35C                            ; ---------------------------------------------------------------------------
0000F35C 0000                       		dc.w byte_EB06-Map_obj47
0000F35E 0000                       		dc.w byte_EB11-Map_obj47
0000F360 0000                       		dc.w byte_EB1C-Map_obj47
0000F362 02                         byte_EB06:	dc.b 2
0000F363 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F368 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F36D 02                         byte_EB11:	dc.b 2
0000F36E F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F373 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F378 02                         byte_EB1C:	dc.b 2
0000F379 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F37E F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F384 00                         		even
0000F384 00                         		even
0000F384                            
0000F384                            ; ===========================================================================
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            ; Object 0D - signpost at the end of a level
0000F384                            ; ---------------------------------------------------------------------------
0000F384                            
0000F384                            Obj0D:					; XREF: Obj_Index
0000F384 7000                       		moveq	#0,d0
0000F386 1028 0024                  		move.b	$24(a0),d0
0000F38A 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F38E 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F392 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F398 6100 BB54                  		bsr.w	AnimateSprite
0000F39C 6100 EACA                  		bsr.w	DisplaySprite
0000F3A0 3028 0008                  		move.w	8(a0),d0
0000F3A4 0240 FF80                  		andi.w	#$FF80,d0
0000F3A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3AC 0441 0080                  		subi.w	#$80,d1
0000F3B0 0241 FF80                  		andi.w	#$FF80,d1
0000F3B4 9041                       		sub.w	d1,d0
0000F3B6 0C40 0280                  		cmpi.w	#$280,d0
0000F3BA 6200 EAE8                  		bhi.w	DeleteObject
0000F3BE 4E75                       		rts	
0000F3C0                            ; ===========================================================================
0000F3C0 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F3C2 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F3C4 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F3C6 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F3C8 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F3CA                            ; ===========================================================================
0000F3CA                            
0000F3CA                            Obj0D_Main:				; XREF: Obj0D_Index
0000F3CA 5428 0024                  		addq.b	#2,$24(a0)
0000F3CE 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F3D6 317C 0680 0002             		move.w	#$680,2(a0)
0000F3DC 117C 0004 0001             		move.b	#4,1(a0)
0000F3E2 117C 0018 0019             		move.b	#$18,$19(a0)
0000F3E8 117C 0004 0018             		move.b	#4,$18(a0)
0000F3EE                            
0000F3EE                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F3EE 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3F2 9068 0008                  		sub.w	8(a0),d0
0000F3F6 6500                       		bcs.s	locret_EBBA
0000F3F8 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F3FC 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F3FE 303C 00CF                  		move.w	#$CF,d0
0000F402 4EB9 0000 15CC             		jsr	(PlaySound).l	; play signpost	sound
0000F408 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F40C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F412 5428 0024                  		addq.b	#2,$24(a0)
0000F416                            
0000F416                            locret_EBBA:
0000F416 4E75                       		rts	
0000F418                            ; ===========================================================================
0000F418                            
0000F418                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F418 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F41C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F41E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F424 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F428 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F42E 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F430 5428 0024                  		addq.b	#2,$24(a0)
0000F434                            
0000F434                            Obj0D_Sparkle:
0000F434 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F438 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F43A 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F440 7000                       		moveq	#0,d0
0000F442 1028 0034                  		move.b	$34(a0),d0
0000F446 5428 0034                  		addq.b	#2,$34(a0)
0000F44A 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F450 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F454 6100 EE98                  		bsr.w	SingleObjLoad
0000F458 6600                       		bne.s	locret_EC42
0000F45A 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F45E 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F464 101A                       		move.b	(a2)+,d0
0000F466 4880                       		ext.w	d0
0000F468 D068 0008                  		add.w	8(a0),d0
0000F46C 3340 0008                  		move.w	d0,8(a1)
0000F470 101A                       		move.b	(a2)+,d0
0000F472 4880                       		ext.w	d0
0000F474 D068 000C                  		add.w	$C(a0),d0
0000F478 3340 000C                  		move.w	d0,$C(a1)
0000F47C 237C 0000 A68C 0004        		move.l	#Map_obj25,4(a1)
0000F484 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F48A 137C 0004 0001             		move.b	#4,1(a1)
0000F490 137C 0002 0018             		move.b	#2,$18(a1)
0000F496 137C 0008 0019             		move.b	#8,$19(a1)
0000F49C                            
0000F49C                            locret_EC42:
0000F49C 4E75                       		rts	
0000F49E                            ; ===========================================================================
0000F49E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F4A0 0808                       		dc.b	8,   8
0000F4A2 F000                       		dc.b -$10,   0
0000F4A4 18F8                       		dc.b  $18,  -8
0000F4A6 00F8                       		dc.b	0,  -8
0000F4A8 1000                       		dc.b  $10,   0
0000F4AA E808                       		dc.b -$18,   8
0000F4AC 1810                       		dc.b  $18, $10
0000F4AE                            ; ===========================================================================
0000F4AE                            
0000F4AE                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F4AE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F4B2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F4B6 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F4BC 6600                       		bne.s	loc_EC70
0000F4BE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F4C4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F4CA 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F4CC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F4D2 6000                       		bra.s	loc_EC70
0000F4D4                            
0000F4D4                            Obj0D_MoveLeft:
0000F4D4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F4DA                            
0000F4DA                            loc_EC70:
0000F4DA 4A38 D000                  		tst.b	($FFFFD000).w
0000F4DE 6700                       		beq.s	loc_EC86
0000F4E0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F4E4 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F4E8 0641 0128                  		addi.w	#$128,d1
0000F4EC B041                       		cmp.w	d1,d0
0000F4EE 6500                       		bcs.s	locret_ECEE
0000F4F0                            
0000F4F0                            loc_EC86:
0000F4F0 5428 0024                  		addq.b	#2,$24(a0)
0000F4F4                            
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            ; Subroutine to	set up bonuses at the end of an	act
0000F4F4                            ; ---------------------------------------------------------------------------
0000F4F4                            
0000F4F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4F4                            
0000F4F4                            
0000F4F4                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F4F4 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F4F8 6600                       		bne.s	locret_ECEE
0000F4FA 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F500 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F504 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F508 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F50E 7010                       		moveq	#$10,d0
0000F510 4EB9 0000 17E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F516 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F51C 7000                       		moveq	#0,d0
0000F51E 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F522 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F526 7200                       		moveq	#0,d1
0000F528 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F52C D041                       		add.w	d1,d0		; add up your time
0000F52E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F532 7214                       		moveq	#$14,d1
0000F534 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F536 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F538 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F53A                            
0000F53A                            loc_ECD0:
0000F53A D040                       		add.w	d0,d0
0000F53C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F542 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F546 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F54A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F54E 303C 008E                  		move.w	#$8E,d0
0000F552 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F558                            
0000F558                            locret_ECEE:
0000F558 4E75                       		rts	
0000F55A                            ; End of function GotThroughAct
0000F55A                            
0000F55A                            ; ===========================================================================
0000F55A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F56E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F584                            ; ===========================================================================
0000F584                            
0000F584                            locret_ED1A:				; XREF: Obj0D_Index
0000F584 4E75                       		rts	
0000F586                            ; ===========================================================================
0000F586                            Ani_obj0D:
0000F586                            	include "_anim\obj0D.asm"
0000F586                            ; ---------------------------------------------------------------------------
0000F586                            ; Animation script - signpost
0000F586                            ; ---------------------------------------------------------------------------
0000F586 0000                       		dc.w byte_ED24-Ani_obj0D
0000F588 0000                       		dc.w byte_ED28-Ani_obj0D
0000F58A 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F58C 0000                       		dc.w byte_ED34-Ani_obj0D
0000F58E 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F592 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F598 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F59E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F5A2 00                         		even
0000F5A2 00                         		even
0000F5A2                            
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            ; Sprite mappings - signpost
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            Map_obj0D:
0000F5A2                            	include "_maps\obj0D.asm"
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2                            ; Sprite mappings - signpost
0000F5A2                            ; ---------------------------------------------------------------------------
0000F5A2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F5A6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F5AA 0000                       		dc.w byte_ED73-Map_obj0D
0000F5AC 03                         byte_ED42:	dc.b 3
0000F5AD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F5B2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F5B7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5BC 02                         byte_ED52:	dc.b 2
0000F5BD F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F5C2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5C7 02                         byte_ED5D:	dc.b 2
0000F5C8 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F5CD 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5D2 02                         byte_ED68:	dc.b 2
0000F5D3 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F5D8 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5DD 03                         byte_ED73:	dc.b 3
0000F5DE F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F5E3 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F5E8 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5EE 00                         		even
0000F5EE 00                         		even
0000F5EE                            
0000F5EE                            ; ===========================================================================
0000F5EE                            ; ---------------------------------------------------------------------------
0000F5EE                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F5EE                            ; ---------------------------------------------------------------------------
0000F5EE                            
0000F5EE                            Obj4C:					; XREF: Obj_Index
0000F5EE 7000                       		moveq	#0,d0
0000F5F0 1028 0024                  		move.b	$24(a0),d0
0000F5F4 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F5F8 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F5FC 6000 0000                  		bra.w	Obj4D_ChkDel
0000F600                            ; ===========================================================================
0000F600 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F602 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F604 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F606 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F608 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F60A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F60C                            ; ===========================================================================
0000F60C                            
0000F60C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F60C 5428 0024                  		addq.b	#2,$24(a0)
0000F610 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F618 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F61E 117C 0004 0001             		move.b	#4,1(a0)
0000F624 117C 0001 0018             		move.b	#1,$18(a0)
0000F62A 117C 0038 0019             		move.b	#$38,$19(a0)
0000F630 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F636                            
0000F636                            loc_EDCC:				; XREF: Obj4C_Index
0000F636 5368 0032                  		subq.w	#1,$32(a0)
0000F63A 6A00                       		bpl.s	locret_EDF0
0000F63C 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F642 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F646 3228 000C                  		move.w	$C(a0),d1
0000F64A B041                       		cmp.w	d1,d0
0000F64C 6400                       		bcc.s	locret_EDF0
0000F64E 0441 0170                  		subi.w	#$170,d1
0000F652 B041                       		cmp.w	d1,d0
0000F654 6500                       		bcs.s	locret_EDF0
0000F656 5428 0024                  		addq.b	#2,$24(a0)
0000F65A                            
0000F65A                            locret_EDF0:
0000F65A 4E75                       		rts	
0000F65C                            ; ===========================================================================
0000F65C                            
0000F65C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F65C 5428 0024                  		addq.b	#2,$24(a0)
0000F660 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F664 6600                       		bne.s	loc_EE18
0000F666 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F66A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F670 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F676 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F67C 2348 003C                  		move.l	a0,$3C(a1)
0000F680                            
0000F680                            loc_EE18:
0000F680 117C 0001 001C             		move.b	#1,$1C(a0)
0000F686 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F68A 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F68C 117C 0004 001C             		move.b	#4,$1C(a0)
0000F692 6000                       		bra.s	Obj4C_Display
0000F694                            ; ===========================================================================
0000F694                            
0000F694                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F694 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F698 08E9 0001 0022             		bset	#1,$22(a1)
0000F69E 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F6A4 6000                       		bra.s	Obj4C_Display
0000F6A6                            ; ===========================================================================
0000F6A6                            
0000F6A6                            loc_EE3E:				; XREF: Obj4C_Index
0000F6A6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6AA 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F6AC 5428 0024                  		addq.b	#2,$24(a0)
0000F6B0 4E75                       		rts	
0000F6B2                            ; ===========================================================================
0000F6B2                            
0000F6B2                            Obj4C_Display:				; XREF: Obj4C_Index
0000F6B2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6B8 6100 B834                  		bsr.w	AnimateSprite
0000F6BC 6100 E7AA                  		bsr.w	DisplaySprite
0000F6C0 4E75                       		rts	
0000F6C2                            ; ===========================================================================
0000F6C2                            
0000F6C2                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F6C2 117C 0000 001C             		move.b	#0,$1C(a0)
0000F6C8 117C 0002 0024             		move.b	#2,$24(a0)
0000F6CE 4A28 0028                  		tst.b	$28(a0)
0000F6D2 6700 E7D0                  		beq.w	DeleteObject
0000F6D6 4E75                       		rts	
0000F6D8                            ; ===========================================================================
0000F6D8                            ; ---------------------------------------------------------------------------
0000F6D8                            ; Object 4D - lava geyser / lavafall (MZ)
0000F6D8                            ; ---------------------------------------------------------------------------
0000F6D8                            
0000F6D8                            Obj4D:					; XREF: Obj_Index
0000F6D8 7000                       		moveq	#0,d0
0000F6DA 1028 0024                  		move.b	$24(a0),d0
0000F6DE 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F6E2 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F6E6 6000 E780                  		bra.w	DisplaySprite
0000F6EA                            ; ===========================================================================
0000F6EA 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F6EC 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F6EE 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F6F0 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F6F2                            
0000F6F2 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F6F6                            ; ===========================================================================
0000F6F6                            
0000F6F6                            Obj4D_Main:				; XREF: Obj4D_Index
0000F6F6 5428 0024                  		addq.b	#2,$24(a0)
0000F6FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F700 4A28 0028                  		tst.b	$28(a0)
0000F704 6700                       		beq.s	loc_EEA4
0000F706 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F70C                            
0000F70C                            loc_EEA4:
0000F70C 7000                       		moveq	#0,d0
0000F70E 1028 0028                  		move.b	$28(a0),d0
0000F712 D040                       		add.w	d0,d0
0000F714 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F71A 2248                       		movea.l	a0,a1
0000F71C 7201                       		moveq	#1,d1
0000F71E 6100                       		bsr.s	Obj4D_MakeLava
0000F720 6000                       		bra.s	loc_EF10
0000F722                            ; ===========================================================================
0000F722                            
0000F722                            Obj4D_Loop:
0000F722 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F726 6600                       		bne.s	loc_EF0A
0000F728                            
0000F728                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F728 12BC 004D                  		move.b	#$4D,0(a1)
0000F72C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F734 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F73A 137C 0004 0001             		move.b	#4,1(a1)
0000F740 137C 0020 0019             		move.b	#$20,$19(a1)
0000F746 3368 0008 0008             		move.w	8(a0),8(a1)
0000F74C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F752 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F758 137C 0001 0018             		move.b	#1,$18(a1)
0000F75E 137C 0005 001C             		move.b	#5,$1C(a1)
0000F764 4A28 0028                  		tst.b	$28(a0)
0000F768 6700                       		beq.s	loc_EF0A
0000F76A 137C 0002 001C             		move.b	#2,$1C(a1)
0000F770                            
0000F770                            loc_EF0A:
0000F770 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F774 4E75                       		rts	
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            loc_EF10:				; XREF: Obj4D_Main
0000F776 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F77C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F782 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F788 137C 0093 0020             		move.b	#$93,$20(a1)
0000F78E 137C 0080 0016             		move.b	#$80,$16(a1)
0000F794 08E9 0004 0001             		bset	#4,1(a1)
0000F79A 5829 0024                  		addq.b	#4,$24(a1)
0000F79E 2348 003C                  		move.l	a0,$3C(a1)
0000F7A2 4A28 0028                  		tst.b	$28(a0)
0000F7A6 6700                       		beq.s	Obj4D_PlaySnd
0000F7A8 7200                       		moveq	#0,d1
0000F7AA 6100 FF76                  		bsr.w	Obj4D_Loop
0000F7AE 5429 0024                  		addq.b	#2,$24(a1)
0000F7B2 08E9 0004 0002             		bset	#4,2(a1)
0000F7B8 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F7BE 137C 0000 0018             		move.b	#0,$18(a1)
0000F7C4 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F7CA 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F7D0 117C 0000 0028             		move.b	#0,$28(a0)
0000F7D6                            
0000F7D6                            Obj4D_PlaySnd:
0000F7D6 303C 00C8                  		move.w	#$C8,d0
0000F7DA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000F7E0                            
0000F7E0                            Obj4D_Action:				; XREF: Obj4D_Index
0000F7E0 7000                       		moveq	#0,d0
0000F7E2 1028 0028                  		move.b	$28(a0),d0
0000F7E6 D040                       		add.w	d0,d0
0000F7E8 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F7EC 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F7F0 6100 E650                  		bsr.w	SpeedToPos
0000F7F4 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F7FA 6100 B6F2                  		bsr.w	AnimateSprite
0000F7FE                            
0000F7FE                            Obj4D_ChkDel:				; XREF: Obj4C
0000F7FE 3028 0008                  		move.w	8(a0),d0
0000F802 0240 FF80                  		andi.w	#$FF80,d0
0000F806 3238 F700                  		move.w	($FFFFF700).w,d1
0000F80A 0441 0080                  		subi.w	#$80,d1
0000F80E 0241 FF80                  		andi.w	#$FF80,d1
0000F812 9041                       		sub.w	d1,d0
0000F814 0C40 0280                  		cmpi.w	#$280,d0
0000F818 6200 E68A                  		bhi.w	DeleteObject
0000F81C 4E75                       		rts	
0000F81E                            ; ===========================================================================
0000F81E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F820 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F822                            ; ===========================================================================
0000F822                            
0000F822                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F822 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F828 3028 0030                  		move.w	$30(a0),d0
0000F82C B068 000C                  		cmp.w	$C(a0),d0
0000F830 6400                       		bcc.s	locret_EFDA
0000F832 5828 0024                  		addq.b	#4,$24(a0)
0000F836 2268 003C                  		movea.l	$3C(a0),a1
0000F83A 137C 0003 001C             		move.b	#3,$1C(a1)
0000F840                            
0000F840                            locret_EFDA:
0000F840 4E75                       		rts	
0000F842                            ; ===========================================================================
0000F842                            
0000F842                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F842 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F848 3028 0030                  		move.w	$30(a0),d0
0000F84C B068 000C                  		cmp.w	$C(a0),d0
0000F850 6400                       		bcc.s	locret_EFFA
0000F852 5828 0024                  		addq.b	#4,$24(a0)
0000F856 2268 003C                  		movea.l	$3C(a0),a1
0000F85A 137C 0001 001C             		move.b	#1,$1C(a1)
0000F860                            
0000F860                            locret_EFFA:
0000F860 4E75                       		rts	
0000F862                            ; ===========================================================================
0000F862                            
0000F862                            loc_EFFC:				; XREF: Obj4D_Index
0000F862 2268 003C                  		movea.l	$3C(a0),a1
0000F866 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F86C 6700 0000                  		beq.w	Obj4D_Delete
0000F870 3029 000C                  		move.w	$C(a1),d0
0000F874 0640 0060                  		addi.w	#$60,d0
0000F878 3140 000C                  		move.w	d0,$C(a0)
0000F87C 9068 0030                  		sub.w	$30(a0),d0
0000F880 4440                       		neg.w	d0
0000F882 7208                       		moveq	#8,d1
0000F884 0C40 0040                  		cmpi.w	#$40,d0
0000F888 6C00                       		bge.s	loc_F026
0000F88A 720B                       		moveq	#$B,d1
0000F88C                            
0000F88C                            loc_F026:
0000F88C 0C40 0080                  		cmpi.w	#$80,d0
0000F890 6F00                       		ble.s	loc_F02E
0000F892 720E                       		moveq	#$E,d1
0000F894                            
0000F894                            loc_F02E:
0000F894 5328 001E                  		subq.b	#1,$1E(a0)
0000F898 6A00                       		bpl.s	loc_F04C
0000F89A 117C 0007 001E             		move.b	#7,$1E(a0)
0000F8A0 5228 001B                  		addq.b	#1,$1B(a0)
0000F8A4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F8AA 6500                       		bcs.s	loc_F04C
0000F8AC 117C 0000 001B             		move.b	#0,$1B(a0)
0000F8B2                            
0000F8B2                            loc_F04C:
0000F8B2 1028 001B                  		move.b	$1B(a0),d0
0000F8B6 D001                       		add.b	d1,d0
0000F8B8 1140 001A                  		move.b	d0,$1A(a0)
0000F8BC 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F8C0                            ; ===========================================================================
0000F8C0                            
0000F8C0                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F8C0 6000 E5E2                  		bra.w	DeleteObject
0000F8C4                            ; ===========================================================================
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            ; Object 4E - advancing	wall of	lava (MZ)
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            
0000F8C4                            Obj4E:					; XREF: Obj_Index
0000F8C4 7000                       		moveq	#0,d0
0000F8C6 1028 0024                  		move.b	$24(a0),d0
0000F8CA 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F8CE 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F8D2                            ; ===========================================================================
0000F8D2 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F8D4 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F8D6 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F8D8 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F8DA 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F8DC                            ; ===========================================================================
0000F8DC                            
0000F8DC                            Obj4E_Main:				; XREF: Obj4E_Index
0000F8DC 5828 0024                  		addq.b	#4,$24(a0)
0000F8E0 2248                       		movea.l	a0,a1
0000F8E2 7201                       		moveq	#1,d1
0000F8E4 6000                       		bra.s	Obj4E_Main2
0000F8E6                            ; ===========================================================================
0000F8E6                            
0000F8E6                            Obj4E_Loop:
0000F8E6 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F8EA 6600                       		bne.s	loc_F0C8
0000F8EC                            
0000F8EC                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F8EC 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F8F0 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F8F8 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8FE 137C 0004 0001             		move.b	#4,1(a1)
0000F904 137C 0050 0019             		move.b	#$50,$19(a1)
0000F90A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F910 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F916 137C 0001 0018             		move.b	#1,$18(a1)
0000F91C 137C 0000 001C             		move.b	#0,$1C(a1)
0000F922 137C 0094 0020             		move.b	#$94,$20(a1)
0000F928 2348 003C                  		move.l	a0,$3C(a1)
0000F92C                            
0000F92C                            loc_F0C8:
0000F92C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F930                            
0000F930 5C29 0024                  		addq.b	#6,$24(a1)
0000F934 137C 0004 001A             		move.b	#4,$1A(a1)
0000F93A                            
0000F93A                            Obj4E_Action:				; XREF: Obj4E_Index
0000F93A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F93E 9068 0008                  		sub.w	8(a0),d0
0000F942 6400                       		bcc.s	Obj4E_ChkSonic
0000F944 4440                       		neg.w	d0
0000F946                            
0000F946                            Obj4E_ChkSonic:
0000F946 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F94A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F94C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F950 9068 000C                  		sub.w	$C(a0),d0
0000F954 6400                       		bcc.s	loc_F0F4
0000F956 4440                       		neg.w	d0
0000F958                            
0000F958                            loc_F0F4:
0000F958 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F95C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F95E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F964 6000                       		bra.s	Obj4E_Solid
0000F966                            ; ===========================================================================
0000F966                            
0000F966                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F966 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F96A 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F96C 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F972 5528 0024                  		subq.b	#2,$24(a0)
0000F976                            
0000F976                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F976 323C 002B                  		move.w	#$2B,d1
0000F97A 343C 0018                  		move.w	#$18,d2
0000F97E 3602                       		move.w	d2,d3
0000F980 5243                       		addq.w	#1,d3
0000F982 3828 0008                  		move.w	8(a0),d4
0000F986 1028 0024                  		move.b	$24(a0),d0
0000F98A 3F00                       		move.w	d0,-(sp)
0000F98C 6100 0000                  		bsr.w	SolidObject
0000F990 301F                       		move.w	(sp)+,d0
0000F992 1140 0024                  		move.b	d0,$24(a0)
0000F996 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F99C 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F99E 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F9A2 4228 0036                  		clr.b	$36(a0)
0000F9A6                            
0000F9A6                            Obj4E_Animate:
0000F9A6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F9AC 6100 B540                  		bsr.w	AnimateSprite
0000F9B0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F9B6 6400                       		bcc.s	Obj4E_ChkDel
0000F9B8 6100 E488                  		bsr.w	SpeedToPos
0000F9BC                            
0000F9BC                            Obj4E_ChkDel:
0000F9BC 6100 E4AA                  		bsr.w	DisplaySprite
0000F9C0 4A28 0036                  		tst.b	$36(a0)
0000F9C4 6600                       		bne.s	locret_F17E
0000F9C6 3028 0008                  		move.w	8(a0),d0
0000F9CA 0240 FF80                  		andi.w	#$FF80,d0
0000F9CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9D2 0441 0080                  		subi.w	#$80,d1
0000F9D6 0241 FF80                  		andi.w	#$FF80,d1
0000F9DA 9041                       		sub.w	d1,d0
0000F9DC 0C40 0280                  		cmpi.w	#$280,d0
0000F9E0 6200                       		bhi.s	Obj4E_ChkGone
0000F9E2                            
0000F9E2                            locret_F17E:
0000F9E2 4E75                       		rts	
0000F9E4                            ; ===========================================================================
0000F9E4                            
0000F9E4                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F9E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F9E8 7000                       		moveq	#0,d0
0000F9EA 1028 0023                  		move.b	$23(a0),d0
0000F9EE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F9F4 117C 0008 0024             		move.b	#8,$24(a0)
0000F9FA 4E75                       		rts	
0000F9FC                            ; ===========================================================================
0000F9FC                            
0000F9FC                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F9FC 2268 003C                  		movea.l	$3C(a0),a1
0000FA00 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FA06 6700                       		beq.s	Obj4E_Delete
0000FA08 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FA0E 0468 0080 0008             		subi.w	#$80,8(a0)
0000FA14 6000 E452                  		bra.w	DisplaySprite
0000FA18                            ; ===========================================================================
0000FA18                            
0000FA18                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FA18 6000 E48A                  		bra.w	DeleteObject
0000FA1C                            ; ===========================================================================
0000FA1C                            ; ---------------------------------------------------------------------------
0000FA1C                            ; Object 54 - invisible	lava tag (MZ)
0000FA1C                            ; ---------------------------------------------------------------------------
0000FA1C                            
0000FA1C                            Obj54:					; XREF: Obj_Index
0000FA1C 7000                       		moveq	#0,d0
0000FA1E 1028 0024                  		move.b	$24(a0),d0
0000FA22 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FA26 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FA2A                            ; ===========================================================================
0000FA2A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FA2C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FA2E                            
0000FA2E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FA32                            ; ===========================================================================
0000FA32                            
0000FA32                            Obj54_Main:				; XREF: Obj54_Index
0000FA32 5428 0024                  		addq.b	#2,$24(a0)
0000FA36 7000                       		moveq	#0,d0
0000FA38 1028 0028                  		move.b	$28(a0),d0
0000FA3C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FA42 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FA4A 117C 0084 0001             		move.b	#$84,1(a0)
0000FA50                            
0000FA50                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FA50 3028 0008                  		move.w	8(a0),d0
0000FA54 0240 FF80                  		andi.w	#$FF80,d0
0000FA58 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA5C 0441 0080                  		subi.w	#$80,d1
0000FA60 0241 FF80                  		andi.w	#$FF80,d1
0000FA64 9041                       		sub.w	d1,d0
0000FA66 6B00 E43C                  		bmi.w	DeleteObject
0000FA6A 0C40 0280                  		cmpi.w	#$280,d0
0000FA6E 6200 E434                  		bhi.w	DeleteObject
0000FA72 4E75                       		rts	
0000FA74                            ; ===========================================================================
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74                            ; Sprite mappings - invisible lava tag (MZ)
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74                            Map_obj54:
0000FA74                            	include "_maps\obj54.asm"
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74                            ; Sprite mappings - invisible lava tag (MZ)
0000FA74                            ; ---------------------------------------------------------------------------
0000FA74 0000                       		dc.w byte_F212-Map_obj54
0000FA76 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA78 00                         		even
0000FA78 00                         		even
0000FA78                            
0000FA78                            Ani_obj4C:
0000FA78                            	include "_anim\obj4C.asm"
0000FA78                            ; ---------------------------------------------------------------------------
0000FA78                            ; Animation script - geyser of lava (MZ)
0000FA78                            ; ---------------------------------------------------------------------------
0000FA78 0000                       		dc.w byte_F220-Ani_obj4C
0000FA7A 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA7C 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA7E 0000                       		dc.w byte_F232-Ani_obj4C
0000FA80 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA82 0000                       		dc.w byte_F23E-Ani_obj4C
0000FA84 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FA8E 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FA92 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FA96 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FA9E 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FAA2 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FAA6                            		even
0000FAA6                            		even
0000FAA6                            
0000FAA6                            Ani_obj4E:
0000FAA6                            	include "_anim\obj4E.asm"
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6                            ; Animation script - advancing wall of lava (MZ)
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6 0000                       		dc.w byte_F244-Ani_obj4E
0000FAA8 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FAAE                            		even
0000FAAE                            		even
0000FAAE                            
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            Map_obj4C:
0000FAAE                            	include "_maps\obj4C.asm"
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAAE                            ; ---------------------------------------------------------------------------
0000FAAE 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FAB2 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FAB6 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FABA 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FABE 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FAC2 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FAC6 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FACA 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FACE 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FAD2 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FAD6 02                         byte_F272:	dc.b 2
0000FAD7 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FADC EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FAE1 02                         byte_F27D:	dc.b 2
0000FAE2 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FAE7 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FAEC 04                         byte_F288:	dc.b 4
0000FAED EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FAF2 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FAF7 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FAFC EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB01 04                         byte_F29D:	dc.b 4
0000FB02 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB07 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB0C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB11 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB16 06                         byte_F2B2:	dc.b 6
0000FB17 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB1C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB21 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB26 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB2B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FB30 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FB35 06                         byte_F2D1:	dc.b 6
0000FB36 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB3B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB40 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB45 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB4A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FB4F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FB54 02                         byte_F2F0:	dc.b 2
0000FB55 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FB5A E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FB5F 02                         byte_F2FB:	dc.b 2
0000FB60 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FB65 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB6A 0A                         byte_F306:	dc.b $A
0000FB6B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB70 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB75 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB7A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB7F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB84 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB89 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB8E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB93 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB98 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB9D 0A                         byte_F339:	dc.b $A
0000FB9E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FBA3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBA8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBAD B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBB2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBB7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBBC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBC1 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBC6 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBCB 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBD0 0A                         byte_F36C:	dc.b $A
0000FBD1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBD6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBDB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBE0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBE5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBEA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBEF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FBF4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FBF9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FBFE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC03 06                         byte_F39F:	dc.b 6
0000FC04 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC09 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC0E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC13 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC18 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC1D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC22 06                         byte_F3BE:	dc.b 6
0000FC23 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC28 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC2D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC32 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC37 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC3C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC41 06                         byte_F3DD:	dc.b 6
0000FC42 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC47 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC4C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC51 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC56 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC5B D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC60 10                         byte_F3FC:	dc.b $10
0000FC61 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC66 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC6B B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC70 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC75 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC7A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC7F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FC84 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FC89 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FC8E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FC93 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FC98 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FC9D 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FCA2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FCA7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FCAC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FCB1 10                         byte_F44D:	dc.b $10
0000FCB2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FCB7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FCBC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FCC1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FCC6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FCCB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FCD0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FCD5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FCDA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FCDF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FCE4 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FCE9 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FCEE 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FCF3 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FCF8 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FCFD 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FD02 10                         byte_F49E:	dc.b $10
0000FD03 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD08 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD0D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD12 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD17 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD1C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD21 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD26 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD2B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD30 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD35 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FD3A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FD3F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FD44 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FD49 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FD4E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FD53 06                         byte_F4EF:	dc.b 6
0000FD54 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FD59 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FD5E E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FD63 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FD68 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD6D D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD72 06                         byte_F50E:	dc.b 6
0000FD73 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD78 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD7D E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD82 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FD87 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FD8C D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FD91 00                         byte_F52D:	dc.b 0
0000FD92                            		even
0000FD92                            		even
0000FD92                            
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92                            Map_obj4E:
0000FD92                            	include "_maps\obj4E.asm"
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD92                            ; ---------------------------------------------------------------------------
0000FD92 0000                       		dc.w byte_F538-Map_obj4E
0000FD94 0000                       		dc.w byte_F566-Map_obj4E
0000FD96 0000                       		dc.w byte_F594-Map_obj4E
0000FD98 0000                       		dc.w byte_F5C2-Map_obj4E
0000FD9A 0000                       		dc.w byte_F5F0-Map_obj4E
0000FD9C 09                         byte_F538:	dc.b 9
0000FD9D E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FDA2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FDA7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDAC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDB1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDB6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDBB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDC0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDC5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDCA 09                         byte_F566:	dc.b 9
0000FDCB E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDD0 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FDD5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDDA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDDF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDE4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDE9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDEE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDF3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDF8 09                         byte_F594:	dc.b 9
0000FDF9 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FDFE 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FE03 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE08 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE0D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE12 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE17 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE1C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE21 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE26 09                         byte_F5C2:	dc.b 9
0000FE27 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FE2C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FE31 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE36 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE3B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE40 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE45 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE4A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE4F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE54 08                         byte_F5F0:	dc.b 8
0000FE55 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FE5A 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE5F E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE64 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE69 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE6E 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE73 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE78 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE7E 00                         		even
0000FE7E 00                         		even
0000FE7E                            
0000FE7E                            ; ===========================================================================
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE7E                            ; ---------------------------------------------------------------------------
0000FE7E                            
0000FE7E                            Obj40:					; XREF: Obj_Index
0000FE7E 7000                       		moveq	#0,d0
0000FE80 1028 0024                  		move.b	$24(a0),d0
0000FE84 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FE88 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FE8C                            ; ===========================================================================
0000FE8C 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FE8E 0000                       		dc.w Obj40_Action-Obj40_Index
0000FE90 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FE92 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FE94                            ; ===========================================================================
0000FE94                            
0000FE94                            Obj40_Main:				; XREF: Obj40_Index
0000FE94 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FE9C 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FEA2 117C 0004 0001             		move.b	#4,1(a0)
0000FEA8 117C 0004 0018             		move.b	#4,$18(a0)
0000FEAE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FEB4 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FEB8 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FEBA 117C 000E 0016             		move.b	#$E,$16(a0)
0000FEC0 117C 0008 0017             		move.b	#8,$17(a0)
0000FEC6 117C 000C 0020             		move.b	#$C,$20(a0)
0000FECC 6100 DF02                  		bsr.w	ObjectFall
0000FED0 4EB9 0000 0000             		jsr	ObjHitFloor
0000FED6 4A41                       		tst.w	d1
0000FED8 6A00                       		bpl.s	locret_F68A
0000FEDA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FEDE 317C 0000 0012             		move.w	#0,$12(a0)
0000FEE4 5428 0024                  		addq.b	#2,$24(a0)
0000FEE8 0868 0000 0022             		bchg	#0,$22(a0)
0000FEEE                            
0000FEEE                            locret_F68A:
0000FEEE 4E75                       		rts	
0000FEF0                            ; ===========================================================================
0000FEF0                            
0000FEF0                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FEF0 5828 0024                  		addq.b	#4,$24(a0)
0000FEF4 6000 0000                  		bra.w	Obj40_Animate
0000FEF8                            ; ===========================================================================
0000FEF8                            
0000FEF8                            Obj40_Action:				; XREF: Obj40_Index
0000FEF8 7000                       		moveq	#0,d0
0000FEFA 1028 0025                  		move.b	$25(a0),d0
0000FEFE 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FF02 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FF06 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF0C 6100 AFE0                  		bsr.w	AnimateSprite
0000FF10                            
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            
0000FF10                            MarkObjGone:
0000FF10 3028 0008                  		move.w	8(a0),d0
0000FF14 0240 FF80                  		andi.w	#$FF80,d0
0000FF18 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF1C 0441 0080                  		subi.w	#$80,d1
0000FF20 0241 FF80                  		andi.w	#$FF80,d1
0000FF24 9041                       		sub.w	d1,d0
0000FF26 0C40 0280                  		cmpi.w	#$280,d0
0000FF2A 6200 0000                  		bhi.w	Mark_ChkGone
0000FF2E 6000 DF38                  		bra.w	DisplaySprite
0000FF32                            ; ===========================================================================
0000FF32                            
0000FF32                            Mark_ChkGone:
0000FF32 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FF36 7000                       		moveq	#0,d0
0000FF38 1028 0023                  		move.b	$23(a0),d0
0000FF3C 6700                       		beq.s	Mark_Delete
0000FF3E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FF44                            
0000FF44                            Mark_Delete:
0000FF44 6000 DF5E                  		bra.w	DeleteObject
0000FF48                            
0000FF48                            ; ===========================================================================
0000FF48 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FF4A 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FF4C                            ; ===========================================================================
0000FF4C                            
0000FF4C                            Obj40_Move:				; XREF: Obj40_Index2
0000FF4C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF50 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FF52 5428 0025                  		addq.b	#2,$25(a0)
0000FF56 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FF5C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF62 0868 0000 0022             		bchg	#0,$22(a0)
0000FF68 6600                       		bne.s	locret_F70A
0000FF6A 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF6E                            
0000FF6E                            locret_F70A:
0000FF6E 4E75                       		rts	
0000FF70                            ; ===========================================================================
0000FF70                            
0000FF70                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF70 6100 DED0                  		bsr.w	SpeedToPos
0000FF74 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF7A 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF7E 6D00                       		blt.s	Obj40_Pause
0000FF80 0C41 000C                  		cmpi.w	#$C,d1
0000FF84 6C00                       		bge.s	Obj40_Pause
0000FF86 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF8A 5328 0033                  		subq.b	#1,$33(a0)
0000FF8E 6A00                       		bpl.s	locret_F756
0000FF90 117C 000F 0033             		move.b	#$F,$33(a0)
0000FF96 6100 E356                  		bsr.w	SingleObjLoad
0000FF9A 6600                       		bne.s	locret_F756
0000FF9C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FFA0 3368 0008 0008             		move.w	8(a0),8(a1)
0000FFA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FFAC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FFB2 137C 0002 001C             		move.b	#2,$1C(a1)
0000FFB8                            
0000FFB8                            locret_F756:
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FFBA 5528 0025                  		subq.b	#2,$25(a0)
0000FFBE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FFC4 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FFCA 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFD0 4E75                       		rts	
0000FFD2                            ; ===========================================================================
0000FFD2                            
0000FFD2                            Obj40_Animate:				; XREF: Obj40_Index
0000FFD2 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FFD8 6100 AF14                  		bsr.w	AnimateSprite
0000FFDC 6000 DE8A                  		bra.w	DisplaySprite
0000FFE0                            ; ===========================================================================
0000FFE0                            
0000FFE0                            Obj40_Delete:				; XREF: Obj40_Index
0000FFE0 6000 DEC2                  		bra.w	DeleteObject
0000FFE4                            ; ===========================================================================
0000FFE4                            Ani_obj40:
0000FFE4                            	include "_anim\obj40.asm"
0000FFE4                            ; ---------------------------------------------------------------------------
0000FFE4                            ; Animation script - Motobug enemy
0000FFE4                            ; ---------------------------------------------------------------------------
0000FFE4 0000                       		dc.w byte_F788-Ani_obj40
0000FFE6 0000                       		dc.w byte_F78C-Ani_obj40
0000FFE8 0000                       		dc.w byte_F792-Ani_obj40
0000FFEA 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FFEE 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FFF4 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010002                            		even
00010002                            		even
00010002                            
00010002                            ; ---------------------------------------------------------------------------
00010002                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010002                            ; ---------------------------------------------------------------------------
00010002                            Map_obj40:
00010002                            	include "_maps\obj40.asm"
00010002                            Map_cedc:
00010002 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
00010004 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
00010006 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010008 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0001000A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0001000C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0001000E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
00010010 04                         Map_cedc_E: 	dc.b $4
00010011 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010016 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0001001B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010020 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010025 04                         Map_cedc_23: 	dc.b $4
00010026 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0001002B 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010030 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010035 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0001003A 05                         Map_cedc_38: 	dc.b $5
0001003B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010040 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010045 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001004A 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001004F 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010054 01                         Map_cedc_52: 	dc.b $1
00010055 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0001005A 01                         Map_cedc_58: 	dc.b $1
0001005B FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010060 01                         Map_cedc_5E: 	dc.b $1
00010061 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010066 00                         Map_cedc_64: 	dc.b $0
00010068 00                         	even
00010068 00                         	even
00010068                            
00010068                            ; ===========================================================================
00010068                            ; ---------------------------------------------------------------------------
00010068                            ; Object 4F - blank
00010068                            ; ---------------------------------------------------------------------------
00010068                            
00010068                            Obj4F:					; XREF: Obj_Index
00010068 4E75                       		rts	
0001006A                            
0001006A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001006A                            
0001006A                            
0001006A                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001006A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001006E D047                       		add.w	d7,d0
00010070 0240 0003                  		andi.w	#3,d0
00010074 6600                       		bne.s	loc_F836
00010076 7600                       		moveq	#0,d3
00010078 1628 0019                  		move.b	$19(a0),d3
0001007C 4A68 0010                  		tst.w	$10(a0)
00010080 6B00                       		bmi.s	loc_F82C
00010082 6100 0000                  		bsr.w	ObjHitWallRight
00010086 4A41                       		tst.w	d1
00010088 6A00                       		bpl.s	loc_F836
0001008A                            
0001008A                            loc_F828:
0001008A 7001                       		moveq	#1,d0
0001008C 4E75                       		rts	
0001008E                            ; ===========================================================================
0001008E                            
0001008E                            loc_F82C:
0001008E 4643                       		not.w	d3
00010090 6100 0000                  		bsr.w	ObjHitWallLeft
00010094 4A41                       		tst.w	d1
00010096 6BF2                       		bmi.s	loc_F828
00010098                            
00010098                            loc_F836:
00010098 7000                       		moveq	#0,d0
0001009A 4E75                       		rts	
0001009C                            ; End of function Obj50_ChkWall
0001009C                            
0001009C                            ; ===========================================================================
0001009C                            ; ---------------------------------------------------------------------------
0001009C                            ; Object 50 - Yadrin enemy (SYZ)
0001009C                            ; ---------------------------------------------------------------------------
0001009C                            
0001009C                            Obj50:					; XREF: Obj_Index
0001009C 7000                       		moveq	#0,d0
0001009E 1028 0024                  		move.b	$24(a0),d0
000100A2 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
000100A6 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000100AA                            ; ===========================================================================
000100AA 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000100AC 0000                       		dc.w Obj50_Action-Obj50_Index
000100AE                            ; ===========================================================================
000100AE                            
000100AE                            Obj50_Main:				; XREF: Obj50_Index
000100AE 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000100B6 317C 247B 0002             		move.w	#$247B,2(a0)
000100BC 117C 0004 0001             		move.b	#4,1(a0)
000100C2 117C 0004 0018             		move.b	#4,$18(a0)
000100C8 117C 0014 0019             		move.b	#$14,$19(a0)
000100CE 117C 0011 0016             		move.b	#$11,$16(a0)
000100D4 117C 0008 0017             		move.b	#8,$17(a0)
000100DA 117C 00CC 0020             		move.b	#$CC,$20(a0)
000100E0 6100 DCEE                  		bsr.w	ObjectFall
000100E4 6100 0000                  		bsr.w	ObjHitFloor
000100E8 4A41                       		tst.w	d1
000100EA 6A00                       		bpl.s	locret_F89E
000100EC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100F0 317C 0000 0012             		move.w	#0,$12(a0)
000100F6 5428 0024                  		addq.b	#2,$24(a0)
000100FA 0868 0000 0022             		bchg	#0,$22(a0)
00010100                            
00010100                            locret_F89E:
00010100 4E75                       		rts	
00010102                            ; ===========================================================================
00010102                            
00010102                            Obj50_Action:				; XREF: Obj50_Index
00010102 7000                       		moveq	#0,d0
00010104 1028 0025                  		move.b	$25(a0),d0
00010108 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001010C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010110 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010116 6100 ADD6                  		bsr.w	AnimateSprite
0001011A 6000 FDF4                  		bra.w	MarkObjGone
0001011E                            ; ===========================================================================
0001011E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010120 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010122                            ; ===========================================================================
00010122                            
00010122                            Obj50_Move:				; XREF: Obj50_Index2
00010122 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010126 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010128 5428 0025                  		addq.b	#2,$25(a0)
0001012C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010132 117C 0001 001C             		move.b	#1,$1C(a0)
00010138 0868 0000 0022             		bchg	#0,$22(a0)
0001013E 6600                       		bne.s	locret_F8E2
00010140 4468 0010                  		neg.w	$10(a0)		; change direction
00010144                            
00010144                            locret_F8E2:
00010144 4E75                       		rts	
00010146                            ; ===========================================================================
00010146                            
00010146                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010146 6100 DCFA                  		bsr.w	SpeedToPos
0001014A 6100 0000                  		bsr.w	ObjHitFloor
0001014E 0C41 FFF8                  		cmpi.w	#-8,d1
00010152 6D00                       		blt.s	Obj50_Pause
00010154 0C41 000C                  		cmpi.w	#$C,d1
00010158 6C00                       		bge.s	Obj50_Pause
0001015A D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0001015E 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010162 6600                       		bne.s	Obj50_Pause
00010164 4E75                       		rts	
00010166                            ; ===========================================================================
00010166                            
00010166                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010166 5528 0025                  		subq.b	#2,$25(a0)
0001016A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010170 317C 0000 0010             		move.w	#0,$10(a0)
00010176 117C 0000 001C             		move.b	#0,$1C(a0)
0001017C 4E75                       		rts	
0001017E                            ; ===========================================================================
0001017E                            Ani_obj50:
0001017E                            	include "_anim\obj50.asm"
0001017E                            ; ---------------------------------------------------------------------------
0001017E                            ; Animation script - Yadrin enemy
0001017E                            ; ---------------------------------------------------------------------------
0001017E 0000                       		dc.w byte_F920-Ani_obj50
00010180 0000                       		dc.w byte_F924-Ani_obj50
00010182 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010186 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010190                            		even
00010190                            		even
00010190                            
00010190                            ; ---------------------------------------------------------------------------
00010190                            ; Sprite mappings - Yadrin enemy (SYZ)
00010190                            ; ---------------------------------------------------------------------------
00010190                            Map_obj50:
00010190                            	include "_maps\obj50.asm"
00010190                            Map_ff24:
00010190 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010192 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010194 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010196 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010198 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0001019A 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
0001019C 05                         Map_ff24_C: 	dc.b $5
0001019D F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101A2 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101A7 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101AC F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101B1 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101B6 05                         Map_ff24_26: 	dc.b $5
000101B7 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101BC FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101C1 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101C6 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101CB 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101D0 05                         Map_ff24_40: 	dc.b $5
000101D1 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101D6 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101DB EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101E0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101E5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101EA 05                         Map_ff24_5A: 	dc.b $5
000101EB F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101F0 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101F5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101FA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101FF 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010204 05                         Map_ff24_74: 	dc.b $5
00010205 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
0001020A FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001020F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010214 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010219 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001021E 05                         Map_ff24_8E: 	dc.b $5
0001021F F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010224 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010229 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001022E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010233 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010238                            	even
00010238                            	even
00010238                            
00010238                            ; ---------------------------------------------------------------------------
00010238                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010238                            ;
00010238                            ; variables:
00010238                            ; d1 = width
00010238                            ; d2 = height /	2 (when	jumping)
00010238                            ; d3 = height /	2 (when	walking)
00010238                            ; d4 = x-axis position
00010238                            ; ---------------------------------------------------------------------------
00010238                            
00010238                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010238                            
00010238                            
00010238                            SolidObject:
00010238 4A28 0025                  		tst.b	$25(a0)
0001023C 6700 0000                  		beq.w	loc_FAC8
00010240 3401                       		move.w	d1,d2
00010242 D442                       		add.w	d2,d2
00010244 43F8 D000                  		lea	($FFFFD000).w,a1
00010248 0829 0001 0022             		btst	#1,$22(a1)
0001024E 6600                       		bne.s	loc_F9FE
00010250 3029 0008                  		move.w	8(a1),d0
00010254 9068 0008                  		sub.w	8(a0),d0
00010258 D041                       		add.w	d1,d0
0001025A 6B00                       		bmi.s	loc_F9FE
0001025C B042                       		cmp.w	d2,d0
0001025E 6500                       		bcs.s	loc_FA12
00010260                            
00010260                            loc_F9FE:
00010260 08A9 0003 0022             		bclr	#3,$22(a1)
00010266 08A8 0003 0022             		bclr	#3,$22(a0)
0001026C 4228 0025                  		clr.b	$25(a0)
00010270 7800                       		moveq	#0,d4
00010272 4E75                       		rts	
00010274                            ; ===========================================================================
00010274                            
00010274                            loc_FA12:
00010274 3404                       		move.w	d4,d2
00010276                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010276 7800                       		moveq	#0,d4
00010278 4E75                       		rts	
0001027A                            ; ===========================================================================
0001027A                            
0001027A                            SolidObject71:				; XREF: Obj71_Solid
0001027A 4A28 0025                  		tst.b	$25(a0)
0001027E 6700 0000                  		beq.w	loc_FAD0
00010282 3401                       		move.w	d1,d2
00010284 D442                       		add.w	d2,d2
00010286 43F8 D000                  		lea	($FFFFD000).w,a1
0001028A 0829 0001 0022             		btst	#1,$22(a1)
00010290 6600                       		bne.s	loc_FA44
00010292 3029 0008                  		move.w	8(a1),d0
00010296 9068 0008                  		sub.w	8(a0),d0
0001029A D041                       		add.w	d1,d0
0001029C 6B00                       		bmi.s	loc_FA44
0001029E B042                       		cmp.w	d2,d0
000102A0 6500                       		bcs.s	loc_FA58
000102A2                            
000102A2                            loc_FA44:
000102A2 08A9 0003 0022             		bclr	#3,$22(a1)
000102A8 08A8 0003 0022             		bclr	#3,$22(a0)
000102AE 4228 0025                  		clr.b	$25(a0)
000102B2 7800                       		moveq	#0,d4
000102B4 4E75                       		rts	
000102B6                            ; ===========================================================================
000102B6                            
000102B6                            loc_FA58:
000102B6 3404                       		move.w	d4,d2
000102B8                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000102B8 7800                       		moveq	#0,d4
000102BA 4E75                       		rts	
000102BC                            ; ===========================================================================
000102BC                            
000102BC                            SolidObject2F:				; XREF: Obj2F_Solid
000102BC 43F8 D000                  		lea	($FFFFD000).w,a1
000102C0 4A28 0001                  		tst.b	1(a0)
000102C4 6A00 0000                  		bpl.w	loc_FB92
000102C8 3029 0008                  		move.w	8(a1),d0
000102CC 9068 0008                  		sub.w	8(a0),d0
000102D0 D041                       		add.w	d1,d0
000102D2 6B00 0000                  		bmi.w	loc_FB92
000102D6 3601                       		move.w	d1,d3
000102D8 D643                       		add.w	d3,d3
000102DA B043                       		cmp.w	d3,d0
000102DC 6200 0000                  		bhi.w	loc_FB92
000102E0 3A00                       		move.w	d0,d5
000102E2 0828 0000 0001             		btst	#0,1(a0)
000102E8 6700                       		beq.s	loc_FA94
000102EA 4645                       		not.w	d5
000102EC DA43                       		add.w	d3,d5
000102EE                            
000102EE                            loc_FA94:
000102EE E24D                       		lsr.w	#1,d5
000102F0 7600                       		moveq	#0,d3
000102F2 1632 5000                  		move.b	(a2,d5.w),d3
000102F6 9612                       		sub.b	(a2),d3
000102F8 3A28 000C                  		move.w	$C(a0),d5
000102FC 9A43                       		sub.w	d3,d5
000102FE 1629 0016                  		move.b	$16(a1),d3
00010302 4883                       		ext.w	d3
00010304 D443                       		add.w	d3,d2
00010306 3629 000C                  		move.w	$C(a1),d3
0001030A 9645                       		sub.w	d5,d3
0001030C 5843                       		addq.w	#4,d3
0001030E D642                       		add.w	d2,d3
00010310 6B00 0000                  		bmi.w	loc_FB92
00010314 3802                       		move.w	d2,d4
00010316 D844                       		add.w	d4,d4
00010318 B644                       		cmp.w	d4,d3
0001031A 6400 0000                  		bcc.w	loc_FB92
0001031E 6000 0000                  		bra.w	loc_FB0E
00010322                            ; ===========================================================================
00010322                            
00010322                            loc_FAC8:
00010322 4A28 0001                  		tst.b	1(a0)
00010326 6A00 0000                  		bpl.w	loc_FB92
0001032A                            
0001032A                            loc_FAD0:
0001032A 43F8 D000                  		lea	($FFFFD000).w,a1
0001032E 3029 0008                  		move.w	8(a1),d0
00010332 9068 0008                  		sub.w	8(a0),d0
00010336 D041                       		add.w	d1,d0
00010338 6B00 0000                  		bmi.w	loc_FB92
0001033C 3601                       		move.w	d1,d3
0001033E D643                       		add.w	d3,d3
00010340 B043                       		cmp.w	d3,d0
00010342 6200 0000                  		bhi.w	loc_FB92
00010346 1629 0016                  		move.b	$16(a1),d3
0001034A 4883                       		ext.w	d3
0001034C D443                       		add.w	d3,d2
0001034E 3629 000C                  		move.w	$C(a1),d3
00010352 9668 000C                  		sub.w	$C(a0),d3
00010356 5843                       		addq.w	#4,d3
00010358 D642                       		add.w	d2,d3
0001035A 6B00 0000                  		bmi.w	loc_FB92
0001035E 3802                       		move.w	d2,d4
00010360 D844                       		add.w	d4,d4
00010362 B644                       		cmp.w	d4,d3
00010364 6400 0000                  		bcc.w	loc_FB92
00010368                            
00010368                            loc_FB0E:
00010368 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001036C 6B00 0000                  		bmi.w	loc_FB92
00010370 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010376 6400 0000                  		bcc.w	loc_FB92
0001037A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001037E 6600 0000                  		bne.w	loc_FBAC
00010382 3A00                       		move.w	d0,d5
00010384 B240                       		cmp.w	d0,d1
00010386 6400                       		bcc.s	loc_FB36
00010388 D241                       		add.w	d1,d1
0001038A 9041                       		sub.w	d1,d0
0001038C 3A00                       		move.w	d0,d5
0001038E 4445                       		neg.w	d5
00010390                            
00010390                            loc_FB36:
00010390 3203                       		move.w	d3,d1
00010392 B443                       		cmp.w	d3,d2
00010394 6400                       		bcc.s	loc_FB44
00010396 5943                       		subq.w	#4,d3
00010398 9644                       		sub.w	d4,d3
0001039A 3203                       		move.w	d3,d1
0001039C 4441                       		neg.w	d1
0001039E                            
0001039E                            loc_FB44:
0001039E BA41                       		cmp.w	d1,d5
000103A0 6200 0000                  		bhi.w	loc_FBB0
000103A4 0C41 0004                  		cmpi.w	#4,d1
000103A8 6300                       		bls.s	loc_FB8C
000103AA 4A40                       		tst.w	d0
000103AC 6700                       		beq.s	loc_FB70
000103AE 6B00                       		bmi.s	loc_FB5E
000103B0 4A69 0010                  		tst.w	$10(a1)
000103B4 6B00                       		bmi.s	loc_FB70
000103B6 6000                       		bra.s	loc_FB64
000103B8                            ; ===========================================================================
000103B8                            
000103B8                            loc_FB5E:
000103B8 4A69 0010                  		tst.w	$10(a1)
000103BC 6A00                       		bpl.s	loc_FB70
000103BE                            
000103BE                            loc_FB64:
000103BE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000103C4 337C 0000 0010             		move.w	#0,$10(a1)
000103CA                            
000103CA                            loc_FB70:
000103CA 9169 0008                  		sub.w	d0,8(a1)
000103CE 0829 0001 0022             		btst	#1,$22(a1)
000103D4 6600                       		bne.s	loc_FB8C
000103D6 08E9 0005 0022             		bset	#5,$22(a1)
000103DC 08E8 0005 0022             		bset	#5,$22(a0)
000103E2 7801                       		moveq	#1,d4
000103E4 4E75                       		rts	
000103E6                            ; ===========================================================================
000103E6                            
000103E6                            loc_FB8C:
000103E6 6100                       		bsr.s	loc_FBA0
000103E8 7801                       		moveq	#1,d4
000103EA 4E75                       		rts	
000103EC                            ; ===========================================================================
000103EC                            
000103EC                            loc_FB92:
000103EC 0828 0005 0022             		btst	#5,$22(a0)
000103F2 6700                       		beq.s	loc_FBAC
000103F4 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000103FA                            
000103FA                            loc_FBA0:
000103FA 08A8 0005 0022             		bclr	#5,$22(a0)
00010400 08A9 0005 0022             		bclr	#5,$22(a1)
00010406                            
00010406                            loc_FBAC:
00010406 7800                       		moveq	#0,d4
00010408 4E75                       		rts	
0001040A                            ; ===========================================================================
0001040A                            
0001040A                            loc_FBB0:
0001040A 4A43                       		tst.w	d3
0001040C 6B00                       		bmi.s	loc_FBBC
0001040E 0C43 0010                  		cmpi.w	#$10,d3
00010412 6500                       		bcs.s	loc_FBEE
00010414 60D6                       		bra.s	loc_FB92
00010416                            ; ===========================================================================
00010416                            
00010416                            loc_FBBC:
00010416 4A69 0012                  		tst.w	$12(a1)
0001041A 6700                       		beq.s	loc_FBD6
0001041C 6A00                       		bpl.s	loc_FBD2
0001041E 4A43                       		tst.w	d3
00010420 6A00                       		bpl.s	loc_FBD2
00010422 9769 000C                  		sub.w	d3,$C(a1)
00010426 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001042C                            
0001042C                            loc_FBD2:
0001042C 78FF                       		moveq	#-1,d4
0001042E 4E75                       		rts	
00010430                            ; ===========================================================================
00010430                            
00010430                            loc_FBD6:
00010430 0829 0001 0022             		btst	#1,$22(a1)
00010436 66F4                       		bne.s	loc_FBD2
00010438 2F08                       		move.l	a0,-(sp)
0001043A 2049                       		movea.l	a1,a0
0001043C 4EB9 0000 0000             		jsr	KillSonic
00010442 205F                       		movea.l	(sp)+,a0
00010444 78FF                       		moveq	#-1,d4
00010446 4E75                       		rts	
00010448                            ; ===========================================================================
00010448                            
00010448                            loc_FBEE:
00010448 5943                       		subq.w	#4,d3
0001044A 7200                       		moveq	#0,d1
0001044C 1228 0019                  		move.b	$19(a0),d1
00010450 3401                       		move.w	d1,d2
00010452 D442                       		add.w	d2,d2
00010454 D269 0008                  		add.w	8(a1),d1
00010458 9268 0008                  		sub.w	8(a0),d1
0001045C 6B00                       		bmi.s	loc_FC28
0001045E B242                       		cmp.w	d2,d1
00010460 6400                       		bcc.s	loc_FC28
00010462 4A69 0012                  		tst.w	$12(a1)
00010466 6B00                       		bmi.s	loc_FC28
00010468 9769 000C                  		sub.w	d3,$C(a1)
0001046C 5369 000C                  		subq.w	#1,$C(a1)
00010470 6100                       		bsr.s	sub_FC2C
00010472 117C 0002 0025             		move.b	#2,$25(a0)
00010478 08E8 0003 0022             		bset	#3,$22(a0)
0001047E 78FF                       		moveq	#-1,d4
00010480 4E75                       		rts	
00010482                            ; ===========================================================================
00010482                            
00010482                            loc_FC28:
00010482 7800                       		moveq	#0,d4
00010484 4E75                       		rts	
00010486                            ; End of function SolidObject
00010486                            
00010486                            
00010486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010486                            
00010486                            
00010486                            sub_FC2C:				; XREF: SolidObject
00010486 0829 0003 0022             		btst	#3,$22(a1)
0001048C 6700                       		beq.s	loc_FC4E
0001048E 7000                       		moveq	#0,d0
00010490 1029 003D                  		move.b	$3D(a1),d0
00010494 ED48                       		lsl.w	#6,d0
00010496 0680 00FF D000             		addi.l	#$FFD000,d0
0001049C 2440                       		movea.l	d0,a2
0001049E 08AA 0003 0022             		bclr	#3,$22(a2)
000104A4 422A 0025                  		clr.b	$25(a2)
000104A8                            
000104A8                            loc_FC4E:
000104A8 3008                       		move.w	a0,d0
000104AA 0440 D000                  		subi.w	#-$3000,d0
000104AE EC48                       		lsr.w	#6,d0
000104B0 0240 007F                  		andi.w	#$7F,d0
000104B4 1340 003D                  		move.b	d0,$3D(a1)
000104B8 137C 0000 0026             		move.b	#0,$26(a1)
000104BE 337C 0000 0012             		move.w	#0,$12(a1)
000104C4 3369 0010 0014             		move.w	$10(a1),$14(a1)
000104CA 0829 0001 0022             		btst	#1,$22(a1)
000104D0 6700                       		beq.s	loc_FC84
000104D2 2F08                       		move.l	a0,-(sp)
000104D4 2049                       		movea.l	a1,a0
000104D6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000104DC 205F                       		movea.l	(sp)+,a0
000104DE                            
000104DE                            loc_FC84:
000104DE 08E9 0003 0022             		bset	#3,$22(a1)
000104E4 08E8 0003 0022             		bset	#3,$22(a0)
000104EA 4E75                       		rts	
000104EC                            ; End of function sub_FC2C
000104EC                            
000104EC                            ; ===========================================================================
000104EC                            ; ---------------------------------------------------------------------------
000104EC                            ; Object 51 - smashable	green block (MZ)
000104EC                            ; ---------------------------------------------------------------------------
000104EC                            
000104EC                            Obj51:					; XREF: Obj_Index
000104EC 7000                       		moveq	#0,d0
000104EE 1028 0024                  		move.b	$24(a0),d0
000104F2 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000104F6 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000104FA 6000 FA14                  		bra.w	MarkObjGone
000104FE                            ; ===========================================================================
000104FE 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010500 0000                       		dc.w Obj51_Solid-Obj51_Index
00010502 0000                       		dc.w Obj51_Display-Obj51_Index
00010504                            ; ===========================================================================
00010504                            
00010504                            Obj51_Main:				; XREF: Obj51_Index
00010504 5428 0024                  		addq.b	#2,$24(a0)
00010508 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010510 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010516 117C 0004 0001             		move.b	#4,1(a0)
0001051C 117C 0010 0019             		move.b	#$10,$19(a0)
00010522 117C 0004 0018             		move.b	#4,$18(a0)
00010528 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001052E                            
0001052E                            Obj51_Solid:				; XREF: Obj51_Index
0001052E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010534 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001053A 323C 001B                  		move.w	#$1B,d1
0001053E 343C 0010                  		move.w	#$10,d2
00010542 363C 0011                  		move.w	#$11,d3
00010546 3828 0008                  		move.w	8(a0),d4
0001054A 6100 FCEC                  		bsr.w	SolidObject
0001054E 0828 0003 0022             		btst	#3,$22(a0)
00010554 6600                       		bne.s	Obj51_Smash
00010556                            
00010556                            locret_FCFC:
00010556 4E75                       		rts	
00010558                            ; ===========================================================================
00010558                            
00010558                            Obj51_Smash:				; XREF: Obj51_Solid
00010558 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001055E 66F6                       		bne.s	locret_FCFC	; if not, branch
00010560 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010566 08E9 0002 0022             		bset	#2,$22(a1)
0001056C 137C 000E 0016             		move.b	#$E,$16(a1)
00010572 137C 0007 0017             		move.b	#7,$17(a1)
00010578 137C 0002 001C             		move.b	#2,$1C(a1)
0001057E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010584 08E9 0001 0022             		bset	#1,$22(a1)
0001058A 08A9 0003 0022             		bclr	#3,$22(a1)
00010590 137C 0002 0024             		move.b	#2,$24(a1)
00010596 08A8 0003 0022             		bclr	#3,$22(a0)
0001059C 4228 0025                  		clr.b	$25(a0)
000105A0 117C 0001 001A             		move.b	#1,$1A(a0)
000105A6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000105AC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000105AE 343C 0038                  		move.w	#$38,d2
000105B2 6100 D45C                  		bsr.w	SmashObject
000105B6 6100 DD36                  		bsr.w	SingleObjLoad
000105BA 6600                       		bne.s	Obj51_Display
000105BC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000105C0 3368 0008 0008             		move.w	8(a0),8(a1)
000105C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000105CC 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000105D0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000105D4 0C42 0006                  		cmpi.w	#6,d2
000105D8 6500                       		bcs.s	Obj51_Bonus
000105DA 7406                       		moveq	#6,d2
000105DC                            
000105DC                            Obj51_Bonus:
000105DC 7000                       		moveq	#0,d0
000105DE 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000105E2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000105E8 6500                       		bcs.s	loc_FD98	; if not, branch
000105EA 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000105EE 740A                       		moveq	#10,d2
000105F0                            
000105F0                            loc_FD98:
000105F0 4EB9 0000 0000             		jsr	AddPoints
000105F6 E24A                       		lsr.w	#1,d2
000105F8 1342 001A                  		move.b	d2,$1A(a1)
000105FC                            
000105FC                            Obj51_Display:				; XREF: Obj51_Index
000105FC 6100 D844                  		bsr.w	SpeedToPos
00010600 0668 0038 0012             		addi.w	#$38,$12(a0)
00010606 6100 D860                  		bsr.w	DisplaySprite
0001060A 4A28 0001                  		tst.b	1(a0)
0001060E 6A00 D894                  		bpl.w	DeleteObject
00010612 4E75                       		rts	
00010614                            ; ===========================================================================
00010614 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010618 FF00 FF00                  		dc.w $FF00, $FF00
0001061C 0200 FE00                  		dc.w $200, $FE00
00010620 0100 FF00                  		dc.w $100, $FF00
00010624                            
00010624 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001062C                            ; ---------------------------------------------------------------------------
0001062C                            ; Sprite mappings - smashable green block (MZ)
0001062C                            ; ---------------------------------------------------------------------------
0001062C                            Map_obj51:
0001062C                            	include "_maps\obj51.asm"
0001062C                            ; ---------------------------------------------------------------------------
0001062C                            ; Sprite mappings - smashable green block (MZ)
0001062C                            ; ---------------------------------------------------------------------------
0001062C 0000                       		dc.w byte_FDD8-Map_obj51
0001062E 0000                       		dc.w byte_FDE3-Map_obj51
00010630 02                         byte_FDD8:	dc.b 2
00010631 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010636 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001063B 04                         byte_FDE3:	dc.b 4
0001063C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010641 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010646 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001064B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010650                            		even
00010650                            		even
00010650                            
00010650                            ; ===========================================================================
00010650                            ; ---------------------------------------------------------------------------
00010650                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010650                            ; ---------------------------------------------------------------------------
00010650                            
00010650                            Obj52:					; XREF: Obj_Index
00010650 7000                       		moveq	#0,d0
00010652 1028 0024                  		move.b	$24(a0),d0
00010656 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001065A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001065E                            ; ===========================================================================
0001065E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010660 0000                       		dc.w Obj52_Platform-Obj52_Index
00010662 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010664                            
00010664 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010666 2001                       		dc.b $20, 1
00010668 2002                       		dc.b $20, 2
0001066A 4003                       		dc.b $40, 3
0001066C 3004                       		dc.b $30, 4
0001066E                            ; ===========================================================================
0001066E                            
0001066E                            Obj52_Main:				; XREF: Obj52_Index
0001066E 5428 0024                  		addq.b	#2,$24(a0)
00010672 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001067A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010680 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010686 6600                       		bne.s	loc_FE44
00010688 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010690 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010696 117C 0007 0016             		move.b	#7,$16(a0)
0001069C                            
0001069C                            loc_FE44:
0001069C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000106A2 6600                       		bne.s	loc_FE60
000106A4 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000106AA 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000106B0 6700                       		beq.s	loc_FE60	; if yes, branch
000106B2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000106B8                            
000106B8                            loc_FE60:
000106B8 117C 0004 0001             		move.b	#4,1(a0)
000106BE 7000                       		moveq	#0,d0
000106C0 1028 0028                  		move.b	$28(a0),d0
000106C4 E648                       		lsr.w	#3,d0
000106C6 0240 001E                  		andi.w	#$1E,d0
000106CA 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000106CE 115A 0019                  		move.b	(a2)+,$19(a0)
000106D2 115A 001A                  		move.b	(a2)+,$1A(a0)
000106D6 117C 0004 0018             		move.b	#4,$18(a0)
000106DC 3168 0008 0030             		move.w	8(a0),$30(a0)
000106E2 3168 000C 0032             		move.w	$C(a0),$32(a0)
000106E8 0228 000F 0028             		andi.b	#$F,$28(a0)
000106EE                            
000106EE                            Obj52_Platform:				; XREF: Obj52_Index
000106EE 6100 0000                  		bsr.w	Obj52_Move
000106F2 7200                       		moveq	#0,d1
000106F4 1228 0019                  		move.b	$19(a0),d1
000106F8 4EB9 0000 7AAE             		jsr	(PlatformObject).l
000106FE 6000                       		bra.s	Obj52_ChkDel
00010700                            ; ===========================================================================
00010700                            
00010700                            Obj52_StandOn:				; XREF: Obj52_Index
00010700 7200                       		moveq	#0,d1
00010702 1228 0019                  		move.b	$19(a0),d1
00010706 4EB9 0000 7C22             		jsr	(ExitPlatform).l
0001070C 3F28 0008                  		move.w	8(a0),-(sp)
00010710 6100 0000                  		bsr.w	Obj52_Move
00010714 341F                       		move.w	(sp)+,d2
00010716 4EB9 0000 818C             		jsr	(MvSonicOnPtfm2).l
0001071C                            
0001071C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001071C 3028 0030                  		move.w	$30(a0),d0
00010720 0240 FF80                  		andi.w	#$FF80,d0
00010724 3238 F700                  		move.w	($FFFFF700).w,d1
00010728 0441 0080                  		subi.w	#$80,d1
0001072C 0241 FF80                  		andi.w	#$FF80,d1
00010730 9041                       		sub.w	d1,d0
00010732 0C40 0280                  		cmpi.w	#$280,d0
00010736 6200 D76C                  		bhi.w	DeleteObject
0001073A 6000 D72C                  		bra.w	DisplaySprite
0001073E                            ; ===========================================================================
0001073E                            
0001073E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001073E 7000                       		moveq	#0,d0
00010740 1028 0028                  		move.b	$28(a0),d0
00010744 0240 000F                  		andi.w	#$F,d0
00010748 D040                       		add.w	d0,d0
0001074A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001074E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010752                            ; ===========================================================================
00010752 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010756 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001075A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001075E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010762 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010766 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010768                            ; ===========================================================================
00010768                            
00010768                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010768 4E75                       		rts	
0001076A                            ; ===========================================================================
0001076A                            
0001076A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001076A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001076E 323C 0060                  		move.w	#$60,d1
00010772 0828 0000 0022             		btst	#0,$22(a0)
00010778 6700                       		beq.s	loc_FF26
0001077A 4440                       		neg.w	d0
0001077C D041                       		add.w	d1,d0
0001077E                            
0001077E                            loc_FF26:
0001077E 3228 0030                  		move.w	$30(a0),d1
00010782 9240                       		sub.w	d0,d1
00010784 3141 0008                  		move.w	d1,8(a0)
00010788 4E75                       		rts	
0001078A                            ; ===========================================================================
0001078A                            
0001078A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001078A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010790 6600                       		bne.s	Obj52_02_Wait
00010792 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010796                            
00010796                            Obj52_02_Wait:
00010796 4E75                       		rts	
00010798                            ; ===========================================================================
00010798                            
00010798                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010798 7600                       		moveq	#0,d3
0001079A 1628 0019                  		move.b	$19(a0),d3
0001079E 6100 0000                  		bsr.w	ObjHitWallRight
000107A2 4A41                       		tst.w	d1		; has the platform hit a wall?
000107A4 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000107A6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000107B0 4E75                       		rts	
000107B2                            ; ===========================================================================
000107B2                            
000107B2                            Obj52_03_End:
000107B2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000107B6 4E75                       		rts	
000107B8                            ; ===========================================================================
000107B8                            
000107B8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000107B8 7600                       		moveq	#0,d3
000107BA 1628 0019                  		move.b	$19(a0),d3
000107BE 6100 0000                  		bsr.w	ObjHitWallRight
000107C2 4A41                       		tst.w	d1		; has the platform hit a wall?
000107C4 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000107C6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107CA 3168 0008 0030             		move.w	8(a0),$30(a0)
000107D0 4E75                       		rts	
000107D2                            ; ===========================================================================
000107D2                            
000107D2                            Obj52_05_End:
000107D2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000107D6 4E75                       		rts	
000107D8                            ; ===========================================================================
000107D8                            
000107D8                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000107D8 6100 D668                  		bsr.w	SpeedToPos
000107DC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000107E2 6100 0000                  		bsr.w	ObjHitFloor
000107E6 4A41                       		tst.w	d1		; has platform hit the floor?
000107E8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000107EC D368 000C                  		add.w	d1,$C(a0)
000107F0 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000107F4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000107F8                            
000107F8                            locret_FFA0:
000107F8 4E75                       		rts	
000107FA                            ; ===========================================================================
000107FA                            
000107FA                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000107FA 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000107FE 6700                       		beq.s	Obj52_07_ChkDel
00010800 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010804                            
00010804                            Obj52_07_ChkDel:
00010804 588F                       		addq.l	#4,sp
00010806 3028 0030                  		move.w	$30(a0),d0
0001080A 0240 FF80                  		andi.w	#$FF80,d0
0001080E 3238 F700                  		move.w	($FFFFF700).w,d1
00010812 0441 0080                  		subi.w	#$80,d1
00010816 0241 FF80                  		andi.w	#$FF80,d1
0001081A 9041                       		sub.w	d1,d0
0001081C 0C40 0280                  		cmpi.w	#$280,d0
00010820 6200 D682                  		bhi.w	DeleteObject
00010824 4E75                       		rts	
00010826                            ; ===========================================================================
00010826                            
00010826                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010826 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001082A 323C 0080                  		move.w	#$80,d1
0001082E 0828 0000 0022             		btst	#0,$22(a0)
00010834 6700                       		beq.s	loc_FFE2
00010836 4440                       		neg.w	d0
00010838 D041                       		add.w	d1,d0
0001083A                            
0001083A                            loc_FFE2:
0001083A 3228 0032                  		move.w	$32(a0),d1
0001083E 9240                       		sub.w	d0,d1
00010840 3141 000C                  		move.w	d1,$C(a0)
00010844 4E75                       		rts	
00010846                            ; ===========================================================================
00010846                            
00010846                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010846 7600                       		moveq	#0,d3
00010848 1628 0019                  		move.b	$19(a0),d3
0001084C D643                       		add.w	d3,d3
0001084E 7208                       		moveq	#8,d1
00010850 0828 0000 0022             		btst	#0,$22(a0)
00010856 6700                       		beq.s	loc_10004
00010858 4441                       		neg.w	d1
0001085A 4443                       		neg.w	d3
0001085C                            
0001085C                            loc_10004:
0001085C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010860 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010862 3028 0008                  		move.w	8(a0),d0
00010866 9068 0030                  		sub.w	$30(a0),d0
0001086A B043                       		cmp.w	d3,d0
0001086C 6700                       		beq.s	Obj52_0A_Wait
0001086E D368 0008                  		add.w	d1,8(a0)	; move platform
00010872 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010878 4E75                       		rts	
0001087A                            ; ===========================================================================
0001087A                            
0001087A                            Obj52_0A_Wait:
0001087A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001087E 6600                       		bne.s	locret_1002E	; if time remains, branch
00010880 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010886                            
00010886                            locret_1002E:
00010886 4E75                       		rts	
00010888                            ; ===========================================================================
00010888                            
00010888                            Obj52_0A_Back:
00010888 3028 0008                  		move.w	8(a0),d0
0001088C 9068 0030                  		sub.w	$30(a0),d0
00010890 6700                       		beq.s	Obj52_0A_Reset
00010892 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010896 4E75                       		rts	
00010898                            ; ===========================================================================
00010898                            
00010898                            Obj52_0A_Reset:
00010898 4268 0036                  		clr.w	$36(a0)
0001089C 5328 0028                  		subq.b	#1,$28(a0)
000108A0 4E75                       		rts	
000108A2                            ; ===========================================================================
000108A2                            ; ---------------------------------------------------------------------------
000108A2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108A2                            ; ---------------------------------------------------------------------------
000108A2                            Map_obj52:
000108A2                            	include "_maps\obj52mz.asm"
000108A2                            ; ---------------------------------------------------------------------------
000108A2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000108A2                            ; ---------------------------------------------------------------------------
000108A2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000108A6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000108AA 0000                       		dc.w byte_1008F-Map_obj52
000108AC 01                         byte_10054:	dc.b 1
000108AD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108B2 02                         byte_1005A:	dc.b 2
000108B3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000108B8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000108BD 04                         byte_10065:	dc.b 4
000108BE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000108C3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000108C8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000108CD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000108D2 04                         byte_1007A:	dc.b 4
000108D3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000108D8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000108DD F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000108E2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000108E7 03                         byte_1008F:	dc.b 3
000108E8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000108ED F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108F2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000108F8 00                         		even
000108F8 00                         		even
000108F8                            
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            ; Sprite mappings - moving block (LZ)
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            Map_obj52a:
000108F8                            	include "_maps\obj52lz.asm"
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            ; Sprite mappings - moving block (LZ)
000108F8                            ; ---------------------------------------------------------------------------
000108F8 0000                       		dc.w byte_100A2-Map_obj52a
000108FA 01                         byte_100A2:	dc.b 1
000108FB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010900                            		even
00010900                            		even
00010900                            
00010900                            ; ===========================================================================
00010900                            ; ---------------------------------------------------------------------------
00010900                            ; Object 55 - Basaran enemy (MZ)
00010900                            ; ---------------------------------------------------------------------------
00010900                            
00010900                            Obj55:					; XREF: Obj_Index
00010900 7000                       		moveq	#0,d0
00010902 1028 0024                  		move.b	$24(a0),d0
00010906 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001090A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001090E                            ; ===========================================================================
0001090E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010910 0000                       		dc.w Obj55_Action-Obj55_Index
00010912                            ; ===========================================================================
00010912                            
00010912                            Obj55_Main:				; XREF: Obj55_Index
00010912 5428 0024                  		addq.b	#2,$24(a0)
00010916 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001091E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010924 117C 0004 0001             		move.b	#4,1(a0)
0001092A 117C 000C 0016             		move.b	#$C,$16(a0)
00010930 117C 0002 0018             		move.b	#2,$18(a0)
00010936 117C 000B 0020             		move.b	#$B,$20(a0)
0001093C 117C 0010 0019             		move.b	#$10,$19(a0)
00010942                            
00010942                            Obj55_Action:				; XREF: Obj55_Index
00010942 7000                       		moveq	#0,d0
00010944 1028 0025                  		move.b	$25(a0),d0
00010948 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001094C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010950 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010956 6100 A596                  		bsr.w	AnimateSprite
0001095A 6000 F5B4                  		bra.w	MarkObjGone
0001095E                            ; ===========================================================================
0001095E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010960 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010962 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010964 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010966                            ; ===========================================================================
00010966                            
00010966                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010966 343C 0080                  		move.w	#$80,d2
0001096A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001096E 6400                       		bcc.s	Obj55_NoDrop
00010970 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010974 3140 0036                  		move.w	d0,$36(a0)
00010978 9068 000C                  		sub.w	$C(a0),d0
0001097C 6500                       		bcs.s	Obj55_NoDrop
0001097E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010982 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010984 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010988 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001098A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001098E D007                       		add.b	d7,d0
00010990 0200 0007                  		andi.b	#7,d0
00010994 6600                       		bne.s	Obj55_NoDrop
00010996 117C 0001 001C             		move.b	#1,$1C(a0)
0001099C 5428 0025                  		addq.b	#2,$25(a0)
000109A0                            
000109A0                            Obj55_NoDrop:
000109A0 4E75                       		rts	
000109A2                            ; ===========================================================================
000109A2                            
000109A2                            Obj55_DropFly:				; XREF: Obj55_Index2
000109A2 6100 D49E                  		bsr.w	SpeedToPos
000109A6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000109AC 343C 0080                  		move.w	#$80,d2
000109B0 6100 0000                  		bsr.w	Obj55_ChkSonic
000109B4 3028 0036                  		move.w	$36(a0),d0
000109B8 9068 000C                  		sub.w	$C(a0),d0
000109BC 6500                       		bcs.s	Obj55_ChkDel
000109BE 0C40 0010                  		cmpi.w	#$10,d0
000109C2 6400                       		bcc.s	locret_10180
000109C4 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000109C8 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000109CE 117C 0002 001C             		move.b	#2,$1C(a0)
000109D4 5428 0025                  		addq.b	#2,$25(a0)
000109D8                            
000109D8                            locret_10180:
000109D8 4E75                       		rts	
000109DA                            ; ===========================================================================
000109DA                            
000109DA                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000109DA 4A28 0001                  		tst.b	1(a0)
000109DE 6A00 D4C4                  		bpl.w	DeleteObject
000109E2 4E75                       		rts	
000109E4                            ; ===========================================================================
000109E4                            
000109E4                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000109E4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109E8 0200 000F                  		andi.b	#$F,d0
000109EC 6600                       		bne.s	loc_101A0
000109EE 303C 00C0                  		move.w	#$C0,d0
000109F2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flapping sound
000109F8                            
000109F8                            loc_101A0:
000109F8 6100 D448                  		bsr.w	SpeedToPos
000109FC 3038 D008                  		move.w	($FFFFD008).w,d0
00010A00 9068 0008                  		sub.w	8(a0),d0
00010A04 6400                       		bcc.s	loc_101B0
00010A06 4440                       		neg.w	d0
00010A08                            
00010A08                            loc_101B0:
00010A08 0C40 0080                  		cmpi.w	#$80,d0
00010A0C 6500                       		bcs.s	locret_101C6
00010A0E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A12 D007                       		add.b	d7,d0
00010A14 0200 0007                  		andi.b	#7,d0
00010A18 6600                       		bne.s	locret_101C6
00010A1A 5428 0025                  		addq.b	#2,$25(a0)
00010A1E                            
00010A1E                            locret_101C6:
00010A1E 4E75                       		rts	
00010A20                            ; ===========================================================================
00010A20                            
00010A20                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010A20 6100 D420                  		bsr.w	SpeedToPos
00010A24 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010A2A 6100 0000                  		bsr.w	ObjHitCeiling
00010A2E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010A30 6A00                       		bpl.s	locret_101F4	; if not, branch
00010A32 9368 000C                  		sub.w	d1,$C(a0)
00010A36 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010A3C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010A40 4268 0012                  		clr.w	$12(a0)
00010A44 4228 001C                  		clr.b	$1C(a0)
00010A48 4228 0025                  		clr.b	$25(a0)
00010A4C                            
00010A4C                            locret_101F4:
00010A4C 4E75                       		rts	
00010A4E                            ; ===========================================================================
00010A4E                            
00010A4E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010A4E 323C 0100                  		move.w	#$100,d1
00010A52 08E8 0000 0022             		bset	#0,$22(a0)
00010A58 3038 D008                  		move.w	($FFFFD008).w,d0
00010A5C 9068 0008                  		sub.w	8(a0),d0
00010A60 6400                       		bcc.s	loc_10214
00010A62 4440                       		neg.w	d0
00010A64 4441                       		neg.w	d1
00010A66 08A8 0000 0022             		bclr	#0,$22(a0)
00010A6C                            
00010A6C                            loc_10214:
00010A6C B042                       		cmp.w	d2,d0
00010A6E 4E75                       		rts	
00010A70                            ; ===========================================================================
00010A70 6100 D3D0                  		bsr.w	SpeedToPos
00010A74 6100 D3F2                  		bsr.w	DisplaySprite
00010A78 4A28 0001                  		tst.b	1(a0)
00010A7C 6A00 D426                  		bpl.w	DeleteObject
00010A80 4E75                       		rts	
00010A82                            ; ===========================================================================
00010A82                            Ani_obj55:
00010A82                            	include "_anim\obj55.asm"
00010A82                            ; ---------------------------------------------------------------------------
00010A82                            ; Animation script - Basaran enemy
00010A82                            ; ---------------------------------------------------------------------------
00010A82 0000                       		dc.w byte_10230-Ani_obj55
00010A84 0000                       		dc.w byte_10234-Ani_obj55
00010A86 0000                       		dc.w byte_10238-Ani_obj55
00010A88 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010A8C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010A90 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010A96                            		even
00010A96                            		even
00010A96                            
00010A96                            ; ---------------------------------------------------------------------------
00010A96                            ; Sprite mappings - Basaran enemy (MZ)
00010A96                            ; ---------------------------------------------------------------------------
00010A96                            Map_obj55:
00010A96                            	include "_maps\obj55.asm"
00010A96                            ; ---------------------------------------------------------------------------
00010A96                            ; Sprite mappings - Basaran enemy (MZ)
00010A96                            ; ---------------------------------------------------------------------------
00010A96 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010A9A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010A9E 01                         byte_10246:	dc.b 1
00010A9F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010AA4 03                         byte_1024C:	dc.b 3
00010AA5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010AAA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010AAF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010AB4 04                         byte_1025C:	dc.b 4
00010AB5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010ABA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010ABF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010AC4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010AC9 04                         byte_10271:	dc.b 4
00010ACA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010ACF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010AD4 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010AD9 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010ADE                            		even
00010ADE                            		even
00010ADE                            
00010ADE                            ; ===========================================================================
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010ADE                            ; ---------------------------------------------------------------------------
00010ADE                            
00010ADE                            Obj56:					; XREF: Obj_Index
00010ADE 7000                       		moveq	#0,d0
00010AE0 1028 0024                  		move.b	$24(a0),d0
00010AE4 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010AE8 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010AEC                            ; ===========================================================================
00010AEC 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010AEE 0000                       		dc.w Obj56_Action-Obj56_Index
00010AF0                            
00010AF0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010AF2 2020                       		dc.b  $20, $20
00010AF4 1020                       		dc.b  $10, $20
00010AF6 201A                       		dc.b  $20, $1A
00010AF8 1027                       		dc.b  $10, $27
00010AFA 1010                       		dc.b  $10, $10
00010AFC 0820                       		dc.b	8, $20
00010AFE 4010                       		dc.b  $40, $10
00010B00                            ; ===========================================================================
00010B00                            
00010B00                            Obj56_Main:				; XREF: Obj56_Index
00010B00 5428 0024                  		addq.b	#2,$24(a0)
00010B04 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010B0C 317C 4000 0002             		move.w	#$4000,2(a0)
00010B12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B18 6600                       		bne.s	loc_102C8
00010B1A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010B20                            
00010B20                            loc_102C8:
00010B20 117C 0004 0001             		move.b	#4,1(a0)
00010B26 117C 0003 0018             		move.b	#3,$18(a0)
00010B2C 7000                       		moveq	#0,d0
00010B2E 1028 0028                  		move.b	$28(a0),d0
00010B32 E648                       		lsr.w	#3,d0
00010B34 0240 000E                  		andi.w	#$E,d0
00010B38 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010B3C 115A 0019                  		move.b	(a2)+,$19(a0)
00010B40 1152 0016                  		move.b	(a2),$16(a0)
00010B44 E248                       		lsr.w	#1,d0
00010B46 1140 001A                  		move.b	d0,$1A(a0)
00010B4A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B50 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B56 7000                       		moveq	#0,d0
00010B58 1012                       		move.b	(a2),d0
00010B5A D040                       		add.w	d0,d0
00010B5C 3140 003A                  		move.w	d0,$3A(a0)
00010B60 7000                       		moveq	#0,d0
00010B62 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B68 6700                       		beq.s	loc_10332
00010B6A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B6E 0240 000F                  		andi.w	#$F,d0
00010B72 5140                       		subq.w	#8,d0
00010B74 6500                       		bcs.s	loc_10332
00010B76 E548                       		lsl.w	#2,d0
00010B78 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B7C 45F2 0000                  		lea	(a2,d0.w),a2
00010B80 4A52                       		tst.w	(a2)
00010B82 6A00                       		bpl.s	loc_10332
00010B84 0868 0000 0022             		bchg	#0,$22(a0)
00010B8A                            
00010B8A                            loc_10332:
00010B8A 1028 0028                  		move.b	$28(a0),d0
00010B8E 6A00                       		bpl.s	Obj56_Action
00010B90 0200 000F                  		andi.b	#$F,d0
00010B94 1140 003C                  		move.b	d0,$3C(a0)
00010B98 117C 0005 0028             		move.b	#5,$28(a0)
00010B9E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010BA4 6600                       		bne.s	Obj56_ChkGone
00010BA6 117C 000C 0028             		move.b	#$C,$28(a0)
00010BAC 317C 0080 003A             		move.w	#$80,$3A(a0)
00010BB2                            
00010BB2                            Obj56_ChkGone:
00010BB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BB6 7000                       		moveq	#0,d0
00010BB8 1028 0023                  		move.b	$23(a0),d0
00010BBC 6700                       		beq.s	Obj56_Action
00010BBE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010BC4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010BCA 6700                       		beq.s	Obj56_Action
00010BCC 5228 0028                  		addq.b	#1,$28(a0)
00010BD0 4268 003A                  		clr.w	$3A(a0)
00010BD4                            
00010BD4                            Obj56_Action:				; XREF: Obj56_Index
00010BD4 3F28 0008                  		move.w	8(a0),-(sp)
00010BD8 7000                       		moveq	#0,d0
00010BDA 1028 0028                  		move.b	$28(a0),d0	; get object type
00010BDE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010BE2 D040                       		add.w	d0,d0
00010BE4 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010BE8 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010BEC 381F                       		move.w	(sp)+,d4
00010BEE 4A28 0001                  		tst.b	1(a0)
00010BF2 6A00                       		bpl.s	Obj56_ChkDel
00010BF4 7200                       		moveq	#0,d1
00010BF6 1228 0019                  		move.b	$19(a0),d1
00010BFA 0641 000B                  		addi.w	#$B,d1
00010BFE 7400                       		moveq	#0,d2
00010C00 1428 0016                  		move.b	$16(a0),d2
00010C04 3602                       		move.w	d2,d3
00010C06 5243                       		addq.w	#1,d3
00010C08 6100 F62E                  		bsr.w	SolidObject
00010C0C                            
00010C0C                            Obj56_ChkDel:
00010C0C 3028 0034                  		move.w	$34(a0),d0
00010C10 0240 FF80                  		andi.w	#$FF80,d0
00010C14 3238 F700                  		move.w	($FFFFF700).w,d1
00010C18 0441 0080                  		subi.w	#$80,d1
00010C1C 0241 FF80                  		andi.w	#$FF80,d1
00010C20 9041                       		sub.w	d1,d0
00010C22 0C40 0280                  		cmpi.w	#$280,d0
00010C26 6200 D27C                  		bhi.w	DeleteObject
00010C2A 6000 D23C                  		bra.w	DisplaySprite
00010C2E                            ; ===========================================================================
00010C2E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010C32 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010C36 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010C3A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010C3E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010C42 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010C46 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010C4A                            ; ===========================================================================
00010C4A                            
00010C4A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010C4A 4E75                       		rts	
00010C4C                            ; ===========================================================================
00010C4C                            
00010C4C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010C4C 323C 0040                  		move.w	#$40,d1
00010C50 7000                       		moveq	#0,d0
00010C52 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C56 6000                       		bra.s	Obj56_Move_LR
00010C58                            ; ===========================================================================
00010C58                            
00010C58                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010C58 323C 0080                  		move.w	#$80,d1
00010C5C 7000                       		moveq	#0,d0
00010C5E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C62                            
00010C62                            Obj56_Move_LR:
00010C62 0828 0000 0022             		btst	#0,$22(a0)
00010C68 6700                       		beq.s	loc_10416
00010C6A 4440                       		neg.w	d0
00010C6C D041                       		add.w	d1,d0
00010C6E                            
00010C6E                            loc_10416:
00010C6E 3228 0034                  		move.w	$34(a0),d1
00010C72 9240                       		sub.w	d0,d1
00010C74 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C78 4E75                       		rts	
00010C7A                            ; ===========================================================================
00010C7A                            
00010C7A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C7A 323C 0040                  		move.w	#$40,d1
00010C7E 7000                       		moveq	#0,d0
00010C80 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C84 6000                       		bra.s	Obj56_Move_UD
00010C86                            ; ===========================================================================
00010C86                            
00010C86                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010C86 323C 0080                  		move.w	#$80,d1
00010C8A 7000                       		moveq	#0,d0
00010C8C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C90                            
00010C90                            Obj56_Move_UD:
00010C90 0828 0000 0022             		btst	#0,$22(a0)
00010C96 6700                       		beq.s	loc_10444
00010C98 4440                       		neg.w	d0
00010C9A D041                       		add.w	d1,d0
00010C9C                            
00010C9C                            loc_10444:
00010C9C 3228 0030                  		move.w	$30(a0),d1
00010CA0 9240                       		sub.w	d0,d1
00010CA2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010CA6 4E75                       		rts	
00010CA8                            ; ===========================================================================
00010CA8                            
00010CA8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010CA8 4A28 0038                  		tst.b	$38(a0)
00010CAC 6600                       		bne.s	loc_104A4
00010CAE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CB4 6600                       		bne.s	loc_1047A	; if not, branch
00010CB6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010CBC 6600                       		bne.s	loc_1047A
00010CBE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CC2 3038 D008                  		move.w	($FFFFD008).w,d0
00010CC6 B068 0008                  		cmp.w	8(a0),d0
00010CCA 6400                       		bcc.s	loc_1047A
00010CCC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010CD2                            
00010CD2                            loc_1047A:
00010CD2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CD6 7000                       		moveq	#0,d0
00010CD8 1028 003C                  		move.b	$3C(a0),d0
00010CDC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010CE2 6700                       		beq.s	loc_104AE
00010CE4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CEA 6600                       		bne.s	loc_1049E	; if not, branch
00010CEC 0C00 0003                  		cmpi.b	#3,d0
00010CF0 6600                       		bne.s	loc_1049E
00010CF2 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CF6                            
00010CF6                            loc_1049E:
00010CF6 117C 0001 0038             		move.b	#1,$38(a0)
00010CFC                            
00010CFC                            loc_104A4:
00010CFC 4A68 003A                  		tst.w	$3A(a0)
00010D00 6700                       		beq.s	loc_104C8
00010D02 5568 003A                  		subq.w	#2,$3A(a0)
00010D06                            
00010D06                            loc_104AE:
00010D06 3028 003A                  		move.w	$3A(a0),d0
00010D0A 0828 0000 0022             		btst	#0,$22(a0)
00010D10 6700                       		beq.s	loc_104BC
00010D12 4440                       		neg.w	d0
00010D14                            
00010D14                            loc_104BC:
00010D14 3228 0030                  		move.w	$30(a0),d1
00010D18 D240                       		add.w	d0,d1
00010D1A 3141 000C                  		move.w	d1,$C(a0)
00010D1E 4E75                       		rts	
00010D20                            ; ===========================================================================
00010D20                            
00010D20                            loc_104C8:
00010D20 5228 0028                  		addq.b	#1,$28(a0)
00010D24 4228 0038                  		clr.b	$38(a0)
00010D28 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D2C 7000                       		moveq	#0,d0
00010D2E 1028 0023                  		move.b	$23(a0),d0
00010D32 67D2                       		beq.s	loc_104AE
00010D34 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D3A 60CA                       		bra.s	loc_104AE
00010D3C                            ; ===========================================================================
00010D3C                            
00010D3C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010D3C 4A28 0038                  		tst.b	$38(a0)
00010D40 6600                       		bne.s	loc_10500
00010D42 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D46 7000                       		moveq	#0,d0
00010D48 1028 003C                  		move.b	$3C(a0),d0
00010D4C 4A32 0000                  		tst.b	(a2,d0.w)
00010D50 6A00                       		bpl.s	loc_10512
00010D52 117C 0001 0038             		move.b	#1,$38(a0)
00010D58                            
00010D58                            loc_10500:
00010D58 7000                       		moveq	#0,d0
00010D5A 1028 0016                  		move.b	$16(a0),d0
00010D5E D040                       		add.w	d0,d0
00010D60 B068 003A                  		cmp.w	$3A(a0),d0
00010D64 6700                       		beq.s	loc_1052C
00010D66 5468 003A                  		addq.w	#2,$3A(a0)
00010D6A                            
00010D6A                            loc_10512:
00010D6A 3028 003A                  		move.w	$3A(a0),d0
00010D6E 0828 0000 0022             		btst	#0,$22(a0)
00010D74 6700                       		beq.s	loc_10520
00010D76 4440                       		neg.w	d0
00010D78                            
00010D78                            loc_10520:
00010D78 3228 0030                  		move.w	$30(a0),d1
00010D7C D240                       		add.w	d0,d1
00010D7E 3141 000C                  		move.w	d1,$C(a0)
00010D82 4E75                       		rts	
00010D84                            ; ===========================================================================
00010D84                            
00010D84                            loc_1052C:
00010D84 5328 0028                  		subq.b	#1,$28(a0)
00010D88 4228 0038                  		clr.b	$38(a0)
00010D8C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D90 7000                       		moveq	#0,d0
00010D92 1028 0023                  		move.b	$23(a0),d0
00010D96 67D2                       		beq.s	loc_10512
00010D98 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D9E 60CA                       		bra.s	loc_10512
00010DA0                            ; ===========================================================================
00010DA0                            
00010DA0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010DA0 4A28 0038                  		tst.b	$38(a0)
00010DA4 6600                       		bne.s	loc_1055E
00010DA6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010DAA 6700                       		beq.s	locret_10578
00010DAC 117C 0001 0038             		move.b	#1,$38(a0)
00010DB2 4268 003A                  		clr.w	$3A(a0)
00010DB6                            
00010DB6                            loc_1055E:
00010DB6 5268 0008                  		addq.w	#1,8(a0)
00010DBA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010DC0 5268 003A                  		addq.w	#1,$3A(a0)
00010DC4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010DCA 6600                       		bne.s	locret_10578
00010DCC 4228 0028                  		clr.b	$28(a0)
00010DD0                            
00010DD0                            locret_10578:
00010DD0 4E75                       		rts	
00010DD2                            ; ===========================================================================
00010DD2                            
00010DD2                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010DD2 4A28 0038                  		tst.b	$38(a0)
00010DD6 6600                       		bne.s	loc_10598
00010DD8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DDC 7000                       		moveq	#0,d0
00010DDE 1028 003C                  		move.b	$3C(a0),d0
00010DE2 0832 0000 0000             		btst	#0,(a2,d0.w)
00010DE8 6700                       		beq.s	loc_105A2
00010DEA 117C 0001 0038             		move.b	#1,$38(a0)
00010DF0                            
00010DF0                            loc_10598:
00010DF0 4A68 003A                  		tst.w	$3A(a0)
00010DF4 6700                       		beq.s	loc_105C0
00010DF6 5568 003A                  		subq.w	#2,$3A(a0)
00010DFA                            
00010DFA                            loc_105A2:
00010DFA 3028 003A                  		move.w	$3A(a0),d0
00010DFE 0828 0000 0022             		btst	#0,$22(a0)
00010E04 6700                       		beq.s	loc_105B4
00010E06 4440                       		neg.w	d0
00010E08 0640 0080                  		addi.w	#$80,d0
00010E0C                            
00010E0C                            loc_105B4:
00010E0C 3228 0034                  		move.w	$34(a0),d1
00010E10 D240                       		add.w	d0,d1
00010E12 3141 0008                  		move.w	d1,8(a0)
00010E16 4E75                       		rts	
00010E18                            ; ===========================================================================
00010E18                            
00010E18                            loc_105C0:
00010E18 5228 0028                  		addq.b	#1,$28(a0)
00010E1C 4228 0038                  		clr.b	$38(a0)
00010E20 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E24 7000                       		moveq	#0,d0
00010E26 1028 0023                  		move.b	$23(a0),d0
00010E2A 67CE                       		beq.s	loc_105A2
00010E2C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010E32 60C6                       		bra.s	loc_105A2
00010E34                            ; ===========================================================================
00010E34                            
00010E34                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010E34 4A28 0038                  		tst.b	$38(a0)
00010E38 6600                       		bne.s	loc_105F8
00010E3A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E3E 7000                       		moveq	#0,d0
00010E40 1028 003C                  		move.b	$3C(a0),d0
00010E44 4A32 0000                  		tst.b	(a2,d0.w)
00010E48 6A00                       		bpl.s	loc_10606
00010E4A 117C 0001 0038             		move.b	#1,$38(a0)
00010E50                            
00010E50                            loc_105F8:
00010E50 303C 0080                  		move.w	#$80,d0
00010E54 B068 003A                  		cmp.w	$3A(a0),d0
00010E58 6700                       		beq.s	loc_10624
00010E5A 5468 003A                  		addq.w	#2,$3A(a0)
00010E5E                            
00010E5E                            loc_10606:
00010E5E 3028 003A                  		move.w	$3A(a0),d0
00010E62 0828 0000 0022             		btst	#0,$22(a0)
00010E68 6700                       		beq.s	loc_10618
00010E6A 4440                       		neg.w	d0
00010E6C 0640 0080                  		addi.w	#$80,d0
00010E70                            
00010E70                            loc_10618:
00010E70 3228 0034                  		move.w	$34(a0),d1
00010E74 D240                       		add.w	d0,d1
00010E76 3141 0008                  		move.w	d1,8(a0)
00010E7A 4E75                       		rts	
00010E7C                            ; ===========================================================================
00010E7C                            
00010E7C                            loc_10624:
00010E7C 5328 0028                  		subq.b	#1,$28(a0)
00010E80 4228 0038                  		clr.b	$38(a0)
00010E84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E88 7000                       		moveq	#0,d0
00010E8A 1028 0023                  		move.b	$23(a0),d0
00010E8E 67CE                       		beq.s	loc_10606
00010E90 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E96 60C6                       		bra.s	loc_10606
00010E98                            ; ===========================================================================
00010E98                            
00010E98                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010E98 323C 0010                  		move.w	#$10,d1
00010E9C 7000                       		moveq	#0,d0
00010E9E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010EA2 E248                       		lsr.w	#1,d0
00010EA4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010EA8 6000                       		bra.s	Obj56_Move_Sqr
00010EAA                            ; ===========================================================================
00010EAA                            
00010EAA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010EAA 323C 0030                  		move.w	#$30,d1
00010EAE 7000                       		moveq	#0,d0
00010EB0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010EB4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010EB8 6000                       		bra.s	Obj56_Move_Sqr
00010EBA                            ; ===========================================================================
00010EBA                            
00010EBA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010EBA 323C 0050                  		move.w	#$50,d1
00010EBE 7000                       		moveq	#0,d0
00010EC0 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010EC4 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010EC8 6000                       		bra.s	Obj56_Move_Sqr
00010ECA                            ; ===========================================================================
00010ECA                            
00010ECA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010ECA 323C 0070                  		move.w	#$70,d1
00010ECE 7000                       		moveq	#0,d0
00010ED0 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010ED4 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010ED8                            
00010ED8                            Obj56_Move_Sqr:
00010ED8 4A43                       		tst.w	d3
00010EDA 6600                       		bne.s	loc_1068E
00010EDC 5228 0022                  		addq.b	#1,$22(a0)
00010EE0 0228 0003 0022             		andi.b	#3,$22(a0)
00010EE6                            
00010EE6                            loc_1068E:
00010EE6 1428 0022                  		move.b	$22(a0),d2
00010EEA 0202 0003                  		andi.b	#3,d2
00010EEE 6600                       		bne.s	loc_106AE
00010EF0 9041                       		sub.w	d1,d0
00010EF2 D068 0034                  		add.w	$34(a0),d0
00010EF6 3140 0008                  		move.w	d0,8(a0)
00010EFA 4441                       		neg.w	d1
00010EFC D268 0030                  		add.w	$30(a0),d1
00010F00 3141 000C                  		move.w	d1,$C(a0)
00010F04 4E75                       		rts	
00010F06                            ; ===========================================================================
00010F06                            
00010F06                            loc_106AE:
00010F06 5302                       		subq.b	#1,d2
00010F08 6600                       		bne.s	loc_106CC
00010F0A 5341                       		subq.w	#1,d1
00010F0C 9041                       		sub.w	d1,d0
00010F0E 4440                       		neg.w	d0
00010F10 D068 0030                  		add.w	$30(a0),d0
00010F14 3140 000C                  		move.w	d0,$C(a0)
00010F18 5241                       		addq.w	#1,d1
00010F1A D268 0034                  		add.w	$34(a0),d1
00010F1E 3141 0008                  		move.w	d1,8(a0)
00010F22 4E75                       		rts	
00010F24                            ; ===========================================================================
00010F24                            
00010F24                            loc_106CC:
00010F24 5302                       		subq.b	#1,d2
00010F26 6600                       		bne.s	loc_106EA
00010F28 5341                       		subq.w	#1,d1
00010F2A 9041                       		sub.w	d1,d0
00010F2C 4440                       		neg.w	d0
00010F2E D068 0034                  		add.w	$34(a0),d0
00010F32 3140 0008                  		move.w	d0,8(a0)
00010F36 5241                       		addq.w	#1,d1
00010F38 D268 0030                  		add.w	$30(a0),d1
00010F3C 3141 000C                  		move.w	d1,$C(a0)
00010F40 4E75                       		rts	
00010F42                            ; ===========================================================================
00010F42                            
00010F42                            loc_106EA:
00010F42 9041                       		sub.w	d1,d0
00010F44 D068 0030                  		add.w	$30(a0),d0
00010F48 3140 000C                  		move.w	d0,$C(a0)
00010F4C 4441                       		neg.w	d1
00010F4E D268 0034                  		add.w	$34(a0),d1
00010F52 3141 0008                  		move.w	d1,8(a0)
00010F56 4E75                       		rts	
00010F58                            ; ===========================================================================
00010F58                            ; ---------------------------------------------------------------------------
00010F58                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F58                            ; ---------------------------------------------------------------------------
00010F58                            Map_obj56:
00010F58                            	include "_maps\obj56.asm"
00010F58                            ; ---------------------------------------------------------------------------
00010F58                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F58                            ; ---------------------------------------------------------------------------
00010F58 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010F5C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010F60 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010F64 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010F68 01                         byte_10710:	dc.b 1
00010F69 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F6E 04                         byte_10716:	dc.b 4
00010F6F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F74 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F79 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010F7E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010F83 02                         byte_1072B:	dc.b 2
00010F84 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010F89 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010F8E 04                         byte_10736:	dc.b 4
00010F8F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010F94 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010F99 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010F9E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010FA3 03                         byte_1074B:	dc.b 3
00010FA4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010FA9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010FAE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010FB3 01                         byte_1075B:	dc.b 1
00010FB4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FB9 02                         byte_10761:	dc.b 2
00010FBA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010FBF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010FC4 04                         byte_1076C:	dc.b 4
00010FC5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010FCA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010FCF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010FD4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010FDA 00                         		even
00010FDA 00                         		even
00010FDA                            
00010FDA                            ; ===========================================================================
00010FDA                            ; ---------------------------------------------------------------------------
00010FDA                            ; Object 57 - spiked balls (SYZ, LZ)
00010FDA                            ; ---------------------------------------------------------------------------
00010FDA                            
00010FDA                            Obj57:					; XREF: Obj_Index
00010FDA 7000                       		moveq	#0,d0
00010FDC 1028 0024                  		move.b	$24(a0),d0
00010FE0 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010FE4 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010FE8                            ; ===========================================================================
00010FE8 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010FEA 0000                       		dc.w Obj57_Move-Obj57_Index
00010FEC 0000                       		dc.w Obj57_Display-Obj57_Index
00010FEE                            ; ===========================================================================
00010FEE                            
00010FEE                            Obj57_Main:				; XREF: Obj57_Index
00010FEE 5428 0024                  		addq.b	#2,$24(a0)
00010FF2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010FFA 317C 03BA 0002             		move.w	#$3BA,2(a0)
00011000 117C 0004 0001             		move.b	#4,1(a0)
00011006 117C 0004 0018             		move.b	#4,$18(a0)
0001100C 117C 0008 0019             		move.b	#8,$19(a0)
00011012 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011018 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001101E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011024 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001102A 6600                       		bne.s	loc_107E8
0001102C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011032 317C 0310 0002             		move.w	#$310,2(a0)
00011038 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011040                            
00011040                            loc_107E8:
00011040 1228 0028                  		move.b	$28(a0),d1	; get object type
00011044 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011048 4881                       		ext.w	d1
0001104A E741                       		asl.w	#3,d1		; multiply by 8
0001104C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011050 1028 0022                  		move.b	$22(a0),d0
00011054 E418                       		ror.b	#2,d0
00011056 0200 00C0                  		andi.b	#-$40,d0
0001105A 1140 0026                  		move.b	d0,$26(a0)
0001105E 45E8 0029                  		lea	$29(a0),a2
00011062 1228 0028                  		move.b	$28(a0),d1	; get object type
00011066 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001106A 14FC 0000                  		move.b	#0,(a2)+
0001106E 3601                       		move.w	d1,d3
00011070 E94B                       		lsl.w	#4,d3
00011072 1143 003C                  		move.b	d3,$3C(a0)
00011076 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011078 6500                       		bcs.s	loc_10894
0001107A 0828 0003 0028             		btst	#3,$28(a0)
00011080 6700                       		beq.s	Obj57_MakeChain
00011082 5341                       		subq.w	#1,d1
00011084 6500                       		bcs.s	loc_10894
00011086                            
00011086                            Obj57_MakeChain:
00011086 6100 D266                  		bsr.w	SingleObjLoad
0001108A 6600                       		bne.s	loc_10894
0001108C 5228 0029                  		addq.b	#1,$29(a0)
00011090 3A09                       		move.w	a1,d5
00011092 0445 D000                  		subi.w	#-$3000,d5
00011096 EC4D                       		lsr.w	#6,d5
00011098 0245 007F                  		andi.w	#$7F,d5
0001109C 14C5                       		move.b	d5,(a2)+
0001109E 137C 0004 0024             		move.b	#4,$24(a1)
000110A4 1290                       		move.b	0(a0),0(a1)
000110A6 2368 0004 0004             		move.l	4(a0),4(a1)
000110AC 3368 0002 0002             		move.w	2(a0),2(a1)
000110B2 1368 0001 0001             		move.b	1(a0),1(a1)
000110B8 1368 0018 0018             		move.b	$18(a0),$18(a1)
000110BE 1368 0019 0019             		move.b	$19(a0),$19(a1)
000110C4 1368 0020 0020             		move.b	$20(a0),$20(a1)
000110CA 0403 0010                  		subi.b	#$10,d3
000110CE 1343 003C                  		move.b	d3,$3C(a1)
000110D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000110D8 6600                       		bne.s	loc_10890
000110DA 4A03                       		tst.b	d3
000110DC 6600                       		bne.s	loc_10890
000110DE 137C 0002 001A             		move.b	#2,$1A(a1)
000110E4                            
000110E4                            loc_10890:
000110E4 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000110E8                            
000110E8                            loc_10894:
000110E8 3A08                       		move.w	a0,d5
000110EA 0445 D000                  		subi.w	#-$3000,d5
000110EE EC4D                       		lsr.w	#6,d5
000110F0 0245 007F                  		andi.w	#$7F,d5
000110F4 14C5                       		move.b	d5,(a2)+
000110F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000110FC 6600                       		bne.s	Obj57_Move
000110FE 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00011104 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
0001110A                            
0001110A                            Obj57_Move:				; XREF: Obj57_Index
0001110A 6100 0000                  		bsr.w	Obj57_MoveSub
0001110E 6000 0000                  		bra.w	Obj57_ChkDel
00011112                            ; ===========================================================================
00011112                            
00011112                            Obj57_MoveSub:				; XREF: Obj57_Move
00011112 3028 003E                  		move.w	$3E(a0),d0
00011116 D168 0026                  		add.w	d0,$26(a0)
0001111A 1028 0026                  		move.b	$26(a0),d0
0001111E 4EB9 0000 2D02             		jsr	(CalcSine).l
00011124 3428 0038                  		move.w	$38(a0),d2
00011128 3628 003A                  		move.w	$3A(a0),d3
0001112C 45E8 0029                  		lea	$29(a0),a2
00011130 7C00                       		moveq	#0,d6
00011132 1C1A                       		move.b	(a2)+,d6
00011134                            
00011134                            Obj57_MoveLoop:
00011134 7800                       		moveq	#0,d4
00011136 181A                       		move.b	(a2)+,d4
00011138 ED4C                       		lsl.w	#6,d4
0001113A 0684 00FF D000             		addi.l	#$FFD000,d4
00011140 2244                       		movea.l	d4,a1
00011142 7800                       		moveq	#0,d4
00011144 1829 003C                  		move.b	$3C(a1),d4
00011148 2A04                       		move.l	d4,d5
0001114A C9C0                       		muls.w	d0,d4
0001114C E084                       		asr.l	#8,d4
0001114E CBC1                       		muls.w	d1,d5
00011150 E085                       		asr.l	#8,d5
00011152 D842                       		add.w	d2,d4
00011154 DA43                       		add.w	d3,d5
00011156 3344 000C                  		move.w	d4,$C(a1)
0001115A 3345 0008                  		move.w	d5,8(a1)
0001115E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011162 4E75                       		rts	
00011164                            ; ===========================================================================
00011164                            
00011164                            Obj57_ChkDel:				; XREF: Obj57_Move
00011164 3028 003A                  		move.w	$3A(a0),d0
00011168 0240 FF80                  		andi.w	#$FF80,d0
0001116C 3238 F700                  		move.w	($FFFFF700).w,d1
00011170 0441 0080                  		subi.w	#$80,d1
00011174 0241 FF80                  		andi.w	#$FF80,d1
00011178 9041                       		sub.w	d1,d0
0001117A 0C40 0280                  		cmpi.w	#$280,d0
0001117E 6200 0000                  		bhi.w	Obj57_Delete
00011182 6000 CCE4                  		bra.w	DisplaySprite
00011186                            ; ===========================================================================
00011186                            
00011186                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011186 7400                       		moveq	#0,d2
00011188 45E8 0029                  		lea	$29(a0),a2
0001118C 141A                       		move.b	(a2)+,d2
0001118E                            
0001118E                            Obj57_DelLoop:
0001118E 7000                       		moveq	#0,d0
00011190 101A                       		move.b	(a2)+,d0
00011192 ED48                       		lsl.w	#6,d0
00011194 0680 00FF D000             		addi.l	#$FFD000,d0
0001119A 2240                       		movea.l	d0,a1
0001119C 6100 CD08                  		bsr.w	DeleteObject2
000111A0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000111A4                            
000111A4 4E75                       		rts	
000111A6                            ; ===========================================================================
000111A6                            
000111A6                            Obj57_Display:				; XREF: Obj57_Index
000111A6 6000 CCC0                  		bra.w	DisplaySprite
000111AA                            ; ===========================================================================
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            ; Sprite mappings - chain of spiked balls (SYZ)
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            Map_obj57:
000111AA                            	include "_maps\obj57syz.asm"
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            ; Sprite mappings - chain of spiked balls (SYZ)
000111AA                            ; ---------------------------------------------------------------------------
000111AA 0000                       		dc.w byte_10958-Map_obj57
000111AC 01                         byte_10958:	dc.b 1
000111AD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111B2                            		even
000111B2                            		even
000111B2                            
000111B2                            ; ---------------------------------------------------------------------------
000111B2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111B2                            ; ---------------------------------------------------------------------------
000111B2                            Map_obj57a:
000111B2                            	include "_maps\obj57lz.asm"
000111B2                            ; ---------------------------------------------------------------------------
000111B2                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111B2                            ; ---------------------------------------------------------------------------
000111B2 0000                       		dc.w byte_10964-Map_obj57a
000111B4 0000                       		dc.w byte_1096A-Map_obj57a
000111B6 0000                       		dc.w byte_10970-Map_obj57a
000111B8 01                         byte_10964:	dc.b 1
000111B9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111BE 01                         byte_1096A:	dc.b 1
000111BF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000111C4 01                         byte_10970:	dc.b 1
000111C5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000111CA                            		even
000111CA                            		even
000111CA                            
000111CA                            ; ===========================================================================
000111CA                            ; ---------------------------------------------------------------------------
000111CA                            ; Object 58 - giant spiked balls (SYZ)
000111CA                            ; ---------------------------------------------------------------------------
000111CA                            
000111CA                            Obj58:					; XREF: Obj_Index
000111CA 7000                       		moveq	#0,d0
000111CC 1028 0024                  		move.b	$24(a0),d0
000111D0 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000111D4 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000111D8                            ; ===========================================================================
000111D8 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000111DA 0000                       		dc.w Obj58_Move-Obj58_Index
000111DC                            ; ===========================================================================
000111DC                            
000111DC                            Obj58_Main:				; XREF: Obj58_Index
000111DC 5428 0024                  		addq.b	#2,$24(a0)
000111E0 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000111E8 317C 0396 0002             		move.w	#$396,2(a0)
000111EE 117C 0004 0001             		move.b	#4,1(a0)
000111F4 117C 0004 0018             		move.b	#4,$18(a0)
000111FA 117C 0018 0019             		move.b	#$18,$19(a0)
00011200 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011206 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001120C 117C 0086 0020             		move.b	#$86,$20(a0)
00011212 1228 0028                  		move.b	$28(a0),d1	; get object type
00011216 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001121A 4881                       		ext.w	d1
0001121C E741                       		asl.w	#3,d1		; multiply by 8
0001121E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011222 1028 0022                  		move.b	$22(a0),d0
00011226 E418                       		ror.b	#2,d0
00011228 0200 00C0                  		andi.b	#$C0,d0
0001122C 1140 0026                  		move.b	d0,$26(a0)
00011230 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011236                            
00011236                            Obj58_Move:				; XREF: Obj58_Index
00011236 7000                       		moveq	#0,d0
00011238 1028 0028                  		move.b	$28(a0),d0	; get object type
0001123C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011240 D040                       		add.w	d0,d0
00011242 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011246 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001124A 3028 003A                  		move.w	$3A(a0),d0
0001124E 0240 FF80                  		andi.w	#$FF80,d0
00011252 3238 F700                  		move.w	($FFFFF700).w,d1
00011256 0441 0080                  		subi.w	#$80,d1
0001125A 0241 FF80                  		andi.w	#$FF80,d1
0001125E 9041                       		sub.w	d1,d0
00011260 0C40 0280                  		cmpi.w	#$280,d0
00011264 6200 CC3E                  		bhi.w	DeleteObject
00011268 6000 CBFE                  		bra.w	DisplaySprite
0001126C                            ; ===========================================================================
0001126C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001126E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011270 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011272 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011274                            ; ===========================================================================
00011274                            
00011274                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011274 4E75                       		rts	
00011276                            ; ===========================================================================
00011276                            
00011276                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011276 323C 0060                  		move.w	#$60,d1
0001127A 7000                       		moveq	#0,d0
0001127C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011280 0828 0000 0022             		btst	#0,$22(a0)
00011286 6700                       		beq.s	loc_10A38
00011288 4440                       		neg.w	d0
0001128A D041                       		add.w	d1,d0
0001128C                            
0001128C                            loc_10A38:
0001128C 3228 003A                  		move.w	$3A(a0),d1
00011290 9240                       		sub.w	d0,d1
00011292 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011296 4E75                       		rts	
00011298                            ; ===========================================================================
00011298                            
00011298                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011298 323C 0060                  		move.w	#$60,d1
0001129C 7000                       		moveq	#0,d0
0001129E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000112A2 0828 0000 0022             		btst	#0,$22(a0)
000112A8 6700                       		beq.s	loc_10A5C
000112AA 4440                       		neg.w	d0
000112AC 0640 0080                  		addi.w	#$80,d0
000112B0                            
000112B0                            loc_10A5C:
000112B0 3228 0038                  		move.w	$38(a0),d1
000112B4 9240                       		sub.w	d0,d1
000112B6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000112BA 4E75                       		rts	
000112BC                            ; ===========================================================================
000112BC                            
000112BC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000112BC 3028 003E                  		move.w	$3E(a0),d0
000112C0 D168 0026                  		add.w	d0,$26(a0)
000112C4 1028 0026                  		move.b	$26(a0),d0
000112C8 4EB9 0000 2D02             		jsr	(CalcSine).l
000112CE 3428 0038                  		move.w	$38(a0),d2
000112D2 3628 003A                  		move.w	$3A(a0),d3
000112D6 7800                       		moveq	#0,d4
000112D8 1828 003C                  		move.b	$3C(a0),d4
000112DC 2A04                       		move.l	d4,d5
000112DE C9C0                       		muls.w	d0,d4
000112E0 E084                       		asr.l	#8,d4
000112E2 CBC1                       		muls.w	d1,d5
000112E4 E085                       		asr.l	#8,d5
000112E6 D842                       		add.w	d2,d4
000112E8 DA43                       		add.w	d3,d5
000112EA 3144 000C                  		move.w	d4,$C(a0)
000112EE 3145 0008                  		move.w	d5,8(a0)
000112F2 4E75                       		rts	
000112F4                            ; ===========================================================================
000112F4                            ; ---------------------------------------------------------------------------
000112F4                            ; Sprite mappings - SBZ	spiked ball on a chain
000112F4                            ; ---------------------------------------------------------------------------
000112F4                            Map_obj15b:
000112F4                            	include "_maps\obj15sbz.asm"
000112F4                            ; ---------------------------------------------------------------------------
000112F4                            ; Sprite mappings - spiked ball on a chain (SBZ)
000112F4                            ; ---------------------------------------------------------------------------
000112F4 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000112F8 0000                       		dc.w byte_10AC6-Map_obj15b
000112FA 05                         byte_10AA6:	dc.b 5
000112FB E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011300 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011305 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001130A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001130F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011314 01                         byte_10AC0:	dc.b 1
00011315 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001131A 02                         byte_10AC6:	dc.b 2
0001131B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011320 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011326 00                         		even
00011326 00                         		even
00011326                            
00011326                            ; ===========================================================================
00011326                            ; ---------------------------------------------------------------------------
00011326                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011326                            ; ---------------------------------------------------------------------------
00011326                            
00011326                            Obj59:					; XREF: Obj_Index
00011326 7000                       		moveq	#0,d0
00011328 1028 0024                  		move.b	$24(a0),d0
0001132C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011330 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011334 3028 0032                  		move.w	$32(a0),d0
00011338 0240 FF80                  		andi.w	#$FF80,d0
0001133C 3238 F700                  		move.w	($FFFFF700).w,d1
00011340 0441 0080                  		subi.w	#$80,d1
00011344 0241 FF80                  		andi.w	#$FF80,d1
00011348 9041                       		sub.w	d1,d0
0001134A 0C40 0280                  		cmpi.w	#$280,d0
0001134E 6200 CB54                  		bhi.w	DeleteObject
00011352 6000 CB14                  		bra.w	DisplaySprite
00011356                            ; ===========================================================================
00011356 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011358 0000                       		dc.w Obj59_Platform-Obj59_Index
0001135A 0000                       		dc.w Obj59_Action-Obj59_Index
0001135C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001135E                            
0001135E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011360                            
00011360 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011362 2001                       		dc.b $20, 1
00011364 3401                       		dc.b $34, 1
00011366 1003                       		dc.b $10, 3
00011368 2003                       		dc.b $20, 3
0001136A 3403                       		dc.b $34, 3
0001136C 1401                       		dc.b $14, 1
0001136E 2401                       		dc.b $24, 1
00011370 2C01                       		dc.b $2C, 1
00011372 1403                       		dc.b $14, 3
00011374 2403                       		dc.b $24, 3
00011376 2C03                       		dc.b $2C, 3
00011378 2005                       		dc.b $20, 5
0001137A 2007                       		dc.b $20, 7
0001137C 3009                       		dc.b $30, 9
0001137E                            ; ===========================================================================
0001137E                            
0001137E                            Obj59_Main:				; XREF: Obj59_Index
0001137E 5428 0024                  		addq.b	#2,$24(a0)
00011382 7000                       		moveq	#0,d0
00011384 1028 0028                  		move.b	$28(a0),d0
00011388 6A00                       		bpl.s	Obj59_Main2
0001138A 5828 0024                  		addq.b	#4,$24(a0)
0001138E 0240 007F                  		andi.w	#$7F,d0
00011392 C0FC 0006                  		mulu.w	#6,d0
00011396 3140 003C                  		move.w	d0,$3C(a0)
0001139A 3140 003E                  		move.w	d0,$3E(a0)
0001139E 588F                       		addq.l	#4,sp
000113A0 4E75                       		rts	
000113A2                            ; ===========================================================================
000113A2                            
000113A2                            Obj59_Main2:
000113A2 E648                       		lsr.w	#3,d0
000113A4 0240 001E                  		andi.w	#$1E,d0
000113A8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000113AC 115A 0019                  		move.b	(a2)+,$19(a0)
000113B0 115A 001A                  		move.b	(a2)+,$1A(a0)
000113B4 7000                       		moveq	#0,d0
000113B6 1028 0028                  		move.b	$28(a0),d0
000113BA D040                       		add.w	d0,d0
000113BC 0240 001E                  		andi.w	#$1E,d0
000113C0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000113C4 101A                       		move.b	(a2)+,d0
000113C6 E548                       		lsl.w	#2,d0
000113C8 3140 003C                  		move.w	d0,$3C(a0)
000113CC 115A 0028                  		move.b	(a2)+,$28(a0)
000113D0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000113D8 317C 4000 0002             		move.w	#$4000,2(a0)
000113DE 117C 0004 0001             		move.b	#4,1(a0)
000113E4 117C 0004 0018             		move.b	#4,$18(a0)
000113EA 3168 0008 0032             		move.w	8(a0),$32(a0)
000113F0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000113F6                            
000113F6                            Obj59_Platform:				; XREF: Obj59_Index
000113F6 7200                       		moveq	#0,d1
000113F8 1228 0019                  		move.b	$19(a0),d1
000113FC 4EB9 0000 7AAE             		jsr	(PlatformObject).l
00011402 6000 0000                  		bra.w	Obj59_Types
00011406                            ; ===========================================================================
00011406                            
00011406                            Obj59_Action:				; XREF: Obj59_Index
00011406 7200                       		moveq	#0,d1
00011408 1228 0019                  		move.b	$19(a0),d1
0001140C 4EB9 0000 7C22             		jsr	(ExitPlatform).l
00011412 3F28 0008                  		move.w	8(a0),-(sp)
00011416 6100 0000                  		bsr.w	Obj59_Types
0001141A 341F                       		move.w	(sp)+,d2
0001141C 4A10                       		tst.b	0(a0)
0001141E 6700                       		beq.s	locret_10BD4
00011420 4EF9 0000 818C             		jmp	(MvSonicOnPtfm2).l
00011426                            ; ===========================================================================
00011426                            
00011426                            locret_10BD4:
00011426 4E75                       		rts	
00011428                            ; ===========================================================================
00011428                            
00011428                            Obj59_Types:
00011428 7000                       		moveq	#0,d0
0001142A 1028 0028                  		move.b	$28(a0),d0
0001142E 0240 000F                  		andi.w	#$F,d0
00011432 D040                       		add.w	d0,d0
00011434 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011438 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001143C                            ; ===========================================================================
0001143C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011440 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011444 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011448 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001144C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011450                            ; ===========================================================================
00011450                            
00011450                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011450 4E75                       		rts	
00011452                            ; ===========================================================================
00011452                            
00011452                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011452 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011458 6600                       		bne.s	locret_10C0C
0001145A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001145E                            
0001145E                            locret_10C0C:
0001145E 4E75                       		rts	
00011460                            ; ===========================================================================
00011460                            
00011460                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011460 6100 0000                  		bsr.w	Obj59_Move
00011464 3028 0034                  		move.w	$34(a0),d0
00011468 4440                       		neg.w	d0
0001146A D068 0030                  		add.w	$30(a0),d0
0001146E 3140 000C                  		move.w	d0,$C(a0)
00011472 4E75                       		rts	
00011474                            ; ===========================================================================
00011474                            
00011474                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011474 6100 0000                  		bsr.w	Obj59_Move
00011478 3028 0034                  		move.w	$34(a0),d0
0001147C D068 0030                  		add.w	$30(a0),d0
00011480 3140 000C                  		move.w	d0,$C(a0)
00011484 4E75                       		rts	
00011486                            ; ===========================================================================
00011486                            
00011486                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011486 6100 0000                  		bsr.w	Obj59_Move
0001148A 3028 0034                  		move.w	$34(a0),d0
0001148E E240                       		asr.w	#1,d0
00011490 4440                       		neg.w	d0
00011492 D068 0030                  		add.w	$30(a0),d0
00011496 3140 000C                  		move.w	d0,$C(a0)
0001149A 3028 0034                  		move.w	$34(a0),d0
0001149E D068 0032                  		add.w	$32(a0),d0
000114A2 3140 0008                  		move.w	d0,8(a0)
000114A6 4E75                       		rts	
000114A8                            ; ===========================================================================
000114A8                            
000114A8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000114A8 6100 0000                  		bsr.w	Obj59_Move
000114AC 3028 0034                  		move.w	$34(a0),d0
000114B0 E240                       		asr.w	#1,d0
000114B2 D068 0030                  		add.w	$30(a0),d0
000114B6 3140 000C                  		move.w	d0,$C(a0)
000114BA 3028 0034                  		move.w	$34(a0),d0
000114BE 4440                       		neg.w	d0
000114C0 D068 0032                  		add.w	$32(a0),d0
000114C4 3140 0008                  		move.w	d0,8(a0)
000114C8 4E75                       		rts	
000114CA                            ; ===========================================================================
000114CA                            
000114CA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000114CA 6100 0000                  		bsr.w	Obj59_Move
000114CE 3028 0034                  		move.w	$34(a0),d0
000114D2 4440                       		neg.w	d0
000114D4 D068 0030                  		add.w	$30(a0),d0
000114D8 3140 000C                  		move.w	d0,$C(a0)
000114DC 4A28 0028                  		tst.b	$28(a0)
000114E0 6700 0000                  		beq.w	loc_10C94
000114E4 4E75                       		rts	
000114E6                            ; ===========================================================================
000114E6                            
000114E6                            loc_10C94:
000114E6 0828 0003 0022             		btst	#3,$22(a0)
000114EC 6700                       		beq.s	Obj59_Delete
000114EE 08E9 0001 0022             		bset	#1,$22(a1)
000114F4 08A9 0003 0022             		bclr	#3,$22(a1)
000114FA 137C 0002 0024             		move.b	#2,$24(a1)
00011500                            
00011500                            Obj59_Delete:
00011500 6000 C9A2                  		bra.w	DeleteObject
00011504                            
00011504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011504                            
00011504                            
00011504                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011504 3028 0038                  		move.w	$38(a0),d0
00011508 4A28 003A                  		tst.b	$3A(a0)
0001150C 6600                       		bne.s	loc_10CC8
0001150E 0C40 0800                  		cmpi.w	#$800,d0
00011512 6400                       		bcc.s	loc_10CD0
00011514 0640 0010                  		addi.w	#$10,d0
00011518 6000                       		bra.s	loc_10CD0
0001151A                            ; ===========================================================================
0001151A                            
0001151A                            loc_10CC8:
0001151A 4A40                       		tst.w	d0
0001151C 6700                       		beq.s	loc_10CD0
0001151E 0440 0010                  		subi.w	#$10,d0
00011522                            
00011522                            loc_10CD0:
00011522 3140 0038                  		move.w	d0,$38(a0)
00011526 48C0                       		ext.l	d0
00011528 E180                       		asl.l	#8,d0
0001152A D0A8 0034                  		add.l	$34(a0),d0
0001152E 2140 0034                  		move.l	d0,$34(a0)
00011532 4840                       		swap	d0
00011534 3428 003C                  		move.w	$3C(a0),d2
00011538 B042                       		cmp.w	d2,d0
0001153A 6300                       		bls.s	loc_10CF0
0001153C 117C 0001 003A             		move.b	#1,$3A(a0)
00011542                            
00011542                            loc_10CF0:
00011542 D442                       		add.w	d2,d2
00011544 B042                       		cmp.w	d2,d0
00011546 6600                       		bne.s	locret_10CFA
00011548 4228 0028                  		clr.b	$28(a0)
0001154C                            
0001154C                            locret_10CFA:
0001154C 4E75                       		rts	
0001154E                            ; End of function Obj59_Move
0001154E                            
0001154E                            ; ===========================================================================
0001154E                            
0001154E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001154E 5368 003C                  		subq.w	#1,$3C(a0)
00011552 6600                       		bne.s	Obj59_ChkDel
00011554 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001155A 6100 CD92                  		bsr.w	SingleObjLoad
0001155E 6600                       		bne.s	Obj59_ChkDel
00011560 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011564 3368 0008 0008             		move.w	8(a0),8(a1)
0001156A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011570 137C 000E 0028             		move.b	#$E,$28(a1)
00011576                            
00011576                            Obj59_ChkDel:
00011576 588F                       		addq.l	#4,sp
00011578 3028 0008                  		move.w	8(a0),d0
0001157C 0240 FF80                  		andi.w	#$FF80,d0
00011580 3238 F700                  		move.w	($FFFFF700).w,d1
00011584 0441 0080                  		subi.w	#$80,d1
00011588 0241 FF80                  		andi.w	#$FF80,d1
0001158C 9041                       		sub.w	d1,d0
0001158E 0C40 0280                  		cmpi.w	#$280,d0
00011592 6200 C910                  		bhi.w	DeleteObject
00011596 4E75                       		rts	
00011598                            ; ===========================================================================
00011598                            ; ---------------------------------------------------------------------------
00011598                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011598                            ; ---------------------------------------------------------------------------
00011598                            Map_obj59:
00011598                            	include "_maps\obj59.asm"
00011598                            ; ---------------------------------------------------------------------------
00011598                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011598                            ; ---------------------------------------------------------------------------
00011598 0000                       		dc.w byte_10D4A-Map_obj59
0001159A 03                         byte_10D4A:	dc.b 3
0001159B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000115A0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000115A5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000115AA                            		even
000115AA                            		even
000115AA                            
000115AA                            ; ===========================================================================
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            ; Object 5A - platforms	moving in circles (SLZ)
000115AA                            ; ---------------------------------------------------------------------------
000115AA                            
000115AA                            Obj5A:					; XREF: Obj_Index
000115AA 7000                       		moveq	#0,d0
000115AC 1028 0024                  		move.b	$24(a0),d0
000115B0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000115B4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000115B8 3028 0032                  		move.w	$32(a0),d0
000115BC 0240 FF80                  		andi.w	#$FF80,d0
000115C0 3238 F700                  		move.w	($FFFFF700).w,d1
000115C4 0441 0080                  		subi.w	#$80,d1
000115C8 0241 FF80                  		andi.w	#$FF80,d1
000115CC 9041                       		sub.w	d1,d0
000115CE 0C40 0280                  		cmpi.w	#$280,d0
000115D2 6200 C8D0                  		bhi.w	DeleteObject
000115D6 6000 C890                  		bra.w	DisplaySprite
000115DA                            ; ===========================================================================
000115DA 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000115DC 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000115DE 0000                       		dc.w Obj5A_Action-Obj5A_Index
000115E0                            ; ===========================================================================
000115E0                            
000115E0                            Obj5A_Main:				; XREF: Obj5A_Index
000115E0 5428 0024                  		addq.b	#2,$24(a0)
000115E4 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000115EC 317C 4000 0002             		move.w	#$4000,2(a0)
000115F2 117C 0004 0001             		move.b	#4,1(a0)
000115F8 117C 0004 0018             		move.b	#4,$18(a0)
000115FE 117C 0018 0019             		move.b	#$18,$19(a0)
00011604 3168 0008 0032             		move.w	8(a0),$32(a0)
0001160A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011610                            
00011610                            Obj5A_Platform:				; XREF: Obj5A_Index
00011610 7200                       		moveq	#0,d1
00011612 1228 0019                  		move.b	$19(a0),d1
00011616 4EB9 0000 7AAE             		jsr	(PlatformObject).l
0001161C 6000 0000                  		bra.w	Obj5A_Types
00011620                            ; ===========================================================================
00011620                            
00011620                            Obj5A_Action:				; XREF: Obj5A_Index
00011620 7200                       		moveq	#0,d1
00011622 1228 0019                  		move.b	$19(a0),d1
00011626 4EB9 0000 7C22             		jsr	(ExitPlatform).l
0001162C 3F28 0008                  		move.w	8(a0),-(sp)
00011630 6100 0000                  		bsr.w	Obj5A_Types
00011634 341F                       		move.w	(sp)+,d2
00011636 4EF9 0000 818C             		jmp	(MvSonicOnPtfm2).l
0001163C                            ; ===========================================================================
0001163C                            
0001163C                            Obj5A_Types:
0001163C 7000                       		moveq	#0,d0
0001163E 1028 0028                  		move.b	$28(a0),d0
00011642 0240 000C                  		andi.w	#$C,d0
00011646 E248                       		lsr.w	#1,d0
00011648 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001164C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011650                            ; ===========================================================================
00011650 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011652 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011654                            ; ===========================================================================
00011654                            
00011654                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011654 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011658 0401 0050                  		subi.b	#$50,d1
0001165C 4881                       		ext.w	d1
0001165E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011662 0402 0050                  		subi.b	#$50,d2
00011666 4882                       		ext.w	d2
00011668 0828 0000 0028             		btst	#0,$28(a0)
0001166E 6700                       		beq.s	loc_10E24
00011670 4441                       		neg.w	d1
00011672 4442                       		neg.w	d2
00011674                            
00011674                            loc_10E24:
00011674 0828 0001 0028             		btst	#1,$28(a0)
0001167A 6700                       		beq.s	loc_10E30
0001167C 4441                       		neg.w	d1
0001167E C342                       		exg	d1,d2
00011680                            
00011680                            loc_10E30:
00011680 D268 0032                  		add.w	$32(a0),d1
00011684 3141 0008                  		move.w	d1,8(a0)
00011688 D468 0030                  		add.w	$30(a0),d2
0001168C 3142 000C                  		move.w	d2,$C(a0)
00011690 4E75                       		rts	
00011692                            ; ===========================================================================
00011692                            
00011692                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011692 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011696 0401 0050                  		subi.b	#$50,d1
0001169A 4881                       		ext.w	d1
0001169C 1438 FE84                  		move.b	($FFFFFE84).w,d2
000116A0 0402 0050                  		subi.b	#$50,d2
000116A4 4882                       		ext.w	d2
000116A6 0828 0000 0028             		btst	#0,$28(a0)
000116AC 6700                       		beq.s	loc_10E62
000116AE 4441                       		neg.w	d1
000116B0 4442                       		neg.w	d2
000116B2                            
000116B2                            loc_10E62:
000116B2 0828 0001 0028             		btst	#1,$28(a0)
000116B8 6700                       		beq.s	loc_10E6E
000116BA 4441                       		neg.w	d1
000116BC C342                       		exg	d1,d2
000116BE                            
000116BE                            loc_10E6E:
000116BE 4441                       		neg.w	d1
000116C0 D268 0032                  		add.w	$32(a0),d1
000116C4 3141 0008                  		move.w	d1,8(a0)
000116C8 D468 0030                  		add.w	$30(a0),d2
000116CC 3142 000C                  		move.w	d2,$C(a0)
000116D0 4E75                       		rts	
000116D2                            ; ===========================================================================
000116D2                            ; ---------------------------------------------------------------------------
000116D2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116D2                            ; ---------------------------------------------------------------------------
000116D2                            Map_obj5A:
000116D2                            	include "_maps\obj5A.asm"
000116D2                            ; ---------------------------------------------------------------------------
000116D2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116D2                            ; ---------------------------------------------------------------------------
000116D2 0000                       		dc.w byte_10E84-Map_obj5A
000116D4 02                         byte_10E84:	dc.b 2
000116D5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000116DA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000116E0 00                         		even
000116E0 00                         		even
000116E0                            
000116E0                            ; ===========================================================================
000116E0                            ; ---------------------------------------------------------------------------
000116E0                            ; Object 5B - blocks that form a staircase (SLZ)
000116E0                            ; ---------------------------------------------------------------------------
000116E0                            
000116E0                            Obj5B:					; XREF: Obj_Index
000116E0 7000                       		moveq	#0,d0
000116E2 1028 0024                  		move.b	$24(a0),d0
000116E6 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000116EA 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000116EE 3028 0030                  		move.w	$30(a0),d0
000116F2 0240 FF80                  		andi.w	#$FF80,d0
000116F6 3238 F700                  		move.w	($FFFFF700).w,d1
000116FA 0441 0080                  		subi.w	#$80,d1
000116FE 0241 FF80                  		andi.w	#$FF80,d1
00011702 9041                       		sub.w	d1,d0
00011704 0C40 0280                  		cmpi.w	#$280,d0
00011708 6200 C79A                  		bhi.w	DeleteObject
0001170C 6000 C75A                  		bra.w	DisplaySprite
00011710                            ; ===========================================================================
00011710 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011712 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011714 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011716                            ; ===========================================================================
00011716                            
00011716                            Obj5B_Main:				; XREF: Obj5B_Index
00011716 5428 0024                  		addq.b	#2,$24(a0)
0001171A 7638                       		moveq	#$38,d3
0001171C 7801                       		moveq	#1,d4
0001171E 0828 0000 0022             		btst	#0,$22(a0)
00011724 6700                       		beq.s	loc_10EDA
00011726 763B                       		moveq	#$3B,d3
00011728 78FF                       		moveq	#-1,d4
0001172A                            
0001172A                            loc_10EDA:
0001172A 3428 0008                  		move.w	8(a0),d2
0001172E 2248                       		movea.l	a0,a1
00011730 7203                       		moveq	#3,d1
00011732 6000                       		bra.s	Obj5B_MakeBlocks
00011734                            ; ===========================================================================
00011734                            
00011734                            Obj5B_Loop:
00011734 6100 CBCE                  		bsr.w	SingleObjLoad2
00011738 6600 0000                  		bne.w	Obj5B_Move
0001173C 137C 0004 0024             		move.b	#4,$24(a1)
00011742                            
00011742                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011742 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011746 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001174E 337C 4000 0002             		move.w	#$4000,2(a1)
00011754 137C 0004 0001             		move.b	#4,1(a1)
0001175A 137C 0003 0018             		move.b	#3,$18(a1)
00011760 137C 0010 0019             		move.b	#$10,$19(a1)
00011766 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001176C 3342 0008                  		move.w	d2,8(a1)
00011770 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011776 3368 0008 0030             		move.w	8(a0),$30(a1)
0001177C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011782 0642 0020                  		addi.w	#$20,d2
00011786 1343 0037                  		move.b	d3,$37(a1)
0001178A 2348 003C                  		move.l	a0,$3C(a1)
0001178E D604                       		add.b	d4,d3
00011790 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011794                            
00011794                            Obj5B_Move:				; XREF: Obj5B_Index
00011794 7000                       		moveq	#0,d0
00011796 1028 0028                  		move.b	$28(a0),d0
0001179A 0240 0007                  		andi.w	#7,d0
0001179E D040                       		add.w	d0,d0
000117A0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000117A4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000117A8                            
000117A8                            Obj5B_Solid:				; XREF: Obj5B_Index
000117A8 2468 003C                  		movea.l	$3C(a0),a2
000117AC 7000                       		moveq	#0,d0
000117AE 1028 0037                  		move.b	$37(a0),d0
000117B2 1032 0000                  		move.b	(a2,d0.w),d0
000117B6 D068 0032                  		add.w	$32(a0),d0
000117BA 3140 000C                  		move.w	d0,$C(a0)
000117BE 7200                       		moveq	#0,d1
000117C0 1228 0019                  		move.b	$19(a0),d1
000117C4 0641 000B                  		addi.w	#$B,d1
000117C8 343C 0010                  		move.w	#$10,d2
000117CC 363C 0011                  		move.w	#$11,d3
000117D0 3828 0008                  		move.w	8(a0),d4
000117D4 6100 EA62                  		bsr.w	SolidObject
000117D8 4A04                       		tst.b	d4
000117DA 6A00                       		bpl.s	loc_10F92
000117DC 1544 0036                  		move.b	d4,$36(a2)
000117E0                            
000117E0                            loc_10F92:
000117E0 0828 0003 0022             		btst	#3,$22(a0)
000117E6 6700                       		beq.s	locret_10FA0
000117E8 157C 0001 0036             		move.b	#1,$36(a2)
000117EE                            
000117EE                            locret_10FA0:
000117EE 4E75                       		rts	
000117F0                            ; ===========================================================================
000117F0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000117F2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000117F4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000117F6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000117F8                            ; ===========================================================================
000117F8                            
000117F8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000117F8 4A68 0034                  		tst.w	$34(a0)
000117FC 6600                       		bne.s	loc_10FC0
000117FE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011804 6600                       		bne.s	locret_10FBE
00011806 317C 001E 0034             		move.w	#$1E,$34(a0)
0001180C                            
0001180C                            locret_10FBE:
0001180C 4E75                       		rts	
0001180E                            ; ===========================================================================
0001180E                            
0001180E                            loc_10FC0:
0001180E 5368 0034                  		subq.w	#1,$34(a0)
00011812 66F8                       		bne.s	locret_10FBE
00011814 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011818 4E75                       		rts	
0001181A                            ; ===========================================================================
0001181A                            
0001181A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001181A 4A68 0034                  		tst.w	$34(a0)
0001181E 6600                       		bne.s	loc_10FE0
00011820 4A28 0036                  		tst.b	$36(a0)
00011824 6A00                       		bpl.s	locret_10FDE
00011826 317C 003C 0034             		move.w	#$3C,$34(a0)
0001182C                            
0001182C                            locret_10FDE:
0001182C 4E75                       		rts	
0001182E                            ; ===========================================================================
0001182E                            
0001182E                            loc_10FE0:
0001182E 5368 0034                  		subq.w	#1,$34(a0)
00011832 6600                       		bne.s	loc_10FEC
00011834 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011838 4E75                       		rts	
0001183A                            ; ===========================================================================
0001183A                            
0001183A                            loc_10FEC:
0001183A 43E8 0038                  		lea	$38(a0),a1
0001183E 3028 0034                  		move.w	$34(a0),d0
00011842 E408                       		lsr.b	#2,d0
00011844 0200 0001                  		andi.b	#1,d0
00011848 12C0                       		move.b	d0,(a1)+
0001184A 0A00 0001                  		eori.b	#1,d0
0001184E 12C0                       		move.b	d0,(a1)+
00011850 0A00 0001                  		eori.b	#1,d0
00011854 12C0                       		move.b	d0,(a1)+
00011856 0A00 0001                  		eori.b	#1,d0
0001185A 12C0                       		move.b	d0,(a1)+
0001185C 4E75                       		rts	
0001185E                            ; ===========================================================================
0001185E                            
0001185E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001185E 43E8 0038                  		lea	$38(a0),a1
00011862 0C11 0080                  		cmpi.b	#$80,(a1)
00011866 6700                       		beq.s	locret_11038
00011868 5211                       		addq.b	#1,(a1)
0001186A 7200                       		moveq	#0,d1
0001186C 1219                       		move.b	(a1)+,d1
0001186E 4841                       		swap	d1
00011870 E289                       		lsr.l	#1,d1
00011872 2401                       		move.l	d1,d2
00011874 E289                       		lsr.l	#1,d1
00011876 2601                       		move.l	d1,d3
00011878 D682                       		add.l	d2,d3
0001187A 4841                       		swap	d1
0001187C 4842                       		swap	d2
0001187E 4843                       		swap	d3
00011880 12C3                       		move.b	d3,(a1)+
00011882 12C2                       		move.b	d2,(a1)+
00011884 12C1                       		move.b	d1,(a1)+
00011886                            
00011886                            locret_11038:
00011886 4E75                       		rts	
00011888 4E75                       		rts	
0001188A                            ; ===========================================================================
0001188A                            ; ---------------------------------------------------------------------------
0001188A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001188A                            ; ---------------------------------------------------------------------------
0001188A                            Map_obj5B:
0001188A                            	include "_maps\obj5B.asm"
0001188A                            ; ---------------------------------------------------------------------------
0001188A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001188A                            ; ---------------------------------------------------------------------------
0001188A 0000                       		dc.w byte_1103E-Map_obj5B
0001188C 01                         byte_1103E:	dc.b 1
0001188D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011892                            		even
00011892                            		even
00011892                            
00011892                            ; ===========================================================================
00011892                            ; ---------------------------------------------------------------------------
00011892                            ; Object 5C - metal girders in foreground (SLZ)
00011892                            ; ---------------------------------------------------------------------------
00011892                            
00011892                            Obj5C:					; XREF: Obj_Index
00011892 7000                       		moveq	#0,d0
00011894 1028 0024                  		move.b	$24(a0),d0
00011898 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001189C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000118A0                            ; ===========================================================================
000118A0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000118A2 0000                       		dc.w Obj5C_Display-Obj5C_Index
000118A4                            ; ===========================================================================
000118A4                            
000118A4                            Obj5C_Main:				; XREF: Obj5C_Index
000118A4 5428 0024                  		addq.b	#2,$24(a0)
000118A8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000118B0 317C 83CC 0002             		move.w	#$83CC,2(a0)
000118B6 117C 0010 0019             		move.b	#$10,$19(a0)
000118BC                            
000118BC                            Obj5C_Display:				; XREF: Obj5C_Index
000118BC 2238 F700                  		move.l	($FFFFF700).w,d1
000118C0 D281                       		add.l	d1,d1
000118C2 4841                       		swap	d1
000118C4 4441                       		neg.w	d1
000118C6 3141 0008                  		move.w	d1,8(a0)
000118CA 2238 F704                  		move.l	($FFFFF704).w,d1
000118CE D281                       		add.l	d1,d1
000118D0 4841                       		swap	d1
000118D2 0241 003F                  		andi.w	#$3F,d1
000118D6 4441                       		neg.w	d1
000118D8 0641 0100                  		addi.w	#$100,d1
000118DC 3141 000A                  		move.w	d1,$A(a0)
000118E0 6000 C586                  		bra.w	DisplaySprite
000118E4                            ; ===========================================================================
000118E4                            ; ---------------------------------------------------------------------------
000118E4                            ; Sprite mappings - metal girders in foreground	(SLZ)
000118E4                            ; ---------------------------------------------------------------------------
000118E4                            Map_obj5C:
000118E4                            	include "_maps\obj5C.asm"
000118E4                            ; ---------------------------------------------------------------------------
000118E4                            ; Sprite mappings - metal girders in foreground	(SLZ)
000118E4                            ; ---------------------------------------------------------------------------
000118E4 0000                       		dc.w byte_11098-Map_obj5C
000118E6 09                         byte_11098:	dc.b 9
000118E7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000118EC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000118F1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000118F6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000118FB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011900 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011905 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001190A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001190F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011914                            		even
00011914                            		even
00011914                            
00011914                            ; ===========================================================================
00011914                            ; ---------------------------------------------------------------------------
00011914                            ; Object 1B - water surface (LZ)
00011914                            ; ---------------------------------------------------------------------------
00011914                            
00011914                            Obj1B:					; XREF: Obj_Index
00011914 7000                       		moveq	#0,d0
00011916 1028 0024                  		move.b	$24(a0),d0
0001191A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001191E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011922                            ; ===========================================================================
00011922 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011924 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011926                            ; ===========================================================================
00011926                            
00011926                            Obj1B_Main:				; XREF: Obj1B_Index
00011926 5428 0024                  		addq.b	#2,$24(a0)
0001192A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011932 317C C300 0002             		move.w	#$C300,2(a0)
00011938 117C 0004 0001             		move.b	#4,1(a0)
0001193E 117C 0080 0019             		move.b	#$80,$19(a0)
00011944 3168 0008 0030             		move.w	8(a0),$30(a0)
0001194A                            
0001194A                            Obj1B_Action:				; XREF: Obj1B_Index
0001194A 3238 F700                  		move.w	($FFFFF700).w,d1
0001194E 0241 FFE0                  		andi.w	#$FFE0,d1
00011952 D268 0030                  		add.w	$30(a0),d1
00011956 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001195C 6700                       		beq.s	loc_11114
0001195E 0641 0020                  		addi.w	#$20,d1
00011962                            
00011962                            loc_11114:
00011962 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011966 3238 F646                  		move.w	($FFFFF646).w,d1
0001196A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001196E 4A28 0032                  		tst.b	$32(a0)
00011972 6600                       		bne.s	Obj1B_Animate
00011974 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001197A 6700                       		beq.s	loc_1114A	; if not, branch
0001197C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011980 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011986 6000                       		bra.s	Obj1B_Display
00011988                            ; ===========================================================================
00011988                            
00011988                            Obj1B_Animate:				; XREF: loc_11114
00011988 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001198C 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001198E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011994 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011998                            
00011998                            loc_1114A:				; XREF: loc_11114
00011998 5328 001E                  		subq.b	#1,$1E(a0)
0001199C 6A00                       		bpl.s	Obj1B_Display
0001199E 117C 0007 001E             		move.b	#7,$1E(a0)
000119A4 5228 001A                  		addq.b	#1,$1A(a0)
000119A8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000119AE 6500                       		bcs.s	Obj1B_Display
000119B0 117C 0000 001A             		move.b	#0,$1A(a0)
000119B6                            
000119B6                            Obj1B_Display:
000119B6 6000 C4B0                  		bra.w	DisplaySprite
000119BA                            ; ===========================================================================
000119BA                            ; ---------------------------------------------------------------------------
000119BA                            ; Sprite mappings - water surface (LZ)
000119BA                            ; ---------------------------------------------------------------------------
000119BA                            Map_obj1B:
000119BA                            	include "_maps\obj1B.asm"
000119BA                            ; ---------------------------------------------------------------------------
000119BA                            ; Sprite mappings - water surface (LZ)
000119BA                            ; ---------------------------------------------------------------------------
000119BA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000119BE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000119C2 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000119C6 03                         byte_11178:	dc.b 3
000119C7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000119CC FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119D1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119D6 03                         byte_11188:	dc.b 3
000119D7 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119DC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000119E1 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000119E6 03                         byte_11198:	dc.b 3
000119E7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000119EC FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119F1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119F6 06                         byte_111A8:	dc.b 6
000119F7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000119FC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011A01 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011A06 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011A0B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011A10 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011A15 06                         byte_111C7:	dc.b 6
00011A16 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011A1B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011A20 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A25 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011A2A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A2F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011A34 06                         byte_111E6:	dc.b 6
00011A35 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A3A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011A3F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A44 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011A49 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A4E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011A54 00                         		even
00011A54 00                         		even
00011A54                            
00011A54                            ; ===========================================================================
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            ; Object 0B - pole that	breaks (LZ)
00011A54                            ; ---------------------------------------------------------------------------
00011A54                            
00011A54                            Obj0B:					; XREF: Obj_Index
00011A54 7000                       		moveq	#0,d0
00011A56 1028 0024                  		move.b	$24(a0),d0
00011A5A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011A5E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011A62                            ; ===========================================================================
00011A62 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011A64 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011A66 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011A68                            ; ===========================================================================
00011A68                            
00011A68                            Obj0B_Main:				; XREF: Obj0B_Index
00011A68 5428 0024                  		addq.b	#2,$24(a0)
00011A6C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A74 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A7A 117C 0004 0001             		move.b	#4,1(a0)
00011A80 117C 0008 0019             		move.b	#8,$19(a0)
00011A86 117C 0004 0018             		move.b	#4,$18(a0)
00011A8C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011A92 7000                       		moveq	#0,d0
00011A94 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A98 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A9C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011AA0                            
00011AA0                            Obj0B_Action:				; XREF: Obj0B_Index
00011AA0 4A28 0032                  		tst.b	$32(a0)
00011AA4 6700                       		beq.s	Obj0B_Grab
00011AA6 4A68 0030                  		tst.w	$30(a0)
00011AAA 6700                       		beq.s	Obj0B_MoveUp
00011AAC 5368 0030                  		subq.w	#1,$30(a0)
00011AB0 6600                       		bne.s	Obj0B_MoveUp
00011AB2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011AB8 6000                       		bra.s	Obj0B_Release
00011ABA                            ; ===========================================================================
00011ABA                            
00011ABA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011ABA 43F8 D000                  		lea	($FFFFD000).w,a1
00011ABE 3028 000C                  		move.w	$C(a0),d0
00011AC2 0440 0018                  		subi.w	#$18,d0
00011AC6 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011ACC 6700                       		beq.s	Obj0B_MoveDown
00011ACE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011AD2 B069 000C                  		cmp.w	$C(a1),d0
00011AD6 6500                       		bcs.s	Obj0B_MoveDown
00011AD8 3340 000C                  		move.w	d0,$C(a1)
00011ADC                            
00011ADC                            Obj0B_MoveDown:
00011ADC 0640 0024                  		addi.w	#$24,d0
00011AE0 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011AE6 6700                       		beq.s	Obj0B_LetGo
00011AE8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011AEC B069 000C                  		cmp.w	$C(a1),d0
00011AF0 6400                       		bcc.s	Obj0B_LetGo
00011AF2 3340 000C                  		move.w	d0,$C(a1)
00011AF6                            
00011AF6                            Obj0B_LetGo:
00011AF6 1038 F603                  		move.b	($FFFFF603).w,d0
00011AFA 0240 0070                  		andi.w	#$70,d0
00011AFE 6700                       		beq.s	Obj0B_Display
00011B00                            
00011B00                            Obj0B_Release:				; XREF: Obj0B_Action
00011B00 4228 0020                  		clr.b	$20(a0)
00011B04 5428 0024                  		addq.b	#2,$24(a0)
00011B08 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011B0C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011B10 4228 0032                  		clr.b	$32(a0)
00011B14 6000                       		bra.s	Obj0B_Display
00011B16                            ; ===========================================================================
00011B16                            
00011B16                            Obj0B_Grab:				; XREF: Obj0B_Action
00011B16 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011B1A 6700                       		beq.s	Obj0B_Display	; if not, branch
00011B1C 43F8 D000                  		lea	($FFFFD000).w,a1
00011B20 3028 0008                  		move.w	8(a0),d0
00011B24 0640 0014                  		addi.w	#$14,d0
00011B28 B069 0008                  		cmp.w	8(a1),d0
00011B2C 6400                       		bcc.s	Obj0B_Display
00011B2E 4228 0021                  		clr.b	$21(a0)
00011B32 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011B38 6400                       		bcc.s	Obj0B_Display
00011B3A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011B3E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011B42 3028 0008                  		move.w	8(a0),d0
00011B46 0640 0014                  		addi.w	#$14,d0
00011B4A 3340 0008                  		move.w	d0,8(a1)
00011B4E 08A9 0000 0022             		bclr	#0,$22(a1)
00011B54 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011B5A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011B60 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B66 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B6C                            
00011B6C                            Obj0B_Display:				; XREF: Obj0B_Index
00011B6C 6000 E3A2                  		bra.w	MarkObjGone
00011B70                            ; ===========================================================================
00011B70                            ; ---------------------------------------------------------------------------
00011B70                            ; Sprite mappings - pole that breaks (LZ)
00011B70                            ; ---------------------------------------------------------------------------
00011B70                            Map_obj0B:
00011B70                            	include "_maps\obj0B.asm"
00011B70                            ; ---------------------------------------------------------------------------
00011B70                            ; Sprite mappings - pole that breaks (LZ)
00011B70                            ; ---------------------------------------------------------------------------
00011B70 0000                       		dc.w byte_11326-Map_obj0B
00011B72 0000                       		dc.w byte_11331-Map_obj0B
00011B74 02                         byte_11326:	dc.b 2			; normal pole
00011B75 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B7A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011B7F 04                         byte_11331:	dc.b 4			; broken pole
00011B80 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011B85 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011B8A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011B8F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011B94                            		even
00011B94                            		even
00011B94                            
00011B94                            ; ===========================================================================
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            ; Object 0C - flapping door (LZ)
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            
00011B94                            Obj0C:					; XREF: Obj_Index
00011B94 7000                       		moveq	#0,d0
00011B96 1028 0024                  		move.b	$24(a0),d0
00011B9A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011B9E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011BA2                            ; ===========================================================================
00011BA2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011BA4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011BA6                            ; ===========================================================================
00011BA6                            
00011BA6                            Obj0C_Main:				; XREF: Obj0C_Index
00011BA6 5428 0024                  		addq.b	#2,$24(a0)
00011BAA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011BB2 317C 4328 0002             		move.w	#$4328,2(a0)
00011BB8 0028 0004 0001             		ori.b	#4,1(a0)
00011BBE 117C 0028 0019             		move.b	#$28,$19(a0)
00011BC4 7000                       		moveq	#0,d0
00011BC6 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BCA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011BCE 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011BD2                            
00011BD2                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011BD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BD6 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011BD8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011BDE 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011BE4 4A28 0001                  		tst.b	1(a0)
00011BE8 6A00                       		bpl.s	Obj0C_Solid
00011BEA 303C 00BB                  		move.w	#$BB,d0
00011BEE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00011BF4                            
00011BF4                            Obj0C_Solid:
00011BF4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011BFA 6100 92F2                  		bsr.w	AnimateSprite
00011BFE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011C02 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011C06 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011C08 3038 D008                  		move.w	($FFFFD008).w,d0
00011C0C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011C10 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011C12 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011C18 323C 0013                  		move.w	#$13,d1
00011C1C 343C 0020                  		move.w	#$20,d2
00011C20 3602                       		move.w	d2,d3
00011C22 5243                       		addq.w	#1,d3
00011C24 3828 0008                  		move.w	8(a0),d4
00011C28 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011C2C                            
00011C2C                            Obj0C_Display:
00011C2C 6000 E2E2                  		bra.w	MarkObjGone
00011C30                            ; ===========================================================================
00011C30                            Ani_obj0C:
00011C30                            	include "_anim\obj0C.asm"
00011C30                            ; ---------------------------------------------------------------------------
00011C30                            ; Animation script - flapping door (LZ)
00011C30                            ; ---------------------------------------------------------------------------
00011C30 0000                       		dc.w byte_113E6-Ani_obj0C
00011C32 0000                       		dc.w byte_113EC-Ani_obj0C
00011C34 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011C3A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011C40                            		even
00011C40                            		even
00011C40                            
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Sprite mappings - flapping door (LZ)
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            Map_obj0C:
00011C40                            	include "_maps\obj0C.asm"
00011C40                            ; ---------------------------------------------------------------------------
00011C40                            ; Sprite mappings - flapping door (LZ)
00011C40                            ; ---------------------------------------------------------------------------
00011C40 0000                       		dc.w byte_113F8-Map_obj0C
00011C42 0000                       		dc.w byte_11403-Map_obj0C
00011C44 0000                       		dc.w byte_1140E-Map_obj0C
00011C46 02                         byte_113F8:	dc.b 2
00011C47 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011C4C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011C51 02                         byte_11403:	dc.b 2
00011C52 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011C57 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011C5C 02                         byte_1140E:	dc.b 2
00011C5D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011C62 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011C68 00                         		even
00011C68 00                         		even
00011C68                            
00011C68                            ; ===========================================================================
00011C68                            ; ---------------------------------------------------------------------------
00011C68                            ; Object 71 - invisible	solid blocks
00011C68                            ; ---------------------------------------------------------------------------
00011C68                            
00011C68                            Obj71:					; XREF: Obj_Index
00011C68 7000                       		moveq	#0,d0
00011C6A 1028 0024                  		move.b	$24(a0),d0
00011C6E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C72 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C76                            ; ===========================================================================
00011C76 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C78 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C7A                            ; ===========================================================================
00011C7A                            
00011C7A                            Obj71_Main:				; XREF: Obj71_Index
00011C7A 5428 0024                  		addq.b	#2,$24(a0)
00011C7E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011C86 317C 8680 0002             		move.w	#$8680,2(a0)
00011C8C 0028 0004 0001             		ori.b	#4,1(a0)
00011C92 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C96 1200                       		move.b	d0,d1
00011C98 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011C9C 0640 0010                  		addi.w	#$10,d0
00011CA0 E248                       		lsr.w	#1,d0
00011CA2 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011CA6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011CAA 5241                       		addq.w	#1,d1
00011CAC E749                       		lsl.w	#3,d1
00011CAE 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011CB2                            
00011CB2                            Obj71_Solid:				; XREF: Obj71_Index
00011CB2 6100 C42E                  		bsr.w	ChkObjOnScreen
00011CB6 6600                       		bne.s	Obj71_ChkDel
00011CB8 7200                       		moveq	#0,d1
00011CBA 1228 0019                  		move.b	$19(a0),d1
00011CBE 0641 000B                  		addi.w	#$B,d1
00011CC2 7400                       		moveq	#0,d2
00011CC4 1428 0016                  		move.b	$16(a0),d2
00011CC8 3602                       		move.w	d2,d3
00011CCA 5243                       		addq.w	#1,d3
00011CCC 3828 0008                  		move.w	8(a0),d4
00011CD0 6100 E5A8                  		bsr.w	SolidObject71
00011CD4                            
00011CD4                            Obj71_ChkDel:
00011CD4 3028 0008                  		move.w	8(a0),d0
00011CD8 0240 FF80                  		andi.w	#$FF80,d0
00011CDC 3238 F700                  		move.w	($FFFFF700).w,d1
00011CE0 0441 0080                  		subi.w	#$80,d1
00011CE4 0241 FF80                  		andi.w	#$FF80,d1
00011CE8 9041                       		sub.w	d1,d0
00011CEA 0C40 0280                  		cmpi.w	#$280,d0
00011CEE 6200                       		bhi.s	Obj71_Delete
00011CF0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011CF4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011CF6 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011CFA                            ; ===========================================================================
00011CFA                            
00011CFA                            Obj71_NoDisplay:
00011CFA 4E75                       		rts	
00011CFC                            ; ===========================================================================
00011CFC                            
00011CFC                            Obj71_Delete:
00011CFC 4EFA C1A6                  		jmp	DeleteObject
00011D00                            ; ===========================================================================
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            ; Sprite mappings - invisible solid blocks
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            Map_obj71:
00011D00                            	include "_maps\obj71.asm"
00011D00                            ; ---------------------------------------------------------------------------
00011D00                            ; Sprite mappings - invisible solid blocks
00011D00                            ; ---------------------------------------------------------------------------
00011D00 0000                       		dc.w byte_114BC-Map_obj71
00011D02 0000                       		dc.w byte_114D1-Map_obj71
00011D04 0000                       		dc.w byte_114E6-Map_obj71
00011D06 04                         byte_114BC:	dc.b 4
00011D07 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011D0C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011D11 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011D16 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011D1B 04                         byte_114D1:	dc.b 4
00011D1C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011D21 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011D26 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011D2B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011D30 04                         byte_114E6:	dc.b 4
00011D31 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011D36 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011D3B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011D40 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011D46 00                         		even
00011D46 00                         		even
00011D46                            
00011D46                            ; ===========================================================================
00011D46                            ; ---------------------------------------------------------------------------
00011D46                            ; Object 5D - fans (SLZ)
00011D46                            ; ---------------------------------------------------------------------------
00011D46                            
00011D46                            Obj5D:					; XREF: Obj_Index
00011D46 7000                       		moveq	#0,d0
00011D48 1028 0024                  		move.b	$24(a0),d0
00011D4C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011D50 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011D54                            ; ===========================================================================
00011D54 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011D56 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011D58                            ; ===========================================================================
00011D58                            
00011D58                            Obj5D_Main:				; XREF: Obj5D_Index
00011D58 5428 0024                  		addq.b	#2,$24(a0)
00011D5C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011D64 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D6A 0028 0004 0001             		ori.b	#4,1(a0)
00011D70 117C 0010 0019             		move.b	#$10,$19(a0)
00011D76 117C 0004 0018             		move.b	#4,$18(a0)
00011D7C                            
00011D7C                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D7C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011D82 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011D84 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D88 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011D8A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011D90 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011D96 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011D98 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011D9E                            
00011D9E                            Obj5D_Blow:
00011D9E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011DA2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011DA6 43F8 D000                  		lea	($FFFFD000).w,a1
00011DAA 3029 0008                  		move.w	8(a1),d0
00011DAE 9068 0008                  		sub.w	8(a0),d0
00011DB2 0828 0000 0022             		btst	#0,$22(a0)
00011DB8 6600                       		bne.s	Obj5D_ChkSonic
00011DBA 4440                       		neg.w	d0
00011DBC                            
00011DBC                            Obj5D_ChkSonic:
00011DBC 0640 0050                  		addi.w	#$50,d0
00011DC0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011DC4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011DC6 3229 000C                  		move.w	$C(a1),d1
00011DCA 0641 0060                  		addi.w	#$60,d1
00011DCE 9268 000C                  		sub.w	$C(a0),d1
00011DD2 6500                       		bcs.s	Obj5D_Animate
00011DD4 0C41 0070                  		cmpi.w	#$70,d1
00011DD8 6400                       		bcc.s	Obj5D_Animate
00011DDA 0440 0050                  		subi.w	#$50,d0
00011DDE 6400                       		bcc.s	loc_1159A
00011DE0 4640                       		not.w	d0
00011DE2 D040                       		add.w	d0,d0
00011DE4                            
00011DE4                            loc_1159A:
00011DE4 0640 0060                  		addi.w	#$60,d0
00011DE8 0828 0000 0022             		btst	#0,$22(a0)
00011DEE 6600                       		bne.s	loc_115A8
00011DF0 4440                       		neg.w	d0
00011DF2                            
00011DF2                            loc_115A8:
00011DF2 4400                       		neg.b	d0
00011DF4 E840                       		asr.w	#4,d0
00011DF6 0828 0000 0028             		btst	#0,$28(a0)
00011DFC 6700                       		beq.s	Obj5D_MoveSonic
00011DFE 4440                       		neg.w	d0
00011E00                            
00011E00                            Obj5D_MoveSonic:
00011E00 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011E04                            
00011E04                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011E04 5328 001E                  		subq.b	#1,$1E(a0)
00011E08 6A00                       		bpl.s	Obj5D_ChkDel
00011E0A 117C 0000 001E             		move.b	#0,$1E(a0)
00011E10 5228 001B                  		addq.b	#1,$1B(a0)
00011E14 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011E1A 6500                       		bcs.s	loc_115D8
00011E1C 117C 0000 001B             		move.b	#0,$1B(a0)
00011E22                            
00011E22                            loc_115D8:
00011E22 7000                       		moveq	#0,d0
00011E24 0828 0000 0028             		btst	#0,$28(a0)
00011E2A 6700                       		beq.s	loc_115E4
00011E2C 7002                       		moveq	#2,d0
00011E2E                            
00011E2E                            loc_115E4:
00011E2E D028 001B                  		add.b	$1B(a0),d0
00011E32 1140 001A                  		move.b	d0,$1A(a0)
00011E36                            
00011E36                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011E36 6100 C030                  		bsr.w	DisplaySprite
00011E3A 3028 0008                  		move.w	8(a0),d0
00011E3E 0240 FF80                  		andi.w	#$FF80,d0
00011E42 3238 F700                  		move.w	($FFFFF700).w,d1
00011E46 0441 0080                  		subi.w	#$80,d1
00011E4A 0241 FF80                  		andi.w	#$FF80,d1
00011E4E 9041                       		sub.w	d1,d0
00011E50 0C40 0280                  		cmpi.w	#$280,d0
00011E54 6200 C04E                  		bhi.w	DeleteObject
00011E58 4E75                       		rts	
00011E5A                            ; ===========================================================================
00011E5A                            ; ---------------------------------------------------------------------------
00011E5A                            ; Sprite mappings - fans (SLZ)
00011E5A                            ; ---------------------------------------------------------------------------
00011E5A                            Map_obj5D:
00011E5A                            	include "_maps\obj5D.asm"
00011E5A                            ; ---------------------------------------------------------------------------
00011E5A                            ; Sprite mappings - fans (SLZ)
00011E5A                            ; ---------------------------------------------------------------------------
00011E5A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011E5E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011E62 0000                       		dc.w byte_1161A-Map_obj5D
00011E64 02                         byte_1161A:	dc.b 2
00011E65 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E6A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E6F 02                         byte_11625:	dc.b 2
00011E70 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E75 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E7A 02                         byte_11630:	dc.b 2
00011E7B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011E80 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011E86 00                         		even
00011E86 00                         		even
00011E86                            
00011E86                            ; ===========================================================================
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            ; Object 5E - seesaws (SLZ)
00011E86                            ; ---------------------------------------------------------------------------
00011E86                            
00011E86                            Obj5E:					; XREF: Obj_Index
00011E86 7000                       		moveq	#0,d0
00011E88 1028 0024                  		move.b	$24(a0),d0
00011E8C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011E90 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011E94 3028 0030                  		move.w	$30(a0),d0
00011E98 0240 FF80                  		andi.w	#$FF80,d0
00011E9C 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA0 0441 0080                  		subi.w	#$80,d1
00011EA4 0241 FF80                  		andi.w	#$FF80,d1
00011EA8 9041                       		sub.w	d1,d0
00011EAA 6B00 BFF8                  		bmi.w	DeleteObject
00011EAE 0C40 0280                  		cmpi.w	#$280,d0
00011EB2 6200 BFF0                  		bhi.w	DeleteObject
00011EB6 6000 BFB0                  		bra.w	DisplaySprite
00011EBA                            ; ===========================================================================
00011EBA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011EBC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011EBE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011EC0 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011EC2 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011EC4 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011EC6                            ; ===========================================================================
00011EC6                            
00011EC6                            Obj5E_Main:				; XREF: Obj5E_Index
00011EC6 5428 0024                  		addq.b	#2,$24(a0)
00011ECA 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011ED2 317C 0374 0002             		move.w	#$374,2(a0)
00011ED8 0028 0004 0001             		ori.b	#4,1(a0)
00011EDE 117C 0004 0018             		move.b	#4,$18(a0)
00011EE4 117C 0030 0019             		move.b	#$30,$19(a0)
00011EEA 3168 0008 0030             		move.w	8(a0),$30(a0)
00011EF0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011EF4 6600                       		bne.s	loc_116D2	; if not, branch
00011EF6 6100 C40C                  		bsr.w	SingleObjLoad2
00011EFA 6600                       		bne.s	loc_116D2
00011EFC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011F00 5C29 0024                  		addq.b	#6,$24(a1)
00011F04 3368 0008 0008             		move.w	8(a0),8(a1)
00011F0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F10 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011F16 2348 003C                  		move.l	a0,$3C(a1)
00011F1A                            
00011F1A                            loc_116D2:
00011F1A 0828 0000 0022             		btst	#0,$22(a0)
00011F20 6700                       		beq.s	loc_116E0
00011F22 117C 0002 001A             		move.b	#2,$1A(a0)
00011F28                            
00011F28                            loc_116E0:
00011F28 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011F2E                            
00011F2E                            Obj5E_Slope:				; XREF: Obj5E_Index
00011F2E 1228 003A                  		move.b	$3A(a0),d1
00011F32 6100 0000                  		bsr.w	loc_11766
00011F36 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F3C 0828 0000 001A             		btst	#0,$1A(a0)
00011F42 6700                       		beq.s	loc_11702
00011F44 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F4A                            
00011F4A                            loc_11702:
00011F4A 43F8 D000                  		lea	($FFFFD000).w,a1
00011F4E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011F54 323C 0030                  		move.w	#$30,d1
00011F58 4EB9 0000 7B82             		jsr	(SlopeObject).l
00011F5E 4E75                       		rts	
00011F60                            ; ===========================================================================
00011F60                            
00011F60                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011F60 6100 0000                  		bsr.w	loc_1174A
00011F64 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F6A 0828 0000 001A             		btst	#0,$1A(a0)
00011F70 6700                       		beq.s	loc_11730
00011F72 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F78                            
00011F78                            loc_11730:
00011F78 323C 0030                  		move.w	#$30,d1
00011F7C 4EB9 0000 7C22             		jsr	(ExitPlatform).l
00011F82 323C 0030                  		move.w	#$30,d1
00011F86 3428 0008                  		move.w	8(a0),d2
00011F8A 4EB9 0000 8C12             		jsr	SlopeObject2
00011F90 4E75                       		rts	
00011F92                            ; ===========================================================================
00011F92                            
00011F92                            loc_1174A:				; XREF: Obj5E_Slope2
00011F92 7202                       		moveq	#2,d1
00011F94 43F8 D000                  		lea	($FFFFD000).w,a1
00011F98 3028 0008                  		move.w	8(a0),d0
00011F9C 9069 0008                  		sub.w	8(a1),d0
00011FA0 6400                       		bcc.s	loc_1175E
00011FA2 4440                       		neg.w	d0
00011FA4 7200                       		moveq	#0,d1
00011FA6                            
00011FA6                            loc_1175E:
00011FA6 0C40 0008                  		cmpi.w	#8,d0
00011FAA 6400                       		bcc.s	loc_11766
00011FAC 7201                       		moveq	#1,d1
00011FAE                            
00011FAE                            loc_11766:
00011FAE 1028 001A                  		move.b	$1A(a0),d0
00011FB2 B001                       		cmp.b	d1,d0
00011FB4 6700                       		beq.s	locret_11790
00011FB6 6400                       		bcc.s	loc_11772
00011FB8 5400                       		addq.b	#2,d0
00011FBA                            
00011FBA                            loc_11772:
00011FBA 5300                       		subq.b	#1,d0
00011FBC 1140 001A                  		move.b	d0,$1A(a0)
00011FC0 1141 003A                  		move.b	d1,$3A(a0)
00011FC4 08A8 0000 0001             		bclr	#0,1(a0)
00011FCA 0828 0001 001A             		btst	#1,$1A(a0)
00011FD0 6700                       		beq.s	locret_11790
00011FD2 08E8 0000 0001             		bset	#0,1(a0)
00011FD8                            
00011FD8                            locret_11790:
00011FD8 4E75                       		rts	
00011FDA                            ; ===========================================================================
00011FDA                            
00011FDA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011FDA 5428 0024                  		addq.b	#2,$24(a0)
00011FDE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011FE6 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011FEC 0028 0004 0001             		ori.b	#4,1(a0)
00011FF2 117C 0004 0018             		move.b	#4,$18(a0)
00011FF8 117C 008B 0020             		move.b	#$8B,$20(a0)
00011FFE 117C 000C 0019             		move.b	#$C,$19(a0)
00012004 3168 0008 0030             		move.w	8(a0),$30(a0)
0001200A 0668 0028 0008             		addi.w	#$28,8(a0)
00012010 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012016 117C 0001 001A             		move.b	#1,$1A(a0)
0001201C 0828 0000 0022             		btst	#0,$22(a0)
00012022 6700                       		beq.s	Obj5E_MoveSpike
00012024 0468 0050 0008             		subi.w	#$50,8(a0)
0001202A 117C 0002 003A             		move.b	#2,$3A(a0)
00012030                            
00012030                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012030 2268 003C                  		movea.l	$3C(a0),a1
00012034 7000                       		moveq	#0,d0
00012036 1028 003A                  		move.b	$3A(a0),d0
0001203A 9029 003A                  		sub.b	$3A(a1),d0
0001203E 6700                       		beq.s	loc_1183E
00012040 6400                       		bcc.s	loc_117FC
00012042 4400                       		neg.b	d0
00012044                            
00012044                            loc_117FC:
00012044 323C F7E8                  		move.w	#-$818,d1
00012048 343C FEEC                  		move.w	#-$114,d2
0001204C 0C00 0001                  		cmpi.b	#1,d0
00012050 6700                       		beq.s	loc_11822
00012052 323C F510                  		move.w	#-$AF0,d1
00012056 343C FF34                  		move.w	#-$CC,d2
0001205A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012060 6D00                       		blt.s	loc_11822
00012062 323C F200                  		move.w	#-$E00,d1
00012066 343C FF60                  		move.w	#-$A0,d2
0001206A                            
0001206A                            loc_11822:
0001206A 3141 0012                  		move.w	d1,$12(a0)
0001206E 3142 0010                  		move.w	d2,$10(a0)
00012072 3028 0008                  		move.w	8(a0),d0
00012076 9068 0030                  		sub.w	$30(a0),d0
0001207A 6400                       		bcc.s	loc_11838
0001207C 4468 0010                  		neg.w	$10(a0)
00012080                            
00012080                            loc_11838:
00012080 5428 0024                  		addq.b	#2,$24(a0)
00012084 6000                       		bra.s	Obj5E_SpikeFall
00012086                            ; ===========================================================================
00012086                            
00012086                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012086 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001208C 7000                       		moveq	#0,d0
0001208E 1029 001A                  		move.b	$1A(a1),d0
00012092 343C 0028                  		move.w	#$28,d2
00012096 3228 0008                  		move.w	8(a0),d1
0001209A 9268 0030                  		sub.w	$30(a0),d1
0001209E 6400                       		bcc.s	loc_1185C
000120A0 4442                       		neg.w	d2
000120A2 5440                       		addq.w	#2,d0
000120A4                            
000120A4                            loc_1185C:
000120A4 D040                       		add.w	d0,d0
000120A6 3228 0034                  		move.w	$34(a0),d1
000120AA D272 0000                  		add.w	(a2,d0.w),d1
000120AE 3141 000C                  		move.w	d1,$C(a0)
000120B2 D468 0030                  		add.w	$30(a0),d2
000120B6 3142 0008                  		move.w	d2,8(a0)
000120BA 4268 000E                  		clr.w	$E(a0)
000120BE 4268 000A                  		clr.w	$A(a0)
000120C2 4E75                       		rts	
000120C4                            ; ===========================================================================
000120C4                            
000120C4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000120C4 4A68 0012                  		tst.w	$12(a0)
000120C8 6A00                       		bpl.s	loc_1189A
000120CA 6100 BD04                  		bsr.w	ObjectFall
000120CE 3028 0034                  		move.w	$34(a0),d0
000120D2 0440 002F                  		subi.w	#$2F,d0
000120D6 B068 000C                  		cmp.w	$C(a0),d0
000120DA 6E00                       		bgt.s	locret_11898
000120DC 6100 BCF2                  		bsr.w	ObjectFall
000120E0                            
000120E0                            locret_11898:
000120E0 4E75                       		rts	
000120E2                            ; ===========================================================================
000120E2                            
000120E2                            loc_1189A:				; XREF: Obj5E_SpikeFall
000120E2 6100 BCEC                  		bsr.w	ObjectFall
000120E6 2268 003C                  		movea.l	$3C(a0),a1
000120EA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000120F0 7000                       		moveq	#0,d0
000120F2 1029 001A                  		move.b	$1A(a1),d0
000120F6 3228 0008                  		move.w	8(a0),d1
000120FA 9268 0030                  		sub.w	$30(a0),d1
000120FE 6400                       		bcc.s	loc_118BA
00012100 5440                       		addq.w	#2,d0
00012102                            
00012102                            loc_118BA:
00012102 D040                       		add.w	d0,d0
00012104 3228 0034                  		move.w	$34(a0),d1
00012108 D272 0000                  		add.w	(a2,d0.w),d1
0001210C B268 000C                  		cmp.w	$C(a0),d1
00012110 6E00                       		bgt.s	locret_11938
00012112 2268 003C                  		movea.l	$3C(a0),a1
00012116 7202                       		moveq	#2,d1
00012118 4A68 0010                  		tst.w	$10(a0)
0001211C 6B00                       		bmi.s	Obj5E_Spring
0001211E 7200                       		moveq	#0,d1
00012120                            
00012120                            Obj5E_Spring:
00012120 1341 003A                  		move.b	d1,$3A(a1)
00012124 1141 003A                  		move.b	d1,$3A(a0)
00012128 B229 001A                  		cmp.b	$1A(a1),d1
0001212C 6700                       		beq.s	loc_1192C
0001212E 08A9 0003 0022             		bclr	#3,$22(a1)
00012134 6700                       		beq.s	loc_1192C
00012136 4229 0025                  		clr.b	$25(a1)
0001213A 137C 0002 0024             		move.b	#2,$24(a1)
00012140 45F8 D000                  		lea	($FFFFD000).w,a2
00012144 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001214A 446A 0012                  		neg.w	$12(a2)
0001214E 08EA 0001 0022             		bset	#1,$22(a2)
00012154 08AA 0003 0022             		bclr	#3,$22(a2)
0001215A 422A 003C                  		clr.b	$3C(a2)
0001215E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012164 157C 0002 0024             		move.b	#2,$24(a2)
0001216A 303C 00CC                  		move.w	#$CC,d0
0001216E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
00012174                            
00012174                            loc_1192C:
00012174 4268 0010                  		clr.w	$10(a0)
00012178 4268 0012                  		clr.w	$12(a0)
0001217C 5528 0024                  		subq.b	#2,$24(a0)
00012180                            
00012180                            locret_11938:
00012180 4E75                       		rts	
00012182                            ; ===========================================================================
00012182 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001218C                            
0001218C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000121BC                            		even
000121BC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000121EC                            		even
000121EC                            ; ---------------------------------------------------------------------------
000121EC                            ; Sprite mappings - seesaws (SLZ)
000121EC                            ; ---------------------------------------------------------------------------
000121EC                            Map_obj5E:
000121EC                            	include "_maps\obj5E.asm"
000121EC                            ; ---------------------------------------------------------------------------
000121EC                            ; Sprite mappings - seesaws (SLZ)
000121EC                            ; ---------------------------------------------------------------------------
000121EC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000121F0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000121F4 07                         byte_119AC:	dc.b 7
000121F5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000121FA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000121FF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012204 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012209 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001220E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012213 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012218 04                         byte_119D0:	dc.b 4
00012219 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001221E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012223 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012228 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001222E 00                         		even
0001222E 00                         		even
0001222E                            
0001222E                            ; ---------------------------------------------------------------------------
0001222E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001222E                            ; ---------------------------------------------------------------------------
0001222E                            Map_obj5Ea:
0001222E                            	include "_maps\obj5Eballs.asm"
0001222E                            ; ---------------------------------------------------------------------------
0001222E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001222E                            ; ---------------------------------------------------------------------------
0001222E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012230 0000                       		dc.w byte_119F0-Map_obj5Ea
00012232 01                         byte_119EA:	dc.b 1
00012233 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012238 01                         byte_119F0:	dc.b 1
00012239 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001223E                            		even
0001223E                            		even
0001223E                            
0001223E                            ; ===========================================================================
0001223E                            ; ---------------------------------------------------------------------------
0001223E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001223E                            ; ---------------------------------------------------------------------------
0001223E                            
0001223E                            Obj5F:					; XREF: Obj_Index
0001223E 7000                       		moveq	#0,d0
00012240 1028 0024                  		move.b	$24(a0),d0
00012244 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012248 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001224C                            ; ===========================================================================
0001224C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001224E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012250 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012252 0000                       		dc.w Obj5F_End-Obj5F_Index
00012254                            ; ===========================================================================
00012254                            
00012254                            Obj5F_Main:				; XREF: Obj5F_Index
00012254 5428 0024                  		addq.b	#2,$24(a0)
00012258 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012260 317C 0400 0002             		move.w	#$400,2(a0)
00012266 0028 0004 0001             		ori.b	#4,1(a0)
0001226C 117C 0003 0018             		move.b	#3,$18(a0)
00012272 117C 000C 0019             		move.b	#$C,$19(a0)
00012278 1028 0028                  		move.b	$28(a0),d0
0001227C 6700                       		beq.s	loc_11A3C
0001227E 1140 0024                  		move.b	d0,$24(a0)
00012282 4E75                       		rts	
00012284                            ; ===========================================================================
00012284                            
00012284                            loc_11A3C:
00012284 117C 009A 0020             		move.b	#$9A,$20(a0)
0001228A 0868 0000 0022             		bchg	#0,$22(a0)
00012290                            
00012290                            Obj5F_Action:				; XREF: Obj5F_Index
00012290 7000                       		moveq	#0,d0
00012292 1028 0025                  		move.b	$25(a0),d0
00012296 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001229A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001229E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122A4 6100 8C48                  		bsr.w	AnimateSprite
000122A8 6000 DC66                  		bra.w	MarkObjGone
000122AC                            ; ===========================================================================
000122AC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000122AE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000122B0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            Obj5F_Walk:				; XREF: Obj5F_Index2
000122B2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122B6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122BA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000122BC 5428 0025                  		addq.b	#2,$25(a0)
000122C0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000122C6 317C 0010 0010             		move.w	#$10,$10(a0)
000122CC 117C 0001 001C             		move.b	#1,$1C(a0)
000122D2 0868 0000 0022             		bchg	#0,$22(a0)
000122D8 6700                       		beq.s	locret_11A96
000122DA 4468 0010                  		neg.w	$10(a0)		; change direction
000122DE                            
000122DE                            locret_11A96:
000122DE 4E75                       		rts	
000122E0                            ; ===========================================================================
000122E0                            
000122E0                            Obj5F_Wait:				; XREF: Obj5F_Index2
000122E0 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122E8 6B00                       		bmi.s	loc_11AA8
000122EA 6100 BB56                  		bsr.w	SpeedToPos
000122EE 4E75                       		rts	
000122F0                            ; ===========================================================================
000122F0                            
000122F0                            loc_11AA8:
000122F0 5528 0025                  		subq.b	#2,$25(a0)
000122F4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000122FA 4268 0010                  		clr.w	$10(a0)		; stop walking
000122FE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012304 4E75                       		rts	
00012306                            ; ===========================================================================
00012306                            
00012306                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012306 5368 0030                  		subq.w	#1,$30(a0)
0001230A 6A00                       		bpl.s	locret_11AD0
0001230C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012310 117C 0000 0024             		move.b	#0,$24(a0)
00012316                            
00012316                            locret_11AD0:
00012316 4E75                       		rts	
00012318                            ; ===========================================================================
00012318                            
00012318                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012318 3038 D008                  		move.w	($FFFFD008).w,d0
0001231C 9068 0008                  		sub.w	8(a0),d0
00012320 6400                       		bcc.s	loc_11ADE
00012322 4440                       		neg.w	d0
00012324                            
00012324                            loc_11ADE:
00012324 0C40 0060                  		cmpi.w	#$60,d0
00012328 6400                       		bcc.s	locret_11B5E
0001232A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001232E 9068 000C                  		sub.w	$C(a0),d0
00012332 6400                       		bcc.s	Obj5F_MakeFuse
00012334 4440                       		neg.w	d0
00012336                            
00012336                            Obj5F_MakeFuse:
00012336 0C40 0060                  		cmpi.w	#$60,d0
0001233A 6400                       		bcc.s	locret_11B5E
0001233C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012340 6600                       		bne.s	locret_11B5E
00012342 117C 0004 0025             		move.b	#4,$25(a0)
00012348 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001234E 4268 0010                  		clr.w	$10(a0)
00012352 117C 0002 001C             		move.b	#2,$1C(a0)
00012358 6100 BFAA                  		bsr.w	SingleObjLoad2
0001235C 6600                       		bne.s	locret_11B5E
0001235E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012362 3368 0008 0008             		move.w	8(a0),8(a1)
00012368 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001236E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012374 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001237A 137C 0004 0028             		move.b	#4,$28(a1)
00012380 137C 0003 001C             		move.b	#3,$1C(a1)
00012386 337C 0010 0012             		move.w	#$10,$12(a1)
0001238C 0828 0001 0022             		btst	#1,$22(a0)
00012392 6700                       		beq.s	loc_11B54
00012394 4469 0012                  		neg.w	$12(a1)
00012398                            
00012398                            loc_11B54:
00012398 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001239E 2348 003C                  		move.l	a0,$3C(a1)
000123A2                            
000123A2                            locret_11B5E:
000123A2 4E75                       		rts	
000123A4                            ; ===========================================================================
000123A4                            
000123A4                            Obj5F_Display:				; XREF: Obj5F_Index
000123A4 6100                       		bsr.s	loc_11B70
000123A6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123AC 6100 8B40                  		bsr.w	AnimateSprite
000123B0 6000 DB5E                  		bra.w	MarkObjGone
000123B4                            ; ===========================================================================
000123B4                            
000123B4                            loc_11B70:
000123B4 5368 0030                  		subq.w	#1,$30(a0)
000123B8 6B00                       		bmi.s	loc_11B7C
000123BA 6100 BA86                  		bsr.w	SpeedToPos
000123BE 4E75                       		rts	
000123C0                            ; ===========================================================================
000123C0                            
000123C0                            loc_11B7C:
000123C0 4268 0030                  		clr.w	$30(a0)
000123C4 4228 0024                  		clr.b	$24(a0)
000123C8 3168 0034 000C             		move.w	$34(a0),$C(a0)
000123CE 7203                       		moveq	#3,d1
000123D0 2248                       		movea.l	a0,a1
000123D2 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000123D8 6000                       		bra.s	Obj5F_MakeShrap
000123DA                            ; ===========================================================================
000123DA                            
000123DA                            Obj5F_Loop:
000123DA 6100 BF28                  		bsr.w	SingleObjLoad2
000123DE 6600                       		bne.s	loc_11BCE
000123E0                            
000123E0                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000123E0 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000123E4 3368 0008 0008             		move.w	8(a0),8(a1)
000123EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000123F0 137C 0006 0028             		move.b	#6,$28(a1)
000123F6 137C 0004 001C             		move.b	#4,$1C(a1)
000123FC 335A 0010                  		move.w	(a2)+,$10(a1)
00012400 335A 0012                  		move.w	(a2)+,$12(a1)
00012404 137C 0098 0020             		move.b	#$98,$20(a1)
0001240A 08E9 0007 0001             		bset	#7,1(a1)
00012410                            
00012410                            loc_11BCE:
00012410 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012414                            
00012414 117C 0006 0024             		move.b	#6,$24(a0)
0001241A                            
0001241A                            Obj5F_End:				; XREF: Obj5F_Index
0001241A 6100 BA26                  		bsr.w	SpeedToPos
0001241E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012424 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001242A 6100 8AC2                  		bsr.w	AnimateSprite
0001242E 4A28 0001                  		tst.b	1(a0)
00012432 6A00 BA70                  		bpl.w	DeleteObject
00012436 6000 BA30                  		bra.w	DisplaySprite
0001243A                            ; ===========================================================================
0001243A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001244A                            
0001244A                            Ani_obj5F:
0001244A                            	include "_anim\obj5F.asm"
0001244A                            ; ---------------------------------------------------------------------------
0001244A                            ; Animation script - Bomb enemy
0001244A                            ; ---------------------------------------------------------------------------
0001244A 0000                       		dc.w byte_11C12-Ani_obj5F
0001244C 0000                       		dc.w byte_11C16-Ani_obj5F
0001244E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012450 0000                       		dc.w byte_11C20-Ani_obj5F
00012452 0000                       		dc.w byte_11C24-Ani_obj5F
00012454 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012458 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001245E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012462 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012466 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001246A                            		even
0001246A                            		even
0001246A                            
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            Map_obj5F:
0001246A                            	include "_maps\obj5F.asm"
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001246A                            ; ---------------------------------------------------------------------------
0001246A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001246E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012472 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012476 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001247A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001247E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012482 03                         byte_11C40:	dc.b 3
00012483 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012488 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001248D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012492 03                         byte_11C50:	dc.b 3
00012493 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012498 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001249D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124A2 03                         byte_11C60:	dc.b 3
000124A3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124A8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000124AD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124B2 03                         byte_11C70:	dc.b 3
000124B3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124B8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000124BD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124C2 03                         byte_11C80:	dc.b 3
000124C3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124C8 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000124CD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124D2 03                         byte_11C90:	dc.b 3
000124D3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124D8 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000124DD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124E2 02                         byte_11CA0:	dc.b 2
000124E3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000124E8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124ED 02                         byte_11CAB:	dc.b 2
000124EE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124F3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124F8 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000124F9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000124FE 01                         byte_11CBC:	dc.b 1			; fuse
000124FF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012504 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012505 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001250A 01                         byte_11CC8:	dc.b 1			; fireball
0001250B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012510                            		even
00012510                            		even
00012510                            
00012510                            ; ===========================================================================
00012510                            ; ---------------------------------------------------------------------------
00012510                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012510                            ; ---------------------------------------------------------------------------
00012510                            
00012510                            Obj60:					; XREF: Obj_Index
00012510 7000                       		moveq	#0,d0
00012512 1028 0024                  		move.b	$24(a0),d0
00012516 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001251A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001251E                            ; ===========================================================================
0001251E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012520 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012522 0000                       		dc.w Obj60_Display-Obj60_Index
00012524 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012526 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012528                            ; ===========================================================================
00012528                            
00012528                            Obj60_Main:				; XREF: Obj60_Index
00012528 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012530 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012536 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001253C 6700                       		beq.s	loc_11D02
0001253E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012544                            
00012544                            loc_11D02:
00012544 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001254A 6600                       		bne.s	loc_11D10
0001254C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012552                            
00012552                            loc_11D10:
00012552 0028 0004 0001             		ori.b	#4,1(a0)
00012558 117C 0004 0018             		move.b	#4,$18(a0)
0001255E 117C 000B 0020             		move.b	#$B,$20(a0)
00012564 117C 000C 0019             		move.b	#$C,$19(a0)
0001256A 7400                       		moveq	#0,d2
0001256C 45E8 0037                  		lea	$37(a0),a2
00012570 264A                       		movea.l	a2,a3
00012572 524A                       		addq.w	#1,a2
00012574 7203                       		moveq	#3,d1
00012576                            
00012576                            Obj60_MakeOrbs:
00012576 6100 BD8C                  		bsr.w	SingleObjLoad2
0001257A 6600                       		bne.s	loc_11D90
0001257C 5213                       		addq.b	#1,(a3)
0001257E 3A09                       		move.w	a1,d5
00012580 0445 D000                  		subi.w	#-$3000,d5
00012584 EC4D                       		lsr.w	#6,d5
00012586 0245 007F                  		andi.w	#$7F,d5
0001258A 14C5                       		move.b	d5,(a2)+
0001258C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001258E 137C 0006 0024             		move.b	#6,$24(a1)
00012594 2368 0004 0004             		move.l	4(a0),4(a1)
0001259A 3368 0002 0002             		move.w	2(a0),2(a1)
000125A0 0029 0004 0001             		ori.b	#4,1(a1)
000125A6 137C 0004 0018             		move.b	#4,$18(a1)
000125AC 137C 0008 0019             		move.b	#8,$19(a1)
000125B2 137C 0003 001A             		move.b	#3,$1A(a1)
000125B8 137C 0098 0020             		move.b	#$98,$20(a1)
000125BE 1342 0026                  		move.b	d2,$26(a1)
000125C2 0602 0040                  		addi.b	#$40,d2
000125C6 2348 003C                  		move.l	a0,$3C(a1)
000125CA 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000125CE                            
000125CE                            loc_11D90:
000125CE 7001                       		moveq	#1,d0
000125D0 0828 0000 0022             		btst	#0,$22(a0)
000125D6 6700                       		beq.s	Obj60_Move
000125D8 4440                       		neg.w	d0
000125DA                            
000125DA                            Obj60_Move:
000125DA 1140 0036                  		move.b	d0,$36(a0)
000125DE 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000125E4 5428 0024                  		addq.b	#2,$24(a0)
000125E8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000125EE 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000125F4 6700                       		beq.s	locret_11DBC	; if not, branch
000125F6 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000125FA                            
000125FA                            locret_11DBC:
000125FA 4E75                       		rts	
000125FC                            ; ===========================================================================
000125FC                            
000125FC                            Obj60_ChkSonic:				; XREF: Obj60_Index
000125FC 3038 D008                  		move.w	($FFFFD008).w,d0
00012600 9068 0008                  		sub.w	8(a0),d0
00012604 6400                       		bcc.s	loc_11DCA
00012606 4440                       		neg.w	d0
00012608                            
00012608                            loc_11DCA:
00012608 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001260C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001260E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012612 9068 000C                  		sub.w	$C(a0),d0
00012616 6400                       		bcc.s	loc_11DDC
00012618 4440                       		neg.w	d0
0001261A                            
0001261A                            loc_11DDC:
0001261A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001261E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012620 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012624 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012626 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001262C                            
0001262C                            Obj60_Animate:
0001262C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012632 6100 88BA                  		bsr.w	AnimateSprite
00012636 6000 0000                  		bra.w	Obj60_ChkDel
0001263A                            ; ===========================================================================
0001263A                            
0001263A                            Obj60_Display:				; XREF: Obj60_Index
0001263A 6100 B806                  		bsr.w	SpeedToPos
0001263E                            
0001263E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001263E 3028 0008                  		move.w	8(a0),d0
00012642 0240 FF80                  		andi.w	#$FF80,d0
00012646 3238 F700                  		move.w	($FFFFF700).w,d1
0001264A 0441 0080                  		subi.w	#$80,d1
0001264E 0241 FF80                  		andi.w	#$FF80,d1
00012652 9041                       		sub.w	d1,d0
00012654 0C40 0280                  		cmpi.w	#$280,d0
00012658 6200 0000                  		bhi.w	Obj60_ChkGone
0001265C 6000 B80A                  		bra.w	DisplaySprite
00012660                            ; ===========================================================================
00012660                            
00012660                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012660 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012664 7000                       		moveq	#0,d0
00012666 1028 0023                  		move.b	$23(a0),d0
0001266A 6700                       		beq.s	loc_11E34
0001266C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012672                            
00012672                            loc_11E34:
00012672 45E8 0037                  		lea	$37(a0),a2
00012676 7400                       		moveq	#0,d2
00012678 141A                       		move.b	(a2)+,d2
0001267A 5342                       		subq.w	#1,d2
0001267C 6500                       		bcs.s	Obj60_Delete
0001267E                            
0001267E                            loc_11E40:
0001267E 7000                       		moveq	#0,d0
00012680 101A                       		move.b	(a2)+,d0
00012682 ED48                       		lsl.w	#6,d0
00012684 0680 00FF D000             		addi.l	#$FFD000,d0
0001268A 2240                       		movea.l	d0,a1
0001268C 6100 B818                  		bsr.w	DeleteObject2
00012690 51CA FFEC                  		dbf	d2,loc_11E40
00012694                            
00012694                            Obj60_Delete:
00012694 6000 B80E                  		bra.w	DeleteObject
00012698                            ; ===========================================================================
00012698                            
00012698                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012698 2268 003C                  		movea.l	$3C(a0),a1
0001269C 0C11 0060                  		cmpi.b	#$60,0(a1)
000126A0 6600 B802                  		bne.w	DeleteObject
000126A4 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000126AA 6600                       		bne.s	Obj60_Circle
000126AC 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000126B2 6600                       		bne.s	Obj60_Circle
000126B4 5428 0024                  		addq.b	#2,$24(a0)
000126B8 5329 0037                  		subq.b	#1,$37(a1)
000126BC 6600                       		bne.s	Obj60_FireOrb
000126BE 5429 0024                  		addq.b	#2,$24(a1)
000126C2                            
000126C2                            Obj60_FireOrb:
000126C2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000126C8 0829 0000 0022             		btst	#0,$22(a1)
000126CE 6700                       		beq.s	Obj60_Display2
000126D0 4468 0010                  		neg.w	$10(a0)
000126D4                            
000126D4                            Obj60_Display2:
000126D4 6000 B792                  		bra.w	DisplaySprite
000126D8                            ; ===========================================================================
000126D8                            
000126D8                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000126D8 1028 0026                  		move.b	$26(a0),d0
000126DC 4EB9 0000 2D02             		jsr	(CalcSine).l
000126E2 E841                       		asr.w	#4,d1
000126E4 D269 0008                  		add.w	8(a1),d1
000126E8 3141 0008                  		move.w	d1,8(a0)
000126EC E840                       		asr.w	#4,d0
000126EE D069 000C                  		add.w	$C(a1),d0
000126F2 3140 000C                  		move.w	d0,$C(a0)
000126F6 1029 0036                  		move.b	$36(a1),d0
000126FA D128 0026                  		add.b	d0,$26(a0)
000126FE 6000 B768                  		bra.w	DisplaySprite
00012702                            ; ===========================================================================
00012702                            
00012702                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012702 6100 B73E                  		bsr.w	SpeedToPos
00012706 4A28 0001                  		tst.b	1(a0)
0001270A 6A00 B798                  		bpl.w	DeleteObject
0001270E 6000 B758                  		bra.w	DisplaySprite
00012712                            ; ===========================================================================
00012712                            Ani_obj60:
00012712                            	include "_anim\obj60.asm"
00012712                            ; ---------------------------------------------------------------------------
00012712                            ; Animation script - Orbinaut enemy
00012712                            ; ---------------------------------------------------------------------------
00012712 0000                       		dc.w byte_11EDA-Ani_obj60
00012714 0000                       		dc.w byte_11EDE-Ani_obj60
00012716 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001271A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012720                            		even
00012720                            		even
00012720                            
00012720                            ; ---------------------------------------------------------------------------
00012720                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012720                            ; ---------------------------------------------------------------------------
00012720                            Map_obj60:
00012720                            	include "_maps\obj60.asm"
00012720                            ; ---------------------------------------------------------------------------
00012720                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012720                            ; ---------------------------------------------------------------------------
00012720 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012724 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012728 01                         byte_11EEC:	dc.b 1
00012729 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001272E 01                         byte_11EF2:	dc.b 1
0001272F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012734 01                         byte_11EF8:	dc.b 1
00012735 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001273A 01                         byte_11EFE:	dc.b 1
0001273B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012740                            		even
00012740                            		even
00012740                            
00012740                            ; ===========================================================================
00012740                            ; ---------------------------------------------------------------------------
00012740                            ; Object 16 - harpoon (LZ)
00012740                            ; ---------------------------------------------------------------------------
00012740                            
00012740                            Obj16:					; XREF: Obj_Index
00012740 7000                       		moveq	#0,d0
00012742 1028 0024                  		move.b	$24(a0),d0
00012746 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001274A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001274E                            ; ===========================================================================
0001274E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012750 0000                       		dc.w Obj16_Move-Obj16_Index
00012752 0000                       		dc.w Obj16_Wait-Obj16_Index
00012754                            ; ===========================================================================
00012754                            
00012754                            Obj16_Main:				; XREF: Obj16_Index
00012754 5428 0024                  		addq.b	#2,$24(a0)
00012758 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012760 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012766 0028 0004 0001             		ori.b	#4,1(a0)
0001276C 117C 0004 0018             		move.b	#4,$18(a0)
00012772 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012778 117C 0014 0019             		move.b	#$14,$19(a0)
0001277E 317C 003C 0030             		move.w	#60,$30(a0)
00012784                            
00012784                            Obj16_Move:				; XREF: Obj16_Index
00012784 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001278A 6100 8762                  		bsr.w	AnimateSprite
0001278E 7000                       		moveq	#0,d0
00012790 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012794 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001279A 6000 D774                  		bra.w	MarkObjGone
0001279E                            ; ===========================================================================
0001279E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000127A4                            ; ===========================================================================
000127A4                            
000127A4                            Obj16_Wait:				; XREF: Obj16_Index
000127A4 5368 0030                  		subq.w	#1,$30(a0)
000127A8 6A00                       		bpl.s	Obj16_ChkDel
000127AA 317C 003C 0030             		move.w	#60,$30(a0)
000127B0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000127B4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000127BA                            
000127BA                            Obj16_ChkDel:
000127BA 6000 D754                  		bra.w	MarkObjGone
000127BE                            ; ===========================================================================
000127BE                            Ani_obj16:
000127BE                            	include "_anim\obj16.asm"
000127BE                            ; ---------------------------------------------------------------------------
000127BE                            ; Animation script - harpoon (LZ)
000127BE                            ; ---------------------------------------------------------------------------
000127BE 0000                       		dc.w byte_11F8A-Ani_obj16
000127C0 0000                       		dc.w byte_11F8E-Ani_obj16
000127C2 0000                       		dc.w byte_11F92-Ani_obj16
000127C4 0000                       		dc.w byte_11F96-Ani_obj16
000127C6 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000127CA 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000127CE 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000127D2 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000127D6                            		even
000127D6                            		even
000127D6                            
000127D6                            ; ---------------------------------------------------------------------------
000127D6                            ; Sprite mappings - harpoon (LZ)
000127D6                            ; ---------------------------------------------------------------------------
000127D6                            Map_obj16:
000127D6                            	include "_maps\obj16.asm"
000127D6                            ; ---------------------------------------------------------------------------
000127D6                            ; Sprite mappings - harpoon (LZ)
000127D6                            ; ---------------------------------------------------------------------------
000127D6 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000127DA 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000127DE 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000127E2 01                         byte_11FA6:	dc.b 1
000127E3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000127E8 01                         byte_11FAC:	dc.b 1
000127E9 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000127EE 02                         byte_11FB2:	dc.b 2
000127EF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000127F4 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000127F9 01                         byte_11FBD:	dc.b 1
000127FA F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000127FF 01                         byte_11FC3:	dc.b 1
00012800 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012805 02                         byte_11FC9:	dc.b 2
00012806 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001280B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012810                            		even
00012810                            		even
00012810                            
00012810                            ; ===========================================================================
00012810                            ; ---------------------------------------------------------------------------
00012810                            ; Object 61 - blocks (LZ)
00012810                            ; ---------------------------------------------------------------------------
00012810                            
00012810                            Obj61:					; XREF: Obj_Index
00012810 7000                       		moveq	#0,d0
00012812 1028 0024                  		move.b	$24(a0),d0
00012816 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001281A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001281E                            ; ===========================================================================
0001281E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012820 0000                       		dc.w Obj61_Action-Obj61_Index
00012822                            
00012822 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012824 200C                       		dc.b $20, $C
00012826 1010                       		dc.b $10, $10
00012828 1010                       		dc.b $10, $10
0001282A                            ; ===========================================================================
0001282A                            
0001282A                            Obj61_Main:				; XREF: Obj61_Index
0001282A 5428 0024                  		addq.b	#2,$24(a0)
0001282E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012836 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001283C 117C 0004 0001             		move.b	#4,1(a0)
00012842 117C 0003 0018             		move.b	#3,$18(a0)
00012848 7000                       		moveq	#0,d0
0001284A 1028 0028                  		move.b	$28(a0),d0
0001284E E648                       		lsr.w	#3,d0
00012850 0240 000E                  		andi.w	#$E,d0
00012854 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012858 115A 0019                  		move.b	(a2)+,$19(a0)
0001285C 1152 0016                  		move.b	(a2),$16(a0)
00012860 E248                       		lsr.w	#1,d0
00012862 1140 001A                  		move.b	d0,$1A(a0)
00012866 3168 0008 0034             		move.w	8(a0),$34(a0)
0001286C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012872 1028 0028                  		move.b	$28(a0),d0
00012876 0200 000F                  		andi.b	#$F,d0
0001287A 6700                       		beq.s	Obj61_Action
0001287C 0C00 0007                  		cmpi.b	#7,d0
00012880 6700                       		beq.s	Obj61_Action
00012882 117C 0001 0038             		move.b	#1,$38(a0)
00012888                            
00012888                            Obj61_Action:				; XREF: Obj61_Index
00012888 3F28 0008                  		move.w	8(a0),-(sp)
0001288C 7000                       		moveq	#0,d0
0001288E 1028 0028                  		move.b	$28(a0),d0
00012892 0240 000F                  		andi.w	#$F,d0
00012896 D040                       		add.w	d0,d0
00012898 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001289C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000128A0 381F                       		move.w	(sp)+,d4
000128A2 4A28 0001                  		tst.b	1(a0)
000128A6 6A00                       		bpl.s	Obj61_ChkDel
000128A8 7200                       		moveq	#0,d1
000128AA 1228 0019                  		move.b	$19(a0),d1
000128AE 0641 000B                  		addi.w	#$B,d1
000128B2 7400                       		moveq	#0,d2
000128B4 1428 0016                  		move.b	$16(a0),d2
000128B8 3602                       		move.w	d2,d3
000128BA 5243                       		addq.w	#1,d3
000128BC 6100 D97A                  		bsr.w	SolidObject
000128C0 1144 003F                  		move.b	d4,$3F(a0)
000128C4 6100 0000                  		bsr.w	loc_12180
000128C8                            
000128C8                            Obj61_ChkDel:
000128C8 3028 0034                  		move.w	$34(a0),d0
000128CC 0240 FF80                  		andi.w	#$FF80,d0
000128D0 3238 F700                  		move.w	($FFFFF700).w,d1
000128D4 0441 0080                  		subi.w	#$80,d1
000128D8 0241 FF80                  		andi.w	#$FF80,d1
000128DC 9041                       		sub.w	d1,d0
000128DE 0C40 0280                  		cmpi.w	#$280,d0
000128E2 6200 B5C0                  		bhi.w	DeleteObject
000128E6 6000 B580                  		bra.w	DisplaySprite
000128EA                            ; ===========================================================================
000128EA 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000128EE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000128F2 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000128F6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000128FA                            ; ===========================================================================
000128FA                            
000128FA                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000128FA 4E75                       		rts	
000128FC                            ; ===========================================================================
000128FC                            
000128FC                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000128FC 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012900 6600                       		bne.s	loc_120D6	; if yes, branch
00012902 0828 0003 0022             		btst	#3,$22(a0)
00012908 6700                       		beq.s	locret_120D4
0001290A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012910                            
00012910                            locret_120D4:
00012910 4E75                       		rts	
00012912                            ; ===========================================================================
00012912                            
00012912                            loc_120D6:
00012912 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012916 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012918 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001291C 4228 0038                  		clr.b	$38(a0)
00012920 4E75                       		rts	
00012922                            ; ===========================================================================
00012922                            
00012922                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012922 6100 B51E                  		bsr.w	SpeedToPos
00012926 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001292A 6100 0000                  		bsr.w	ObjHitFloor
0001292E 4A41                       		tst.w	d1
00012930 6A00 0000                  		bpl.w	locret_12106
00012934 5241                       		addq.w	#1,d1
00012936 D368 000C                  		add.w	d1,$C(a0)
0001293A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001293E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012942                            
00012942                            locret_12106:
00012942 4E75                       		rts	
00012944                            ; ===========================================================================
00012944                            
00012944                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012944 6100 B4FC                  		bsr.w	SpeedToPos
00012948 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001294C 6100 0000                  		bsr.w	ObjHitCeiling
00012950 4A41                       		tst.w	d1
00012952 6A00 0000                  		bpl.w	locret_12126
00012956 9368 000C                  		sub.w	d1,$C(a0)
0001295A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001295E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012962                            
00012962                            locret_12126:
00012962 4E75                       		rts	
00012964                            ; ===========================================================================
00012964                            
00012964                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012964 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001296A 6600                       		bne.s	locret_12138	; if not, branch
0001296C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012970 4228 0038                  		clr.b	$38(a0)
00012974                            
00012974                            locret_12138:
00012974 4E75                       		rts	
00012976                            ; ===========================================================================
00012976                            
00012976                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012976 3038 F646                  		move.w	($FFFFF646).w,d0
0001297A 9068 000C                  		sub.w	$C(a0),d0
0001297E 6700                       		beq.s	locret_1217E
00012980 6400                       		bcc.s	loc_12162
00012982 0C40 FFFE                  		cmpi.w	#-2,d0
00012986 6C00                       		bge.s	loc_1214E
00012988 70FE                       		moveq	#-2,d0
0001298A                            
0001298A                            loc_1214E:
0001298A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001298E 6100 0000                  		bsr.w	ObjHitCeiling
00012992 4A41                       		tst.w	d1
00012994 6A00 0000                  		bpl.w	locret_12160
00012998 9368 000C                  		sub.w	d1,$C(a0)
0001299C                            
0001299C                            locret_12160:
0001299C 4E75                       		rts	
0001299E                            ; ===========================================================================
0001299E                            
0001299E                            loc_12162:				; XREF: Obj61_Type07
0001299E 0C40 0002                  		cmpi.w	#2,d0
000129A2 6F00                       		ble.s	loc_1216A
000129A4 7002                       		moveq	#2,d0
000129A6                            
000129A6                            loc_1216A:
000129A6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000129AA 6100 0000                  		bsr.w	ObjHitFloor
000129AE 4A41                       		tst.w	d1
000129B0 6A00 0000                  		bpl.w	locret_1217E
000129B4 5241                       		addq.w	#1,d1
000129B6 D368 000C                  		add.w	d1,$C(a0)
000129BA                            
000129BA                            locret_1217E:
000129BA 4E75                       		rts	
000129BC                            ; ===========================================================================
000129BC                            
000129BC                            loc_12180:				; XREF: Obj61_Action
000129BC 4A28 0038                  		tst.b	$38(a0)
000129C0 6700                       		beq.s	locret_121C0
000129C2 0828 0003 0022             		btst	#3,$22(a0)
000129C8 6600                       		bne.s	loc_1219A
000129CA 4A28 003E                  		tst.b	$3E(a0)
000129CE 6700                       		beq.s	locret_121C0
000129D0 5928 003E                  		subq.b	#4,$3E(a0)
000129D4 6000                       		bra.s	loc_121A6
000129D6                            ; ===========================================================================
000129D6                            
000129D6                            loc_1219A:
000129D6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000129DC 6700                       		beq.s	locret_121C0
000129DE 5828 003E                  		addq.b	#4,$3E(a0)
000129E2                            
000129E2                            loc_121A6:
000129E2 1028 003E                  		move.b	$3E(a0),d0
000129E6 4EB9 0000 2D02             		jsr	(CalcSine).l
000129EC 323C 0400                  		move.w	#$400,d1
000129F0 C1C1                       		muls.w	d1,d0
000129F2 4840                       		swap	d0
000129F4 D068 0030                  		add.w	$30(a0),d0
000129F8 3140 000C                  		move.w	d0,$C(a0)
000129FC                            
000129FC                            locret_121C0:
000129FC 4E75                       		rts	
000129FE                            ; ===========================================================================
000129FE                            ; ---------------------------------------------------------------------------
000129FE                            ; Sprite mappings - blocks (LZ)
000129FE                            ; ---------------------------------------------------------------------------
000129FE                            Map_obj61:
000129FE                            	include "_maps\obj61.asm"
000129FE                            ; ---------------------------------------------------------------------------
000129FE                            ; Sprite mappings - blocks (LZ)
000129FE                            ; ---------------------------------------------------------------------------
000129FE 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012A02 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012A06 01                         byte_121CA:	dc.b 1
00012A07 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012A0C 02                         byte_121D0:	dc.b 2
00012A0D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012A12 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012A17 01                         byte_121DB:	dc.b 1
00012A18 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012A1D 01                         byte_121E1:	dc.b 1
00012A1E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012A24 00                         		even
00012A24 00                         		even
00012A24                            
00012A24                            ; ===========================================================================
00012A24                            ; ---------------------------------------------------------------------------
00012A24                            ; Object 62 - gargoyle head (LZ)
00012A24                            ; ---------------------------------------------------------------------------
00012A24                            
00012A24                            Obj62:					; XREF: Obj_Index
00012A24 7000                       		moveq	#0,d0
00012A26 1028 0024                  		move.b	$24(a0),d0
00012A2A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012A2E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012A32 6000 D4DC                  		bra.w	MarkObjGone
00012A36                            ; ===========================================================================
00012A36 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012A38 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012A3A 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012A3C 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012A3E                            
00012A3E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012A46                            ; ===========================================================================
00012A46                            
00012A46                            Obj62_Main:				; XREF: Obj62_Index
00012A46 5428 0024                  		addq.b	#2,$24(a0)
00012A4A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A52 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012A58 0028 0004 0001             		ori.b	#4,1(a0)
00012A5E 117C 0003 0018             		move.b	#3,$18(a0)
00012A64 117C 0010 0019             		move.b	#$10,$19(a0)
00012A6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A6E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A72 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A78 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A7E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012A84                            
00012A84                            Obj62_MakeFire:				; XREF: Obj62_Index
00012A84 5328 001E                  		subq.b	#1,$1E(a0)
00012A88 6600                       		bne.s	Obj62_NoFire
00012A8A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A90 6100 B650                  		bsr.w	ChkObjOnScreen
00012A94 6600                       		bne.s	Obj62_NoFire
00012A96 6100 B856                  		bsr.w	SingleObjLoad
00012A9A 6600                       		bne.s	Obj62_NoFire
00012A9C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012AA0 5829 0024                  		addq.b	#4,$24(a1)
00012AA4 3368 0008 0008             		move.w	8(a0),8(a1)
00012AAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012AB0 1368 0001 0001             		move.b	1(a0),1(a1)
00012AB6 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012ABC                            
00012ABC                            Obj62_NoFire:
00012ABC 4E75                       		rts	
00012ABE                            ; ===========================================================================
00012ABE                            
00012ABE                            Obj62_FireBall:				; XREF: Obj62_Index
00012ABE 5428 0024                  		addq.b	#2,$24(a0)
00012AC2 117C 0008 0016             		move.b	#8,$16(a0)
00012AC8 117C 0008 0017             		move.b	#8,$17(a0)
00012ACE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012AD6 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012ADC 0028 0004 0001             		ori.b	#4,1(a0)
00012AE2 117C 0004 0018             		move.b	#4,$18(a0)
00012AE8 117C 0098 0020             		move.b	#$98,$20(a0)
00012AEE 117C 0008 0019             		move.b	#8,$19(a0)
00012AF4 117C 0002 001A             		move.b	#2,$1A(a0)
00012AFA 5068 000C                  		addq.w	#8,$C(a0)
00012AFE 317C 0200 0010             		move.w	#$200,$10(a0)
00012B04 0828 0000 0022             		btst	#0,$22(a0)
00012B0A 6600                       		bne.s	Obj62_Sound
00012B0C 4468 0010                  		neg.w	$10(a0)
00012B10                            
00012B10                            Obj62_Sound:
00012B10 303C 00AE                  		move.w	#$AE,d0
00012B14 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012B1A                            
00012B1A                            Obj62_AniFire:				; XREF: Obj62_Index
00012B1A 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012B1E 0200 0007                  		andi.b	#7,d0
00012B22 6600                       		bne.s	Obj62_StopFire
00012B24 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012B2A                            
00012B2A                            Obj62_StopFire:
00012B2A 6100 B316                  		bsr.w	SpeedToPos
00012B2E 0828 0000 0022             		btst	#0,$22(a0)
00012B34 6600                       		bne.s	Obj62_StopFire2
00012B36 76F8                       		moveq	#-8,d3
00012B38 6100 0000                  		bsr.w	ObjHitWallLeft
00012B3C 4A41                       		tst.w	d1
00012B3E 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012B42 4E75                       		rts	
00012B44                            ; ===========================================================================
00012B44                            
00012B44                            Obj62_StopFire2:
00012B44 7608                       		moveq	#8,d3
00012B46 6100 0000                  		bsr.w	ObjHitWallRight
00012B4A 4A41                       		tst.w	d1
00012B4C 6B00 B356                  		bmi.w	DeleteObject
00012B50 4E75                       		rts	
00012B52                            ; ===========================================================================
00012B52                            ; ---------------------------------------------------------------------------
00012B52                            ; Sprite mappings - gargoyle head (LZ)
00012B52                            ; ---------------------------------------------------------------------------
00012B52                            Map_obj62:
00012B52                            	include "_maps\obj62.asm"
00012B52                            ; ---------------------------------------------------------------------------
00012B52                            ; Sprite mappings - gargoyle head (LZ)
00012B52                            ; ---------------------------------------------------------------------------
00012B52 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012B56 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012B5A 03                         byte_12320:	dc.b 3
00012B5B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012B60 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012B65 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B6A 01                         byte_12330:	dc.b 1
00012B6B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B70 01                         byte_12336:	dc.b 1
00012B71 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B76                            		even
00012B76                            		even
00012B76                            
00012B76                            ; ===========================================================================
00012B76                            ; ---------------------------------------------------------------------------
00012B76                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B76                            ; ---------------------------------------------------------------------------
00012B76                            
00012B76                            Obj63:					; XREF: Obj_Index
00012B76 7000                       		moveq	#0,d0
00012B78 1028 0024                  		move.b	$24(a0),d0
00012B7C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012B80 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012B84 3028 0030                  		move.w	$30(a0),d0
00012B88 0240 FF80                  		andi.w	#$FF80,d0
00012B8C 3238 F700                  		move.w	($FFFFF700).w,d1
00012B90 0441 0080                  		subi.w	#$80,d1
00012B94 0241 FF80                  		andi.w	#$FF80,d1
00012B98 9041                       		sub.w	d1,d0
00012B9A 0C40 0280                  		cmpi.w	#$280,d0
00012B9E 6200                       		bhi.s	loc_1236A
00012BA0                            
00012BA0                            Obj63_Display:				; XREF: loc_1236A
00012BA0 6000 B2C6                  		bra.w	DisplaySprite
00012BA4                            ; ===========================================================================
00012BA4                            
00012BA4                            loc_1236A:				; XREF: Obj63
00012BA4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012BAA 6600                       		bne.s	loc_12378
00012BAC 0C40 FF80                  		cmpi.w	#-$80,d0
00012BB0 64EE                       		bcc.s	Obj63_Display
00012BB2                            
00012BB2                            loc_12378:
00012BB2 1028 002F                  		move.b	$2F(a0),d0
00012BB6 6A00 B2EC                  		bpl.w	DeleteObject
00012BBA 0240 007F                  		andi.w	#$7F,d0
00012BBE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BC2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012BC8 6000 B2DA                  		bra.w	DeleteObject
00012BCC                            ; ===========================================================================
00012BCC 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012BCE 0000                       		dc.w loc_124B2-Obj63_Index
00012BD0 0000                       		dc.w loc_124C2-Obj63_Index
00012BD2 0000                       		dc.w loc_124DE-Obj63_Index
00012BD4                            ; ===========================================================================
00012BD4                            
00012BD4                            Obj63_Main:				; XREF: Obj63_Index
00012BD4 1028 0028                  		move.b	$28(a0),d0
00012BD8 6B00 0000                  		bmi.w	loc_12460
00012BDC 5428 0024                  		addq.b	#2,$24(a0)
00012BE0 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012BE8 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012BEE 0028 0004 0001             		ori.b	#4,1(a0)
00012BF4 117C 0010 0019             		move.b	#$10,$19(a0)
00012BFA 117C 0004 0018             		move.b	#4,$18(a0)
00012C00 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012C06 6600                       		bne.s	loc_123E2
00012C08 5828 0024                  		addq.b	#4,$24(a0)
00012C0C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012C12 117C 0001 0018             		move.b	#1,$18(a0)
00012C18 6000 0000                  		bra.w	loc_124DE
00012C1C                            ; ===========================================================================
00012C1C                            
00012C1C                            loc_123E2:
00012C1C 117C 0004 001A             		move.b	#4,$1A(a0)
00012C22 7000                       		moveq	#0,d0
00012C24 1028 0028                  		move.b	$28(a0),d0
00012C28 3200                       		move.w	d0,d1
00012C2A E648                       		lsr.w	#3,d0
00012C2C 0240 001E                  		andi.w	#$1E,d0
00012C30 45FA 0000                  		lea	Obj63_Data(pc),a2
00012C34 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C38 315A 0038                  		move.w	(a2)+,$38(a0)
00012C3C 315A 0030                  		move.w	(a2)+,$30(a0)
00012C40 214A 003C                  		move.l	a2,$3C(a0)
00012C44 0241 000F                  		andi.w	#$F,d1
00012C48 E549                       		lsl.w	#2,d1
00012C4A 1141 0038                  		move.b	d1,$38(a0)
00012C4E 117C 0004 003A             		move.b	#4,$3A(a0)
00012C54 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C58 6700                       		beq.s	loc_1244C
00012C5A 117C 0001 003B             		move.b	#1,$3B(a0)
00012C60 4428 003A                  		neg.b	$3A(a0)
00012C64 7200                       		moveq	#0,d1
00012C66 1228 0038                  		move.b	$38(a0),d1
00012C6A D228 003A                  		add.b	$3A(a0),d1
00012C6E B228 0039                  		cmp.b	$39(a0),d1
00012C72 6500                       		bcs.s	loc_12448
00012C74 1001                       		move.b	d1,d0
00012C76 7200                       		moveq	#0,d1
00012C78 4A00                       		tst.b	d0
00012C7A 6A00                       		bpl.s	loc_12448
00012C7C 1228 0039                  		move.b	$39(a0),d1
00012C80 5901                       		subq.b	#4,d1
00012C82                            
00012C82                            loc_12448:
00012C82 1141 0038                  		move.b	d1,$38(a0)
00012C86                            
00012C86                            loc_1244C:
00012C86 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012C8C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012C92 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C96 6000 0000                  		bra.w	loc_124B2
00012C9A                            ; ===========================================================================
00012C9A                            
00012C9A                            loc_12460:				; XREF: Obj63_Main
00012C9A 1140 002F                  		move.b	d0,$2F(a0)
00012C9E 0240 007F                  		andi.w	#$7F,d0
00012CA2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012CA6 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012CAC 6600 B1F6                  		bne.w	DeleteObject
00012CB0 D040                       		add.w	d0,d0
00012CB2 0240 001E                  		andi.w	#$1E,d0
00012CB6 0640 0070                  		addi.w	#$70,d0
00012CBA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012CC0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012CC4 321A                       		move.w	(a2)+,d1
00012CC6 2248                       		movea.l	a0,a1
00012CC8 6000                       		bra.s	Obj63_MakePtfms
00012CCA                            ; ===========================================================================
00012CCA                            
00012CCA                            Obj63_Loop:
00012CCA 6100 B622                  		bsr.w	SingleObjLoad
00012CCE 6600                       		bne.s	loc_124AA
00012CD0                            
00012CD0                            Obj63_MakePtfms:			; XREF: loc_12460
00012CD0 12BC 0063                  		move.b	#$63,0(a1)
00012CD4 335A 0008                  		move.w	(a2)+,8(a1)
00012CD8 335A 000C                  		move.w	(a2)+,$C(a1)
00012CDC 301A                       		move.w	(a2)+,d0
00012CDE 1340 0028                  		move.b	d0,$28(a1)
00012CE2                            
00012CE2                            loc_124AA:
00012CE2 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012CE6                            
00012CE6 588F                       		addq.l	#4,sp
00012CE8 4E75                       		rts	
00012CEA                            ; ===========================================================================
00012CEA                            
00012CEA                            loc_124B2:				; XREF: Obj63_Index
00012CEA 7200                       		moveq	#0,d1
00012CEC 1228 0019                  		move.b	$19(a0),d1
00012CF0 4EB9 0000 7AAE             		jsr	(PlatformObject).l
00012CF6 6000 0000                  		bra.w	sub_12502
00012CFA                            ; ===========================================================================
00012CFA                            
00012CFA                            loc_124C2:				; XREF: Obj63_Index
00012CFA 7200                       		moveq	#0,d1
00012CFC 1228 0019                  		move.b	$19(a0),d1
00012D00 4EB9 0000 7C22             		jsr	(ExitPlatform).l
00012D06 3F28 0008                  		move.w	8(a0),-(sp)
00012D0A 6100 0000                  		bsr.w	sub_12502
00012D0E 341F                       		move.w	(sp)+,d2
00012D10 4EF9 0000 818C             		jmp	(MvSonicOnPtfm2).l
00012D16                            ; ===========================================================================
00012D16                            
00012D16                            loc_124DE:				; XREF: Obj63_Index
00012D16 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012D1A 0240 0003                  		andi.w	#3,d0
00012D1E 6600                       		bne.s	loc_124FC
00012D20 7201                       		moveq	#1,d1
00012D22 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012D26 6700                       		beq.s	loc_124F2
00012D28 4401                       		neg.b	d1
00012D2A                            
00012D2A                            loc_124F2:
00012D2A D328 001A                  		add.b	d1,$1A(a0)
00012D2E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012D34                            
00012D34                            loc_124FC:
00012D34 588F                       		addq.l	#4,sp
00012D36 6000 D1D8                  		bra.w	MarkObjGone
00012D3A                            
00012D3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D3A                            
00012D3A                            
00012D3A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012D3A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012D3E 6700                       		beq.s	loc_12520
00012D40 4A28 003B                  		tst.b	$3B(a0)
00012D44 6600                       		bne.s	loc_12520
00012D46 117C 0001 003B             		move.b	#1,$3B(a0)
00012D4C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012D52 4428 003A                  		neg.b	$3A(a0)
00012D56 6000                       		bra.s	loc_12534
00012D58                            ; ===========================================================================
00012D58                            
00012D58                            loc_12520:
00012D58 3028 0008                  		move.w	8(a0),d0
00012D5C B068 0034                  		cmp.w	$34(a0),d0
00012D60 6600                       		bne.s	loc_1256A
00012D62 3028 000C                  		move.w	$C(a0),d0
00012D66 B068 0036                  		cmp.w	$36(a0),d0
00012D6A 6600                       		bne.s	loc_1256A
00012D6C                            
00012D6C                            loc_12534:
00012D6C 7200                       		moveq	#0,d1
00012D6E 1228 0038                  		move.b	$38(a0),d1
00012D72 D228 003A                  		add.b	$3A(a0),d1
00012D76 B228 0039                  		cmp.b	$39(a0),d1
00012D7A 6500                       		bcs.s	loc_12552
00012D7C 1001                       		move.b	d1,d0
00012D7E 7200                       		moveq	#0,d1
00012D80 4A00                       		tst.b	d0
00012D82 6A00                       		bpl.s	loc_12552
00012D84 1228 0039                  		move.b	$39(a0),d1
00012D88 5901                       		subq.b	#4,d1
00012D8A                            
00012D8A                            loc_12552:
00012D8A 1141 0038                  		move.b	d1,$38(a0)
00012D8E 2268 003C                  		movea.l	$3C(a0),a1
00012D92 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012D98 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012D9E 6100 0000                  		bsr.w	Obj63_ChangeDir
00012DA2                            
00012DA2                            loc_1256A:
00012DA2 6100 B09E                  		bsr.w	SpeedToPos
00012DA6 4E75                       		rts	
00012DA8                            ; End of function sub_12502
00012DA8                            
00012DA8                            
00012DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DA8                            
00012DA8                            
00012DA8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012DA8 7000                       		moveq	#0,d0
00012DAA 343C FF00                  		move.w	#-$100,d2
00012DAE 3028 0008                  		move.w	8(a0),d0
00012DB2 9068 0034                  		sub.w	$34(a0),d0
00012DB6 6400                       		bcc.s	loc_12584
00012DB8 4440                       		neg.w	d0
00012DBA 4442                       		neg.w	d2
00012DBC                            
00012DBC                            loc_12584:
00012DBC 7200                       		moveq	#0,d1
00012DBE 363C FF00                  		move.w	#-$100,d3
00012DC2 3228 000C                  		move.w	$C(a0),d1
00012DC6 9268 0036                  		sub.w	$36(a0),d1
00012DCA 6400                       		bcc.s	loc_12598
00012DCC 4441                       		neg.w	d1
00012DCE 4443                       		neg.w	d3
00012DD0                            
00012DD0                            loc_12598:
00012DD0 B240                       		cmp.w	d0,d1
00012DD2 6500                       		bcs.s	loc_125C2
00012DD4 3028 0008                  		move.w	8(a0),d0
00012DD8 9068 0034                  		sub.w	$34(a0),d0
00012DDC 6700                       		beq.s	loc_125AE
00012DDE 48C0                       		ext.l	d0
00012DE0 E180                       		asl.l	#8,d0
00012DE2 81C1                       		divs.w	d1,d0
00012DE4 4440                       		neg.w	d0
00012DE6                            
00012DE6                            loc_125AE:
00012DE6 3140 0010                  		move.w	d0,$10(a0)
00012DEA 3143 0012                  		move.w	d3,$12(a0)
00012DEE 4840                       		swap	d0
00012DF0 3140 000A                  		move.w	d0,$A(a0)
00012DF4 4268 000E                  		clr.w	$E(a0)
00012DF8 4E75                       		rts	
00012DFA                            ; ===========================================================================
00012DFA                            
00012DFA                            loc_125C2:				; XREF: Obj63_ChangeDir
00012DFA 3228 000C                  		move.w	$C(a0),d1
00012DFE 9268 0036                  		sub.w	$36(a0),d1
00012E02 6700                       		beq.s	loc_125D4
00012E04 48C1                       		ext.l	d1
00012E06 E181                       		asl.l	#8,d1
00012E08 83C0                       		divs.w	d0,d1
00012E0A 4441                       		neg.w	d1
00012E0C                            
00012E0C                            loc_125D4:
00012E0C 3141 0012                  		move.w	d1,$12(a0)
00012E10 3142 0010                  		move.w	d2,$10(a0)
00012E14 4841                       		swap	d1
00012E16 3141 000E                  		move.w	d1,$E(a0)
00012E1A 4268 000A                  		clr.w	$A(a0)
00012E1E 4E75                       		rts	
00012E20                            ; End of function Obj63_ChangeDir
00012E20                            
00012E20                            ; ===========================================================================
00012E20 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012E22 0000                       		dc.w word_12610-Obj63_Data
00012E24 0000                       		dc.w word_12628-Obj63_Data
00012E26 0000                       		dc.w word_1263C-Obj63_Data
00012E28 0000                       		dc.w word_12650-Obj63_Data
00012E2A 0000                       		dc.w word_12668-Obj63_Data
00012E2C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012E3C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012E48 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012E58 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012E60 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E74 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012E88 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012EA0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012EB4                            
00012EB4                            ; ---------------------------------------------------------------------------
00012EB4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EB4                            ; ---------------------------------------------------------------------------
00012EB4                            Map_obj63:
00012EB4                            	include "_maps\obj63.asm"
00012EB4                            ; ---------------------------------------------------------------------------
00012EB4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EB4                            ; ---------------------------------------------------------------------------
00012EB4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012EB8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012EBC 0000                       		dc.w byte_1269E-Map_obj63
00012EBE 01                         byte_12686:	dc.b 1
00012EBF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012EC4 01                         byte_1268C:	dc.b 1
00012EC5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012ECA 01                         byte_12692:	dc.b 1
00012ECB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012ED0 01                         byte_12698:	dc.b 1
00012ED1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012ED6 01                         byte_1269E:	dc.b 1
00012ED7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012EDC                            		even
00012EDC                            		even
00012EDC                            
00012EDC                            ; ===========================================================================
00012EDC                            ; ---------------------------------------------------------------------------
00012EDC                            ; Object 64 - bubbles (LZ)
00012EDC                            ; ---------------------------------------------------------------------------
00012EDC                            
00012EDC                            Obj64:					; XREF: Obj_Index
00012EDC 7000                       		moveq	#0,d0
00012EDE 1028 0024                  		move.b	$24(a0),d0
00012EE2 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012EE6 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012EEA                            ; ===========================================================================
00012EEA 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012EEC 0000                       		dc.w Obj64_Animate-Obj64_Index
00012EEE 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012EF0 0000                       		dc.w Obj64_Display2-Obj64_Index
00012EF2 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012EF4 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012EF6                            ; ===========================================================================
00012EF6                            
00012EF6                            Obj64_Main:				; XREF: Obj64_Index
00012EF6 5428 0024                  		addq.b	#2,$24(a0)
00012EFA 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012F02 317C 8348 0002             		move.w	#$8348,2(a0)
00012F08 117C 0084 0001             		move.b	#$84,1(a0)
00012F0E 117C 0010 0019             		move.b	#$10,$19(a0)
00012F14 117C 0001 0018             		move.b	#1,$18(a0)
00012F1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F1E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012F20 5028 0024                  		addq.b	#8,$24(a0)
00012F24 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012F28 1140 0032                  		move.b	d0,$32(a0)
00012F2C 1140 0033                  		move.b	d0,$33(a0)
00012F30 117C 0006 001C             		move.b	#6,$1C(a0)
00012F36 6000 0000                  		bra.w	Obj64_BblMaker
00012F3A                            ; ===========================================================================
00012F3A                            
00012F3A                            Obj64_Bubble:				; XREF: Obj64_Main
00012F3A 1140 001C                  		move.b	d0,$1C(a0)
00012F3E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F44 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012F4A 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00012F50 1140 0026                  		move.b	d0,$26(a0)
00012F54                            
00012F54                            Obj64_Animate:				; XREF: Obj64_Index
00012F54 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F5A 4EB9 0000 AEEE             		jsr	AnimateSprite
00012F60 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012F66 6600                       		bne.s	Obj64_ChkWater
00012F68 117C 0001 002E             		move.b	#1,$2E(a0)
00012F6E                            
00012F6E                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F6E 3038 F646                  		move.w	($FFFFF646).w,d0
00012F72 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F76 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F78                            
00012F78                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F78 117C 0006 0024             		move.b	#6,$24(a0)
00012F7E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012F82 6000 0000                  		bra.w	Obj64_Display2
00012F86                            ; ===========================================================================
00012F86                            
00012F86                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012F86 1028 0026                  		move.b	$26(a0),d0
00012F8A 5228 0026                  		addq.b	#1,$26(a0)
00012F8E 0240 007F                  		andi.w	#$7F,d0
00012F92 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012F98 1031 0000                  		move.b	(a1,d0.w),d0
00012F9C 4880                       		ext.w	d0
00012F9E D068 0030                  		add.w	$30(a0),d0
00012FA2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012FA6 4A28 002E                  		tst.b	$2E(a0)
00012FAA 6700                       		beq.s	Obj64_Display
00012FAC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012FB0 6700                       		beq.s	Obj64_Display	; if not, branch
00012FB2                            
00012FB2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012FB6 303C 00AD                  		move.w	#$AD,d0
00012FBA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012FC0 43F8 D000                  		lea	($FFFFD000).w,a1
00012FC4 4269 0010                  		clr.w	$10(a1)
00012FC8 4269 0012                  		clr.w	$12(a1)
00012FCC 4269 0014                  		clr.w	$14(a1)
00012FD0 137C 0015 001C             		move.b	#$15,$1C(a1)
00012FD6 337C 0023 003E             		move.w	#$23,$3E(a1)
00012FDC 137C 0000 003C             		move.b	#0,$3C(a1)
00012FE2 08A9 0005 0022             		bclr	#5,$22(a1)
00012FE8 08A9 0004 0022             		bclr	#4,$22(a1)
00012FEE 0829 0002 0022             		btst	#2,$22(a1)
00012FF4 6700 FF82                  		beq.w	Obj64_Burst
00012FF8 08A9 0002 0022             		bclr	#2,$22(a1)
00012FFE 137C 0013 0016             		move.b	#$13,$16(a1)
00013004 137C 0009 0017             		move.b	#9,$17(a1)
0001300A 5B69 000C                  		subq.w	#5,$C(a1)
0001300E 6000 FF68                  		bra.w	Obj64_Burst
00013012                            ; ===========================================================================
00013012                            
00013012                            Obj64_Display:				; XREF: Obj64_Wobble
00013012 6100 AE2E                  		bsr.w	SpeedToPos
00013016 4A28 0001                  		tst.b	1(a0)
0001301A 6A00                       		bpl.s	Obj64_Delete
0001301C 4EFA AE4A                  		jmp	DisplaySprite
00013020                            ; ===========================================================================
00013020                            
00013020                            Obj64_Delete:
00013020 4EFA AE82                  		jmp	DeleteObject
00013024                            ; ===========================================================================
00013024                            
00013024                            Obj64_Display2:				; XREF: Obj64_Index
00013024 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001302A 4EB9 0000 AEEE             		jsr	AnimateSprite
00013030 4A28 0001                  		tst.b	1(a0)
00013034 6A00                       		bpl.s	Obj64_Delete2
00013036 4EFA AE30                  		jmp	DisplaySprite
0001303A                            ; ===========================================================================
0001303A                            
0001303A                            Obj64_Delete2:
0001303A 4EFA AE68                  		jmp	DeleteObject
0001303E                            ; ===========================================================================
0001303E                            
0001303E                            Obj64_Delete3:				; XREF: Obj64_Index
0001303E 6000 AE64                  		bra.w	DeleteObject
00013042                            ; ===========================================================================
00013042                            
00013042                            Obj64_BblMaker:				; XREF: Obj64_Index
00013042 4A68 0036                  		tst.w	$36(a0)
00013046 6600                       		bne.s	loc_12874
00013048 3038 F646                  		move.w	($FFFFF646).w,d0
0001304C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013050 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013054 4A28 0001                  		tst.b	1(a0)
00013058 6A00 0000                  		bpl.w	Obj64_ChkDel
0001305C 5368 0038                  		subq.w	#1,$38(a0)
00013060 6A00 0000                  		bpl.w	loc_12914
00013064 317C 0001 0036             		move.w	#1,$36(a0)
0001306A                            
0001306A                            loc_1283A:
0001306A 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00013070 3200                       		move.w	d0,d1
00013072 0240 0007                  		andi.w	#7,d0
00013076 0C40 0006                  		cmpi.w	#6,d0
0001307A 64EE                       		bcc.s	loc_1283A
0001307C                            
0001307C 1140 0034                  		move.b	d0,$34(a0)
00013080 0241 000C                  		andi.w	#$C,d1
00013084 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001308A D2C1                       		adda.w	d1,a1
0001308C 2149 003C                  		move.l	a1,$3C(a0)
00013090 5328 0032                  		subq.b	#1,$32(a0)
00013094 6A00                       		bpl.s	loc_12872
00013096 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001309C 08E8 0007 0036             		bset	#7,$36(a0)
000130A2                            
000130A2                            loc_12872:
000130A2 6000                       		bra.s	loc_1287C
000130A4                            ; ===========================================================================
000130A4                            
000130A4                            loc_12874:				; XREF: Obj64_BblMaker
000130A4 5368 0038                  		subq.w	#1,$38(a0)
000130A8 6A00 0000                  		bpl.w	loc_12914
000130AC                            
000130AC                            loc_1287C:
000130AC 4EB9 0000 2CDC             		jsr	(RandomNumber).l
000130B2 0240 001F                  		andi.w	#$1F,d0
000130B6 3140 0038                  		move.w	d0,$38(a0)
000130BA 6100 B232                  		bsr.w	SingleObjLoad
000130BE 6600                       		bne.s	loc_128F8
000130C0 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000130C4 3368 0008 0008             		move.w	8(a0),8(a1)
000130CA 4EB9 0000 2CDC             		jsr	(RandomNumber).l
000130D0 0240 000F                  		andi.w	#$F,d0
000130D4 5140                       		subq.w	#8,d0
000130D6 D169 0008                  		add.w	d0,8(a1)
000130DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000130E0 7000                       		moveq	#0,d0
000130E2 1028 0034                  		move.b	$34(a0),d0
000130E6 2468 003C                  		movea.l	$3C(a0),a2
000130EA 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000130F0 0828 0007 0036             		btst	#7,$36(a0)
000130F6 6700                       		beq.s	loc_128F8
000130F8 4EB9 0000 2CDC             		jsr	(RandomNumber).l
000130FE 0240 0003                  		andi.w	#3,d0
00013102 6600                       		bne.s	loc_128E4
00013104 08E8 0006 0036             		bset	#6,$36(a0)
0001310A 6600                       		bne.s	loc_128F8
0001310C 137C 0002 0028             		move.b	#2,$28(a1)
00013112                            
00013112                            loc_128E4:
00013112 4A28 0034                  		tst.b	$34(a0)
00013116 6600                       		bne.s	loc_128F8
00013118 08E8 0006 0036             		bset	#6,$36(a0)
0001311E 6600                       		bne.s	loc_128F8
00013120 137C 0002 0028             		move.b	#2,$28(a1)
00013126                            
00013126                            loc_128F8:
00013126 5328 0034                  		subq.b	#1,$34(a0)
0001312A 6A00                       		bpl.s	loc_12914
0001312C 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00013132 0240 007F                  		andi.w	#$7F,d0
00013136 0640 0080                  		addi.w	#$80,d0
0001313A D168 0038                  		add.w	d0,$38(a0)
0001313E 4268 0036                  		clr.w	$36(a0)
00013142                            
00013142                            loc_12914:
00013142 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013148 4EB9 0000 AEEE             		jsr	AnimateSprite
0001314E                            
0001314E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
0001314E 3028 0008                  		move.w	8(a0),d0
00013152 0240 FF80                  		andi.w	#$FF80,d0
00013156 3238 F700                  		move.w	($FFFFF700).w,d1
0001315A 0441 0080                  		subi.w	#$80,d1
0001315E 0241 FF80                  		andi.w	#$FF80,d1
00013162 9041                       		sub.w	d1,d0
00013164 0C40 0280                  		cmpi.w	#$280,d0
00013168 6200 AD3A                  		bhi.w	DeleteObject
0001316C 3038 F646                  		move.w	($FFFFF646).w,d0
00013170 B068 000C                  		cmp.w	$C(a0),d0
00013174 6500 ACF2                  		bcs.w	DisplaySprite
00013178 4E75                       		rts	
0001317A                            ; ===========================================================================
0001317A                            ; bubble production sequence
0001317A                            
0001317A                            ; 0 = small bubble, 1 =	large bubble
0001317A                            
0001317A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001318C                            
0001318C                            ; ===========================================================================
0001318C                            
0001318C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001318C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013190 6B00                       		bmi.s	loc_12998
00013192 43F8 D000                  		lea	($FFFFD000).w,a1
00013196 3029 0008                  		move.w	8(a1),d0
0001319A 3228 0008                  		move.w	8(a0),d1
0001319E 0441 0010                  		subi.w	#$10,d1
000131A2 B240                       		cmp.w	d0,d1
000131A4 6400                       		bcc.s	loc_12998
000131A6 0641 0020                  		addi.w	#$20,d1
000131AA B240                       		cmp.w	d0,d1
000131AC 6500                       		bcs.s	loc_12998
000131AE 3029 000C                  		move.w	$C(a1),d0
000131B2 3228 000C                  		move.w	$C(a0),d1
000131B6 B240                       		cmp.w	d0,d1
000131B8 6400                       		bcc.s	loc_12998
000131BA 0641 0010                  		addi.w	#$10,d1
000131BE B240                       		cmp.w	d0,d1
000131C0 6500                       		bcs.s	loc_12998
000131C2 7001                       		moveq	#1,d0
000131C4 4E75                       		rts	
000131C6                            ; ===========================================================================
000131C6                            
000131C6                            loc_12998:
000131C6 7000                       		moveq	#0,d0
000131C8 4E75                       		rts	
000131CA                            ; ===========================================================================
000131CA                            Ani_obj64:
000131CA                            	include "_anim\obj64.asm"
000131CA                            ; ---------------------------------------------------------------------------
000131CA                            ; Animation script - bubbles (LZ)
000131CA                            ; ---------------------------------------------------------------------------
000131CA 0000                       		dc.w byte_129AA-Ani_obj64
000131CC 0000                       		dc.w byte_129B0-Ani_obj64
000131CE 0000                       		dc.w byte_129B6-Ani_obj64
000131D0 0000                       		dc.w byte_129BE-Ani_obj64
000131D2 0000                       		dc.w byte_129BE-Ani_obj64
000131D4 0000                       		dc.w byte_129C0-Ani_obj64
000131D6 0000                       		dc.w byte_129C6-Ani_obj64
000131D8 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000131DE 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000131E4 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000131EC 04FC                       byte_129BE:	dc.b 4,	$FC
000131EE 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000131F4 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000131FA 00                         		even
000131FA 00                         		even
000131FA                            
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            ; Sprite mappings - bubbles (LZ)
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            Map_obj64:
000131FA                            	include "_maps\obj64.asm"
000131FA                            ; ---------------------------------------------------------------------------
000131FA                            ; Sprite mappings - bubbles (LZ)
000131FA                            ; ---------------------------------------------------------------------------
000131FA 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000131FE 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013202 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013206 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
0001320A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
0001320E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013212 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013216 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
0001321A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
0001321E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013222 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013226 0000                       		dc.w byte_12A9C-Map_obj64
00013228 01                         byte_129FA:	dc.b 1
00013229 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
0001322E 01                         byte_12A00:	dc.b 1
0001322F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013234 01                         byte_12A06:	dc.b 1
00013235 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001323A 01                         byte_12A0C:	dc.b 1
0001323B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013240 01                         byte_12A12:	dc.b 1
00013241 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013246 01                         byte_12A18:	dc.b 1
00013247 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001324C 01                         byte_12A1E:	dc.b 1
0001324D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013252 04                         byte_12A24:	dc.b 4
00013253 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013258 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001325D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013262 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013267 04                         byte_12A39:	dc.b 4
00013268 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001326D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013272 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013277 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001327C 01                         byte_12A4E:	dc.b 1
0001327D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013282 01                         byte_12A54:	dc.b 1
00013283 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013288 01                         byte_12A5A:	dc.b 1
00013289 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001328E 01                         byte_12A60:	dc.b 1
0001328F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013294 01                         byte_12A66:	dc.b 1
00013295 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001329A 01                         byte_12A6C:	dc.b 1
0001329B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000132A0 01                         byte_12A72:	dc.b 1
000132A1 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000132A6 01                         byte_12A78:	dc.b 1
000132A7 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000132AC 01                         byte_12A7E:	dc.b 1
000132AD F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000132B2 01                         byte_12A84:	dc.b 1
000132B3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000132B8 01                         byte_12A8A:	dc.b 1
000132B9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000132BE 01                         byte_12A90:	dc.b 1
000132BF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000132C4 01                         byte_12A96:	dc.b 1
000132C5 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000132CA 00                         byte_12A9C:	dc.b 0
000132CC 00                         		even
000132CC 00                         		even
000132CC                            
000132CC                            ; ===========================================================================
000132CC                            ; ---------------------------------------------------------------------------
000132CC                            ; Object 65 - waterfalls (LZ)
000132CC                            ; ---------------------------------------------------------------------------
000132CC                            
000132CC                            Obj65:					; XREF: Obj_Index
000132CC 7000                       		moveq	#0,d0
000132CE 1028 0024                  		move.b	$24(a0),d0
000132D2 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000132D6 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000132DA                            ; ===========================================================================
000132DA 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000132DC 0000                       		dc.w Obj65_Animate-Obj65_Index
000132DE 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000132E0 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000132E2 0000                       		dc.w loc_12B36-Obj65_Index
000132E4                            ; ===========================================================================
000132E4                            
000132E4                            Obj65_Main:				; XREF: Obj65_Index
000132E4 5828 0024                  		addq.b	#4,$24(a0)
000132E8 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000132F0 317C 4259 0002             		move.w	#$4259,2(a0)
000132F6 0028 0004 0001             		ori.b	#4,1(a0)
000132FC 117C 0018 0019             		move.b	#$18,$19(a0)
00013302 117C 0001 0018             		move.b	#1,$18(a0)
00013308 1028 0028                  		move.b	$28(a0),d0	; get object type
0001330C 6A00                       		bpl.s	loc_12AE6
0001330E 08E8 0007 0002             		bset	#7,2(a0)
00013314                            
00013314                            loc_12AE6:
00013314 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013318 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001331C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013320 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013322 4228 0018                  		clr.b	$18(a0)
00013326 5528 0024                  		subq.b	#2,$24(a0)
0001332A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013330 6700                       		beq.s	loc_12B0A	; if not, branch
00013332 117C 0006 0024             		move.b	#6,$24(a0)
00013338                            
00013338                            loc_12B0A:
00013338 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001333E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013340 117C 0008 0024             		move.b	#8,$24(a0)
00013346                            
00013346                            Obj65_Animate:				; XREF: Obj65_Index
00013346 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001334C 4EB9 0000 AEEE             		jsr	AnimateSprite
00013352                            
00013352                            Obj65_ChkDel:				; XREF: Obj65_Index
00013352 6000 CBBC                  		bra.w	MarkObjGone
00013356                            ; ===========================================================================
00013356                            
00013356                            Obj65_FixHeight:			; XREF: Obj65_Index
00013356 3038 F646                  		move.w	($FFFFF646).w,d0
0001335A 0440 0010                  		subi.w	#$10,d0
0001335E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013362 60E2                       		bra.s	Obj65_Animate
00013364                            ; ===========================================================================
00013364                            
00013364                            loc_12B36:				; XREF: Obj65_Index
00013364 08A8 0007 0002             		bclr	#7,2(a0)
0001336A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013370 6600                       		bne.s	Obj65_Animate2
00013372 08E8 0007 0002             		bset	#7,2(a0)
00013378                            
00013378                            Obj65_Animate2:
00013378 60CC                       		bra.s	Obj65_Animate
0001337A                            ; ===========================================================================
0001337A                            Ani_obj65:
0001337A                            	include "_anim\obj65.asm"
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            ; Animation script - waterfall (LZ)
0001337A                            ; ---------------------------------------------------------------------------
0001337A 0000                       		dc.w byte_12B4E-Ani_obj65
0001337C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013382 00                         		even
00013382 00                         		even
00013382                            
00013382                            ; ---------------------------------------------------------------------------
00013382                            ; Sprite mappings - waterfalls (LZ)
00013382                            ; ---------------------------------------------------------------------------
00013382                            Map_obj65:
00013382                            	include "_maps\obj65.asm"
00013382                            ; ---------------------------------------------------------------------------
00013382                            ; Sprite mappings - waterfalls (LZ)
00013382                            ; ---------------------------------------------------------------------------
00013382 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013386 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001338A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001338E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013392 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013396 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001339A 01                         byte_12B6C:	dc.b 1
0001339B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000133A0 02                         byte_12B72:	dc.b 2
000133A1 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000133A6 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000133AB 02                         byte_12B7D:	dc.b 2
000133AC F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133B1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133B6 01                         byte_12B88:	dc.b 1
000133B7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000133BC 02                         byte_12B8E:	dc.b 2
000133BD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133C2 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133C7 01                         byte_12B99:	dc.b 1
000133C8 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000133CD 01                         byte_12B9F:	dc.b 1
000133CE F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000133D3 01                         byte_12BA5:	dc.b 1
000133D4 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000133D9 02                         byte_12BAB:	dc.b 2
000133DA F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000133DF 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000133E4 02                         byte_12BB6:	dc.b 2
000133E5 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000133EA F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000133EF 02                         byte_12BC1:	dc.b 2
000133F0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000133F5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000133FA 02                         byte_12BCC:	dc.b 2
000133FB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013400 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013406 00                         		even
00013406 00                         		even
00013406                            
00013406                            ; ===========================================================================
00013406                            ; ---------------------------------------------------------------------------
00013406                            ; Object 01 - Sonic
00013406                            ; ---------------------------------------------------------------------------
00013406                            
00013406                            Obj01:					; XREF: Obj_Index
00013406 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001340A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001340C 4EF9 0000 0000             		jmp	DebugMode
00013412                            ; ===========================================================================
00013412                            
00013412                            Obj01_Normal:
00013412 7000                       		moveq	#0,d0
00013414 1028 0024                  		move.b	$24(a0),d0
00013418 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001341C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013420                            ; ===========================================================================
00013420 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013422 0000                       		dc.w Obj01_Control-Obj01_Index
00013424 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013426 0000                       		dc.w Obj01_Death-Obj01_Index
00013428 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001342A                            ; ===========================================================================
0001342A                            
0001342A                            Player_Maps:
0001342A 0000 0000                  	dc.l	Map_Sonic
0001342E 0000 0000                  	dc.l	Map_Sonic ; gronic
00013432 0000 0000                  	dc.l	Map_Sonic ; anakama
00013436 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
0001343A                            	; insert player mapping here
0001343A                            	
0001343A                            Obj01_Main:				; XREF: Obj01_Index
0001343A 5428 0024                  		addq.b	#2,$24(a0)
0001343E 117C 0013 0016             		move.b	#$13,$16(a0)
00013444 117C 0009 0017             		move.b	#9,$17(a0)
0001344A                            		
0001344A 7000                       		moveq	#0,d0
0001344C 1038 FFE8                  		move.b	(v_character),d0
00013450 E548                       		lsl.w	#2,d0
00013452 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013456 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
0001345C                            		
0001345C 317C 0780 0002             		move.w	#$780,2(a0)
00013462 117C 0002 0018             		move.b	#2,$18(a0)
00013468 117C 0018 0019             		move.b	#$18,$19(a0)
0001346E 117C 0004 0001             		move.b	#4,1(a0)
00013474 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001347A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013480 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013486                            
00013486                            Obj01_Control:				; XREF: Obj01_Index
00013486 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001348A 6700                       		beq.s	loc_12C58	; if not, branch
0001348C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013492 6700                       		beq.s	loc_12C58	; if not, branch
00013494 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001349A 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001349E 4E75                       		rts	
000134A0                            ; ===========================================================================
000134A0                            
000134A0                            loc_12C58:
000134A0 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000134A4 6600                       		bne.s	loc_12C64	; if yes, branch
000134A6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000134AC                            
000134AC                            loc_12C64:
000134AC 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000134B2 6600                       		bne.s	loc_12C7E	; if yes, branch
000134B4 7000                       		moveq	#0,d0
000134B6 1028 0022                  		move.b	$22(a0),d0
000134BA 0240 0006                  		andi.w	#6,d0
000134BE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000134C2 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000134C6                            
000134C6                            loc_12C7E:
000134C6 6100                       		bsr.s	Sonic_Display
000134C8 6100 0000                  		bsr.w	Sonic_RecordPos
000134CC 6100 0000                  		bsr.w	Sonic_Water
000134D0 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000134D6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000134DC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000134E0 6700                       		beq.s	loc_12CA6
000134E2 4A28 001C                  		tst.b	$1C(a0)
000134E6 6600                       		bne.s	loc_12CA6
000134E8 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000134EE                            
000134EE                            loc_12CA6:
000134EE 6100 0000                  		bsr.w	Sonic_Animate
000134F2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000134F6 6B00                       		bmi.s	loc_12CB6
000134F8 4EB9 0000 0000             		jsr	TouchResponse
000134FE                            
000134FE                            loc_12CB6:
000134FE 6100 0000                  		bsr.w	Sonic_Loops
00013502 6100 0000                  		bsr.w	LoadSonicDynPLC
00013506 4E75                       		rts	
00013508                            ; ===========================================================================
00013508 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001350A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001350C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001350E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013510                            ; ---------------------------------------------------------------------------
00013510                            ; Music	to play	after invincibility wears off
00013510                            ; ---------------------------------------------------------------------------
00013510                            ; ===========================================================================
00013510                            
00013510                            Sonic_Display:				; XREF: loc_12C7E
00013510 3028 0030                  		move.w	$30(a0),d0
00013514 6700                       		beq.s	Obj01_Display
00013516 5368 0030                  		subq.w	#1,$30(a0)
0001351A E648                       		lsr.w	#3,d0
0001351C 6400                       		bcc.s	Obj01_ChkInvin
0001351E                            
0001351E                            Obj01_Display:
0001351E 4EBA A948                  		jsr	DisplaySprite
00013522                            
00013522                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013522                             
00013522                            Obj01_ChkInvin:
00013522 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013526 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001352A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001352E 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013532 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013536 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001353A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001353E 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013542 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013548 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001354C 7000                       		moveq	#0,d0
0001354E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013552                             
00013552 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013558 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001355A 43F9 0000 3C88             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013560 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013562                             
00013562                            Obj01_GetBgm2:
00013562 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013568 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001356A 43F9 0000 3C90             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013570 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013572                             
00013572                            Obj01_GetBgm3:
00013572 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013578 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001357A 43F9 0000 3C96             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013580 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013582                             
00013582                            Obj01_GetBgm4:
00013582 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013588 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001358A 43F9 0000 3C9C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013590                             
00013590                            Obj01_PlayMusic:
00013590 1031 0000                  		move.b	(a1,d0.w),d0
00013594 4EB9 0000 15CC             		jsr	(PlaySound).l	; play normal music
0001359A                             
0001359A                            ; NineKode ends here.
0001359A                            
0001359A                            Obj01_RmvInvin:
0001359A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000135A0                            
000135A0                            Obj01_ChkShoes:
000135A0 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000135A4 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000135A6 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000135AA 6700                       		beq.s	Obj01_ExitChk
000135AC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000135B0 6600                       		bne.s	Obj01_ExitChk
000135B2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135B8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135BE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135C4 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000135CA 303C 00E3                  		move.w	#$E3,d0
000135CE 4EF9 0000 15CC             		jmp	(PlaySound).l	; run music at normal speed
000135D4                            ; ===========================================================================
000135D4                            
000135D4                            Obj01_ExitChk:
000135D4 4E75                       		rts	
000135D6                            
000135D6                            ; ---------------------------------------------------------------------------
000135D6                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000135D6                            ; ---------------------------------------------------------------------------
000135D6                            
000135D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135D6                            
000135D6                            
000135D6                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000135D6 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000135DA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000135DE 43F1 0000                  		lea	(a1,d0.w),a1
000135E2 32E8 0008                  		move.w	8(a0),(a1)+
000135E6 32E8 000C                  		move.w	$C(a0),(a1)+
000135EA 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000135EE 4E75                       		rts	
000135F0                            ; End of function Sonic_RecordPos
000135F0                            
000135F0                            ; ---------------------------------------------------------------------------
000135F0                            ; Subroutine for Sonic when he's underwater
000135F0                            ; ---------------------------------------------------------------------------
000135F0                            
000135F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135F0                            
000135F0                            
000135F0                            Sonic_Water:				; XREF: loc_12C7E
000135F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000135F6 6700                       		beq.s	Obj01_InWater	; if yes, branch
000135F8                            
000135F8                            locret_12D80:
000135F8 4E75                       		rts	
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            Obj01_InWater:
000135FA 3038 F646                  		move.w	($FFFFF646).w,d0
000135FE B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013602 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013604 08E8 0006 0022             		bset	#6,$22(a0)
0001360A 66EC                       		bne.s	locret_12D80
0001360C 6100 0000                  		bsr.w	ResumeMusic
00013610 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013616 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001361C 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013622 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013628 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001362E E0E8 0010                  		asr	$10(a0)
00013632 E0E8 0012                  		asr	$12(a0)
00013636 E0E8 0012                  		asr	$12(a0)
0001363A 67BC                       		beq.s	locret_12D80
0001363C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013642 303C 00AA                  		move.w	#$AA,d0
00013646 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
0001364C                            ; ===========================================================================
0001364C                            
0001364C                            Obj01_OutWater:
0001364C 08A8 0006 0022             		bclr	#6,$22(a0)
00013652 67A4                       		beq.s	locret_12D80
00013654 6100 0000                  		bsr.w	ResumeMusic
00013658 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001365E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013664 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001366A E1E8 0012                  		asl	$12(a0)
0001366E 6700 FF88                  		beq.w	locret_12D80
00013672 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013678 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001367E 6E00                       		bgt.s	loc_12E0E
00013680 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013686                            
00013686                            loc_12E0E:
00013686 303C 00AA                  		move.w	#$AA,d0
0001368A 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
00013690                            ; End of function Sonic_Water
00013690                            
00013690                            ; ===========================================================================
00013690                            ; ---------------------------------------------------------------------------
00013690                            ; Modes	for controlling	Sonic
00013690                            ; ---------------------------------------------------------------------------
00013690                            
00013690                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013690 6100 0000                  		bsr.w	Sonic_Jump
00013694 6100 0000                  		bsr.w	Sonic_SlopeResist
00013698 6100 0000                  		bsr.w	Sonic_Move
0001369C 6100 0000                  		bsr.w	Sonic_Roll
000136A0 6100 0000                  		bsr.w	Sonic_LevelBound
000136A4 4EBA A79C                  		jsr	SpeedToPos
000136A8 6100 0000                  		bsr.w	Sonic_AnglePos
000136AC 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136B0 4E75                       		rts	
000136B2                            ; ===========================================================================
000136B2                            
000136B2                            Obj01_MdJump:				; XREF: Obj01_Modes
000136B2 6100 0000                  		bsr.w	Sonic_JumpHeight
000136B6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000136BA 6100 0000                  		bsr.w	Sonic_LevelBound
000136BE 4EBA A710                  		jsr	ObjectFall
000136C2 0828 0006 0022             		btst	#6,$22(a0)
000136C8 6700                       		beq.s	loc_12E5C
000136CA 0468 0028 0012             		subi.w	#$28,$12(a0)
000136D0                            
000136D0                            loc_12E5C:
000136D0 6100 0000                  		bsr.w	Sonic_JumpAngle
000136D4 6100 0000                  		bsr.w	Sonic_Floor
000136D8 4E75                       		rts	
000136DA                            ; ===========================================================================
000136DA                            
000136DA                            Obj01_MdRoll:				; XREF: Obj01_Modes
000136DA 6100 0000                  		bsr.w	Sonic_Jump
000136DE 6100 0000                  		bsr.w	Sonic_RollRepel
000136E2 6100 0000                  		bsr.w	Sonic_RollSpeed
000136E6 6100 0000                  		bsr.w	Sonic_LevelBound
000136EA 4EBA A756                  		jsr	SpeedToPos
000136EE 6100 0000                  		bsr.w	Sonic_AnglePos
000136F2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136F6 4E75                       		rts	
000136F8                            ; ===========================================================================
000136F8                            
000136F8                            Obj01_MdJump2:				; XREF: Obj01_Modes
000136F8 6100 0000                  		bsr.w	Sonic_JumpHeight
000136FC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013700 6100 0000                  		bsr.w	Sonic_LevelBound
00013704 6100 0000                  		bsr.w	Sonic_AirUnroll
00013708 4EBA A6C6                  		jsr	ObjectFall
0001370C 0828 0006 0022             		btst	#6,$22(a0)
00013712 6700                       		beq.s	loc_12EA6
00013714 0468 0028 0012             		subi.w	#$28,$12(a0)
0001371A                            
0001371A                            loc_12EA6:
0001371A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001371E 6100 0000                  		bsr.w	Sonic_Floor
00013722 4E75                       		rts	
00013724                            ; ---------------------------------------------------------------------------
00013724                            ; Subroutine to	make Sonic walk/run
00013724                            ; ---------------------------------------------------------------------------
00013724                            
00013724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013724                            
00013724                            
00013724                            Sonic_Move:				; XREF: Obj01_MdNormal
00013724 3C38 F760                  		move.w	($FFFFF760).w,d6
00013728 3A38 F762                  		move.w	($FFFFF762).w,d5
0001372C 3838 F764                  		move.w	($FFFFF764).w,d4
00013730 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013734 6600 0000                  		bne.w	loc_12FEE
00013738 4A68 003E                  		tst.w	$3E(a0)
0001373C 6600 0000                  		bne.w	Obj01_ResetScr
00013740 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013746 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013748 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001374E 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013750 6100 0000                  		bsr.w	Sonic_MoveLeft
00013754                            
00013754                            Obj01_NotLeft:
00013754 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001375A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001375C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013762 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013764 6100 0000                  		bsr.w	Sonic_MoveLeft
00013768 6000                       		bra.s	Obj01_NotRight
0001376A                            
0001376A                            Obj01_MoveRight:
0001376A 6100 0000                  		bsr.w	Sonic_MoveRight
0001376E                            
0001376E                            Obj01_NotRight:
0001376E 1028 0026                  		move.b	$26(a0),d0
00013772 0600 0020                  		addi.b	#$20,d0
00013776 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001377A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001377E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013782 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013786 08A8 0005 0022             		bclr	#5,$22(a0)
0001378C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013792 0828 0003 0022             		btst	#3,$22(a0)
00013798 6700                       		beq.s	Sonic_Balance
0001379A 7000                       		moveq	#0,d0
0001379C 1028 003D                  		move.b	$3D(a0),d0
000137A0 ED48                       		lsl.w	#6,d0
000137A2 43F8 D000                  		lea	($FFFFD000).w,a1
000137A6 43F1 0000                  		lea	(a1,d0.w),a1
000137AA 4A29 0022                  		tst.b	$22(a1)
000137AE 6B00                       		bmi.s	Sonic_LookUp
000137B0 7200                       		moveq	#0,d1
000137B2 1229 0019                  		move.b	$19(a1),d1
000137B6 3401                       		move.w	d1,d2
000137B8 D442                       		add.w	d2,d2
000137BA 5942                       		subq.w	#4,d2
000137BC D268 0008                  		add.w	8(a0),d1
000137C0 9269 0008                  		sub.w	8(a1),d1
000137C4 0C41 0004                  		cmpi.w	#4,d1
000137C8 6D00                       		blt.s	loc_12F6A
000137CA B242                       		cmp.w	d2,d1
000137CC 6C00                       		bge.s	loc_12F5A
000137CE 6000                       		bra.s	Sonic_LookUp
000137D0                            ; ===========================================================================
000137D0                            
000137D0                            Sonic_Balance:
000137D0 4EB9 0000 0000             		jsr	ObjHitFloor
000137D6 0C41 000C                  		cmpi.w	#$C,d1
000137DA 6D00                       		blt.s	Sonic_LookUp
000137DC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000137E2 6600                       		bne.s	loc_12F62
000137E4                            
000137E4                            loc_12F5A:
000137E4 08A8 0000 0022             		bclr	#0,$22(a0)
000137EA 6000                       		bra.s	loc_12F70
000137EC                            ; ===========================================================================
000137EC                            
000137EC                            loc_12F62:
000137EC 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000137F2 6600                       		bne.s	Sonic_LookUp
000137F4                            
000137F4                            loc_12F6A:
000137F4 08E8 0000 0022             		bset	#0,$22(a0)
000137FA                            
000137FA                            loc_12F70:
000137FA 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013800 6000                       		bra.s	Obj01_ResetScr
00013802                            ; ===========================================================================
00013802                            
00013802                            Sonic_LookUp:
00013802 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013808 6700                       		beq.s	Sonic_Duck	; if not, branch
0001380A 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013810 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013816 6700                       		beq.s	loc_12FC2
00013818 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001381C 6000                       		bra.s	loc_12FC2
0001381E                            ; ===========================================================================
0001381E                            
0001381E                            Sonic_Duck:
0001381E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013824 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013826 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001382C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013832 6700                       		beq.s	loc_12FC2
00013834 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013838 6000                       		bra.s	loc_12FC2
0001383A                            ; ===========================================================================
0001383A                            
0001383A                            Obj01_ResetScr:
0001383A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013840 6700                       		beq.s	loc_12FC2	; if yes, branch
00013842 6400                       		bcc.s	loc_12FBE
00013844 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013848                            
00013848                            loc_12FBE:
00013848 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001384C                            
0001384C                            loc_12FC2:
0001384C 1038 F602                  		move.b	($FFFFF602).w,d0
00013850 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013854 6600                       		bne.s	loc_12FEE	; if yes, branch
00013856 3028 0014                  		move.w	$14(a0),d0
0001385A 6700                       		beq.s	loc_12FEE
0001385C 6B00                       		bmi.s	loc_12FE2
0001385E 9045                       		sub.w	d5,d0
00013860 6400                       		bcc.s	loc_12FDC
00013862 303C 0000                  		move.w	#0,d0
00013866                            
00013866                            loc_12FDC:
00013866 3140 0014                  		move.w	d0,$14(a0)
0001386A 6000                       		bra.s	loc_12FEE
0001386C                            ; ===========================================================================
0001386C                            
0001386C                            loc_12FE2:
0001386C D045                       		add.w	d5,d0
0001386E 6400                       		bcc.s	loc_12FEA
00013870 303C 0000                  		move.w	#0,d0
00013874                            
00013874                            loc_12FEA:
00013874 3140 0014                  		move.w	d0,$14(a0)
00013878                            
00013878                            loc_12FEE:
00013878 1028 0026                  		move.b	$26(a0),d0
0001387C 4EB9 0000 2D02             		jsr	(CalcSine).l
00013882 C3E8 0014                  		muls.w	$14(a0),d1
00013886 E081                       		asr.l	#8,d1
00013888 3141 0010                  		move.w	d1,$10(a0)
0001388C C1E8 0014                  		muls.w	$14(a0),d0
00013890 E080                       		asr.l	#8,d0
00013892 3140 0012                  		move.w	d0,$12(a0)
00013896                            
00013896                            loc_1300C:
00013896 1028 0026                  		move.b	$26(a0),d0
0001389A 0600 0040                  		addi.b	#$40,d0
0001389E 6B00                       		bmi.s	locret_1307C
000138A0 123C 0040                  		move.b	#$40,d1
000138A4 4A68 0014                  		tst.w	$14(a0)
000138A8 6700                       		beq.s	locret_1307C
000138AA 6B00                       		bmi.s	loc_13024
000138AC 4441                       		neg.w	d1
000138AE                            
000138AE                            loc_13024:
000138AE 1028 0026                  		move.b	$26(a0),d0
000138B2 D001                       		add.b	d1,d0
000138B4 3F00                       		move.w	d0,-(sp)
000138B6 6100 0000                  		bsr.w	Sonic_WalkSpeed
000138BA 301F                       		move.w	(sp)+,d0
000138BC 4A41                       		tst.w	d1
000138BE 6A00                       		bpl.s	locret_1307C
000138C0 E141                       		asl.w	#8,d1
000138C2 0600 0020                  		addi.b	#$20,d0
000138C6 0200 00C0                  		andi.b	#$C0,d0
000138CA 6700                       		beq.s	loc_13078
000138CC 0C00 0040                  		cmpi.b	#$40,d0
000138D0 6700                       		beq.s	loc_13066
000138D2 0C00 0080                  		cmpi.b	#$80,d0
000138D6 6700                       		beq.s	loc_13060
000138D8 D368 0010                  		add.w	d1,$10(a0)
000138DC 08E8 0005 0022             		bset	#5,$22(a0)
000138E2 317C 0000 0014             		move.w	#0,$14(a0)
000138E8 4E75                       		rts	
000138EA                            ; ===========================================================================
000138EA                            
000138EA                            loc_13060:
000138EA 9368 0012                  		sub.w	d1,$12(a0)
000138EE 4E75                       		rts	
000138F0                            ; ===========================================================================
000138F0                            
000138F0                            loc_13066:
000138F0 9368 0010                  		sub.w	d1,$10(a0)
000138F4 08E8 0005 0022             		bset	#5,$22(a0)
000138FA 317C 0000 0014             		move.w	#0,$14(a0)
00013900 4E75                       		rts	
00013902                            ; ===========================================================================
00013902                            
00013902                            loc_13078:
00013902 D368 0012                  		add.w	d1,$12(a0)
00013906                            
00013906                            locret_1307C:
00013906 4E75                       		rts	
00013908                            ; End of function Sonic_Move
00013908                            
00013908                            
00013908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013908                            
00013908                            
00013908                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013908 3028 0014                  		move.w	$14(a0),d0
0001390C 6700                       		beq.s	loc_13086
0001390E 6A00                       		bpl.s	loc_130B2
00013910                            
00013910                            loc_13086:
00013910 08E8 0000 0022             		bset	#0,$22(a0)
00013916 6600                       		bne.s	loc_1309A
00013918 08A8 0005 0022             		bclr	#5,$22(a0)
0001391E 117C 0001 001D             		move.b	#1,$1D(a0)
00013924                            
00013924                            loc_1309A:
00013924 9045                       		sub.w	d5,d0
00013926 3206                       		move.w	d6,d1
00013928 4441                       		neg.w	d1
0001392A B041                       		cmp.w	d1,d0
0001392C 6E00                       		bgt.s	loc_130A6
0001392E 3001                       		move.w	d1,d0
00013930                            
00013930                            loc_130A6:
00013930 3140 0014                  		move.w	d0,$14(a0)
00013934 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001393A 4E75                       		rts	
0001393C                            ; ===========================================================================
0001393C                            
0001393C                            loc_130B2:				; XREF: Sonic_MoveLeft
0001393C 9044                       		sub.w	d4,d0
0001393E 6400                       		bcc.s	loc_130BA
00013940 303C FF80                  		move.w	#-$80,d0
00013944                            
00013944                            loc_130BA:
00013944 3140 0014                  		move.w	d0,$14(a0)
00013948 1028 0026                  		move.b	$26(a0),d0
0001394C 0600 0020                  		addi.b	#$20,d0
00013950 0200 00C0                  		andi.b	#$C0,d0
00013954 6600                       		bne.s	locret_130E8
00013956 0C40 0400                  		cmpi.w	#$400,d0
0001395A 6D00                       		blt.s	locret_130E8
0001395C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013962 08A8 0000 0022             		bclr	#0,$22(a0)
00013968 303C 00A4                  		move.w	#$A4,d0
0001396C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013972                            
00013972                            locret_130E8:
00013972 4E75                       		rts	
00013974                            ; End of function Sonic_MoveLeft
00013974                            
00013974                            
00013974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013974                            
00013974                            
00013974                            Sonic_MoveRight:			; XREF: Sonic_Move
00013974 3028 0014                  		move.w	$14(a0),d0
00013978 6B00                       		bmi.s	loc_13118
0001397A 08A8 0000 0022             		bclr	#0,$22(a0)
00013980 6700                       		beq.s	loc_13104
00013982 08A8 0005 0022             		bclr	#5,$22(a0)
00013988 117C 0001 001D             		move.b	#1,$1D(a0)
0001398E                            
0001398E                            loc_13104:
0001398E D045                       		add.w	d5,d0
00013990 B046                       		cmp.w	d6,d0
00013992 6D00                       		blt.s	loc_1310C
00013994 3006                       		move.w	d6,d0
00013996                            
00013996                            loc_1310C:
00013996 3140 0014                  		move.w	d0,$14(a0)
0001399A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000139A0 4E75                       		rts	
000139A2                            ; ===========================================================================
000139A2                            
000139A2                            loc_13118:				; XREF: Sonic_MoveRight
000139A2 D044                       		add.w	d4,d0
000139A4 6400                       		bcc.s	loc_13120
000139A6 303C 0080                  		move.w	#$80,d0
000139AA                            
000139AA                            loc_13120:
000139AA 3140 0014                  		move.w	d0,$14(a0)
000139AE 1028 0026                  		move.b	$26(a0),d0
000139B2 0600 0020                  		addi.b	#$20,d0
000139B6 0200 00C0                  		andi.b	#$C0,d0
000139BA 6600                       		bne.s	locret_1314E
000139BC 0C40 FC00                  		cmpi.w	#-$400,d0
000139C0 6E00                       		bgt.s	locret_1314E
000139C2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000139C8 08E8 0000 0022             		bset	#0,$22(a0)
000139CE 303C 00A4                  		move.w	#$A4,d0
000139D2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
000139D8                            
000139D8                            locret_1314E:
000139D8 4E75                       		rts	
000139DA                            ; End of function Sonic_MoveRight
000139DA                            
000139DA                            ; ---------------------------------------------------------------------------
000139DA                            ; Subroutine to	change Sonic's speed as he rolls
000139DA                            ; ---------------------------------------------------------------------------
000139DA                            
000139DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139DA                            
000139DA                            
000139DA                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000139DA 3C38 F760                  		move.w	($FFFFF760).w,d6
000139DE E346                       		asl.w	#1,d6
000139E0 3A38 F762                  		move.w	($FFFFF762).w,d5
000139E4 E245                       		asr.w	#1,d5
000139E6 3838 F764                  		move.w	($FFFFF764).w,d4
000139EA E444                       		asr.w	#2,d4
000139EC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000139F0 6600 0000                  		bne.w	loc_131CC
000139F4 4A68 003E                  		tst.w	$3E(a0)
000139F8 6600                       		bne.s	loc_13188
000139FA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A00 6700                       		beq.s	loc_1317C	; if not, branch
00013A02 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A08 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013A0A 6100 0000                  		bsr.w	Sonic_RollLeft
00013A0E                            
00013A0E                            loc_1317C:
00013A0E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A14 6700                       		beq.s	loc_13188	; if not, branch
00013A16 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A1C 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013A1E 6100 0000                  		bsr.w	Sonic_RollLeft
00013A22 6000                       		bra.s	loc_13188
00013A24                            
00013A24                            SonicRS_RollRight:
00013A24 6100 0000                  		bsr.w	Sonic_RollRight
00013A28                            
00013A28                            loc_13188:
00013A28 3028 0014                  		move.w	$14(a0),d0
00013A2C 6700                       		beq.s	loc_131AA
00013A2E 6B00                       		bmi.s	loc_1319E
00013A30 9045                       		sub.w	d5,d0
00013A32 6400                       		bcc.s	loc_13198
00013A34 303C 0000                  		move.w	#0,d0
00013A38                            
00013A38                            loc_13198:
00013A38 3140 0014                  		move.w	d0,$14(a0)
00013A3C 6000                       		bra.s	loc_131AA
00013A3E                            ; ===========================================================================
00013A3E                            
00013A3E                            loc_1319E:				; XREF: Sonic_RollSpeed
00013A3E D045                       		add.w	d5,d0
00013A40 6400                       		bcc.s	loc_131A6
00013A42 303C 0000                  		move.w	#0,d0
00013A46                            
00013A46                            loc_131A6:
00013A46 3140 0014                  		move.w	d0,$14(a0)
00013A4A                            
00013A4A                            loc_131AA:
00013A4A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A4E 6600                       		bne.s	loc_131CC	; if yes, branch
00013A50 08A8 0002 0022             		bclr	#2,$22(a0)
00013A56 117C 0013 0016             		move.b	#$13,$16(a0)
00013A5C 117C 0009 0017             		move.b	#9,$17(a0)
00013A62 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A68 5B68 000C                  		subq.w	#5,$C(a0)
00013A6C                            
00013A6C                            loc_131CC:
00013A6C 1028 0026                  		move.b	$26(a0),d0
00013A70 4EB9 0000 2D02             		jsr	(CalcSine).l
00013A76 C1E8 0014                  		muls.w	$14(a0),d0
00013A7A E080                       		asr.l	#8,d0
00013A7C 3140 0012                  		move.w	d0,$12(a0)
00013A80 C3E8 0014                  		muls.w	$14(a0),d1
00013A84 E081                       		asr.l	#8,d1
00013A86 0C41 1000                  		cmpi.w	#$1000,d1
00013A8A 6F00                       		ble.s	loc_131F0
00013A8C 323C 1000                  		move.w	#$1000,d1
00013A90                            
00013A90                            loc_131F0:
00013A90 0C41 F000                  		cmpi.w	#-$1000,d1
00013A94 6C00                       		bge.s	loc_131FA
00013A96 323C F000                  		move.w	#-$1000,d1
00013A9A                            
00013A9A                            loc_131FA:
00013A9A 3141 0010                  		move.w	d1,$10(a0)
00013A9E 6000 FDF6                  		bra.w	loc_1300C
00013AA2                            ; End of function Sonic_RollSpeed
00013AA2                            
00013AA2                            
00013AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AA2                            
00013AA2                            
00013AA2                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013AA2 3028 0014                  		move.w	$14(a0),d0
00013AA6 6700                       		beq.s	loc_1320A
00013AA8 6A00                       		bpl.s	loc_13218
00013AAA                            
00013AAA                            loc_1320A:
00013AAA 08E8 0000 0022             		bset	#0,$22(a0)
00013AB0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AB6 4E75                       		rts	
00013AB8                            ; ===========================================================================
00013AB8                            
00013AB8                            loc_13218:
00013AB8 9044                       		sub.w	d4,d0
00013ABA 6400                       		bcc.s	loc_13220
00013ABC 303C FF80                  		move.w	#-$80,d0
00013AC0                            
00013AC0                            loc_13220:
00013AC0 3140 0014                  		move.w	d0,$14(a0)
00013AC4 4E75                       		rts	
00013AC6                            ; End of function Sonic_RollLeft
00013AC6                            
00013AC6                            
00013AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC6                            
00013AC6                            
00013AC6                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013AC6 3028 0014                  		move.w	$14(a0),d0
00013ACA 6B00                       		bmi.s	loc_1323A
00013ACC 08A8 0000 0022             		bclr	#0,$22(a0)
00013AD2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AD8 4E75                       		rts	
00013ADA                            ; ===========================================================================
00013ADA                            
00013ADA                            loc_1323A:
00013ADA D044                       		add.w	d4,d0
00013ADC 6400                       		bcc.s	loc_13242
00013ADE 303C 0080                  		move.w	#$80,d0
00013AE2                            
00013AE2                            loc_13242:
00013AE2 3140 0014                  		move.w	d0,$14(a0)
00013AE6 4E75                       		rts	
00013AE8                            ; End of function Sonic_RollRight
00013AE8                            
00013AE8                            Sonic_AirUnroll:
00013AE8                            		
00013AE8 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013AEC 6600                       		bne.s	@timer
00013AEE 1038 F605                  		move.b	($FFFFF605).w,d0
00013AF2 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013AF6 6700                       		beq.s	@end	; if not, branch
00013AF8 08A8 0002 0022             		bclr	#2,$22(a0)
00013AFE 117C 0013 0016             		move.b	#$13,$16(a0)
00013B04 117C 0009 0017             		move.b	#9,$17(a0)
00013B0A 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013B10 303C 00A5                  		move.w	#$A5,d0
00013B14 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play fart sound
00013B1A 2028 0010                  		move.l	$10(a0),d0
00013B1E D080                       		add.l	d0,d0
00013B20 2140 0010                  		move.l	d0,$10(a0)
00013B24 5B68 000C                  		subq.w	#5,$C(a0)
00013B28                            	@end:
00013B28 4E75                       		rts
00013B2A                            	@timer:
00013B2A 5328 003A                  		subq.b	#1,$3A(a0)
00013B2E 4E75                       		rts
00013B30                            
00013B30                            ; ---------------------------------------------------------------------------
00013B30                            ; Subroutine to	change Sonic's direction while jumping
00013B30                            ; ---------------------------------------------------------------------------
00013B30                            
00013B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B30                            
00013B30                            
00013B30                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B30 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B34 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B38 E345                       		asl.w	#1,d5
00013B3A 0828 0004 0022             		btst	#4,$22(a0)
00013B40 6600                       		bne.s	Obj01_ResetScr2
00013B42 3028 0010                  		move.w	$10(a0),d0
00013B46 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B4C 6700                       		beq.s	loc_13278	; if not, branch
00013B4E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B54 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013B56 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B5A 6E00                       		bgt.s	loc_13278
00013B5C 3001                       		move.w	d1,d0
00013B5E                            
00013B5E                            loc_13278:
00013B5E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B64 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013B66 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B6C 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B6E 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B72 6E00                       		bgt.s	Obj01_JumpMove
00013B74 3001                       		move.w	d1,d0
00013B76 6000                       		bra.s	Obj01_JumpMove
00013B78                            
00013B78                            SonicCJD_JumpLeft:
00013B78 08E8 0000 0022             		bset	#0,$22(a0)
00013B7E 9045                       		sub.w	d5,d0
00013B80 3206                       		move.w	d6,d1
00013B82 4441                       		neg.w	d1
00013B84 B041                       		cmp.w	d1,d0
00013B86                            		; bgt.s	loc_13278
00013B86                            		; move.w	d1,d0
00013B86 4E75                       		rts
00013B88                            
00013B88                            SonicCJD_JumpRight:
00013B88 08A8 0000 0022             		bclr	#0,$22(a0)
00013B8E D045                       		add.w	d5,d0
00013B90 B046                       		cmp.w	d6,d0
00013B92 6D00                       		blt.s	Obj01_JumpMove
00013B94 3006                       		move.w	d6,d0
00013B96                            
00013B96                            Obj01_JumpMove:
00013B96 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013B9A                            
00013B9A                            Obj01_ResetScr2:
00013B9A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013BA0 6700                       		beq.s	loc_132A4	; if yes, branch
00013BA2 6400                       		bcc.s	loc_132A0
00013BA4 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013BA8                            
00013BA8                            loc_132A0:
00013BA8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013BAC                            
00013BAC                            loc_132A4:
00013BAC 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013BB2 6500                       		bcs.s	locret_132D2	; if yes, branch
00013BB4 3028 0010                  		move.w	$10(a0),d0
00013BB8 3200                       		move.w	d0,d1
00013BBA EA41                       		asr.w	#5,d1
00013BBC 6700                       		beq.s	locret_132D2
00013BBE 6B00                       		bmi.s	loc_132C6
00013BC0 9041                       		sub.w	d1,d0
00013BC2 6400                       		bcc.s	loc_132C0
00013BC4 303C 0000                  		move.w	#0,d0
00013BC8                            
00013BC8                            loc_132C0:
00013BC8 3140 0010                  		move.w	d0,$10(a0)
00013BCC 4E75                       		rts	
00013BCE                            ; ===========================================================================
00013BCE                            
00013BCE                            loc_132C6:
00013BCE 9041                       		sub.w	d1,d0
00013BD0 6500                       		bcs.s	loc_132CE
00013BD2 303C 0000                  		move.w	#0,d0
00013BD6                            
00013BD6                            loc_132CE:
00013BD6 3140 0010                  		move.w	d0,$10(a0)
00013BDA                            
00013BDA                            locret_132D2:
00013BDA 4E75                       		rts	
00013BDC                            ; End of function Sonic_ChgJumpDir
00013BDC                            
00013BDC                            ; ===========================================================================
00013BDC                            ; ---------------------------------------------------------------------------
00013BDC                            ; Unused subroutine to squash Sonic
00013BDC                            ; ---------------------------------------------------------------------------
00013BDC 1028 0026                  		move.b	$26(a0),d0
00013BE0 0600 0020                  		addi.b	#$20,d0
00013BE4 0200 00C0                  		andi.b	#$C0,d0
00013BE8 6600                       		bne.s	locret_13302
00013BEA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013BEE 4A41                       		tst.w	d1
00013BF0 6A00                       		bpl.s	locret_13302
00013BF2 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013BF8 317C 0000 0010             		move.w	#0,$10(a0)
00013BFE 317C 0000 0012             		move.w	#0,$12(a0)
00013C04 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013C0A                            
00013C0A                            locret_13302:
00013C0A 4E75                       		rts	
00013C0C                            ; ---------------------------------------------------------------------------
00013C0C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013C0C                            ; ---------------------------------------------------------------------------
00013C0C                            
00013C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C0C                            
00013C0C                            
00013C0C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013C0C 2228 0008                  		move.l	8(a0),d1
00013C10 3028 0010                  		move.w	$10(a0),d0
00013C14 48C0                       		ext.l	d0
00013C16 E180                       		asl.l	#8,d0
00013C18 D280                       		add.l	d0,d1
00013C1A 4841                       		swap	d1
00013C1C 3038 F728                  		move.w	($FFFFF728).w,d0
00013C20 0640 0010                  		addi.w	#$10,d0
00013C24 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C26 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013C28 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013C2C 0640 0128                  		addi.w	#$128,d0
00013C30 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013C34 6600                       		bne.s	loc_13332
00013C36 0640 0040                  		addi.w	#$40,d0
00013C3A                            
00013C3A                            loc_13332:
00013C3A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C3C 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013C3E                            
00013C3E                            loc_13336:
00013C3E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013C42 0640 00E0                  		addi.w	#$E0,d0
00013C46 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013C4A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013C4C 4E75                       		rts	
00013C4E                            ; ===========================================================================
00013C4E                            
00013C4E                            Boundary_Bottom:
00013C4E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013C54 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013C58 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013C5E 6500 0000                  		bcs.w	KillSonic
00013C62 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013C66 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013C6C 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C72 4E75                       		rts	
00013C74                            ; ===========================================================================
00013C74                            
00013C74                            Boundary_Sides:
00013C74 3140 0008                  		move.w	d0,8(a0)
00013C78 317C 0000 000A             		move.w	#0,$A(a0)
00013C7E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013C84 317C 0000 0014             		move.w	#0,$14(a0)
00013C8A 60B2                       		bra.s	loc_13336
00013C8C                            ; End of function Sonic_LevelBound
00013C8C                            
00013C8C                            ; ---------------------------------------------------------------------------
00013C8C                            ; Subroutine allowing Sonic to roll when he's moving
00013C8C                            ; ---------------------------------------------------------------------------
00013C8C                            
00013C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C8C                            
00013C8C                            
00013C8C                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013C8C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013C90 6600                       		bne.s	Obj01_NoRoll
00013C92 3028 0014                  		move.w	$14(a0),d0
00013C96 6A00                       		bpl.s	loc_13392
00013C98 4440                       		neg.w	d0
00013C9A                            
00013C9A                            loc_13392:
00013C9A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013C9E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013CA0 1038 F602                  		move.b	($FFFFF602).w,d0
00013CA4 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013CA8 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013CAA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013CB0 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013CB2                            
00013CB2                            Obj01_NoRoll:
00013CB2 4E75                       		rts	
00013CB4                            ; ===========================================================================
00013CB4                            
00013CB4                            Obj01_ChkRoll:
00013CB4 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013CBA 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013CBC 4E75                       		rts	
00013CBE                            ; ===========================================================================
00013CBE                            
00013CBE                            Obj01_DoRoll:
00013CBE 08E8 0002 0022             		bset	#2,$22(a0)
00013CC4 117C 000E 0016             		move.b	#$E,$16(a0)
00013CCA 117C 0007 0017             		move.b	#7,$17(a0)
00013CD0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CD6 5A68 000C                  		addq.w	#5,$C(a0)
00013CDA 303C 00BE                  		move.w	#$BE,d0
00013CDE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rolling sound
00013CE4 4A68 0014                  		tst.w	$14(a0)
00013CE8 6600                       		bne.s	locret_133E8
00013CEA 317C 0200 0014             		move.w	#$200,$14(a0)
00013CF0                            
00013CF0                            locret_133E8:
00013CF0 4E75                       		rts	
00013CF2                            ; End of function Sonic_Roll
00013CF2                            
00013CF2                            ; ---------------------------------------------------------------------------
00013CF2                            ; Subroutine allowing Sonic to jump
00013CF2                            ; ---------------------------------------------------------------------------
00013CF2                            
00013CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CF2                            
00013CF2                            
00013CF2                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013CF2 1038 F603                  		move.b	($FFFFF603).w,d0
00013CF6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013CFA 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013CFE 7000                       		moveq	#0,d0
00013D00 1028 0026                  		move.b	$26(a0),d0
00013D04 0600 0080                  		addi.b	#$80,d0
00013D08 6100 0000                  		bsr.w	sub_14D48
00013D0C 0C41 0006                  		cmpi.w	#6,d1
00013D10 6D00 0000                  		blt.w	locret_1348E
00013D14 343C 0680                  		move.w	#$680,d2
00013D18 0828 0006 0022             		btst	#6,$22(a0)
00013D1E 6700                       		beq.s	loc_1341C
00013D20 343C 0380                  		move.w	#$380,d2
00013D24                            
00013D24                            loc_1341C:
00013D24 7000                       		moveq	#0,d0
00013D26 1028 0026                  		move.b	$26(a0),d0
00013D2A 0400 0040                  		subi.b	#$40,d0
00013D2E 4EB9 0000 2D02             		jsr	(CalcSine).l
00013D34 C3C2                       		muls.w	d2,d1
00013D36 E081                       		asr.l	#8,d1
00013D38 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013D3C C1C2                       		muls.w	d2,d0
00013D3E E080                       		asr.l	#8,d0
00013D40 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013D44 08E8 0001 0022             		bset	#1,$22(a0)
00013D4A 08A8 0005 0022             		bclr	#5,$22(a0)
00013D50 588F                       		addq.l	#4,sp
00013D52 117C 0001 003C             		move.b	#1,$3C(a0)
00013D58 4228 0038                  		clr.b	$38(a0)
00013D5C 303C 00A0                  		move.w	#$A0,d0
00013D60 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
00013D66 117C 0013 0016             		move.b	#$13,$16(a0)
00013D6C 117C 0009 0017             		move.b	#9,$17(a0)
00013D72 0828 0002 0022             		btst	#2,$22(a0)
00013D78 6600                       		bne.s	loc_13490
00013D7A 117C 000E 0016             		move.b	#$E,$16(a0)
00013D80 117C 0007 0017             		move.b	#7,$17(a0)
00013D86 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013D8C 08E8 0002 0022             		bset	#2,$22(a0)
00013D92 5A68 000C                  		addq.w	#5,$C(a0)
00013D96 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013D9C                            
00013D9C                            locret_1348E:
00013D9C 4E75                       		rts	
00013D9E                            ; ===========================================================================
00013D9E                            
00013D9E                            loc_13490:
00013D9E 08E8 0004 0022             		bset	#4,$22(a0)
00013DA4 4E75                       		rts	
00013DA6                            ; End of function Sonic_Jump
00013DA6                            
00013DA6                            
00013DA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA6                            
00013DA6                            
00013DA6                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013DA6 4A28 003C                  		tst.b	$3C(a0)
00013DAA 6700                       		beq.s	loc_134C4
00013DAC 323C FC00                  		move.w	#-$400,d1
00013DB0 0828 0006 0022             		btst	#6,$22(a0)
00013DB6 6700                       		beq.s	loc_134AE
00013DB8 323C FE00                  		move.w	#-$200,d1
00013DBC                            
00013DBC                            loc_134AE:
00013DBC B268 0012                  		cmp.w	$12(a0),d1
00013DC0 6F00                       		ble.s	locret_134C2
00013DC2 1038 F602                  		move.b	($FFFFF602).w,d0
00013DC6 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013DCA 6600                       		bne.s	locret_134C2	; if yes, branch
00013DCC 3141 0012                  		move.w	d1,$12(a0)
00013DD0                            
00013DD0                            locret_134C2:
00013DD0 4E75                       		rts	
00013DD2                            ; ===========================================================================
00013DD2                            
00013DD2                            loc_134C4:
00013DD2 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013DD8 6C00                       		bge.s	locret_134D2
00013DDA 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013DE0                            
00013DE0                            locret_134D2:
00013DE0 4E75                       		rts	
00013DE2                            ; End of function Sonic_JumpHeight
00013DE2                            
00013DE2                            ; ---------------------------------------------------------------------------
00013DE2                            ; Subroutine to	slow Sonic walking up a	slope
00013DE2                            ; ---------------------------------------------------------------------------
00013DE2                            
00013DE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE2                            
00013DE2                            
00013DE2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013DE2 1028 0026                  		move.b	$26(a0),d0
00013DE6 0600 0060                  		addi.b	#$60,d0
00013DEA 0C00 00C0                  		cmpi.b	#$C0,d0
00013DEE 6400                       		bcc.s	locret_13508
00013DF0 1028 0026                  		move.b	$26(a0),d0
00013DF4 4EB9 0000 2D02             		jsr	(CalcSine).l
00013DFA C1FC 0020                  		muls.w	#$20,d0
00013DFE E080                       		asr.l	#8,d0
00013E00 4A68 0014                  		tst.w	$14(a0)
00013E04 6700                       		beq.s	locret_13508
00013E06 6B00                       		bmi.s	loc_13504
00013E08 4A40                       		tst.w	d0
00013E0A 6700                       		beq.s	locret_13502
00013E0C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013E10                            
00013E10                            locret_13502:
00013E10 4E75                       		rts	
00013E12                            ; ===========================================================================
00013E12                            
00013E12                            loc_13504:
00013E12 D168 0014                  		add.w	d0,$14(a0)
00013E16                            
00013E16                            locret_13508:
00013E16 4E75                       		rts	
00013E18                            ; End of function Sonic_SlopeResist
00013E18                            
00013E18                            ; ---------------------------------------------------------------------------
00013E18                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013E18                            ; ---------------------------------------------------------------------------
00013E18                            
00013E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E18                            
00013E18                            
00013E18                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013E18 1028 0026                  		move.b	$26(a0),d0
00013E1C 0600 0060                  		addi.b	#$60,d0
00013E20 0C00 00C0                  		cmpi.b	#-$40,d0
00013E24 6400                       		bcc.s	locret_13544
00013E26 1028 0026                  		move.b	$26(a0),d0
00013E2A 4EB9 0000 2D02             		jsr	(CalcSine).l
00013E30 C1FC 0050                  		muls.w	#$50,d0
00013E34 E080                       		asr.l	#8,d0
00013E36 4A68 0014                  		tst.w	$14(a0)
00013E3A 6B00                       		bmi.s	loc_1353A
00013E3C 4A40                       		tst.w	d0
00013E3E 6A00                       		bpl.s	loc_13534
00013E40 E480                       		asr.l	#2,d0
00013E42                            
00013E42                            loc_13534:
00013E42 D168 0014                  		add.w	d0,$14(a0)
00013E46 4E75                       		rts	
00013E48                            ; ===========================================================================
00013E48                            
00013E48                            loc_1353A:
00013E48 4A40                       		tst.w	d0
00013E4A 6B00                       		bmi.s	loc_13540
00013E4C E480                       		asr.l	#2,d0
00013E4E                            
00013E4E                            loc_13540:
00013E4E D168 0014                  		add.w	d0,$14(a0)
00013E52                            
00013E52                            locret_13544:
00013E52 4E75                       		rts	
00013E54                            ; End of function Sonic_RollRepel
00013E54                            
00013E54                            ; ---------------------------------------------------------------------------
00013E54                            ; Subroutine to	push Sonic down	a slope
00013E54                            ; ---------------------------------------------------------------------------
00013E54                            
00013E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E54                            
00013E54                            
00013E54                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E54 4E71                       		nop	
00013E56 4A28 0038                  		tst.b	$38(a0)
00013E5A 6600                       		bne.s	locret_13580
00013E5C 4A68 003E                  		tst.w	$3E(a0)
00013E60 6600                       		bne.s	loc_13582
00013E62 1028 0026                  		move.b	$26(a0),d0
00013E66 0600 0020                  		addi.b	#$20,d0
00013E6A 0200 00C0                  		andi.b	#$C0,d0
00013E6E 6700                       		beq.s	locret_13580
00013E70 3028 0014                  		move.w	$14(a0),d0
00013E74 6A00                       		bpl.s	loc_1356A
00013E76 4440                       		neg.w	d0
00013E78                            
00013E78                            loc_1356A:
00013E78 0C40 0280                  		cmpi.w	#$280,d0
00013E7C 6400                       		bcc.s	locret_13580
00013E7E 4268 0014                  		clr.w	$14(a0)
00013E82 08E8 0001 0022             		bset	#1,$22(a0)
00013E88 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013E8E                            
00013E8E                            locret_13580:
00013E8E 4E75                       		rts	
00013E90                            ; ===========================================================================
00013E90                            
00013E90                            loc_13582:
00013E90 5368 003E                  		subq.w	#1,$3E(a0)
00013E94 4E75                       		rts	
00013E96                            ; End of function Sonic_SlopeRepel
00013E96                            
00013E96                            ; ---------------------------------------------------------------------------
00013E96                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013E96                            ; ---------------------------------------------------------------------------
00013E96                            
00013E96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E96                            
00013E96                            
00013E96                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013E96 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013E9A 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013E9C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013E9E                            
00013E9E 5400                       		addq.b	#2,d0		; increase angle
00013EA0 6400                       		bcc.s	loc_13596
00013EA2 7000                       		moveq	#0,d0
00013EA4                            
00013EA4                            loc_13596:
00013EA4 6000                       		bra.s	loc_1359E
00013EA6                            ; ===========================================================================
00013EA6                            
00013EA6                            loc_13598:
00013EA6 5500                       		subq.b	#2,d0		; decrease angle
00013EA8 6400                       		bcc.s	loc_1359E
00013EAA 7000                       		moveq	#0,d0
00013EAC                            
00013EAC                            loc_1359E:
00013EAC 1140 0026                  		move.b	d0,$26(a0)
00013EB0                            
00013EB0                            locret_135A2:
00013EB0 4E75                       		rts	
00013EB2                            ; End of function Sonic_JumpAngle
00013EB2                            
00013EB2                            ; ---------------------------------------------------------------------------
00013EB2                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013EB2                            ; ---------------------------------------------------------------------------
00013EB2                            
00013EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EB2                            
00013EB2                            
00013EB2                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013EB2 3228 0010                  		move.w	$10(a0),d1
00013EB6 3428 0012                  		move.w	$12(a0),d2
00013EBA 4EB9 0000 2FD0             		jsr	(CalcAngle).l
00013EC0 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013EC4 0400 0020                  		subi.b	#$20,d0
00013EC8 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013ECC 0200 00C0                  		andi.b	#$C0,d0
00013ED0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013ED4 0C00 0040                  		cmpi.b	#$40,d0
00013ED8 6700 0000                  		beq.w	loc_13680
00013EDC 0C00 0080                  		cmpi.b	#$80,d0
00013EE0 6700 0000                  		beq.w	loc_136E2
00013EE4 0C00 00C0                  		cmpi.b	#-$40,d0
00013EE8 6700 0000                  		beq.w	loc_1373E
00013EEC 6100 0000                  		bsr.w	Sonic_HitWall
00013EF0 4A41                       		tst.w	d1
00013EF2 6A00                       		bpl.s	loc_135F0
00013EF4 9368 0008                  		sub.w	d1,8(a0)
00013EF8 317C 0000 0010             		move.w	#0,$10(a0)
00013EFE                            
00013EFE                            loc_135F0:
00013EFE 6100 0000                  		bsr.w	sub_14EB4
00013F02 4A41                       		tst.w	d1
00013F04 6A00                       		bpl.s	loc_13602
00013F06 D368 0008                  		add.w	d1,8(a0)
00013F0A 317C 0000 0010             		move.w	#0,$10(a0)
00013F10                            
00013F10                            loc_13602:
00013F10 6100 0000                  		bsr.w	Sonic_HitFloor
00013F14 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013F18 4A41                       		tst.w	d1
00013F1A 6A00                       		bpl.s	locret_1367E
00013F1C 1428 0012                  		move.b	$12(a0),d2
00013F20 5002                       		addq.b	#8,d2
00013F22 4402                       		neg.b	d2
00013F24 B202                       		cmp.b	d2,d1
00013F26 6C00                       		bge.s	loc_1361E
00013F28 B002                       		cmp.b	d2,d0
00013F2A 6D00                       		blt.s	locret_1367E
00013F2C                            
00013F2C                            loc_1361E:
00013F2C D368 000C                  		add.w	d1,$C(a0)
00013F30 1143 0026                  		move.b	d3,$26(a0)
00013F34 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F38 117C 0000 001C             		move.b	#0,$1C(a0)
00013F3E 1003                       		move.b	d3,d0
00013F40 0600 0020                  		addi.b	#$20,d0
00013F44 0200 0040                  		andi.b	#$40,d0
00013F48 6600                       		bne.s	loc_1365C
00013F4A 1003                       		move.b	d3,d0
00013F4C 0600 0010                  		addi.b	#$10,d0
00013F50 0200 0020                  		andi.b	#$20,d0
00013F54 6700                       		beq.s	loc_1364E
00013F56 E0E8 0012                  		asr	$12(a0)
00013F5A 6000                       		bra.s	loc_13670
00013F5C                            ; ===========================================================================
00013F5C                            
00013F5C                            loc_1364E:
00013F5C 317C 0000 0012             		move.w	#0,$12(a0)
00013F62 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F68 4E75                       		rts	
00013F6A                            ; ===========================================================================
00013F6A                            
00013F6A                            loc_1365C:
00013F6A 317C 0000 0010             		move.w	#0,$10(a0)
00013F70 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F76 6F00                       		ble.s	loc_13670
00013F78 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013F7E                            
00013F7E                            loc_13670:
00013F7E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F84 4A03                       		tst.b	d3
00013F86 6A00                       		bpl.s	locret_1367E
00013F88 4468 0014                  		neg.w	$14(a0)
00013F8C                            
00013F8C                            locret_1367E:
00013F8C 4E75                       		rts	
00013F8E                            ; ===========================================================================
00013F8E                            
00013F8E                            loc_13680:
00013F8E 6100 0000                  		bsr.w	Sonic_HitWall
00013F92 4A41                       		tst.w	d1
00013F94 6A00                       		bpl.s	loc_1369A
00013F96 9368 0008                  		sub.w	d1,8(a0)
00013F9A 317C 0000 0010             		move.w	#0,$10(a0)
00013FA0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FA6 4E75                       		rts	
00013FA8                            ; ===========================================================================
00013FA8                            
00013FA8                            loc_1369A:
00013FA8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FAC 4A41                       		tst.w	d1
00013FAE 6A00                       		bpl.s	loc_136B4
00013FB0 9368 000C                  		sub.w	d1,$C(a0)
00013FB4 4A68 0012                  		tst.w	$12(a0)
00013FB8 6A00                       		bpl.s	locret_136B2
00013FBA 317C 0000 0012             		move.w	#0,$12(a0)
00013FC0                            
00013FC0                            locret_136B2:
00013FC0 4E75                       		rts	
00013FC2                            ; ===========================================================================
00013FC2                            
00013FC2                            loc_136B4:
00013FC2 4A68 0012                  		tst.w	$12(a0)
00013FC6 6B00                       		bmi.s	locret_136E0
00013FC8 6100 0000                  		bsr.w	Sonic_HitFloor
00013FCC 4A41                       		tst.w	d1
00013FCE 6A00                       		bpl.s	locret_136E0
00013FD0 D368 000C                  		add.w	d1,$C(a0)
00013FD4 1143 0026                  		move.b	d3,$26(a0)
00013FD8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FDC 117C 0000 001C             		move.b	#0,$1C(a0)
00013FE2 317C 0000 0012             		move.w	#0,$12(a0)
00013FE8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013FEE                            
00013FEE                            locret_136E0:
00013FEE 4E75                       		rts	
00013FF0                            ; ===========================================================================
00013FF0                            
00013FF0                            loc_136E2:
00013FF0 6100 0000                  		bsr.w	Sonic_HitWall
00013FF4 4A41                       		tst.w	d1
00013FF6 6A00                       		bpl.s	loc_136F4
00013FF8 9368 0008                  		sub.w	d1,8(a0)
00013FFC 317C 0000 0010             		move.w	#0,$10(a0)
00014002                            
00014002                            loc_136F4:
00014002 6100 0000                  		bsr.w	sub_14EB4
00014006 4A41                       		tst.w	d1
00014008 6A00                       		bpl.s	loc_13706
0001400A D368 0008                  		add.w	d1,8(a0)
0001400E 317C 0000 0010             		move.w	#0,$10(a0)
00014014                            
00014014                            loc_13706:
00014014 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014018 4A41                       		tst.w	d1
0001401A 6A00                       		bpl.s	locret_1373C
0001401C 9368 000C                  		sub.w	d1,$C(a0)
00014020 1003                       		move.b	d3,d0
00014022 0600 0020                  		addi.b	#$20,d0
00014026 0200 0040                  		andi.b	#$40,d0
0001402A 6600                       		bne.s	loc_13726
0001402C 317C 0000 0012             		move.w	#0,$12(a0)
00014032 4E75                       		rts	
00014034                            ; ===========================================================================
00014034                            
00014034                            loc_13726:
00014034 1143 0026                  		move.b	d3,$26(a0)
00014038 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001403C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014042 4A03                       		tst.b	d3
00014044 6A00                       		bpl.s	locret_1373C
00014046 4468 0014                  		neg.w	$14(a0)
0001404A                            
0001404A                            locret_1373C:
0001404A 4E75                       		rts	
0001404C                            ; ===========================================================================
0001404C                            
0001404C                            loc_1373E:
0001404C 6100 0000                  		bsr.w	sub_14EB4
00014050 4A41                       		tst.w	d1
00014052 6A00                       		bpl.s	loc_13758
00014054 D368 0008                  		add.w	d1,8(a0)
00014058 317C 0000 0010             		move.w	#0,$10(a0)
0001405E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014064 4E75                       		rts	
00014066                            ; ===========================================================================
00014066                            
00014066                            loc_13758:
00014066 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001406A 4A41                       		tst.w	d1
0001406C 6A00                       		bpl.s	loc_13772
0001406E 9368 000C                  		sub.w	d1,$C(a0)
00014072 4A68 0012                  		tst.w	$12(a0)
00014076 6A00                       		bpl.s	locret_13770
00014078 317C 0000 0012             		move.w	#0,$12(a0)
0001407E                            
0001407E                            locret_13770:
0001407E 4E75                       		rts	
00014080                            ; ===========================================================================
00014080                            
00014080                            loc_13772:
00014080 4A68 0012                  		tst.w	$12(a0)
00014084 6B00                       		bmi.s	locret_1379E
00014086 6100 0000                  		bsr.w	Sonic_HitFloor
0001408A 4A41                       		tst.w	d1
0001408C 6A00                       		bpl.s	locret_1379E
0001408E D368 000C                  		add.w	d1,$C(a0)
00014092 1143 0026                  		move.b	d3,$26(a0)
00014096 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001409A 117C 0000 001C             		move.b	#0,$1C(a0)
000140A0 317C 0000 0012             		move.w	#0,$12(a0)
000140A6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140AC                            
000140AC                            locret_1379E:
000140AC 4E75                       		rts	
000140AE                            ; End of function Sonic_Floor
000140AE                            
000140AE                            ; ---------------------------------------------------------------------------
000140AE                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000140AE                            ; ---------------------------------------------------------------------------
000140AE                            
000140AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140AE                            
000140AE                            
000140AE                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000140AE 0828 0004 0022             		btst	#4,$22(a0)
000140B4 6700                       		beq.s	loc_137AE
000140B6 4E71                       		nop	
000140B8 4E71                       		nop	
000140BA 4E71                       		nop	
000140BC                            
000140BC                            loc_137AE:
000140BC 08A8 0005 0022             		bclr	#5,$22(a0)
000140C2 08A8 0001 0022             		bclr	#1,$22(a0)
000140C8 08A8 0004 0022             		bclr	#4,$22(a0)
000140CE 0828 0002 0022             		btst	#2,$22(a0)
000140D4 6700                       		beq.s	loc_137E4
000140D6 08A8 0002 0022             		bclr	#2,$22(a0)
000140DC 117C 0013 0016             		move.b	#$13,$16(a0)
000140E2 117C 0009 0017             		move.b	#9,$17(a0)
000140E8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000140EE 5B68 000C                  		subq.w	#5,$C(a0)
000140F2                            
000140F2                            loc_137E4:
000140F2 117C 0000 003C             		move.b	#0,$3C(a0)
000140F8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000140FE 4E75                       		rts	
00014100                            ; End of function Sonic_ResetOnFloor
00014100                            
00014100                            ; ===========================================================================
00014100                            ; ---------------------------------------------------------------------------
00014100                            ; Sonic	when he	gets hurt
00014100                            ; ---------------------------------------------------------------------------
00014100                            
00014100                            Obj01_Hurt:				; XREF: Obj01_Index
00014100 4EBA 9D40                  		jsr	SpeedToPos
00014104 0668 0030 0012             		addi.w	#$30,$12(a0)
0001410A 0828 0006 0022             		btst	#6,$22(a0)
00014110 6700                       		beq.s	loc_1380C
00014112 0468 0020 0012             		subi.w	#$20,$12(a0)
00014118                            
00014118                            loc_1380C:
00014118 6100 0000                  		bsr.w	Sonic_HurtStop
0001411C 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014120 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014124 6100 0000                  		bsr.w	Sonic_Animate
00014128 6100 0000                  		bsr.w	LoadSonicDynPLC
0001412C 4EFA 9D3A                  		jmp	DisplaySprite
00014130                            
00014130                            ; ---------------------------------------------------------------------------
00014130                            ; Subroutine to	stop Sonic falling after he's been hurt
00014130                            ; ---------------------------------------------------------------------------
00014130                            
00014130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014130                            
00014130                            
00014130                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014130 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014134 0640 00E0                  		addi.w	#$E0,d0
00014138 B068 000C                  		cmp.w	$C(a0),d0
0001413C 6500 0000                  		bcs.w	KillSonic
00014140 6100 FD70                  		bsr.w	Sonic_Floor
00014144 0828 0001 0022             		btst	#1,$22(a0)
0001414A 6600                       		bne.s	locret_13860
0001414C 7000                       		moveq	#0,d0
0001414E 3140 0012                  		move.w	d0,$12(a0)
00014152 3140 0010                  		move.w	d0,$10(a0)
00014156 3140 0014                  		move.w	d0,$14(a0)
0001415A 117C 0000 001C             		move.b	#0,$1C(a0)
00014160 5528 0024                  		subq.b	#2,$24(a0)
00014164 317C 0078 0030             		move.w	#$78,$30(a0)
0001416A                            
0001416A                            locret_13860:
0001416A 4E75                       		rts	
0001416C                            ; End of function Sonic_HurtStop
0001416C                            
0001416C                            ; ===========================================================================
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            ; Sonic	when he	dies
0001416C                            ; ---------------------------------------------------------------------------
0001416C                            
0001416C                            Obj01_Death:				; XREF: Obj01_Index
0001416C 6100 0000                  		bsr.w	GameOver
00014170 4EBA 9C5E                  		jsr	ObjectFall
00014174 6100 F460                  		bsr.w	Sonic_RecordPos
00014178 6100 0000                  		bsr.w	Sonic_Animate
0001417C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014180 4EFA 9CE6                  		jmp	DisplaySprite
00014184                            
00014184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014184                            
00014184                            
00014184                            GameOver:				; XREF: Obj01_Death
00014184 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014188 0640 0100                  		addi.w	#$100,d0
0001418C B068 000C                  		cmp.w	$C(a0),d0
00014190 6400 0000                  		bcc.w	locret_13900
00014194 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001419A 5428 0024                  		addq.b	#2,$24(a0)
0001419E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000141A2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000141A6 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000141AA 6600                       		bne.s	loc_138D4
000141AC 317C 0000 003A             		move.w	#0,$3A(a0)
000141B2 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000141B8 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141BE 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000141C4 4238 FE1A                  		clr.b	($FFFFFE1A).w
000141C8                            
000141C8                            loc_138C2:
000141C8 303C 008F                  		move.w	#$8F,d0
000141CC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play game over music
000141D2 7003                       		moveq	#3,d0
000141D4 4EF9 0000 17B6             		jmp	(LoadPLC).l	; load game over patterns
000141DA                            ; ===========================================================================
000141DA                            
000141DA                            loc_138D4:
000141DA 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000141E0 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000141E4 6700                       		beq.s	locret_13900	; if not, branch
000141E6 317C 0000 003A             		move.w	#0,$3A(a0)
000141EC 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000141F2 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141F8 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000141FE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014204 60C2                       		bra.s	loc_138C2
00014206                            ; ===========================================================================
00014206                            
00014206                            locret_13900:
00014206 4E75                       		rts	
00014208                            ; End of function GameOver
00014208                            
00014208                            ; ===========================================================================
00014208                            ; ---------------------------------------------------------------------------
00014208                            ; Sonic	when the level is restarted
00014208                            ; ---------------------------------------------------------------------------
00014208                            
00014208                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014208 4A68 003A                  		tst.w	$3A(a0)
0001420C 6700                       		beq.s	locret_13914
0001420E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014212 6600                       		bne.s	locret_13914
00014214 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001421A                            
0001421A                            locret_13914:
0001421A 4E75                       		rts	
0001421C                            
0001421C                            ; ---------------------------------------------------------------------------
0001421C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001421C                            ; ---------------------------------------------------------------------------
0001421C                            
0001421C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001421C                            
0001421C                            
0001421C                            Sonic_Loops:				; XREF: Obj01_Control
0001421C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014222 6700                       		beq.s	loc_13926	; if yes, branch
00014224 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014228 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001422C                            
0001422C                            loc_13926:
0001422C 3028 000C                  		move.w	$C(a0),d0
00014230 E248                       		lsr.w	#1,d0
00014232 0240 0380                  		andi.w	#$380,d0
00014236 1228 0008                  		move.b	8(a0),d1
0001423A 0241 007F                  		andi.w	#$7F,d1
0001423E D041                       		add.w	d1,d0
00014240 43F8 A400                  		lea	($FFFFA400).w,a1
00014244 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014248 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001424C 6700 FA66                  		beq.w	Obj01_ChkRoll
00014250 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014254 6700 FA5E                  		beq.w	Obj01_ChkRoll
00014258 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
0001425C 6700                       		beq.s	loc_13976
0001425E B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014262 6700                       		beq.s	loc_13966
00014264 08A8 0006 0001             		bclr	#6,1(a0)
0001426A 4E75                       		rts	
0001426C                            ; ===========================================================================
0001426C                            
0001426C                            loc_13966:
0001426C 0828 0001 0022             		btst	#1,$22(a0)
00014272 6700                       		beq.s	loc_13976
00014274 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001427A 4E75                       		rts	
0001427C                            ; ===========================================================================
0001427C                            
0001427C                            loc_13976:
0001427C 3428 0008                  		move.w	8(a0),d2
00014280 0C02 002C                  		cmpi.b	#$2C,d2
00014284 6400                       		bcc.s	loc_13988
00014286 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001428C 4E75                       		rts	
0001428E                            ; ===========================================================================
0001428E                            
0001428E                            loc_13988:
0001428E 0C02 00E0                  		cmpi.b	#-$20,d2
00014292 6500                       		bcs.s	loc_13996
00014294 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001429A 4E75                       		rts	
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            loc_13996:
0001429C 0828 0006 0001             		btst	#6,1(a0)
000142A2 6600                       		bne.s	loc_139B2
000142A4 1228 0026                  		move.b	$26(a0),d1
000142A8 6700                       		beq.s	locret_139C2
000142AA 0C01 0080                  		cmpi.b	#-$80,d1
000142AE 6200                       		bhi.s	locret_139C2
000142B0 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142B6 4E75                       		rts	
000142B8                            ; ===========================================================================
000142B8                            
000142B8                            loc_139B2:
000142B8 1228 0026                  		move.b	$26(a0),d1
000142BC 0C01 0080                  		cmpi.b	#-$80,d1
000142C0 6300                       		bls.s	locret_139C2
000142C2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142C8                            
000142C8                            locret_139C2:
000142C8 4E75                       		rts	
000142CA                            ; End of function Sonic_Loops
000142CA                            
000142CA                            ; ---------------------------------------------------------------------------
000142CA                            ; Subroutine to	animate	Sonic's sprites
000142CA                            ; ---------------------------------------------------------------------------
000142CA                            
000142CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142CA                            
000142CA                            Player_Anim:
000142CA 0000 0000                  	dc.l	SonicAniData
000142CE 0000 0000                  	dc.l	SonicAniData ; gronic
000142D2 0000 0000                  	dc.l	SonicAniData ; anakama
000142D6 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000142DA                            
000142DA                            	; Insert more animation data for other characters here
000142DA                            	
000142DA                            Sonic_Animate:				; XREF: Obj01_Control; et al
000142DA 7000                       			moveq	#0,d0
000142DC 1038 FFE8                  		move.b	(v_character),d0
000142E0 E548                       		lsl.w	#2,d0
000142E2 43FA FFE6                  		lea 	Player_Anim(pc),a1
000142E6                            		
000142E6 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000142EA                            	
000142EA 7000                       		moveq	#0,d0
000142EC 1028 001C                  		move.b	$1C(a0),d0
000142F0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000142F4 6700                       		beq.s	SAnim_Do	; if not, branch
000142F6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000142FA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014300 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014306                            
00014306                            SAnim_Do:
00014306 D040                       		add.w	d0,d0
00014308 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001430C 1011                       		move.b	(a1),d0
0001430E 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014310 1228 0022                  		move.b	$22(a0),d1
00014314 0201 0001                  		andi.b	#1,d1
00014318 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001431E 8328 0001                  		or.b	d1,1(a0)
00014322 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014326 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014328 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001432C                            
0001432C                            SAnim_Do2:
0001432C 7200                       		moveq	#0,d1
0001432E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014332 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014336 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014338                            
00014338                            SAnim_Next:
00014338 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001433C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014340                            
00014340                            SAnim_Delay:
00014340 4E75                       		rts	
00014342                            ; ===========================================================================
00014342                            
00014342                            SAnim_End_FF:
00014342 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014344 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014346 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001434C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014350 60E6                       		bra.s	SAnim_Next
00014352                            ; ===========================================================================
00014352                            
00014352                            SAnim_End_FE:
00014352 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014354 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014356 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001435A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001435E 9200                       		sub.b	d0,d1
00014360 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014364 60D2                       		bra.s	SAnim_Next
00014366                            ; ===========================================================================
00014366                            
00014366                            SAnim_End_FD:
00014366 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014368 6600                       		bne.s	SAnim_End	; if not, branch
0001436A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014370                            
00014370                            SAnim_End:
00014370 4E75                       		rts	
00014372                            ; ===========================================================================
00014372                            
00014372                            SAnim_WalkRun:				; XREF: SAnim_Do
00014372 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014376 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014378 5200                       		addq.b	#1,d0		; is animation walking/running?
0001437A 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001437E 7200                       		moveq	#0,d1
00014380 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014384 1428 0022                  		move.b	$22(a0),d2
00014388 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001438C 6600                       		bne.s	loc_13A70	; if yes, branch
0001438E 4600                       		not.b	d0		; reverse angle
00014390                            
00014390                            loc_13A70:
00014390 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014394 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014396 7203                       		moveq	#3,d1
00014398                            
00014398                            loc_13A78:
00014398 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001439E B302                       		eor.b	d1,d2
000143A0 8528 0001                  		or.b	d2,1(a0)
000143A4 0828 0005 0022             		btst	#5,$22(a0)
000143AA 6600 0000                  		bne.w	SAnim_Push
000143AE E808                       		lsr.b	#4,d0		; divide angle by $10
000143B0 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000143B4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143B8 6A00                       		bpl.s	loc_13A9C
000143BA 4442                       		neg.w	d2
000143BC                            
000143BC                            loc_13A9C:
000143BC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000143C2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000143C6 6400                       		bcc.s	loc_13AB4	; if yes, branch
000143C8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000143CE 1200                       		move.b	d0,d1
000143D0 E209                       		lsr.b	#1,d1
000143D2 D001                       		add.b	d1,d0
000143D4                            
000143D4                            loc_13AB4:
000143D4 D000                       		add.b	d0,d0
000143D6 1600                       		move.b	d0,d3
000143D8 4442                       		neg.w	d2
000143DA 0642 0800                  		addi.w	#$800,d2
000143DE 6A00                       		bpl.s	loc_13AC2
000143E0 7400                       		moveq	#0,d2
000143E2                            
000143E2                            loc_13AC2:
000143E2 E04A                       		lsr.w	#8,d2
000143E4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143E8 6100 FF42                  		bsr.w	SAnim_Do2
000143EC D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000143F0 4E75                       		rts	
000143F2                            ; ===========================================================================
000143F2                            
000143F2                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000143F2 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000143F4 6600                       		bne.s	SAnim_Push	; if not, branch
000143F6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143FA 6A00                       		bpl.s	loc_13ADE
000143FC 4442                       		neg.w	d2
000143FE                            
000143FE                            loc_13ADE:
000143FE 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014404 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014408 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001440A 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014410                            
00014410                            loc_13AF0:
00014410 4442                       		neg.w	d2
00014412 0642 0400                  		addi.w	#$400,d2
00014416 6A00                       		bpl.s	loc_13AFA
00014418 7400                       		moveq	#0,d2
0001441A                            
0001441A                            loc_13AFA:
0001441A E04A                       		lsr.w	#8,d2
0001441C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014420 1228 0022                  		move.b	$22(a0),d1
00014424 0201 0001                  		andi.b	#1,d1
00014428 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001442E 8328 0001                  		or.b	d1,1(a0)
00014432 6000 FEF8                  		bra.w	SAnim_Do2
00014436                            ; ===========================================================================
00014436                            
00014436                            SAnim_Push:				; XREF: SAnim_RollJump
00014436 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001443A 6B00                       		bmi.s	loc_13B1E
0001443C 4442                       		neg.w	d2
0001443E                            
0001443E                            loc_13B1E:
0001443E 0642 0800                  		addi.w	#$800,d2
00014442 6A00                       		bpl.s	loc_13B26
00014444 7400                       		moveq	#0,d2
00014446                            
00014446                            loc_13B26:
00014446 EC4A                       		lsr.w	#6,d2
00014448 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001444C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014452 1228 0022                  		move.b	$22(a0),d1
00014456 0201 0001                  		andi.b	#1,d1
0001445A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014460 8328 0001                  		or.b	d1,1(a0)
00014464 6000 FEC6                  		bra.w	SAnim_Do2
00014468                            ; End of function Sonic_Animate
00014468                            
00014468                            ; ===========================================================================
00014468                            SonicAniData:
00014468                            	include "_anim\Sonic.asm"
00014468                            ; ---------------------------------------------------------------------------
00014468                            ; Animation script - Sonic
00014468                            ; ---------------------------------------------------------------------------
00014468 0000                       		dc.w SonAni_Walk-SonicAniData
0001446A 0000                       		dc.w SonAni_Run-SonicAniData
0001446C 0000                       		dc.w SonAni_Roll-SonicAniData
0001446E 0000                       		dc.w SonAni_Roll2-SonicAniData
00014470 0000                       		dc.w SonAni_Push-SonicAniData
00014472 0000                       		dc.w SonAni_Wait-SonicAniData
00014474 0000                       		dc.w SonAni_Balance-SonicAniData
00014476 0000                       		dc.w SonAni_LookUp-SonicAniData
00014478 0000                       		dc.w SonAni_Duck-SonicAniData
0001447A 0000                       		dc.w SonAni_Warp1-SonicAniData
0001447C 0000                       		dc.w SonAni_Warp2-SonicAniData
0001447E 0000                       		dc.w SonAni_Warp3-SonicAniData
00014480 0000                       		dc.w SonAni_Warp4-SonicAniData
00014482 0000                       		dc.w SonAni_Stop-SonicAniData
00014484 0000                       		dc.w SonAni_Float1-SonicAniData
00014486 0000                       		dc.w SonAni_Float2-SonicAniData
00014488 0000                       		dc.w SonAni_Spring-SonicAniData
0001448A 0000                       		dc.w SonAni_LZHang-SonicAniData
0001448C 0000                       		dc.w SonAni_Leap1-SonicAniData
0001448E 0000                       		dc.w SonAni_Leap2-SonicAniData
00014490 0000                       		dc.w SonAni_Surf-SonicAniData
00014492 0000                       		dc.w SonAni_Bubble-SonicAniData
00014494 0000                       		dc.w SonAni_Death1-SonicAniData
00014496 0000                       		dc.w SonAni_Drown-SonicAniData
00014498 0000                       		dc.w SonAni_Death2-SonicAniData
0001449A 0000                       		dc.w SonAni_Shrink-SonicAniData
0001449C 0000                       		dc.w SonAni_Hurt-SonicAniData
0001449E 0000                       		dc.w SonAni_LZSlide-SonicAniData
000144A0 0000                       		dc.w SonAni_Blank-SonicAniData
000144A2 0000                       		dc.w SonAni_Float3-SonicAniData
000144A4 0000                       		dc.w SonAni_Float4-SonicAniData
000144A6 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000144B0 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000144B8 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000144C0 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000144C8 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000144D0 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000144E6 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000144EA 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000144EE 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000144F2 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000144F6 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000144FA 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000144FE 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014502 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014506 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001450A 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014512 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014516 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001451A 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014520 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014526 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001452A 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014532 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014536 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001453A 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001453E 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014548 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
0001454C 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014550 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014554 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001455C 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014560                            		even
00014560                            		even
00014560                            
00014560                            ; ---------------------------------------------------------------------------
00014560                            ; Sonic	pattern	loading	subroutine
00014560                            ; ---------------------------------------------------------------------------
00014560                            
00014560                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014560                            Player_DPLC:
00014560 0000 0000                  	dc.l	SonicDynPLC
00014564 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014568 0000 0000                  	dc.l	SonicDynPLC ; anakama
0001456C 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014570                            	; add pointers for player dplc here
00014570                            Player_Art:
00014570 0000 0000                  	dc.l	Art_Sonic
00014574 0000 0000                  	dc.l	Art_Sonic ; gronic
00014578 0000 0000                  	dc.l	Art_Sonic ; anakama
0001457C 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014580                            	; add pointers for player art here
00014580                            
00014580                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014580 7000                       		moveq	#0,d0
00014582 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014586 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001458A 6700                       		beq.s	locret_13C96
0001458C 11C0 F766                  		move.b	d0,($FFFFF766).w
00014590                            		
00014590 323C 0000                  		move.w	#0,d1
00014594 1238 FFE8                  		move.b	(v_character),d1
00014598 E549                       		lsl.w	#2,d1
0001459A 45FA FFC4                  		lea 	Player_DPLC(pc),a2
0001459E                            
0001459E 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
000145A2                            		
000145A2 D040                       		add.w	d0,d0
000145A4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000145A8 7200                       		moveq	#0,d1
000145AA 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000145AC 5301                       		subq.b	#1,d1
000145AE 6B00                       		bmi.s	locret_13C96
000145B0 47F8 C800                  		lea	($FFFFC800).w,a3
000145B4 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000145BA                            
000145BA                            SPLC_ReadEntry:
000145BA 303C 0000                  		move.w	#0,d0
000145BE 1038 FFE8                  		move.b	(v_character),d0
000145C2 E548                       		lsl.w	#2,d0
000145C4 43FA FFAA                  		lea 	Player_Art(pc),a1
000145C8                            
000145C8 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000145CC                            
000145CC 7400                       		moveq	#0,d2
000145CE 141A                       		move.b	(a2)+,d2
000145D0 3002                       		move.w	d2,d0
000145D2 E808                       		lsr.b	#4,d0
000145D4 E14A                       		lsl.w	#8,d2
000145D6 141A                       		move.b	(a2)+,d2
000145D8 EB4A                       		lsl.w	#5,d2
000145DA D3C2                       		adda.l	d2,a1
000145DC                            
000145DC                            SPLC_LoadTile:
000145DC 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000145E0 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000145E4 47EB 0020                  		lea	$20(a3),a3	; next tile
000145E8 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000145EC                            
000145EC 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000145F0                            
000145F0                            locret_13C96:
000145F0 4E75                       		rts	
000145F2                            ; End of function LoadSonicDynPLC
000145F2                            
000145F2                            ; ===========================================================================
000145F2                            ; ---------------------------------------------------------------------------
000145F2                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000145F2                            ; ---------------------------------------------------------------------------
000145F2                            
000145F2                            Obj0A:					; XREF: Obj_Index
000145F2 7000                       		moveq	#0,d0
000145F4 1028 0024                  		move.b	$24(a0),d0
000145F8 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000145FC 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014600                            ; ===========================================================================
00014600 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014604 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014608 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001460C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014610 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014612                            ; ===========================================================================
00014612                            
00014612                            Obj0A_Main:				; XREF: Obj0A_Index
00014612 5428 0024                  		addq.b	#2,$24(a0)
00014616 217C 0001 31FA 0004        		move.l	#Map_obj64,4(a0)
0001461E 317C 8348 0002             		move.w	#$8348,2(a0)
00014624 117C 0084 0001             		move.b	#$84,1(a0)
0001462A 117C 0010 0019             		move.b	#$10,$19(a0)
00014630 117C 0001 0018             		move.b	#1,$18(a0)
00014636 1028 0028                  		move.b	$28(a0),d0
0001463A 6A00                       		bpl.s	loc_13D00
0001463C 5028 0024                  		addq.b	#8,$24(a0)
00014640 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014648 317C 0440 0002             		move.w	#$440,2(a0)
0001464E 0240 007F                  		andi.w	#$7F,d0
00014652 1140 0033                  		move.b	d0,$33(a0)
00014656 6000 0000                  		bra.w	Obj0A_Countdown
0001465A                            ; ===========================================================================
0001465A                            
0001465A                            loc_13D00:
0001465A 1140 001C                  		move.b	d0,$1C(a0)
0001465E 3168 0008 0030             		move.w	8(a0),$30(a0)
00014664 317C FF78 0012             		move.w	#-$88,$12(a0)
0001466A                            
0001466A                            Obj0A_Animate:				; XREF: Obj0A_Index
0001466A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014670 4EB9 0000 AEEE             		jsr	AnimateSprite
00014676                            
00014676                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014676 3038 F646                  		move.w	($FFFFF646).w,d0
0001467A B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
0001467E 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014680 117C 0006 0024             		move.b	#6,$24(a0)
00014686 5E28 001C                  		addq.b	#7,$1C(a0)
0001468A 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014690 6700                       		beq.s	Obj0A_Display
00014692 6000                       		bra.s	Obj0A_Display
00014694                            ; ===========================================================================
00014694                            
00014694                            Obj0A_Wobble:
00014694 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014698 6700                       		beq.s	loc_13D44
0001469A 5868 0030                  		addq.w	#4,$30(a0)
0001469E                            
0001469E                            loc_13D44:
0001469E 1028 0026                  		move.b	$26(a0),d0
000146A2 5228 0026                  		addq.b	#1,$26(a0)
000146A6 0240 007F                  		andi.w	#$7F,d0
000146AA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000146B0 1031 0000                  		move.b	(a1,d0.w),d0
000146B4 4880                       		ext.w	d0
000146B6 D068 0030                  		add.w	$30(a0),d0
000146BA 3140 0008                  		move.w	d0,8(a0)
000146BE 6100                       		bsr.s	Obj0A_ShowNumber
000146C0 4EBA 9780                  		jsr	SpeedToPos
000146C4 4A28 0001                  		tst.b	1(a0)
000146C8 6A00                       		bpl.s	Obj0A_Delete
000146CA 4EFA 979C                  		jmp	DisplaySprite
000146CE                            ; ===========================================================================
000146CE                            
000146CE                            Obj0A_Delete:
000146CE 4EFA 97D4                  		jmp	DeleteObject
000146D2                            ; ===========================================================================
000146D2                            
000146D2                            Obj0A_Display:				; XREF: Obj0A_Index
000146D2 6100                       		bsr.s	Obj0A_ShowNumber
000146D4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000146DA 4EB9 0000 AEEE             		jsr	AnimateSprite
000146E0 4EFA 9786                  		jmp	DisplaySprite
000146E4                            ; ===========================================================================
000146E4                            
000146E4                            Obj0A_Delete2:				; XREF: Obj0A_Index
000146E4 4EFA 97BE                  		jmp	DeleteObject
000146E8                            ; ===========================================================================
000146E8                            
000146E8                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000146E8 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000146EE 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000146F0 5368 0038                  		subq.w	#1,$38(a0)
000146F4 6600                       		bne.s	Obj0A_Display2
000146F6 117C 000E 0024             		move.b	#$E,$24(a0)
000146FC 5E28 001C                  		addq.b	#7,$1C(a0)
00014700 60D0                       		bra.s	Obj0A_Display
00014702                            ; ===========================================================================
00014702                            
00014702                            Obj0A_Display2:
00014702 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014708 4EB9 0000 AEEE             		jsr	AnimateSprite
0001470E 4A28 0001                  		tst.b	1(a0)
00014712 6A00                       		bpl.s	Obj0A_Delete3
00014714 4EFA 9752                  		jmp	DisplaySprite
00014718                            ; ===========================================================================
00014718                            
00014718                            Obj0A_Delete3:
00014718 4EFA 978A                  		jmp	DeleteObject
0001471C                            ; ===========================================================================
0001471C                            
0001471C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001471C 4A68 0038                  		tst.w	$38(a0)
00014720 6700                       		beq.s	locret_13E1A
00014722 5368 0038                  		subq.w	#1,$38(a0)
00014726 6600                       		bne.s	locret_13E1A
00014728 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001472E 6400                       		bcc.s	locret_13E1A
00014730 317C 000F 0038             		move.w	#$F,$38(a0)
00014736 4268 0012                  		clr.w	$12(a0)
0001473A 117C 0080 0001             		move.b	#$80,1(a0)
00014740 3028 0008                  		move.w	8(a0),d0
00014744 9078 F700                  		sub.w	($FFFFF700).w,d0
00014748 0640 0080                  		addi.w	#$80,d0
0001474C 3140 0008                  		move.w	d0,8(a0)
00014750 3028 000C                  		move.w	$C(a0),d0
00014754 9078 F704                  		sub.w	($FFFFF704).w,d0
00014758 0640 0080                  		addi.w	#$80,d0
0001475C 3140 000A                  		move.w	d0,$A(a0)
00014760 117C 000C 0024             		move.b	#$C,$24(a0)
00014766                            
00014766                            locret_13E1A:
00014766 4E75                       		rts	
00014768                            ; ===========================================================================
00014768                            Obj0A_WobbleData:
00014768 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014779 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001478A 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001479B 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000147AB FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000147B8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147C5 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147D2 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000147DF FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Obj0A_Countdown:			; XREF: Obj0A_Index
000147E8 4A68 002C                  		tst.w	$2C(a0)
000147EC 6600 0000                  		bne.w	loc_13F86
000147F0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000147F6 6400 0000                  		bcc.w	locret_1408C
000147FA 0838 0006 D022             		btst	#6,($FFFFD022).w
00014800 6700 0000                  		beq.w	locret_1408C
00014804 5368 0038                  		subq.w	#1,$38(a0)
00014808 6A00 0000                  		bpl.w	loc_13FAC
0001480C 317C 003B 0038             		move.w	#59,$38(a0)
00014812 317C 0001 0036             		move.w	#1,$36(a0)
00014818 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001481E 0240 0001                  		andi.w	#1,d0
00014822 1140 0034                  		move.b	d0,$34(a0)
00014826 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001482A 0C40 0019                  		cmpi.w	#$19,d0
0001482E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014830 0C40 0014                  		cmpi.w	#$14,d0
00014834 6700                       		beq.s	Obj0A_WarnSound
00014836 0C40 000F                  		cmpi.w	#$F,d0
0001483A 6700                       		beq.s	Obj0A_WarnSound
0001483C 0C40 000C                  		cmpi.w	#$C,d0
00014840 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014842 6600                       		bne.s	loc_13F02
00014844 303C 0092                  		move.w	#$92,d0
00014848 4EB9 0000 15CC             		jsr	(PlaySound).l	; play countdown music
0001484E                            
0001484E                            loc_13F02:
0001484E 5328 0032                  		subq.b	#1,$32(a0)
00014852 6A00                       		bpl.s	Obj0A_ReduceAir
00014854 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001485A 08E8 0007 0036             		bset	#7,$36(a0)
00014860 6000                       		bra.s	Obj0A_ReduceAir
00014862                            ; ===========================================================================
00014862                            
00014862                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014862 303C 00C2                  		move.w	#$C2,d0
00014866 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001486C                            
0001486C                            Obj0A_ReduceAir:
0001486C 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014870 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014874 6100 0000                  		bsr.w	ResumeMusic
00014878 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001487E 303C 00B2                  		move.w	#$B2,d0
00014882 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play drowning sound
00014888 117C 000A 0034             		move.b	#$A,$34(a0)
0001488E 317C 0001 0036             		move.w	#1,$36(a0)
00014894 317C 0078 002C             		move.w	#$78,$2C(a0)
0001489A 2F08                       		move.l	a0,-(sp)
0001489C 41F8 D000                  		lea	($FFFFD000).w,a0
000148A0 6100 F80C                  		bsr.w	Sonic_ResetOnFloor
000148A4 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000148AA 08E8 0001 0022             		bset	#1,$22(a0)
000148B0 08E8 0007 0002             		bset	#7,2(a0)
000148B6 317C 0000 0012             		move.w	#0,$12(a0)
000148BC 317C 0000 0010             		move.w	#0,$10(a0)
000148C2 317C 0000 0014             		move.w	#0,$14(a0)
000148C8 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000148CE 205F                       		movea.l	(sp)+,a0
000148D0 4E75                       		rts	
000148D2                            ; ===========================================================================
000148D2                            
000148D2                            loc_13F86:
000148D2 5368 002C                  		subq.w	#1,$2C(a0)
000148D6 6600                       		bne.s	loc_13F94
000148D8 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000148DE 4E75                       		rts	
000148E0                            ; ===========================================================================
000148E0                            
000148E0                            loc_13F94:
000148E0 2F08                       		move.l	a0,-(sp)
000148E2 41F8 D000                  		lea	($FFFFD000).w,a0
000148E6 4EBA 955A                  		jsr	SpeedToPos
000148EA 0668 0010 0012             		addi.w	#$10,$12(a0)
000148F0 205F                       		movea.l	(sp)+,a0
000148F2 6000                       		bra.s	loc_13FAC
000148F4                            ; ===========================================================================
000148F4                            
000148F4                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000148F4 6000                       		bra.s	Obj0A_MakeItem
000148F6                            ; ===========================================================================
000148F6                            
000148F6                            loc_13FAC:
000148F6 4A68 0036                  		tst.w	$36(a0)
000148FA 6700 0000                  		beq.w	locret_1408C
000148FE 5368 003A                  		subq.w	#1,$3A(a0)
00014902 6A00 0000                  		bpl.w	locret_1408C
00014906                            
00014906                            Obj0A_MakeItem:
00014906 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001490C 0240 000F                  		andi.w	#$F,d0
00014910 3140 003A                  		move.w	d0,$3A(a0)
00014914 4EBA 99D8                  		jsr	SingleObjLoad
00014918 6600 0000                  		bne.w	locret_1408C
0001491C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014920 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014926 7006                       		moveq	#6,d0
00014928 0838 0000 D022             		btst	#0,($FFFFD022).w
0001492E 6700                       		beq.s	loc_13FF2
00014930 4440                       		neg.w	d0
00014932 137C 0040 0026             		move.b	#$40,$26(a1)
00014938                            
00014938                            loc_13FF2:
00014938 D169 0008                  		add.w	d0,8(a1)
0001493C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014942 137C 0006 0028             		move.b	#6,$28(a1)
00014948 4A68 002C                  		tst.w	$2C(a0)
0001494C 6700 0000                  		beq.w	loc_1403E
00014950 0268 0007 003A             		andi.w	#7,$3A(a0)
00014956 0668 0000 003A             		addi.w	#0,$3A(a0)
0001495C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014960 0440 000C                  		subi.w	#$C,d0
00014964 3340 000C                  		move.w	d0,$C(a1)
00014968 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001496E 1340 0026                  		move.b	d0,$26(a1)
00014972 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014976 0200 0003                  		andi.b	#3,d0
0001497A 6600                       		bne.s	loc_14082
0001497C 137C 000E 0028             		move.b	#$E,$28(a1)
00014982 6000                       		bra.s	loc_14082
00014984                            ; ===========================================================================
00014984                            
00014984                            loc_1403E:
00014984 0828 0007 0036             		btst	#7,$36(a0)
0001498A 6700                       		beq.s	loc_14082
0001498C 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014990 E24A                       		lsr.w	#1,d2
00014992 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00014998 0240 0003                  		andi.w	#3,d0
0001499C 6600                       		bne.s	loc_1406A
0001499E 08E8 0006 0036             		bset	#6,$36(a0)
000149A4 6600                       		bne.s	loc_14082
000149A6 1342 0028                  		move.b	d2,$28(a1)
000149AA 337C 001C 0038             		move.w	#$1C,$38(a1)
000149B0                            
000149B0                            loc_1406A:
000149B0 4A28 0034                  		tst.b	$34(a0)
000149B4 6600                       		bne.s	loc_14082
000149B6 08E8 0006 0036             		bset	#6,$36(a0)
000149BC 6600                       		bne.s	loc_14082
000149BE 1342 0028                  		move.b	d2,$28(a1)
000149C2 337C 001C 0038             		move.w	#$1C,$38(a1)
000149C8                            
000149C8                            loc_14082:
000149C8 5328 0034                  		subq.b	#1,$34(a0)
000149CC 6A00                       		bpl.s	locret_1408C
000149CE 4268 0036                  		clr.w	$36(a0)
000149D2                            
000149D2                            locret_1408C:
000149D2 4E75                       		rts	
000149D4                            
000149D4                            ; ---------------------------------------------------------------------------
000149D4                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000149D4                            ; ---------------------------------------------------------------------------
000149D4                            
000149D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149D4                            
000149D4                            
000149D4                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000149D4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000149DA                             
000149DA                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000149DA                             
000149DA 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000149DE                             
000149DE 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000149E4 6600                       		bne.s	Air_GetBgm2	; if not, branch
000149E6 43F9 0000 3C88             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000149EC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149EE                             
000149EE                            Air_GetBgm2:
000149EE 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000149F4 6600                       		bne.s	Air_GetBgm3	; if not, branch
000149F6 43F9 0000 3C90             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000149FC 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149FE                             
000149FE                            Air_GetBgm3:
000149FE 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014A04 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014A06 43F9 0000 3C96             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014A0C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014A0E                             
00014A0E                            Air_GetBgm4:
00014A0E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014A14 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014A16 43F9 0000 3C9C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014A1C                             
00014A1C                            Air_PlayMusic:
00014A1C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014A20                             
00014A20                            loc_140A6:
00014A20 4EB9 0000 15CC             		jsr	(PlaySound).l
00014A26                             
00014A26                            ; NineKode ends here
00014A26                            
00014A26                            loc_140AC:
00014A26 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014A2C 4238 D372                  		clr.b	($FFFFD372).w
00014A30 4E75                       		rts	
00014A32                            ; End of function ResumeMusic
00014A32                            
00014A32                            ; ===========================================================================
00014A32                            Ani_obj0A:
00014A32                            	include "_anim\obj0A.asm"
00014A32                            ; ---------------------------------------------------------------------------
00014A32                            ; Animation script - countdown numbers and bubbles (LZ)
00014A32                            ; ---------------------------------------------------------------------------
00014A32 0000                       		dc.w byte_140D6-Ani_obj0A
00014A34 0000                       		dc.w byte_140E0-Ani_obj0A
00014A36 0000                       		dc.w byte_140EA-Ani_obj0A
00014A38 0000                       		dc.w byte_140F4-Ani_obj0A
00014A3A 0000                       		dc.w byte_140FE-Ani_obj0A
00014A3C 0000                       		dc.w byte_14108-Ani_obj0A
00014A3E 0000                       		dc.w byte_14112-Ani_obj0A
00014A40 0000                       		dc.w byte_14118-Ani_obj0A
00014A42 0000                       		dc.w byte_14120-Ani_obj0A
00014A44 0000                       		dc.w byte_14128-Ani_obj0A
00014A46 0000                       		dc.w byte_14130-Ani_obj0A
00014A48 0000                       		dc.w byte_14138-Ani_obj0A
00014A4A 0000                       		dc.w byte_14140-Ani_obj0A
00014A4C 0000                       		dc.w byte_14148-Ani_obj0A
00014A4E 0000                       		dc.w byte_1414A-Ani_obj0A
00014A50 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014A5A 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014A64 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014A6E 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014A78 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A82 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014A8C 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014A92 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014A9A 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014AA2 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014AAA 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014AB2 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014ABA 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014AC2 0EFC                       byte_14148:	dc.b $E, $FC
00014AC4 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014ACA                            		even
00014ACA                            		even
00014ACA                            
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            ; Sprite mappings - drowning countdown numbers (LZ)
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            Map_obj0A:
00014ACA                            	include "_maps\obj0A.asm"
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA                            ; Sprite mappings - drowning countdown numbers (LZ)
00014ACA                            ; ---------------------------------------------------------------------------
00014ACA 0000                       		dc.w byte_14152-Map_obj0A
00014ACC 01                         byte_14152:	dc.b 1
00014ACD E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014AD2                            		even
00014AD2                            		even
00014AD2                            
00014AD2                            ; ===========================================================================
00014AD2                            ; ---------------------------------------------------------------------------
00014AD2                            ; Object 38 - shield and invincibility stars
00014AD2                            ; ---------------------------------------------------------------------------
00014AD2                            
00014AD2                            Obj38:					; XREF: Obj_Index
00014AD2 7000                       		moveq	#0,d0
00014AD4 1028 0024                  		move.b	$24(a0),d0
00014AD8 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014ADC 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014AE0                            ; ===========================================================================
00014AE0 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014AE2 0000                       		dc.w Obj38_Shield-Obj38_Index
00014AE4 0000                       		dc.w Obj38_Stars-Obj38_Index
00014AE6                            ; ===========================================================================
00014AE6                            
00014AE6                            Obj38_Main:				; XREF: Obj38_Index
00014AE6 5428 0024                  		addq.b	#2,$24(a0)
00014AEA 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014AF2 117C 0004 0001             		move.b	#4,1(a0)
00014AF8 117C 0001 0018             		move.b	#1,$18(a0)
00014AFE 117C 0010 0019             		move.b	#$10,$19(a0)
00014B04 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014B08 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014B0A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014B10 4E75                       		rts	
00014B12                            ; ===========================================================================
00014B12                            
00014B12                            Obj38_DoStars:
00014B12 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014B16 317C 055C 0002             		move.w	#$55C,2(a0)
00014B1C 4E75                       		rts	
00014B1E                            ; ===========================================================================
00014B1E                            
00014B1E                            Obj38_Shield:				; XREF: Obj38_Index
00014B1E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B22 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014B24 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014B28 6700                       		beq.s	Obj38_Delete	; if not, branch
00014B2A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B30 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B36 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B3C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B42 4EB9 0000 AEEE             		jsr	AnimateSprite
00014B48 4EFA 931E                  		jmp	DisplaySprite
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            Obj38_RmvShield:
00014B4C 4E75                       		rts	
00014B4E                            ; ===========================================================================
00014B4E                            
00014B4E                            Obj38_Delete:
00014B4E 4EFA 9354                  		jmp	DeleteObject
00014B52                            ; ===========================================================================
00014B52                            
00014B52                            Obj38_Stars:				; XREF: Obj38_Index
00014B52 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B56 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014B58 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014B5C 1228 001C                  		move.b	$1C(a0),d1
00014B60 5301                       		subq.b	#1,d1
00014B62 6000                       		bra.s	Obj38_StarTrail
00014B64                            ; ===========================================================================
00014B64 E909                       		lsl.b	#4,d1
00014B66 5801                       		addq.b	#4,d1
00014B68 9001                       		sub.b	d1,d0
00014B6A 1228 0030                  		move.b	$30(a0),d1
00014B6E 9001                       		sub.b	d1,d0
00014B70 5801                       		addq.b	#4,d1
00014B72 0201 000F                  		andi.b	#$F,d1
00014B76 1141 0030                  		move.b	d1,$30(a0)
00014B7A 6000                       		bra.s	Obj38_StarTrail2a
00014B7C                            ; ===========================================================================
00014B7C                            
00014B7C                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B7C E709                       		lsl.b	#3,d1
00014B7E 1401                       		move.b	d1,d2
00014B80 D201                       		add.b	d1,d1
00014B82 D202                       		add.b	d2,d1
00014B84 5801                       		addq.b	#4,d1
00014B86 9001                       		sub.b	d1,d0
00014B88 1228 0030                  		move.b	$30(a0),d1
00014B8C 9001                       		sub.b	d1,d0
00014B8E 5801                       		addq.b	#4,d1
00014B90 0C01 0018                  		cmpi.b	#$18,d1
00014B94 6500                       		bcs.s	Obj38_StarTrail2
00014B96 7200                       		moveq	#0,d1
00014B98                            
00014B98                            Obj38_StarTrail2:
00014B98 1141 0030                  		move.b	d1,$30(a0)
00014B9C                            
00014B9C                            Obj38_StarTrail2a:
00014B9C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014BA0 43F1 0000                  		lea	(a1,d0.w),a1
00014BA4 3159 0008                  		move.w	(a1)+,8(a0)
00014BA8 3159 000C                  		move.w	(a1)+,$C(a0)
00014BAC 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014BB2 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014BB8 4EB9 0000 AEEE             		jsr	AnimateSprite
00014BBE 4EFA 92A8                  		jmp	DisplaySprite
00014BC2                            ; ===========================================================================
00014BC2                            
00014BC2                            Obj38_Delete2:				; XREF: Obj38_Stars
00014BC2 4EFA 92E0                  		jmp	DeleteObject
00014BC6                            ; ===========================================================================
00014BC6                            ; ---------------------------------------------------------------------------
00014BC6                            ; Object 4A - special stage entry from beta
00014BC6                            ; ---------------------------------------------------------------------------
00014BC6                            
00014BC6                            Obj4A:					; XREF: Obj_Index
00014BC6 7000                       		moveq	#0,d0
00014BC8 1028 0024                  		move.b	$24(a0),d0
00014BCC 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014BD0 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014BD4                            ; ===========================================================================
00014BD4 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014BD6 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014BD8 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014BDA                            ; ===========================================================================
00014BDA                            
00014BDA                            Obj4A_Main:				; XREF: Obj4A_Index
00014BDA 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014BDE 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014BE0 4E75                       		rts	
00014BE2                            ; ===========================================================================
00014BE2                            
00014BE2                            Obj4A_Main2:
00014BE2 5428 0024                  		addq.b	#2,$24(a0)
00014BE6 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014BEE 117C 0004 0001             		move.b	#4,1(a0)
00014BF4 117C 0001 0018             		move.b	#1,$18(a0)
00014BFA 117C 0038 0019             		move.b	#$38,$19(a0)
00014C00 317C 0541 0002             		move.w	#$541,2(a0)
00014C06 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014C0C                            
00014C0C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014C0C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014C12 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014C18 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014C1E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014C24 4EB9 0000 AEEE             		jsr	AnimateSprite
00014C2A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014C30 6600                       		bne.s	Obj4A_Display
00014C32 4A38 D000                  		tst.b	($FFFFD000).w
00014C36 6700                       		beq.s	Obj4A_Display
00014C38 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014C3E 303C 00A8                  		move.w	#$A8,d0
00014C42 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014C48                            
00014C48                            Obj4A_Display:
00014C48 4EFA 921E                  		jmp	DisplaySprite
00014C4C                            ; ===========================================================================
00014C4C                            
00014C4C                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014C4C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014C50 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014C52 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014C58 4EFA 924A                  		jmp	DeleteObject
00014C5C                            ; ===========================================================================
00014C5C                            
00014C5C                            Obj4A_Wait:
00014C5C 4E75                       		rts	
00014C5E                            ; ===========================================================================
00014C5E                            ; ---------------------------------------------------------------------------
00014C5E                            ; Object 08 - water splash (LZ)
00014C5E                            ; ---------------------------------------------------------------------------
00014C5E                            
00014C5E                            Obj08:					; XREF: Obj_Index
00014C5E 7000                       		moveq	#0,d0
00014C60 1028 0024                  		move.b	$24(a0),d0
00014C64 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014C68 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014C6C                            ; ===========================================================================
00014C6C 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014C6E 0000                       		dc.w Obj08_Display-Obj08_Index
00014C70 0000                       		dc.w Obj08_Delete-Obj08_Index
00014C72                            ; ===========================================================================
00014C72                            
00014C72                            Obj08_Main:				; XREF: Obj08_Index
00014C72 5428 0024                  		addq.b	#2,$24(a0)
00014C76 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C7E 0028 0004 0001             		ori.b	#4,1(a0)
00014C84 117C 0001 0018             		move.b	#1,$18(a0)
00014C8A 117C 0010 0019             		move.b	#$10,$19(a0)
00014C90 317C 4259 0002             		move.w	#$4259,2(a0)
00014C96 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014C9C                            
00014C9C                            Obj08_Display:				; XREF: Obj08_Index
00014C9C 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014CA2 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014CA8 4EB9 0000 AEEE             		jsr	AnimateSprite
00014CAE 4EFA 91B8                  		jmp	DisplaySprite
00014CB2                            ; ===========================================================================
00014CB2                            
00014CB2                            Obj08_Delete:				; XREF: Obj08_Index
00014CB2 4EFA 91F0                  		jmp	DeleteObject	; delete when animation	is complete
00014CB6                            ; ===========================================================================
00014CB6                            Ani_obj38:
00014CB6                            	include "_anim\obj38.asm"
00014CB6                            ; ---------------------------------------------------------------------------
00014CB6                            ; Animation script - shield and invincibility stars
00014CB6                            ; ---------------------------------------------------------------------------
00014CB6 0000                       		dc.w byte_14356-Ani_obj38
00014CB8 0000                       		dc.w byte_1435E-Ani_obj38
00014CBA 0000                       		dc.w byte_14364-Ani_obj38
00014CBC 0000                       		dc.w byte_1437E-Ani_obj38
00014CBE 0000                       		dc.w byte_14398-Ani_obj38
00014CC0 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014CC8 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014CCE 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014CDF 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014CE8 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014CF9 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014D02 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014D13 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014D1C                            		even
00014D1C                            		even
00014D1C                            
00014D1C                            ; ---------------------------------------------------------------------------
00014D1C                            ; Sprite mappings - shield and invincibility stars
00014D1C                            ; ---------------------------------------------------------------------------
00014D1C                            Map_obj38:
00014D1C                            	include "_maps\obj38.asm"
00014D1C                            ; ---------------------------------------------------------------------------
00014D1C                            ; Sprite mappings - shield and invincibility stars
00014D1C                            ; ---------------------------------------------------------------------------
00014D1C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014D20 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014D24 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014D28 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014D2C 04                         byte_143C2:	dc.b 4
00014D2D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D32 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D37 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014D3C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D41 04                         byte_143D7:	dc.b 4
00014D42 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014D47 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014D4C 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014D51 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014D56 04                         byte_143EC:	dc.b 4
00014D57 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D5C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D61 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D66 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D6B 04                         byte_14401:	dc.b 4
00014D6C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D71 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D76 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D7B 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D80 04                         byte_14416:	dc.b 4
00014D81 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D86 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D8B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014D90 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D95 04                         byte_1442B:	dc.b 4
00014D96 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014D9B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014DA0 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014DA5 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014DAA 04                         byte_14440:	dc.b 4
00014DAB E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014DB0 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014DB5 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014DBA 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014DC0 00                         		even
00014DC0 00                         		even
00014DC0                            
00014DC0                            Ani_obj4A:
00014DC0                            	include "_anim\obj4A.asm"
00014DC0                            ; ---------------------------------------------------------------------------
00014DC0                            ; Animation script - special stage entry effect from beta
00014DC0                            ; ---------------------------------------------------------------------------
00014DC0 0000                       		dc.w byte_14458-Ani_obj4A
00014DC2 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014DD6                            		even
00014DD6                            		even
00014DD6                            
00014DD6                            ; ---------------------------------------------------------------------------
00014DD6                            ; Sprite mappings - special stage entry	from beta
00014DD6                            ; ---------------------------------------------------------------------------
00014DD6                            Map_obj4A:
00014DD6                            	include "_maps\obj4A.asm"
00014DD6                            ; ---------------------------------------------------------------------------
00014DD6                            ; Sprite mappings - special stage entry	from beta
00014DD6                            ; ---------------------------------------------------------------------------
00014DD6 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014DDA 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014DDE 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014DE2 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014DE6 03                         byte_1447C:	dc.b 3
00014DE7 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014DEC 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014DF1 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014DF6 03                         byte_1448C:	dc.b 3
00014DF7 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014DFC 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014E01 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014E06 05                         byte_1449C:	dc.b 5
00014E07 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014E0C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014E11 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014E16 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014E1B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014E20 09                         byte_144B6:	dc.b 9
00014E21 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014E26 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014E2B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014E30 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014E35 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014E3A F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014E3F F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E44 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014E49 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014E4E 12                         byte_144E4:	dc.b $12
00014E4F 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014E54 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014E59 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014E5E 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014E63 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014E68 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014E6D 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014E72 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014E77 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E7C 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E81 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E86 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E8B F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014E90 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014E95 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014E9A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014E9F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014EA4 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014EA9 11                         byte_1453F:	dc.b $11
00014EAA F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014EAF F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014EB4 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014EB9 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014EBE 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014EC3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014EC8 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014ECD F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014ED2 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014ED7 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014EDC 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014EE1 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014EE6 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014EEB 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014EF0 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014EF5 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014EFA 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014EFF 09                         byte_14595:	dc.b 9
00014F00 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014F05 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014F0A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014F0F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014F14 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014F19 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014F1E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014F23 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014F28 04                         		dc.b 4
00014F29 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014F2E                            		even
00014F2E                            		even
00014F2E                            
00014F2E                            Ani_obj08:
00014F2E                            	include "_anim\obj08.asm"
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E                            ; Animation script - water splash (LZ)
00014F2E                            ; ---------------------------------------------------------------------------
00014F2E 0000                       		dc.w byte_145C6-Ani_obj08
00014F30 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014F36                            		even
00014F36                            		even
00014F36                            
00014F36                            ; ---------------------------------------------------------------------------
00014F36                            ; Sprite mappings - water splash (LZ)
00014F36                            ; ---------------------------------------------------------------------------
00014F36                            Map_obj08:
00014F36                            	include "_maps\obj08.asm"
00014F36                            ; ---------------------------------------------------------------------------
00014F36                            ; Sprite mappings - water splash (LZ)
00014F36                            ; ---------------------------------------------------------------------------
00014F36 0000                       		dc.w byte_145D2-Map_obj08
00014F38 0000                       		dc.w byte_145DD-Map_obj08
00014F3A 0000                       		dc.w byte_145E8-Map_obj08
00014F3C 02                         byte_145D2:	dc.b 2
00014F3D F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014F42 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014F47 02                         byte_145DD:	dc.b 2
00014F48 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014F4D EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014F52 01                         byte_145E8:	dc.b 1
00014F53 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014F58                            		even
00014F58                            		even
00014F58                            
00014F58                            ; ---------------------------------------------------------------------------
00014F58                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014F58                            ; ---------------------------------------------------------------------------
00014F58                            
00014F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F58                            
00014F58                            
00014F58                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F58 0828 0003 0022             		btst	#3,$22(a0)
00014F5E 6700                       		beq.s	loc_14602
00014F60 7000                       		moveq	#0,d0
00014F62 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F66 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F6A 4E75                       		rts	
00014F6C                            ; ===========================================================================
00014F6C                            
00014F6C                            loc_14602:
00014F6C 7003                       		moveq	#3,d0
00014F6E 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F72 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F76 1028 0026                  		move.b	$26(a0),d0
00014F7A 0600 0020                  		addi.b	#$20,d0
00014F7E 6A00                       		bpl.s	loc_14624
00014F80 1028 0026                  		move.b	$26(a0),d0
00014F84 6A00                       		bpl.s	loc_1461E
00014F86 5300                       		subq.b	#1,d0
00014F88                            
00014F88                            loc_1461E:
00014F88 0600 0020                  		addi.b	#$20,d0
00014F8C 6000                       		bra.s	loc_14630
00014F8E                            ; ===========================================================================
00014F8E                            
00014F8E                            loc_14624:
00014F8E 1028 0026                  		move.b	$26(a0),d0
00014F92 6A00                       		bpl.s	loc_1462C
00014F94 5200                       		addq.b	#1,d0
00014F96                            
00014F96                            loc_1462C:
00014F96 0600 001F                  		addi.b	#$1F,d0
00014F9A                            
00014F9A                            loc_14630:
00014F9A 0200 00C0                  		andi.b	#$C0,d0
00014F9E 0C00 0040                  		cmpi.b	#$40,d0
00014FA2 6700 0000                  		beq.w	Sonic_WalkVertL
00014FA6 0C00 0080                  		cmpi.b	#$80,d0
00014FAA 6700 0000                  		beq.w	Sonic_WalkCeiling
00014FAE 0C00 00C0                  		cmpi.b	#$C0,d0
00014FB2 6700 0000                  		beq.w	Sonic_WalkVertR
00014FB6 3428 000C                  		move.w	$C(a0),d2
00014FBA 3628 0008                  		move.w	8(a0),d3
00014FBE 7000                       		moveq	#0,d0
00014FC0 1028 0016                  		move.b	$16(a0),d0
00014FC4 4880                       		ext.w	d0
00014FC6 D440                       		add.w	d0,d2
00014FC8 1028 0017                  		move.b	$17(a0),d0
00014FCC 4880                       		ext.w	d0
00014FCE D640                       		add.w	d0,d3
00014FD0 49F8 F768                  		lea	($FFFFF768).w,a4
00014FD4 367C 0010                  		movea.w	#$10,a3
00014FD8 3C3C 0000                  		move.w	#0,d6
00014FDC 7A0D                       		moveq	#$D,d5
00014FDE 6100 0000                  		bsr.w	FindFloor
00014FE2 3F01                       		move.w	d1,-(sp)
00014FE4 3428 000C                  		move.w	$C(a0),d2
00014FE8 3628 0008                  		move.w	8(a0),d3
00014FEC 7000                       		moveq	#0,d0
00014FEE 1028 0016                  		move.b	$16(a0),d0
00014FF2 4880                       		ext.w	d0
00014FF4 D440                       		add.w	d0,d2
00014FF6 1028 0017                  		move.b	$17(a0),d0
00014FFA 4880                       		ext.w	d0
00014FFC 4440                       		neg.w	d0
00014FFE D640                       		add.w	d0,d3
00015000 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015004 367C 0010                  		movea.w	#$10,a3
00015008 3C3C 0000                  		move.w	#0,d6
0001500C 7A0D                       		moveq	#$D,d5
0001500E 6100 0000                  		bsr.w	FindFloor
00015012 301F                       		move.w	(sp)+,d0
00015014 6100 0000                  		bsr.w	Sonic_Angle
00015018 4A41                       		tst.w	d1
0001501A 6700                       		beq.s	locret_146BE
0001501C 6A00                       		bpl.s	loc_146C0
0001501E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015022 6D00                       		blt.s	locret_146E6
00015024 D368 000C                  		add.w	d1,$C(a0)
00015028                            
00015028                            locret_146BE:
00015028 4E75                       		rts	
0001502A                            ; ===========================================================================
0001502A                            
0001502A                            loc_146C0:
0001502A 0C41 000E                  		cmpi.w	#$E,d1
0001502E 6E00                       		bgt.s	loc_146CC
00015030                            
00015030                            loc_146C6:
00015030 D368 000C                  		add.w	d1,$C(a0)
00015034 4E75                       		rts	
00015036                            ; ===========================================================================
00015036                            
00015036                            loc_146CC:
00015036 4A28 0038                  		tst.b	$38(a0)
0001503A 66F4                       		bne.s	loc_146C6
0001503C 08E8 0001 0022             		bset	#1,$22(a0)
00015042 08A8 0005 0022             		bclr	#5,$22(a0)
00015048 117C 0001 001D             		move.b	#1,$1D(a0)
0001504E 4E75                       		rts	
00015050                            ; ===========================================================================
00015050                            
00015050                            locret_146E6:
00015050 4E75                       		rts	
00015052                            ; End of function Sonic_AnglePos
00015052                            
00015052                            ; ===========================================================================
00015052 2428 0008                  		move.l	8(a0),d2
00015056 3028 0010                  		move.w	$10(a0),d0
0001505A 48C0                       		ext.l	d0
0001505C E180                       		asl.l	#8,d0
0001505E 9480                       		sub.l	d0,d2
00015060 2142 0008                  		move.l	d2,8(a0)
00015064 303C 0038                  		move.w	#$38,d0
00015068 48C0                       		ext.l	d0
0001506A E180                       		asl.l	#8,d0
0001506C 9680                       		sub.l	d0,d3
0001506E 2143 000C                  		move.l	d3,$C(a0)
00015072 4E75                       		rts	
00015074                            ; ===========================================================================
00015074                            
00015074                            locret_1470A:
00015074 4E75                       		rts	
00015076                            ; ===========================================================================
00015076 2628 000C                  		move.l	$C(a0),d3
0001507A 3028 0012                  		move.w	$12(a0),d0
0001507E 0440 0038                  		subi.w	#$38,d0
00015082 3140 0012                  		move.w	d0,$12(a0)
00015086 48C0                       		ext.l	d0
00015088 E180                       		asl.l	#8,d0
0001508A 9680                       		sub.l	d0,d3
0001508C 2143 000C                  		move.l	d3,$C(a0)
00015090 4E75                       		rts	
00015092 4E75                       		rts	
00015094                            ; ===========================================================================
00015094 2428 0008                  		move.l	8(a0),d2
00015098 2628 000C                  		move.l	$C(a0),d3
0001509C 3028 0010                  		move.w	$10(a0),d0
000150A0 48C0                       		ext.l	d0
000150A2 E180                       		asl.l	#8,d0
000150A4 9480                       		sub.l	d0,d2
000150A6 3028 0012                  		move.w	$12(a0),d0
000150AA 48C0                       		ext.l	d0
000150AC E180                       		asl.l	#8,d0
000150AE 9680                       		sub.l	d0,d3
000150B0 2142 0008                  		move.l	d2,8(a0)
000150B4 2143 000C                  		move.l	d3,$C(a0)
000150B8 4E75                       		rts	
000150BA                            
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            ; Subroutine to	change Sonic's angle as he walks along the floor
000150BA                            ; ---------------------------------------------------------------------------
000150BA                            
000150BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150BA                            
000150BA                            
000150BA                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000150BA 1438 F76A                  		move.b	($FFFFF76A).w,d2
000150BE B240                       		cmp.w	d0,d1
000150C0 6F00                       		ble.s	loc_1475E
000150C2 1438 F768                  		move.b	($FFFFF768).w,d2
000150C6 3200                       		move.w	d0,d1
000150C8                            
000150C8                            loc_1475E:
000150C8 0802 0000                  		btst	#0,d2
000150CC 6600                       		bne.s	loc_1476A
000150CE 1142 0026                  		move.b	d2,$26(a0)
000150D2 4E75                       		rts	
000150D4                            ; ===========================================================================
000150D4                            
000150D4                            loc_1476A:
000150D4 1428 0026                  		move.b	$26(a0),d2
000150D8 0602 0020                  		addi.b	#$20,d2
000150DC 0202 00C0                  		andi.b	#$C0,d2
000150E0 1142 0026                  		move.b	d2,$26(a0)
000150E4 4E75                       		rts	
000150E6                            ; End of function Sonic_Angle
000150E6                            
000150E6                            ; ---------------------------------------------------------------------------
000150E6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000150E6                            ; ---------------------------------------------------------------------------
000150E6                            
000150E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150E6                            
000150E6                            
000150E6                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000150E6 3428 000C                  		move.w	$C(a0),d2
000150EA 3628 0008                  		move.w	8(a0),d3
000150EE 7000                       		moveq	#0,d0
000150F0 1028 0017                  		move.b	$17(a0),d0
000150F4 4880                       		ext.w	d0
000150F6 4440                       		neg.w	d0
000150F8 D440                       		add.w	d0,d2
000150FA 1028 0016                  		move.b	$16(a0),d0
000150FE 4880                       		ext.w	d0
00015100 D640                       		add.w	d0,d3
00015102 49F8 F768                  		lea	($FFFFF768).w,a4
00015106 367C 0010                  		movea.w	#$10,a3
0001510A 3C3C 0000                  		move.w	#0,d6
0001510E 7A0D                       		moveq	#$D,d5
00015110 6100 0000                  		bsr.w	FindWall
00015114 3F01                       		move.w	d1,-(sp)
00015116 3428 000C                  		move.w	$C(a0),d2
0001511A 3628 0008                  		move.w	8(a0),d3
0001511E 7000                       		moveq	#0,d0
00015120 1028 0017                  		move.b	$17(a0),d0
00015124 4880                       		ext.w	d0
00015126 D440                       		add.w	d0,d2
00015128 1028 0016                  		move.b	$16(a0),d0
0001512C 4880                       		ext.w	d0
0001512E D640                       		add.w	d0,d3
00015130 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015134 367C 0010                  		movea.w	#$10,a3
00015138 3C3C 0000                  		move.w	#0,d6
0001513C 7A0D                       		moveq	#$D,d5
0001513E 6100 0000                  		bsr.w	FindWall
00015142 301F                       		move.w	(sp)+,d0
00015144 6100 FF74                  		bsr.w	Sonic_Angle
00015148 4A41                       		tst.w	d1
0001514A 6700                       		beq.s	locret_147F0
0001514C 6A00                       		bpl.s	loc_147F2
0001514E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015152 6D00 FF20                  		blt.w	locret_1470A
00015156 D368 0008                  		add.w	d1,8(a0)
0001515A                            
0001515A                            locret_147F0:
0001515A 4E75                       		rts	
0001515C                            ; ===========================================================================
0001515C                            
0001515C                            loc_147F2:
0001515C 0C41 000E                  		cmpi.w	#$E,d1
00015160 6E00                       		bgt.s	loc_147FE
00015162                            
00015162                            loc_147F8:
00015162 D368 0008                  		add.w	d1,8(a0)
00015166 4E75                       		rts	
00015168                            ; ===========================================================================
00015168                            
00015168                            loc_147FE:
00015168 4A28 0038                  		tst.b	$38(a0)
0001516C 66F4                       		bne.s	loc_147F8
0001516E 08E8 0001 0022             		bset	#1,$22(a0)
00015174 08A8 0005 0022             		bclr	#5,$22(a0)
0001517A 117C 0001 001D             		move.b	#1,$1D(a0)
00015180 4E75                       		rts	
00015182                            ; End of function Sonic_WalkVertR
00015182                            
00015182                            ; ---------------------------------------------------------------------------
00015182                            ; Subroutine allowing Sonic to walk upside-down
00015182                            ; ---------------------------------------------------------------------------
00015182                            
00015182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015182                            
00015182                            
00015182                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015182 3428 000C                  		move.w	$C(a0),d2
00015186 3628 0008                  		move.w	8(a0),d3
0001518A 7000                       		moveq	#0,d0
0001518C 1028 0016                  		move.b	$16(a0),d0
00015190 4880                       		ext.w	d0
00015192 9440                       		sub.w	d0,d2
00015194 0A42 000F                  		eori.w	#$F,d2
00015198 1028 0017                  		move.b	$17(a0),d0
0001519C 4880                       		ext.w	d0
0001519E D640                       		add.w	d0,d3
000151A0 49F8 F768                  		lea	($FFFFF768).w,a4
000151A4 367C FFF0                  		movea.w	#-$10,a3
000151A8 3C3C 1000                  		move.w	#$1000,d6
000151AC 7A0D                       		moveq	#$D,d5
000151AE 6100 0000                  		bsr.w	FindFloor
000151B2 3F01                       		move.w	d1,-(sp)
000151B4 3428 000C                  		move.w	$C(a0),d2
000151B8 3628 0008                  		move.w	8(a0),d3
000151BC 7000                       		moveq	#0,d0
000151BE 1028 0016                  		move.b	$16(a0),d0
000151C2 4880                       		ext.w	d0
000151C4 9440                       		sub.w	d0,d2
000151C6 0A42 000F                  		eori.w	#$F,d2
000151CA 1028 0017                  		move.b	$17(a0),d0
000151CE 4880                       		ext.w	d0
000151D0 9640                       		sub.w	d0,d3
000151D2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151D6 367C FFF0                  		movea.w	#-$10,a3
000151DA 3C3C 1000                  		move.w	#$1000,d6
000151DE 7A0D                       		moveq	#$D,d5
000151E0 6100 0000                  		bsr.w	FindFloor
000151E4 301F                       		move.w	(sp)+,d0
000151E6 6100 FED2                  		bsr.w	Sonic_Angle
000151EA 4A41                       		tst.w	d1
000151EC 6700                       		beq.s	locret_14892
000151EE 6A00                       		bpl.s	loc_14894
000151F0 0C41 FFF2                  		cmpi.w	#-$E,d1
000151F4 6D00 FE5A                  		blt.w	locret_146E6
000151F8 9368 000C                  		sub.w	d1,$C(a0)
000151FC                            
000151FC                            locret_14892:
000151FC 4E75                       		rts	
000151FE                            ; ===========================================================================
000151FE                            
000151FE                            loc_14894:
000151FE 0C41 000E                  		cmpi.w	#$E,d1
00015202 6E00                       		bgt.s	loc_148A0
00015204                            
00015204                            loc_1489A:
00015204 9368 000C                  		sub.w	d1,$C(a0)
00015208 4E75                       		rts	
0001520A                            ; ===========================================================================
0001520A                            
0001520A                            loc_148A0:
0001520A 4A28 0038                  		tst.b	$38(a0)
0001520E 66F4                       		bne.s	loc_1489A
00015210 08E8 0001 0022             		bset	#1,$22(a0)
00015216 08A8 0005 0022             		bclr	#5,$22(a0)
0001521C 117C 0001 001D             		move.b	#1,$1D(a0)
00015222 4E75                       		rts	
00015224                            ; End of function Sonic_WalkCeiling
00015224                            
00015224                            ; ---------------------------------------------------------------------------
00015224                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015224                            ; ---------------------------------------------------------------------------
00015224                            
00015224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015224                            
00015224                            
00015224                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015224 3428 000C                  		move.w	$C(a0),d2
00015228 3628 0008                  		move.w	8(a0),d3
0001522C 7000                       		moveq	#0,d0
0001522E 1028 0017                  		move.b	$17(a0),d0
00015232 4880                       		ext.w	d0
00015234 9440                       		sub.w	d0,d2
00015236 1028 0016                  		move.b	$16(a0),d0
0001523A 4880                       		ext.w	d0
0001523C 9640                       		sub.w	d0,d3
0001523E 0A43 000F                  		eori.w	#$F,d3
00015242 49F8 F768                  		lea	($FFFFF768).w,a4
00015246 367C FFF0                  		movea.w	#-$10,a3
0001524A 3C3C 0800                  		move.w	#$800,d6
0001524E 7A0D                       		moveq	#$D,d5
00015250 6100 0000                  		bsr.w	FindWall
00015254 3F01                       		move.w	d1,-(sp)
00015256 3428 000C                  		move.w	$C(a0),d2
0001525A 3628 0008                  		move.w	8(a0),d3
0001525E 7000                       		moveq	#0,d0
00015260 1028 0017                  		move.b	$17(a0),d0
00015264 4880                       		ext.w	d0
00015266 D440                       		add.w	d0,d2
00015268 1028 0016                  		move.b	$16(a0),d0
0001526C 4880                       		ext.w	d0
0001526E 9640                       		sub.w	d0,d3
00015270 0A43 000F                  		eori.w	#$F,d3
00015274 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015278 367C FFF0                  		movea.w	#-$10,a3
0001527C 3C3C 0800                  		move.w	#$800,d6
00015280 7A0D                       		moveq	#$D,d5
00015282 6100 0000                  		bsr.w	FindWall
00015286 301F                       		move.w	(sp)+,d0
00015288 6100 FE30                  		bsr.w	Sonic_Angle
0001528C 4A41                       		tst.w	d1
0001528E 6700                       		beq.s	locret_14934
00015290 6A00                       		bpl.s	loc_14936
00015292 0C41 FFF2                  		cmpi.w	#-$E,d1
00015296 6D00 FDDC                  		blt.w	locret_1470A
0001529A 9368 0008                  		sub.w	d1,8(a0)
0001529E                            
0001529E                            locret_14934:
0001529E 4E75                       		rts	
000152A0                            ; ===========================================================================
000152A0                            
000152A0                            loc_14936:
000152A0 0C41 000E                  		cmpi.w	#$E,d1
000152A4 6E00                       		bgt.s	loc_14942
000152A6                            
000152A6                            loc_1493C:
000152A6 9368 0008                  		sub.w	d1,8(a0)
000152AA 4E75                       		rts	
000152AC                            ; ===========================================================================
000152AC                            
000152AC                            loc_14942:
000152AC 4A28 0038                  		tst.b	$38(a0)
000152B0 66F4                       		bne.s	loc_1493C
000152B2 08E8 0001 0022             		bset	#1,$22(a0)
000152B8 08A8 0005 0022             		bclr	#5,$22(a0)
000152BE 117C 0001 001D             		move.b	#1,$1D(a0)
000152C4 4E75                       		rts	
000152C6                            ; End of function Sonic_WalkVertL
000152C6                            
000152C6                            ; ---------------------------------------------------------------------------
000152C6                            ; Subroutine to	find which tile	the object is standing on
000152C6                            ; ---------------------------------------------------------------------------
000152C6                            
000152C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152C6                            
000152C6                            
000152C6                            Floor_ChkTile:				; XREF: FindFloor; et al
000152C6 3002                       		move.w	d2,d0
000152C8 E248                       		lsr.w	#1,d0
000152CA 0240 0380                  		andi.w	#$380,d0
000152CE 3203                       		move.w	d3,d1
000152D0 E049                       		lsr.w	#8,d1
000152D2 0241 007F                  		andi.w	#$7F,d1
000152D6 D041                       		add.w	d1,d0
000152D8 72FF                       		moveq	#-1,d1
000152DA 43F8 A400                  		lea	($FFFFA400).w,a1
000152DE 1231 0000                  		move.b	(a1,d0.w),d1
000152E2 6700                       		beq.s	loc_14996
000152E4 6B00                       		bmi.s	loc_1499A
000152E6 5301                       		subq.b	#1,d1
000152E8 4881                       		ext.w	d1
000152EA EE59                       		ror.w	#7,d1
000152EC 3002                       		move.w	d2,d0
000152EE D040                       		add.w	d0,d0
000152F0 0240 01E0                  		andi.w	#$1E0,d0
000152F4 D240                       		add.w	d0,d1
000152F6 3003                       		move.w	d3,d0
000152F8 E648                       		lsr.w	#3,d0
000152FA 0240 001E                  		andi.w	#$1E,d0
000152FE D240                       		add.w	d0,d1
00015300                            
00015300                            loc_14996:
00015300 2241                       		movea.l	d1,a1
00015302 4E75                       		rts	
00015304                            ; ===========================================================================
00015304                            
00015304                            loc_1499A:
00015304 0241 007F                  		andi.w	#$7F,d1
00015308 0828 0006 0001             		btst	#6,1(a0)
0001530E 6700                       		beq.s	loc_149B2
00015310 5241                       		addq.w	#1,d1
00015312 0C41 0029                  		cmpi.w	#$29,d1
00015316 6600                       		bne.s	loc_149B2
00015318 323C 0051                  		move.w	#$51,d1
0001531C                            
0001531C                            loc_149B2:
0001531C 5301                       		subq.b	#1,d1
0001531E EE59                       		ror.w	#7,d1
00015320 3002                       		move.w	d2,d0
00015322 D040                       		add.w	d0,d0
00015324 0240 01E0                  		andi.w	#$1E0,d0
00015328 D240                       		add.w	d0,d1
0001532A 3003                       		move.w	d3,d0
0001532C E648                       		lsr.w	#3,d0
0001532E 0240 001E                  		andi.w	#$1E,d0
00015332 D240                       		add.w	d0,d1
00015334 2241                       		movea.l	d1,a1
00015336 4E75                       		rts	
00015338                            ; End of function Floor_ChkTile
00015338                            
00015338                            
00015338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015338                            
00015338                            
00015338                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015338 618C                       		bsr.s	Floor_ChkTile
0001533A 3011                       		move.w	(a1),d0
0001533C 3800                       		move.w	d0,d4
0001533E 0240 07FF                  		andi.w	#$7FF,d0
00015342 6700                       		beq.s	loc_149DE
00015344 0B04                       		btst	d5,d4
00015346 6600                       		bne.s	loc_149EC
00015348                            
00015348                            loc_149DE:
00015348 D44B                       		add.w	a3,d2
0001534A 6100 0000                  		bsr.w	FindFloor2
0001534E 944B                       		sub.w	a3,d2
00015350 0641 0010                  		addi.w	#$10,d1
00015354 4E75                       		rts	
00015356                            ; ===========================================================================
00015356                            
00015356                            loc_149EC:
00015356 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
0001535A 1032 0000                  		move.b	(a2,d0.w),d0
0001535E 0240 00FF                  		andi.w	#$FF,d0
00015362 67E4                       		beq.s	loc_149DE
00015364 45F9 0000 0000             		lea	(AngleMap).l,a2
0001536A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001536E E948                       		lsl.w	#4,d0
00015370 3203                       		move.w	d3,d1
00015372 0804 000B                  		btst	#$B,d4
00015376 6700                       		beq.s	loc_14A12
00015378 4641                       		not.w	d1
0001537A 4414                       		neg.b	(a4)
0001537C                            
0001537C                            loc_14A12:
0001537C 0804 000C                  		btst	#$C,d4
00015380 6700                       		beq.s	loc_14A22
00015382 0614 0040                  		addi.b	#$40,(a4)
00015386 4414                       		neg.b	(a4)
00015388 0414 0040                  		subi.b	#$40,(a4)
0001538C                            
0001538C                            loc_14A22:
0001538C 0241 000F                  		andi.w	#$F,d1
00015390 D240                       		add.w	d0,d1
00015392 45F9 0000 0000             		lea	(CollArray1).l,a2
00015398 1032 1000                  		move.b	(a2,d1.w),d0
0001539C 4880                       		ext.w	d0
0001539E BD44                       		eor.w	d6,d4
000153A0 0804 000C                  		btst	#$C,d4
000153A4 6700                       		beq.s	loc_14A3E
000153A6 4440                       		neg.w	d0
000153A8                            
000153A8                            loc_14A3E:
000153A8 4A40                       		tst.w	d0
000153AA 679C                       		beq.s	loc_149DE
000153AC 6B00                       		bmi.s	loc_14A5A
000153AE 0C00 0010                  		cmpi.b	#$10,d0
000153B2 6700                       		beq.s	loc_14A66
000153B4 3202                       		move.w	d2,d1
000153B6 0241 000F                  		andi.w	#$F,d1
000153BA D041                       		add.w	d1,d0
000153BC 323C 000F                  		move.w	#$F,d1
000153C0 9240                       		sub.w	d0,d1
000153C2 4E75                       		rts	
000153C4                            ; ===========================================================================
000153C4                            
000153C4                            loc_14A5A:
000153C4 3202                       		move.w	d2,d1
000153C6 0241 000F                  		andi.w	#$F,d1
000153CA D041                       		add.w	d1,d0
000153CC 6A00 FF7A                  		bpl.w	loc_149DE
000153D0                            
000153D0                            loc_14A66:
000153D0 944B                       		sub.w	a3,d2
000153D2 6100 0000                  		bsr.w	FindFloor2
000153D6 D44B                       		add.w	a3,d2
000153D8 0441 0010                  		subi.w	#$10,d1
000153DC 4E75                       		rts	
000153DE                            ; End of function FindFloor
000153DE                            
000153DE                            
000153DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153DE                            
000153DE                            
000153DE                            FindFloor2:				; XREF: FindFloor
000153DE 6100 FEE6                  		bsr.w	Floor_ChkTile
000153E2 3011                       		move.w	(a1),d0
000153E4 3800                       		move.w	d0,d4
000153E6 0240 07FF                  		andi.w	#$7FF,d0
000153EA 6700                       		beq.s	loc_14A86
000153EC 0B04                       		btst	d5,d4
000153EE 6600                       		bne.s	loc_14A94
000153F0                            
000153F0                            loc_14A86:
000153F0 323C 000F                  		move.w	#$F,d1
000153F4 3002                       		move.w	d2,d0
000153F6 0240 000F                  		andi.w	#$F,d0
000153FA 9240                       		sub.w	d0,d1
000153FC 4E75                       		rts	
000153FE                            ; ===========================================================================
000153FE                            
000153FE                            loc_14A94:
000153FE 2478 F796                  		movea.l	($FFFFF796).w,a2
00015402 1032 0000                  		move.b	(a2,d0.w),d0
00015406 0240 00FF                  		andi.w	#$FF,d0
0001540A 67E4                       		beq.s	loc_14A86
0001540C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015412 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015416 E948                       		lsl.w	#4,d0
00015418 3203                       		move.w	d3,d1
0001541A 0804 000B                  		btst	#$B,d4
0001541E 6700                       		beq.s	loc_14ABA
00015420 4641                       		not.w	d1
00015422 4414                       		neg.b	(a4)
00015424                            
00015424                            loc_14ABA:
00015424 0804 000C                  		btst	#$C,d4
00015428 6700                       		beq.s	loc_14ACA
0001542A 0614 0040                  		addi.b	#$40,(a4)
0001542E 4414                       		neg.b	(a4)
00015430 0414 0040                  		subi.b	#$40,(a4)
00015434                            
00015434                            loc_14ACA:
00015434 0241 000F                  		andi.w	#$F,d1
00015438 D240                       		add.w	d0,d1
0001543A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015440 1032 1000                  		move.b	(a2,d1.w),d0
00015444 4880                       		ext.w	d0
00015446 BD44                       		eor.w	d6,d4
00015448 0804 000C                  		btst	#$C,d4
0001544C 6700                       		beq.s	loc_14AE6
0001544E 4440                       		neg.w	d0
00015450                            
00015450                            loc_14AE6:
00015450 4A40                       		tst.w	d0
00015452 679C                       		beq.s	loc_14A86
00015454 6B00                       		bmi.s	loc_14AFC
00015456 3202                       		move.w	d2,d1
00015458 0241 000F                  		andi.w	#$F,d1
0001545C D041                       		add.w	d1,d0
0001545E 323C 000F                  		move.w	#$F,d1
00015462 9240                       		sub.w	d0,d1
00015464 4E75                       		rts	
00015466                            ; ===========================================================================
00015466                            
00015466                            loc_14AFC:
00015466 3202                       		move.w	d2,d1
00015468 0241 000F                  		andi.w	#$F,d1
0001546C D041                       		add.w	d1,d0
0001546E 6A00 FF80                  		bpl.w	loc_14A86
00015472 4641                       		not.w	d1
00015474 4E75                       		rts	
00015476                            ; End of function FindFloor2
00015476                            
00015476                            
00015476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015476                            
00015476                            
00015476                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015476 6100 FE4E                  		bsr.w	Floor_ChkTile
0001547A 3011                       		move.w	(a1),d0
0001547C 3800                       		move.w	d0,d4
0001547E 0240 07FF                  		andi.w	#$7FF,d0
00015482 6700                       		beq.s	loc_14B1E
00015484 0B04                       		btst	d5,d4
00015486 6600                       		bne.s	loc_14B2C
00015488                            
00015488                            loc_14B1E:
00015488 D64B                       		add.w	a3,d3
0001548A 6100 0000                  		bsr.w	FindWall2
0001548E 964B                       		sub.w	a3,d3
00015490 0641 0010                  		addi.w	#$10,d1
00015494 4E75                       		rts	
00015496                            ; ===========================================================================
00015496                            
00015496                            loc_14B2C:
00015496 2478 F796                  		movea.l	($FFFFF796).w,a2
0001549A 1032 0000                  		move.b	(a2,d0.w),d0
0001549E 0240 00FF                  		andi.w	#$FF,d0
000154A2 67E4                       		beq.s	loc_14B1E
000154A4 45F9 0000 0000             		lea	(AngleMap).l,a2
000154AA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000154AE E948                       		lsl.w	#4,d0
000154B0 3202                       		move.w	d2,d1
000154B2 0804 000C                  		btst	#$C,d4
000154B6 6700                       		beq.s	loc_14B5A
000154B8 4641                       		not.w	d1
000154BA 0614 0040                  		addi.b	#$40,(a4)
000154BE 4414                       		neg.b	(a4)
000154C0 0414 0040                  		subi.b	#$40,(a4)
000154C4                            
000154C4                            loc_14B5A:
000154C4 0804 000B                  		btst	#$B,d4
000154C8 6700                       		beq.s	loc_14B62
000154CA 4414                       		neg.b	(a4)
000154CC                            
000154CC                            loc_14B62:
000154CC 0241 000F                  		andi.w	#$F,d1
000154D0 D240                       		add.w	d0,d1
000154D2 45F9 0000 0000             		lea	(CollArray2).l,a2
000154D8 1032 1000                  		move.b	(a2,d1.w),d0
000154DC 4880                       		ext.w	d0
000154DE BD44                       		eor.w	d6,d4
000154E0 0804 000B                  		btst	#$B,d4
000154E4 6700                       		beq.s	loc_14B7E
000154E6 4440                       		neg.w	d0
000154E8                            
000154E8                            loc_14B7E:
000154E8 4A40                       		tst.w	d0
000154EA 679C                       		beq.s	loc_14B1E
000154EC 6B00                       		bmi.s	loc_14B9A
000154EE 0C00 0010                  		cmpi.b	#$10,d0
000154F2 6700                       		beq.s	loc_14BA6
000154F4 3203                       		move.w	d3,d1
000154F6 0241 000F                  		andi.w	#$F,d1
000154FA D041                       		add.w	d1,d0
000154FC 323C 000F                  		move.w	#$F,d1
00015500 9240                       		sub.w	d0,d1
00015502 4E75                       		rts	
00015504                            ; ===========================================================================
00015504                            
00015504                            loc_14B9A:
00015504 3203                       		move.w	d3,d1
00015506 0241 000F                  		andi.w	#$F,d1
0001550A D041                       		add.w	d1,d0
0001550C 6A00 FF7A                  		bpl.w	loc_14B1E
00015510                            
00015510                            loc_14BA6:
00015510 964B                       		sub.w	a3,d3
00015512 6100 0000                  		bsr.w	FindWall2
00015516 D64B                       		add.w	a3,d3
00015518 0441 0010                  		subi.w	#$10,d1
0001551C 4E75                       		rts	
0001551E                            ; End of function FindWall
0001551E                            
0001551E                            
0001551E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001551E                            
0001551E                            
0001551E                            FindWall2:				; XREF: FindWall
0001551E 6100 FDA6                  		bsr.w	Floor_ChkTile
00015522 3011                       		move.w	(a1),d0
00015524 3800                       		move.w	d0,d4
00015526 0240 07FF                  		andi.w	#$7FF,d0
0001552A 6700                       		beq.s	loc_14BC6
0001552C 0B04                       		btst	d5,d4
0001552E 6600                       		bne.s	loc_14BD4
00015530                            
00015530                            loc_14BC6:
00015530 323C 000F                  		move.w	#$F,d1
00015534 3003                       		move.w	d3,d0
00015536 0240 000F                  		andi.w	#$F,d0
0001553A 9240                       		sub.w	d0,d1
0001553C 4E75                       		rts	
0001553E                            ; ===========================================================================
0001553E                            
0001553E                            loc_14BD4:
0001553E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015542 1032 0000                  		move.b	(a2,d0.w),d0
00015546 0240 00FF                  		andi.w	#$FF,d0
0001554A 67E4                       		beq.s	loc_14BC6
0001554C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015552 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015556 E948                       		lsl.w	#4,d0
00015558 3202                       		move.w	d2,d1
0001555A 0804 000C                  		btst	#$C,d4
0001555E 6700                       		beq.s	loc_14C02
00015560 4641                       		not.w	d1
00015562 0614 0040                  		addi.b	#$40,(a4)
00015566 4414                       		neg.b	(a4)
00015568 0414 0040                  		subi.b	#$40,(a4)
0001556C                            
0001556C                            loc_14C02:
0001556C 0804 000B                  		btst	#$B,d4
00015570 6700                       		beq.s	loc_14C0A
00015572 4414                       		neg.b	(a4)
00015574                            
00015574                            loc_14C0A:
00015574 0241 000F                  		andi.w	#$F,d1
00015578 D240                       		add.w	d0,d1
0001557A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015580 1032 1000                  		move.b	(a2,d1.w),d0
00015584 4880                       		ext.w	d0
00015586 BD44                       		eor.w	d6,d4
00015588 0804 000B                  		btst	#$B,d4
0001558C 6700                       		beq.s	loc_14C26
0001558E 4440                       		neg.w	d0
00015590                            
00015590                            loc_14C26:
00015590 4A40                       		tst.w	d0
00015592 679C                       		beq.s	loc_14BC6
00015594 6B00                       		bmi.s	loc_14C3C
00015596 3203                       		move.w	d3,d1
00015598 0241 000F                  		andi.w	#$F,d1
0001559C D041                       		add.w	d1,d0
0001559E 323C 000F                  		move.w	#$F,d1
000155A2 9240                       		sub.w	d0,d1
000155A4 4E75                       		rts	
000155A6                            ; ===========================================================================
000155A6                            
000155A6                            loc_14C3C:
000155A6 3203                       		move.w	d3,d1
000155A8 0241 000F                  		andi.w	#$F,d1
000155AC D041                       		add.w	d1,d0
000155AE 6A00 FF80                  		bpl.w	loc_14BC6
000155B2 4641                       		not.w	d1
000155B4 4E75                       		rts	
000155B6                            ; End of function FindWall2
000155B6                            
000155B6                            ; ---------------------------------------------------------------------------
000155B6                            ; Unused floor/wall subroutine - logs something	to do with collision
000155B6                            ; ---------------------------------------------------------------------------
000155B6                            
000155B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B6                            
000155B6                            
000155B6                            FloorLog_Unk:				; XREF: Level
000155B6 4E75                       		rts	
000155B8                            
000155B8 43F9 0000 0000             		lea	(CollArray1).l,a1
000155BE 45F9 0000 0000             		lea	(CollArray1).l,a2
000155C4 363C 00FF                  		move.w	#$FF,d3
000155C8                            
000155C8                            loc_14C5E:
000155C8 7A10                       		moveq	#$10,d5
000155CA 343C 000F                  		move.w	#$F,d2
000155CE                            
000155CE                            loc_14C64:
000155CE 7800                       		moveq	#0,d4
000155D0 323C 000F                  		move.w	#$F,d1
000155D4                            
000155D4                            loc_14C6A:
000155D4 3019                       		move.w	(a1)+,d0
000155D6 EAA8                       		lsr.l	d5,d0
000155D8 D944                       		addx.w	d4,d4
000155DA 51C9 FFF8                  		dbf	d1,loc_14C6A
000155DE                            
000155DE 34C4                       		move.w	d4,(a2)+
000155E0 92FC 0020                  		suba.w	#$20,a1
000155E4 5345                       		subq.w	#1,d5
000155E6 51CA FFE6                  		dbf	d2,loc_14C64
000155EA                            
000155EA D2FC 0020                  		adda.w	#$20,a1
000155EE 51CB FFD8                  		dbf	d3,loc_14C5E
000155F2                            
000155F2 43F9 0000 0000             		lea	(CollArray1).l,a1
000155F8 45F9 0000 0000             		lea	(CollArray2).l,a2
000155FE 6100                       		bsr.s	FloorLog_Unk2
00015600 43F9 0000 0000             		lea	(CollArray1).l,a1
00015606 45F9 0000 0000             		lea	(CollArray1).l,a2
0001560C                            
0001560C                            ; End of function FloorLog_Unk
0001560C                            
0001560C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001560C                            
0001560C                            
0001560C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001560C 363C 0FFF                  		move.w	#$FFF,d3
00015610                            
00015610                            loc_14CA6:
00015610 7400                       		moveq	#0,d2
00015612 323C 000F                  		move.w	#$F,d1
00015616 3019                       		move.w	(a1)+,d0
00015618 6700                       		beq.s	loc_14CD4
0001561A 6B00                       		bmi.s	loc_14CBE
0001561C                            
0001561C                            loc_14CB2:
0001561C E248                       		lsr.w	#1,d0
0001561E 6400                       		bcc.s	loc_14CB8
00015620 5202                       		addq.b	#1,d2
00015622                            
00015622                            loc_14CB8:
00015622 51C9 FFF8                  		dbf	d1,loc_14CB2
00015626                            
00015626 6000                       		bra.s	loc_14CD6
00015628                            ; ===========================================================================
00015628                            
00015628                            loc_14CBE:
00015628 0C40 FFFF                  		cmpi.w	#-1,d0
0001562C 6700                       		beq.s	loc_14CD0
0001562E                            
0001562E                            loc_14CC4:
0001562E E348                       		lsl.w	#1,d0
00015630 6400                       		bcc.s	loc_14CCA
00015632 5302                       		subq.b	#1,d2
00015634                            
00015634                            loc_14CCA:
00015634 51C9 FFF8                  		dbf	d1,loc_14CC4
00015638                            
00015638 6000                       		bra.s	loc_14CD6
0001563A                            ; ===========================================================================
0001563A                            
0001563A                            loc_14CD0:
0001563A 303C 0010                  		move.w	#$10,d0
0001563E                            
0001563E                            loc_14CD4:
0001563E 3400                       		move.w	d0,d2
00015640                            
00015640                            loc_14CD6:
00015640 14C2                       		move.b	d2,(a2)+
00015642 51CB FFCC                  		dbf	d3,loc_14CA6
00015646                            
00015646 4E75                       		rts	
00015648                            
00015648                            ; End of function FloorLog_Unk2
00015648                            
00015648                            
00015648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015648                            
00015648                            
00015648                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015648 2628 0008                  		move.l	8(a0),d3
0001564C 2428 000C                  		move.l	$C(a0),d2
00015650 3228 0010                  		move.w	$10(a0),d1
00015654 48C1                       		ext.l	d1
00015656 E181                       		asl.l	#8,d1
00015658 D681                       		add.l	d1,d3
0001565A 3228 0012                  		move.w	$12(a0),d1
0001565E 48C1                       		ext.l	d1
00015660 E181                       		asl.l	#8,d1
00015662 D481                       		add.l	d1,d2
00015664 4842                       		swap	d2
00015666 4843                       		swap	d3
00015668 11C0 F768                  		move.b	d0,($FFFFF768).w
0001566C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015670 1200                       		move.b	d0,d1
00015672 0600 0020                  		addi.b	#$20,d0
00015676 6A00                       		bpl.s	loc_14D1A
00015678 1001                       		move.b	d1,d0
0001567A 6A00                       		bpl.s	loc_14D14
0001567C 5300                       		subq.b	#1,d0
0001567E                            
0001567E                            loc_14D14:
0001567E 0600 0020                  		addi.b	#$20,d0
00015682 6000                       		bra.s	loc_14D24
00015684                            ; ===========================================================================
00015684                            
00015684                            loc_14D1A:
00015684 1001                       		move.b	d1,d0
00015686 6A00                       		bpl.s	loc_14D20
00015688 5200                       		addq.b	#1,d0
0001568A                            
0001568A                            loc_14D20:
0001568A 0600 001F                  		addi.b	#$1F,d0
0001568E                            
0001568E                            loc_14D24:
0001568E 0200 00C0                  		andi.b	#$C0,d0
00015692 6700 0000                  		beq.w	loc_14DF0
00015696 0C00 0080                  		cmpi.b	#$80,d0
0001569A 6700 0000                  		beq.w	loc_14F7C
0001569E 0201 0038                  		andi.b	#$38,d1
000156A2 6600                       		bne.s	loc_14D3C
000156A4 5042                       		addq.w	#8,d2
000156A6                            
000156A6                            loc_14D3C:
000156A6 0C00 0040                  		cmpi.b	#$40,d0
000156AA 6700 0000                  		beq.w	loc_1504A
000156AE 6000 0000                  		bra.w	loc_14EBC
000156B2                            
000156B2                            ; End of function Sonic_WalkSpeed
000156B2                            
000156B2                            
000156B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156B2                            
000156B2                            
000156B2                            sub_14D48:				; XREF: Sonic_Jump
000156B2 11C0 F768                  		move.b	d0,($FFFFF768).w
000156B6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000156BA 0600 0020                  		addi.b	#$20,d0
000156BE 0200 00C0                  		andi.b	#$C0,d0
000156C2 0C00 0040                  		cmpi.b	#$40,d0
000156C6 6700 0000                  		beq.w	loc_14FD6
000156CA 0C00 0080                  		cmpi.b	#$80,d0
000156CE 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000156D2 0C00 00C0                  		cmpi.b	#$C0,d0
000156D6 6700 0000                  		beq.w	sub_14E50
000156DA                            
000156DA                            ; End of function sub_14D48
000156DA                            
000156DA                            ; ---------------------------------------------------------------------------
000156DA                            ; Subroutine to	make Sonic land	on the floor after jumping
000156DA                            ; ---------------------------------------------------------------------------
000156DA                            
000156DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156DA                            
000156DA                            
000156DA                            Sonic_HitFloor:				; XREF: Sonic_Floor
000156DA 3428 000C                  		move.w	$C(a0),d2
000156DE 3628 0008                  		move.w	8(a0),d3
000156E2 7000                       		moveq	#0,d0
000156E4 1028 0016                  		move.b	$16(a0),d0
000156E8 4880                       		ext.w	d0
000156EA D440                       		add.w	d0,d2
000156EC 1028 0017                  		move.b	$17(a0),d0
000156F0 4880                       		ext.w	d0
000156F2 D640                       		add.w	d0,d3
000156F4 49F8 F768                  		lea	($FFFFF768).w,a4
000156F8 367C 0010                  		movea.w	#$10,a3
000156FC 3C3C 0000                  		move.w	#0,d6
00015700 7A0D                       		moveq	#$D,d5
00015702 6100 FC34                  		bsr.w	FindFloor
00015706 3F01                       		move.w	d1,-(sp)
00015708 3428 000C                  		move.w	$C(a0),d2
0001570C 3628 0008                  		move.w	8(a0),d3
00015710 7000                       		moveq	#0,d0
00015712 1028 0016                  		move.b	$16(a0),d0
00015716 4880                       		ext.w	d0
00015718 D440                       		add.w	d0,d2
0001571A 1028 0017                  		move.b	$17(a0),d0
0001571E 4880                       		ext.w	d0
00015720 9640                       		sub.w	d0,d3
00015722 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015726 367C 0010                  		movea.w	#$10,a3
0001572A 3C3C 0000                  		move.w	#0,d6
0001572E 7A0D                       		moveq	#$D,d5
00015730 6100 FC06                  		bsr.w	FindFloor
00015734 301F                       		move.w	(sp)+,d0
00015736 143C 0000                  		move.b	#0,d2
0001573A                            
0001573A                            loc_14DD0:
0001573A 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001573E B240                       		cmp.w	d0,d1
00015740 6F00                       		ble.s	loc_14DDE
00015742 1638 F768                  		move.b	($FFFFF768).w,d3
00015746 C141                       		exg	d0,d1
00015748                            
00015748                            loc_14DDE:
00015748 0803 0000                  		btst	#0,d3
0001574C 6700                       		beq.s	locret_14DE6
0001574E 1602                       		move.b	d2,d3
00015750                            
00015750                            locret_14DE6:
00015750 4E75                       		rts	
00015752                            
00015752                            ; End of function Sonic_HitFloor
00015752                            
00015752                            ; ===========================================================================
00015752 3428 000C                  		move.w	$C(a0),d2
00015756 3628 0008                  		move.w	8(a0),d3
0001575A                            
0001575A                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001575A 0642 000A                  		addi.w	#$A,d2
0001575E 49F8 F768                  		lea	($FFFFF768).w,a4
00015762 367C 0010                  		movea.w	#$10,a3
00015766 3C3C 0000                  		move.w	#0,d6
0001576A 7A0E                       		moveq	#$E,d5
0001576C 6100 FBCA                  		bsr.w	FindFloor
00015770 143C 0000                  		move.b	#0,d2
00015774                            
00015774                            loc_14E0A:				; XREF: sub_14EB4
00015774 1638 F768                  		move.b	($FFFFF768).w,d3
00015778 0803 0000                  		btst	#0,d3
0001577C 6700                       		beq.s	locret_14E16
0001577E 1602                       		move.b	d2,d3
00015780                            
00015780                            locret_14E16:
00015780 4E75                       		rts	
00015782                            
00015782                            ; ---------------------------------------------------------------------------
00015782                            ; Subroutine allowing objects to interact with the floor
00015782                            ; ---------------------------------------------------------------------------
00015782                            
00015782                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015782                            
00015782                            
00015782                            ObjHitFloor:
00015782 3628 0008                  		move.w	8(a0),d3
00015786                            
00015786                            ; End of function ObjHitFloor
00015786                            
00015786                            
00015786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015786                            
00015786                            
00015786                            ObjHitFloor2:
00015786 3428 000C                  		move.w	$C(a0),d2
0001578A 7000                       		moveq	#0,d0
0001578C 1028 0016                  		move.b	$16(a0),d0
00015790 4880                       		ext.w	d0
00015792 D440                       		add.w	d0,d2
00015794 49F8 F768                  		lea	($FFFFF768).w,a4
00015798 18BC 0000                  		move.b	#0,(a4)
0001579C 367C 0010                  		movea.w	#$10,a3
000157A0 3C3C 0000                  		move.w	#0,d6
000157A4 7A0D                       		moveq	#$D,d5
000157A6 6100 FB90                  		bsr.w	FindFloor
000157AA 1638 F768                  		move.b	($FFFFF768).w,d3
000157AE 0803 0000                  		btst	#0,d3
000157B2 6700                       		beq.s	locret_14E4E
000157B4 163C 0000                  		move.b	#0,d3
000157B8                            
000157B8                            locret_14E4E:
000157B8 4E75                       		rts	
000157BA                            ; End of function ObjHitFloor2
000157BA                            
000157BA                            
000157BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157BA                            
000157BA                            
000157BA                            sub_14E50:				; XREF: sub_14D48
000157BA 3428 000C                  		move.w	$C(a0),d2
000157BE 3628 0008                  		move.w	8(a0),d3
000157C2 7000                       		moveq	#0,d0
000157C4 1028 0017                  		move.b	$17(a0),d0
000157C8 4880                       		ext.w	d0
000157CA 9440                       		sub.w	d0,d2
000157CC 1028 0016                  		move.b	$16(a0),d0
000157D0 4880                       		ext.w	d0
000157D2 D640                       		add.w	d0,d3
000157D4 49F8 F768                  		lea	($FFFFF768).w,a4
000157D8 367C 0010                  		movea.w	#$10,a3
000157DC 3C3C 0000                  		move.w	#0,d6
000157E0 7A0E                       		moveq	#$E,d5
000157E2 6100 FC92                  		bsr.w	FindWall
000157E6 3F01                       		move.w	d1,-(sp)
000157E8 3428 000C                  		move.w	$C(a0),d2
000157EC 3628 0008                  		move.w	8(a0),d3
000157F0 7000                       		moveq	#0,d0
000157F2 1028 0017                  		move.b	$17(a0),d0
000157F6 4880                       		ext.w	d0
000157F8 D440                       		add.w	d0,d2
000157FA 1028 0016                  		move.b	$16(a0),d0
000157FE 4880                       		ext.w	d0
00015800 D640                       		add.w	d0,d3
00015802 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015806 367C 0010                  		movea.w	#$10,a3
0001580A 3C3C 0000                  		move.w	#0,d6
0001580E 7A0E                       		moveq	#$E,d5
00015810 6100 FC64                  		bsr.w	FindWall
00015814 301F                       		move.w	(sp)+,d0
00015816 143C 00C0                  		move.b	#-$40,d2
0001581A 6000 FF1E                  		bra.w	loc_14DD0
0001581E                            
0001581E                            ; End of function sub_14E50
0001581E                            
0001581E                            
0001581E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001581E                            
0001581E                            
0001581E                            sub_14EB4:				; XREF: Sonic_Floor
0001581E 3428 000C                  		move.w	$C(a0),d2
00015822 3628 0008                  		move.w	8(a0),d3
00015826                            
00015826                            loc_14EBC:
00015826 0643 000A                  		addi.w	#$A,d3
0001582A 49F8 F768                  		lea	($FFFFF768).w,a4
0001582E 367C 0010                  		movea.w	#$10,a3
00015832 3C3C 0000                  		move.w	#0,d6
00015836 7A0E                       		moveq	#$E,d5
00015838 6100 FC3C                  		bsr.w	FindWall
0001583C 143C 00C0                  		move.b	#-$40,d2
00015840 6000 FF32                  		bra.w	loc_14E0A
00015844                            
00015844                            ; End of function sub_14EB4
00015844                            
00015844                            ; ---------------------------------------------------------------------------
00015844                            ; Subroutine to	detect when an object hits a wall to its right
00015844                            ; ---------------------------------------------------------------------------
00015844                            
00015844                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015844                            
00015844                            
00015844                            ObjHitWallRight:
00015844 D668 0008                  		add.w	8(a0),d3
00015848 3428 000C                  		move.w	$C(a0),d2
0001584C 49F8 F768                  		lea	($FFFFF768).w,a4
00015850 18BC 0000                  		move.b	#0,(a4)
00015854 367C 0010                  		movea.w	#$10,a3
00015858 3C3C 0000                  		move.w	#0,d6
0001585C 7A0E                       		moveq	#$E,d5
0001585E 6100 FC16                  		bsr.w	FindWall
00015862 1638 F768                  		move.b	($FFFFF768).w,d3
00015866 0803 0000                  		btst	#0,d3
0001586A 6700                       		beq.s	locret_14F06
0001586C 163C 00C0                  		move.b	#-$40,d3
00015870                            
00015870                            locret_14F06:
00015870 4E75                       		rts	
00015872                            
00015872                            ; End of function ObjHitWallRight
00015872                            
00015872                            ; ---------------------------------------------------------------------------
00015872                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015872                            ; touches them
00015872                            ; ---------------------------------------------------------------------------
00015872                            
00015872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015872                            
00015872                            
00015872                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015872 3428 000C                  		move.w	$C(a0),d2
00015876 3628 0008                  		move.w	8(a0),d3
0001587A 7000                       		moveq	#0,d0
0001587C 1028 0016                  		move.b	$16(a0),d0
00015880 4880                       		ext.w	d0
00015882 9440                       		sub.w	d0,d2
00015884 0A42 000F                  		eori.w	#$F,d2
00015888 1028 0017                  		move.b	$17(a0),d0
0001588C 4880                       		ext.w	d0
0001588E D640                       		add.w	d0,d3
00015890 49F8 F768                  		lea	($FFFFF768).w,a4
00015894 367C FFF0                  		movea.w	#-$10,a3
00015898 3C3C 1000                  		move.w	#$1000,d6
0001589C 7A0E                       		moveq	#$E,d5
0001589E 6100 FA98                  		bsr.w	FindFloor
000158A2 3F01                       		move.w	d1,-(sp)
000158A4 3428 000C                  		move.w	$C(a0),d2
000158A8 3628 0008                  		move.w	8(a0),d3
000158AC 7000                       		moveq	#0,d0
000158AE 1028 0016                  		move.b	$16(a0),d0
000158B2 4880                       		ext.w	d0
000158B4 9440                       		sub.w	d0,d2
000158B6 0A42 000F                  		eori.w	#$F,d2
000158BA 1028 0017                  		move.b	$17(a0),d0
000158BE 4880                       		ext.w	d0
000158C0 9640                       		sub.w	d0,d3
000158C2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158C6 367C FFF0                  		movea.w	#-$10,a3
000158CA 3C3C 1000                  		move.w	#$1000,d6
000158CE 7A0E                       		moveq	#$E,d5
000158D0 6100 FA66                  		bsr.w	FindFloor
000158D4 301F                       		move.w	(sp)+,d0
000158D6 143C 0080                  		move.b	#-$80,d2
000158DA 6000 FE5E                  		bra.w	loc_14DD0
000158DE                            ; End of function Sonic_DontRunOnWalls
000158DE                            
000158DE                            ; ===========================================================================
000158DE 3428 000C                  		move.w	$C(a0),d2
000158E2 3628 0008                  		move.w	8(a0),d3
000158E6                            
000158E6                            loc_14F7C:
000158E6 0442 000A                  		subi.w	#$A,d2
000158EA 0A42 000F                  		eori.w	#$F,d2
000158EE 49F8 F768                  		lea	($FFFFF768).w,a4
000158F2 367C FFF0                  		movea.w	#-$10,a3
000158F6 3C3C 1000                  		move.w	#$1000,d6
000158FA 7A0E                       		moveq	#$E,d5
000158FC 6100 FA3A                  		bsr.w	FindFloor
00015900 143C 0080                  		move.b	#-$80,d2
00015904 6000 FE6E                  		bra.w	loc_14E0A
00015908                            
00015908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015908                            
00015908                            
00015908                            ObjHitCeiling:
00015908 3428 000C                  		move.w	$C(a0),d2
0001590C 3628 0008                  		move.w	8(a0),d3
00015910 7000                       		moveq	#0,d0
00015912 1028 0016                  		move.b	$16(a0),d0
00015916 4880                       		ext.w	d0
00015918 9440                       		sub.w	d0,d2
0001591A 0A42 000F                  		eori.w	#$F,d2
0001591E 49F8 F768                  		lea	($FFFFF768).w,a4
00015922 367C FFF0                  		movea.w	#-$10,a3
00015926 3C3C 1000                  		move.w	#$1000,d6
0001592A 7A0E                       		moveq	#$E,d5
0001592C 6100 FA0A                  		bsr.w	FindFloor
00015930 1638 F768                  		move.b	($FFFFF768).w,d3
00015934 0803 0000                  		btst	#0,d3
00015938 6700                       		beq.s	locret_14FD4
0001593A 163C 0080                  		move.b	#-$80,d3
0001593E                            
0001593E                            locret_14FD4:
0001593E 4E75                       		rts	
00015940                            ; End of function ObjHitCeiling
00015940                            
00015940                            ; ===========================================================================
00015940                            
00015940                            loc_14FD6:				; XREF: sub_14D48
00015940 3428 000C                  		move.w	$C(a0),d2
00015944 3628 0008                  		move.w	8(a0),d3
00015948 7000                       		moveq	#0,d0
0001594A 1028 0017                  		move.b	$17(a0),d0
0001594E 4880                       		ext.w	d0
00015950 9440                       		sub.w	d0,d2
00015952 1028 0016                  		move.b	$16(a0),d0
00015956 4880                       		ext.w	d0
00015958 9640                       		sub.w	d0,d3
0001595A 0A43 000F                  		eori.w	#$F,d3
0001595E 49F8 F768                  		lea	($FFFFF768).w,a4
00015962 367C FFF0                  		movea.w	#-$10,a3
00015966 3C3C 0800                  		move.w	#$800,d6
0001596A 7A0E                       		moveq	#$E,d5
0001596C 6100 FB08                  		bsr.w	FindWall
00015970 3F01                       		move.w	d1,-(sp)
00015972 3428 000C                  		move.w	$C(a0),d2
00015976 3628 0008                  		move.w	8(a0),d3
0001597A 7000                       		moveq	#0,d0
0001597C 1028 0017                  		move.b	$17(a0),d0
00015980 4880                       		ext.w	d0
00015982 D440                       		add.w	d0,d2
00015984 1028 0016                  		move.b	$16(a0),d0
00015988 4880                       		ext.w	d0
0001598A 9640                       		sub.w	d0,d3
0001598C 0A43 000F                  		eori.w	#$F,d3
00015990 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015994 367C FFF0                  		movea.w	#-$10,a3
00015998 3C3C 0800                  		move.w	#$800,d6
0001599C 7A0E                       		moveq	#$E,d5
0001599E 6100 FAD6                  		bsr.w	FindWall
000159A2 301F                       		move.w	(sp)+,d0
000159A4 143C 0040                  		move.b	#$40,d2
000159A8 6000 FD90                  		bra.w	loc_14DD0
000159AC                            
000159AC                            ; ---------------------------------------------------------------------------
000159AC                            ; Subroutine to	stop Sonic when	he jumps at a wall
000159AC                            ; ---------------------------------------------------------------------------
000159AC                            
000159AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159AC                            
000159AC                            
000159AC                            Sonic_HitWall:				; XREF: Sonic_Floor
000159AC 3428 000C                  		move.w	$C(a0),d2
000159B0 3628 0008                  		move.w	8(a0),d3
000159B4                            
000159B4                            loc_1504A:
000159B4 0443 000A                  		subi.w	#$A,d3
000159B8 0A43 000F                  		eori.w	#$F,d3
000159BC 49F8 F768                  		lea	($FFFFF768).w,a4
000159C0 367C FFF0                  		movea.w	#-$10,a3
000159C4 3C3C 0800                  		move.w	#$800,d6
000159C8 7A0E                       		moveq	#$E,d5
000159CA 6100 FAAA                  		bsr.w	FindWall
000159CE 143C 0040                  		move.b	#$40,d2
000159D2 6000 FDA0                  		bra.w	loc_14E0A
000159D6                            ; End of function Sonic_HitWall
000159D6                            
000159D6                            ; ---------------------------------------------------------------------------
000159D6                            ; Subroutine to	detect when an object hits a wall to its left
000159D6                            ; ---------------------------------------------------------------------------
000159D6                            
000159D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159D6                            
000159D6                            
000159D6                            ObjHitWallLeft:
000159D6 D668 0008                  		add.w	8(a0),d3
000159DA 3428 000C                  		move.w	$C(a0),d2
000159DE 49F8 F768                  		lea	($FFFFF768).w,a4
000159E2 18BC 0000                  		move.b	#0,(a4)
000159E6 367C FFF0                  		movea.w	#-$10,a3
000159EA 3C3C 0800                  		move.w	#$800,d6
000159EE 7A0E                       		moveq	#$E,d5
000159F0 6100 FA84                  		bsr.w	FindWall
000159F4 1638 F768                  		move.b	($FFFFF768).w,d3
000159F8 0803 0000                  		btst	#0,d3
000159FC 6700                       		beq.s	locret_15098
000159FE 163C 0040                  		move.b	#$40,d3
00015A02                            
00015A02                            locret_15098:
00015A02 4E75                       		rts	
00015A04                            ; End of function ObjHitWallLeft
00015A04                            
00015A04                            ; ===========================================================================
00015A04                            ; ---------------------------------------------------------------------------
00015A04                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015A04                            ; ---------------------------------------------------------------------------
00015A04                            
00015A04                            Obj66:					; XREF: Obj_Index
00015A04 7000                       		moveq	#0,d0
00015A06 1028 0024                  		move.b	$24(a0),d0
00015A0A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015A0E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015A12                            ; ===========================================================================
00015A12 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015A14 0000                       		dc.w Obj66_Action-Obj66_Index
00015A16 0000                       		dc.w Obj66_Display-Obj66_Index
00015A18 0000                       		dc.w Obj66_Release-Obj66_Index
00015A1A                            ; ===========================================================================
00015A1A                            
00015A1A                            Obj66_Main:				; XREF: Obj66_Index
00015A1A 5428 0024                  		addq.b	#2,$24(a0)
00015A1E 323C 0001                  		move.w	#1,d1
00015A22 2248                       		movea.l	a0,a1
00015A24 6000                       		bra.s	Obj66_MakeItem
00015A26                            ; ===========================================================================
00015A26                            
00015A26                            Obj66_Loop:
00015A26 6100 88C6                  		bsr.w	SingleObjLoad
00015A2A 6600                       		bne.s	loc_150FE
00015A2C 12BC 0066                  		move.b	#$66,0(a1)
00015A30 5829 0024                  		addq.b	#4,$24(a1)
00015A34 3368 0008 0008             		move.w	8(a0),8(a1)
00015A3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015A40 137C 0003 0018             		move.b	#3,$18(a1)
00015A46 137C 0010 001A             		move.b	#$10,$1A(a1)
00015A4C                            
00015A4C                            Obj66_MakeItem:				; XREF: Obj66_Main
00015A4C 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015A54 337C 4348 0002             		move.w	#$4348,2(a1)
00015A5A 0029 0004 0001             		ori.b	#4,1(a1)
00015A60 137C 0038 0019             		move.b	#$38,$19(a1)
00015A66                            
00015A66                            loc_150FE:
00015A66 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015A6A                            
00015A6A 117C 0030 0019             		move.b	#$30,$19(a0)
00015A70 117C 0004 0018             		move.b	#4,$18(a0)
00015A76 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A7C 117C 0001 0034             		move.b	#1,$34(a0)
00015A82 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A88                            
00015A88                            Obj66_Action:				; XREF: Obj66_Index
00015A88 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015A8C 4A28 0001                  		tst.b	1(a0)
00015A90 6A00 0000                  		bpl.w	Obj66_Display
00015A94 323C 0030                  		move.w	#$30,d1
00015A98 3401                       		move.w	d1,d2
00015A9A 3602                       		move.w	d2,d3
00015A9C 5243                       		addq.w	#1,d3
00015A9E 3828 0008                  		move.w	8(a0),d4
00015AA2 6100 A794                  		bsr.w	SolidObject
00015AA6 0828 0005 0022             		btst	#5,$22(a0)
00015AAC 6700 0000                  		beq.w	Obj66_Display
00015AB0 43F8 D000                  		lea	($FFFFD000).w,a1
00015AB4 720E                       		moveq	#$E,d1
00015AB6 3029 0008                  		move.w	8(a1),d0
00015ABA B068 0008                  		cmp.w	8(a0),d0
00015ABE 6500                       		bcs.s	Obj66_GrabSonic
00015AC0 7207                       		moveq	#7,d1
00015AC2                            
00015AC2                            Obj66_GrabSonic:
00015AC2 B228 001A                  		cmp.b	$1A(a0),d1
00015AC6 6600                       		bne.s	Obj66_Display
00015AC8 1141 0032                  		move.b	d1,$32(a0)
00015ACC 5828 0024                  		addq.b	#4,$24(a0)
00015AD0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015AD6 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015ADC 337C 0800 0014             		move.w	#$800,$14(a1)
00015AE2 337C 0000 0010             		move.w	#0,$10(a1)
00015AE8 337C 0000 0012             		move.w	#0,$12(a1)
00015AEE 08A8 0005 0022             		bclr	#5,$22(a0)
00015AF4 08A9 0005 0022             		bclr	#5,$22(a1)
00015AFA 08E9 0001 0022             		bset	#1,$22(a1)
00015B00 3429 0008                  		move.w	8(a1),d2
00015B04 3629 000C                  		move.w	$C(a1),d3
00015B08 6100 0000                  		bsr.w	Obj66_ChgPos
00015B0C D569 0008                  		add.w	d2,8(a1)
00015B10 D769 000C                  		add.w	d3,$C(a1)
00015B14 E0E9 0008                  		asr	8(a1)
00015B18 E0E9 000C                  		asr	$C(a1)
00015B1C                            
00015B1C                            Obj66_Display:				; XREF: Obj66_Index
00015B1C 6000 A3F2                  		bra.w	MarkObjGone
00015B20                            ; ===========================================================================
00015B20                            
00015B20                            Obj66_Release:				; XREF: Obj66_Index
00015B20 1028 001A                  		move.b	$1A(a0),d0
00015B24 0C00 0004                  		cmpi.b	#4,d0
00015B28 6700                       		beq.s	loc_151C8
00015B2A 0C00 0007                  		cmpi.b	#7,d0
00015B2E 6600                       		bne.s	loc_151F8
00015B30                            
00015B30                            loc_151C8:
00015B30 B028 0032                  		cmp.b	$32(a0),d0
00015B34 6700                       		beq.s	loc_151F8
00015B36 43F8 D000                  		lea	($FFFFD000).w,a1
00015B3A 337C 0000 0010             		move.w	#0,$10(a1)
00015B40 337C 0800 0012             		move.w	#$800,$12(a1)
00015B46 0C00 0004                  		cmpi.b	#4,d0
00015B4A 6700                       		beq.s	loc_151F0
00015B4C 337C 0800 0010             		move.w	#$800,$10(a1)
00015B52 337C 0800 0012             		move.w	#$800,$12(a1)
00015B58                            
00015B58                            loc_151F0:
00015B58 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015B5C 5928 0024                  		subq.b	#4,$24(a0)
00015B60                            
00015B60                            loc_151F8:
00015B60 6100                       		bsr.s	Obj66_ChkSwitch
00015B62 6100                       		bsr.s	Obj66_ChgPos
00015B64 6000 A3AA                  		bra.w	MarkObjGone
00015B68                            
00015B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B68                            
00015B68                            
00015B68                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015B68 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015B6C 7000                       		moveq	#0,d0
00015B6E 1028 0038                  		move.b	$38(a0),d0
00015B72 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015B78 6700                       		beq.s	loc_15224	; if not, branch
00015B7A 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B7E 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B80 4428 0034                  		neg.b	$34(a0)
00015B84 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B8A 6000                       		bra.s	Obj66_Animate
00015B8C                            ; ===========================================================================
00015B8C                            
00015B8C                            loc_15224:
00015B8C 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015B90                            
00015B90                            Obj66_Animate:
00015B90 5328 001E                  		subq.b	#1,$1E(a0)
00015B94 6A00                       		bpl.s	locret_15246
00015B96 117C 0007 001E             		move.b	#7,$1E(a0)
00015B9C 1228 0034                  		move.b	$34(a0),d1
00015BA0 1028 001A                  		move.b	$1A(a0),d0
00015BA4 D001                       		add.b	d1,d0
00015BA6 0200 000F                  		andi.b	#$F,d0
00015BAA 1140 001A                  		move.b	d0,$1A(a0)
00015BAE                            
00015BAE                            locret_15246:
00015BAE 4E75                       		rts	
00015BB0                            ; End of function Obj66_ChkSwitch
00015BB0                            
00015BB0                            
00015BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BB0                            
00015BB0                            
00015BB0                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015BB0 43F8 D000                  		lea	($FFFFD000).w,a1
00015BB4 7000                       		moveq	#0,d0
00015BB6 1028 001A                  		move.b	$1A(a0),d0
00015BBA D040                       		add.w	d0,d0
00015BBC 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015BC0 101A                       		move.b	(a2)+,d0
00015BC2 4880                       		ext.w	d0
00015BC4 D068 0008                  		add.w	8(a0),d0
00015BC8 3340 0008                  		move.w	d0,8(a1)
00015BCC 101A                       		move.b	(a2)+,d0
00015BCE 4880                       		ext.w	d0
00015BD0 D068 000C                  		add.w	$C(a0),d0
00015BD4 3340 000C                  		move.w	d0,$C(a1)
00015BD8 4E75                       		rts	
00015BDA                            ; End of function Obj66_ChgPos
00015BDA                            
00015BDA                            ; ===========================================================================
00015BDA E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015BDE E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015BE2 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015BE6 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015BEA 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015BEE 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015BF2 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015BF6 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015BFA                            ; ---------------------------------------------------------------------------
00015BFA                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015BFA                            ; ---------------------------------------------------------------------------
00015BFA                            Map_obj66:
00015BFA                            	include "_maps\obj66.asm"
00015BFA                            ; ---------------------------------------------------------------------------
00015BFA                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015BFA                            ; ---------------------------------------------------------------------------
00015BFA 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015BFE 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015C02 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015C06 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015C0A 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015C0E 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015C12 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015C16 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015C1A 0000                       		dc.w byte_154A4-Map_obj66
00015C1C 06                         byte_152B4:	dc.b 6
00015C1D E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015C22 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015C27 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015C2C E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015C31 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015C36 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015C3B 06                         byte_152D3:	dc.b 6
00015C3C F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015C41 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015C46 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015C4B F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015C50 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015C55 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015C5A 06                         byte_152F2:	dc.b 6
00015C5B 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015C60 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015C65 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015C6A 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015C6F 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015C74 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015C79 06                         byte_15311:	dc.b 6
00015C7A 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C7F 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C84 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C89 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015C8E 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015C93 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015C98 06                         byte_15330:	dc.b 6
00015C99 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015C9E 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015CA3 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015CA8 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015CAD 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015CB2 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015CB7 06                         byte_1534F:	dc.b 6
00015CB8 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015CBD 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015CC2 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015CC7 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015CCC 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015CD1 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015CD6 06                         byte_1536E:	dc.b 6
00015CD7 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015CDC 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015CE1 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015CE6 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015CEB 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015CF0 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015CF5 06                         byte_1538D:	dc.b 6
00015CF6 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015CFB F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015D00 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015D05 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015D0A 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015D0F 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015D14 06                         byte_153AC:	dc.b 6
00015D15 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015D1A 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015D1F E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015D24 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015D29 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015D2E 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015D33 06                         byte_153CB:	dc.b 6
00015D34 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015D39 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015D3E DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015D43 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015D48 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015D4D F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015D52 06                         byte_153EA:	dc.b 6
00015D53 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015D58 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015D5D D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015D62 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015D67 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015D6C E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015D71 06                         byte_15409:	dc.b 6
00015D72 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015D77 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D7C CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D81 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D86 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D8B E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015D90 06                         byte_15428:	dc.b 6
00015D91 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015D96 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015D9B C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015DA0 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015DA5 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015DAA E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015DAF 06                         byte_15447:	dc.b 6
00015DB0 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015DB5 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015DBA CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015DBF CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015DC4 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015DC9 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015DCE 06                         byte_15466:	dc.b 6
00015DCF E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015DD4 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015DD9 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015DDE D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015DE3 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015DE8 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015DED 06                         byte_15485:	dc.b 6
00015DEE E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015DF3 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015DF8 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015DFD DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015E02 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015E07 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015E0C 0C                         byte_154A4:	dc.b $C
00015E0D C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015E12 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015E17 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015E1C C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015E21 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015E26 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015E2B 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015E30 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015E35 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015E3A 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015E3F 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015E44 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015E4A 00                         		even
00015E4A 00                         		even
00015E4A                            
00015E4A                            ; ===========================================================================
00015E4A                            ; ---------------------------------------------------------------------------
00015E4A                            ; Object 67 - disc that	you run	around (SBZ)
00015E4A                            ; ---------------------------------------------------------------------------
00015E4A                            
00015E4A                            Obj67:					; XREF: Obj_Index
00015E4A 7000                       		moveq	#0,d0
00015E4C 1028 0024                  		move.b	$24(a0),d0
00015E50 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015E54 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015E58                            ; ===========================================================================
00015E58 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015E5A 0000                       		dc.w Obj67_Action-Obj67_Index
00015E5C                            ; ===========================================================================
00015E5C                            
00015E5C                            Obj67_Main:				; XREF: Obj67_Index
00015E5C 5428 0024                  		addq.b	#2,$24(a0)
00015E60 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015E68 317C C344 0002             		move.w	#$C344,2(a0)
00015E6E 117C 0004 0001             		move.b	#4,1(a0)
00015E74 117C 0004 0018             		move.b	#4,$18(a0)
00015E7A 117C 0008 0019             		move.b	#8,$19(a0)
00015E80 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E86 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E8C 117C 0018 0034             		move.b	#$18,$34(a0)
00015E92 117C 0048 0038             		move.b	#$48,$38(a0)
00015E98 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E9C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015EA0 6700                       		beq.s	loc_15546
00015EA2 117C 0010 0034             		move.b	#$10,$34(a0)
00015EA8 117C 0038 0038             		move.b	#$38,$38(a0)
00015EAE                            
00015EAE                            loc_15546:
00015EAE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015EB2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015EB6 4881                       		ext.w	d1
00015EB8 E741                       		asl.w	#3,d1
00015EBA 3141 0036                  		move.w	d1,$36(a0)
00015EBE 1028 0022                  		move.b	$22(a0),d0
00015EC2 E418                       		ror.b	#2,d0
00015EC4 0200 00C0                  		andi.b	#-$40,d0
00015EC8 1140 0026                  		move.b	d0,$26(a0)
00015ECC                            
00015ECC                            Obj67_Action:				; XREF: Obj67_Index
00015ECC 6100 0000                  		bsr.w	Obj67_MoveSonic
00015ED0 6100 0000                  		bsr.w	Obj67_MoveSpot
00015ED4 6000 0000                  		bra.w	Obj67_ChkDel
00015ED8                            ; ===========================================================================
00015ED8                            
00015ED8                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015ED8 7400                       		moveq	#0,d2
00015EDA 1428 0038                  		move.b	$38(a0),d2
00015EDE 3602                       		move.w	d2,d3
00015EE0 D643                       		add.w	d3,d3
00015EE2 43F8 D000                  		lea	($FFFFD000).w,a1
00015EE6 3029 0008                  		move.w	8(a1),d0
00015EEA 9068 0032                  		sub.w	$32(a0),d0
00015EEE D042                       		add.w	d2,d0
00015EF0 B043                       		cmp.w	d3,d0
00015EF2 6400                       		bcc.s	loc_155A8
00015EF4 3229 000C                  		move.w	$C(a1),d1
00015EF8 9268 0030                  		sub.w	$30(a0),d1
00015EFC D242                       		add.w	d2,d1
00015EFE B243                       		cmp.w	d3,d1
00015F00 6400                       		bcc.s	loc_155A8
00015F02 0829 0001 0022             		btst	#1,$22(a1)
00015F08 6700                       		beq.s	loc_155B8
00015F0A 4228 003A                  		clr.b	$3A(a0)
00015F0E 4E75                       		rts	
00015F10                            ; ===========================================================================
00015F10                            
00015F10                            loc_155A8:
00015F10 4A28 003A                  		tst.b	$3A(a0)
00015F14 6700                       		beq.s	locret_155B6
00015F16 4229 0038                  		clr.b	$38(a1)
00015F1A 4228 003A                  		clr.b	$3A(a0)
00015F1E                            
00015F1E                            locret_155B6:
00015F1E 4E75                       		rts	
00015F20                            ; ===========================================================================
00015F20                            
00015F20                            loc_155B8:
00015F20 4A28 003A                  		tst.b	$3A(a0)
00015F24 6600                       		bne.s	loc_155E2
00015F26 117C 0001 003A             		move.b	#1,$3A(a0)
00015F2C 0829 0002 0022             		btst	#2,$22(a1)
00015F32 6600                       		bne.s	loc_155D0
00015F34 4229 001C                  		clr.b	$1C(a1)
00015F38                            
00015F38                            loc_155D0:
00015F38 08A9 0005 0022             		bclr	#5,$22(a1)
00015F3E 137C 0001 001D             		move.b	#1,$1D(a1)
00015F44 137C 0001 0038             		move.b	#1,$38(a1)
00015F4A                            
00015F4A                            loc_155E2:
00015F4A 3029 0014                  		move.w	$14(a1),d0
00015F4E 4A68 0036                  		tst.w	$36(a0)
00015F52 6A00                       		bpl.s	loc_15608
00015F54 0C40 FC00                  		cmpi.w	#-$400,d0
00015F58 6F00                       		ble.s	loc_155FA
00015F5A 337C FC00 0014             		move.w	#-$400,$14(a1)
00015F60 4E75                       		rts	
00015F62                            ; ===========================================================================
00015F62                            
00015F62                            loc_155FA:
00015F62 0C40 F100                  		cmpi.w	#-$F00,d0
00015F66 6C00                       		bge.s	locret_15606
00015F68 337C F100 0014             		move.w	#-$F00,$14(a1)
00015F6E                            
00015F6E                            locret_15606:
00015F6E 4E75                       		rts	
00015F70                            ; ===========================================================================
00015F70                            
00015F70                            loc_15608:
00015F70 0C40 0400                  		cmpi.w	#$400,d0
00015F74 6C00                       		bge.s	loc_15616
00015F76 337C 0400 0014             		move.w	#$400,$14(a1)
00015F7C 4E75                       		rts	
00015F7E                            ; ===========================================================================
00015F7E                            
00015F7E                            loc_15616:
00015F7E 0C40 0F00                  		cmpi.w	#$F00,d0
00015F82 6F00                       		ble.s	locret_15622
00015F84 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F8A                            
00015F8A                            locret_15622:
00015F8A 4E75                       		rts	
00015F8C                            ; ===========================================================================
00015F8C                            
00015F8C                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015F8C 3028 0036                  		move.w	$36(a0),d0
00015F90 D168 0026                  		add.w	d0,$26(a0)
00015F94 1028 0026                  		move.b	$26(a0),d0
00015F98 4EB9 0000 2D02             		jsr	(CalcSine).l
00015F9E 3428 0030                  		move.w	$30(a0),d2
00015FA2 3628 0032                  		move.w	$32(a0),d3
00015FA6 7800                       		moveq	#0,d4
00015FA8 1828 0034                  		move.b	$34(a0),d4
00015FAC E14C                       		lsl.w	#8,d4
00015FAE 2A04                       		move.l	d4,d5
00015FB0 C9C0                       		muls.w	d0,d4
00015FB2 4844                       		swap	d4
00015FB4 CBC1                       		muls.w	d1,d5
00015FB6 4845                       		swap	d5
00015FB8 D842                       		add.w	d2,d4
00015FBA DA43                       		add.w	d3,d5
00015FBC 3144 000C                  		move.w	d4,$C(a0)
00015FC0 3145 0008                  		move.w	d5,8(a0)
00015FC4 4E75                       		rts	
00015FC6                            ; ===========================================================================
00015FC6                            
00015FC6                            Obj67_ChkDel:				; XREF: Obj67_Action
00015FC6 3028 0032                  		move.w	$32(a0),d0
00015FCA 0240 FF80                  		andi.w	#-$80,d0
00015FCE 3238 F700                  		move.w	($FFFFF700).w,d1
00015FD2 0441 0080                  		subi.w	#$80,d1
00015FD6 0241 FF80                  		andi.w	#-$80,d1
00015FDA 9041                       		sub.w	d1,d0
00015FDC 0C40 0280                  		cmpi.w	#$280,d0
00015FE0 6200                       		bhi.s	Obj67_Delete
00015FE2 4EF9 0000 DE68             		jmp	DisplaySprite
00015FE8                            ; ===========================================================================
00015FE8                            
00015FE8                            Obj67_Delete:
00015FE8 4EF9 0000 DEA4             		jmp	DeleteObject
00015FEE                            ; ===========================================================================
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE                            ; Sprite mappings - disc that you run around (SBZ)
00015FEE                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015FEE                            ; part of the level tiles.)
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE                            Map_obj67:
00015FEE                            	include "_maps\obj67.asm"
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE                            ; Sprite mappings - disc that you run around (SBZ)
00015FEE                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015FEE                            ; part of the level tiles.)
00015FEE                            ; ---------------------------------------------------------------------------
00015FEE 0000                       		dc.w byte_15688-Map_obj67
00015FF0 01                         byte_15688:	dc.b 1
00015FF1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015FF6                            		even
00015FF6                            		even
00015FF6                            
00015FF6                            ; ===========================================================================
00015FF6                            ; ---------------------------------------------------------------------------
00015FF6                            ; Object 68 - conveyor belts (SBZ)
00015FF6                            ; ---------------------------------------------------------------------------
00015FF6                            
00015FF6                            Obj68:					; XREF: Obj_Index
00015FF6 7000                       		moveq	#0,d0
00015FF8 1028 0024                  		move.b	$24(a0),d0
00015FFC 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00016000 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016004                            ; ===========================================================================
00016004 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00016006 0000                       		dc.w Obj68_Action-Obj68_Index
00016008                            ; ===========================================================================
00016008                            
00016008                            Obj68_Main:				; XREF: Obj68_Index
00016008 5428 0024                  		addq.b	#2,$24(a0)
0001600C 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016012 1228 0028                  		move.b	$28(a0),d1	; get object type
00016016 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001601A 6700                       		beq.s	loc_156BA	; if zero, branch
0001601C 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016022                            
00016022                            loc_156BA:
00016022 1228 0028                  		move.b	$28(a0),d1	; get object type
00016026 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001602A 4881                       		ext.w	d1
0001602C E841                       		asr.w	#4,d1
0001602E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016032                            
00016032                            Obj68_Action:				; XREF: Obj68_Index
00016032 6100                       		bsr.s	Obj68_MoveSonic
00016034 3028 0008                  		move.w	8(a0),d0
00016038 0240 FF80                  		andi.w	#$FF80,d0
0001603C 3238 F700                  		move.w	($FFFFF700).w,d1
00016040 0441 0080                  		subi.w	#$80,d1
00016044 0241 FF80                  		andi.w	#$FF80,d1
00016048 9041                       		sub.w	d1,d0
0001604A 0C40 0280                  		cmpi.w	#$280,d0
0001604E 6200                       		bhi.s	Obj68_Delete
00016050 4E75                       		rts	
00016052                            ; ===========================================================================
00016052                            
00016052                            Obj68_Delete:
00016052 4EF9 0000 DEA4             		jmp	DeleteObject
00016058                            ; ===========================================================================
00016058                            
00016058                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016058 7400                       		moveq	#0,d2
0001605A 1428 0038                  		move.b	$38(a0),d2
0001605E 3602                       		move.w	d2,d3
00016060 D643                       		add.w	d3,d3
00016062 43F8 D000                  		lea	($FFFFD000).w,a1
00016066 3029 0008                  		move.w	8(a1),d0
0001606A 9068 0008                  		sub.w	8(a0),d0
0001606E D042                       		add.w	d2,d0
00016070 B043                       		cmp.w	d3,d0
00016072 6400                       		bcc.s	locret_1572E
00016074 3229 000C                  		move.w	$C(a1),d1
00016078 9268 000C                  		sub.w	$C(a0),d1
0001607C 0641 0030                  		addi.w	#$30,d1
00016080 0C41 0030                  		cmpi.w	#$30,d1
00016084 6400                       		bcc.s	locret_1572E
00016086 0829 0001 0022             		btst	#1,$22(a1)
0001608C 6600                       		bne.s	locret_1572E
0001608E 3028 0036                  		move.w	$36(a0),d0
00016092 D169 0008                  		add.w	d0,8(a1)
00016096                            
00016096                            locret_1572E:
00016096 4E75                       		rts	
00016098                            
00016098                            ; ===========================================================================
00016098                            ; ---------------------------------------------------------------------------
00016098                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016098                            ; ---------------------------------------------------------------------------
00016098                            
00016098                            Obj69:					; XREF: Obj_Index
00016098 7000                       		moveq	#0,d0
0001609A 1028 0024                  		move.b	$24(a0),d0
0001609E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000160A2 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000160A6                            ; ===========================================================================
000160A6 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000160A8 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000160AA 0000                       		dc.w Obj69_Spinner-Obj69_Index
000160AC                            ; ===========================================================================
000160AC                            
000160AC                            Obj69_Main:				; XREF: Obj69_Index
000160AC 5428 0024                  		addq.b	#2,$24(a0)
000160B0 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000160B8 317C 4492 0002             		move.w	#$4492,2(a0)
000160BE 0028 0004 0001             		ori.b	#4,1(a0)
000160C4 117C 0080 0019             		move.b	#$80,$19(a0)
000160CA 7000                       		moveq	#0,d0
000160CC 1028 0028                  		move.b	$28(a0),d0
000160D0 0240 000F                  		andi.w	#$F,d0
000160D4 C0FC 003C                  		mulu.w	#$3C,d0
000160D8 3140 0032                  		move.w	d0,$32(a0)
000160DC 4A28 0028                  		tst.b	$28(a0)
000160E0 6A00                       		bpl.s	Obj69_Trapdoor
000160E2 5428 0024                  		addq.b	#2,$24(a0)
000160E6 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000160EE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000160F4 117C 0010 0019             		move.b	#$10,$19(a0)
000160FA 117C 0002 001C             		move.b	#2,$1C(a0)
00016100 7000                       		moveq	#0,d0
00016102 1028 0028                  		move.b	$28(a0),d0	; get object type
00016106 3200                       		move.w	d0,d1
00016108 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001610C C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016110 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016114 3140 0032                  		move.w	d0,$32(a0)
00016118 0241 0070                  		andi.w	#$70,d1
0001611C 0641 0010                  		addi.w	#$10,d1
00016120 E549                       		lsl.w	#2,d1
00016122 5341                       		subq.w	#1,d1
00016124 3141 0036                  		move.w	d1,$36(a0)
00016128 6000                       		bra.s	Obj69_Spinner
0001612A                            ; ===========================================================================
0001612A                            
0001612A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001612A 5368 0030                  		subq.w	#1,$30(a0)
0001612E 6A00                       		bpl.s	Obj69_Animate
00016130 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016136 0868 0000 001C             		bchg	#0,$1C(a0)
0001613C 4A28 0001                  		tst.b	1(a0)
00016140 6A00                       		bpl.s	Obj69_Animate
00016142 303C 00BB                  		move.w	#$BB,d0
00016146 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
0001614C                            
0001614C                            Obj69_Animate:
0001614C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016152 4EB9 0000 AEEE             		jsr	AnimateSprite
00016158 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001615C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001615E 323C 004B                  		move.w	#$4B,d1
00016162 343C 000C                  		move.w	#$C,d2
00016166 3602                       		move.w	d2,d3
00016168 5243                       		addq.w	#1,d3
0001616A 3828 0008                  		move.w	8(a0),d4
0001616E 6100 A0C8                  		bsr.w	SolidObject
00016172 6000 9D9C                  		bra.w	MarkObjGone
00016176                            ; ===========================================================================
00016176                            
00016176                            Obj69_NotSolid:
00016176 0828 0003 0022             		btst	#3,$22(a0)
0001617C 6700                       		beq.s	Obj69_Display
0001617E 43F8 D000                  		lea	($FFFFD000).w,a1
00016182 08A9 0003 0022             		bclr	#3,$22(a1)
00016188 08A8 0003 0022             		bclr	#3,$22(a0)
0001618E 4228 0025                  		clr.b	$25(a0)
00016192                            
00016192                            Obj69_Display:
00016192 6000 9D7C                  		bra.w	MarkObjGone
00016196                            ; ===========================================================================
00016196                            
00016196                            Obj69_Spinner:				; XREF: Obj69_Index
00016196 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001619A C068 0036                  		and.w	$36(a0),d0
0001619E 6600                       		bne.s	Obj69_Delay
000161A0 117C 0001 0034             		move.b	#1,$34(a0)
000161A6                            
000161A6                            Obj69_Delay:
000161A6 4A28 0034                  		tst.b	$34(a0)
000161AA 6700                       		beq.s	Obj69_Animate2
000161AC 5368 0030                  		subq.w	#1,$30(a0)
000161B0 6A00                       		bpl.s	Obj69_Animate2
000161B2 3168 0032 0030             		move.w	$32(a0),$30(a0)
000161B8 4228 0034                  		clr.b	$34(a0)
000161BC 0868 0000 001C             		bchg	#0,$1C(a0)
000161C2                            
000161C2                            Obj69_Animate2:
000161C2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000161C8 4EB9 0000 AEEE             		jsr	AnimateSprite
000161CE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000161D2 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000161D4 323C 001B                  		move.w	#$1B,d1
000161D8 343C 0007                  		move.w	#7,d2
000161DC 3602                       		move.w	d2,d3
000161DE 5243                       		addq.w	#1,d3
000161E0 3828 0008                  		move.w	8(a0),d4
000161E4 6100 A052                  		bsr.w	SolidObject
000161E8 6000 9D26                  		bra.w	MarkObjGone
000161EC                            ; ===========================================================================
000161EC                            
000161EC                            Obj69_NotSolid2:
000161EC 0828 0003 0022             		btst	#3,$22(a0)
000161F2 6700                       		beq.s	Obj69_Display2
000161F4 43F8 D000                  		lea	($FFFFD000).w,a1
000161F8 08A9 0003 0022             		bclr	#3,$22(a1)
000161FE 08A8 0003 0022             		bclr	#3,$22(a0)
00016204 4228 0025                  		clr.b	$25(a0)
00016208                            
00016208                            Obj69_Display2:
00016208 6000 9D06                  		bra.w	MarkObjGone
0001620C                            ; ===========================================================================
0001620C                            Ani_obj69:
0001620C                            	include "_anim\obj69.asm"
0001620C                            ; ---------------------------------------------------------------------------
0001620C                            ; Animation script - trapdoor (SBZ)
0001620C                            ; ---------------------------------------------------------------------------
0001620C 0000                       		dc.w byte_158AC-Ani_obj69
0001620E 0000                       		dc.w byte_158B2-Ani_obj69
00016210 0000                       		dc.w byte_158B8-Ani_obj69
00016212 0000                       		dc.w byte_158CC-Ani_obj69
00016214 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001621A 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016220 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001622D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016234 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016241 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016248                            		even
00016248                            		even
00016248                            
00016248                            ; ---------------------------------------------------------------------------
00016248                            ; Sprite mappings - trapdoor (SBZ)
00016248                            ; ---------------------------------------------------------------------------
00016248                            Map_obj69:
00016248                            	include "_maps\obj69.asm"
00016248                            ; ---------------------------------------------------------------------------
00016248                            ; Sprite mappings - trapdoor (SBZ)
00016248                            ; ---------------------------------------------------------------------------
00016248 0000                       		dc.w byte_158E6-Map_obj69
0001624A 0000                       		dc.w byte_158FB-Map_obj69
0001624C 0000                       		dc.w byte_15924-Map_obj69
0001624E 04                         byte_158E6:	dc.b 4
0001624F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016254 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016259 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001625E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016263 08                         byte_158FB:	dc.b 8
00016264 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016269 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001626E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016273 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016278 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001627D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016282 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016287 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001628C 04                         byte_15924:	dc.b 4
0001628D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016292 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016297 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001629C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000162A2 00                         		even
000162A2 00                         		even
000162A2                            
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            ; Sprite mappings - spinning platforms (SBZ)
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            Map_obj69a:
000162A2                            	include "_maps\obj69a.asm"
000162A2                            ; ---------------------------------------------------------------------------
000162A2                            ; Sprite mappings - spinning platforms (SBZ)
000162A2                            ; ---------------------------------------------------------------------------
000162A2 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000162A6 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000162AA 0000                       		dc.w byte_15970-Map_obj69a
000162AC 02                         byte_15944:	dc.b 2
000162AD F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000162B2 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000162B7 02                         byte_1594F:	dc.b 2
000162B8 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000162BD 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000162C2 02                         byte_1595A:	dc.b 2
000162C3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000162C8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000162CD 02                         byte_15965:	dc.b 2
000162CE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000162D3 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000162D8 02                         byte_15970:	dc.b 2
000162D9 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000162DE 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000162E4 00                         		even
000162E4 00                         		even
000162E4                            
000162E4                            ; ===========================================================================
000162E4                            ; ---------------------------------------------------------------------------
000162E4                            ; Object 6A - ground saws and pizza cutters (SBZ)
000162E4                            ; ---------------------------------------------------------------------------
000162E4                            
000162E4                            Obj6A:					; XREF: Obj_Index
000162E4 7000                       		moveq	#0,d0
000162E6 1028 0024                  		move.b	$24(a0),d0
000162EA 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000162EE 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000162F2                            ; ===========================================================================
000162F2 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000162F4 0000                       		dc.w Obj6A_Action-Obj6A_Index
000162F6                            ; ===========================================================================
000162F6                            
000162F6                            Obj6A_Main:				; XREF: Obj6A_Index
000162F6 5428 0024                  		addq.b	#2,$24(a0)
000162FA 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016302 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016308 117C 0004 0001             		move.b	#4,1(a0)
0001630E 117C 0004 0018             		move.b	#4,$18(a0)
00016314 117C 0020 0019             		move.b	#$20,$19(a0)
0001631A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016320 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016326 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001632C 6400                       		bcc.s	Obj6A_Action
0001632E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016334                            
00016334                            Obj6A_Action:				; XREF: Obj6A_Index
00016334 7000                       		moveq	#0,d0
00016336 1028 0028                  		move.b	$28(a0),d0
0001633A 0240 0007                  		andi.w	#7,d0
0001633E D040                       		add.w	d0,d0
00016340 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016344 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016348 3028 003A                  		move.w	$3A(a0),d0
0001634C 0240 FF80                  		andi.w	#$FF80,d0
00016350 3238 F700                  		move.w	($FFFFF700).w,d1
00016354 0441 0080                  		subi.w	#$80,d1
00016358 0241 FF80                  		andi.w	#$FF80,d1
0001635C 9041                       		sub.w	d1,d0
0001635E 0C40 0280                  		cmpi.w	#$280,d0
00016362 6200                       		bhi.s	Obj6A_Delete
00016364 4EF9 0000 DE68             		jmp	DisplaySprite
0001636A                            ; ===========================================================================
0001636A                            
0001636A                            Obj6A_Delete:
0001636A 4EF9 0000 DEA4             		jmp	DeleteObject
00016370                            ; ===========================================================================
00016370 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016374 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016378 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
0001637A                            ; ===========================================================================
0001637A                            
0001637A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
0001637A 4E75                       		rts	
0001637C                            ; ===========================================================================
0001637C                            
0001637C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
0001637C 323C 0060                  		move.w	#$60,d1
00016380 7000                       		moveq	#0,d0
00016382 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016386 0828 0000 0022             		btst	#0,$22(a0)
0001638C 6700                       		beq.s	Obj6A_Animate01
0001638E 4440                       		neg.w	d0
00016390 D041                       		add.w	d1,d0
00016392                            
00016392                            Obj6A_Animate01:
00016392 3228 003A                  		move.w	$3A(a0),d1
00016396 9240                       		sub.w	d0,d1
00016398 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001639C 5328 001E                  		subq.b	#1,$1E(a0)
000163A0 6A00                       		bpl.s	loc_15A46
000163A2 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000163A8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000163AE                            
000163AE                            loc_15A46:
000163AE 4A28 0001                  		tst.b	1(a0)
000163B2 6A00                       		bpl.s	locret_15A60
000163B4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000163B8 0240 000F                  		andi.w	#$F,d0
000163BC 6600                       		bne.s	locret_15A60
000163BE 303C 00B0                  		move.w	#$B0,d0
000163C2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000163C8                            
000163C8                            locret_15A60:
000163C8 4E75                       		rts	
000163CA                            ; ===========================================================================
000163CA                            
000163CA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000163CA 323C 0030                  		move.w	#$30,d1
000163CE 7000                       		moveq	#0,d0
000163D0 1038 FE64                  		move.b	($FFFFFE64).w,d0
000163D4 0828 0000 0022             		btst	#0,$22(a0)
000163DA 6700                       		beq.s	Obj6A_Animate02
000163DC 4440                       		neg.w	d0
000163DE 0640 0080                  		addi.w	#$80,d0
000163E2                            
000163E2                            Obj6A_Animate02:
000163E2 3228 0038                  		move.w	$38(a0),d1
000163E6 9240                       		sub.w	d0,d1
000163E8 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000163EC 5328 001E                  		subq.b	#1,$1E(a0)
000163F0 6A00                       		bpl.s	loc_15A96
000163F2 117C 0002 001E             		move.b	#2,$1E(a0)
000163F8 0868 0000 001A             		bchg	#0,$1A(a0)
000163FE                            
000163FE                            loc_15A96:
000163FE 4A28 0001                  		tst.b	1(a0)
00016402 6A00                       		bpl.s	locret_15AB0
00016404 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016408 0C00 0018                  		cmpi.b	#$18,d0
0001640C 6600                       		bne.s	locret_15AB0
0001640E 303C 00B0                  		move.w	#$B0,d0
00016412 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016418                            
00016418                            locret_15AB0:
00016418 4E75                       		rts	
0001641A                            ; ===========================================================================
0001641A                            
0001641A                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001641A 4A28 003D                  		tst.b	$3D(a0)
0001641E 6600                       		bne.s	Obj6A_Animate03
00016420 3038 D008                  		move.w	($FFFFD008).w,d0
00016424 0440 00C0                  		subi.w	#$C0,d0
00016428 6500                       		bcs.s	loc_15B02
0001642A 9068 0008                  		sub.w	8(a0),d0
0001642E 6500                       		bcs.s	loc_15B02
00016430 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016434 0440 0080                  		subi.w	#$80,d0
00016438 B068 000C                  		cmp.w	$C(a0),d0
0001643C 6400                       		bcc.s	locret_15B04
0001643E 0640 0100                  		addi.w	#$100,d0
00016442 B068 000C                  		cmp.w	$C(a0),d0
00016446 6500                       		bcs.s	locret_15B04
00016448 117C 0001 003D             		move.b	#1,$3D(a0)
0001644E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016454 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001645A 117C 0002 001A             		move.b	#2,$1A(a0)
00016460 303C 00B0                  		move.w	#$B0,d0
00016464 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
0001646A                            
0001646A                            loc_15B02:
0001646A 588F                       		addq.l	#4,sp
0001646C                            
0001646C                            locret_15B04:
0001646C 4E75                       		rts	
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
0001646E 4EB9 0000 DE42             		jsr	SpeedToPos
00016474 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001647A 5328 001E                  		subq.b	#1,$1E(a0)
0001647E 6A00                       		bpl.s	locret_15B24
00016480 117C 0002 001E             		move.b	#2,$1E(a0)
00016486 0868 0000 001A             		bchg	#0,$1A(a0)
0001648C                            
0001648C                            locret_15B24:
0001648C 4E75                       		rts	
0001648E                            ; ===========================================================================
0001648E                            
0001648E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
0001648E 4A28 003D                  		tst.b	$3D(a0)
00016492 6600                       		bne.s	Obj6A_Animate04
00016494 3038 D008                  		move.w	($FFFFD008).w,d0
00016498 0640 00E0                  		addi.w	#$E0,d0
0001649C 9068 0008                  		sub.w	8(a0),d0
000164A0 6400                       		bcc.s	loc_15B74
000164A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000164A6 0440 0080                  		subi.w	#$80,d0
000164AA B068 000C                  		cmp.w	$C(a0),d0
000164AE 6400                       		bcc.s	locret_15B76
000164B0 0640 0100                  		addi.w	#$100,d0
000164B4 B068 000C                  		cmp.w	$C(a0),d0
000164B8 6500                       		bcs.s	locret_15B76
000164BA 117C 0001 003D             		move.b	#1,$3D(a0)
000164C0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000164C6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164CC 117C 0002 001A             		move.b	#2,$1A(a0)
000164D2 303C 00B0                  		move.w	#$B0,d0
000164D6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000164DC                            
000164DC                            loc_15B74:
000164DC 588F                       		addq.l	#4,sp
000164DE                            
000164DE                            locret_15B76:
000164DE 4E75                       		rts	
000164E0                            ; ===========================================================================
000164E0                            
000164E0                            Obj6A_Animate04:
000164E0 4EB9 0000 DE42             		jsr	SpeedToPos
000164E6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164EC 5328 001E                  		subq.b	#1,$1E(a0)
000164F0 6A00                       		bpl.s	locret_15B96
000164F2 117C 0002 001E             		move.b	#2,$1E(a0)
000164F8 0868 0000 001A             		bchg	#0,$1A(a0)
000164FE                            
000164FE                            locret_15B96:
000164FE 4E75                       		rts	
00016500                            ; ===========================================================================
00016500                            ; ---------------------------------------------------------------------------
00016500                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016500                            ; ---------------------------------------------------------------------------
00016500                            Map_obj6A:
00016500                            	include "_maps\obj6A.asm"
00016500                            ; ---------------------------------------------------------------------------
00016500                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016500                            ; ---------------------------------------------------------------------------
00016500 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016504 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016508 07                         byte_15BA0:	dc.b 7
00016509 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001650E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016513 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016518 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001651D E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016522 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016527 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001652C 07                         byte_15BC4:	dc.b 7
0001652D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016532 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016537 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001653C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016541 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016546 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001654B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016550 04                         byte_15BE8:	dc.b 4
00016551 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016556 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001655B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016560 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016565 04                         byte_15BFD:	dc.b 4
00016566 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001656B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016570 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016575 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001657A                            		even
0001657A                            		even
0001657A                            
0001657A                            ; ===========================================================================
0001657A                            ; ---------------------------------------------------------------------------
0001657A                            ; Object 6B - stomper (SBZ)
0001657A                            ; ---------------------------------------------------------------------------
0001657A                            
0001657A                            Obj6B:					; XREF: Obj_Index
0001657A 7000                       		moveq	#0,d0
0001657C 1028 0024                  		move.b	$24(a0),d0
00016580 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016584 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016588                            ; ===========================================================================
00016588 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
0001658A 0000                       		dc.w Obj6B_Action-Obj6B_Index
0001658C                            
0001658C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016590 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016594 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016598 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001659C 8040 0005                  		dc.b  $80, $40,	  0,   5
000165A0                            ; ===========================================================================
000165A0                            
000165A0                            Obj6B_Main:				; XREF: Obj6B_Index
000165A0 5428 0024                  		addq.b	#2,$24(a0)
000165A4 7000                       		moveq	#0,d0
000165A6 1028 0028                  		move.b	$28(a0),d0
000165AA E448                       		lsr.w	#2,d0
000165AC 0240 001C                  		andi.w	#$1C,d0
000165B0 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000165B4 115B 0019                  		move.b	(a3)+,$19(a0)
000165B8 115B 0016                  		move.b	(a3)+,$16(a0)
000165BC E448                       		lsr.w	#2,d0
000165BE 1140 001A                  		move.b	d0,$1A(a0)
000165C2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000165CA 317C 22C0 0002             		move.w	#$22C0,2(a0)
000165D0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000165D6 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000165D8 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000165DE 6700                       		beq.s	Obj6B_SBZ3
000165E0                            
000165E0                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000165E0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165E4 7000                       		moveq	#0,d0
000165E6 1028 0023                  		move.b	$23(a0),d0
000165EA 6700                       		beq.s	Obj6B_Delete
000165EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165F2                            
000165F2                            Obj6B_Delete:
000165F2 4EF9 0000 DEA4             		jmp	DeleteObject
000165F8                            ; ===========================================================================
000165F8                            
000165F8                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000165F8 317C 41F0 0002             		move.w	#$41F0,2(a0)
000165FE 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016604 6600                       		bne.s	Obj6B_SBZ12
00016606 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001660A 7000                       		moveq	#0,d0
0001660C 1028 0023                  		move.b	$23(a0),d0
00016610 6700                       		beq.s	Obj6B_SBZ12
00016612 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016618 6700                       		beq.s	Obj6B_SBZ12
0001661A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001661E 60C0                       		bra.s	Obj6B_ChkGone
00016620                            ; ===========================================================================
00016620                            
00016620                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016620 0028 0004 0001             		ori.b	#4,1(a0)
00016626 117C 0004 0018             		move.b	#4,$18(a0)
0001662C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016632 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016638 7000                       		moveq	#0,d0
0001663A 101B                       		move.b	(a3)+,d0
0001663C 3140 003C                  		move.w	d0,$3C(a0)
00016640 7000                       		moveq	#0,d0
00016642 1028 0028                  		move.b	$28(a0),d0
00016646 6A00                       		bpl.s	Obj6B_Action
00016648 0200 000F                  		andi.b	#$F,d0
0001664C 1140 003E                  		move.b	d0,$3E(a0)
00016650 1153 0028                  		move.b	(a3),$28(a0)
00016654 0C13 0005                  		cmpi.b	#5,(a3)
00016658 6600                       		bne.s	Obj6B_ChkGone2
0001665A 08E8 0004 0001             		bset	#4,1(a0)
00016660                            
00016660                            Obj6B_ChkGone2:
00016660 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016664 7000                       		moveq	#0,d0
00016666 1028 0023                  		move.b	$23(a0),d0
0001666A 6700                       		beq.s	Obj6B_Action
0001666C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016672                            
00016672                            Obj6B_Action:				; XREF: Obj6B_Index
00016672 3F28 0008                  		move.w	8(a0),-(sp)
00016676 7000                       		moveq	#0,d0
00016678 1028 0028                  		move.b	$28(a0),d0
0001667C 0240 000F                  		andi.w	#$F,d0
00016680 D040                       		add.w	d0,d0
00016682 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016686 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
0001668A 381F                       		move.w	(sp)+,d4
0001668C 4A28 0001                  		tst.b	1(a0)
00016690 6A00                       		bpl.s	Obj6B_ChkDel
00016692 7200                       		moveq	#0,d1
00016694 1228 0019                  		move.b	$19(a0),d1
00016698 0641 000B                  		addi.w	#$B,d1
0001669C 7400                       		moveq	#0,d2
0001669E 1428 0016                  		move.b	$16(a0),d2
000166A2 3602                       		move.w	d2,d3
000166A4 5243                       		addq.w	#1,d3
000166A6 6100 9B90                  		bsr.w	SolidObject
000166AA                            
000166AA                            Obj6B_ChkDel:
000166AA 3028 0034                  		move.w	$34(a0),d0
000166AE 0240 FF80                  		andi.w	#$FF80,d0
000166B2 3238 F700                  		move.w	($FFFFF700).w,d1
000166B6 0441 0080                  		subi.w	#$80,d1
000166BA 0241 FF80                  		andi.w	#$FF80,d1
000166BE 9041                       		sub.w	d1,d0
000166C0 0C40 0280                  		cmpi.w	#$280,d0
000166C4 6200                       		bhi.s	loc_15D64
000166C6 4EF9 0000 DE68             		jmp	DisplaySprite
000166CC                            ; ===========================================================================
000166CC                            
000166CC                            loc_15D64:
000166CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000166D2 6600                       		bne.s	Obj6B_Delete2
000166D4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000166D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166DC 7000                       		moveq	#0,d0
000166DE 1028 0023                  		move.b	$23(a0),d0
000166E2 6700                       		beq.s	Obj6B_Delete2
000166E4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000166EA                            
000166EA                            Obj6B_Delete2:
000166EA 4EF9 0000 DEA4             		jmp	DeleteObject
000166F0                            ; ===========================================================================
000166F0 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000166F4 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000166F8 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000166FC                            ; ===========================================================================
000166FC                            
000166FC                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000166FC 4E75                       		rts	
000166FE                            ; ===========================================================================
000166FE                            
000166FE                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000166FE 4A28 0038                  		tst.b	$38(a0)
00016702 6600                       		bne.s	loc_15DB4
00016704 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016708 7000                       		moveq	#0,d0
0001670A 1028 003E                  		move.b	$3E(a0),d0
0001670E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016714 6700                       		beq.s	loc_15DC2
00016716 117C 0001 0038             		move.b	#1,$38(a0)
0001671C                            
0001671C                            loc_15DB4:
0001671C 3028 003C                  		move.w	$3C(a0),d0
00016720 B068 003A                  		cmp.w	$3A(a0),d0
00016724 6700                       		beq.s	loc_15DE0
00016726 5468 003A                  		addq.w	#2,$3A(a0)
0001672A                            
0001672A                            loc_15DC2:
0001672A 3028 003A                  		move.w	$3A(a0),d0
0001672E 0828 0000 0022             		btst	#0,$22(a0)
00016734 6700                       		beq.s	loc_15DD4
00016736 4440                       		neg.w	d0
00016738 0640 0080                  		addi.w	#$80,d0
0001673C                            
0001673C                            loc_15DD4:
0001673C 3228 0034                  		move.w	$34(a0),d1
00016740 9240                       		sub.w	d0,d1
00016742 3141 0008                  		move.w	d1,8(a0)
00016746 4E75                       		rts	
00016748                            ; ===========================================================================
00016748                            
00016748                            loc_15DE0:
00016748 5228 0028                  		addq.b	#1,$28(a0)
0001674C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016752 4228 0038                  		clr.b	$38(a0)
00016756 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001675A 7000                       		moveq	#0,d0
0001675C 1028 0023                  		move.b	$23(a0),d0
00016760 67C8                       		beq.s	loc_15DC2
00016762 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016768 60C0                       		bra.s	loc_15DC2
0001676A                            ; ===========================================================================
0001676A                            
0001676A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001676A 4A28 0038                  		tst.b	$38(a0)
0001676E 6600                       		bne.s	loc_15E14
00016770 5368 0036                  		subq.w	#1,$36(a0)
00016774 6600                       		bne.s	loc_15E1E
00016776 117C 0001 0038             		move.b	#1,$38(a0)
0001677C                            
0001677C                            loc_15E14:
0001677C 4A68 003A                  		tst.w	$3A(a0)
00016780 6700                       		beq.s	loc_15E3C
00016782 5568 003A                  		subq.w	#2,$3A(a0)
00016786                            
00016786                            loc_15E1E:
00016786 3028 003A                  		move.w	$3A(a0),d0
0001678A 0828 0000 0022             		btst	#0,$22(a0)
00016790 6700                       		beq.s	loc_15E30
00016792 4440                       		neg.w	d0
00016794 0640 0080                  		addi.w	#$80,d0
00016798                            
00016798                            loc_15E30:
00016798 3228 0034                  		move.w	$34(a0),d1
0001679C 9240                       		sub.w	d0,d1
0001679E 3141 0008                  		move.w	d1,8(a0)
000167A2 4E75                       		rts	
000167A4                            ; ===========================================================================
000167A4                            
000167A4                            loc_15E3C:
000167A4 5328 0028                  		subq.b	#1,$28(a0)
000167A8 4228 0038                  		clr.b	$38(a0)
000167AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167B0 7000                       		moveq	#0,d0
000167B2 1028 0023                  		move.b	$23(a0),d0
000167B6 67CE                       		beq.s	loc_15E1E
000167B8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000167BE 60C6                       		bra.s	loc_15E1E
000167C0                            ; ===========================================================================
000167C0                            
000167C0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000167C0 4A28 0038                  		tst.b	$38(a0)
000167C4 6600                       		bne.s	loc_15E7C
000167C6 4A68 003A                  		tst.w	$3A(a0)
000167CA 6700                       		beq.s	loc_15E6A
000167CC 5368 003A                  		subq.w	#1,$3A(a0)
000167D0 6000                       		bra.s	loc_15E8E
000167D2                            ; ===========================================================================
000167D2                            
000167D2                            loc_15E6A:
000167D2 5368 0036                  		subq.w	#1,$36(a0)
000167D6 6A00                       		bpl.s	loc_15E8E
000167D8 317C 003C 0036             		move.w	#$3C,$36(a0)
000167DE 117C 0001 0038             		move.b	#1,$38(a0)
000167E4                            
000167E4                            loc_15E7C:
000167E4 5068 003A                  		addq.w	#8,$3A(a0)
000167E8 3028 003A                  		move.w	$3A(a0),d0
000167EC B068 003C                  		cmp.w	$3C(a0),d0
000167F0 6600                       		bne.s	loc_15E8E
000167F2 4228 0038                  		clr.b	$38(a0)
000167F6                            
000167F6                            loc_15E8E:
000167F6 3028 003A                  		move.w	$3A(a0),d0
000167FA 0828 0000 0022             		btst	#0,$22(a0)
00016800 6700                       		beq.s	loc_15EA0
00016802 4440                       		neg.w	d0
00016804 0640 0038                  		addi.w	#$38,d0
00016808                            
00016808                            loc_15EA0:
00016808 3228 0030                  		move.w	$30(a0),d1
0001680C D240                       		add.w	d0,d1
0001680E 3141 000C                  		move.w	d1,$C(a0)
00016812 4E75                       		rts	
00016814                            ; ===========================================================================
00016814                            
00016814                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016814 4A28 0038                  		tst.b	$38(a0)
00016818 6600                       		bne.s	loc_15ED0
0001681A 4A68 003A                  		tst.w	$3A(a0)
0001681E 6700                       		beq.s	loc_15EBE
00016820 5168 003A                  		subq.w	#8,$3A(a0)
00016824 6000                       		bra.s	loc_15EF0
00016826                            ; ===========================================================================
00016826                            
00016826                            loc_15EBE:
00016826 5368 0036                  		subq.w	#1,$36(a0)
0001682A 6A00                       		bpl.s	loc_15EF0
0001682C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016832 117C 0001 0038             		move.b	#1,$38(a0)
00016838                            
00016838                            loc_15ED0:
00016838 3028 003A                  		move.w	$3A(a0),d0
0001683C B068 003C                  		cmp.w	$3C(a0),d0
00016840 6700                       		beq.s	loc_15EE0
00016842 5068 003A                  		addq.w	#8,$3A(a0)
00016846 6000                       		bra.s	loc_15EF0
00016848                            ; ===========================================================================
00016848                            
00016848                            loc_15EE0:
00016848 5368 0036                  		subq.w	#1,$36(a0)
0001684C 6A00                       		bpl.s	loc_15EF0
0001684E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016854 4228 0038                  		clr.b	$38(a0)
00016858                            
00016858                            loc_15EF0:
00016858 3028 003A                  		move.w	$3A(a0),d0
0001685C 0828 0000 0022             		btst	#0,$22(a0)
00016862 6700                       		beq.s	loc_15F02
00016864 4440                       		neg.w	d0
00016866 0640 0038                  		addi.w	#$38,d0
0001686A                            
0001686A                            loc_15F02:
0001686A 3228 0030                  		move.w	$30(a0),d1
0001686E D240                       		add.w	d0,d1
00016870 3141 000C                  		move.w	d1,$C(a0)
00016874 4E75                       		rts	
00016876                            ; ===========================================================================
00016876                            
00016876                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016876 4A28 0038                  		tst.b	$38(a0)
0001687A 6600                       		bne.s	loc_15F3E
0001687C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016880 7000                       		moveq	#0,d0
00016882 1028 003E                  		move.b	$3E(a0),d0
00016886 0832 0000 0000             		btst	#0,(a2,d0.w)
0001688C 6700                       		beq.s	locret_15F5C
0001688E 117C 0001 0038             		move.b	#1,$38(a0)
00016894 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016898 7000                       		moveq	#0,d0
0001689A 1028 0023                  		move.b	$23(a0),d0
0001689E 6700                       		beq.s	loc_15F3E
000168A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000168A6                            
000168A6                            loc_15F3E:
000168A6 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000168AE 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000168B6 3168 0008 0034             		move.w	8(a0),$34(a0)
000168BC 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000168C2 6700                       		beq.s	loc_15F5E
000168C4                            
000168C4                            locret_15F5C:
000168C4 4E75                       		rts	
000168C6                            ; ===========================================================================
000168C6                            
000168C6                            loc_15F5E:
000168C6 4228 0028                  		clr.b	$28(a0)
000168CA 4228 0038                  		clr.b	$38(a0)
000168CE 4E75                       		rts	
000168D0                            ; ===========================================================================
000168D0                            ; ---------------------------------------------------------------------------
000168D0                            ; Sprite mappings - stomper and	platforms (SBZ)
000168D0                            ; ---------------------------------------------------------------------------
000168D0                            Map_obj6B:
000168D0                            	include "_maps\obj6B.asm"
000168D0                            ; ---------------------------------------------------------------------------
000168D0                            ; Sprite mappings - stomper and	platforms (SBZ)
000168D0                            ; ---------------------------------------------------------------------------
000168D0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000168D4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000168D8 0000                       		dc.w byte_15FB0-Map_obj6B
000168DA 04                         byte_15F72:	dc.b 4
000168DB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000168E0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000168E5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000168EA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000168EF 08                         byte_15F87:	dc.b 8
000168F0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000168F5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000168FA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000168FF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016904 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016909 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001690E 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016913 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016918 0E                         byte_15FB0:	dc.b $E
00016919 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001691E C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016923 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016928 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001692D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016932 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016937 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001693C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016941 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016946 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001694B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016950 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016955 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001695A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016960 00                         		even
00016960 00                         		even
00016960                            
00016960                            ; ===========================================================================
00016960                            ; ---------------------------------------------------------------------------
00016960                            ; Object 6C - vanishing	platforms (SBZ)
00016960                            ; ---------------------------------------------------------------------------
00016960                            
00016960                            Obj6C:					; XREF: Obj_Index
00016960 7000                       		moveq	#0,d0
00016962 1028 0024                  		move.b	$24(a0),d0
00016966 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001696A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001696E                            ; ===========================================================================
0001696E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016970 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016972 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016974 0000                       		dc.w loc_16068-Obj6C_Index
00016976                            ; ===========================================================================
00016976                            
00016976                            Obj6C_Main:				; XREF: Obj6C_Index
00016976 5C28 0024                  		addq.b	#6,$24(a0)
0001697A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016982 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016988 0028 0004 0001             		ori.b	#4,1(a0)
0001698E 117C 0010 0019             		move.b	#$10,$19(a0)
00016994 117C 0004 0018             		move.b	#4,$18(a0)
0001699A 7000                       		moveq	#0,d0
0001699C 1028 0028                  		move.b	$28(a0),d0	; get object type
000169A0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000169A4 5240                       		addq.w	#1,d0		; add 1
000169A6 EF48                       		lsl.w	#7,d0		; multiply by $80
000169A8 3200                       		move.w	d0,d1
000169AA 5340                       		subq.w	#1,d0
000169AC 3140 0030                  		move.w	d0,$30(a0)
000169B0 3140 0032                  		move.w	d0,$32(a0)
000169B4 7000                       		moveq	#0,d0
000169B6 1028 0028                  		move.b	$28(a0),d0	; get object type
000169BA 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000169BE 0641 0080                  		addi.w	#$80,d1
000169C2 C0C1                       		mulu.w	d1,d0
000169C4 E088                       		lsr.l	#8,d0
000169C6 3140 0036                  		move.w	d0,$36(a0)
000169CA 5341                       		subq.w	#1,d1
000169CC 3141 0038                  		move.w	d1,$38(a0)
000169D0                            
000169D0                            loc_16068:				; XREF: Obj6C_Index
000169D0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169D4 9068 0036                  		sub.w	$36(a0),d0
000169D8 C068 0038                  		and.w	$38(a0),d0
000169DC 6600                       		bne.s	Obj6C_Animate
000169DE 5928 0024                  		subq.b	#4,$24(a0)
000169E2 6000                       		bra.s	Obj6C_Vanish
000169E4                            ; ===========================================================================
000169E4                            
000169E4                            Obj6C_Animate:
000169E4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000169EA 4EB9 0000 AEEE             		jsr	AnimateSprite
000169F0 6000 951E                  		bra.w	MarkObjGone
000169F4                            ; ===========================================================================
000169F4                            
000169F4                            Obj6C_Vanish:				; XREF: Obj6C_Index
000169F4 5368 0030                  		subq.w	#1,$30(a0)
000169F8 6A00                       		bpl.s	loc_160AA
000169FA 317C 007F 0030             		move.w	#127,$30(a0)
00016A00 4A28 001C                  		tst.b	$1C(a0)
00016A04 6700                       		beq.s	loc_160A4
00016A06 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A0C                            
00016A0C                            loc_160A4:
00016A0C 0868 0000 001C             		bchg	#0,$1C(a0)
00016A12                            
00016A12                            loc_160AA:
00016A12 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016A18 4EB9 0000 AEEE             		jsr	AnimateSprite
00016A1E 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016A24 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016A26 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016A2C 6600                       		bne.s	loc_160D6
00016A2E 7200                       		moveq	#0,d1
00016A30 1228 0019                  		move.b	$19(a0),d1
00016A34 4EB9 0000 7AAE             		jsr	(PlatformObject).l
00016A3A 6000 94D4                  		bra.w	MarkObjGone
00016A3E                            ; ===========================================================================
00016A3E                            
00016A3E                            loc_160D6:
00016A3E 7200                       		moveq	#0,d1
00016A40 1228 0019                  		move.b	$19(a0),d1
00016A44 4EB9 0000 7C22             		jsr	(ExitPlatform).l
00016A4A 3428 0008                  		move.w	8(a0),d2
00016A4E 4EB9 0000 818C             		jsr	(MvSonicOnPtfm2).l
00016A54 6000 94BA                  		bra.w	MarkObjGone
00016A58                            ; ===========================================================================
00016A58                            
00016A58                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016A58 0828 0003 0022             		btst	#3,$22(a0)
00016A5E 6700                       		beq.s	Obj6C_Display
00016A60 43F8 D000                  		lea	($FFFFD000).w,a1
00016A64 08A9 0003 0022             		bclr	#3,$22(a1)
00016A6A 08A8 0003 0022             		bclr	#3,$22(a0)
00016A70 117C 0002 0024             		move.b	#2,$24(a0)
00016A76 4228 0025                  		clr.b	$25(a0)
00016A7A                            
00016A7A                            Obj6C_Display:
00016A7A 6000 9494                  		bra.w	MarkObjGone
00016A7E                            ; ===========================================================================
00016A7E                            Ani_obj6C:
00016A7E                            	include "_anim\obj6C.asm"
00016A7E                            ; ---------------------------------------------------------------------------
00016A7E                            ; Animation script - vanishing platforms (SBZ)
00016A7E                            ; ---------------------------------------------------------------------------
00016A7E 0000                       		dc.w byte_1611A-Ani_obj6C
00016A80 0000                       		dc.w byte_16122-Ani_obj6C
00016A82 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A8A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016A92                            		even
00016A92                            		even
00016A92                            
00016A92                            ; ---------------------------------------------------------------------------
00016A92                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A92                            ; ---------------------------------------------------------------------------
00016A92                            Map_obj6C:
00016A92                            	include "_maps\obj6C.asm"
00016A92                            ; ---------------------------------------------------------------------------
00016A92                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A92                            ; ---------------------------------------------------------------------------
00016A92 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016A96 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016A9A 01                         byte_16132:	dc.b 1
00016A9B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016AA0 01                         byte_16138:	dc.b 1
00016AA1 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016AA6 01                         byte_1613E:	dc.b 1
00016AA7 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016AAC 00                         byte_16144:	dc.b 0
00016AAE 00                         		even
00016AAE 00                         		even
00016AAE                            
00016AAE                            ; ===========================================================================
00016AAE                            ; ---------------------------------------------------------------------------
00016AAE                            ; Object 6E - electrocution orbs (SBZ)
00016AAE                            ; ---------------------------------------------------------------------------
00016AAE                            
00016AAE                            Obj6E:					; XREF: Obj_Index
00016AAE 7000                       		moveq	#0,d0
00016AB0 1028 0024                  		move.b	$24(a0),d0
00016AB4 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016AB8 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016ABC                            ; ===========================================================================
00016ABC 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016ABE 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016AC0                            ; ===========================================================================
00016AC0                            
00016AC0                            Obj6E_Main:				; XREF: Obj6E_Index
00016AC0 5428 0024                  		addq.b	#2,$24(a0)
00016AC4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016ACC 317C 047E 0002             		move.w	#$47E,2(a0)
00016AD2 0028 0004 0001             		ori.b	#4,1(a0)
00016AD8 117C 0028 0019             		move.b	#$28,$19(a0)
00016ADE 7000                       		moveq	#0,d0
00016AE0 1028 0028                  		move.b	$28(a0),d0	; read object type
00016AE4 E948                       		lsl.w	#4,d0		; multiply by $10
00016AE6 5340                       		subq.w	#1,d0
00016AE8 3140 0034                  		move.w	d0,$34(a0)
00016AEC                            
00016AEC                            Obj6E_Shock:				; XREF: Obj6E_Index
00016AEC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016AF0 C068 0034                  		and.w	$34(a0),d0
00016AF4 6600                       		bne.s	Obj6E_Animate
00016AF6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016AFC 4A28 0001                  		tst.b	1(a0)
00016B00 6A00                       		bpl.s	Obj6E_Animate
00016B02 303C 00B1                  		move.w	#$B1,d0
00016B06 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play electricity sound
00016B0C                            
00016B0C                            Obj6E_Animate:
00016B0C 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016B12 4EB9 0000 AEEE             		jsr	AnimateSprite
00016B18 117C 0000 0020             		move.b	#0,$20(a0)
00016B1E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016B24 6600                       		bne.s	Obj6E_Display	; if not, branch
00016B26 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016B2C                            
00016B2C                            Obj6E_Display:
00016B2C 6000 93E2                  		bra.w	MarkObjGone
00016B30                            ; ===========================================================================
00016B30                            Ani_obj6E:
00016B30                            	include "_anim\obj6E.asm"
00016B30                            ; ---------------------------------------------------------------------------
00016B30                            ; Animation script - electrocution orbs (SBZ)
00016B30                            ; ---------------------------------------------------------------------------
00016B30 0000                       		dc.w byte_161CC-Ani_obj6E
00016B32 0000                       		dc.w byte_161D0-Ani_obj6E
00016B34 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016B38 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016B48                            		even
00016B48                            		even
00016B48                            
00016B48                            ; ---------------------------------------------------------------------------
00016B48                            ; Sprite mappings - electrocution orbs (SBZ)
00016B48                            ; ---------------------------------------------------------------------------
00016B48                            Map_obj6E:
00016B48                            	include "_maps\obj6E.asm"
00016B48                            Map_26ed:
00016B48 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016B4A 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016B4C 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016B4E 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016B50 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016B52 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016B54 01                         Map_26ed_C: 	dc.b $1
00016B55 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016B5A 02                         Map_26ed_12: 	dc.b $2
00016B5B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B60 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B65 06                         Map_26ed_1D: 	dc.b $6
00016B66 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B6B 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B70 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B75 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B7A F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B7F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B84 08                         Map_26ed_3C: 	dc.b $8
00016B85 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B8A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B8F F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B94 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B99 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B9E F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BA3 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BA8 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BAD 06                         Map_26ed_65: 	dc.b $6
00016BAE F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BB3 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BB8 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BBD F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BC2 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BC7 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BCC 04                         Map_26ed_84: 	dc.b $4
00016BCD F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BD2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BD7 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BDC F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BE2 00                         	even
00016BE2 00                         	even
00016BE2                            
00016BE2                            ; ===========================================================================
00016BE2                            ; ---------------------------------------------------------------------------
00016BE2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016BE2                            ; ---------------------------------------------------------------------------
00016BE2                            
00016BE2                            Obj6F:					; XREF: Obj_Index
00016BE2 7000                       		moveq	#0,d0
00016BE4 1028 0024                  		move.b	$24(a0),d0
00016BE8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016BEC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016BF0 3028 0030                  		move.w	$30(a0),d0
00016BF4 0240 FF80                  		andi.w	#$FF80,d0
00016BF8 3238 F700                  		move.w	($FFFFF700).w,d1
00016BFC 0441 0080                  		subi.w	#$80,d1
00016C00 0241 FF80                  		andi.w	#$FF80,d1
00016C04 9041                       		sub.w	d1,d0
00016C06 0C40 0280                  		cmpi.w	#$280,d0
00016C0A 6200                       		bhi.s	loc_1629A
00016C0C                            
00016C0C                            Obj6F_Display:
00016C0C 4EF9 0000 DE68             		jmp	DisplaySprite
00016C12                            ; ===========================================================================
00016C12                            
00016C12                            loc_1629A:
00016C12 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016C18 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016C1A 0C40 FF80                  		cmpi.w	#-$80,d0
00016C1E 64EC                       		bcc.s	Obj6F_Display
00016C20                            
00016C20                            Obj6F_Act1or2:
00016C20 1028 002F                  		move.b	$2F(a0),d0
00016C24 6A00                       		bpl.s	Obj6F_Delete
00016C26 0240 007F                  		andi.w	#$7F,d0
00016C2A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C2E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016C34                            
00016C34                            Obj6F_Delete:
00016C34 4EF9 0000 DEA4             		jmp	DeleteObject
00016C3A                            ; ===========================================================================
00016C3A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016C3C 0000                       		dc.w loc_163D8-Obj6F_Index
00016C3E                            ; ===========================================================================
00016C3E                            
00016C3E                            Obj6F_Main:				; XREF: Obj6F_Index
00016C3E 1028 0028                  		move.b	$28(a0),d0
00016C42 6B00 0000                  		bmi.w	loc_16380
00016C46 5428 0024                  		addq.b	#2,$24(a0)
00016C4A 217C 0001 62A2 0004        		move.l	#Map_obj69a,4(a0)
00016C52 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016C58 117C 0010 0019             		move.b	#$10,$19(a0)
00016C5E 0028 0004 0001             		ori.b	#4,1(a0)
00016C64 117C 0004 0018             		move.b	#4,$18(a0)
00016C6A 7000                       		moveq	#0,d0
00016C6C 1028 0028                  		move.b	$28(a0),d0
00016C70 3200                       		move.w	d0,d1
00016C72 E648                       		lsr.w	#3,d0
00016C74 0240 001E                  		andi.w	#$1E,d0
00016C78 45FA 0000                  		lea	off_164A6(pc),a2
00016C7C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C80 315A 0038                  		move.w	(a2)+,$38(a0)
00016C84 315A 0030                  		move.w	(a2)+,$30(a0)
00016C88 214A 003C                  		move.l	a2,$3C(a0)
00016C8C 0241 000F                  		andi.w	#$F,d1
00016C90 E549                       		lsl.w	#2,d1
00016C92 1141 0038                  		move.b	d1,$38(a0)
00016C96 117C 0004 003A             		move.b	#4,$3A(a0)
00016C9C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016CA0 6700                       		beq.s	loc_16356
00016CA2 117C 0001 003B             		move.b	#1,$3B(a0)
00016CA8 4428 003A                  		neg.b	$3A(a0)
00016CAC 7200                       		moveq	#0,d1
00016CAE 1228 0038                  		move.b	$38(a0),d1
00016CB2 D228 003A                  		add.b	$3A(a0),d1
00016CB6 B228 0039                  		cmp.b	$39(a0),d1
00016CBA 6500                       		bcs.s	loc_16352
00016CBC 1001                       		move.b	d1,d0
00016CBE 7200                       		moveq	#0,d1
00016CC0 4A00                       		tst.b	d0
00016CC2 6A00                       		bpl.s	loc_16352
00016CC4 1228 0039                  		move.b	$39(a0),d1
00016CC8 5901                       		subq.b	#4,d1
00016CCA                            
00016CCA                            loc_16352:
00016CCA 1141 0038                  		move.b	d1,$38(a0)
00016CCE                            
00016CCE                            loc_16356:
00016CCE 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016CD4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016CDA 4A41                       		tst.w	d1
00016CDC 6600                       		bne.s	loc_1636C
00016CDE 117C 0001 001C             		move.b	#1,$1C(a0)
00016CE4                            
00016CE4                            loc_1636C:
00016CE4 0C41 0008                  		cmpi.w	#8,d1
00016CE8 6600                       		bne.s	loc_16378
00016CEA 117C 0000 001C             		move.b	#0,$1C(a0)
00016CF0                            
00016CF0                            loc_16378:
00016CF0 6100 C0B6                  		bsr.w	Obj63_ChangeDir
00016CF4 6000 0000                  		bra.w	loc_163D8
00016CF8                            ; ===========================================================================
00016CF8                            
00016CF8                            loc_16380:				; XREF: Obj6F_Main
00016CF8 1140 002F                  		move.b	d0,$2F(a0)
00016CFC 0240 007F                  		andi.w	#$7F,d0
00016D00 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016D04 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016D0A 6700                       		beq.s	loc_1639A
00016D0C 4EF9 0000 DEA4             		jmp	DeleteObject
00016D12                            ; ===========================================================================
00016D12                            
00016D12                            loc_1639A:
00016D12 D040                       		add.w	d0,d0
00016D14 0240 001E                  		andi.w	#$1E,d0
00016D18 0640 0080                  		addi.w	#$80,d0
00016D1C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016D22 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016D26 321A                       		move.w	(a2)+,d1
00016D28 2248                       		movea.l	a0,a1
00016D2A 6000                       		bra.s	Obj6F_LoadPform
00016D2C                            ; ===========================================================================
00016D2C                            
00016D2C                            Obj6F_Loop:
00016D2C 4EB9 0000 E2EE             		jsr	SingleObjLoad
00016D32 6600                       		bne.s	loc_163D0
00016D34                            
00016D34                            Obj6F_LoadPform:			; XREF: loc_1639A
00016D34 12BC 006F                  		move.b	#$6F,0(a1)
00016D38 335A 0008                  		move.w	(a2)+,8(a1)
00016D3C 335A 000C                  		move.w	(a2)+,$C(a1)
00016D40 301A                       		move.w	(a2)+,d0
00016D42 1340 0028                  		move.b	d0,$28(a1)
00016D46                            
00016D46                            loc_163D0:
00016D46 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016D4A                            
00016D4A 588F                       		addq.l	#4,sp
00016D4C 4E75                       		rts	
00016D4E                            ; ===========================================================================
00016D4E                            
00016D4E                            loc_163D8:				; XREF: Obj6F_Index
00016D4E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016D54 4EB9 0000 AEEE             		jsr	AnimateSprite
00016D5A 4A28 001A                  		tst.b	$1A(a0)
00016D5E 6600                       		bne.s	loc_16404
00016D60 3F28 0008                  		move.w	8(a0),-(sp)
00016D64 6100 0000                  		bsr.w	loc_16424
00016D68 323C 001B                  		move.w	#$1B,d1
00016D6C 343C 0007                  		move.w	#7,d2
00016D70 3602                       		move.w	d2,d3
00016D72 5243                       		addq.w	#1,d3
00016D74 381F                       		move.w	(sp)+,d4
00016D76 6000 94C0                  		bra.w	SolidObject
00016D7A                            ; ===========================================================================
00016D7A                            
00016D7A                            loc_16404:
00016D7A 0828 0003 0022             		btst	#3,$22(a0)
00016D80 6700                       		beq.s	loc_16420
00016D82 43F8 D000                  		lea	($FFFFD000).w,a1
00016D86 08A9 0003 0022             		bclr	#3,$22(a1)
00016D8C 08A8 0003 0022             		bclr	#3,$22(a0)
00016D92 4228 0025                  		clr.b	$25(a0)
00016D96                            
00016D96                            loc_16420:
00016D96 6000 0002                  		bra.w	*+4
00016D9A                            
00016D9A                            loc_16424:
00016D9A 3028 0008                  		move.w	8(a0),d0
00016D9E B068 0034                  		cmp.w	$34(a0),d0
00016DA2 6600                       		bne.s	loc_16484
00016DA4 3028 000C                  		move.w	$C(a0),d0
00016DA8 B068 0036                  		cmp.w	$36(a0),d0
00016DAC 6600                       		bne.s	loc_16484
00016DAE 7200                       		moveq	#0,d1
00016DB0 1228 0038                  		move.b	$38(a0),d1
00016DB4 D228 003A                  		add.b	$3A(a0),d1
00016DB8 B228 0039                  		cmp.b	$39(a0),d1
00016DBC 6500                       		bcs.s	loc_16456
00016DBE 1001                       		move.b	d1,d0
00016DC0 7200                       		moveq	#0,d1
00016DC2 4A00                       		tst.b	d0
00016DC4 6A00                       		bpl.s	loc_16456
00016DC6 1228 0039                  		move.b	$39(a0),d1
00016DCA 5901                       		subq.b	#4,d1
00016DCC                            
00016DCC                            loc_16456:
00016DCC 1141 0038                  		move.b	d1,$38(a0)
00016DD0 2268 003C                  		movea.l	$3C(a0),a1
00016DD4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016DDA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016DE0 4A41                       		tst.w	d1
00016DE2 6600                       		bne.s	loc_16474
00016DE4 117C 0001 001C             		move.b	#1,$1C(a0)
00016DEA                            
00016DEA                            loc_16474:
00016DEA 0C41 0008                  		cmpi.w	#8,d1
00016DEE 6600                       		bne.s	loc_16480
00016DF0 117C 0000 001C             		move.b	#0,$1C(a0)
00016DF6                            
00016DF6                            loc_16480:
00016DF6 6100 BFB0                  		bsr.w	Obj63_ChangeDir
00016DFA                            
00016DFA                            loc_16484:
00016DFA 4EF9 0000 DE42             		jmp	SpeedToPos
00016E00                            ; ===========================================================================
00016E00                            Ani_obj6F:
00016E00                            	include "_anim\obj6F.asm"
00016E00                            ; ---------------------------------------------------------------------------
00016E00                            ; Animation script - platform on conveyor belt (SBZ)
00016E00                            ; ---------------------------------------------------------------------------
00016E00 0000                       		dc.w byte_1648E-Ani_obj6F
00016E02 0000                       		dc.w byte_164A2-Ani_obj6F
00016E04 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016E11 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016E18 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016E1C 00                         		even
00016E1C 00                         		even
00016E1C                            
00016E1C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016E22 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016E28 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016E3C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016E50 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016E64 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016E78 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E8C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016EA0                            ; ===========================================================================
00016EA0                            ; ---------------------------------------------------------------------------
00016EA0                            ; Object 70 - large girder block (SBZ)
00016EA0                            ; ---------------------------------------------------------------------------
00016EA0                            
00016EA0                            Obj70:					; XREF: Obj_Index
00016EA0 7000                       		moveq	#0,d0
00016EA2 1028 0024                  		move.b	$24(a0),d0
00016EA6 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016EAA 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016EAE                            ; ===========================================================================
00016EAE 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016EB0 0000                       		dc.w Obj70_Action-Obj70_Index
00016EB2                            ; ===========================================================================
00016EB2                            
00016EB2                            Obj70_Main:				; XREF: Obj70_Index
00016EB2 5428 0024                  		addq.b	#2,$24(a0)
00016EB6 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016EBE 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016EC4 0028 0004 0001             		ori.b	#4,1(a0)
00016ECA 117C 0004 0018             		move.b	#4,$18(a0)
00016ED0 117C 0060 0019             		move.b	#$60,$19(a0)
00016ED6 117C 0018 0016             		move.b	#$18,$16(a0)
00016EDC 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EE2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EE8 6100 0000                  		bsr.w	Obj70_Move2
00016EEC                            
00016EEC                            Obj70_Action:				; XREF: Obj70_Index
00016EEC 3F28 0008                  		move.w	8(a0),-(sp)
00016EF0 4A68 003A                  		tst.w	$3A(a0)
00016EF4 6700                       		beq.s	Obj70_Move
00016EF6 5368 003A                  		subq.w	#1,$3A(a0)
00016EFA 6600                       		bne.s	Obj70_Solid
00016EFC                            
00016EFC                            Obj70_Move:
00016EFC 4EB9 0000 DE42             		jsr	SpeedToPos
00016F02 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016F06 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016F08 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016F0C                            
00016F0C                            Obj70_Solid:
00016F0C 381F                       		move.w	(sp)+,d4
00016F0E 4A28 0001                  		tst.b	1(a0)
00016F12 6A00                       		bpl.s	Obj70_ChkDel
00016F14 7200                       		moveq	#0,d1
00016F16 1228 0019                  		move.b	$19(a0),d1
00016F1A 0641 000B                  		addi.w	#$B,d1
00016F1E 7400                       		moveq	#0,d2
00016F20 1428 0016                  		move.b	$16(a0),d2
00016F24 3602                       		move.w	d2,d3
00016F26 5243                       		addq.w	#1,d3
00016F28 6100 930E                  		bsr.w	SolidObject
00016F2C                            
00016F2C                            Obj70_ChkDel:
00016F2C 3028 0032                  		move.w	$32(a0),d0
00016F30 0240 FF80                  		andi.w	#$FF80,d0
00016F34 3238 F700                  		move.w	($FFFFF700).w,d1
00016F38 0441 0080                  		subi.w	#$80,d1
00016F3C 0241 FF80                  		andi.w	#$FF80,d1
00016F40 9041                       		sub.w	d1,d0
00016F42 0C40 0280                  		cmpi.w	#$280,d0
00016F46 6200                       		bhi.s	Obj70_Delete
00016F48 4EF9 0000 DE68             		jmp	DisplaySprite
00016F4E                            ; ===========================================================================
00016F4E                            
00016F4E                            Obj70_Delete:
00016F4E 4EF9 0000 DEA4             		jmp	DeleteObject
00016F54                            ; ===========================================================================
00016F54                            
00016F54                            Obj70_Move2:				; XREF: Obj70_Main
00016F54 1028 0038                  		move.b	$38(a0),d0
00016F58 0240 0018                  		andi.w	#$18,d0
00016F5C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016F62 43F1 0000                  		lea	(a1,d0.w),a1
00016F66 3159 0010                  		move.w	(a1)+,$10(a0)
00016F6A 3159 0012                  		move.w	(a1)+,$12(a0)
00016F6E 3159 0034                  		move.w	(a1)+,$34(a0)
00016F72 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016F76 317C 0007 003A             		move.w	#7,$3A(a0)
00016F7C 4E75                       		rts	
00016F7E                            ; ===========================================================================
00016F7E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F86 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F8E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016F96 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016F9E                            ; ---------------------------------------------------------------------------
00016F9E                            ; Sprite mappings - large girder block (SBZ)
00016F9E                            ; ---------------------------------------------------------------------------
00016F9E                            Map_obj70:
00016F9E                            	include "_maps\obj70.asm"
00016F9E                            ; ---------------------------------------------------------------------------
00016F9E                            ; Sprite mappings - large girder block (SBZ)
00016F9E                            ; ---------------------------------------------------------------------------
00016F9E 0000                       		dc.w byte_1662A-Map_obj70
00016FA0 0C                         byte_1662A:	dc.b $C
00016FA1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016FA6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016FAB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016FB0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016FB5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016FBA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016FBF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016FC4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016FC9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016FCE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016FD3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016FD8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016FDE 00                         		even
00016FDE 00                         		even
00016FDE                            
00016FDE                            ; ===========================================================================
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            ; Object 72 - teleporter (SBZ)
00016FDE                            ; ---------------------------------------------------------------------------
00016FDE                            
00016FDE                            Obj72:					; XREF: Obj_Index
00016FDE 7000                       		moveq	#0,d0
00016FE0 1028 0024                  		move.b	$24(a0),d0
00016FE4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016FE8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016FEC 3028 0008                  		move.w	8(a0),d0
00016FF0 0240 FF80                  		andi.w	#$FF80,d0
00016FF4 3238 F700                  		move.w	($FFFFF700).w,d1
00016FF8 0441 0080                  		subi.w	#$80,d1
00016FFC 0241 FF80                  		andi.w	#$FF80,d1
00017000 9041                       		sub.w	d1,d0
00017002 0C40 0280                  		cmpi.w	#$280,d0
00017006 6200                       		bhi.s	Obj72_Delete
00017008 4E75                       		rts	
0001700A                            ; ===========================================================================
0001700A                            
0001700A                            Obj72_Delete:
0001700A 4EF9 0000 DEA4             		jmp	DeleteObject
00017010                            ; ===========================================================================
00017010 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00017012 0000                       		dc.w loc_166C8-Obj72_Index
00017014 0000                       		dc.w loc_1675E-Obj72_Index
00017016 0000                       		dc.w loc_16798-Obj72_Index
00017018                            ; ===========================================================================
00017018                            
00017018                            Obj72_Main:				; XREF: Obj72_Index
00017018 5428 0024                  		addq.b	#2,$24(a0)
0001701C 1028 0028                  		move.b	$28(a0),d0
00017020 D040                       		add.w	d0,d0
00017022 0240 001E                  		andi.w	#$1E,d0
00017026 45FA 0000                  		lea	Obj72_Data(pc),a2
0001702A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001702E 315A 003A                  		move.w	(a2)+,$3A(a0)
00017032 214A 003C                  		move.l	a2,$3C(a0)
00017036 315A 0036                  		move.w	(a2)+,$36(a0)
0001703A 315A 0038                  		move.w	(a2)+,$38(a0)
0001703E                            
0001703E                            loc_166C8:				; XREF: Obj72_Index
0001703E 43F8 D000                  		lea	($FFFFD000).w,a1
00017042 3029 0008                  		move.w	8(a1),d0
00017046 9068 0008                  		sub.w	8(a0),d0
0001704A 0828 0000 0022             		btst	#0,$22(a0)
00017050 6700                       		beq.s	loc_166E0
00017052 0640 000F                  		addi.w	#$F,d0
00017056                            
00017056                            loc_166E0:
00017056 0C40 0010                  		cmpi.w	#$10,d0
0001705A 6400                       		bcc.s	locret_1675C
0001705C 3229 000C                  		move.w	$C(a1),d1
00017060 9268 000C                  		sub.w	$C(a0),d1
00017064 0641 0020                  		addi.w	#$20,d1
00017068 0C41 0040                  		cmpi.w	#$40,d1
0001706C 6400                       		bcc.s	locret_1675C
0001706E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017072 6600                       		bne.s	locret_1675C
00017074 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001707A 6600                       		bne.s	loc_1670E
0001707C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017082 6500                       		bcs.s	locret_1675C
00017084                            
00017084                            loc_1670E:
00017084 5428 0024                  		addq.b	#2,$24(a0)
00017088 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001708E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017094 337C 0800 0014             		move.w	#$800,$14(a1)
0001709A 337C 0000 0010             		move.w	#0,$10(a1)
000170A0 337C 0000 0012             		move.w	#0,$12(a1)
000170A6 08A8 0005 0022             		bclr	#5,$22(a0)
000170AC 08A9 0005 0022             		bclr	#5,$22(a1)
000170B2 08E9 0001 0022             		bset	#1,$22(a1)
000170B8 3368 0008 0008             		move.w	8(a0),8(a1)
000170BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170C4 4228 0032                  		clr.b	$32(a0)
000170C8 303C 00BE                  		move.w	#$BE,d0
000170CC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000170D2                            
000170D2                            locret_1675C:
000170D2 4E75                       		rts	
000170D4                            ; ===========================================================================
000170D4                            
000170D4                            loc_1675E:				; XREF: Obj72_Index
000170D4 43F8 D000                  		lea	($FFFFD000).w,a1
000170D8 1028 0032                  		move.b	$32(a0),d0
000170DC 5428 0032                  		addq.b	#2,$32(a0)
000170E0 4EB9 0000 2D02             		jsr	(CalcSine).l
000170E6 EA40                       		asr.w	#5,d0
000170E8 3428 000C                  		move.w	$C(a0),d2
000170EC 9440                       		sub.w	d0,d2
000170EE 3342 000C                  		move.w	d2,$C(a1)
000170F2 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000170F8 6600                       		bne.s	locret_16796
000170FA 6100 0000                  		bsr.w	sub_1681C
000170FE 5428 0024                  		addq.b	#2,$24(a0)
00017102 303C 00BC                  		move.w	#$BC,d0
00017106 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play teleport sound
0001710C                            
0001710C                            locret_16796:
0001710C 4E75                       		rts	
0001710E                            ; ===========================================================================
0001710E                            
0001710E                            loc_16798:				; XREF: Obj72_Index
0001710E 588F                       		addq.l	#4,sp
00017110 43F8 D000                  		lea	($FFFFD000).w,a1
00017114 5328 002E                  		subq.b	#1,$2E(a0)
00017118 6A00                       		bpl.s	loc_167DA
0001711A 3368 0036 0008             		move.w	$36(a0),8(a1)
00017120 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017126 7200                       		moveq	#0,d1
00017128 1228 003A                  		move.b	$3A(a0),d1
0001712C 5801                       		addq.b	#4,d1
0001712E B228 003B                  		cmp.b	$3B(a0),d1
00017132 6500                       		bcs.s	loc_167C2
00017134 7200                       		moveq	#0,d1
00017136 6000                       		bra.s	loc_16800
00017138                            ; ===========================================================================
00017138                            
00017138                            loc_167C2:
00017138 1141 003A                  		move.b	d1,$3A(a0)
0001713C 2468 003C                  		movea.l	$3C(a0),a2
00017140 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017146 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001714C 6000 0000                  		bra.w	sub_1681C
00017150                            ; ===========================================================================
00017150                            
00017150                            loc_167DA:
00017150 2429 0008                  		move.l	8(a1),d2
00017154 2629 000C                  		move.l	$C(a1),d3
00017158 3029 0010                  		move.w	$10(a1),d0
0001715C 48C0                       		ext.l	d0
0001715E E180                       		asl.l	#8,d0
00017160 D480                       		add.l	d0,d2
00017162 3029 0012                  		move.w	$12(a1),d0
00017166 48C0                       		ext.l	d0
00017168 E180                       		asl.l	#8,d0
0001716A D680                       		add.l	d0,d3
0001716C 2342 0008                  		move.l	d2,8(a1)
00017170 2343 000C                  		move.l	d3,$C(a1)
00017174 4E75                       		rts	
00017176                            ; ===========================================================================
00017176                            
00017176                            loc_16800:
00017176 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001717C 4228 0024                  		clr.b	$24(a0)
00017180 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017184 337C 0000 0010             		move.w	#0,$10(a1)
0001718A 337C 0200 0012             		move.w	#$200,$12(a1)
00017190 4E75                       		rts	
00017192                            
00017192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017192                            
00017192                            
00017192                            sub_1681C:
00017192 7000                       		moveq	#0,d0
00017194 343C 1000                  		move.w	#$1000,d2
00017198 3028 0036                  		move.w	$36(a0),d0
0001719C 9069 0008                  		sub.w	8(a1),d0
000171A0 6C00                       		bge.s	loc_16830
000171A2 4440                       		neg.w	d0
000171A4 4442                       		neg.w	d2
000171A6                            
000171A6                            loc_16830:
000171A6 7200                       		moveq	#0,d1
000171A8 363C 1000                  		move.w	#$1000,d3
000171AC 3228 0038                  		move.w	$38(a0),d1
000171B0 9269 000C                  		sub.w	$C(a1),d1
000171B4 6C00                       		bge.s	loc_16844
000171B6 4441                       		neg.w	d1
000171B8 4443                       		neg.w	d3
000171BA                            
000171BA                            loc_16844:
000171BA B240                       		cmp.w	d0,d1
000171BC 6500                       		bcs.s	loc_1687A
000171BE 7200                       		moveq	#0,d1
000171C0 3228 0038                  		move.w	$38(a0),d1
000171C4 9269 000C                  		sub.w	$C(a1),d1
000171C8 4841                       		swap	d1
000171CA 83C3                       		divs.w	d3,d1
000171CC 7000                       		moveq	#0,d0
000171CE 3028 0036                  		move.w	$36(a0),d0
000171D2 9069 0008                  		sub.w	8(a1),d0
000171D6 6700                       		beq.s	loc_16866
000171D8 4840                       		swap	d0
000171DA 81C1                       		divs.w	d1,d0
000171DC                            
000171DC                            loc_16866:
000171DC 3340 0010                  		move.w	d0,$10(a1)
000171E0 3343 0012                  		move.w	d3,$12(a1)
000171E4 4A41                       		tst.w	d1
000171E6 6A00                       		bpl.s	loc_16874
000171E8 4441                       		neg.w	d1
000171EA                            
000171EA                            loc_16874:
000171EA 3141 002E                  		move.w	d1,$2E(a0)
000171EE 4E75                       		rts	
000171F0                            ; ===========================================================================
000171F0                            
000171F0                            loc_1687A:
000171F0 7000                       		moveq	#0,d0
000171F2 3028 0036                  		move.w	$36(a0),d0
000171F6 9069 0008                  		sub.w	8(a1),d0
000171FA 4840                       		swap	d0
000171FC 81C2                       		divs.w	d2,d0
000171FE 7200                       		moveq	#0,d1
00017200 3228 0038                  		move.w	$38(a0),d1
00017204 9269 000C                  		sub.w	$C(a1),d1
00017208 6700                       		beq.s	loc_16898
0001720A 4841                       		swap	d1
0001720C 83C0                       		divs.w	d0,d1
0001720E                            
0001720E                            loc_16898:
0001720E 3341 0012                  		move.w	d1,$12(a1)
00017212 3342 0010                  		move.w	d2,$10(a1)
00017216 4A40                       		tst.w	d0
00017218 6A00                       		bpl.s	loc_168A6
0001721A 4440                       		neg.w	d0
0001721C                            
0001721C                            loc_168A6:
0001721C 3140 002E                  		move.w	d0,$2E(a0)
00017220 4E75                       		rts	
00017222                            ; End of function sub_1681C
00017222                            
00017222                            ; ===========================================================================
00017222 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017228 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001722E 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017232 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017238 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001723E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017244 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001724A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017250 0884 0298 0894             		dc.w $884, $298, $894
00017256 0270 0894 0190             		dc.w $270, $894, $190
0001725C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017262 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017268 1184 0498 1158             		dc.w $1184, $498, $1158
0001726E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017274 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001727A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017280 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017286 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001728C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017292 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017298 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001729E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000172A4 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000172AA                            ; ===========================================================================
000172AA                            ; ---------------------------------------------------------------------------
000172AA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000172AA                            ; ---------------------------------------------------------------------------
000172AA                            
000172AA                            Obj78:					; XREF: Obj_Index
000172AA 7000                       		moveq	#0,d0
000172AC 1028 0024                  		move.b	$24(a0),d0
000172B0 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000172B4 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000172B8                            ; ===========================================================================
000172B8 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000172BA 0000                       		dc.w Obj78_Action-Obj78_Index
000172BC 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172BE 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000172C0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172C2 0000                       		dc.w Obj78_Delete-Obj78_Index
000172C4 0000                       		dc.w loc_16CC0-Obj78_Index
000172C6                            ; ===========================================================================
000172C6                            
000172C6                            locret_16950:
000172C6 4E75                       		rts	
000172C8                            ; ===========================================================================
000172C8                            
000172C8                            Obj78_Main:				; XREF: Obj78_Index
000172C8 117C 0007 0016             		move.b	#7,$16(a0)
000172CE 117C 0008 0017             		move.b	#8,$17(a0)
000172D4 4EB9 0000 DDD0             		jsr	ObjectFall
000172DA 4EBA E4A6                  		jsr	ObjHitFloor
000172DE 4A41                       		tst.w	d1
000172E0 6AE4                       		bpl.s	locret_16950
000172E2 D368 000C                  		add.w	d1,$C(a0)
000172E6 4268 0012                  		clr.w	$12(a0)
000172EA 5428 0024                  		addq.b	#2,$24(a0)
000172EE 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000172F6 317C 22B0 0002             		move.w	#$22B0,2(a0)
000172FC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017302 6700                       		beq.s	loc_16996
00017304 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001730A                            
0001730A                            loc_16996:
0001730A 0228 0003 0001             		andi.b	#3,1(a0)
00017310 0028 0004 0001             		ori.b	#4,1(a0)
00017316 1168 0001 0022             		move.b	1(a0),$22(a0)
0001731C 117C 0004 0018             		move.b	#4,$18(a0)
00017322 117C 0008 0019             		move.b	#8,$19(a0)
00017328 117C 000B 0020             		move.b	#$B,$20(a0)
0001732E 3428 0008                  		move.w	8(a0),d2
00017332 7A0C                       		moveq	#$C,d5
00017334 0828 0000 0022             		btst	#0,$22(a0)
0001733A 6700                       		beq.s	loc_169CA
0001733C 4445                       		neg.w	d5
0001733E                            
0001733E                            loc_169CA:
0001733E 1C3C 0004                  		move.b	#4,d6
00017342 7600                       		moveq	#0,d3
00017344 7804                       		moveq	#4,d4
00017346 2448                       		movea.l	a0,a2
00017348 7202                       		moveq	#2,d1
0001734A                            
0001734A                            Obj78_LoadBody:
0001734A 4EB9 0000 E304             		jsr	SingleObjLoad2
00017350 6600                       		bne.s	Obj78_QuitLoad
00017352 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017356 1346 0024                  		move.b	d6,$24(a1)
0001735A 5406                       		addq.b	#2,d6
0001735C 2368 0004 0004             		move.l	4(a0),4(a1)
00017362 3368 0002 0002             		move.w	2(a0),2(a1)
00017368 137C 0005 0018             		move.b	#5,$18(a1)
0001736E 137C 0008 0019             		move.b	#8,$19(a1)
00017374 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001737A D445                       		add.w	d5,d2
0001737C 3342 0008                  		move.w	d2,8(a1)
00017380 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017386 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001738C 1368 0022 0001             		move.b	$22(a0),1(a1)
00017392 137C 0008 001A             		move.b	#8,$1A(a1)
00017398 234A 003C                  		move.l	a2,$3C(a1)
0001739C 1344 003C                  		move.b	d4,$3C(a1)
000173A0 5804                       		addq.b	#4,d4
000173A2 2449                       		movea.l	a1,a2
000173A4                            
000173A4                            Obj78_QuitLoad:
000173A4 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000173A8                            
000173A8 117C 0007 002A             		move.b	#7,$2A(a0)
000173AE 4228 003C                  		clr.b	$3C(a0)
000173B2                            
000173B2                            Obj78_Action:				; XREF: Obj78_Index
000173B2 4A28 0022                  		tst.b	$22(a0)
000173B6 6B00 0000                  		bmi.w	loc_16C96
000173BA 7000                       		moveq	#0,d0
000173BC 1028 0025                  		move.b	$25(a0),d0
000173C0 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000173C4 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000173C8 1228 002B                  		move.b	$2B(a0),d1
000173CC 6A00                       		bpl.s	Obj78_Display
000173CE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000173D4 1028 0026                  		move.b	$26(a0),d0
000173D8 0240 007F                  		andi.w	#$7F,d0
000173DC 5828 0026                  		addq.b	#4,$26(a0)
000173E0 1031 0000                  		move.b	(a1,d0.w),d0
000173E4 6A00                       		bpl.s	Obj78_AniHead
000173E6 08A8 0007 002B             		bclr	#7,$2B(a0)
000173EC 6000                       		bra.s	Obj78_Display
000173EE                            ; ===========================================================================
000173EE                            
000173EE                            Obj78_AniHead:
000173EE 0201 0010                  		andi.b	#$10,d1
000173F2 D001                       		add.b	d1,d0
000173F4 1140 001A                  		move.b	d0,$1A(a0)
000173F8                            
000173F8                            Obj78_Display:
000173F8 3028 0008                  		move.w	8(a0),d0
000173FC 0240 FF80                  		andi.w	#$FF80,d0
00017400 3238 F700                  		move.w	($FFFFF700).w,d1
00017404 0441 0080                  		subi.w	#$80,d1
00017408 0241 FF80                  		andi.w	#$FF80,d1
0001740C 9041                       		sub.w	d1,d0
0001740E 0C40 0280                  		cmpi.w	#$280,d0
00017412 6200 0000                  		bhi.w	Obj78_ChkGone
00017416 4EF9 0000 DE68             		jmp	DisplaySprite
0001741C                            ; ===========================================================================
0001741C                            
0001741C                            Obj78_ChkGone:
0001741C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017420 7000                       		moveq	#0,d0
00017422 1028 0023                  		move.b	$23(a0),d0
00017426 6700                       		beq.s	loc_16ABC
00017428 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001742E                            
0001742E                            loc_16ABC:
0001742E 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017434 4E75                       		rts	
00017436                            ; ===========================================================================
00017436                            
00017436                            Obj78_Delete:				; XREF: Obj78_Index
00017436 4EF9 0000 DEA4             		jmp	DeleteObject
0001743C                            ; ===========================================================================
0001743C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001743E 0000                       		dc.w loc_16B02-Obj78_Index2
00017440                            ; ===========================================================================
00017440                            
00017440                            Obj78_Move:				; XREF: Obj78_Index2
00017440 5328 002A                  		subq.b	#1,$2A(a0)
00017444 6B00                       		bmi.s	Obj78_Move2
00017446 4E75                       		rts	
00017448                            ; ===========================================================================
00017448                            
00017448                            Obj78_Move2:
00017448 5428 0025                  		addq.b	#2,$25(a0)
0001744C 117C 0010 002A             		move.b	#$10,$2A(a0)
00017452 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017458 317C 0040 0014             		move.w	#$40,$14(a0)
0001745E 0868 0004 002B             		bchg	#4,$2B(a0)
00017464 6600                       		bne.s	loc_16AFC
00017466 4268 0010                  		clr.w	$10(a0)
0001746A 4468 0014                  		neg.w	$14(a0)
0001746E                            
0001746E                            loc_16AFC:
0001746E 08E8 0007 002B             		bset	#7,$2B(a0)
00017474                            
00017474                            loc_16B02:				; XREF: Obj78_Index2
00017474 5328 002A                  		subq.b	#1,$2A(a0)
00017478 6B00                       		bmi.s	loc_16B5E
0001747A 2F28 0008                  		move.l	8(a0),-(sp)
0001747E 2428 0008                  		move.l	8(a0),d2
00017482 3028 0010                  		move.w	$10(a0),d0
00017486 0828 0000 0022             		btst	#0,$22(a0)
0001748C 6700                       		beq.s	loc_16B1E
0001748E 4440                       		neg.w	d0
00017490                            
00017490                            loc_16B1E:
00017490 48C0                       		ext.l	d0
00017492 E180                       		asl.l	#8,d0
00017494 D480                       		add.l	d0,d2
00017496 2142 0008                  		move.l	d2,8(a0)
0001749A 4EBA E2E6                  		jsr	ObjHitFloor
0001749E 241F                       		move.l	(sp)+,d2
000174A0 0C41 FFF8                  		cmpi.w	#-8,d1
000174A4 6D00                       		blt.s	loc_16B70
000174A6 0C41 000C                  		cmpi.w	#$C,d1
000174AA 6C00                       		bge.s	loc_16B70
000174AC D368 000C                  		add.w	d1,$C(a0)
000174B0 4842                       		swap	d2
000174B2 B468 0008                  		cmp.w	8(a0),d2
000174B6 6700                       		beq.s	locret_16B5C
000174B8 7000                       		moveq	#0,d0
000174BA 1028 003C                  		move.b	$3C(a0),d0
000174BE 5228 003C                  		addq.b	#1,$3C(a0)
000174C2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174C8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174CC                            
000174CC                            locret_16B5C:
000174CC 4E75                       		rts	
000174CE                            ; ===========================================================================
000174CE                            
000174CE                            loc_16B5E:
000174CE 5528 0025                  		subq.b	#2,$25(a0)
000174D2 117C 0007 002A             		move.b	#7,$2A(a0)
000174D8 317C 0000 0010             		move.w	#0,$10(a0)
000174DE 4E75                       		rts	
000174E0                            ; ===========================================================================
000174E0                            
000174E0                            loc_16B70:
000174E0 2142 0008                  		move.l	d2,8(a0)
000174E4 0868 0000 0022             		bchg	#0,$22(a0)
000174EA 1168 0022 0001             		move.b	$22(a0),1(a0)
000174F0 7000                       		moveq	#0,d0
000174F2 1028 003C                  		move.b	$3C(a0),d0
000174F6 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000174FC 5228 003C                  		addq.b	#1,$3C(a0)
00017500 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017506 4E75                       		rts	
00017508                            ; ===========================================================================
00017508                            
00017508                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017508 2268 003C                  		movea.l	$3C(a0),a1
0001750C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017512 6A00                       		bpl.s	Obj78_BodySeg1
00017514 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001751A 1028 0026                  		move.b	$26(a0),d0
0001751E 0240 007F                  		andi.w	#$7F,d0
00017522 5828 0026                  		addq.b	#4,$26(a0)
00017526 4A31 0004                  		tst.b	4(a1,d0.w)
0001752A 6A00                       		bpl.s	Obj78_AniBody
0001752C 5828 0026                  		addq.b	#4,$26(a0)
00017530                            
00017530                            Obj78_AniBody:
00017530 1031 0000                  		move.b	(a1,d0.w),d0
00017534 5000                       		addq.b	#8,d0
00017536 1140 001A                  		move.b	d0,$1A(a0)
0001753A                            
0001753A                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001753A 2268 003C                  		movea.l	$3C(a0),a1
0001753E 4A28 0022                  		tst.b	$22(a0)
00017542 6B00 0000                  		bmi.w	loc_16C90
00017546 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001754C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017552 6700 0000                  		beq.w	loc_16C64
00017556 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001755C 3029 0010                  		move.w	$10(a1),d0
00017560 D069 0014                  		add.w	$14(a1),d0
00017564 3140 0010                  		move.w	d0,$10(a0)
00017568 2428 0008                  		move.l	8(a0),d2
0001756C 2602                       		move.l	d2,d3
0001756E 3028 0010                  		move.w	$10(a0),d0
00017572 0828 0000 0022             		btst	#0,$22(a0)
00017578 6700                       		beq.s	loc_16C0C
0001757A 4440                       		neg.w	d0
0001757C                            
0001757C                            loc_16C0C:
0001757C 48C0                       		ext.l	d0
0001757E E180                       		asl.l	#8,d0
00017580 D480                       		add.l	d0,d2
00017582 2142 0008                  		move.l	d2,8(a0)
00017586 4843                       		swap	d3
00017588 B668 0008                  		cmp.w	8(a0),d3
0001758C 6700                       		beq.s	loc_16C64
0001758E 7000                       		moveq	#0,d0
00017590 1028 003C                  		move.b	$3C(a0),d0
00017594 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017598 0C01 0080                  		cmpi.b	#-$80,d1
0001759C 6600                       		bne.s	loc_16C50
0001759E 4843                       		swap	d3
000175A0 2143 0008                  		move.l	d3,8(a0)
000175A4 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175A8 0868 0000 0022             		bchg	#0,$22(a0)
000175AE 1168 0022 0001             		move.b	$22(a0),1(a0)
000175B4 5228 003C                  		addq.b	#1,$3C(a0)
000175B8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175BE 6000                       		bra.s	loc_16C64
000175C0                            ; ===========================================================================
000175C0                            
000175C0                            loc_16C50:
000175C0 4881                       		ext.w	d1
000175C2 D368 000C                  		add.w	d1,$C(a0)
000175C6 5228 003C                  		addq.b	#1,$3C(a0)
000175CA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175D0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175D4                            
000175D4                            loc_16C64:
000175D4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000175DA 6700                       		beq.s	loc_16C90
000175DC 0C11 0027                  		cmpi.b	#$27,0(a1)
000175E0 6700                       		beq.s	loc_16C7C
000175E2 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000175E8 6600                       		bne.s	loc_16C82
000175EA                            
000175EA                            loc_16C7C:
000175EA 117C 000A 0024             		move.b	#$A,$24(a0)
000175F0                            
000175F0                            loc_16C82:
000175F0 4EF9 0000 DE68             		jmp	DisplaySprite
000175F6                            
000175F6                            ; ===========================================================================
000175F6 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000175FE                            ; ===========================================================================
000175FE                            
000175FE                            loc_16C90:
000175FE 08E9 0007 0022             		bset	#7,$22(a1)
00017604                            
00017604                            loc_16C96:
00017604 7000                       		moveq	#0,d0
00017606 1028 0024                  		move.b	$24(a0),d0
0001760A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001760E 0828 0000 0022             		btst	#0,$22(a0)
00017614 6700                       		beq.s	loc_16CAA
00017616 4440                       		neg.w	d0
00017618                            
00017618                            loc_16CAA:
00017618 3140 0010                  		move.w	d0,$10(a0)
0001761C 317C FC00 0012             		move.w	#-$400,$12(a0)
00017622 117C 000C 0024             		move.b	#$C,$24(a0)
00017628 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001762E                            
0001762E                            loc_16CC0:				; XREF: Obj78_Index
0001762E 4EB9 0000 DDD0             		jsr	ObjectFall
00017634 4A68 0012                  		tst.w	$12(a0)
00017638 6B00                       		bmi.s	loc_16CE0
0001763A 4EBA E146                  		jsr	ObjHitFloor
0001763E 4A41                       		tst.w	d1
00017640 6A00                       		bpl.s	loc_16CE0
00017642 D368 000C                  		add.w	d1,$C(a0)
00017646 317C FC00 0012             		move.w	#-$400,$12(a0)
0001764C                            
0001764C                            loc_16CE0:
0001764C 4A28 0001                  		tst.b	1(a0)
00017650 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017654 4EF9 0000 DE68             		jmp	DisplaySprite
0001765A                            ; ===========================================================================
0001765A                            Ani_obj78:
0001765A                            	include "_anim\obj78.asm"
0001765A                            ; ---------------------------------------------------------------------------
0001765A                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001765A                            ; ---------------------------------------------------------------------------
0001765A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001766A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001767A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001768A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001769A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000176AA 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000176BA 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000176CA 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000176DA                            	even
000176DA                            	even
000176DA                            
000176DA                            ; ---------------------------------------------------------------------------
000176DA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176DA                            ; ---------------------------------------------------------------------------
000176DA                            Map_obj78:
000176DA                            	include "_maps\obj78.asm"
000176DA                            ; ---------------------------------------------------------------------------
000176DA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176DA                            ; ---------------------------------------------------------------------------
000176DA 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000176DE 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000176E2 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000176E6 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000176EA 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000176EE 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000176F2 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000176F6 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000176FA 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000176FE 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017702 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017706 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001770A 01                         byte_16D9E:	dc.b 1
0001770B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017710 01                         byte_16DA4:	dc.b 1
00017711 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017716 01                         byte_16DAA:	dc.b 1
00017717 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001771C 01                         byte_16DB0:	dc.b 1
0001771D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017722 01                         byte_16DB6:	dc.b 1
00017723 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017728 01                         byte_16DBC:	dc.b 1
00017729 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001772E 01                         byte_16DC2:	dc.b 1
0001772F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017734 01                         byte_16DC8:	dc.b 1
00017735 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001773A 01                         byte_16DCE:	dc.b 1
0001773B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017740 01                         byte_16DD4:	dc.b 1
00017741 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017746 01                         byte_16DDA:	dc.b 1
00017747 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001774C 01                         byte_16DE0:	dc.b 1
0001774D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017752 01                         byte_16DE6:	dc.b 1
00017753 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017758 01                         byte_16DEC:	dc.b 1
00017759 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001775E 01                         byte_16DF2:	dc.b 1
0001775F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017764 01                         byte_16DF8:	dc.b 1
00017765 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001776A 01                         byte_16DFE:	dc.b 1
0001776B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017770 01                         byte_16E04:	dc.b 1
00017771 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017776 01                         byte_16E0A:	dc.b 1
00017777 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001777C 01                         byte_16E10:	dc.b 1
0001777D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017782 01                         byte_16E16:	dc.b 1
00017783 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017788 01                         byte_16E1C:	dc.b 1
00017789 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001778E 01                         byte_16E22:	dc.b 1
0001778F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017794 01                         byte_16E28:	dc.b 1
00017795 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001779A                            		even
0001779A                            		even
0001779A                            
0001779A                            ; ===========================================================================
0001779A                            ; ---------------------------------------------------------------------------
0001779A                            ; Object 79 - lamppost
0001779A                            ; ---------------------------------------------------------------------------
0001779A                            
0001779A                            Obj79:					; XREF: Obj_Index
0001779A 7000                       		moveq	#0,d0
0001779C 1028 0024                  		move.b	$24(a0),d0
000177A0 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000177A4 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000177A8 4EFA 8766                  		jmp	MarkObjGone
000177AC                            ; ===========================================================================
000177AC 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000177AE 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000177B0 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000177B2 0000                       		dc.w Obj79_Twirl-Obj79_Index
000177B4                            ; ===========================================================================
000177B4                            
000177B4                            Obj79_Main:				; XREF: Obj79_Index
000177B4 5428 0024                  		addq.b	#2,$24(a0)
000177B8 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000177C0 317C 07A0 0002             		move.w	#$7A0,2(a0)
000177C6 117C 0004 0001             		move.b	#4,1(a0)
000177CC 117C 0008 0019             		move.b	#8,$19(a0)
000177D2 117C 0005 0018             		move.b	#5,$18(a0)
000177D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177DC 7000                       		moveq	#0,d0
000177DE 1028 0023                  		move.b	$23(a0),d0
000177E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000177E8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000177EE 6600                       		bne.s	Obj79_RedLamp
000177F0 1238 FE30                  		move.b	($FFFFFE30).w,d1
000177F4 0201 007F                  		andi.b	#$7F,d1
000177F8 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000177FC 0202 007F                  		andi.b	#$7F,d2
00017800 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017802 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017804                            
00017804                            Obj79_RedLamp:
00017804 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001780A 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017810 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017816 4E75                       		rts	
00017818                            ; ===========================================================================
00017818                            
00017818                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017818 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001781C 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017820 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017824 6B00 0000                  		bmi.w	locret_16F90
00017828 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001782C 0201 007F                  		andi.b	#$7F,d1
00017830 1428 0028                  		move.b	$28(a0),d2
00017834 0202 007F                  		andi.b	#$7F,d2
00017838 B202                       		cmp.b	d2,d1
0001783A 6500                       		bcs.s	Obj79_HitLamp
0001783C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017840 7000                       		moveq	#0,d0
00017842 1028 0023                  		move.b	$23(a0),d0
00017846 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001784C 117C 0004 0024             		move.b	#4,$24(a0)
00017852 117C 0003 001A             		move.b	#3,$1A(a0)
00017858 6000 0000                  		bra.w	locret_16F90
0001785C                            ; ===========================================================================
0001785C                            
0001785C                            Obj79_HitLamp:
0001785C 3038 D008                  		move.w	($FFFFD008).w,d0
00017860 9068 0008                  		sub.w	8(a0),d0
00017864 5040                       		addq.w	#8,d0
00017866 0C40 0010                  		cmpi.w	#$10,d0
0001786A 6400 0000                  		bcc.w	locret_16F90
0001786E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017872 9068 000C                  		sub.w	$C(a0),d0
00017876 0640 0040                  		addi.w	#$40,d0
0001787A 0C40 0068                  		cmpi.w	#$68,d0
0001787E 6400                       		bcc.s	locret_16F90
00017880 303C 00A1                  		move.w	#$A1,d0
00017884 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lamppost sound
0001788A 5428 0024                  		addq.b	#2,$24(a0)
0001788E 4EB9 0000 E2EE             		jsr	SingleObjLoad
00017894 6600                       		bne.s	loc_16F76
00017896 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001789A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000178A0 3368 0008 0030             		move.w	8(a0),$30(a1)
000178A6 3368 000C 0032             		move.w	$C(a0),$32(a1)
000178AC 0469 0018 0032             		subi.w	#$18,$32(a1)
000178B2 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000178BA 337C 07A0 0002             		move.w	#$7A0,2(a1)
000178C0 137C 0004 0001             		move.b	#4,1(a1)
000178C6 137C 0008 0019             		move.b	#8,$19(a1)
000178CC 137C 0004 0018             		move.b	#4,$18(a1)
000178D2 137C 0002 001A             		move.b	#2,$1A(a1)
000178D8 337C 0020 0036             		move.w	#$20,$36(a1)
000178DE                            
000178DE                            loc_16F76:
000178DE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000178E4 6100 0000                  		bsr.w	Obj79_StoreInfo
000178E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178EC 7000                       		moveq	#0,d0
000178EE 1028 0023                  		move.b	$23(a0),d0
000178F2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000178F8                            
000178F8                            locret_16F90:
000178F8 4E75                       		rts	
000178FA                            ; ===========================================================================
000178FA                            
000178FA                            Obj79_AfterHit:				; XREF: Obj79_Index
000178FA 4E75                       		rts	
000178FC                            ; ===========================================================================
000178FC                            
000178FC                            Obj79_Twirl:				; XREF: Obj79_Index
000178FC 5368 0036                  		subq.w	#1,$36(a0)
00017900 6A00                       		bpl.s	loc_16FA0
00017902 117C 0004 0024             		move.b	#4,$24(a0)
00017908                            
00017908                            loc_16FA0:
00017908 1028 0026                  		move.b	$26(a0),d0
0001790C 0428 0010 0026             		subi.b	#$10,$26(a0)
00017912 0400 0040                  		subi.b	#$40,d0
00017916 4EB9 0000 2D02             		jsr	(CalcSine).l
0001791C C3FC 0C00                  		muls.w	#$C00,d1
00017920 4841                       		swap	d1
00017922 D268 0030                  		add.w	$30(a0),d1
00017926 3141 0008                  		move.w	d1,8(a0)
0001792A C1FC 0C00                  		muls.w	#$C00,d0
0001792E 4840                       		swap	d0
00017930 D068 0032                  		add.w	$32(a0),d0
00017934 3140 000C                  		move.w	d0,$C(a0)
00017938 4E75                       		rts	
0001793A                            ; ===========================================================================
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            ; Subroutine to	store information when you hit a lamppost
0001793A                            ; ---------------------------------------------------------------------------
0001793A                            
0001793A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001793A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017940 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017946 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001794C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017952 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017958 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001795E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017964 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001796A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017970 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017976 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001797C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017982 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017988 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001798E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017994 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001799A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000179A0 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000179A6 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000179AC 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000179B2 4E75                       		rts	
000179B4                            
000179B4                            ; ---------------------------------------------------------------------------
000179B4                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000179B4                            ; ---------------------------------------------------------------------------
000179B4                            
000179B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179B4                            
000179B4                            
000179B4                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000179B4 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000179BA 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000179C0 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000179C6 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000179CC 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000179D2 4278 FE20                  		clr.w	($FFFFFE20).w
000179D6 4238 FE1B                  		clr.b	($FFFFFE1B).w
000179DA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000179E0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000179E6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000179EA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000179F0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000179F6 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000179FC 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017A02 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017A08 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017A0E 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017A14 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017A1A 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017A20 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017A26 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017A2C 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017A32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017A38 6600                       		bne.s	loc_170E4
00017A3A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017A40 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A46 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017A4C                            
00017A4C                            loc_170E4:
00017A4C 4A38 FE30                  		tst.b	($FFFFFE30).w
00017A50 6A00                       		bpl.s	locret_170F6
00017A52 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017A56 0440 00A0                  		subi.w	#$A0,d0
00017A5A 31C0 F728                  		move.w	d0,($FFFFF728).w
00017A5E                            
00017A5E                            locret_170F6:
00017A5E 4E75                       		rts	
00017A60                            ; End of function Obj79_LoadInfo
00017A60                            
00017A60                            ; ===========================================================================
00017A60                            ; ---------------------------------------------------------------------------
00017A60                            ; Sprite mappings - lamppost
00017A60                            ; ---------------------------------------------------------------------------
00017A60                            Map_obj79:
00017A60                            	include "_maps\obj79.asm"
00017A60                            ; ---------------------------------------------------------------------------
00017A60                            ; Sprite mappings - lamppost
00017A60                            ; ---------------------------------------------------------------------------
00017A60 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017A64 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017A68 06                         byte_17100:	dc.b 6
00017A69 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A6E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A73 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A78 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A7D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A82 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A87 04                         byte_1711F:	dc.b 4
00017A88 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A8D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A92 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A97 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A9C 02                         byte_17134:	dc.b 2
00017A9D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017AA2 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017AA7 06                         byte_1713F:	dc.b 6
00017AA8 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017AAD E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017AB2 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017AB7 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017ABC D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017AC1 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017AC6                            		even
00017AC6                            		even
00017AC6                            
00017AC6                            ; ===========================================================================
00017AC6                            ; ---------------------------------------------------------------------------
00017AC6                            ; Object 7D - hidden points at the end of a level
00017AC6                            ; ---------------------------------------------------------------------------
00017AC6                            
00017AC6                            Obj7D:					; XREF: Obj_Index
00017AC6 7000                       		moveq	#0,d0
00017AC8 1028 0024                  		move.b	$24(a0),d0
00017ACC 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017AD0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017AD4                            ; ===========================================================================
00017AD4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017AD6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017AD8                            ; ===========================================================================
00017AD8                            
00017AD8                            Obj7D_Main:				; XREF: Obj7D_Index
00017AD8 7410                       		moveq	#$10,d2
00017ADA 3602                       		move.w	d2,d3
00017ADC D643                       		add.w	d3,d3
00017ADE 43F8 D000                  		lea	($FFFFD000).w,a1
00017AE2 3029 0008                  		move.w	8(a1),d0
00017AE6 9068 0008                  		sub.w	8(a0),d0
00017AEA D042                       		add.w	d2,d0
00017AEC B043                       		cmp.w	d3,d0
00017AEE 6400                       		bcc.s	Obj7D_ChkDel
00017AF0 3229 000C                  		move.w	$C(a1),d1
00017AF4 9268 000C                  		sub.w	$C(a0),d1
00017AF8 D242                       		add.w	d2,d1
00017AFA B243                       		cmp.w	d3,d1
00017AFC 6400                       		bcc.s	Obj7D_ChkDel
00017AFE 4A78 FE08                  		tst.w	($FFFFFE08).w
00017B02 6600                       		bne.s	Obj7D_ChkDel
00017B04 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017B08 6600                       		bne.s	Obj7D_ChkDel
00017B0A 5428 0024                  		addq.b	#2,$24(a0)
00017B0E 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017B16 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017B1C 0028 0004 0001             		ori.b	#4,1(a0)
00017B22 117C 0000 0018             		move.b	#0,$18(a0)
00017B28 117C 0010 0019             		move.b	#$10,$19(a0)
00017B2E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017B34 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017B3A 303C 00C9                  		move.w	#$C9,d0
00017B3E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bonus sound
00017B44 7000                       		moveq	#0,d0
00017B46 1028 0028                  		move.b	$28(a0),d0
00017B4A D040                       		add.w	d0,d0
00017B4C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017B50 4EB9 0000 0000             		jsr	AddPoints
00017B56                            
00017B56                            Obj7D_ChkDel:
00017B56 3028 0008                  		move.w	8(a0),d0
00017B5A 0240 FF80                  		andi.w	#$FF80,d0
00017B5E 3238 F700                  		move.w	($FFFFF700).w,d1
00017B62 0441 0080                  		subi.w	#$80,d1
00017B66 0241 FF80                  		andi.w	#$FF80,d1
00017B6A 9041                       		sub.w	d1,d0
00017B6C 0C40 0280                  		cmpi.w	#$280,d0
00017B70 6200                       		bhi.s	Obj7D_Delete
00017B72 4E75                       		rts	
00017B74                            ; ===========================================================================
00017B74                            
00017B74                            Obj7D_Delete:
00017B74 4EF9 0000 DEA4             		jmp	DeleteObject
00017B7A                            ; ===========================================================================
00017B7A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B7C 03E8                       		dc.w 1000
00017B7E 0064                       		dc.w 100
00017B80 0001                       		dc.w 1
00017B82                            ; ===========================================================================
00017B82                            
00017B82                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B82 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B86 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B88 3028 0008                  		move.w	8(a0),d0
00017B8C 0240 FF80                  		andi.w	#-$80,d0
00017B90 3238 F700                  		move.w	($FFFFF700).w,d1
00017B94 0441 0080                  		subi.w	#$80,d1
00017B98 0241 FF80                  		andi.w	#-$80,d1
00017B9C 9041                       		sub.w	d1,d0
00017B9E 0C40 0280                  		cmpi.w	#$280,d0
00017BA2 6200                       		bhi.s	Obj7D_Delete2
00017BA4 4EF9 0000 DE68             		jmp	DisplaySprite
00017BAA                            ; ===========================================================================
00017BAA                            
00017BAA                            Obj7D_Delete2:
00017BAA 4EF9 0000 DEA4             		jmp	DeleteObject
00017BB0                            ; ===========================================================================
00017BB0                            ; ---------------------------------------------------------------------------
00017BB0                            ; Sprite mappings - hidden points at the end of	a level
00017BB0                            ; ---------------------------------------------------------------------------
00017BB0                            Map_obj7D:
00017BB0                            	include "_maps\obj7D.asm"
00017BB0                            ; ---------------------------------------------------------------------------
00017BB0                            ; Sprite mappings - hidden points at the end of	a level
00017BB0                            ; ---------------------------------------------------------------------------
00017BB0 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017BB4 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017BB8 00                         byte_17250:	dc.b 0
00017BB9 01                         byte_17251:	dc.b 1
00017BBA F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017BBF 01                         byte_17257:	dc.b 1
00017BC0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017BC5 01                         byte_1725D:	dc.b 1
00017BC6 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017BCC 00                         		even
00017BCC 00                         		even
00017BCC                            
00017BCC                            ; ===========================================================================
00017BCC                            ; ---------------------------------------------------------------------------
00017BCC                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017BCC                            ; ---------------------------------------------------------------------------
00017BCC                            
00017BCC                            Obj8A:					; XREF: Obj_Index
00017BCC 7000                       		moveq	#0,d0
00017BCE 1028 0024                  		move.b	$24(a0),d0
00017BD2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017BD6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017BDA                            ; ===========================================================================
00017BDA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017BDC 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017BDE                            ; ===========================================================================
00017BDE                            
00017BDE                            Obj8A_Main:				; XREF: Obj8A_Index
00017BDE 5428 0024                  		addq.b	#2,$24(a0)
00017BE2 317C 0120 0008             		move.w	#$120,8(a0)
00017BE8 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017BEE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017BF6 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017BFC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017C00 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017C04 117C 0000 0001             		move.b	#0,1(a0)
00017C0A 117C 0000 0018             		move.b	#0,$18(a0)
00017C10 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017C16 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C18 317C 00A6 0002             		move.w	#$A6,2(a0)
00017C1E 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017C24 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017C28 6700                       		beq.s	Obj8A_Display	; if not, branch
00017C2A 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017C30 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C32 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017C38 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017C3E 4EF9 0000 DEA4             		jmp	DeleteObject
00017C44                            ; ===========================================================================
00017C44                            
00017C44                            Obj8A_Display:				; XREF: Obj8A_Index
00017C44 4EF9 0000 DE68             		jmp	DisplaySprite
00017C4A                            ; ===========================================================================
00017C4A                            ; ---------------------------------------------------------------------------
00017C4A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017C4A                            ; ---------------------------------------------------------------------------
00017C4A                            Map_obj8A:
00017C4A                            	include "_maps\obj8A.asm"
00017C4A                            Map_ca8f:
00017C4A 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017C4C 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017C4E 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017C50 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017C52 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017C54 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017C56 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017C58 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017C5A 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017C5C 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017C5E 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017C60 08                         Map_ca8f_16: 	dc.b $8
00017C61 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017C66 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017C6B F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017C70 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017C75 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017C7A B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017C7F B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017C84 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017C89 10                         Map_ca8f_3F: 	dc.b $10
00017C8A D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017C8F D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C94 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C99 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C9E D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017CA3 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017CA8 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017CAD D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017CB2 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017CB7 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017CBC 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017CC1 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017CC6 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017CCB 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017CD0 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017CD5 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017CDA 0A                         Map_ca8f_90: 	dc.b $A
00017CDB D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017CE0 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017CE5 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017CEA D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017CEF D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017CF4 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017CF9 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017CFE 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017D03 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017D08 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017D0D 18                         Map_ca8f_C3: 	dc.b $18
00017D0E D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017D13 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017D18 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017D1D D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017D22 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D27 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017D2C D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017D31 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017D36 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D3B D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017D40 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017D45 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017D4A D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017D4F D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017D54 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017D59 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017D5E 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017D63 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017D68 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017D6D 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017D72 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D77 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D7C 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D81 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D86 14                         Map_ca8f_13C: 	dc.b $14
00017D87 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D8C D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017D91 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D96 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D9B D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017DA0 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017DA5 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017DAA 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017DAF 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017DB4 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017DB9 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017DBE 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017DC3 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017DC8 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017DCD 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017DD2 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017DD7 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017DDC 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017DE1 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017DE6 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017DEB 1A                         Map_ca8f_1A1: 	dc.b $1A
00017DEC D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017DF1 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017DF6 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017DFB D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017E00 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017E05 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017E0A D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017E0F D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017E14 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017E19 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017E1E D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017E23 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017E28 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017E2D 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017E32 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017E37 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017E3C 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017E41 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017E46 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017E4B 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017E50 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017E55 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017E5A 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017E5F 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017E64 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017E69 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017E6E 17                         Map_ca8f_224: 	dc.b $17
00017E6F D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017E74 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E79 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E7E D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E83 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E88 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E8D D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E92 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E97 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E9C D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017EA1 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017EA6 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017EAB 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017EB0 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017EB5 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017EBA 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017EBF 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017EC4 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017EC9 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017ECE 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017ED3 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017ED8 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017EDD 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017EE2 1F                         Map_ca8f_298: 	dc.b $1F
00017EE3 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017EE8 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017EED D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017EF2 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017EF7 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017EFC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017F01 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017F06 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017F0B D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017F10 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017F15 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017F1A D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017F1F D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017F24 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017F29 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017F2E 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017F33 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017F38 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017F3D 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017F42 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017F47 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017F4C 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017F51 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017F56 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017F5B 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017F60 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017F65 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017F6A 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017F6F 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017F74 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F79 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F7E 0F                         Map_ca8f_334: 	dc.b $F
00017F7F F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F84 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F89 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017F8E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F93 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F98 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F9D F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017FA2 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017FA7 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017FAC F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017FB1 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017FB6 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017FBB F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017FC0 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017FC5 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017FCA 08                         Map_ca8f_380: 	dc.b $8
00017FCB 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017FD0 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017FD5 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017FDA 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017FDF 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017FE4 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017FE9 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017FEE 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017FF3 20                         Map_ca8f_3A9: 	dc.b $20
00017FF4 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017FF9 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017FFE ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00018003 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00018008 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
0001800D ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00018012 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018017 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
0001801C FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018021 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018026 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
0001802B FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018030 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018035 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
0001803A 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001803F 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018044 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018049 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001804E 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018053 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018058 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001805D 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018062 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018067 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
0001806C 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018071 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018076 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001807B 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018080 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018085 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001808A 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001808F 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018094                            	even
00018094                            	even
00018094                            
00018094                            ; ===========================================================================
00018094                            ; ---------------------------------------------------------------------------
00018094                            ; Object 3D - matthew boss - modified by GK89
00018094                            ; ---------------------------------------------------------------------------
00018094                            
00018094                            Obj3D:					; XREF: Obj_Index
00018094 7000                       		moveq	#0,d0
00018096 1028 0024                  		move.b	$24(a0),d0
0001809A 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
0001809E 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000180A2                            ; ===========================================================================
000180A2 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000180A4 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000180A6 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000180A8 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000180AA                            
000180AA 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000180AC 0401                       		dc.b 4,	1
000180AE 0607                       		dc.b 6,	7
000180B0                            ; ===========================================================================
000180B0                            
000180B0                            Obj3D_Main:				; XREF: Obj3D_Index
000180B0 45F9 0001 80AA             		lea	(Obj3D_ObjData).l,a2
000180B6 2248                       		movea.l	a0,a1
000180B8 7202                       		moveq	#2,d1
000180BA 6000                       		bra.s	Obj3D_LoadBoss
000180BC                            ; ===========================================================================
000180BC                            
000180BC                            Obj3D_Loop:
000180BC 4EB9 0000 E304             		jsr	SingleObjLoad2
000180C2 6600                       		bne.s	loc_17772
000180C4                            
000180C4                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000180C4 135A 0024                  		move.b	(a2)+,$24(a1)
000180C8 12BC 003D                  		move.b	#$3D,0(a1)
000180CC 3368 0008 0008             		move.w	8(a0),8(a1)
000180D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180D8 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000180E0 337C 0400 0002             		move.w	#$400,2(a1)
000180E6 137C 0004 0001             		move.b	#4,1(a1)
000180EC 137C 0020 0019             		move.b	#$20,$19(a1)
000180F2 137C 0003 0018             		move.b	#3,$18(a1)
000180F8 135A 001C                  		move.b	(a2)+,$1C(a1)
000180FC 2348 0034                  		move.l	a0,$34(a1)
00018100 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018104                            
00018104                            loc_17772:
00018104 3168 0008 0030             		move.w	8(a0),$30(a0)
0001810A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018110 117C 000F 0020             		move.b	#$F,$20(a0)
00018116 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
0001811C                            
0001811C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001811C 7000                       		moveq	#0,d0
0001811E 1028 0025                  		move.b	$25(a0),d0
00018122 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018126 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001812A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018130 4EB9 0000 AEEE             		jsr	AnimateSprite
00018136 1028 0022                  		move.b	$22(a0),d0
0001813A 0200 0003                  		andi.b	#3,d0
0001813E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018144 8128 0001                  		or.b	d0,1(a0)
00018148 4EF9 0000 DE68             		jmp	DisplaySprite
0001814E                            ; ===========================================================================
0001814E 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018150 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018152 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018154 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018156 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018158 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001815A 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001815C                            ; ===========================================================================
0001815C                            
0001815C                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001815C 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018162 6100 0000                  		bsr.w	BossMove
00018166 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001816C 6600                       		bne.s	loc_177E6
0001816E 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018174 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018178                            
00018178                            loc_177E6:
00018178 1028 003F                  		move.b	$3F(a0),d0
0001817C 4EB9 0000 2D02             		jsr	(CalcSine).l
00018182 EC40                       		asr.w	#6,d0
00018184 D068 0038                  		add.w	$38(a0),d0
00018188 3140 000C                  		move.w	d0,$C(a0)
0001818C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018192 5428 003F                  		addq.b	#2,$3F(a0)
00018196 0C28 0008 0025             		cmpi.b	#8,$25(a0)
0001819C 6400                       		bcc.s	locret_1784A
0001819E 4A28 0022                  		tst.b	$22(a0)
000181A2 6B00                       		bmi.s	loc_1784C
000181A4 4A28 0020                  		tst.b	$20(a0)
000181A8 6600                       		bne.s	locret_1784A
000181AA 4A28 003E                  		tst.b	$3E(a0)
000181AE 6600                       		bne.s	Obj3D_ShipFlash
000181B0 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000181B6 303C 00AC                  		move.w	#$AC,d0
000181BA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
000181C0                            
000181C0                            Obj3D_ShipFlash:
000181C0 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000181C4 7000                       		moveq	#0,d0		; move 0 (black) to d0
000181C6 4A51                       		tst.w	(a1)
000181C8 6600                       		bne.s	loc_1783C
000181CA 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000181CE                            
000181CE                            loc_1783C:
000181CE 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000181D0 5328 003E                  		subq.b	#1,$3E(a0)
000181D4 6600                       		bne.s	locret_1784A
000181D6 117C 000F 0020             		move.b	#$F,$20(a0)
000181DC                            
000181DC                            locret_1784A:
000181DC 4E75                       		rts	
000181DE                            ; ===========================================================================
000181DE                            
000181DE                            loc_1784C:				; XREF: loc_177E6
000181DE 7064                       		moveq	#100,d0
000181E0 6100 0000                  		bsr.w	AddPoints
000181E4 117C 0008 0025             		move.b	#8,$25(a0)
000181EA 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000181F0 4E75                       		rts	
000181F2                            
000181F2                            ; ---------------------------------------------------------------------------
000181F2                            ; Defeated boss	subroutine
000181F2                            ; ---------------------------------------------------------------------------
000181F2                            
000181F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181F2                            
000181F2                            
000181F2                            BossDefeated:
000181F2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000181F6 0200 0007                  		andi.b	#7,d0
000181FA 6600                       		bne.s	locret_178A2
000181FC 4EB9 0000 E2EE             		jsr	SingleObjLoad
00018202 6600                       		bne.s	locret_178A2
00018204 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018208 3368 0008 0008             		move.w	8(a0),8(a1)
0001820E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018214 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001821A 3200                       		move.w	d0,d1
0001821C 7200                       		moveq	#0,d1
0001821E 1200                       		move.b	d0,d1
00018220 E409                       		lsr.b	#2,d1
00018222 0441 0020                  		subi.w	#$20,d1
00018226 D369 0008                  		add.w	d1,8(a1)
0001822A E048                       		lsr.w	#8,d0
0001822C E608                       		lsr.b	#3,d0
0001822E D169 000C                  		add.w	d0,$C(a1)
00018232                            
00018232                            locret_178A2:
00018232 4E75                       		rts	
00018234                            ; End of function BossDefeated
00018234                            
00018234                            ; ---------------------------------------------------------------------------
00018234                            ; Subroutine to	move a boss
00018234                            ; ---------------------------------------------------------------------------
00018234                            
00018234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018234                            
00018234                            
00018234                            BossMove:
00018234 2428 0030                  		move.l	$30(a0),d2
00018238 2628 0038                  		move.l	$38(a0),d3
0001823C 3028 0010                  		move.w	$10(a0),d0
00018240 48C0                       		ext.l	d0
00018242 E180                       		asl.l	#8,d0
00018244 D480                       		add.l	d0,d2
00018246 3028 0012                  		move.w	$12(a0),d0
0001824A 48C0                       		ext.l	d0
0001824C E180                       		asl.l	#8,d0
0001824E D680                       		add.l	d0,d3
00018250 2142 0030                  		move.l	d2,$30(a0)
00018254 2143 0038                  		move.l	d3,$38(a0)
00018258 4E75                       		rts	
0001825A                            ; End of function BossMove
0001825A                            
0001825A                            ; ===========================================================================
0001825A                            
0001825A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
0001825A 6100 FFD8                  		bsr.w	BossMove
0001825E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018264 6600                       		bne.s	loc_17916
00018266 317C 0000 0010             		move.w	#0,$10(a0)
0001826C 317C 0000 0012             		move.w	#0,$12(a0)
00018272 5428 0025                  		addq.b	#2,$25(a0)
00018276 4EB9 0000 E304             		jsr	SingleObjLoad2
0001827C 6600                       		bne.s	loc_17910
0001827E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018282 3368 0030 0008             		move.w	$30(a0),8(a1)
00018288 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001828E 2348 0034                  		move.l	a0,$34(a1)
00018292                            
00018292                            loc_17910:
00018292 317C 0077 003C             		move.w	#$77,$3C(a0)
00018298                            
00018298                            loc_17916:
00018298 6000 FEDE                  		bra.w	loc_177E6
0001829C                            ; ===========================================================================
0001829C                            
0001829C                            Obj3D_ShipMove:				; XREF:  sonic follow move
0001829C 5368 003C                  		subq.w	#1,$3C(a0)
000182A0 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
000182A6 5428 0025                  		addq.b	#2,$25(a0)
000182AA 317C 003F 003C             		move.w	#$3F,$3C(a0)
000182B0 3038 D008                  		move.w	($FFFFD008).w,d0	 
000182B4 9068 0008                  		sub.w	8(a0),d0		 
000182B8 6A00                       		bpl.s	Obj3D_left			 
000182BA 08A8 0000 0022             		bclr	#0,$22(a0)		 
000182C0 6000                       		bra.s	Obj3D_right		 
000182C2 08A8 0005 0022             		bclr	#5,$22(a0)
000182C8 4EB9 0000 0000              		jsr     loc_17950
000182CE 4E75                       		rts
000182D0                            ; ===========================================================================
000182D0                            
000182D0                            Obj3D_right:
000182D0 317C FF00 0010             		move.w	#-$100,$10(a0)	
000182D6 4E75                       		Rts
000182D8                            
000182D8                            Obj3D_left:
000182D8 317C 0100 0010             		move.w	#$100,$10(a0)	 
000182DE 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000182E4 6600                       		bne.s	RTSboss  	; if not, branch
000182E6 0868 0000 0022              		bchg	#0,$22(a0)
000182EC                            
000182EC                            RTSboss:	    
000182EC 4E75                       		rts
000182EE                             ; ===========================================================================
000182EE                            
000182EE                            Obj3D_UpStuff:
000182EE 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000182F2 9068 000C                  		sub.w	$C(a0),d0		 
000182F6 6A00                       		bpl.s	Obj3D_down			 
000182F8 6000                        		bra.s	Obj3D_up		 
000182FA 08A8 0005 0022             		bclr	#5,$22(a0)
00018300                             
00018300                            Obj3D_up:		
00018300 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018306 4E75                        	    rts
00018308                            
00018308                            Obj3D_down:
00018308 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
0001830E                            
0001830E                            loc_17950:
0001830E 6000 FE68                  		bra.w	loc_177E6
00018312                            ; ===========================================================================
00018312                            
00018312                            loc_17954:				; XREF: Obj3D_ShipIndex
00018312 5368 003C                  		subq.w	#1,$3C(a0)
00018316 6B00                       		bmi.s	loc_17960
00018318 6100 FF1A                  		bsr.w	BossMove
0001831C 6000                       		bra.s	loc_17976
0001831E                            ; ===========================================================================
0001831E                            
0001831E                            loc_17960:
0001831E 0868 0000 0022             		bchg	#0,$22(a0)
00018324 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001832A 5528 0025                  		subq.b	#2,$25(a0)
0001832E 317C 0000 0010             		move.w	#0,$10(a0)
00018334                            
00018334                            loc_17976:
00018334 6000 FE42                  		bra.w	loc_177E6
00018338                            ; ===========================================================================
00018338                            
00018338                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018338 5368 003C                  		subq.w	#1,$3C(a0)
0001833C 6B00                       		bmi.s	loc_17984
0001833E 6000 FEB2                  		bra.w	BossDefeated
00018342                            ; ===========================================================================
00018342                            
00018342                            loc_17984:
00018342 08E8 0000 0022             		bset	#0,$22(a0)
00018348 08A8 0007 0022             		bclr	#7,$22(a0)
0001834E 4268 0010                  		clr.w	$10(a0)
00018352 5428 0025                  		addq.b	#2,$25(a0)
00018356 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001835C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018360 6600                       		bne.s	locret_179AA
00018362 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018368 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0001836E 6000 FE82                  		bra.w	BossDefeated
00018372                            
00018372                            locret_179AA:
00018372 4E75                       		rts	
00018374                            ; ===========================================================================
00018374                            
00018374                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018374 4EB9 0000 DDD0             		jsr ObjectFall		
0001837A 5268 003C                  		addq.w	#1,$3C(a0)
0001837E 6700                       		beq.s	loc_179BC
00018380 6A00                       		bpl.s	loc_179C2
00018382 6000                       		bra.s	loc_179EE
00018384                            ; ===========================================================================
00018384                            
00018384                            loc_179BC:
00018384 4268 0012                  		clr.w	$12(a0)
00018388 6000                       		bra.s	loc_179EE
0001838A                            ; ===========================================================================
0001838A                            
0001838A                            loc_179C2:
0001838A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018390 6500                       		bcs.s	loc_179DA
00018392 6700                       		beq.s	loc_179E0
00018394 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001839A 6500                       		bcs.s	loc_179EE
0001839C 5428 0025                  		addq.b	#2,$25(a0)
000183A0 6000                       		bra.s	loc_179EE
000183A2                            ; ===========================================================================
000183A2                            
000183A2                            loc_179DA:
000183A2 5168 0012                  		subq.w	#8,$12(a0)
000183A6 6000                       		bra.s	loc_179EE
000183A8 6000 FE48                  		bra.w	BossDefeated
000183AC                            ; ===========================================================================
000183AC                            
000183AC                            loc_179E0:
000183AC 4268 0012                  		clr.w	$12(a0)
000183B0 303C 0081                  		move.w	#$81,d0
000183B4 4EB9 0000 15CC             		jsr	(PlaySound).l	; play GHZ music
000183BA                            
000183BA                            loc_179EE:
000183BA 6100 FE78                  		bsr.w	BossMove
000183BE 6000 FDB8                  		bra.w	loc_177E6
000183C2                            ; ===========================================================================
000183C2                            
000183C2                            loc_179F6:				; XREF: Obj3D_ShipIndex
000183C2 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000183C8 6700                       		beq.s	loc_17A10
000183CA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000183CE 6000                       		bra.s	loc_17A16
000183D0                            ; ===========================================================================
000183D0                            
000183D0                            loc_17A10:
000183D0 4A28 0001                  		tst.b	1(a0)
000183D4 6A00                       		bpl.s	Obj3D_ShipDel
000183D6                            
000183D6                            loc_17A16:
000183D6 6100 FE5C                  		bsr.w	BossMove
000183DA 6000 FD9C                  		bra.w	loc_177E6
000183DE                            ; ===========================================================================
000183DE                            
000183DE                            Obj3D_ShipDel:
000183DE 4EF9 0000 DEA4             		jmp	DeleteObject
000183E4                            ; ===========================================================================
000183E4                            
000183E4                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000183E4 7000                       		moveq	#0,d0
000183E6 7201                       		moveq	#1,d1
000183E8 2268 0034                  		movea.l	$34(a0),a1
000183EC 1029 0025                  		move.b	$25(a1),d0
000183F0 5900                       		subq.b	#4,d0
000183F2 6600                       		bne.s	loc_17A3E
000183F4 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000183FA 6600                       		bne.s	loc_17A46
000183FC 7204                       		moveq	#4,d1
000183FE                            
000183FE                            loc_17A3E:
000183FE 5D00                       		subq.b	#6,d0
00018400 6B00                       		bmi.s	loc_17A46
00018402 720A                       		moveq	#$A,d1
00018404 6000                       		bra.s	loc_17A5A
00018406                            ; ===========================================================================
00018406                            
00018406                            loc_17A46:
00018406 4A29 0020                  		tst.b	$20(a1)
0001840A 6600                       		bne.s	loc_17A50
0001840C 7205                       		moveq	#5,d1
0001840E 6000                       		bra.s	loc_17A5A
00018410                            ; ===========================================================================
00018410                            
00018410                            loc_17A50:
00018410 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018416 6500                       		bcs.s	loc_17A5A
00018418 7204                       		moveq	#4,d1
0001841A                            
0001841A                            loc_17A5A:
0001841A 1141 001C                  		move.b	d1,$1C(a0)
0001841E 5500                       		subq.b	#2,d0
00018420 6600                       		bne.s	Obj3D_FaceDisp
00018422 117C 0006 001C             		move.b	#6,$1C(a0)
00018428 4A28 0001                  		tst.b	1(a0)
0001842C 6A00                       		bpl.s	Obj3D_FaceDel
0001842E                            
0001842E                            Obj3D_FaceDisp:
0001842E 6000                       		bra.s	Obj3D_Display
00018430                            ; ===========================================================================
00018430                            
00018430                            Obj3D_FaceDel:
00018430 4EF9 0000 DEA4             		jmp	DeleteObject
00018436                            ; ===========================================================================
00018436                            
00018436                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018436 117C 0007 001C             		move.b	#7,$1C(a0)
0001843C 2268 0034                  		movea.l	$34(a0),a1
00018440 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018446 6600                       		bne.s	loc_17A96
00018448 117C 000B 001C             		move.b	#$B,$1C(a0)
0001844E 4A28 0001                  		tst.b	1(a0)
00018452 6A00                       		bpl.s	Obj3D_FlameDel
00018454 6000                       		bra.s	Obj3D_FlameDisp
00018456                            ; ===========================================================================
00018456                            
00018456                            loc_17A96:
00018456 3029 0010                  		move.w	$10(a1),d0
0001845A 6700                       		beq.s	Obj3D_FlameDisp
0001845C 117C 0008 001C             		move.b	#8,$1C(a0)
00018462                            
00018462                            Obj3D_FlameDisp:
00018462 6000                       		bra.s	Obj3D_Display
00018464                            ; ===========================================================================
00018464                            
00018464                            Obj3D_FlameDel:
00018464 4EF9 0000 DEA4             		jmp	DeleteObject
0001846A                            ; ===========================================================================
0001846A                            
0001846A                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001846A 2268 0034                  		movea.l	$34(a0),a1
0001846E 3169 0008 0008             		move.w	8(a1),8(a0)
00018474 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001847A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018480 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018486 4EB9 0000 AEEE             		jsr	AnimateSprite
0001848C 1028 0022                  		move.b	$22(a0),d0
00018490 0200 0003                  		andi.b	#3,d0
00018494 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001849A 8128 0001                  		or.b	d0,1(a0)
0001849E 4EF9 0000 DE68             		jmp	DisplaySprite
000184A4                            ; ===========================================================================
000184A4                            ; ---------------------------------------------------------------------------
000184A4                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000184A4                            ; ---------------------------------------------------------------------------
000184A4                            
000184A4                            Obj48:					; XREF: Obj_Index
000184A4 7000                       		moveq	#0,d0
000184A6 1028 0024                  		move.b	$24(a0),d0
000184AA 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000184AE 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000184B2                            ; ===========================================================================
000184B2 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000184B4 0000                       		dc.w Obj48_Base-Obj48_Index
000184B6 0000                       		dc.w Obj48_Display2-Obj48_Index
000184B8 0000                       		dc.w loc_17C68-Obj48_Index
000184BA 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            Obj48_Main:				; XREF: Obj48_Index
000184BC 5428 0024                  		addq.b	#2,$24(a0)
000184C0 317C 4080 0026             		move.w	#$4080,$26(a0)
000184C6 317C FE00 003E             		move.w	#-$200,$3E(a0)
000184CC 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000184D4 317C 046C 0002             		move.w	#$46C,2(a0)
000184DA 45E8 0028                  		lea	$28(a0),a2
000184DE 14FC 0000                  		move.b	#0,(a2)+
000184E2 7205                       		moveq	#5,d1
000184E4 2248                       		movea.l	a0,a1
000184E6 6000                       		bra.s	loc_17B60
000184E8                            ; ===========================================================================
000184E8                            
000184E8                            Obj48_MakeLinks:
000184E8 4EB9 0000 E304             		jsr	SingleObjLoad2
000184EE 6600                       		bne.s	Obj48_MakeBall
000184F0 3368 0008 0008             		move.w	8(a0),8(a1)
000184F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184FC 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018500 137C 0006 0024             		move.b	#6,$24(a1)
00018506 237C 0000 82A6 0004        		move.l	#Map_obj15,4(a1)
0001850E 337C 0380 0002             		move.w	#$380,2(a1)
00018514 137C 0001 001A             		move.b	#1,$1A(a1)
0001851A 5228 0028                  		addq.b	#1,$28(a0)
0001851E                            
0001851E                            loc_17B60:				; XREF: Obj48_Main
0001851E 3A09                       		move.w	a1,d5
00018520 0445 D000                  		subi.w	#$D000,d5
00018524 EC4D                       		lsr.w	#6,d5
00018526 0245 007F                  		andi.w	#$7F,d5
0001852A 14C5                       		move.b	d5,(a2)+
0001852C 137C 0004 0001             		move.b	#4,1(a1)
00018532 137C 0008 0019             		move.b	#8,$19(a1)
00018538 137C 0006 0018             		move.b	#6,$18(a1)
0001853E 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018544 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018548                            
00018548                            Obj48_MakeBall:
00018548 137C 0008 0024             		move.b	#8,$24(a1)
0001854E 237C 0000 8896 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018556 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001855C 137C 0001 001A             		move.b	#1,$1A(a1)
00018562 137C 0005 0018             		move.b	#5,$18(a1)
00018568 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001856E 4E75                       		rts	
00018570                            ; ===========================================================================
00018570                            
00018570 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018576                            
00018576                            ; ===========================================================================
00018576                            
00018576                            Obj48_Base:				; XREF: Obj48_Index
00018576 47F9 0001 8570             		lea	(Obj48_PosData).l,a3
0001857C 45E8 0028                  		lea	$28(a0),a2
00018580 7C00                       		moveq	#0,d6
00018582 1C1A                       		move.b	(a2)+,d6
00018584                            
00018584                            loc_17BC6:
00018584 7800                       		moveq	#0,d4
00018586 181A                       		move.b	(a2)+,d4
00018588 ED4C                       		lsl.w	#6,d4
0001858A 0684 00FF D000             		addi.l	#$FFD000,d4
00018590 2244                       		movea.l	d4,a1
00018592 101B                       		move.b	(a3)+,d0
00018594 B029 003C                  		cmp.b	$3C(a1),d0
00018598 6700                       		beq.s	loc_17BE0
0001859A 5229 003C                  		addq.b	#1,$3C(a1)
0001859E                            
0001859E                            loc_17BE0:
0001859E 51CE FFE4                  		dbf	d6,loc_17BC6
000185A2                            
000185A2 B029 003C                  		cmp.b	$3C(a1),d0
000185A6 6600                       		bne.s	loc_17BFA
000185A8 2268 0034                  		movea.l	$34(a0),a1
000185AC 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000185B2 6600                       		bne.s	loc_17BFA
000185B4 5428 0024                  		addq.b	#2,$24(a0)
000185B8                            
000185B8                            loc_17BFA:
000185B8 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000185BE 6700                       		beq.s	Obj48_Display
000185C0 5268 0032                  		addq.w	#1,$32(a0)
000185C4                            
000185C4                            Obj48_Display:
000185C4 6100 0000                  		bsr.w	sub_17C2A
000185C8 1028 0026                  		move.b	$26(a0),d0
000185CC 4EB9 0000 8218             		jsr	(Obj15_Move2).l
000185D2 4EF9 0000 DE68             		jmp	DisplaySprite
000185D8                            ; ===========================================================================
000185D8                            
000185D8                            Obj48_Display2:				; XREF: Obj48_Index
000185D8 6100 0000                  		bsr.w	sub_17C2A
000185DC 4EB9 0000 81D8             		jsr	(Obj48_Move).l
000185E2 4EF9 0000 DE68             		jmp	DisplaySprite
000185E8                            
000185E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185E8                            
000185E8                            
000185E8                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000185E8 2268 0034                  		movea.l	$34(a0),a1
000185EC 0628 0020 001B             		addi.b	#$20,$1B(a0)
000185F2 6400                       		bcc.s	loc_17C3C
000185F4 0868 0000 001A             		bchg	#0,$1A(a0)
000185FA                            
000185FA                            loc_17C3C:
000185FA 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018600 3029 000C                  		move.w	$C(a1),d0
00018604 D068 0032                  		add.w	$32(a0),d0
00018608 3140 0038                  		move.w	d0,$38(a0)
0001860C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018612 4A29 0022                  		tst.b	$22(a1)
00018616 6A00                       		bpl.s	locret_17C66
00018618 10BC 003F                  		move.b	#$3F,0(a0)
0001861C 117C 0000 0024             		move.b	#0,$24(a0)
00018622                            
00018622                            locret_17C66:
00018622 4E75                       		rts	
00018624                            ; End of function sub_17C2A
00018624                            
00018624                            ; ===========================================================================
00018624                            
00018624                            loc_17C68:				; XREF: Obj48_Index
00018624 2268 0034                  		movea.l	$34(a0),a1
00018628 4A29 0022                  		tst.b	$22(a1)
0001862C 6A00                       		bpl.s	Obj48_Display3
0001862E 10BC 003F                  		move.b	#$3F,0(a0)
00018632 117C 0000 0024             		move.b	#0,$24(a0)
00018638                            
00018638                            Obj48_Display3:
00018638 4EF9 0000 DE68             		jmp	DisplaySprite
0001863E                            ; ===========================================================================
0001863E                            
0001863E                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001863E 7000                       		moveq	#0,d0
00018640 4A28 001A                  		tst.b	$1A(a0)
00018644 6600                       		bne.s	Obj48_Vanish
00018646 5200                       		addq.b	#1,d0
00018648                            
00018648                            Obj48_Vanish:
00018648 1140 001A                  		move.b	d0,$1A(a0)
0001864C 2268 0034                  		movea.l	$34(a0),a1
00018650 4A29 0022                  		tst.b	$22(a1)
00018654 6A00                       		bpl.s	Obj48_Display4
00018656 117C 0000 0020             		move.b	#0,$20(a0)
0001865C 6100 FB94                  		bsr.w	BossDefeated
00018660 5328 003C                  		subq.b	#1,$3C(a0)
00018664 6A00                       		bpl.s	Obj48_Display4
00018666 10BC 003F                  		move.b	#$3F,(a0)
0001866A 117C 0000 0024             		move.b	#0,$24(a0)
00018670                            
00018670                            Obj48_Display4:
00018670 4EF9 0000 DE68             		jmp	DisplaySprite
00018676                            ; ===========================================================================
00018676                            Ani_Eggman:
00018676                            	include "_anim\Eggman.asm"
00018676                            ; ---------------------------------------------------------------------------
00018676                            ; Animation script - Eggman (bosses)
00018676                            ; ---------------------------------------------------------------------------
00018676 0000                       		dc.w byte_17CD4-Ani_Eggman
00018678 0000                       		dc.w byte_17CD8-Ani_Eggman
0001867A 0000                       		dc.w byte_17CDC-Ani_Eggman
0001867C 0000                       		dc.w byte_17CE0-Ani_Eggman
0001867E 0000                       		dc.w byte_17CE4-Ani_Eggman
00018680 0000                       		dc.w byte_17CE8-Ani_Eggman
00018682 0000                       		dc.w byte_17CEC-Ani_Eggman
00018684 0000                       		dc.w byte_17CF0-Ani_Eggman
00018686 0000                       		dc.w byte_17CF4-Ani_Eggman
00018688 0000                       		dc.w byte_17CF8-Ani_Eggman
0001868A 0000                       		dc.w byte_17CFC-Ani_Eggman
0001868C 0000                       		dc.w byte_17D00-Ani_Eggman
0001868E 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018692 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018696 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001869A 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001869E 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000186A2 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000186A6 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000186AA 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000186AE 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000186B2 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000186B6 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000186BA 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000186C6                            		even
000186C6                            		even
000186C6                            Ani_TetoB:
000186C6                            	include "_anim\TetoB.asm"
000186C6                            ; ---------------------------------------------------------------------------
000186C6                            ; Animation script - Eggman (bosses)
000186C6                            ; ---------------------------------------------------------------------------
000186C6 0000                       		dc.w spin-Ani_TetoB
000186C8 0000                       		dc.w static-Ani_TetoB
000186CA 0000                       		dc.w static2-Ani_TetoB
000186CC 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
000186D3 0500 FF                    static:	dc.b 5,	0, $FF
000186D6 0501 FF                    static2:	dc.b 5,	1, $FF
000186DA 00                         		even
000186DA 00                         		even
000186DA                            ; ---------------------------------------------------------------------------
000186DA                            ; Sprite mappings - Eggman (boss levels)
000186DA                            ; ---------------------------------------------------------------------------
000186DA                            Map_Eggman:
000186DA                            	include "_maps\Eggman.asm"
000186DA                            Map_dc7e:
000186DA 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000186DC 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000186DE 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000186E0 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000186E2 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000186E4 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000186E6 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000186E8 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000186EA 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000186EC 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000186EE 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000186F0 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000186F2 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000186F4 06                         Map_dc7e_1A: 	dc.b $6
000186F5 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000186FA EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000186FF FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018704 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018709 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001870E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018713 02                         Map_dc7e_39: 	dc.b $2
00018714 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018719 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001871E 02                         Map_dc7e_44: 	dc.b $2
0001871F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018724 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018729 03                         Map_dc7e_4F: 	dc.b $3
0001872A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001872F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018734 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018739 03                         Map_dc7e_5F: 	dc.b $3
0001873A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001873F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018744 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018749 03                         Map_dc7e_6F: 	dc.b $3
0001874A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001874F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018754 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018759 03                         Map_dc7e_7F: 	dc.b $3
0001875A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001875F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018764 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018769 04                         Map_dc7e_8F: 	dc.b $4
0001876A E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
0001876F E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018774 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018779 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
0001877E 01                         Map_dc7e_A4: 	dc.b $1
0001877F 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00018784 01                         Map_dc7e_AA: 	dc.b $1
00018785 0405 0031 22               	dc.b $4, $5, $0, $31, $22
0001878A 00                         Map_dc7e_B0: 	dc.b $0
0001878B 02                         Map_dc7e_B1: 	dc.b $2
0001878C 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018791 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00018796 02                         Map_dc7e_BC: 	dc.b $2
00018797 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
0001879C 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000187A2 00                         	even
000187A2 00                         	even
000187A2                            
000187A2                            ; ---------------------------------------------------------------------------
000187A2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000187A2                            ; ---------------------------------------------------------------------------
000187A2                            Map_BossItems:
000187A2                            	include "_maps\Boss items.asm"
000187A2                            ; ---------------------------------------------------------------------------
000187A2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000187A2                            ; ---------------------------------------------------------------------------
000187A2 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000187A6 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000187AA 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000187AE 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000187B2 01                         byte_17DE4:	dc.b 1
000187B3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000187B8 02                         byte_17DEA:	dc.b 2
000187B9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000187BE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000187C3 00                         		dc.b 0
000187C4 01                         byte_17DF6:	dc.b 1
000187C5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000187CA 01                         byte_17DFC:	dc.b 1
000187CB 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000187D0 01                         byte_17E02:	dc.b 1
000187D1 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000187D6 04                         byte_17E08:	dc.b 4
000187D7 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000187DC F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000187E1 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000187E6 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000187EB 00                         		dc.b 0
000187EC 02                         byte_17E1E:	dc.b 2
000187ED 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000187F2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000187F7 00                         		dc.b 0
000187F8 02                         byte_17E2A:	dc.b 2
000187F9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000187FE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018804 00                         		even
00018804 00                         		even
00018804                            
00018804                            ; ===========================================================================
00018804                            ; ---------------------------------------------------------------------------
00018804                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018804                            ; ---------------------------------------------------------------------------
00018804                            
00018804                            
00018804                            obj77:					; XREF: Obj_Index
00018804 7000                       		moveq	#0,d0
00018806 1028 0024                  		move.b	$24(a0),d0
0001880A 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001880E 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018812                            ; ===========================================================================
00018812 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018814 0000                       		dc.w obj77_ShipMain-obj77_Index
00018816 0000                       		dc.w obj77_FaceMain-obj77_Index
00018818 0000                       		dc.w obj77_FlameMain-obj77_Index
0001881A                            
0001881A 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
0001881C 0401                       		dc.b 4,	1
0001881E 0607                       		dc.b 6,	7
00018820                            ; ===========================================================================
00018820                            
00018820                            obj77_Main:				; XREF: obj77_Index
00018820 45F9 0001 881A             		lea	(obj77_ObjData).l,a2
00018826 2248                       		movea.l	a0,a1
00018828 7202                       		moveq	#2,d1
0001882A 6000                       		bra.s	obj77_LoadBoss
0001882C                            ; ===========================================================================
0001882C                            
0001882C                            obj77_Loop:
0001882C 4EB9 0000 E304             		jsr	SingleObjLoad2
00018832 6600                       		bne.s	loc2_17772
00018834                            
00018834                            obj77_LoadBoss:				; XREF: obj77_Main
00018834 135A 0024                  		move.b	(a2)+,$24(a1)
00018838 12BC 0077                  		move.b	#$77,0(a1)
0001883C 3368 0008 0008             		move.w	8(a0),8(a1)
00018842 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018848 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018850 337C 0400 0002             		move.w	#$400,2(a1)
00018856 137C 0004 0001             		move.b	#4,1(a1)
0001885C 137C 0020 0019             		move.b	#$20,$19(a1)
00018862 137C 0003 0018             		move.b	#3,$18(a1)
00018868 135A 001C                  		move.b	(a2)+,$1C(a1)
0001886C 2348 0034                  		move.l	a0,$34(a1)
00018870 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018874                            
00018874                            loc2_17772:
00018874 3168 0008 0030             		move.w	8(a0),$30(a0)
0001887A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018880 117C 000F 0020             		move.b	#$F,$20(a0)
00018886 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001888C                            
0001888C                            obj77_ShipMain:				; XREF: obj77_Index
0001888C 7000                       		moveq	#0,d0
0001888E 1028 0025                  		move.b	$25(a0),d0
00018892 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018896 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
0001889A 43F9 0001 86C6             		lea	(Ani_TetoB).l,a1
000188A0 4EB9 0000 AEEE             		jsr	AnimateSprite
000188A6 1028 0022                  		move.b	$22(a0),d0
000188AA 0200 0003                  		andi.b	#3,d0
000188AE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188B4 8128 0001                  		or.b	d0,1(a0)
000188B8 4EF9 0000 DE68             		jmp	DisplaySprite
000188BE                            ; ===========================================================================
000188BE 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
000188C0 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
000188C2 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
000188C4 0000                       		dc.w loc2_17954-obj77_ShipIndex
000188C6 0000                       		dc.w fatassruns-obj77_ShipIndex		
000188C8 0000                       		dc.w loc2_1797A-obj77_ShipIndex
000188CA 0000                       		dc.w loc2_179AC-obj77_ShipIndex
000188CC 0000                       		dc.w loc2_179F6-obj77_ShipIndex
000188CE                            ; ===========================================================================
000188CE                            
000188CE                            obj77_ShipStart:			; XREF: obj77_ShipIndex
000188CE                            	;	move.w	#$100,$12(a0)	; move ship down
000188CE 6100 F964                  		bsr.w	BossMove
000188D2 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000188D8 6600                       		bne.s	loc2_177E6
000188DA 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000188E0 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000188E4                            
000188E4                            loc2_177E6:
000188E4                            ;		move.b	$3F(a0),d0
000188E4                            ;		jsr	(CalcSine).l
000188E4 EC40                       		asr.w	#6,d0
000188E6 D068 0038                  		add.w	$38(a0),d0
000188EA 3140 000C                  		move.w	d0,$C(a0)
000188EE 3168 0030 0008             		move.w	$30(a0),8(a0)
000188F4 5428 003F                  		addq.b	#2,$3F(a0)
000188F8 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000188FE 6400                       		bcc.s	locret_1784A2
00018900 4A28 0022                  		tst.b	$22(a0)
00018904 6B00                       		bmi.s	loc2_1784C
00018906 4A28 0020                  		tst.b	$20(a0)
0001890A 6600                       		bne.s	locret_1784A2
0001890C 4A28 003E                  		tst.b	$3E(a0)
00018910 6600                       		bne.s	obj77_ShipFlash
00018912 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018918 303C 00AC                  		move.w	#$AC,d0
0001891C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018922                            
00018922                            obj77_ShipFlash:
00018922 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018926 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018928 4A51                       		tst.w	(a1)
0001892A 6600                       		bne.s	loc2_1783C
0001892C 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018930                            
00018930                            loc2_1783C:
00018930 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018932 5328 003E                  		subq.b	#1,$3E(a0)
00018936 6600                       		bne.s	locret_1784A2
00018938 117C 000F 0020             		move.b	#$F,$20(a0)
0001893E                            
0001893E                            locret_1784A2:
0001893E 4E75                       		rts	
00018940                            ; ===========================================================================
00018940                            
00018940                            loc2_1784C:				; XREF: loc2_177E6
00018940 7064                       		moveq	#100,d0
00018942 6100 0000                  		bsr.w	AddPoints
00018946 117C 000A 0025             		move.b	#$A,$25(a0)
0001894C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018952 4E75                       		rts	
00018954                            ; ===========================================================================
00018954                            
00018954                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018954 317C FF00 0010             		move.w	#-$100,$10(a0)
0001895A 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018960 6100 F8D2                  		bsr.w	BossMove
00018964 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
0001896A 6600                       		bne.s	loc2_17916
0001896C 317C 0000 0010             		move.w	#0,$10(a0)
00018972 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018978 317C 0000 0012             		move.w	#0,$12(a0)
0001897E 5428 0025                  		addq.b	#2,$25(a0)
00018982                            
00018982                            loc2_17910:
00018982 317C 0077 003C             		move.w	#$77,$3C(a0)
00018988                            
00018988                            loc2_17916:
00018988 6000 FF5A                  		bra.w	loc2_177E6
0001898C                            ; ===========================================================================
0001898C                            
0001898C                            obj77_ShipMove:				; XREF: obj77_ShipIndex
0001898C 6100 F8A6                  		bsr.w	BossMove
00018990 5368 003C                  		subq.w	#1,$3C(a0)
00018994 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018996 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
0001899C 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
000189A2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
000189A8 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
000189AE 6600                       		bne.s	loc2_17950 ; if not branch
000189B0                            
000189B0                            fatass_attack:
000189B0 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
000189B6 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000189BC 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
000189C2 6600                       		bne.s	loc2_17950    ; if not you know the drill
000189C4 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000189C8 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000189CE                            
000189CE                            loc2_17950:
000189CE 6000 FF14                  		bra.w	loc2_177E6
000189D2                            ; ===========================================================================
000189D2                            
000189D2                            loc2_17954:				; XREF: obj77_ShipIndex
000189D2 6100 F860                  		bsr.w	BossMove
000189D6 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000189DC                            		; i suck at programming
000189DC 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000189E2 6600                       		bne.s	loc2_17976    ; if not blah blah
000189E4 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000189EA 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000189EE 303C 00B9                  		move.w	#$B9,d0
000189F2 4EB9 0000 15CC             		jsr	(PlaySound).l	; play the earthquake sound
000189F8                            
000189F8                            Peartobombs:	
000189F8 4EB9 0000 E304                		jsr	SingleObjLoad2
000189FE 6600                       		bne.s	secondone
00018A00 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018A04 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018A0A 337C 0670 000C             		move.w	#$670,$C(a1)
00018A10                            secondone:		
00018A10 4EB9 0000 E304                		jsr	SingleObjLoad2
00018A16 6600                       		bne.s	loc2_17976		
00018A18 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018A1C 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018A22 337C 0670 000C             		move.w	#$670,$C(a1)
00018A28                            lastone:
00018A28 4EB9 0000 E304                		jsr	SingleObjLoad2
00018A2E 6600                       		bne.s	loc2_17976		
00018A30 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018A34 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018A3A 337C 0670 000C             		move.w	#$670,$C(a1)
00018A40                            		
00018A40                            loc2_17976:
00018A40 6000 FEA2                  		bra.w	loc2_177E6
00018A44                            		
00018A44                            ; ===========================================================================
00018A44                            Fatassruns:
00018A44 6100 F7EE                   		bsr.w	BossMove
00018A48 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018A4E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018A54 6600                       		bne.s	processstuff ; is not go here
00018A56 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018A5C 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018A62 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018A66 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018A6C 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018A72                            		
00018A72                            		
00018A72                            processstuff:
00018A72 6000 FE70                  		bra.w	loc2_177E6
00018A76                            ; ===========================================================================
00018A76                            
00018A76                            loc2_1797A:				; XREF: obj77_ShipIndex
00018A76 5368 003C                  		subq.w	#1,$3C(a0)
00018A7A 6B00                       		bmi.s	loc2_17984
00018A7C 6000 F774                  		bra.w	BossDefeated
00018A80                            ; ===========================================================================
00018A80                            
00018A80                            loc2_17984:
00018A80 08E8 0000 0022             		bset	#0,$22(a0)
00018A86 08A8 0007 0022             		bclr	#7,$22(a0)
00018A8C 4268 0010                  		clr.w	$10(a0)
00018A90 5428 0025                  		addq.b	#2,$25(a0)
00018A94 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018A9A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A9E 6600                       		bne.s	locret_179AA2
00018AA0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018AA6                            
00018AA6                            locret_179AA2:
00018AA6 4E75                       		rts	
00018AA8                            ; ===========================================================================
00018AA8                            
00018AA8                            loc2_179AC:				; XREF: obj77_ShipIndex
00018AA8 5268 003C                  		addq.w	#1,$3C(a0)
00018AAC 6700                       		beq.s	loc2_179BC
00018AAE 6A00                       		bpl.s	loc2_179C2
00018AB0 0668 0018 0012             		addi.w	#$18,$12(a0)
00018AB6 6000                       		bra.s	loc2_179EE
00018AB8                            ; ===========================================================================
00018AB8                            
00018AB8                            loc2_179BC:
00018AB8 4268 0012                  		clr.w	$12(a0)
00018ABC 6000                       		bra.s	loc2_179EE
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            loc2_179C2:
00018ABE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018AC4 6500                       		bcs.s	loc2_179DA
00018AC6 6700                       		beq.s	loc2_179E0
00018AC8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018ACE 6500                       		bcs.s	loc2_179EE
00018AD0 5428 0025                  		addq.b	#2,$25(a0)
00018AD4 6000                       		bra.s	loc2_179EE
00018AD6                            ; ===========================================================================
00018AD6                            
00018AD6                            loc2_179DA:
00018AD6 5168 0012                  		subq.w	#8,$12(a0)
00018ADA 6000                       		bra.s	loc2_179EE
00018ADC                            ; ===========================================================================
00018ADC                            
00018ADC                            loc2_179E0:
00018ADC 4268 0012                  		clr.w	$12(a0)
00018AE0 303C 0097                  		move.w	#$97,d0
00018AE4 4EB9 0000 15CC             		jsr	(PlaySound).l	; play lz3 music
00018AEA                            
00018AEA                            loc2_179EE:
00018AEA 6100 F748                  		bsr.w	BossMove
00018AEE 6000 FDF4                  		bra.w	loc2_177E6
00018AF2                            ; ===========================================================================
00018AF2                            
00018AF2                            loc2_179F6:				; XREF: obj77_ShipIndex
00018AF2 317C 0400 0010             		move.w	#$400,$10(a0)
00018AF8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018AFE 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018B04 6700                       		beq.s	loc2_17A10
00018B06 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018B0A 6000                       		bra.s	loc2_17A16
00018B0C                            ; ===========================================================================
00018B0C                            
00018B0C                            loc2_17A10:
00018B0C 4A28 0001                  		tst.b	1(a0)
00018B10 6A00                       		bpl.s	obj77_ShipDel
00018B12                            
00018B12                            loc2_17A16:
00018B12 6100 F720                  		bsr.w	BossMove
00018B16 6000 FDCC                  		bra.w	loc2_177E6
00018B1A                            ; ===========================================================================
00018B1A                            
00018B1A                            obj77_ShipDel:
00018B1A 4EF9 0000 DEA4             		jmp	DeleteObject
00018B20                            ; ===========================================================================
00018B20                            
00018B20                            obj77_FaceMain:				; XREF: obj77_Index
00018B20 4E75                       		rts
00018B22                            ; ===========================================================================
00018B22                            
00018B22                            obj77_FlameMain:			; XREF: obj77_Index
00018B22 4E75                       		rts
00018B24                            ; ===========================================================================
00018B24                            
00018B24                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018B24 43F9 0001 86C6             		lea	(Ani_TetoB).l,a1
00018B2A 4EB9 0000 AEEE             		jsr	AnimateSprite
00018B30 4EF9 0000 DE68             		jmp	DisplaySprite
00018B36                            ; ---------------------------------------------------------------------------
00018B36                            ; Sprite mappings - Fatass teto boss
00018B36                            ; ---------------------------------------------------------------------------
00018B36                            Map_TetoBoss:
00018B36                            	include "_maps\tetoboss.asm"
00018B36                            Map_f09a:
00018B36 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018B38 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018B3A 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018B3C 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018B3E 03                         Map_f09a_8: 	dc.b $3
00018B3F E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018B44 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018B49 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018B4E 06                         Map_f09a_18: 	dc.b $6
00018B4F EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018B54 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018B59 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018B5E 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018B63 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018B68 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018B6D 03                         Map_f09a_37: 	dc.b $3
00018B6E E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018B73 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018B78 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018B7D 06                         Map_f09a_47: 	dc.b $6
00018B7E ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018B83 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018B88 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018B8D DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018B92 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018B97 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018B9C                            	even
00018B9C                            	even
00018B9C                            ; ===========================================================================
00018B9C                            ; ---------------------------------------------------------------------------
00018B9C                            ; Object 73 - Eggman (MZ)
00018B9C                            ; ---------------------------------------------------------------------------
00018B9C                            
00018B9C                            Obj73:					; XREF: Obj_Index
00018B9C 7000                       		moveq	#0,d0
00018B9E 1028 0024                  		move.b	$24(a0),d0
00018BA2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018BA6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018BAA                            ; ===========================================================================
00018BAA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018BAC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018BAE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018BB0 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018BB2 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018BB4                            
00018BB4 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018BB7 0401 04                    		dc.b 4,	1, 4
00018BBA 0607 04                    		dc.b 6,	7, 4
00018BBD 0800 03                    		dc.b 8,	0, 3
00018BC0                            ; ===========================================================================
00018BC0                            
00018BC0                            Obj73_Main:				; XREF: Obj73_Index
00018BC0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018BC6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018BCC 117C 000F 0020             		move.b	#$F,$20(a0)
00018BD2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018BD8 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018BDC 2248                       		movea.l	a0,a1
00018BDE 7203                       		moveq	#3,d1
00018BE0 6000                       		bra.s	Obj73_LoadBoss
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            Obj73_Loop:
00018BE2 4EB9 0000 E304             		jsr	SingleObjLoad2
00018BE8 6600                       		bne.s	Obj73_ShipMain
00018BEA 12BC 0073                  		move.b	#$73,0(a1)
00018BEE 3368 0008 0008             		move.w	8(a0),8(a1)
00018BF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018BFA                            
00018BFA                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018BFA 08A8 0000 0022             		bclr	#0,$22(a0)
00018C00 4229 0025                  		clr.b	$25(a1)
00018C04 135A 0024                  		move.b	(a2)+,$24(a1)
00018C08 135A 001C                  		move.b	(a2)+,$1C(a1)
00018C0C 135A 0018                  		move.b	(a2)+,$18(a1)
00018C10 237C 0001 86DA 0004        		move.l	#Map_Eggman,4(a1)
00018C18 337C 0400 0002             		move.w	#$400,2(a1)
00018C1E 137C 0004 0001             		move.b	#4,1(a1)
00018C24 137C 0020 0019             		move.b	#$20,$19(a1)
00018C2A 2348 0034                  		move.l	a0,$34(a1)
00018C2E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018C32                            
00018C32                            Obj73_ShipMain:
00018C32 7000                       		moveq	#0,d0
00018C34 1028 0025                  		move.b	$25(a0),d0
00018C38 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018C3C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018C40 43F9 0001 8676             		lea	(Ani_Eggman).l,a1
00018C46 4EB9 0000 AEEE             		jsr	AnimateSprite
00018C4C 7003                       		moveq	#3,d0
00018C4E C028 0022                  		and.b	$22(a0),d0
00018C52 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018C58 8128 0001                  		or.b	d0,1(a0)
00018C5C 4EF9 0000 DE68             		jmp	DisplaySprite
00018C62                            ; ===========================================================================
00018C62 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018C64 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018C66 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018C68 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018C6A 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018C6C                            ; ===========================================================================
00018C6C                            
00018C6C                            loc_18302:				; XREF: Obj73_ShipIndex
00018C6C 1028 003F                  		move.b	$3F(a0),d0
00018C70 5428 003F                  		addq.b	#2,$3F(a0)
00018C74 4EB9 0000 2D02             		jsr	(CalcSine).l
00018C7A E440                       		asr.w	#2,d0
00018C7C 3140 0012                  		move.w	d0,$12(a0)
00018C80 317C FF00 0010             		move.w	#-$100,$10(a0)
00018C86 6100 F5AC                  		bsr.w	BossMove
00018C8A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C90 6600                       		bne.s	loc_18334
00018C92 5428 0025                  		addq.b	#2,$25(a0)
00018C96 4228 0028                  		clr.b	$28(a0)
00018C9A 42A8 0010                  		clr.l	$10(a0)
00018C9E                            
00018C9E                            loc_18334:
00018C9E 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00018CA4 1140 0034                  		move.b	d0,$34(a0)
00018CA8                            
00018CA8                            loc_1833E:
00018CA8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018CAE 3168 0030 0008             		move.w	$30(a0),8(a0)
00018CB4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018CBA 6400                       		bcc.s	locret_18390
00018CBC 4A28 0022                  		tst.b	$22(a0)
00018CC0 6B00                       		bmi.s	loc_18392
00018CC2 4A28 0020                  		tst.b	$20(a0)
00018CC6 6600                       		bne.s	locret_18390
00018CC8 4A28 003E                  		tst.b	$3E(a0)
00018CCC 6600                       		bne.s	loc_18374
00018CCE 117C 0028 003E             		move.b	#$28,$3E(a0)
00018CD4 303C 00AC                  		move.w	#$AC,d0
00018CD8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018CDE                            
00018CDE                            loc_18374:
00018CDE 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018CE2 7000                       		moveq	#0,d0
00018CE4 4A51                       		tst.w	(a1)
00018CE6 6600                       		bne.s	loc_18382
00018CE8 303C 0EEE                  		move.w	#$EEE,d0
00018CEC                            
00018CEC                            loc_18382:
00018CEC 3280                       		move.w	d0,(a1)
00018CEE 5328 003E                  		subq.b	#1,$3E(a0)
00018CF2 6600                       		bne.s	locret_18390
00018CF4 117C 000F 0020             		move.b	#$F,$20(a0)
00018CFA                            
00018CFA                            locret_18390:
00018CFA 4E75                       		rts	
00018CFC                            ; ===========================================================================
00018CFC                            
00018CFC                            loc_18392:				; XREF: loc_1833E
00018CFC 7064                       		moveq	#100,d0
00018CFE 6100 0000                  		bsr.w	AddPoints
00018D02 117C 0004 0025             		move.b	#4,$25(a0)
00018D08 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018D0E 4268 0010                  		clr.w	$10(a0)
00018D12 4E75                       		rts	
00018D14                            ; ===========================================================================
00018D14                            
00018D14                            loc_183AA:				; XREF: Obj73_ShipIndex
00018D14 7000                       		moveq	#0,d0
00018D16 1028 0028                  		move.b	$28(a0),d0
00018D1A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018D1E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018D22 0228 0006 0028             		andi.b	#6,$28(a0)
00018D28 6000 FF7E                  		bra.w	loc_1833E
00018D2C                            ; ===========================================================================
00018D2C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018D2E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018D30 0000                       		dc.w loc_183CA-off_183C2
00018D32 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018D34                            ; ===========================================================================
00018D34                            
00018D34                            loc_183CA:				; XREF: off_183C2
00018D34 4A68 0010                  		tst.w	$10(a0)
00018D38 6600                       		bne.s	loc_183FE
00018D3A 7040                       		moveq	#$40,d0
00018D3C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D42 6700                       		beq.s	loc_183E6
00018D44 6500                       		bcs.s	loc_183DE
00018D46 4440                       		neg.w	d0
00018D48                            
00018D48                            loc_183DE:
00018D48 3140 0012                  		move.w	d0,$12(a0)
00018D4C 6000 F4E6                  		bra.w	BossMove
00018D50                            ; ===========================================================================
00018D50                            
00018D50                            loc_183E6:
00018D50 317C 0200 0010             		move.w	#$200,$10(a0)
00018D56 317C 0100 0012             		move.w	#$100,$12(a0)
00018D5C 0828 0000 0022             		btst	#0,$22(a0)
00018D62 6600                       		bne.s	loc_183FE
00018D64 4468 0010                  		neg.w	$10(a0)
00018D68                            
00018D68                            loc_183FE:
00018D68 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018D6E 6400                       		bcc.s	Obj73_MakeLava
00018D70 6100 F4C2                  		bsr.w	BossMove
00018D74 5968 0012                  		subq.w	#4,$12(a0)
00018D78                            
00018D78                            Obj73_MakeLava:
00018D78 5328 0034                  		subq.b	#1,$34(a0)
00018D7C 6400                       		bcc.s	loc_1845C
00018D7E 4EB9 0000 E2EE             		jsr	SingleObjLoad
00018D84 6600                       		bne.s	loc_1844A
00018D86 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018D8A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018D90 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00018D96 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018D9C 80FC 0050                  		divu.w	#$50,d0
00018DA0 4840                       		swap	d0
00018DA2 0640 1878                  		addi.w	#$1878,d0
00018DA6 3340 0008                  		move.w	d0,8(a1)
00018DAA EE09                       		lsr.b	#7,d1
00018DAC 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018DB2                            
00018DB2                            loc_1844A:
00018DB2 4EB9 0000 2CDC             		jsr	(RandomNumber).l
00018DB8 0200 001F                  		andi.b	#$1F,d0
00018DBC 0600 0040                  		addi.b	#$40,d0
00018DC0 1140 0034                  		move.b	d0,$34(a0)
00018DC4                            
00018DC4                            loc_1845C:
00018DC4 0828 0000 0022             		btst	#0,$22(a0)
00018DCA 6700                       		beq.s	loc_18474
00018DCC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018DD2 6D00                       		blt.s	locret_1849C
00018DD4 317C 1910 0030             		move.w	#$1910,$30(a0)
00018DDA 6000                       		bra.s	loc_18482
00018DDC                            ; ===========================================================================
00018DDC                            
00018DDC                            loc_18474:
00018DDC 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018DE2 6E00                       		bgt.s	locret_1849C
00018DE4 317C 1830 0030             		move.w	#$1830,$30(a0)
00018DEA                            
00018DEA                            loc_18482:
00018DEA 4268 0010                  		clr.w	$10(a0)
00018DEE 317C FE80 0012             		move.w	#-$180,$12(a0)
00018DF4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018DFA 6400                       		bcc.s	loc_18498
00018DFC 4468 0012                  		neg.w	$12(a0)
00018E00                            
00018E00                            loc_18498:
00018E00 5428 0028                  		addq.b	#2,$28(a0)
00018E04                            
00018E04                            locret_1849C:
00018E04 4E75                       		rts	
00018E06                            ; ===========================================================================
00018E06                            
00018E06                            Obj73_MakeLava2:			; XREF: off_183C2
00018E06 6100 F42C                  		bsr.w	BossMove
00018E0A 3028 0038                  		move.w	$38(a0),d0
00018E0E 0440 022C                  		subi.w	#$22C,d0
00018E12 6E00                       		bgt.s	locret_184F4
00018E14 303C 022C                  		move.w	#$22C,d0
00018E18 4A68 0012                  		tst.w	$12(a0)
00018E1C 6700                       		beq.s	loc_184EA
00018E1E 4268 0012                  		clr.w	$12(a0)
00018E22 317C 0050 003C             		move.w	#$50,$3C(a0)
00018E28 0868 0000 0022             		bchg	#0,$22(a0)
00018E2E 4EB9 0000 E2EE             		jsr	SingleObjLoad
00018E34 6600                       		bne.s	loc_184EA
00018E36 3368 0030 0008             		move.w	$30(a0),8(a1)
00018E3C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018E42 0669 0018 000C             		addi.w	#$18,$C(a1)
00018E48 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018E4C 137C 0001 0028             		move.b	#1,$28(a1)
00018E52                            
00018E52                            loc_184EA:
00018E52 5368 003C                  		subq.w	#1,$3C(a0)
00018E56 6600                       		bne.s	locret_184F4
00018E58 5428 0028                  		addq.b	#2,$28(a0)
00018E5C                            
00018E5C                            locret_184F4:
00018E5C 4E75                       		rts	
00018E5E                            ; ===========================================================================
00018E5E                            
00018E5E                            loc_184F6:				; XREF: Obj73_ShipIndex
00018E5E 5368 003C                  		subq.w	#1,$3C(a0)
00018E62 6B00                       		bmi.s	loc_18500
00018E64 6000 F38C                  		bra.w	BossDefeated
00018E68                            ; ===========================================================================
00018E68                            
00018E68                            loc_18500:
00018E68 08E8 0000 0022             		bset	#0,$22(a0)
00018E6E 08A8 0007 0022             		bclr	#7,$22(a0)
00018E74 4268 0010                  		clr.w	$10(a0)
00018E78 5428 0025                  		addq.b	#2,$25(a0)
00018E7C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018E82 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018E86 6600                       		bne.s	locret_1852A
00018E88 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018E8E 4268 0012                  		clr.w	$12(a0)
00018E92                            
00018E92                            locret_1852A:
00018E92 4E75                       		rts	
00018E94                            ; ===========================================================================
00018E94                            
00018E94                            loc_1852C:				; XREF: Obj73_ShipIndex
00018E94 5268 003C                  		addq.w	#1,$3C(a0)
00018E98 6700                       		beq.s	loc_18544
00018E9A 6A00                       		bpl.s	loc_1854E
00018E9C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018EA2 6400                       		bcc.s	loc_18544
00018EA4 0668 0018 0012             		addi.w	#$18,$12(a0)
00018EAA 6000                       		bra.s	loc_1857A
00018EAC                            ; ===========================================================================
00018EAC                            
00018EAC                            loc_18544:
00018EAC 4268 0012                  		clr.w	$12(a0)
00018EB0 4268 003C                  		clr.w	$3C(a0)
00018EB4 6000                       		bra.s	loc_1857A
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            loc_1854E:
00018EB6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018EBC 6500                       		bcs.s	loc_18566
00018EBE 6700                       		beq.s	loc_1856C
00018EC0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018EC6 6500                       		bcs.s	loc_1857A
00018EC8 5428 0025                  		addq.b	#2,$25(a0)
00018ECC 6000                       		bra.s	loc_1857A
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE                            loc_18566:
00018ECE 5168 0012                  		subq.w	#8,$12(a0)
00018ED2 6000                       		bra.s	loc_1857A
00018ED4                            ; ===========================================================================
00018ED4                            
00018ED4                            loc_1856C:
00018ED4 4268 0012                  		clr.w	$12(a0)
00018ED8 303C 0083                  		move.w	#$83,d0
00018EDC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play MZ music
00018EE2                            
00018EE2                            loc_1857A:
00018EE2 6100 F350                  		bsr.w	BossMove
00018EE6 6000 FDC0                  		bra.w	loc_1833E
00018EEA                            ; ===========================================================================
00018EEA                            
00018EEA                            loc_18582:				; XREF: Obj73_ShipIndex
00018EEA 317C 0500 0010             		move.w	#$500,$10(a0)
00018EF0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018EF6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018EFC 6400                       		bcc.s	loc_1859C
00018EFE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018F02 6000                       		bra.s	loc_185A2
00018F04                            ; ===========================================================================
00018F04                            
00018F04                            loc_1859C:
00018F04 4A28 0001                  		tst.b	1(a0)
00018F08 6A00                       		bpl.s	Obj73_ShipDel
00018F0A                            
00018F0A                            loc_185A2:
00018F0A 6100 F328                  		bsr.w	BossMove
00018F0E 6000 FD98                  		bra.w	loc_1833E
00018F12                            ; ===========================================================================
00018F12                            
00018F12                            Obj73_ShipDel:
00018F12 4EF9 0000 DEA4             		jmp	DeleteObject
00018F18                            ; ===========================================================================
00018F18                            
00018F18                            Obj73_FaceMain:				; XREF: Obj73_Index
00018F18 7000                       		moveq	#0,d0
00018F1A 7201                       		moveq	#1,d1
00018F1C 2268 0034                  		movea.l	$34(a0),a1
00018F20 1029 0025                  		move.b	$25(a1),d0
00018F24 5540                       		subq.w	#2,d0
00018F26 6600                       		bne.s	loc_185D2
00018F28 0829 0001 0028             		btst	#1,$28(a1)
00018F2E 6700                       		beq.s	loc_185DA
00018F30 4A69 0012                  		tst.w	$12(a1)
00018F34 6600                       		bne.s	loc_185DA
00018F36 7204                       		moveq	#4,d1
00018F38 6000                       		bra.s	loc_185EE
00018F3A                            ; ===========================================================================
00018F3A                            
00018F3A                            loc_185D2:
00018F3A 5500                       		subq.b	#2,d0
00018F3C 6B00                       		bmi.s	loc_185DA
00018F3E 720A                       		moveq	#$A,d1
00018F40 6000                       		bra.s	loc_185EE
00018F42                            ; ===========================================================================
00018F42                            
00018F42                            loc_185DA:
00018F42 4A29 0020                  		tst.b	$20(a1)
00018F46 6600                       		bne.s	loc_185E4
00018F48 7205                       		moveq	#5,d1
00018F4A 6000                       		bra.s	loc_185EE
00018F4C                            ; ===========================================================================
00018F4C                            
00018F4C                            loc_185E4:
00018F4C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018F52 6500                       		bcs.s	loc_185EE
00018F54 7204                       		moveq	#4,d1
00018F56                            
00018F56                            loc_185EE:
00018F56 1141 001C                  		move.b	d1,$1C(a0)
00018F5A 5900                       		subq.b	#4,d0
00018F5C 6600                       		bne.s	loc_18602
00018F5E 117C 0006 001C             		move.b	#6,$1C(a0)
00018F64 4A28 0001                  		tst.b	1(a0)
00018F68 6A00                       		bpl.s	Obj73_FaceDel
00018F6A                            
00018F6A                            loc_18602:
00018F6A 6000                       		bra.s	Obj73_Display
00018F6C                            ; ===========================================================================
00018F6C                            
00018F6C                            Obj73_FaceDel:
00018F6C 4EF9 0000 DEA4             		jmp	DeleteObject
00018F72                            ; ===========================================================================
00018F72                            
00018F72                            Obj73_FlameMain:			; XREF: Obj73_Index
00018F72 117C 0007 001C             		move.b	#7,$1C(a0)
00018F78 2268 0034                  		movea.l	$34(a0),a1
00018F7C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F82 6D00                       		blt.s	loc_1862A
00018F84 117C 000B 001C             		move.b	#$B,$1C(a0)
00018F8A 4A28 0001                  		tst.b	1(a0)
00018F8E 6A00                       		bpl.s	Obj73_FlameDel
00018F90 6000                       		bra.s	loc_18636
00018F92                            ; ===========================================================================
00018F92                            
00018F92                            loc_1862A:
00018F92 4A69 0010                  		tst.w	$10(a1)
00018F96 6700                       		beq.s	loc_18636
00018F98 117C 0008 001C             		move.b	#8,$1C(a0)
00018F9E                            
00018F9E                            loc_18636:
00018F9E 6000                       		bra.s	Obj73_Display
00018FA0                            ; ===========================================================================
00018FA0                            
00018FA0                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018FA0 4EF9 0000 DEA4             		jmp	DeleteObject
00018FA6                            ; ===========================================================================
00018FA6                            
00018FA6                            Obj73_Display:
00018FA6 43F9 0001 8676             		lea	(Ani_Eggman).l,a1
00018FAC 4EB9 0000 AEEE             		jsr	AnimateSprite
00018FB2                            
00018FB2                            loc_1864A:
00018FB2 2268 0034                  		movea.l	$34(a0),a1
00018FB6 3169 0008 0008             		move.w	8(a1),8(a0)
00018FBC 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018FC2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018FC8 7003                       		moveq	#3,d0
00018FCA C028 0022                  		and.b	$22(a0),d0
00018FCE 0228 00FC 0001             		andi.b	#-4,1(a0)
00018FD4 8128 0001                  		or.b	d0,1(a0)
00018FD8 4EF9 0000 DE68             		jmp	DisplaySprite
00018FDE                            ; ===========================================================================
00018FDE                            
00018FDE                            Obj73_TubeMain:				; XREF: Obj73_Index
00018FDE 2268 0034                  		movea.l	$34(a0),a1
00018FE2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018FE8 6600                       		bne.s	loc_18688
00018FEA 4A28 0001                  		tst.b	1(a0)
00018FEE 6A00                       		bpl.s	Obj73_TubeDel
00018FF0                            
00018FF0                            loc_18688:
00018FF0 217C 0001 87A2 0004        		move.l	#Map_BossItems,4(a0)
00018FF8 317C 246C 0002             		move.w	#$246C,2(a0)
00018FFE 117C 0004 001A             		move.b	#4,$1A(a0)
00019004 60AC                       		bra.s	loc_1864A
00019006                            ; ===========================================================================
00019006                            
00019006                            Obj73_TubeDel:
00019006 4EF9 0000 DEA4             		jmp	DeleteObject
0001900C                            ; ===========================================================================
0001900C                            ; ---------------------------------------------------------------------------
0001900C                            ; Object 74 - lava that	Eggman drops (MZ)
0001900C                            ; ---------------------------------------------------------------------------
0001900C                            
0001900C                            Obj74:					; XREF: Obj_Index
0001900C 7000                       		moveq	#0,d0
0001900E 1028 0024                  		move.b	$24(a0),d0
00019012 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019016 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001901A 4EF9 0000 DE68             		jmp	DisplaySprite
00019020                            ; ===========================================================================
00019020 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019022 0000                       		dc.w Obj74_Action-Obj74_Index
00019024 0000                       		dc.w loc_18886-Obj74_Index
00019026 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019028                            ; ===========================================================================
00019028                            
00019028                            Obj74_Main:				; XREF: Obj74_Index
00019028 117C 0008 0016             		move.b	#8,$16(a0)
0001902E 117C 0008 0017             		move.b	#8,$17(a0)
00019034 217C 0000 BAEC 0004        		move.l	#Map_obj14,4(a0)
0001903C 317C 0345 0002             		move.w	#$345,2(a0)
00019042 117C 0004 0001             		move.b	#4,1(a0)
00019048 117C 0005 0018             		move.b	#5,$18(a0)
0001904E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019054 117C 0008 0019             		move.b	#8,$19(a0)
0001905A 5428 0024                  		addq.b	#2,$24(a0)
0001905E 4A28 0028                  		tst.b	$28(a0)
00019062 6600                       		bne.s	loc_1870A
00019064 117C 008B 0020             		move.b	#$8B,$20(a0)
0001906A 5428 0024                  		addq.b	#2,$24(a0)
0001906E 6000 0000                  		bra.w	loc_18886
00019072                            ; ===========================================================================
00019072                            
00019072                            loc_1870A:
00019072 117C 001E 0029             		move.b	#$1E,$29(a0)
00019078 303C 00AE                  		move.w	#$AE,d0
0001907C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava sound
00019082                            
00019082                            Obj74_Action:				; XREF: Obj74_Index
00019082 7000                       		moveq	#0,d0
00019084 1028 0025                  		move.b	$25(a0),d0
00019088 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001908C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019090 4EB9 0000 DE42             		jsr	SpeedToPos
00019096 43F9 0000 ED22             		lea	(Ani_obj14).l,a1
0001909C 4EB9 0000 AEEE             		jsr	AnimateSprite
000190A2 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
000190A8 6200                       		bhi.s	Obj74_Delete
000190AA 4E75                       		rts	
000190AC                            ; ===========================================================================
000190AC                            
000190AC                            Obj74_Delete:
000190AC 4EF9 0000 DEA4             		jmp	DeleteObject
000190B2                            ; ===========================================================================
000190B2 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
000190B4 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
000190B6 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
000190B8 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
000190BA                            ; ===========================================================================
000190BA                            
000190BA                            Obj74_Drop:				; XREF: Obj74_Index2
000190BA 08E8 0001 0022             		bset	#1,$22(a0)
000190C0 5328 0029                  		subq.b	#1,$29(a0)
000190C4 6A00                       		bpl.s	locret_18780
000190C6 117C 008B 0020             		move.b	#$8B,$20(a0)
000190CC 4228 0028                  		clr.b	$28(a0)
000190D0 0668 0018 0012             		addi.w	#$18,$12(a0)
000190D6 08A8 0001 0022             		bclr	#1,$22(a0)
000190DC 6100 C6A4                  		bsr.w	ObjHitFloor
000190E0 4A41                       		tst.w	d1
000190E2 6A00                       		bpl.s	locret_18780
000190E4 5428 0025                  		addq.b	#2,$25(a0)
000190E8                            
000190E8                            locret_18780:
000190E8 4E75                       		rts	
000190EA                            ; ===========================================================================
000190EA                            
000190EA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000190EA 5568 000C                  		subq.w	#2,$C(a0)
000190EE 08E8 0007 0002             		bset	#7,2(a0)
000190F4 317C 00A0 0010             		move.w	#$A0,$10(a0)
000190FA 4268 0012                  		clr.w	$12(a0)
000190FE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019104 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001910A 117C 0003 0029             		move.b	#3,$29(a0)
00019110 4EB9 0000 E304             		jsr	SingleObjLoad2
00019116 6600                       		bne.s	loc_187CA
00019118 47D1                       		lea	(a1),a3
0001911A 45D0                       		lea	(a0),a2
0001911C 7003                       		moveq	#3,d0
0001911E                            
0001911E                            Obj74_Loop:
0001911E 26DA                       		move.l	(a2)+,(a3)+
00019120 26DA                       		move.l	(a2)+,(a3)+
00019122 26DA                       		move.l	(a2)+,(a3)+
00019124 26DA                       		move.l	(a2)+,(a3)+
00019126 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001912A                            
0001912A 4469 0010                  		neg.w	$10(a1)
0001912E 5429 0025                  		addq.b	#2,$25(a1)
00019132                            
00019132                            loc_187CA:
00019132 5428 0025                  		addq.b	#2,$25(a0)
00019136 4E75                       		rts	
00019138                            
00019138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019138                            
00019138                            
00019138                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019138 4EB9 0000 E304             		jsr	SingleObjLoad2
0001913E 6600                       		bne.s	locret_187EE
00019140 3368 0008 0008             		move.w	8(a0),8(a1)
00019146 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001914C 12BC 0074                  		move.b	#$74,(a1)
00019150 337C 0067 0028             		move.w	#$67,$28(a1)
00019156                            
00019156                            locret_187EE:
00019156 4E75                       		rts	
00019158                            ; End of function Obj74_Duplicate2
00019158                            
00019158                            ; ===========================================================================
00019158                            
00019158                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019158 6100 C628                  		bsr.w	ObjHitFloor
0001915C 4A41                       		tst.w	d1
0001915E 6A00                       		bpl.s	loc_18826
00019160 3028 0008                  		move.w	8(a0),d0
00019164 0C40 1940                  		cmpi.w	#$1940,d0
00019168 6E00                       		bgt.s	loc_1882C
0001916A 3228 0030                  		move.w	$30(a0),d1
0001916E B240                       		cmp.w	d0,d1
00019170 6700                       		beq.s	loc_1881E
00019172 0240 0010                  		andi.w	#$10,d0
00019176 0241 0010                  		andi.w	#$10,d1
0001917A B240                       		cmp.w	d0,d1
0001917C 6700                       		beq.s	loc_1881E
0001917E 61B8                       		bsr.s	Obj74_Duplicate2
00019180 3168 0008 0032             		move.w	8(a0),$32(a0)
00019186                            
00019186                            loc_1881E:
00019186 3168 0008 0030             		move.w	8(a0),$30(a0)
0001918C 4E75                       		rts	
0001918E                            ; ===========================================================================
0001918E                            
0001918E                            loc_18826:
0001918E 5428 0025                  		addq.b	#2,$25(a0)
00019192 4E75                       		rts	
00019194                            ; ===========================================================================
00019194                            
00019194                            loc_1882C:
00019194 5428 0024                  		addq.b	#2,$24(a0)
00019198 4E75                       		rts	
0001919A                            ; ===========================================================================
0001919A                            
0001919A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001919A 08A8 0001 0022             		bclr	#1,$22(a0)
000191A0 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000191A6 3028 0008                  		move.w	8(a0),d0
000191AA 9068 0032                  		sub.w	$32(a0),d0
000191AE 6A00                       		bpl.s	loc_1884A
000191B0 4440                       		neg.w	d0
000191B2                            
000191B2                            loc_1884A:
000191B2 0C40 0012                  		cmpi.w	#$12,d0
000191B6 6600                       		bne.s	loc_18856
000191B8 08A8 0007 0002             		bclr	#7,2(a0)
000191BE                            
000191BE                            loc_18856:
000191BE 6100 C5C2                  		bsr.w	ObjHitFloor
000191C2 4A41                       		tst.w	d1
000191C4 6A00                       		bpl.s	locret_1887E
000191C6 5328 0029                  		subq.b	#1,$29(a0)
000191CA 6700                       		beq.s	Obj74_Delete2
000191CC 4268 0012                  		clr.w	$12(a0)
000191D0 3168 0032 0008             		move.w	$32(a0),8(a0)
000191D6 3168 0038 000C             		move.w	$38(a0),$C(a0)
000191DC 08E8 0007 0002             		bset	#7,2(a0)
000191E2 5528 0025                  		subq.b	#2,$25(a0)
000191E6                            
000191E6                            locret_1887E:
000191E6 4E75                       		rts	
000191E8                            ; ===========================================================================
000191E8                            
000191E8                            Obj74_Delete2:
000191E8 4EF9 0000 DEA4             		jmp	DeleteObject
000191EE                            ; ===========================================================================
000191EE                            
000191EE                            loc_18886:				; XREF: Obj74_Index
000191EE 08E8 0007 0002             		bset	#7,2(a0)
000191F4 5328 0029                  		subq.b	#1,$29(a0)
000191F8 6600                       		bne.s	Obj74_Animate
000191FA 117C 0001 001C             		move.b	#1,$1C(a0)
00019200 5968 000C                  		subq.w	#4,$C(a0)
00019204 4228 0020                  		clr.b	$20(a0)
00019208                            
00019208                            Obj74_Animate:
00019208 43F9 0000 ED22             		lea	(Ani_obj14).l,a1
0001920E 4EF9 0000 AEEE             		jmp	AnimateSprite
00019214                            ; ===========================================================================
00019214                            
00019214                            Obj74_Delete3:				; XREF: Obj74_Index
00019214 4EF9 0000 DEA4             		jmp	DeleteObject
0001921A                            ; ===========================================================================
0001921A                            
0001921A                            Obj7A_Delete:
0001921A 4EF9 0000 DEA4             		jmp	DeleteObject
00019220                            ; ===========================================================================
00019220                            ; ---------------------------------------------------------------------------
00019220                            ; Object 7A - Eggman (SLZ)
00019220                            ; ---------------------------------------------------------------------------
00019220                            
00019220                            Obj7A:					; XREF: Obj_Index
00019220 7000                       		moveq	#0,d0
00019222 1028 0024                  		move.b	$24(a0),d0
00019226 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001922A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001922E                            ; ===========================================================================
0001922E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019230 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019232 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019234 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019236 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019238                            
00019238 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001923B 0401 04                    		dc.b 4,	1, 4
0001923E 0607 04                    		dc.b 6,	7, 4
00019241 0800 03                    		dc.b 8,	0, 3
00019244                            ; ===========================================================================
00019244                            
00019244                            Obj7A_Main:				; XREF: Obj7A_Index
00019244 317C 2188 0008             		move.w	#$2188,8(a0)
0001924A 317C 0228 000C             		move.w	#$228,$C(a0)
00019250 3168 0008 0030             		move.w	8(a0),$30(a0)
00019256 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001925C 117C 000F 0020             		move.b	#$F,$20(a0)
00019262 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019268 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001926C 2248                       		movea.l	a0,a1
0001926E 7203                       		moveq	#3,d1
00019270 6000                       		bra.s	Obj7A_LoadBoss
00019272                            ; ===========================================================================
00019272                            
00019272                            Obj7A_Loop:
00019272 4EB9 0000 E304             		jsr	SingleObjLoad2
00019278 6600                       		bne.s	loc_1895C
0001927A 12BC 007A                  		move.b	#$7A,0(a1)
0001927E 3368 0008 0008             		move.w	8(a0),8(a1)
00019284 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001928A                            
0001928A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001928A 08A8 0000 0022             		bclr	#0,$22(a0)
00019290 4229 0025                  		clr.b	$25(a1)
00019294 135A 0024                  		move.b	(a2)+,$24(a1)
00019298 135A 001C                  		move.b	(a2)+,$1C(a1)
0001929C 135A 0018                  		move.b	(a2)+,$18(a1)
000192A0 237C 0001 86DA 0004        		move.l	#Map_Eggman,4(a1)
000192A8 337C 0400 0002             		move.w	#$400,2(a1)
000192AE 137C 0004 0001             		move.b	#4,1(a1)
000192B4 137C 0020 0019             		move.b	#$20,$19(a1)
000192BA 2348 0034                  		move.l	a0,$34(a1)
000192BE 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000192C2                            
000192C2                            loc_1895C:
000192C2 43F8 D040                  		lea	($FFFFD040).w,a1
000192C6 45E8 002A                  		lea	$2A(a0),a2
000192CA 705E                       		moveq	#$5E,d0
000192CC 723E                       		moveq	#$3E,d1
000192CE                            
000192CE                            loc_18968:
000192CE B011                       		cmp.b	(a1),d0
000192D0 6600                       		bne.s	loc_18974
000192D2 4A29 0028                  		tst.b	$28(a1)
000192D6 6700                       		beq.s	loc_18974
000192D8 34C9                       		move.w	a1,(a2)+
000192DA                            
000192DA                            loc_18974:
000192DA D2FC 0040                  		adda.w	#$40,a1
000192DE 51C9 FFEE                  		dbf	d1,loc_18968
000192E2                            
000192E2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000192E2 7000                       		moveq	#0,d0
000192E4 1028 0025                  		move.b	$25(a0),d0
000192E8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000192EC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000192F0 43F9 0001 8676             		lea	(Ani_Eggman).l,a1
000192F6 4EB9 0000 AEEE             		jsr	AnimateSprite
000192FC 7003                       		moveq	#3,d0
000192FE C028 0022                  		and.b	$22(a0),d0
00019302 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019308 8128 0001                  		or.b	d0,1(a0)
0001930C 4EF9 0000 DE68             		jmp	DisplaySprite
00019312                            ; ===========================================================================
00019312 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019314 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019316 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019318 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001931A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001931C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001931E                            ; ===========================================================================
0001931E                            
0001931E                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001931E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019324 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001932A 6400                       		bcc.s	loc_189CA
0001932C 5428 0025                  		addq.b	#2,$25(a0)
00019330                            
00019330                            loc_189CA:
00019330 6100 EF02                  		bsr.w	BossMove
00019334 1028 003F                  		move.b	$3F(a0),d0
00019338 5428 003F                  		addq.b	#2,$3F(a0)
0001933C 4EB9 0000 2D02             		jsr	(CalcSine).l
00019342 EC40                       		asr.w	#6,d0
00019344 D068 0038                  		add.w	$38(a0),d0
00019348 3140 000C                  		move.w	d0,$C(a0)
0001934C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019352 6000                       		bra.s	loc_189FE
00019354                            ; ===========================================================================
00019354                            
00019354                            loc_189EE:
00019354 6100 EEDE                  		bsr.w	BossMove
00019358 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001935E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019364                            
00019364                            loc_189FE:
00019364 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001936A 6400                       		bcc.s	locret_18A44
0001936C 4A28 0022                  		tst.b	$22(a0)
00019370 6B00                       		bmi.s	loc_18A46
00019372 4A28 0020                  		tst.b	$20(a0)
00019376 6600                       		bne.s	locret_18A44
00019378 4A28 003E                  		tst.b	$3E(a0)
0001937C 6600                       		bne.s	loc_18A28
0001937E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019384 303C 00AC                  		move.w	#$AC,d0
00019388 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001938E                            
0001938E                            loc_18A28:
0001938E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019392 7000                       		moveq	#0,d0
00019394 4A51                       		tst.w	(a1)
00019396 6600                       		bne.s	loc_18A36
00019398 303C 0EEE                  		move.w	#$EEE,d0
0001939C                            
0001939C                            loc_18A36:
0001939C 3280                       		move.w	d0,(a1)
0001939E 5328 003E                  		subq.b	#1,$3E(a0)
000193A2 6600                       		bne.s	locret_18A44
000193A4 117C 000F 0020             		move.b	#$F,$20(a0)
000193AA                            
000193AA                            locret_18A44:
000193AA 4E75                       		rts	
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            loc_18A46:
000193AC 7064                       		moveq	#100,d0
000193AE 6100 0000                  		bsr.w	AddPoints
000193B2 117C 0006 0025             		move.b	#6,$25(a0)
000193B8 117C 0078 003C             		move.b	#$78,$3C(a0)
000193BE 4268 0010                  		clr.w	$10(a0)
000193C2 4E75                       		rts	
000193C4                            ; ===========================================================================
000193C4                            
000193C4                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000193C4 3028 0030                  		move.w	$30(a0),d0
000193C8 317C 0200 0010             		move.w	#$200,$10(a0)
000193CE 0828 0000 0022             		btst	#0,$22(a0)
000193D4 6600                       		bne.s	loc_18A7C
000193D6 4468 0010                  		neg.w	$10(a0)
000193DA 0C40 2008                  		cmpi.w	#$2008,d0
000193DE 6E00                       		bgt.s	loc_18A88
000193E0 6000                       		bra.s	loc_18A82
000193E2                            ; ===========================================================================
000193E2                            
000193E2                            loc_18A7C:
000193E2 0C40 2138                  		cmpi.w	#$2138,d0
000193E6 6D00                       		blt.s	loc_18A88
000193E8                            
000193E8                            loc_18A82:
000193E8 0868 0000 0022             		bchg	#0,$22(a0)
000193EE                            
000193EE                            loc_18A88:
000193EE 3028 0008                  		move.w	8(a0),d0
000193F2 72FF                       		moveq	#-1,d1
000193F4 7402                       		moveq	#2,d2
000193F6 45E8 002A                  		lea	$2A(a0),a2
000193FA 7828                       		moveq	#$28,d4
000193FC 4A68 0010                  		tst.w	$10(a0)
00019400 6A00                       		bpl.s	loc_18A9E
00019402 4444                       		neg.w	d4
00019404                            
00019404                            loc_18A9E:
00019404 321A                       		move.w	(a2)+,d1
00019406 2641                       		movea.l	d1,a3
00019408 082B 0003 0022             		btst	#3,$22(a3)
0001940E 6600                       		bne.s	loc_18AB4
00019410 362B 0008                  		move.w	8(a3),d3
00019414 D644                       		add.w	d4,d3
00019416 9640                       		sub.w	d0,d3
00019418 6700                       		beq.s	loc_18AC0
0001941A                            
0001941A                            loc_18AB4:
0001941A 51CA FFE8                  		dbf	d2,loc_18A9E
0001941E                            
0001941E 1142 0028                  		move.b	d2,$28(a0)
00019422 6000 FF0C                  		bra.w	loc_189CA
00019426                            ; ===========================================================================
00019426                            
00019426                            loc_18AC0:
00019426 1142 0028                  		move.b	d2,$28(a0)
0001942A 5428 0025                  		addq.b	#2,$25(a0)
0001942E 117C 0028 003C             		move.b	#$28,$3C(a0)
00019434 6000 FEFA                  		bra.w	loc_189CA
00019438                            ; ===========================================================================
00019438                            
00019438                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019438 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001943E 6600                       		bne.s	loc_18B36
00019440 70FF                       		moveq	#-1,d0
00019442 1028 0028                  		move.b	$28(a0),d0
00019446 4880                       		ext.w	d0
00019448 6B00                       		bmi.s	loc_18B40
0001944A 5540                       		subq.w	#2,d0
0001944C 4440                       		neg.w	d0
0001944E D040                       		add.w	d0,d0
00019450 43E8 002A                  		lea	$2A(a0),a1
00019454 3031 0000                  		move.w	(a1,d0.w),d0
00019458 2440                       		movea.l	d0,a2
0001945A 43F8 D040                  		lea	($FFFFD040).w,a1
0001945E 723E                       		moveq	#$3E,d1
00019460                            
00019460                            loc_18AFA:
00019460 B0A9 003C                  		cmp.l	$3C(a1),d0
00019464 6700                       		beq.s	loc_18B40
00019466 D2FC 0040                  		adda.w	#$40,a1
0001946A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001946E                            
0001946E 2F08                       		move.l	a0,-(sp)
00019470 41D2                       		lea	(a2),a0
00019472 4EB9 0000 E304             		jsr	SingleObjLoad2
00019478 205F                       		movea.l	(sp)+,a0
0001947A 6600                       		bne.s	loc_18B40
0001947C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019480 3368 0008 0008             		move.w	8(a0),8(a1)
00019486 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001948C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019492 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019498 234A 003C                  		move.l	a2,$3C(a1)
0001949C                            
0001949C                            loc_18B36:
0001949C 5328 003C                  		subq.b	#1,$3C(a0)
000194A0 6700                       		beq.s	loc_18B40
000194A2 6000 FEC0                  		bra.w	loc_189FE
000194A6                            ; ===========================================================================
000194A6                            
000194A6                            loc_18B40:
000194A6 5528 0025                  		subq.b	#2,$25(a0)
000194AA 6000 FE84                  		bra.w	loc_189CA
000194AE                            ; ===========================================================================
000194AE                            
000194AE                            loc_18B48:				; XREF: Obj7A_ShipIndex
000194AE 5328 003C                  		subq.b	#1,$3C(a0)
000194B2 6B00                       		bmi.s	loc_18B52
000194B4 6000 ED3C                  		bra.w	BossDefeated
000194B8                            ; ===========================================================================
000194B8                            
000194B8                            loc_18B52:
000194B8 5428 0025                  		addq.b	#2,$25(a0)
000194BC 4268 0012                  		clr.w	$12(a0)
000194C0 08E8 0000 0022             		bset	#0,$22(a0)
000194C6 08A8 0007 0022             		bclr	#7,$22(a0)
000194CC 4268 0010                  		clr.w	$10(a0)
000194D0 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000194D6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000194DA 6600                       		bne.s	loc_18B7C
000194DC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000194E2                            
000194E2                            loc_18B7C:
000194E2 6000 FE80                  		bra.w	loc_189FE
000194E6                            ; ===========================================================================
000194E6                            
000194E6                            loc_18B80:				; XREF: Obj7A_ShipIndex
000194E6 5228 003C                  		addq.b	#1,$3C(a0)
000194EA 6700                       		beq.s	loc_18B90
000194EC 6A00                       		bpl.s	loc_18B96
000194EE 0668 0018 0012             		addi.w	#$18,$12(a0)
000194F4 6000                       		bra.s	loc_18BC2
000194F6                            ; ===========================================================================
000194F6                            
000194F6                            loc_18B90:
000194F6 4268 0012                  		clr.w	$12(a0)
000194FA 6000                       		bra.s	loc_18BC2
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loc_18B96:
000194FC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019502 6500                       		bcs.s	loc_18BAE
00019504 6700                       		beq.s	loc_18BB4
00019506 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001950C 6500                       		bcs.s	loc_18BC2
0001950E 5428 0025                  		addq.b	#2,$25(a0)
00019512 6000                       		bra.s	loc_18BC2
00019514                            ; ===========================================================================
00019514                            
00019514                            loc_18BAE:
00019514 5168 0012                  		subq.w	#8,$12(a0)
00019518 6000                       		bra.s	loc_18BC2
0001951A                            ; ===========================================================================
0001951A                            
0001951A                            loc_18BB4:
0001951A 4268 0012                  		clr.w	$12(a0)
0001951E 303C 0084                  		move.w	#$84,d0
00019522 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SLZ music
00019528                            
00019528                            loc_18BC2:
00019528 6000 FE2A                  		bra.w	loc_189EE
0001952C                            ; ===========================================================================
0001952C                            
0001952C                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001952C 317C 0400 0010             		move.w	#$400,$10(a0)
00019532 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019538 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001953E 6400                       		bcc.s	loc_18BE0
00019540 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019544 6000                       		bra.s	loc_18BE8
00019546                            ; ===========================================================================
00019546                            
00019546                            loc_18BE0:
00019546 4A28 0001                  		tst.b	1(a0)
0001954A 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001954E                            
0001954E                            loc_18BE8:
0001954E 6100 ECE4                  		bsr.w	BossMove
00019552 6000 FDDC                  		bra.w	loc_189CA
00019556                            ; ===========================================================================
00019556                            
00019556                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019556 7000                       		moveq	#0,d0
00019558 7201                       		moveq	#1,d1
0001955A 2268 0034                  		movea.l	$34(a0),a1
0001955E 1029 0025                  		move.b	$25(a1),d0
00019562 0C00 0006                  		cmpi.b	#6,d0
00019566 6B00                       		bmi.s	loc_18C06
00019568 720A                       		moveq	#$A,d1
0001956A 6000                       		bra.s	loc_18C1A
0001956C                            ; ===========================================================================
0001956C                            
0001956C                            loc_18C06:
0001956C 4A29 0020                  		tst.b	$20(a1)
00019570 6600                       		bne.s	loc_18C10
00019572 7205                       		moveq	#5,d1
00019574 6000                       		bra.s	loc_18C1A
00019576                            ; ===========================================================================
00019576                            
00019576                            loc_18C10:
00019576 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001957C 6500                       		bcs.s	loc_18C1A
0001957E 7204                       		moveq	#4,d1
00019580                            
00019580                            loc_18C1A:
00019580 1141 001C                  		move.b	d1,$1C(a0)
00019584 0C00 000A                  		cmpi.b	#$A,d0
00019588 6600                       		bne.s	loc_18C32
0001958A 117C 0006 001C             		move.b	#6,$1C(a0)
00019590 4A28 0001                  		tst.b	1(a0)
00019594 6A00 FC84                  		bpl.w	Obj7A_Delete
00019598                            
00019598                            loc_18C32:
00019598 6000                       		bra.s	loc_18C6C
0001959A                            ; ===========================================================================
0001959A                            
0001959A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001959A 117C 0008 001C             		move.b	#8,$1C(a0)
000195A0 2268 0034                  		movea.l	$34(a0),a1
000195A4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000195AA 6600                       		bne.s	loc_18C56
000195AC 4A28 0001                  		tst.b	1(a0)
000195B0 6A00 FC68                  		bpl.w	Obj7A_Delete
000195B4 117C 000B 001C             		move.b	#$B,$1C(a0)
000195BA 6000                       		bra.s	loc_18C6C
000195BC                            ; ===========================================================================
000195BC                            
000195BC                            loc_18C56:
000195BC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000195C2 6E00                       		bgt.s	loc_18C6C
000195C4 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000195CA 6D00                       		blt.s	loc_18C6C
000195CC 117C 0007 001C             		move.b	#7,$1C(a0)
000195D2                            
000195D2                            loc_18C6C:
000195D2 43F9 0001 8676             		lea	(Ani_Eggman).l,a1
000195D8 4EB9 0000 AEEE             		jsr	AnimateSprite
000195DE                            
000195DE                            loc_18C78:
000195DE 2268 0034                  		movea.l	$34(a0),a1
000195E2 3169 0008 0008             		move.w	8(a1),8(a0)
000195E8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000195EE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000195F4 7003                       		moveq	#3,d0
000195F6 C028 0022                  		and.b	$22(a0),d0
000195FA 0228 00FC 0001             		andi.b	#-4,1(a0)
00019600 8128 0001                  		or.b	d0,1(a0)
00019604 4EF9 0000 DE68             		jmp	DisplaySprite
0001960A                            ; ===========================================================================
0001960A                            
0001960A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001960A 2268 0034                  		movea.l	$34(a0),a1
0001960E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019614 6600                       		bne.s	loc_18CB8
00019616 4A28 0001                  		tst.b	1(a0)
0001961A 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001961E                            
0001961E                            loc_18CB8:
0001961E 217C 0001 87A2 0004        		move.l	#Map_BossItems,4(a0)
00019626 317C 246C 0002             		move.w	#$246C,2(a0)
0001962C 117C 0003 001A             		move.b	#3,$1A(a0)
00019632 60AA                       		bra.s	loc_18C78
00019634                            ; ===========================================================================
00019634                            ; ---------------------------------------------------------------------------
00019634                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019634                            ; ---------------------------------------------------------------------------
00019634                            
00019634                            Obj7B:					; XREF: Obj_Index
00019634 7000                       		moveq	#0,d0
00019636 1028 0024                  		move.b	$24(a0),d0
0001963A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001963E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019642 3028 0030                  		move.w	$30(a0),d0
00019646 0240 FF80                  		andi.w	#$FF80,d0
0001964A 3238 F700                  		move.w	($FFFFF700).w,d1
0001964E 0441 0080                  		subi.w	#$80,d1
00019652 0241 FF80                  		andi.w	#$FF80,d1
00019656 9041                       		sub.w	d1,d0
00019658 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001965C 0C40 0280                  		cmpi.w	#$280,d0
00019660 6200 FBB8                  		bhi.w	Obj7A_Delete
00019664 4EF9 0000 DE68             		jmp	DisplaySprite
0001966A                            ; ===========================================================================
0001966A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001966C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001966E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019670 0000                       		dc.w loc_18EAA-Obj7B_Index
00019672 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019674 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019676                            ; ===========================================================================
00019676                            
00019676                            Obj7B_Main:				; XREF: Obj7B_Index
00019676 217C 0001 222E 0004        		move.l	#Map_obj5Ea,4(a0)
0001967E 317C 0518 0002             		move.w	#$518,2(a0)
00019684 117C 0001 001A             		move.b	#1,$1A(a0)
0001968A 0028 0004 0001             		ori.b	#4,1(a0)
00019690 117C 0004 0018             		move.b	#4,$18(a0)
00019696 117C 008B 0020             		move.b	#$8B,$20(a0)
0001969C 117C 000C 0019             		move.b	#$C,$19(a0)
000196A2 2268 003C                  		movea.l	$3C(a0),a1
000196A6 3169 0008 0030             		move.w	8(a1),$30(a0)
000196AC 3169 000C 0034             		move.w	$C(a1),$34(a0)
000196B2 08E8 0000 0022             		bset	#0,$22(a0)
000196B8 3028 0008                  		move.w	8(a0),d0
000196BC B069 0008                  		cmp.w	8(a1),d0
000196C0 6E00                       		bgt.s	loc_18D68
000196C2 08A8 0000 0022             		bclr	#0,$22(a0)
000196C8 117C 0002 003A             		move.b	#2,$3A(a0)
000196CE                            
000196CE                            loc_18D68:
000196CE 5428 0024                  		addq.b	#2,$24(a0)
000196D2                            
000196D2                            Obj7B_Fall:				; XREF: Obj7B_Index
000196D2 4EB9 0000 DDD0             		jsr	ObjectFall
000196D8 2268 003C                  		movea.l	$3C(a0),a1
000196DC 45F9 0000 0000             		lea	(word_19018).l,a2
000196E2 7000                       		moveq	#0,d0
000196E4 1029 001A                  		move.b	$1A(a1),d0
000196E8 3228 0008                  		move.w	8(a0),d1
000196EC 9268 0030                  		sub.w	$30(a0),d1
000196F0 6400                       		bcc.s	loc_18D8E
000196F2 5440                       		addq.w	#2,d0
000196F4                            
000196F4                            loc_18D8E:
000196F4 D040                       		add.w	d0,d0
000196F6 3228 0034                  		move.w	$34(a0),d1
000196FA D272 0000                  		add.w	(a2,d0.w),d1
000196FE B268 000C                  		cmp.w	$C(a0),d1
00019702 6E00                       		bgt.s	locret_18DC4
00019704 2268 003C                  		movea.l	$3C(a0),a1
00019708 7202                       		moveq	#2,d1
0001970A 0828 0000 0022             		btst	#0,$22(a0)
00019710 6700                       		beq.s	loc_18DAE
00019712 7200                       		moveq	#0,d1
00019714                            
00019714                            loc_18DAE:
00019714 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001971A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019720 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019726 6000 0000                  		bra.w	loc_18FA2
0001972A                            ; ===========================================================================
0001972A                            
0001972A                            locret_18DC4:
0001972A 4E75                       		rts	
0001972C                            ; ===========================================================================
0001972C                            
0001972C                            loc_18DC6:				; XREF: Obj7B_Index
0001972C 2268 003C                  		movea.l	$3C(a0),a1
00019730 7000                       		moveq	#0,d0
00019732 1028 003A                  		move.b	$3A(a0),d0
00019736 9029 003A                  		sub.b	$3A(a1),d0
0001973A 6700                       		beq.s	loc_18E2A
0001973C 6400                       		bcc.s	loc_18DDA
0001973E 4400                       		neg.b	d0
00019740                            
00019740                            loc_18DDA:
00019740 323C F7E8                  		move.w	#-$818,d1
00019744 343C FEEC                  		move.w	#-$114,d2
00019748 0C00 0001                  		cmpi.b	#1,d0
0001974C 6700                       		beq.s	loc_18E00
0001974E 323C F6A0                  		move.w	#-$960,d1
00019752 343C FF0C                  		move.w	#-$F4,d2
00019756 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001975C 6D00                       		blt.s	loc_18E00
0001975E 323C F5E0                  		move.w	#-$A20,d1
00019762 343C FF80                  		move.w	#-$80,d2
00019766                            
00019766                            loc_18E00:
00019766 3141 0012                  		move.w	d1,$12(a0)
0001976A 3142 0010                  		move.w	d2,$10(a0)
0001976E 3028 0008                  		move.w	8(a0),d0
00019772 9068 0030                  		sub.w	$30(a0),d0
00019776 6400                       		bcc.s	loc_18E16
00019778 4468 0010                  		neg.w	$10(a0)
0001977C                            
0001977C                            loc_18E16:
0001977C 117C 0001 001A             		move.b	#1,$1A(a0)
00019782 317C 0020 0028             		move.w	#$20,$28(a0)
00019788 5428 0024                  		addq.b	#2,$24(a0)
0001978C 6000 0000                  		bra.w	loc_18EAA
00019790                            ; ===========================================================================
00019790                            
00019790                            loc_18E2A:				; XREF: loc_18DC6
00019790 45F9 0000 0000             		lea	(word_19018).l,a2
00019796 7000                       		moveq	#0,d0
00019798 1029 001A                  		move.b	$1A(a1),d0
0001979C 343C 0028                  		move.w	#$28,d2
000197A0 3228 0008                  		move.w	8(a0),d1
000197A4 9268 0030                  		sub.w	$30(a0),d1
000197A8 6400                       		bcc.s	loc_18E48
000197AA 4442                       		neg.w	d2
000197AC 5440                       		addq.w	#2,d0
000197AE                            
000197AE                            loc_18E48:
000197AE D040                       		add.w	d0,d0
000197B0 3228 0034                  		move.w	$34(a0),d1
000197B4 D272 0000                  		add.w	(a2,d0.w),d1
000197B8 3141 000C                  		move.w	d1,$C(a0)
000197BC D468 0030                  		add.w	$30(a0),d2
000197C0 3142 0008                  		move.w	d2,8(a0)
000197C4 4268 000E                  		clr.w	$E(a0)
000197C8 4268 000A                  		clr.w	$A(a0)
000197CC 5368 0028                  		subq.w	#1,$28(a0)
000197D0 6600                       		bne.s	loc_18E7A
000197D2 317C 0020 0028             		move.w	#$20,$28(a0)
000197D8 117C 0008 0024             		move.b	#8,$24(a0)
000197DE 4E75                       		rts	
000197E0                            ; ===========================================================================
000197E0                            
000197E0                            loc_18E7A:
000197E0 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000197E6 6600                       		bne.s	loc_18E88
000197E8 117C 0005 001F             		move.b	#5,$1F(a0)
000197EE                            
000197EE                            loc_18E88:
000197EE 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000197F4 6600                       		bne.s	loc_18E96
000197F6 117C 0002 001F             		move.b	#2,$1F(a0)
000197FC                            
000197FC                            loc_18E96:
000197FC 5328 001E                  		subq.b	#1,$1E(a0)
00019800 6E00                       		bgt.s	locret_18EA8
00019802 0868 0000 001A             		bchg	#0,$1A(a0)
00019808 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001980E                            
0001980E                            locret_18EA8:
0001980E 4E75                       		rts	
00019810                            ; ===========================================================================
00019810                            
00019810                            loc_18EAA:				; XREF: Obj7B_Index
00019810 43F8 D040                  		lea	($FFFFD040).w,a1
00019814 707A                       		moveq	#$7A,d0
00019816 7240                       		moveq	#$40,d1
00019818 743E                       		moveq	#$3E,d2
0001981A                            
0001981A                            loc_18EB4:
0001981A B011                       		cmp.b	(a1),d0
0001981C 6700                       		beq.s	loc_18EC0
0001981E D2C1                       		adda.w	d1,a1
00019820 51CA FFF8                  		dbf	d2,loc_18EB4
00019824                            
00019824 6000                       		bra.s	loc_18F38
00019826                            ; ===========================================================================
00019826                            
00019826                            loc_18EC0:
00019826 3029 0008                  		move.w	8(a1),d0
0001982A 3229 000C                  		move.w	$C(a1),d1
0001982E 3428 0008                  		move.w	8(a0),d2
00019832 3628 000C                  		move.w	$C(a0),d3
00019836 45FA 0000                  		lea	byte_19022(pc),a2
0001983A 47FA 0000                  		lea	byte_19026(pc),a3
0001983E 181A                       		move.b	(a2)+,d4
00019840 4884                       		ext.w	d4
00019842 D044                       		add.w	d4,d0
00019844 181B                       		move.b	(a3)+,d4
00019846 4884                       		ext.w	d4
00019848 D444                       		add.w	d4,d2
0001984A B440                       		cmp.w	d0,d2
0001984C 6500                       		bcs.s	loc_18F38
0001984E 181A                       		move.b	(a2)+,d4
00019850 4884                       		ext.w	d4
00019852 D044                       		add.w	d4,d0
00019854 181B                       		move.b	(a3)+,d4
00019856 4884                       		ext.w	d4
00019858 D444                       		add.w	d4,d2
0001985A B042                       		cmp.w	d2,d0
0001985C 6500                       		bcs.s	loc_18F38
0001985E 181A                       		move.b	(a2)+,d4
00019860 4884                       		ext.w	d4
00019862 D244                       		add.w	d4,d1
00019864 181B                       		move.b	(a3)+,d4
00019866 4884                       		ext.w	d4
00019868 D644                       		add.w	d4,d3
0001986A B641                       		cmp.w	d1,d3
0001986C 6500                       		bcs.s	loc_18F38
0001986E 181A                       		move.b	(a2)+,d4
00019870 4884                       		ext.w	d4
00019872 D244                       		add.w	d4,d1
00019874 181B                       		move.b	(a3)+,d4
00019876 4884                       		ext.w	d4
00019878 D644                       		add.w	d4,d3
0001987A B243                       		cmp.w	d3,d1
0001987C 6500                       		bcs.s	loc_18F38
0001987E 5428 0024                  		addq.b	#2,$24(a0)
00019882 4268 0028                  		clr.w	$28(a0)
00019886 4229 0020                  		clr.b	$20(a1)
0001988A 5329 0021                  		subq.b	#1,$21(a1)
0001988E 6600                       		bne.s	loc_18F38
00019890 08E9 0007 0022             		bset	#7,$22(a1)
00019896 4268 0010                  		clr.w	$10(a0)
0001989A 4268 0012                  		clr.w	$12(a0)
0001989E                            
0001989E                            loc_18F38:
0001989E 4A68 0012                  		tst.w	$12(a0)
000198A2 6A00                       		bpl.s	loc_18F5C
000198A4 4EB9 0000 DDD0             		jsr	ObjectFall
000198AA 3028 0034                  		move.w	$34(a0),d0
000198AE 0440 002F                  		subi.w	#$2F,d0
000198B2 B068 000C                  		cmp.w	$C(a0),d0
000198B6 6E00                       		bgt.s	loc_18F58
000198B8 4EB9 0000 DDD0             		jsr	ObjectFall
000198BE                            
000198BE                            loc_18F58:
000198BE 6000 FF20                  		bra.w	loc_18E7A
000198C2                            ; ===========================================================================
000198C2                            
000198C2                            loc_18F5C:
000198C2 4EB9 0000 DDD0             		jsr	ObjectFall
000198C8 2268 003C                  		movea.l	$3C(a0),a1
000198CC 45F9 0000 0000             		lea	(word_19018).l,a2
000198D2 7000                       		moveq	#0,d0
000198D4 1029 001A                  		move.b	$1A(a1),d0
000198D8 3228 0008                  		move.w	8(a0),d1
000198DC 9268 0030                  		sub.w	$30(a0),d1
000198E0 6400                       		bcc.s	loc_18F7E
000198E2 5440                       		addq.w	#2,d0
000198E4                            
000198E4                            loc_18F7E:
000198E4 D040                       		add.w	d0,d0
000198E6 3228 0034                  		move.w	$34(a0),d1
000198EA D272 0000                  		add.w	(a2,d0.w),d1
000198EE B268 000C                  		cmp.w	$C(a0),d1
000198F2 6ECA                       		bgt.s	loc_18F58
000198F4 2268 003C                  		movea.l	$3C(a0),a1
000198F8 7202                       		moveq	#2,d1
000198FA 4A68 0010                  		tst.w	$10(a0)
000198FE 6B00                       		bmi.s	loc_18F9C
00019900 7200                       		moveq	#0,d1
00019902                            
00019902                            loc_18F9C:
00019902 317C 0000 0028             		move.w	#0,$28(a0)
00019908                            
00019908                            loc_18FA2:
00019908 1341 003A                  		move.b	d1,$3A(a1)
0001990C 1141 003A                  		move.b	d1,$3A(a0)
00019910 B229 001A                  		cmp.b	$1A(a1),d1
00019914 6700                       		beq.s	loc_19008
00019916 08A9 0003 0022             		bclr	#3,$22(a1)
0001991C 6700                       		beq.s	loc_19008
0001991E 4229 0025                  		clr.b	$25(a1)
00019922 137C 0002 0024             		move.b	#2,$24(a1)
00019928 45F8 D000                  		lea	($FFFFD000).w,a2
0001992C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019932 446A 0012                  		neg.w	$12(a2)
00019936 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001993C 6600                       		bne.s	loc_18FDC
0001993E E0EA 0012                  		asr	$12(a2)
00019942                            
00019942                            loc_18FDC:
00019942 08EA 0001 0022             		bset	#1,$22(a2)
00019948 08AA 0003 0022             		bclr	#3,$22(a2)
0001994E 422A 003C                  		clr.b	$3C(a2)
00019952 2F08                       		move.l	a0,-(sp)
00019954 41D2                       		lea	(a2),a0
00019956 4EBA A35C                  		jsr	Obj01_ChkRoll
0001995A 205F                       		movea.l	(sp)+,a0
0001995C 157C 0002 0024             		move.b	#2,$24(a2)
00019962 303C 00CC                  		move.w	#$CC,d0
00019966 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001996C                            
0001996C                            loc_19008:
0001996C 4268 0010                  		clr.w	$10(a0)
00019970 4268 0012                  		clr.w	$12(a0)
00019974 5428 0024                  		addq.b	#2,$24(a0)
00019978 6000 FE66                  		bra.w	loc_18E7A
0001997C                            ; ===========================================================================
0001997C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019986                            		even
00019986 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001998A                            		even
0001998A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001998E                            		even
0001998E                            ; ===========================================================================
0001998E                            
0001998E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001998E 10BC 003F                  		move.b	#$3F,(a0)
00019992 4228 0024                  		clr.b	$24(a0)
00019996 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001999C 6700                       		beq.s	Obj7B_MakeFrag
0001999E 4E75                       		rts	
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            Obj7B_MakeFrag:
000199A0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000199A6 7203                       		moveq	#3,d1
000199A8 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
000199AC                            
000199AC                            Obj7B_Loop:
000199AC 4EB9 0000 E2EE             		jsr	SingleObjLoad
000199B2 6600                       		bne.s	loc_1909A
000199B4 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000199B8 137C 000A 0024             		move.b	#$A,$24(a1)
000199BE 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000199C6 137C 0003 0018             		move.b	#3,$18(a1)
000199CC 337C 0518 0002             		move.w	#$518,2(a1)
000199D2 3368 0008 0008             		move.w	8(a0),8(a1)
000199D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000199DE 335A 0010                  		move.w	(a2)+,$10(a1)
000199E2 335A 0012                  		move.w	(a2)+,$12(a1)
000199E6 137C 0098 0020             		move.b	#$98,$20(a1)
000199EC 0029 0004 0001             		ori.b	#4,1(a1)
000199F2 08E9 0007 0001             		bset	#7,1(a1)
000199F8 137C 000C 0019             		move.b	#$C,$19(a1)
000199FE                            
000199FE                            loc_1909A:
000199FE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019A02                            
00019A02 4E75                       		rts	
00019A04                            ; ===========================================================================
00019A04 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019A08 FF60 FDC0                  		dc.w $FF60, $FDC0
00019A0C 0100 FCC0                  		dc.w $100, $FCC0
00019A10 00A0 FDC0                  		dc.w $A0, $FDC0
00019A14                            ; ===========================================================================
00019A14                            
00019A14                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019A14 4EB9 0000 DE42             		jsr	SpeedToPos
00019A1A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A20 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019A26 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A2C 7004                       		moveq	#4,d0
00019A2E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019A32 E448                       		lsr.w	#2,d0
00019A34 1140 001A                  		move.b	d0,$1A(a0)
00019A38 4A28 0001                  		tst.b	1(a0)
00019A3C 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019A40 4E75                       		rts	
00019A42                            ; ===========================================================================
00019A42                            ; ---------------------------------------------------------------------------
00019A42                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019A42                            ; ---------------------------------------------------------------------------
00019A42                            Map_obj7B:
00019A42                            	include "_maps\obj7B.asm"
00019A42                            ; ---------------------------------------------------------------------------
00019A42                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019A42                            ; ---------------------------------------------------------------------------
00019A42 0000                       		dc.w byte_190E2-Map_obj7B
00019A44 0000                       		dc.w byte_190E8-Map_obj7B
00019A46 01                         byte_190E2:	dc.b 1
00019A47 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019A4C 01                         byte_190E8:	dc.b 1
00019A4D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019A52                            		even
00019A52                            		even
00019A52                            
00019A52                            ; ===========================================================================
00019A52                            ; ---------------------------------------------------------------------------
00019A52                            ; Object 75 - Eggman (SYZ)
00019A52                            ; ---------------------------------------------------------------------------
00019A52                            
00019A52                            Obj75:					; XREF: Obj_Index
00019A52 7000                       		moveq	#0,d0
00019A54 1028 0024                  		move.b	$24(a0),d0
00019A58 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019A5C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019A60                            ; ===========================================================================
00019A60 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019A62 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019A64 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019A66 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019A68 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019A6A                            
00019A6A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019A6D 0401 05                    		dc.b 4,	1, 5
00019A70 0607 05                    		dc.b 6,	7, 5
00019A73 0800 05                    		dc.b 8,	0, 5
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            Obj75_Main:				; XREF: Obj75_Index
00019A76 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019A7C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019A82 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A88 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A8E 117C 000F 0020             		move.b	#$F,$20(a0)
00019A94 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019A9A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019A9E 2248                       		movea.l	a0,a1
00019AA0 7203                       		moveq	#3,d1
00019AA2 6000                       		bra.s	Obj75_LoadBoss
00019AA4                            ; ===========================================================================
00019AA4                            
00019AA4                            Obj75_Loop:
00019AA4 4EB9 0000 E304             		jsr	SingleObjLoad2
00019AAA 6600                       		bne.s	Obj75_ShipMain
00019AAC 12BC 0075                  		move.b	#$75,(a1)
00019AB0 3368 0008 0008             		move.w	8(a0),8(a1)
00019AB6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019ABC                            
00019ABC                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019ABC 08A8 0000 0022             		bclr	#0,$22(a0)
00019AC2 4229 0025                  		clr.b	$25(a1)
00019AC6 135A 0024                  		move.b	(a2)+,$24(a1)
00019ACA 135A 001C                  		move.b	(a2)+,$1C(a1)
00019ACE 135A 0018                  		move.b	(a2)+,$18(a1)
00019AD2 237C 0001 86DA 0004        		move.l	#Map_Eggman,4(a1)
00019ADA 337C 0400 0002             		move.w	#$400,2(a1)
00019AE0 137C 0004 0001             		move.b	#4,1(a1)
00019AE6 137C 0020 0019             		move.b	#$20,$19(a1)
00019AEC 2348 0034                  		move.l	a0,$34(a1)
00019AF0 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019AF4                            
00019AF4                            Obj75_ShipMain:				; XREF: Obj75_Index
00019AF4 7000                       		moveq	#0,d0
00019AF6 1028 0025                  		move.b	$25(a0),d0
00019AFA 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019AFE 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019B02 43F9 0001 8676             		lea	(Ani_Eggman).l,a1
00019B08 4EB9 0000 AEEE             		jsr	AnimateSprite
00019B0E 7003                       		moveq	#3,d0
00019B10 C028 0022                  		and.b	$22(a0),d0
00019B14 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B1A 8128 0001                  		or.b	d0,1(a0)
00019B1E 4EF9 0000 DE68             		jmp	DisplaySprite
00019B24                            ; ===========================================================================
00019B24 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019B28 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019B2C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            loc_191CC:				; XREF: Obj75_ShipIndex
00019B30 317C FF00 0010             		move.w	#-$100,$10(a0)
00019B36 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019B3C 6400                       		bcc.s	loc_191DE
00019B3E 5428 0025                  		addq.b	#2,$25(a0)
00019B42                            
00019B42                            loc_191DE:
00019B42 1028 003F                  		move.b	$3F(a0),d0
00019B46 5428 003F                  		addq.b	#2,$3F(a0)
00019B4A 4EB9 0000 2D02             		jsr	(CalcSine).l
00019B50 E440                       		asr.w	#2,d0
00019B52 3140 0012                  		move.w	d0,$12(a0)
00019B56                            
00019B56                            loc_191F2:
00019B56 6100 E6DC                  		bsr.w	BossMove
00019B5A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019B60 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B66                            
00019B66                            loc_19202:
00019B66 3028 0008                  		move.w	8(a0),d0
00019B6A 0440 2C00                  		subi.w	#$2C00,d0
00019B6E EA48                       		lsr.w	#5,d0
00019B70 1140 0034                  		move.b	d0,$34(a0)
00019B74 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019B7A 6400                       		bcc.s	locret_19256
00019B7C 4A28 0022                  		tst.b	$22(a0)
00019B80 6B00                       		bmi.s	loc_19258
00019B82 4A28 0020                  		tst.b	$20(a0)
00019B86 6600                       		bne.s	locret_19256
00019B88 4A28 003E                  		tst.b	$3E(a0)
00019B8C 6600                       		bne.s	loc_1923A
00019B8E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019B94 303C 00AC                  		move.w	#$AC,d0
00019B98 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019B9E                            
00019B9E                            loc_1923A:
00019B9E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019BA2 7000                       		moveq	#0,d0
00019BA4 4A51                       		tst.w	(a1)
00019BA6 6600                       		bne.s	loc_19248
00019BA8 303C 0EEE                  		move.w	#$EEE,d0
00019BAC                            
00019BAC                            loc_19248:
00019BAC 3280                       		move.w	d0,(a1)
00019BAE 5328 003E                  		subq.b	#1,$3E(a0)
00019BB2 6600                       		bne.s	locret_19256
00019BB4 117C 000F 0020             		move.b	#$F,$20(a0)
00019BBA                            
00019BBA                            locret_19256:
00019BBA 4E75                       		rts	
00019BBC                            ; ===========================================================================
00019BBC                            
00019BBC                            loc_19258:				; XREF: loc_19202
00019BBC 7064                       		moveq	#100,d0
00019BBE 6100 0000                  		bsr.w	AddPoints
00019BC2 117C 0006 0025             		move.b	#6,$25(a0)
00019BC8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019BCE 4268 0010                  		clr.w	$10(a0)
00019BD2 4E75                       		rts	
00019BD4                            ; ===========================================================================
00019BD4                            
00019BD4                            loc_19270:				; XREF: Obj75_ShipIndex
00019BD4 3028 0030                  		move.w	$30(a0),d0
00019BD8 317C 0140 0010             		move.w	#$140,$10(a0)
00019BDE 0828 0000 0022             		btst	#0,$22(a0)
00019BE4 6600                       		bne.s	loc_1928E
00019BE6 4468 0010                  		neg.w	$10(a0)
00019BEA 0C40 2C08                  		cmpi.w	#$2C08,d0
00019BEE 6E00                       		bgt.s	loc_1929E
00019BF0 6000                       		bra.s	loc_19294
00019BF2                            ; ===========================================================================
00019BF2                            
00019BF2                            loc_1928E:
00019BF2 0C40 2D38                  		cmpi.w	#$2D38,d0
00019BF6 6D00                       		blt.s	loc_1929E
00019BF8                            
00019BF8                            loc_19294:
00019BF8 0868 0000 0022             		bchg	#0,$22(a0)
00019BFE 4228 003D                  		clr.b	$3D(a0)
00019C02                            
00019C02                            loc_1929E:
00019C02 0440 2C10                  		subi.w	#$2C10,d0
00019C06 0240 001F                  		andi.w	#$1F,d0
00019C0A 0440 001F                  		subi.w	#$1F,d0
00019C0E 6A00                       		bpl.s	loc_192AE
00019C10 4440                       		neg.w	d0
00019C12                            
00019C12                            loc_192AE:
00019C12 5340                       		subq.w	#1,d0
00019C14 6E00                       		bgt.s	loc_192E8
00019C16 4A28 003D                  		tst.b	$3D(a0)
00019C1A 6600                       		bne.s	loc_192E8
00019C1C 3238 D008                  		move.w	($FFFFD008).w,d1
00019C20 0441 2C00                  		subi.w	#$2C00,d1
00019C24 EA41                       		asr.w	#5,d1
00019C26 B228 0034                  		cmp.b	$34(a0),d1
00019C2A 6600                       		bne.s	loc_192E8
00019C2C 7000                       		moveq	#0,d0
00019C2E 1028 0034                  		move.b	$34(a0),d0
00019C32 EB40                       		asl.w	#5,d0
00019C34 0640 2C10                  		addi.w	#$2C10,d0
00019C38 3140 0030                  		move.w	d0,$30(a0)
00019C3C 6100 0000                  		bsr.w	Obj75_FindBlocks
00019C40 5428 0025                  		addq.b	#2,$25(a0)
00019C44 4268 0028                  		clr.w	$28(a0)
00019C48 4268 0010                  		clr.w	$10(a0)
00019C4C                            
00019C4C                            loc_192E8:
00019C4C 6000 FEF4                  		bra.w	loc_191DE
00019C50                            ; ===========================================================================
00019C50                            
00019C50                            loc_192EC:				; XREF: Obj75_ShipIndex
00019C50 7000                       		moveq	#0,d0
00019C52 1028 0028                  		move.b	$28(a0),d0
00019C56 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019C5A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019C5E                            ; ===========================================================================
00019C5E 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019C60 0000                       		dc.w loc_19348-off_192FA
00019C62 0000                       		dc.w loc_1938E-off_192FA
00019C64 0000                       		dc.w loc_193D0-off_192FA
00019C66                            ; ===========================================================================
00019C66                            
00019C66                            loc_19302:				; XREF: off_192FA
00019C66 317C 0180 0012             		move.w	#$180,$12(a0)
00019C6C 3028 0038                  		move.w	$38(a0),d0
00019C70 0C40 0556                  		cmpi.w	#$556,d0
00019C74 6500                       		bcs.s	loc_19344
00019C76 317C 0556 0038             		move.w	#$556,$38(a0)
00019C7C 4268 003C                  		clr.w	$3C(a0)
00019C80 70FF                       		moveq	#-1,d0
00019C82 3028 0036                  		move.w	$36(a0),d0
00019C86 6700                       		beq.s	loc_1933C
00019C88 2240                       		movea.l	d0,a1
00019C8A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019C90 117C 00FF 0029             		move.b	#-1,$29(a0)
00019C96 2348 0034                  		move.l	a0,$34(a1)
00019C9A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019CA0                            
00019CA0                            loc_1933C:
00019CA0 4268 0012                  		clr.w	$12(a0)
00019CA4 5428 0028                  		addq.b	#2,$28(a0)
00019CA8                            
00019CA8                            loc_19344:
00019CA8 6000 FEAC                  		bra.w	loc_191F2
00019CAC                            ; ===========================================================================
00019CAC                            
00019CAC                            loc_19348:				; XREF: off_192FA
00019CAC 5368 003C                  		subq.w	#1,$3C(a0)
00019CB0 6A00                       		bpl.s	loc_19366
00019CB2 5428 0028                  		addq.b	#2,$28(a0)
00019CB6 317C F800 0012             		move.w	#-$800,$12(a0)
00019CBC 4A68 0036                  		tst.w	$36(a0)
00019CC0 6600                       		bne.s	loc_19362
00019CC2 E0E8 0012                  		asr	$12(a0)
00019CC6                            
00019CC6                            loc_19362:
00019CC6 7000                       		moveq	#0,d0
00019CC8 6000                       		bra.s	loc_1937C
00019CCA                            ; ===========================================================================
00019CCA                            
00019CCA                            loc_19366:
00019CCA 7000                       		moveq	#0,d0
00019CCC 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019CD2 6E00                       		bgt.s	loc_1937C
00019CD4 7002                       		moveq	#2,d0
00019CD6 0828 0001 003D             		btst	#1,$3D(a0)
00019CDC 6700                       		beq.s	loc_1937C
00019CDE 4440                       		neg.w	d0
00019CE0                            
00019CE0                            loc_1937C:
00019CE0 D068 0038                  		add.w	$38(a0),d0
00019CE4 3140 000C                  		move.w	d0,$C(a0)
00019CE8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CEE 6000 FE76                  		bra.w	loc_19202
00019CF2                            ; ===========================================================================
00019CF2                            
00019CF2                            loc_1938E:				; XREF: off_192FA
00019CF2 303C 04DA                  		move.w	#$4DA,d0
00019CF6 4A68 0036                  		tst.w	$36(a0)
00019CFA 6700                       		beq.s	loc_1939C
00019CFC 0440 0018                  		subi.w	#$18,d0
00019D00                            
00019D00                            loc_1939C:
00019D00 B068 0038                  		cmp.w	$38(a0),d0
00019D04 6D00                       		blt.s	loc_193BE
00019D06 317C 0008 003C             		move.w	#8,$3C(a0)
00019D0C 4A68 0036                  		tst.w	$36(a0)
00019D10 6700                       		beq.s	loc_193B4
00019D12 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019D18                            
00019D18                            loc_193B4:
00019D18 5428 0028                  		addq.b	#2,$28(a0)
00019D1C 4268 0012                  		clr.w	$12(a0)
00019D20 6000                       		bra.s	loc_193CC
00019D22                            ; ===========================================================================
00019D22                            
00019D22                            loc_193BE:
00019D22 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019D28 6C00                       		bge.s	loc_193CC
00019D2A 0668 000C 0012             		addi.w	#$C,$12(a0)
00019D30                            
00019D30                            loc_193CC:
00019D30 6000 FE24                  		bra.w	loc_191F2
00019D34                            ; ===========================================================================
00019D34                            
00019D34                            loc_193D0:				; XREF: off_192FA
00019D34 5368 003C                  		subq.w	#1,$3C(a0)
00019D38 6E00                       		bgt.s	loc_19406
00019D3A 6B00                       		bmi.s	loc_193EE
00019D3C 70FF                       		moveq	#-1,d0
00019D3E 3028 0036                  		move.w	$36(a0),d0
00019D42 6700                       		beq.s	loc_193E8
00019D44 2240                       		movea.l	d0,a1
00019D46 137C 000A 0029             		move.b	#$A,$29(a1)
00019D4C                            
00019D4C                            loc_193E8:
00019D4C 4268 0036                  		clr.w	$36(a0)
00019D50 6000                       		bra.s	loc_19406
00019D52                            ; ===========================================================================
00019D52                            
00019D52                            loc_193EE:
00019D52 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019D58 6600                       		bne.s	loc_19406
00019D5A 4228 0029                  		clr.b	$29(a0)
00019D5E 5528 0025                  		subq.b	#2,$25(a0)
00019D62 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019D68 6000                       		bra.s	loc_19446
00019D6A                            ; ===========================================================================
00019D6A                            
00019D6A                            loc_19406:
00019D6A 7001                       		moveq	#1,d0
00019D6C 4A68 0036                  		tst.w	$36(a0)
00019D70 6700                       		beq.s	loc_19410
00019D72 7002                       		moveq	#2,d0
00019D74                            
00019D74                            loc_19410:
00019D74 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019D7A 6700                       		beq.s	loc_19424
00019D7C 6D00                       		blt.s	loc_1941C
00019D7E 4440                       		neg.w	d0
00019D80                            
00019D80                            loc_1941C:
00019D80 4A68 0036                  		tst.w	$36(a0)
00019D84 D168 0038                  		add.w	d0,$38(a0)
00019D88                            
00019D88                            loc_19424:
00019D88 7000                       		moveq	#0,d0
00019D8A 4A68 0036                  		tst.w	$36(a0)
00019D8E 6700                       		beq.s	loc_19438
00019D90 7002                       		moveq	#2,d0
00019D92 0828 0000 003D             		btst	#0,$3D(a0)
00019D98 6700                       		beq.s	loc_19438
00019D9A 4440                       		neg.w	d0
00019D9C                            
00019D9C                            loc_19438:
00019D9C D068 0038                  		add.w	$38(a0),d0
00019DA0 3140 000C                  		move.w	d0,$C(a0)
00019DA4 3168 0030 0008             		move.w	$30(a0),8(a0)
00019DAA                            
00019DAA                            loc_19446:
00019DAA 6000 FDBA                  		bra.w	loc_19202
00019DAE                            
00019DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019DAE                            
00019DAE                            
00019DAE                            Obj75_FindBlocks:			; XREF: loc_192AE
00019DAE 4268 0036                  		clr.w	$36(a0)
00019DB2 43F8 D040                  		lea	($FFFFD040).w,a1
00019DB6 703E                       		moveq	#$3E,d0
00019DB8 7276                       		moveq	#$76,d1
00019DBA 1428 0034                  		move.b	$34(a0),d2
00019DBE                            
00019DBE                            Obj75_FindLoop:
00019DBE B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019DC0 6600                       		bne.s	loc_1946A	; if not, branch
00019DC2 B429 0028                  		cmp.b	$28(a1),d2
00019DC6 6600                       		bne.s	loc_1946A
00019DC8 3149 0036                  		move.w	a1,$36(a0)
00019DCC 6000                       		bra.s	locret_19472
00019DCE                            ; ===========================================================================
00019DCE                            
00019DCE                            loc_1946A:
00019DCE 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019DD2 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019DD6                            
00019DD6                            locret_19472:
00019DD6 4E75                       		rts	
00019DD8                            ; End of function Obj75_FindBlocks
00019DD8                            
00019DD8                            ; ===========================================================================
00019DD8                            
00019DD8                            loc_19474:				; XREF: Obj75_ShipIndex
00019DD8 5368 003C                  		subq.w	#1,$3C(a0)
00019DDC 6B00                       		bmi.s	loc_1947E
00019DDE 6000 E412                  		bra.w	BossDefeated
00019DE2                            ; ===========================================================================
00019DE2                            
00019DE2                            loc_1947E:
00019DE2 5428 0025                  		addq.b	#2,$25(a0)
00019DE6 4268 0012                  		clr.w	$12(a0)
00019DEA 08E8 0000 0022             		bset	#0,$22(a0)
00019DF0 08A8 0007 0022             		bclr	#7,$22(a0)
00019DF6 4268 0010                  		clr.w	$10(a0)
00019DFA 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019E00 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019E04 6600                       		bne.s	loc_194A8
00019E06 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019E0C                            
00019E0C                            loc_194A8:
00019E0C 6000 FD58                  		bra.w	loc_19202
00019E10                            ; ===========================================================================
00019E10                            
00019E10                            loc_194AC:				; XREF: Obj75_ShipIndex
00019E10 5268 003C                  		addq.w	#1,$3C(a0)
00019E14 6700                       		beq.s	loc_194BC
00019E16 6A00                       		bpl.s	loc_194C2
00019E18 0668 0018 0012             		addi.w	#$18,$12(a0)
00019E1E 6000                       		bra.s	loc_194EE
00019E20                            ; ===========================================================================
00019E20                            
00019E20                            loc_194BC:
00019E20 4268 0012                  		clr.w	$12(a0)
00019E24 6000                       		bra.s	loc_194EE
00019E26                            ; ===========================================================================
00019E26                            
00019E26                            loc_194C2:
00019E26 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019E2C 6500                       		bcs.s	loc_194DA
00019E2E 6700                       		beq.s	loc_194E0
00019E30 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019E36 6500                       		bcs.s	loc_194EE
00019E38 5428 0025                  		addq.b	#2,$25(a0)
00019E3C 6000                       		bra.s	loc_194EE
00019E3E                            ; ===========================================================================
00019E3E                            
00019E3E                            loc_194DA:
00019E3E 5168 0012                  		subq.w	#8,$12(a0)
00019E42 6000                       		bra.s	loc_194EE
00019E44                            ; ===========================================================================
00019E44                            
00019E44                            loc_194E0:
00019E44 4268 0012                  		clr.w	$12(a0)
00019E48 303C 0085                  		move.w	#$85,d0
00019E4C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SYZ music
00019E52                            
00019E52                            loc_194EE:
00019E52 6000 FD02                  		bra.w	loc_191F2
00019E56                            ; ===========================================================================
00019E56                            
00019E56                            loc_194F2:				; XREF: Obj75_ShipIndex
00019E56 317C 0400 0010             		move.w	#$400,$10(a0)
00019E5C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019E62 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019E68 6400                       		bcc.s	loc_1950C
00019E6A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019E6E 6000                       		bra.s	loc_19512
00019E70                            ; ===========================================================================
00019E70                            
00019E70                            loc_1950C:
00019E70 4A28 0001                  		tst.b	1(a0)
00019E74 6A00                       		bpl.s	Obj75_ShipDelete
00019E76                            
00019E76                            loc_19512:
00019E76 6100 E3BC                  		bsr.w	BossMove
00019E7A 6000 FCC6                  		bra.w	loc_191DE
00019E7E                            ; ===========================================================================
00019E7E                            
00019E7E                            Obj75_ShipDelete:
00019E7E 4EF9 0000 DEA4             		jmp	DeleteObject
00019E84                            ; ===========================================================================
00019E84                            
00019E84                            Obj75_FaceMain:				; XREF: Obj75_Index
00019E84 7201                       		moveq	#1,d1
00019E86 2268 0034                  		movea.l	$34(a0),a1
00019E8A 7000                       		moveq	#0,d0
00019E8C 1029 0025                  		move.b	$25(a1),d0
00019E90 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019E94 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019E98 1141 001C                  		move.b	d1,$1C(a0)
00019E9C 1010                       		move.b	(a0),d0
00019E9E B011                       		cmp.b	(a1),d0
00019EA0 6600                       		bne.s	Obj75_FaceDelete
00019EA2 6000                       		bra.s	loc_195BE
00019EA4                            ; ===========================================================================
00019EA4                            
00019EA4                            Obj75_FaceDelete:
00019EA4 4EF9 0000 DEA4             		jmp	DeleteObject
00019EAA                            ; ===========================================================================
00019EAA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019EAE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019EB2 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019EB6                            ; ===========================================================================
00019EB6                            
00019EB6                            loc_19552:				; XREF: off_19546
00019EB6 720A                       		moveq	#$A,d1
00019EB8 4E75                       		rts	
00019EBA                            ; ===========================================================================
00019EBA                            
00019EBA                            loc_19556:				; XREF: off_19546
00019EBA 7206                       		moveq	#6,d1
00019EBC 4E75                       		rts	
00019EBE                            ; ===========================================================================
00019EBE                            
00019EBE                            loc_1955A:				; XREF: off_19546
00019EBE 7000                       		moveq	#0,d0
00019EC0 1029 0028                  		move.b	$28(a1),d0
00019EC4 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019EC8 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019ECC                            ; ===========================================================================
00019ECC 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019ED0 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019ED4                            ; ===========================================================================
00019ED4                            
00019ED4                            loc_19570:				; XREF: off_19568
00019ED4 6000                       		bra.s	loc_19574
00019ED6                            ; ===========================================================================
00019ED6                            
00019ED6                            loc_19572:				; XREF: off_19568
00019ED6 7206                       		moveq	#6,d1
00019ED8                            
00019ED8                            loc_19574:				; XREF: off_19546
00019ED8 4A29 0020                  		tst.b	$20(a1)
00019EDC 6600                       		bne.s	loc_1957E
00019EDE 7205                       		moveq	#5,d1
00019EE0 4E75                       		rts	
00019EE2                            ; ===========================================================================
00019EE2                            
00019EE2                            loc_1957E:
00019EE2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019EE8 6500                       		bcs.s	locret_19588
00019EEA 7204                       		moveq	#4,d1
00019EEC                            
00019EEC                            locret_19588:
00019EEC 4E75                       		rts	
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            Obj75_FlameMain:			; XREF: Obj75_Index
00019EEE 117C 0007 001C             		move.b	#7,$1C(a0)
00019EF4 2268 0034                  		movea.l	$34(a0),a1
00019EF8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019EFE 6600                       		bne.s	loc_195AA
00019F00 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F06 4A28 0001                  		tst.b	1(a0)
00019F0A 6A00                       		bpl.s	Obj75_FlameDelete
00019F0C 6000                       		bra.s	loc_195B6
00019F0E                            ; ===========================================================================
00019F0E                            
00019F0E                            loc_195AA:
00019F0E 4A69 0010                  		tst.w	$10(a1)
00019F12 6700                       		beq.s	loc_195B6
00019F14 117C 0008 001C             		move.b	#8,$1C(a0)
00019F1A                            
00019F1A                            loc_195B6:
00019F1A 6000                       		bra.s	loc_195BE
00019F1C                            ; ===========================================================================
00019F1C                            
00019F1C                            Obj75_FlameDelete:
00019F1C 4EF9 0000 DEA4             		jmp	DeleteObject
00019F22                            ; ===========================================================================
00019F22                            
00019F22                            loc_195BE:
00019F22 43F9 0001 8676             		lea	(Ani_Eggman).l,a1
00019F28 4EB9 0000 AEEE             		jsr	AnimateSprite
00019F2E 2268 0034                  		movea.l	$34(a0),a1
00019F32 3169 0008 0008             		move.w	8(a1),8(a0)
00019F38 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F3E                            
00019F3E                            loc_195DA:
00019F3E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019F44 7003                       		moveq	#3,d0
00019F46 C028 0022                  		and.b	$22(a0),d0
00019F4A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F50 8128 0001                  		or.b	d0,1(a0)
00019F54 4EF9 0000 DE68             		jmp	DisplaySprite
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019F5A 217C 0001 87A2 0004        		move.l	#Map_BossItems,4(a0)
00019F62 317C 246C 0002             		move.w	#$246C,2(a0)
00019F68 117C 0005 001A             		move.b	#5,$1A(a0)
00019F6E 2268 0034                  		movea.l	$34(a0),a1
00019F72 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F78 6600                       		bne.s	loc_1961C
00019F7A 4A28 0001                  		tst.b	1(a0)
00019F7E 6A00                       		bpl.s	Obj75_SpikeDelete
00019F80                            
00019F80                            loc_1961C:
00019F80 3169 0008 0008             		move.w	8(a1),8(a0)
00019F86 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F8C 3028 003C                  		move.w	$3C(a0),d0
00019F90 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F96 6600                       		bne.s	loc_19652
00019F98 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019F9E 6700                       		beq.s	loc_1964C
00019FA0 4A29 0028                  		tst.b	$28(a1)
00019FA4 6600                       		bne.s	loc_19658
00019FA6 0C40 0094                  		cmpi.w	#$94,d0
00019FAA 6C00                       		bge.s	loc_19658
00019FAC 5E40                       		addq.w	#7,d0
00019FAE 6000                       		bra.s	loc_19658
00019FB0                            ; ===========================================================================
00019FB0                            
00019FB0                            loc_1964C:
00019FB0 4A69 003C                  		tst.w	$3C(a1)
00019FB4 6A00                       		bpl.s	loc_19658
00019FB6                            
00019FB6                            loc_19652:
00019FB6 4A40                       		tst.w	d0
00019FB8 6F00                       		ble.s	loc_19658
00019FBA 5B40                       		subq.w	#5,d0
00019FBC                            
00019FBC                            loc_19658:
00019FBC 3140 003C                  		move.w	d0,$3C(a0)
00019FC0 E440                       		asr.w	#2,d0
00019FC2 D168 000C                  		add.w	d0,$C(a0)
00019FC6 117C 0008 0019             		move.b	#8,$19(a0)
00019FCC 117C 000C 0016             		move.b	#$C,$16(a0)
00019FD2 4228 0020                  		clr.b	$20(a0)
00019FD6 2268 0034                  		movea.l	$34(a0),a1
00019FDA 4A29 0020                  		tst.b	$20(a1)
00019FDE 6700                       		beq.s	loc_19688
00019FE0 4A29 0029                  		tst.b	$29(a1)
00019FE4 6600                       		bne.s	loc_19688
00019FE6 117C 0084 0020             		move.b	#$84,$20(a0)
00019FEC                            
00019FEC                            loc_19688:
00019FEC 6000 FF50                  		bra.w	loc_195DA
00019FF0                            ; ===========================================================================
00019FF0                            
00019FF0                            Obj75_SpikeDelete:
00019FF0 4EF9 0000 DEA4             		jmp	DeleteObject
00019FF6                            ; ===========================================================================
00019FF6                            ; ---------------------------------------------------------------------------
00019FF6                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019FF6                            ; ---------------------------------------------------------------------------
00019FF6                            
00019FF6                            Obj76:					; XREF: Obj_Index
00019FF6 7000                       		moveq	#0,d0
00019FF8 1028 0024                  		move.b	$24(a0),d0
00019FFC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A000 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A004                            ; ===========================================================================
0001A004 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A006 0000                       		dc.w Obj76_Action-Obj76_Index
0001A008 0000                       		dc.w loc_19762-Obj76_Index
0001A00A                            ; ===========================================================================
0001A00A                            
0001A00A                            Obj76_Main:				; XREF: Obj76_Index
0001A00A 7800                       		moveq	#0,d4
0001A00C 3A3C 2C10                  		move.w	#$2C10,d5
0001A010 7C09                       		moveq	#9,d6
0001A012 43D0                       		lea	(a0),a1
0001A014 6000                       		bra.s	Obj76_MakeBlock
0001A016                            ; ===========================================================================
0001A016                            
0001A016                            Obj76_Loop:
0001A016 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001A01C 6600                       		bne.s	Obj76_ExitLoop
0001A01E                            
0001A01E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A01E 12BC 0076                  		move.b	#$76,(a1)
0001A022 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A02A 337C 4000 0002             		move.w	#$4000,2(a1)
0001A030 137C 0004 0001             		move.b	#4,1(a1)
0001A036 137C 0010 0019             		move.b	#$10,$19(a1)
0001A03C 137C 0010 0016             		move.b	#$10,$16(a1)
0001A042 137C 0003 0018             		move.b	#3,$18(a1)
0001A048 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A04C 337C 0582 000C             		move.w	#$582,$C(a1)
0001A052 3344 0028                  		move.w	d4,$28(a1)
0001A056 0644 0101                  		addi.w	#$101,d4
0001A05A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A05E 5429 0024                  		addq.b	#2,$24(a1)
0001A062 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A066                            
0001A066                            Obj76_ExitLoop:
0001A066 4E75                       		rts	
0001A068                            ; ===========================================================================
0001A068                            
0001A068                            Obj76_Action:				; XREF: Obj76_Index
0001A068 1028 0029                  		move.b	$29(a0),d0
0001A06C B028 0028                  		cmp.b	$28(a0),d0
0001A070 6700                       		beq.s	Obj76_Solid
0001A072 4A00                       		tst.b	d0
0001A074 6B00                       		bmi.s	loc_19718
0001A076                            
0001A076                            loc_19712:
0001A076 6100 0000                  		bsr.w	Obj76_Break
0001A07A 6000                       		bra.s	Obj76_Display
0001A07C                            ; ===========================================================================
0001A07C                            
0001A07C                            loc_19718:
0001A07C 2268 0034                  		movea.l	$34(a0),a1
0001A080 4A29 0021                  		tst.b	$21(a1)
0001A084 67F0                       		beq.s	loc_19712
0001A086 3169 0008 0008             		move.w	8(a1),8(a0)
0001A08C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A092 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A098 B2C8                       		cmpa.w	a0,a1
0001A09A 6500                       		bcs.s	Obj76_Display
0001A09C 3029 0012                  		move.w	$12(a1),d0
0001A0A0 48C0                       		ext.l	d0
0001A0A2 E080                       		asr.l	#8,d0
0001A0A4 D168 000C                  		add.w	d0,$C(a0)
0001A0A8 6000                       		bra.s	Obj76_Display
0001A0AA                            ; ===========================================================================
0001A0AA                            
0001A0AA                            Obj76_Solid:				; XREF: Obj76_Action
0001A0AA 323C 001B                  		move.w	#$1B,d1
0001A0AE 343C 0010                  		move.w	#$10,d2
0001A0B2 363C 0011                  		move.w	#$11,d3
0001A0B6 3828 0008                  		move.w	8(a0),d4
0001A0BA 4EB9 0001 0238             		jsr	SolidObject
0001A0C0                            
0001A0C0                            Obj76_Display:				; XREF: Obj76_Action
0001A0C0 4EF9 0000 DE68             		jmp	DisplaySprite
0001A0C6                            ; ===========================================================================
0001A0C6                            
0001A0C6                            loc_19762:				; XREF: Obj76_Index
0001A0C6 4A28 0001                  		tst.b	1(a0)
0001A0CA 6A00                       		bpl.s	Obj76_Delete
0001A0CC 4EB9 0000 DDD0             		jsr	ObjectFall
0001A0D2 4EF9 0000 DE68             		jmp	DisplaySprite
0001A0D8                            ; ===========================================================================
0001A0D8                            
0001A0D8                            Obj76_Delete:
0001A0D8 4EF9 0000 DEA4             		jmp	DeleteObject
0001A0DE                            
0001A0DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A0DE                            
0001A0DE                            
0001A0DE                            Obj76_Break:				; XREF: Obj76_Action
0001A0DE 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A0E2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A0E6 7801                       		moveq	#1,d4
0001A0E8 7203                       		moveq	#3,d1
0001A0EA 7438                       		moveq	#$38,d2
0001A0EC 5428 0024                  		addq.b	#2,$24(a0)
0001A0F0 117C 0008 0019             		move.b	#8,$19(a0)
0001A0F6 117C 0008 0016             		move.b	#8,$16(a0)
0001A0FC 43D0                       		lea	(a0),a1
0001A0FE 6000                       		bra.s	Obj76_MakeFrag
0001A100                            ; ===========================================================================
0001A100                            
0001A100                            Obj76_LoopFrag:
0001A100 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A106 6600                       		bne.s	loc_197D4
0001A108                            
0001A108                            Obj76_MakeFrag:
0001A108 45D0                       		lea	(a0),a2
0001A10A 47D1                       		lea	(a1),a3
0001A10C 7603                       		moveq	#3,d3
0001A10E                            
0001A10E                            loc_197AA:
0001A10E 26DA                       		move.l	(a2)+,(a3)+
0001A110 26DA                       		move.l	(a2)+,(a3)+
0001A112 26DA                       		move.l	(a2)+,(a3)+
0001A114 26DA                       		move.l	(a2)+,(a3)+
0001A116 51CB FFF6                  		dbf	d3,loc_197AA
0001A11A                            
0001A11A 335C 0010                  		move.w	(a4)+,$10(a1)
0001A11E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A122 361D                       		move.w	(a5)+,d3
0001A124 D769 0008                  		add.w	d3,8(a1)
0001A128 361D                       		move.w	(a5)+,d3
0001A12A D769 000C                  		add.w	d3,$C(a1)
0001A12E 1344 001A                  		move.b	d4,$1A(a1)
0001A132 5244                       		addq.w	#1,d4
0001A134 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A138                            
0001A138                            loc_197D4:
0001A138 303C 00CB                  		move.w	#$CB,d0
0001A13C 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A142                            ; End of function Obj76_Break
0001A142                            
0001A142                            ; ===========================================================================
0001A142 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A146 0180 FE00                  		dc.w $180, $FE00
0001A14A FF00 FF00                  		dc.w $FF00, $FF00
0001A14E 0100 FF00                  		dc.w $100, $FF00
0001A152 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A156 0010 0000                  		dc.w $10, 0
0001A15A 0000 0010                  		dc.w 0,	$10
0001A15E 0010 0010                  		dc.w $10, $10
0001A162                            ; ---------------------------------------------------------------------------
0001A162                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A162                            ; ---------------------------------------------------------------------------
0001A162                            Map_obj76:
0001A162                            	include "_maps\obj76.asm"
0001A162                            ; ---------------------------------------------------------------------------
0001A162                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A162                            ; ---------------------------------------------------------------------------
0001A162 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A166 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A16A 0000                       		dc.w byte_19826-Map_obj76
0001A16C 02                         byte_19808:	dc.b 2
0001A16D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A172 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A177 00                         		dc.b 0
0001A178 01                         byte_19814:	dc.b 1
0001A179 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A17E 01                         byte_1981A:	dc.b 1
0001A17F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A184 01                         byte_19820:	dc.b 1
0001A185 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A18A 01                         byte_19826:	dc.b 1
0001A18B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A190                            		even
0001A190                            		even
0001A190                            
0001A190                            ; ===========================================================================
0001A190                            
0001A190                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A190 4EF9 0000 DEA4             		jmp	DeleteObject
0001A196                            ; ===========================================================================
0001A196                            ; ---------------------------------------------------------------------------
0001A196                            ; Object 82 - Eggman (SBZ2)
0001A196                            ; ---------------------------------------------------------------------------
0001A196                            
0001A196                            Obj82:					; XREF: Obj_Index
0001A196 7000                       		moveq	#0,d0
0001A198 1028 0024                  		move.b	$24(a0),d0
0001A19C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A1A0 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A1A4                            ; ===========================================================================
0001A1A4 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A1A6 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A1A8 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A1AA                            
0001A1AA 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A1AD 0400 03                    		dc.b 4,	0, 3
0001A1B0                            ; ===========================================================================
0001A1B0                            
0001A1B0                            Obj82_Main:				; XREF: Obj82_Index
0001A1B0 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A1B4 317C 2160 0008             		move.w	#$2160,8(a0)
0001A1BA 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A1C0 117C 000F 0020             		move.b	#$F,$20(a0)
0001A1C6 117C 0010 0021             		move.b	#$10,$21(a0)
0001A1CC 08A8 0000 0022             		bclr	#0,$22(a0)
0001A1D2 4228 0025                  		clr.b	$25(a0)
0001A1D6 115A 0024                  		move.b	(a2)+,$24(a0)
0001A1DA 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A1DE 115A 0018                  		move.b	(a2)+,$18(a0)
0001A1E2 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A1EA 317C 0400 0002             		move.w	#$400,2(a0)
0001A1F0 117C 0004 0001             		move.b	#4,1(a0)
0001A1F6 08E8 0007 0001             		bset	#7,1(a0)
0001A1FC 117C 0020 0019             		move.b	#$20,$19(a0)
0001A202 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A208 6600                       		bne.s	Obj82_Eggman
0001A20A 2348 0034                  		move.l	a0,$34(a1)
0001A20E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A212 337C 2130 0008             		move.w	#$2130,8(a1)
0001A218 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A21E 4228 0025                  		clr.b	$25(a0)
0001A222 135A 0024                  		move.b	(a2)+,$24(a1)
0001A226 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A22A 135A 0018                  		move.b	(a2)+,$18(a1)
0001A22E 237C 0000 C622 0004        		move.l	#Map_obj32,4(a1)
0001A236 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A23C 137C 0004 0001             		move.b	#4,1(a1)
0001A242 08E9 0007 0001             		bset	#7,1(a1)
0001A248 137C 0010 0019             		move.b	#$10,$19(a1)
0001A24E 137C 0000 001A             		move.b	#0,$1A(a1)
0001A254                            
0001A254                            Obj82_Eggman:				; XREF: Obj82_Index
0001A254 7000                       		moveq	#0,d0
0001A256 1028 0025                  		move.b	$25(a0),d0
0001A25A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A25E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A262 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A266 4EB9 0000 AEEE             		jsr	AnimateSprite
0001A26C 4EF9 0000 DE68             		jmp	DisplaySprite
0001A272                            ; ===========================================================================
0001A272 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A274 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A276 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A278 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A27A                            ; ===========================================================================
0001A27A                            
0001A27A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A27A 3028 0008                  		move.w	8(a0),d0
0001A27E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A282 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A286 6400                       		bcc.s	loc_19934	; if not, branch
0001A288 5428 0025                  		addq.b	#2,$25(a0)
0001A28C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A292 117C 0001 001C             		move.b	#1,$1C(a0)
0001A298                            
0001A298                            loc_19934:				; XREF: Obj82_EggIndex
0001A298 4EF9 0000 DE42             		jmp	SpeedToPos
0001A29E                            ; ===========================================================================
0001A29E                            
0001A29E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A29E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A2A2 6600                       		bne.s	loc_19954	; if time remains, branch
0001A2A4 5428 0025                  		addq.b	#2,$25(a0)
0001A2A8 117C 0002 001C             		move.b	#2,$1C(a0)
0001A2AE 5868 000C                  		addq.w	#4,$C(a0)
0001A2B2 317C 000F 003C             		move.w	#15,$3C(a0)
0001A2B8                            
0001A2B8                            loc_19954:
0001A2B8 60DE                       		bra.s	loc_19934
0001A2BA                            ; ===========================================================================
0001A2BA                            
0001A2BA                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A2BA 5368 003C                  		subq.w	#1,$3C(a0)
0001A2BE 6E00                       		bgt.s	loc_199D0
0001A2C0 6600                       		bne.s	loc_1996A
0001A2C2 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A2C8 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A2CE                            
0001A2CE                            loc_1996A:
0001A2CE 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A2D4 6E00                       		bgt.s	loc_19976
0001A2D6 4268 0010                  		clr.w	$10(a0)
0001A2DA                            
0001A2DA                            loc_19976:
0001A2DA 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A2E0 4A68 0012                  		tst.w	$12(a0)
0001A2E4 6B00                       		bmi.s	Obj82_FindBlocks
0001A2E6 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A2EC 6500                       		bcs.s	Obj82_FindBlocks
0001A2EE 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A2F4 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A2FA 6500                       		bcs.s	Obj82_FindBlocks
0001A2FC 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A302 4268 0012                  		clr.w	$12(a0)
0001A306                            
0001A306                            Obj82_FindBlocks:
0001A306 3028 0010                  		move.w	$10(a0),d0
0001A30A 8068 0012                  		or.w	$12(a0),d0
0001A30E 6600                       		bne.s	loc_199D0
0001A310 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A314 703E                       		moveq	#$3E,d0
0001A316 7240                       		moveq	#$40,d1
0001A318                            
0001A318                            Obj82_FindLoop:	
0001A318 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A31A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A31E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A322                            
0001A322 6600                       		bne.s	loc_199D0
0001A324 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A32A 5428 0025                  		addq.b	#2,$25(a0)
0001A32E 117C 0001 001C             		move.b	#1,$1C(a0)
0001A334                            
0001A334                            loc_199D0:
0001A334 6000 FF62                  		bra.w	loc_19934
0001A338                            ; ===========================================================================
0001A338                            
0001A338                            Obj82_Switch:				; XREF: Obj82_Index
0001A338 7000                       		moveq	#0,d0
0001A33A 1028 0025                  		move.b	$25(a0),d0
0001A33E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A342 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A346                            ; ===========================================================================
0001A346 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A348 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A34A                            ; ===========================================================================
0001A34A                            
0001A34A                            loc_199E6:				; XREF: Obj82_SwIndex
0001A34A 2268 0034                  		movea.l	$34(a0),a1
0001A34E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A354 6600                       		bne.s	Obj82_SwDisplay
0001A356 117C 0001 001A             		move.b	#1,$1A(a0)
0001A35C 5428 0025                  		addq.b	#2,$25(a0)
0001A360                            
0001A360                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A360 4EF9 0000 DE68             		jmp	DisplaySprite
0001A366                            ; ===========================================================================
0001A366                            Ani_obj82:
0001A366                            	include "_anim\obj82.asm"
0001A366                            ; ---------------------------------------------------------------------------
0001A366                            ; Animation script - Eggman (SBZ2)
0001A366                            ; ---------------------------------------------------------------------------
0001A366 0000                       		dc.w byte_19A10-Ani_obj82
0001A368 0000                       		dc.w byte_19A14-Ani_obj82
0001A36A 0000                       		dc.w byte_19A18-Ani_obj82
0001A36C 0000                       		dc.w byte_19A20-Ani_obj82
0001A36E 0000                       		dc.w byte_19A24-Ani_obj82
0001A370 0000                       		dc.w byte_19A2A-Ani_obj82
0001A372 0000                       		dc.w byte_19A30-Ani_obj82
0001A374 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A378 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A37C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A384 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A388 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A38E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A394 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A398                            		even
0001A398                            		even
0001A398                            
0001A398                            ; ---------------------------------------------------------------------------
0001A398                            ; Sprite mappings - Eggman (SBZ2)
0001A398                            ; ---------------------------------------------------------------------------
0001A398                            Map_obj82:
0001A398                            	include "_maps\obj82.asm"
0001A398                            ; ================================================================================
0001A398                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A398                            ; ================================================================================
0001A398                            
0001A398                            DATAA16Z12RYSAF:
0001A398 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A39C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A3A0 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A3A4 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A3A8 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A3AC 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A3AE 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A3AF FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A3B4 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3B9 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3BE 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A3BF E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A3C4 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3C9 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3CE FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A3D3 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A3D4 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A3D9 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A3DE 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A3E3 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A3E8 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A3E9 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A3EE 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A3F3 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A3F8 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A3F9 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A3FE 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A403 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A408 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A40D 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A40E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A413 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A418 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A41D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A422 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A423 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A428 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A42D 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A432 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A437 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A43C F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A441 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A446 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A447 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A44C E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A451 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A456 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A45B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A45C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A461 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A466 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A46B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A470 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A475 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A476 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A47B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A480 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A485 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A48A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A48F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A494 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A499 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A49E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A49F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A4A4 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A4A9 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A4AE                            	even
0001A4AE                            	even
0001A4AE                            
0001A4AE                            ; ===========================================================================
0001A4AE                            ; ---------------------------------------------------------------------------
0001A4AE                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A4AE                            ; ---------------------------------------------------------------------------
0001A4AE                            
0001A4AE                            Obj83:					; XREF: Obj_Index
0001A4AE 7000                       		moveq	#0,d0
0001A4B0 1028 0024                  		move.b	$24(a0),d0
0001A4B4 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A4B8 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A4BC                            ; ===========================================================================
0001A4BC 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A4BE 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A4C0 0000                       		dc.w loc_19C36-Obj83_Index
0001A4C2 0000                       		dc.w loc_19C62-Obj83_Index
0001A4C4 0000                       		dc.w loc_19C72-Obj83_Index
0001A4C6 0000                       		dc.w loc_19C80-Obj83_Index
0001A4C8                            ; ===========================================================================
0001A4C8                            
0001A4C8                            Obj83_Main:				; XREF: Obj83_Index
0001A4C8 317C 2080 0008             		move.w	#$2080,8(a0)
0001A4CE 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A4D4 117C 0080 0019             		move.b	#$80,$19(a0)
0001A4DA 117C 0010 0016             		move.b	#$10,$16(a0)
0001A4E0 117C 0004 0001             		move.b	#4,1(a0)
0001A4E6 08E8 0007 0001             		bset	#7,1(a0)
0001A4EC 7800                       		moveq	#0,d4
0001A4EE 3A3C 2010                  		move.w	#$2010,d5
0001A4F2 7C07                       		moveq	#7,d6
0001A4F4 45E8 0030                  		lea	$30(a0),a2
0001A4F8                            
0001A4F8                            Obj83_MakeBlock:
0001A4F8 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001A4FE 6600                       		bne.s	Obj83_ExitMake
0001A500 34C9                       		move.w	a1,(a2)+
0001A502 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A506 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A50E 337C 4518 0002             		move.w	#$4518,2(a1)
0001A514 137C 0004 0001             		move.b	#4,1(a1)
0001A51A 137C 0010 0019             		move.b	#$10,$19(a1)
0001A520 137C 0010 0016             		move.b	#$10,$16(a1)
0001A526 137C 0003 0018             		move.b	#3,$18(a1)
0001A52C 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A530 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A536 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A53A 137C 0008 0024             		move.b	#8,$24(a1)
0001A540 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A544                            
0001A544                            Obj83_ExitMake:
0001A544 5428 0024                  		addq.b	#2,$24(a0)
0001A548 4E75                       		rts	
0001A54A                            ; ===========================================================================
0001A54A                            
0001A54A                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A54A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A550 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A552 4228 001A                  		clr.b	$1A(a0)
0001A556 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A55A                            
0001A55A                            Obj83_Solid:
0001A55A 7000                       		moveq	#0,d0
0001A55C 1028 001A                  		move.b	$1A(a0),d0
0001A560 4400                       		neg.b	d0
0001A562 4880                       		ext.w	d0
0001A564 5040                       		addq.w	#8,d0
0001A566 E940                       		asl.w	#4,d0
0001A568 383C 2100                  		move.w	#$2100,d4
0001A56C 9840                       		sub.w	d0,d4
0001A56E 1140 0019                  		move.b	d0,$19(a0)
0001A572 3144 0008                  		move.w	d4,8(a0)
0001A576 720B                       		moveq	#$B,d1
0001A578 D240                       		add.w	d0,d1
0001A57A 7410                       		moveq	#$10,d2
0001A57C 7611                       		moveq	#$11,d3
0001A57E 4EF9 0001 0238             		jmp	SolidObject
0001A584                            ; ===========================================================================
0001A584                            
0001A584                            loc_19C36:				; XREF: Obj83_Index
0001A584 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A58A 6400                       		bcc.s	Obj83_Solid2
0001A58C 70FF                       		moveq	#-1,d0
0001A58E 1028 001A                  		move.b	$1A(a0),d0
0001A592 4880                       		ext.w	d0
0001A594 D040                       		add.w	d0,d0
0001A596 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A59A 2240                       		movea.l	d0,a1
0001A59C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A5A2 5228 001A                  		addq.b	#1,$1A(a0)
0001A5A6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A5AC 6700                       		beq.s	loc_19C62
0001A5AE                            
0001A5AE                            Obj83_Solid2:
0001A5AE 60AA                       		bra.s	Obj83_Solid
0001A5B0                            ; ===========================================================================
0001A5B0                            
0001A5B0                            loc_19C62:				; XREF: Obj83_Index
0001A5B0 08A8 0003 0022             		bclr	#3,$22(a0)
0001A5B6 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A5BC 6000 FBD2                  		bra.w	loc_1982C
0001A5C0                            ; ===========================================================================
0001A5C0                            
0001A5C0                            loc_19C72:				; XREF: Obj83_Index
0001A5C0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A5C6 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A5C8 4EF9 0000 DE68             		jmp	DisplaySprite
0001A5CE                            ; ===========================================================================
0001A5CE                            
0001A5CE                            loc_19C80:				; XREF: Obj83_Index
0001A5CE 4A28 0001                  		tst.b	1(a0)
0001A5D2 6A00 FBBC                  		bpl.w	loc_1982C
0001A5D6 4EB9 0000 DDD0             		jsr	ObjectFall
0001A5DC 4EF9 0000 DE68             		jmp	DisplaySprite
0001A5E2                            ; ===========================================================================
0001A5E2                            
0001A5E2                            Obj83_Break:				; XREF: loc_19C72
0001A5E2 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A5E6 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A5EA 7801                       		moveq	#1,d4
0001A5EC 7203                       		moveq	#3,d1
0001A5EE 7438                       		moveq	#$38,d2
0001A5F0 5428 0024                  		addq.b	#2,$24(a0)
0001A5F4 117C 0008 0019             		move.b	#8,$19(a0)
0001A5FA 117C 0008 0016             		move.b	#8,$16(a0)
0001A600 43D0                       		lea	(a0),a1
0001A602 6000                       		bra.s	Obj83_MakeFrag
0001A604                            ; ===========================================================================
0001A604                            
0001A604                            Obj83_LoopFrag:
0001A604 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A60A 6600                       		bne.s	Obj83_BreakSnd
0001A60C                            
0001A60C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A60C 45D0                       		lea	(a0),a2
0001A60E 47D1                       		lea	(a1),a3
0001A610 7603                       		moveq	#3,d3
0001A612                            
0001A612                            loc_19CC4:
0001A612 26DA                       		move.l	(a2)+,(a3)+
0001A614 26DA                       		move.l	(a2)+,(a3)+
0001A616 26DA                       		move.l	(a2)+,(a3)+
0001A618 26DA                       		move.l	(a2)+,(a3)+
0001A61A 51CB FFF6                  		dbf	d3,loc_19CC4
0001A61E                            
0001A61E 335C 0012                  		move.w	(a4)+,$12(a1)
0001A622 361D                       		move.w	(a5)+,d3
0001A624 D769 0008                  		add.w	d3,8(a1)
0001A628 361D                       		move.w	(a5)+,d3
0001A62A D769 000C                  		add.w	d3,$C(a1)
0001A62E 1344 001A                  		move.b	d4,$1A(a1)
0001A632 5244                       		addq.w	#1,d4
0001A634 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A638                            
0001A638                            Obj83_BreakSnd:
0001A638 303C 00CB                  		move.w	#$CB,d0
0001A63C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A642 4EF9 0000 DE68             		jmp	DisplaySprite
0001A648                            ; ===========================================================================
0001A648 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A64C 0120 00C0                  		dc.w $120, $C0
0001A650 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A654 0010 0000                  		dc.w $10, 0
0001A658 0000 0010                  		dc.w 0,	$10
0001A65C 0010 0010                  		dc.w $10, $10
0001A660                            ; ---------------------------------------------------------------------------
0001A660                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A660                            ; ---------------------------------------------------------------------------
0001A660                            Map_obj83:
0001A660                            	include "_maps\obj83.asm"
0001A660                            ; ---------------------------------------------------------------------------
0001A660                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A660                            ; ---------------------------------------------------------------------------
0001A660 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A664 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A668 0000                       		dc.w byte_19D46-Map_obj83
0001A66A 01                         byte_19D1C:	dc.b 1
0001A66B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A670 02                         byte_19D22:	dc.b 2
0001A671 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A676 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A67B 00                         		dc.b 0
0001A67C 02                         byte_19D2E:	dc.b 2
0001A67D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A682 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A687 00                         		dc.b 0
0001A688 02                         byte_19D3A:	dc.b 2
0001A689 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A68E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A693 00                         		dc.b 0
0001A694 02                         byte_19D46:	dc.b 2
0001A695 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A69A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A6A0 00                         		even
0001A6A0 00                         		even
0001A6A0                            
0001A6A0                            ; ===========================================================================
0001A6A0                            ; ---------------------------------------------------------------------------
0001A6A0                            ; Object 85 - Eggman (FZ)
0001A6A0                            ; ---------------------------------------------------------------------------
0001A6A0                            
0001A6A0                            Obj85_Delete:
0001A6A0 4EF9 0000 DEA4             		jmp	DeleteObject
0001A6A6                            ; ===========================================================================
0001A6A6                            
0001A6A6                            Obj85:					; XREF: Obj_Index
0001A6A6 7000                       		moveq	#0,d0
0001A6A8 1028 0024                  		move.b	$24(a0),d0
0001A6AC 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A6B0 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A6B4                            ; ===========================================================================
0001A6B4 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A6B6 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A6B8 0000                       		dc.w loc_1A38E-Obj85_Index
0001A6BA 0000                       		dc.w loc_1A346-Obj85_Index
0001A6BC 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A6BE 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A6C0 0000                       		dc.w loc_1A264-Obj85_Index
0001A6C2                            
0001A6C2 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A6C8 0001 A398                  		dc.l Map_obj82		; mappings pointer
0001A6CC 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A6D2 0000 0000                  		dc.l Map_obj84
0001A6D6 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A6DC 0000 0000                  		dc.l Map_FZBoss
0001A6E0 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A6E6 0001 A398                  		dc.l Map_obj82
0001A6EA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A6F0 0001 86DA                  		dc.l Map_Eggman
0001A6F4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A6FA 0001 86DA                  		dc.l Map_Eggman
0001A6FE                            
0001A6FE 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A703 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A708 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A70D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A712 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A717 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A71C                            ; ===========================================================================
0001A71C                            
0001A71C                            Obj85_Main:				; XREF: Obj85_Index
0001A71C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A720 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A724 2248                       		movea.l	a0,a1
0001A726 7205                       		moveq	#5,d1
0001A728 6000                       		bra.s	Obj85_LoadBoss
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            Obj85_Loop:
0001A72A 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A730 6600                       		bne.s	loc_19E20
0001A732                            
0001A732                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A732 12BC 0085                  		move.b	#$85,(a1)
0001A736 335A 0008                  		move.w	(a2)+,8(a1)
0001A73A 335A 000C                  		move.w	(a2)+,$C(a1)
0001A73E 335A 0002                  		move.w	(a2)+,2(a1)
0001A742 235A 0004                  		move.l	(a2)+,4(a1)
0001A746 135B 0024                  		move.b	(a3)+,$24(a1)
0001A74A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A74E 135B 0018                  		move.b	(a3)+,$18(a1)
0001A752 135B 0017                  		move.b	(a3)+,$17(a1)
0001A756 135B 0016                  		move.b	(a3)+,$16(a1)
0001A75A 137C 0004 0001             		move.b	#4,1(a1)
0001A760 08E8 0007 0001             		bset	#7,1(a0)
0001A766 2348 0034                  		move.l	a0,$34(a1)
0001A76A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A76E                            
0001A76E                            loc_19E20:
0001A76E 45E8 0036                  		lea	$36(a0),a2
0001A772 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001A778 6600                       		bne.s	loc_19E5A
0001A77A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A77E 3489                       		move.w	a1,(a2)
0001A780 2348 0034                  		move.l	a0,$34(a1)
0001A784 45E8 0038                  		lea	$38(a0),a2
0001A788 7400                       		moveq	#0,d2
0001A78A 7203                       		moveq	#3,d1
0001A78C                            
0001A78C                            loc_19E3E:
0001A78C 4EB9 0000 E304             		jsr	SingleObjLoad2
0001A792 6600                       		bne.s	loc_19E5A
0001A794 34C9                       		move.w	a1,(a2)+
0001A796 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A79A 2348 0034                  		move.l	a0,$34(a1)
0001A79E 1342 0028                  		move.b	d2,$28(a1)
0001A7A2 5442                       		addq.w	#2,d2
0001A7A4 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A7A8                            
0001A7A8                            loc_19E5A:
0001A7A8 317C 0000 0034             		move.w	#0,$34(a0)
0001A7AE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A7B4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7BA                            
0001A7BA                            Obj85_Eggman:				; XREF: Obj85_Index
0001A7BA 7000                       		moveq	#0,d0
0001A7BC 1028 0034                  		move.b	$34(a0),d0
0001A7C0 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A7C4 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A7C8 4EF9 0000 DE68             		jmp	DisplaySprite
0001A7CE                            ; ===========================================================================
0001A7CE 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A7D2 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A7D6 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A7DA 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A7DE                            ; ===========================================================================
0001A7DE                            
0001A7DE                            loc_19E90:				; XREF: off_19E80
0001A7DE 4AB8 F680                  		tst.l	($FFFFF680).w
0001A7E2 6600                       		bne.s	loc_19EA2
0001A7E4 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A7EA 6500                       		bcs.s	loc_19EA2
0001A7EC 5428 0034                  		addq.b	#2,$34(a0)
0001A7F0                            
0001A7F0                            loc_19EA2:
0001A7F0 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A7F4 4E75                       		rts	
0001A7F6                            ; ===========================================================================
0001A7F6                            
0001A7F6                            loc_19EA8:				; XREF: off_19E80
0001A7F6 4A68 0030                  		tst.w	$30(a0)
0001A7FA 6A00                       		bpl.s	loc_19F10
0001A7FC 4268 0030                  		clr.w	$30(a0)
0001A800 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001A806 0240 000C                  		andi.w	#$C,d0
0001A80A 3200                       		move.w	d0,d1
0001A80C 5441                       		addq.w	#2,d1
0001A80E 4A80                       		tst.l	d0
0001A810 6A00                       		bpl.s	loc_19EC6
0001A812 C141                       		exg	d1,d0
0001A814                            
0001A814                            loc_19EC6:
0001A814 43FA 0000                  		lea	word_19FD6(pc),a1
0001A818 3031 0000                  		move.w	(a1,d0.w),d0
0001A81C 3231 1000                  		move.w	(a1,d1.w),d1
0001A820 3140 0030                  		move.w	d0,$30(a0)
0001A824 74FF                       		moveq	#-1,d2
0001A826 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A82A 2242                       		movea.l	d2,a1
0001A82C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A832 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A838 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A83C 2242                       		movea.l	d2,a1
0001A83E 137C 0001 0029             		move.b	#1,$29(a1)
0001A844 337C 0000 0030             		move.w	#0,$30(a1)
0001A84A 317C 0001 0032             		move.w	#1,$32(a0)
0001A850 4228 0035                  		clr.b	$35(a0)
0001A854 303C 00B7                  		move.w	#$B7,d0
0001A858 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A85E                            
0001A85E                            loc_19F10:
0001A85E 4A68 0032                  		tst.w	$32(a0)
0001A862 6B00 0000                  		bmi.w	loc_19FA6
0001A866 08A8 0000 0022             		bclr	#0,$22(a0)
0001A86C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A870 9068 0008                  		sub.w	8(a0),d0
0001A874 6500                       		bcs.s	loc_19F2E
0001A876 08E8 0000 0022             		bset	#0,$22(a0)
0001A87C                            
0001A87C                            loc_19F2E:
0001A87C 323C 002B                  		move.w	#$2B,d1
0001A880 343C 0014                  		move.w	#$14,d2
0001A884 363C 0014                  		move.w	#$14,d3
0001A888 3828 0008                  		move.w	8(a0),d4
0001A88C 4EB9 0001 0238             		jsr	SolidObject
0001A892 4A44                       		tst.w	d4
0001A894 6E00                       		bgt.s	loc_19F50
0001A896                            
0001A896                            loc_19F48:
0001A896 4A28 0035                  		tst.b	$35(a0)
0001A89A 6600                       		bne.s	loc_19F88
0001A89C 6000                       		bra.s	loc_19F96
0001A89E                            ; ===========================================================================
0001A89E                            
0001A89E                            loc_19F50:
0001A89E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A8A2 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A8A8 66EC                       		bne.s	loc_19F48
0001A8AA 303C 0300                  		move.w	#$300,d0
0001A8AE 0828 0000 0022             		btst	#0,$22(a0)
0001A8B4 6600                       		bne.s	loc_19F6A
0001A8B6 4440                       		neg.w	d0
0001A8B8                            
0001A8B8                            loc_19F6A:
0001A8B8 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A8BC 4A28 0035                  		tst.b	$35(a0)
0001A8C0 6600                       		bne.s	loc_19F88
0001A8C2 5328 0021                  		subq.b	#1,$21(a0)
0001A8C6 117C 0064 0035             		move.b	#$64,$35(a0)
0001A8CC 303C 00AC                  		move.w	#$AC,d0
0001A8D0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A8D6                            
0001A8D6                            loc_19F88:
0001A8D6 5328 0035                  		subq.b	#1,$35(a0)
0001A8DA 6700                       		beq.s	loc_19F96
0001A8DC 117C 0003 001C             		move.b	#3,$1C(a0)
0001A8E2 6000                       		bra.s	loc_19F9C
0001A8E4                            ; ===========================================================================
0001A8E4                            
0001A8E4                            loc_19F96:
0001A8E4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8EA                            
0001A8EA                            loc_19F9C:
0001A8EA 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A8EE 4EF9 0000 AEEE             		jmp	AnimateSprite
0001A8F4                            ; ===========================================================================
0001A8F4                            
0001A8F4                            loc_19FA6:
0001A8F4 4A28 0021                  		tst.b	$21(a0)
0001A8F8 6700                       		beq.s	loc_19FBC
0001A8FA 5428 0034                  		addq.b	#2,$34(a0)
0001A8FE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A904 4268 0032                  		clr.w	$32(a0)
0001A908 4E75                       		rts	
0001A90A                            ; ===========================================================================
0001A90A                            
0001A90A                            loc_19FBC:
0001A90A 117C 0006 0034             		move.b	#6,$34(a0)
0001A910 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A916 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A91C 117C 0014 0016             		move.b	#$14,$16(a0)
0001A922 4E75                       		rts	
0001A924                            ; ===========================================================================
0001A924 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_19FE6:				; XREF: off_19E80
0001A934 70FF                       		moveq	#-1,d0
0001A936 3028 0036                  		move.w	$36(a0),d0
0001A93A 2240                       		movea.l	d0,a1
0001A93C 4A68 0030                  		tst.w	$30(a0)
0001A940 6A00                       		bpl.s	loc_1A000
0001A942 4268 0030                  		clr.w	$30(a0)
0001A946 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A94C 6100                       		bsr.s	loc_1A020
0001A94E                            
0001A94E                            loc_1A000:
0001A94E 700F                       		moveq	#$F,d0
0001A950 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A954 6600                       		bne.s	loc_1A00A
0001A956 6100                       		bsr.s	loc_1A020
0001A958                            
0001A958                            loc_1A00A:
0001A958 4A68 0032                  		tst.w	$32(a0)
0001A95C 6700                       		beq.s	locret_1A01E
0001A95E 5528 0034                  		subq.b	#2,$34(a0)
0001A962 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A968 4268 0032                  		clr.w	$32(a0)
0001A96C                            
0001A96C                            locret_1A01E:
0001A96C 4E75                       		rts	
0001A96E                            ; ===========================================================================
0001A96E                            
0001A96E                            loc_1A020:
0001A96E 303C 00B1                  		move.w	#$B1,d0
0001A972 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A978                            ; ===========================================================================
0001A978                            
0001A978                            loc_1A02A:				; XREF: off_19E80
0001A978 117C 0030 0017             		move.b	#$30,$17(a0)
0001A97E 08E8 0000 0022             		bset	#0,$22(a0)
0001A984 4EB9 0000 DE42             		jsr	SpeedToPos
0001A98A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A990 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A996 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A99C 6500                       		bcs.s	loc_1A070
0001A99E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A9A4 5428 0034                  		addq.b	#2,$34(a0)
0001A9A8 117C 0020 0017             		move.b	#$20,$17(a0)
0001A9AE 317C 0100 0010             		move.w	#$100,$10(a0)
0001A9B4 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A9BA 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A9BE                            
0001A9BE                            loc_1A070:
0001A9BE 6000 0000                  		bra.w	loc_1A166
0001A9C2                            ; ===========================================================================
0001A9C2                            
0001A9C2                            loc_1A074:				; XREF: off_19E80
0001A9C2 08E8 0000 0022             		bset	#0,$22(a0)
0001A9C8 117C 0004 001C             		move.b	#4,$1C(a0)
0001A9CE 4EB9 0000 DE42             		jsr	SpeedToPos
0001A9D4 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A9DA 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A9E0 6500                       		bcs.s	loc_1A09A
0001A9E2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A9E8                            
0001A9E8                            loc_1A09A:
0001A9E8 317C 0400 0010             		move.w	#$400,$10(a0)
0001A9EE 3028 0008                  		move.w	8(a0),d0
0001A9F2 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A9F6 6A00                       		bpl.s	loc_1A0B4
0001A9F8 317C 0500 0010             		move.w	#$500,$10(a0)
0001A9FE 6000 0000                  		bra.w	loc_1A0F2
0001AA02                            ; ===========================================================================
0001AA02                            
0001AA02                            loc_1A0B4:
0001AA02 0440 0070                  		subi.w	#$70,d0
0001AA06 6500                       		bcs.s	loc_1A0F2
0001AA08 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AA0E 5140                       		subq.w	#8,d0
0001AA10 6500                       		bcs.s	loc_1A0F2
0001AA12 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AA18 5140                       		subq.w	#8,d0
0001AA1A 6500                       		bcs.s	loc_1A0F2
0001AA1C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA22 5140                       		subq.w	#8,d0
0001AA24 6500                       		bcs.s	loc_1A0F2
0001AA26 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA2C 5140                       		subq.w	#8,d0
0001AA2E 6500                       		bcs.s	loc_1A0F2
0001AA30 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA36 0440 0038                  		subi.w	#$38,d0
0001AA3A 6500                       		bcs.s	loc_1A0F2
0001AA3C 4268 0010                  		clr.w	$10(a0)
0001AA40                            
0001AA40                            loc_1A0F2:
0001AA40 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AA46 6500                       		bcs.s	loc_1A110
0001AA48 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AA4E 317C 0240 0010             		move.w	#$240,$10(a0)
0001AA54 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AA5A 5428 0034                  		addq.b	#2,$34(a0)
0001AA5E                            
0001AA5E                            loc_1A110:
0001AA5E 6000                       		bra.s	loc_1A15C
0001AA60                            ; ===========================================================================
0001AA60                            
0001AA60                            loc_1A112:				; XREF: off_19E80
0001AA60 4EB9 0000 DE42             		jsr	SpeedToPos
0001AA66 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AA6C 6500                       		bcs.s	loc_1A124
0001AA6E 4268 0010                  		clr.w	$10(a0)
0001AA72                            
0001AA72                            loc_1A124:
0001AA72 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AA78 4A68 0012                  		tst.w	$12(a0)
0001AA7C 6B00                       		bmi.s	loc_1A142
0001AA7E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AA84 6500                       		bcs.s	loc_1A142
0001AA86 317C 0592 000C             		move.w	#$592,$C(a0)
0001AA8C 4268 0012                  		clr.w	$12(a0)
0001AA90                            
0001AA90                            loc_1A142:
0001AA90 3028 0010                  		move.w	$10(a0),d0
0001AA94 8068 0012                  		or.w	$12(a0),d0
0001AA98 6600                       		bne.s	loc_1A15C
0001AA9A 5428 0034                  		addq.b	#2,$34(a0)
0001AA9E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AAA4 117C 0001 0021             		move.b	#1,$21(a0)
0001AAAA                            
0001AAAA                            loc_1A15C:
0001AAAA 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AAAE 4EB9 0000 AEEE             		jsr	AnimateSprite
0001AAB4                            
0001AAB4                            loc_1A166:
0001AAB4 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AABA 6C00                       		bge.s	loc_1A172
0001AABC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AAC0                            
0001AAC0                            loc_1A172:
0001AAC0 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AAC6 6C00                       		bge.s	locret_1A190
0001AAC8 323C 001B                  		move.w	#$1B,d1
0001AACC 343C 0070                  		move.w	#$70,d2
0001AAD0 363C 0071                  		move.w	#$71,d3
0001AAD4 3828 0008                  		move.w	8(a0),d4
0001AAD8 4EF9 0001 0238             		jmp	SolidObject
0001AADE                            ; ===========================================================================
0001AADE                            
0001AADE                            locret_1A190:
0001AADE 4E75                       		rts	
0001AAE0                            ; ===========================================================================
0001AAE0                            
0001AAE0                            loc_1A192:				; XREF: off_19E80
0001AAE0 217C 0001 86DA 0004        		move.l	#Map_Eggman,4(a0)
0001AAE8 317C 0400 0002             		move.w	#$400,2(a0)
0001AAEE 117C 0000 001C             		move.b	#0,$1C(a0)
0001AAF4 08E8 0000 0022             		bset	#0,$22(a0)
0001AAFA 4EB9 0000 DE42             		jsr	SpeedToPos
0001AB00 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AB06 6400                       		bcc.s	loc_1A1D0
0001AB08 317C 0180 0010             		move.w	#$180,$10(a0)
0001AB0E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AB14 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB1A 5428 0034                  		addq.b	#2,$34(a0)
0001AB1E                            
0001AB1E                            loc_1A1D0:
0001AB1E 6000 FF8A                  		bra.w	loc_1A15C
0001AB22                            ; ===========================================================================
0001AB22                            
0001AB22                            loc_1A1D4:				; XREF: off_19E80
0001AB22 08E8 0000 0022             		bset	#0,$22(a0)
0001AB28 4EB9 0000 DE42             		jsr	SpeedToPos
0001AB2E 4A68 0030                  		tst.w	$30(a0)
0001AB32 6600                       		bne.s	loc_1A1FC
0001AB34 4A28 0020                  		tst.b	$20(a0)
0001AB38 6600                       		bne.s	loc_1A216
0001AB3A 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AB40 303C 00AC                  		move.w	#$AC,d0
0001AB44 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB4A                            
0001AB4A                            loc_1A1FC:
0001AB4A 5368 0030                  		subq.w	#1,$30(a0)
0001AB4E 6600                       		bne.s	loc_1A216
0001AB50 4A28 0022                  		tst.b	$22(a0)
0001AB54 6A00                       		bpl.s	loc_1A210
0001AB56 317C 0060 0012             		move.w	#$60,$12(a0)
0001AB5C 6000                       		bra.s	loc_1A216
0001AB5E                            ; ===========================================================================
0001AB5E                            
0001AB5E                            loc_1A210:
0001AB5E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB64                            
0001AB64                            loc_1A216:
0001AB64 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AB6A 6D00                       		blt.s	loc_1A23A
0001AB6C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AB72 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AB78 4278 D014                  		clr.w	($FFFFD014).w
0001AB7C 4A68 0012                  		tst.w	$12(a0)
0001AB80 6A00                       		bpl.s	loc_1A248
0001AB82 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AB88                            
0001AB88                            loc_1A23A:
0001AB88 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AB8E 6D00                       		blt.s	loc_1A248
0001AB90 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AB96                            
0001AB96                            loc_1A248:
0001AB96 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AB9C 6500                       		bcs.s	loc_1A260
0001AB9E 4A28 0001                  		tst.b	1(a0)
0001ABA2 6B00                       		bmi.s	loc_1A260
0001ABA4 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001ABAA 6000 FAF4                  		bra.w	Obj85_Delete
0001ABAE                            ; ===========================================================================
0001ABAE                            
0001ABAE                            loc_1A260:
0001ABAE 6000 FEFA                  		bra.w	loc_1A15C
0001ABB2                            ; ===========================================================================
0001ABB2                            
0001ABB2                            loc_1A264:				; XREF: Obj85_Index
0001ABB2 2268 0034                  		movea.l	$34(a0),a1
0001ABB6 1011                       		move.b	(a1),d0
0001ABB8 B010                       		cmp.b	(a0),d0
0001ABBA 6600 FAE4                  		bne.w	Obj85_Delete
0001ABBE 117C 0007 001C             		move.b	#7,$1C(a0)
0001ABC4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ABCA 6C00                       		bge.s	loc_1A280
0001ABCC 6000                       		bra.s	loc_1A2A6
0001ABCE                            ; ===========================================================================
0001ABCE                            
0001ABCE                            loc_1A280:
0001ABCE 4A69 0010                  		tst.w	$10(a1)
0001ABD2 6700                       		beq.s	loc_1A28C
0001ABD4 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ABDA                            
0001ABDA                            loc_1A28C:
0001ABDA 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001ABDE 4EB9 0000 AEEE             		jsr	AnimateSprite
0001ABE4                            
0001ABE4                            loc_1A296:
0001ABE4 2268 0034                  		movea.l	$34(a0),a1
0001ABE8 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABEE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABF4                            
0001ABF4                            loc_1A2A6:
0001ABF4 2268 0034                  		movea.l	$34(a0),a1
0001ABF8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ABFE 7003                       		moveq	#3,d0
0001AC00 C028 0022                  		and.b	$22(a0),d0
0001AC04 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AC0A 8128 0001                  		or.b	d0,1(a0)
0001AC0E 4EF9 0000 DE68             		jmp	DisplaySprite
0001AC14                            ; ===========================================================================
0001AC14                            
0001AC14                            loc_1A2C6:				; XREF: Obj85_Index
0001AC14 2268 0034                  		movea.l	$34(a0),a1
0001AC18 1011                       		move.b	(a1),d0
0001AC1A B010                       		cmp.b	(a0),d0
0001AC1C 6600 FA82                  		bne.w	Obj85_Delete
0001AC20 0CA9 0001 86DA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC28 6700                       		beq.s	loc_1A2E4
0001AC2A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AC30 60C2                       		bra.s	loc_1A2A6
0001AC32                            ; ===========================================================================
0001AC32                            
0001AC32                            loc_1A2E4:
0001AC32 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC38 4A29 0021                  		tst.b	$21(a1)
0001AC3C 6F00                       		ble.s	loc_1A312
0001AC3E 117C 0006 001C             		move.b	#6,$1C(a0)
0001AC44 217C 0001 86DA 0004        		move.l	#Map_Eggman,4(a0)
0001AC4C 317C 0400 0002             		move.w	#$400,2(a0)
0001AC52 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AC56 4EB9 0000 AEEE             		jsr	AnimateSprite
0001AC5C 6000 FF86                  		bra.w	loc_1A296
0001AC60                            ; ===========================================================================
0001AC60                            
0001AC60                            loc_1A312:
0001AC60 4A28 0001                  		tst.b	1(a0)
0001AC64 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AC68 6100 D588                  		bsr.w	BossDefeated
0001AC6C 117C 0002 0018             		move.b	#2,$18(a0)
0001AC72 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC78 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AC80 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AC86 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AC8A 4EB9 0000 AEEE             		jsr	AnimateSprite
0001AC90 6000 FF52                  		bra.w	loc_1A296
0001AC94                            ; ===========================================================================
0001AC94                            
0001AC94                            loc_1A346:				; XREF: Obj85_Index
0001AC94 08E8 0000 0022             		bset	#0,$22(a0)
0001AC9A 2268 0034                  		movea.l	$34(a0),a1
0001AC9E 0CA9 0001 86DA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ACA6 6700                       		beq.s	loc_1A35E
0001ACA8 6000 FF4A                  		bra.w	loc_1A2A6
0001ACAC                            ; ===========================================================================
0001ACAC                            
0001ACAC                            loc_1A35E:
0001ACAC 3169 0008 0008             		move.w	8(a1),8(a0)
0001ACB2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ACB8 4A28 001E                  		tst.b	$1E(a0)
0001ACBC 6600                       		bne.s	loc_1A376
0001ACBE 117C 0014 001E             		move.b	#$14,$1E(a0)
0001ACC4                            
0001ACC4                            loc_1A376:
0001ACC4 5328 001E                  		subq.b	#1,$1E(a0)
0001ACC8 6E00                       		bgt.s	loc_1A38A
0001ACCA 5228 001A                  		addq.b	#1,$1A(a0)
0001ACCE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001ACD4 6E00 F9CA                  		bgt.w	Obj85_Delete
0001ACD8                            
0001ACD8                            loc_1A38A:
0001ACD8 6000 FF0A                  		bra.w	loc_1A296
0001ACDC                            ; ===========================================================================
0001ACDC                            
0001ACDC                            loc_1A38E:				; XREF: Obj85_Index
0001ACDC 117C 000B 001A             		move.b	#$B,$1A(a0)
0001ACE2 3038 D008                  		move.w	($FFFFD008).w,d0
0001ACE6 9068 0008                  		sub.w	8(a0),d0
0001ACEA 6500                       		bcs.s	loc_1A3A6
0001ACEC 4A28 0001                  		tst.b	1(a0)
0001ACF0 6A00 F9AE                  		bpl.w	Obj85_Delete
0001ACF4                            
0001ACF4                            loc_1A3A6:
0001ACF4 4EF9 0000 DE68             		jmp	DisplaySprite
0001ACFA                            ; ===========================================================================
0001ACFA                            
0001ACFA                            loc_1A3AC:				; XREF: Obj85_Index
0001ACFA 117C 0000 001A             		move.b	#0,$1A(a0)
0001AD00 08E8 0000 0022             		bset	#0,$22(a0)
0001AD06 2268 0034                  		movea.l	$34(a0),a1
0001AD0A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AD10 6600                       		bne.s	loc_1A3D0
0001AD12 0CA9 0001 86DA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AD1A 6700 F984                  		beq.w	Obj85_Delete
0001AD1E                            
0001AD1E                            loc_1A3D0:
0001AD1E 6000 FED4                  		bra.w	loc_1A2A6
0001AD22                            ; ===========================================================================
0001AD22                            Ani_obj85:
0001AD22                            	include "_anim\obj85.asm"
0001AD22                            ; ---------------------------------------------------------------------------
0001AD22                            ; Animation script - Eggman (FZ)
0001AD22                            ; ---------------------------------------------------------------------------
0001AD22 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AD24 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AD28                            		even
0001AD28                            		even
0001AD28                            
0001AD28                            Map_Eggman2:
0001AD28                            	include "_maps\Eggman2.asm"
0001AD28                            ; ---------------------------------------------------------------------------
0001AD28                            ; Sprite mappings - Eggman (FZ)
0001AD28                            ; ---------------------------------------------------------------------------
0001AD28 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AD2A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AD2C 06                         byte_1A3DE:	dc.b 6
0001AD2D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AD32 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AD37 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AD3C FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AD41 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AD46 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AD4B 06                         byte_1A3FD:	dc.b 6
0001AD4C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AD51 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AD56 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AD5B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AD60 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AD65 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AD6A                            		even
0001AD6A                            		even
0001AD6A                            
0001AD6A                            Map_FZBoss:
0001AD6A                            	include "_maps\FZ boss.asm"
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A                            ; Sprite mappings - boss (FZ)
0001AD6A                            ; ---------------------------------------------------------------------------
0001AD6A 0000                       		dc.w byte_1A422-Map_FZBoss
0001AD6C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AD6E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AD70 02                         byte_1A422:	dc.b 2
0001AD71 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AD76 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AD7B 03                         byte_1A42D:	dc.b 3
0001AD7C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AD81 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AD86 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AD8B 02                         byte_1A43D:	dc.b 2
0001AD8C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AD91 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AD96                            		even
0001AD96                            		even
0001AD96                            
0001AD96                            ; ===========================================================================
0001AD96                            
0001AD96                            Obj84_Delete:
0001AD96 4EF9 0000 DEA4             		jmp	DeleteObject
0001AD9C                            ; ===========================================================================
0001AD9C                            ; ---------------------------------------------------------------------------
0001AD9C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AD9C                            ; ---------------------------------------------------------------------------
0001AD9C                            
0001AD9C                            Obj84:					; XREF: Obj_Index
0001AD9C 7000                       		moveq	#0,d0
0001AD9E 1028 0024                  		move.b	$24(a0),d0
0001ADA2 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001ADA6 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001ADAA                            ; ===========================================================================
0001ADAA 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001ADAC 0000                       		dc.w loc_1A4CE-Obj84_Index
0001ADAE 0000                       		dc.w loc_1A57E-Obj84_Index
0001ADB0                            
0001ADB0 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001ADB4 2550 0620                  		dc.w $2550, $620
0001ADB8 2490 04C0                  		dc.w $2490, $4C0
0001ADBC 2510 04C0                  		dc.w $2510, $4C0
0001ADC0                            ; ===========================================================================
0001ADC0                            
0001ADC0                            Obj84_Main:				; XREF: Obj84_Index
0001ADC0 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001ADC4 7000                       		moveq	#0,d0
0001ADC6 1028 0028                  		move.b	$28(a0),d0
0001ADCA D040                       		add.w	d0,d0
0001ADCC D2C0                       		adda.w	d0,a1
0001ADCE 117C 0004 0001             		move.b	#4,1(a0)
0001ADD4 08E8 0007 0001             		bset	#7,1(a0)
0001ADDA 08E8 0004 0001             		bset	#4,1(a0)
0001ADE0 317C 0300 0002             		move.w	#$300,2(a0)
0001ADE6 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ADEE 3159 0008                  		move.w	(a1)+,8(a0)
0001ADF2 3151 000C                  		move.w	(a1),$C(a0)
0001ADF6 3159 0038                  		move.w	(a1)+,$38(a0)
0001ADFA 117C 0020 0016             		move.b	#$20,$16(a0)
0001AE00 117C 0060 0017             		move.b	#$60,$17(a0)
0001AE06 117C 0020 0019             		move.b	#$20,$19(a0)
0001AE0C 117C 0060 0016             		move.b	#$60,$16(a0)
0001AE12 117C 0003 0018             		move.b	#3,$18(a0)
0001AE18 5428 0024                  		addq.b	#2,$24(a0)
0001AE1C                            
0001AE1C                            loc_1A4CE:				; XREF: Obj84_Index
0001AE1C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE22 6F00                       		ble.s	loc_1A4DC
0001AE24 08E8 0001 0001             		bset	#1,1(a0)
0001AE2A                            
0001AE2A                            loc_1A4DC:
0001AE2A 42A8 003C                  		clr.l	$3C(a0)
0001AE2E 4A28 0029                  		tst.b	$29(a0)
0001AE32 6700                       		beq.s	loc_1A4EA
0001AE34 5428 0024                  		addq.b	#2,$24(a0)
0001AE38                            
0001AE38                            loc_1A4EA:
0001AE38 2028 003C                  		move.l	$3C(a0),d0
0001AE3C 2228 0038                  		move.l	$38(a0),d1
0001AE40 D280                       		add.l	d0,d1
0001AE42 4841                       		swap	d1
0001AE44 3141 000C                  		move.w	d1,$C(a0)
0001AE48 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AE4E 6600                       		bne.s	loc_1A524
0001AE50 4A68 0030                  		tst.w	$30(a0)
0001AE54 6A00                       		bpl.s	loc_1A524
0001AE56 70F6                       		moveq	#-$A,d0
0001AE58 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE5E 6F00                       		ble.s	loc_1A514
0001AE60 700E                       		moveq	#$E,d0
0001AE62                            
0001AE62                            loc_1A514:
0001AE62 D240                       		add.w	d0,d1
0001AE64 2268 0034                  		movea.l	$34(a0),a1
0001AE68 3341 000C                  		move.w	d1,$C(a1)
0001AE6C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE72                            
0001AE72                            loc_1A524:
0001AE72 323C 002B                  		move.w	#$2B,d1
0001AE76 343C 0060                  		move.w	#$60,d2
0001AE7A 363C 0061                  		move.w	#$61,d3
0001AE7E 3828 0008                  		move.w	8(a0),d4
0001AE82 4EB9 0001 0238             		jsr	SolidObject
0001AE88 7000                       		moveq	#0,d0
0001AE8A 3228 003C                  		move.w	$3C(a0),d1
0001AE8E 6A00                       		bpl.s	loc_1A550
0001AE90 4441                       		neg.w	d1
0001AE92 5141                       		subq.w	#8,d1
0001AE94 6500                       		bcs.s	loc_1A55C
0001AE96 5200                       		addq.b	#1,d0
0001AE98 E841                       		asr.w	#4,d1
0001AE9A D041                       		add.w	d1,d0
0001AE9C 6000                       		bra.s	loc_1A55C
0001AE9E                            ; ===========================================================================
0001AE9E                            
0001AE9E                            loc_1A550:
0001AE9E 0441 0027                  		subi.w	#$27,d1
0001AEA2 6500                       		bcs.s	loc_1A55C
0001AEA4 5200                       		addq.b	#1,d0
0001AEA6 E841                       		asr.w	#4,d1
0001AEA8 D041                       		add.w	d1,d0
0001AEAA                            
0001AEAA                            loc_1A55C:
0001AEAA 1140 001A                  		move.b	d0,$1A(a0)
0001AEAE 3038 D008                  		move.w	($FFFFD008).w,d0
0001AEB2 9068 0008                  		sub.w	8(a0),d0
0001AEB6 6B00                       		bmi.s	loc_1A578
0001AEB8 0440 0140                  		subi.w	#$140,d0
0001AEBC 6B00                       		bmi.s	loc_1A578
0001AEBE 4A28 0001                  		tst.b	1(a0)
0001AEC2 6A00 FED2                  		bpl.w	Obj84_Delete
0001AEC6                            
0001AEC6                            loc_1A578:
0001AEC6 4EF9 0000 DE68             		jmp	DisplaySprite
0001AECC                            ; ===========================================================================
0001AECC                            
0001AECC                            loc_1A57E:				; XREF: Obj84_Index
0001AECC 7000                       		moveq	#0,d0
0001AECE 1028 0028                  		move.b	$28(a0),d0
0001AED2 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AED6 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AEDA 6000 FF5C                  		bra.w	loc_1A4EA
0001AEDE                            ; ===========================================================================
0001AEDE 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AEE0 0000                       		dc.w loc_1A598-off_1A590
0001AEE2 0000                       		dc.w loc_1A604-off_1A590
0001AEE4 0000                       		dc.w loc_1A604-off_1A590
0001AEE6                            ; ===========================================================================
0001AEE6                            
0001AEE6                            loc_1A598:				; XREF: off_1A590
0001AEE6 4A28 0029                  		tst.b	$29(a0)
0001AEEA 6600                       		bne.s	loc_1A5D4
0001AEEC 2268 0034                  		movea.l	$34(a0),a1
0001AEF0 4A29 0021                  		tst.b	$21(a1)
0001AEF4 6600                       		bne.s	loc_1A5B4
0001AEF6 6100 D2FA                  		bsr.w	BossDefeated
0001AEFA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AF02                            
0001AF02                            loc_1A5B4:
0001AF02 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AF0A 6400                       		bcc.s	locret_1A602
0001AF0C 42A8 003C                  		clr.l	$3C(a0)
0001AF10 2268 0034                  		movea.l	$34(a0),a1
0001AF14 5369 0032                  		subq.w	#1,$32(a1)
0001AF18 4269 0030                  		clr.w	$30(a1)
0001AF1C 5528 0024                  		subq.b	#2,$24(a0)
0001AF20 4E75                       		rts	
0001AF22                            ; ===========================================================================
0001AF22                            
0001AF22                            loc_1A5D4:
0001AF22 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AF28 6C00                       		bge.s	loc_1A5E4
0001AF2A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AF32                            
0001AF32                            loc_1A5E4:
0001AF32 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AF3A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AF40 6E00                       		bgt.s	locret_1A602
0001AF42 4268 003E                  		clr.w	$3E(a0)
0001AF46 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AF4C 4228 0029                  		clr.b	$29(a0)
0001AF50                            
0001AF50                            locret_1A602:
0001AF50 4E75                       		rts	
0001AF52                            ; ===========================================================================
0001AF52                            
0001AF52                            loc_1A604:				; XREF: off_1A590
0001AF52 08E8 0001 0001             		bset	#1,1(a0)
0001AF58 4A28 0029                  		tst.b	$29(a0)
0001AF5C 6600                       		bne.s	loc_1A646
0001AF5E 2268 0034                  		movea.l	$34(a0),a1
0001AF62 4A29 0021                  		tst.b	$21(a1)
0001AF66 6600                       		bne.s	loc_1A626
0001AF68 6100 D288                  		bsr.w	BossDefeated
0001AF6C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AF74                            
0001AF74                            loc_1A626:
0001AF74 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AF7C 6400                       		bcc.s	locret_1A674
0001AF7E 42A8 003C                  		clr.l	$3C(a0)
0001AF82 2268 0034                  		movea.l	$34(a0),a1
0001AF86 5369 0032                  		subq.w	#1,$32(a1)
0001AF8A 4269 0030                  		clr.w	$30(a1)
0001AF8E 5528 0024                  		subq.b	#2,$24(a0)
0001AF92 4E75                       		rts	
0001AF94                            ; ===========================================================================
0001AF94                            
0001AF94                            loc_1A646:
0001AF94 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AF9A 6D00                       		blt.s	loc_1A656
0001AF9C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AFA4                            
0001AFA4                            loc_1A656:
0001AFA4 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AFAC 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AFB2 6D00                       		blt.s	locret_1A674
0001AFB4 4268 003E                  		clr.w	$3E(a0)
0001AFB8 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AFBE 4228 0029                  		clr.b	$29(a0)
0001AFC2                            
0001AFC2                            locret_1A674:
0001AFC2 4E75                       		rts	
0001AFC4                            ; ===========================================================================
0001AFC4                            ; ---------------------------------------------------------------------------
0001AFC4                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AFC4                            ; ---------------------------------------------------------------------------
0001AFC4                            Map_obj84:
0001AFC4                            	include "_maps\obj84.asm"
0001AFC4                            ; ---------------------------------------------------------------------------
0001AFC4                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AFC4                            ; ---------------------------------------------------------------------------
0001AFC4 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AFC8 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AFCC 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AFD0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AFD4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AFD8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AFDC 06                         byte_1A68E:	dc.b 6
0001AFDD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFE2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFE7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFEC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFF1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFF6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFFB 08                         byte_1A6AD:	dc.b 8
0001AFFC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B001 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B006 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B00B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B010 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B015 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B01A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B01F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B024 0A                         byte_1A6D6:	dc.b $A
0001B025 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B02A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B02F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B034 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B039 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B03E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B043 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B048 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B04D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B052 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B057 0C                         byte_1A709:	dc.b $C
0001B058 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B05D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B062 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B067 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B06C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B071 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B076 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B07B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B080 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B085 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B08A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B08F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B094 0D                         byte_1A746:	dc.b $D
0001B095 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B09A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B09F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0A4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0A9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0AE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0B3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0B8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0BD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0C2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0C7 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B0CC 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B0D1 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B0D6 0E                         byte_1A788:	dc.b $E
0001B0D7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0DC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0E1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0E6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0EB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0F0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0F5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0FA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0FF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B104 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B109 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B10E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B113 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B118 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B11D 02                         byte_1A7CF:	dc.b 2
0001B11E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B123 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B128                            		even
0001B128                            		even
0001B128                            
0001B128                            ; ===========================================================================
0001B128                            ; ---------------------------------------------------------------------------
0001B128                            ; Object 86 - energy balls (FZ)
0001B128                            ; ---------------------------------------------------------------------------
0001B128                            
0001B128                            Obj86:					; XREF: Obj_Index
0001B128 7000                       		moveq	#0,d0
0001B12A 1028 0024                  		move.b	$24(a0),d0
0001B12E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B132 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B136                            ; ===========================================================================
0001B136 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B138 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B13A 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B13C 0000                       		dc.w loc_1A962-Obj86_Index
0001B13E 0000                       		dc.w loc_1A982-Obj86_Index
0001B140                            ; ===========================================================================
0001B140                            
0001B140                            Obj86_Main:				; XREF: Obj86_Index
0001B140 317C 2588 0008             		move.w	#$2588,8(a0)
0001B146 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B14C 317C 0300 0002             		move.w	#$300,2(a0)
0001B152 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B15A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B160 117C 0003 0018             		move.b	#3,$18(a0)
0001B166 117C 0008 0017             		move.b	#8,$17(a0)
0001B16C 117C 0008 0016             		move.b	#8,$16(a0)
0001B172 117C 0004 0001             		move.b	#4,1(a0)
0001B178 08E8 0007 0001             		bset	#7,1(a0)
0001B17E 5428 0024                  		addq.b	#2,$24(a0)
0001B182                            
0001B182                            Obj86_Generator:			; XREF: Obj86_Index
0001B182 2268 0034                  		movea.l	$34(a0),a1
0001B186 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B18C 6600                       		bne.s	loc_1A850
0001B18E 10BC 003F                  		move.b	#$3F,(a0)
0001B192 117C 0000 0024             		move.b	#0,$24(a0)
0001B198 4EF9 0000 DE68             		jmp	DisplaySprite
0001B19E                            ; ===========================================================================
0001B19E                            
0001B19E                            loc_1A850:
0001B19E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B1A4 4A28 0029                  		tst.b	$29(a0)
0001B1A8 6700                       		beq.s	loc_1A86C
0001B1AA 5428 0024                  		addq.b	#2,$24(a0)
0001B1AE 117C 0001 001C             		move.b	#1,$1C(a0)
0001B1B4 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B1BA                            
0001B1BA                            loc_1A86C:
0001B1BA 323C 0013                  		move.w	#$13,d1
0001B1BE 343C 0008                  		move.w	#8,d2
0001B1C2 363C 0011                  		move.w	#$11,d3
0001B1C6 3828 0008                  		move.w	8(a0),d4
0001B1CA 4EB9 0001 0238             		jsr	SolidObject
0001B1D0 3038 D008                  		move.w	($FFFFD008).w,d0
0001B1D4 9068 0008                  		sub.w	8(a0),d0
0001B1D8 6B00                       		bmi.s	loc_1A89A
0001B1DA 0440 0140                  		subi.w	#$140,d0
0001B1DE 6B00                       		bmi.s	loc_1A89A
0001B1E0 4A28 0001                  		tst.b	1(a0)
0001B1E4 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B1E8                            
0001B1E8                            loc_1A89A:
0001B1E8 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B1EC 4EB9 0000 AEEE             		jsr	AnimateSprite
0001B1F2 4EF9 0000 DE68             		jmp	DisplaySprite
0001B1F8                            ; ===========================================================================
0001B1F8                            
0001B1F8                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B1F8 4A28 0029                  		tst.b	$29(a0)
0001B1FC 6700 0000                  		beq.w	loc_1A954
0001B200 4228 0029                  		clr.b	$29(a0)
0001B204 D068 0030                  		add.w	$30(a0),d0
0001B208 0240 001E                  		andi.w	#$1E,d0
0001B20C D4C0                       		adda.w	d0,a2
0001B20E 5868 0030                  		addq.w	#4,$30(a0)
0001B212 4268 0032                  		clr.w	$32(a0)
0001B216 7403                       		moveq	#3,d2
0001B218                            
0001B218                            Obj86_Loop:
0001B218 4EB9 0000 E304             		jsr	SingleObjLoad2
0001B21E 6600 0000                  		bne.w	loc_1A954
0001B222 12BC 0086                  		move.b	#$86,(a1)
0001B226 3368 0008 0008             		move.w	8(a0),8(a1)
0001B22C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B232 137C 0008 0024             		move.b	#8,$24(a1)
0001B238 337C 2300 0002             		move.w	#$2300,2(a1)
0001B23E 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B246 137C 000C 0016             		move.b	#$C,$16(a1)
0001B24C 137C 000C 0017             		move.b	#$C,$17(a1)
0001B252 137C 0000 0020             		move.b	#0,$20(a1)
0001B258 137C 0003 0018             		move.b	#3,$18(a1)
0001B25E 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B264 137C 0004 0001             		move.b	#4,1(a1)
0001B26A 08E9 0007 0001             		bset	#7,1(a1)
0001B270 2348 0034                  		move.l	a0,$34(a1)
0001B274 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001B27A 3228 0032                  		move.w	$32(a0),d1
0001B27E C3FC FFB1                  		muls.w	#-$4F,d1
0001B282 0641 2578                  		addi.w	#$2578,d1
0001B286 0240 001F                  		andi.w	#$1F,d0
0001B28A 0440 0010                  		subi.w	#$10,d0
0001B28E D041                       		add.w	d1,d0
0001B290 3340 0030                  		move.w	d0,$30(a1)
0001B294 5268 0032                  		addq.w	#1,$32(a0)
0001B298 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B29E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B2A2                            
0001B2A2                            loc_1A954:
0001B2A2 4A68 0032                  		tst.w	$32(a0)
0001B2A6 6600                       		bne.s	loc_1A95E
0001B2A8 5428 0024                  		addq.b	#2,$24(a0)
0001B2AC                            
0001B2AC                            loc_1A95E:
0001B2AC 6000 FF0C                  		bra.w	loc_1A86C
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            loc_1A962:				; XREF: Obj86_Index
0001B2B0 117C 0002 001C             		move.b	#2,$1C(a0)
0001B2B6 4A68 0038                  		tst.w	$38(a0)
0001B2BA 6600                       		bne.s	loc_1A97E
0001B2BC 117C 0002 0024             		move.b	#2,$24(a0)
0001B2C2 2268 0034                  		movea.l	$34(a0),a1
0001B2C6 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B2CC                            
0001B2CC                            loc_1A97E:
0001B2CC 6000 FEEC                  		bra.w	loc_1A86C
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            loc_1A982:				; XREF: Obj86_Index
0001B2D0 7000                       		moveq	#0,d0
0001B2D2 1028 0025                  		move.b	$25(a0),d0
0001B2D6 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B2DA 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B2DE 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B2E2 4EB9 0000 AEEE             		jsr	AnimateSprite
0001B2E8 4EF9 0000 DE68             		jmp	DisplaySprite
0001B2EE                            ; ===========================================================================
0001B2EE 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B2F0 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B2F2 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B2F4                            ; ===========================================================================
0001B2F4                            
0001B2F4                            loc_1A9A6:				; XREF: Obj86_Index2
0001B2F4 3028 0030                  		move.w	$30(a0),d0
0001B2F8 9068 0008                  		sub.w	8(a0),d0
0001B2FC E940                       		asl.w	#4,d0
0001B2FE 3140 0010                  		move.w	d0,$10(a0)
0001B302 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B308 5428 0025                  		addq.b	#2,$25(a0)
0001B30C 4E75                       		rts	
0001B30E                            ; ===========================================================================
0001B30E                            
0001B30E                            loc_1A9C0:				; XREF: Obj86_Index2
0001B30E 4A68 0010                  		tst.w	$10(a0)
0001B312 6700                       		beq.s	loc_1A9E6
0001B314 4EB9 0000 DE42             		jsr	SpeedToPos
0001B31A 3028 0008                  		move.w	8(a0),d0
0001B31E 9068 0030                  		sub.w	$30(a0),d0
0001B322 6400                       		bcc.s	loc_1A9E6
0001B324 4268 0010                  		clr.w	$10(a0)
0001B328 D168 0008                  		add.w	d0,8(a0)
0001B32C 2268 0034                  		movea.l	$34(a0),a1
0001B330 5369 0032                  		subq.w	#1,$32(a1)
0001B334                            
0001B334                            loc_1A9E6:
0001B334 117C 0000 001C             		move.b	#0,$1C(a0)
0001B33A 5368 0028                  		subq.w	#1,$28(a0)
0001B33E 6600                       		bne.s	locret_1AA1C
0001B340 5428 0025                  		addq.b	#2,$25(a0)
0001B344 117C 0001 001C             		move.b	#1,$1C(a0)
0001B34A 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B350 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B356 7000                       		moveq	#0,d0
0001B358 3038 D008                  		move.w	($FFFFD008).w,d0
0001B35C 9068 0008                  		sub.w	8(a0),d0
0001B360 3140 0010                  		move.w	d0,$10(a0)
0001B364 317C 0140 0012             		move.w	#$140,$12(a0)
0001B36A                            
0001B36A                            locret_1AA1C:
0001B36A 4E75                       		rts	
0001B36C                            ; ===========================================================================
0001B36C                            
0001B36C                            loc_1AA1E:				; XREF: Obj86_Index2
0001B36C 4EB9 0000 DE42             		jsr	SpeedToPos
0001B372 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B378 6400                       		bcc.s	loc_1AA34
0001B37A 5368 0028                  		subq.w	#1,$28(a0)
0001B37E 6700                       		beq.s	loc_1AA34
0001B380 4E75                       		rts	
0001B382                            ; ===========================================================================
0001B382                            
0001B382                            loc_1AA34:
0001B382 2268 0034                  		movea.l	$34(a0),a1
0001B386 5369 0038                  		subq.w	#1,$38(a1)
0001B38A 6000 FA0A                  		bra.w	Obj84_Delete
0001B38E                            ; ===========================================================================
0001B38E                            Ani_obj86:
0001B38E                            	include "_anim\obj86.asm"
0001B38E                            ; ---------------------------------------------------------------------------
0001B38E                            ; Animation script - energy ball launcher (FZ)
0001B38E                            ; ---------------------------------------------------------------------------
0001B38E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B390 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B392 0000                       		dc.w byte_1AA50-Ani_obj86
0001B394 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B398 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B39E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B3A4                            		even
0001B3A4                            		even
0001B3A4                            
0001B3A4                            ; ---------------------------------------------------------------------------
0001B3A4                            ; Sprite mappings - energy ball	launcher (FZ)
0001B3A4                            ; ---------------------------------------------------------------------------
0001B3A4                            Map_obj86:
0001B3A4                            	include "_maps\obj86.asm"
0001B3A4                            ; ---------------------------------------------------------------------------
0001B3A4                            ; Sprite mappings - energy ball	launcher (FZ)
0001B3A4                            ; ---------------------------------------------------------------------------
0001B3A4 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B3A8 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B3AC 01                         byte_1AA5E:	dc.b 1
0001B3AD F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B3B2 01                         byte_1AA64:	dc.b 1
0001B3B3 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B3B8 01                         byte_1AA6A:	dc.b 1
0001B3B9 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B3BE 01                         byte_1AA70:	dc.b 1
0001B3BF F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B3C4                            		even
0001B3C4                            		even
0001B3C4                            
0001B3C4                            Ani_obj86a:
0001B3C4                            	include "_anim\obj86a.asm"
0001B3C4                            ; ---------------------------------------------------------------------------
0001B3C4                            ; Animation script - energy balls (FZ)
0001B3C4                            ; ---------------------------------------------------------------------------
0001B3C4 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B3C6 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B3C8 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B3D7 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B3E6 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B3EA 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B3F4                            		even
0001B3F4                            		even
0001B3F4                            
0001B3F4                            ; ---------------------------------------------------------------------------
0001B3F4                            ; Sprite mappings - energy balls (FZ)
0001B3F4                            ; ---------------------------------------------------------------------------
0001B3F4                            Map_obj86a:
0001B3F4                            	include "_maps\obj86a.asm"
0001B3F4                            ; ---------------------------------------------------------------------------
0001B3F4                            ; Sprite mappings - energy balls (FZ)
0001B3F4                            ; ---------------------------------------------------------------------------
0001B3F4 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B3F8 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B3FC 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B400 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B404 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B408 0000                       		dc.w byte_1AB20-Map_obj86a
0001B40A 02                         byte_1AABC:	dc.b 2
0001B40B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B410 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B415 02                         byte_1AAC7:	dc.b 2
0001B416 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B41B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B420 02                         byte_1AAD2:	dc.b 2
0001B421 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B426 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B42B 02                         byte_1AADD:	dc.b 2
0001B42C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B431 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B436 02                         byte_1AAE8:	dc.b 2
0001B437 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B43C 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B441 02                         byte_1AAF3:	dc.b 2
0001B442 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B447 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B44C 01                         byte_1AAFE:	dc.b 1
0001B44D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B452 01                         byte_1AB04:	dc.b 1
0001B453 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B458 02                         byte_1AB0A:	dc.b 2
0001B459 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B45E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B463 02                         byte_1AB15:	dc.b 2
0001B464 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B469 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B46E 00                         byte_1AB20:	dc.b 0
0001B470 00                         		even
0001B470 00                         		even
0001B470                            
0001B470                            ; ===========================================================================
0001B470                            ; ---------------------------------------------------------------------------
0001B470                            ; Object 3E - prison capsule
0001B470                            ; ---------------------------------------------------------------------------
0001B470                            
0001B470                            Obj3E:					; XREF: Obj_Index
0001B470 7000                       		moveq	#0,d0
0001B472 1028 0024                  		move.b	$24(a0),d0
0001B476 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B47A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B47E 3028 0008                  		move.w	8(a0),d0
0001B482 0240 FF80                  		andi.w	#$FF80,d0
0001B486 3238 F700                  		move.w	($FFFFF700).w,d1
0001B48A 0441 0080                  		subi.w	#$80,d1
0001B48E 0241 FF80                  		andi.w	#$FF80,d1
0001B492 9041                       		sub.w	d1,d0
0001B494 0C40 0280                  		cmpi.w	#$280,d0
0001B498 6200                       		bhi.s	Obj3E_Delete
0001B49A 4EF9 0000 DE68             		jmp	DisplaySprite
0001B4A0                            ; ===========================================================================
0001B4A0                            
0001B4A0                            Obj3E_Delete:
0001B4A0 4EF9 0000 DEA4             		jmp	DeleteObject
0001B4A6                            ; ===========================================================================
0001B4A6 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B4A8 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B4AA 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B4AC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B4AE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B4B0 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B4B2 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B4B4 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B4B6                            
0001B4B6 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B4BA 040C 0501                  		dc.b 4,	$C, 5, 1
0001B4BE 0610 0403                  		dc.b 6,	$10, 4,	3
0001B4C2 0810 0305                  		dc.b 8,	$10, 3,	5
0001B4C6                            ; ===========================================================================
0001B4C6                            
0001B4C6                            Obj3E_Main:				; XREF: Obj3E_Index
0001B4C6 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B4CE 317C 049D 0002             		move.w	#$49D,2(a0)
0001B4D4 117C 0004 0001             		move.b	#4,1(a0)
0001B4DA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B4E0 7000                       		moveq	#0,d0
0001B4E2 1028 0028                  		move.b	$28(a0),d0
0001B4E6 E548                       		lsl.w	#2,d0
0001B4E8 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B4EC 1159 0024                  		move.b	(a1)+,$24(a0)
0001B4F0 1159 0019                  		move.b	(a1)+,$19(a0)
0001B4F4 1159 0018                  		move.b	(a1)+,$18(a0)
0001B4F8 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B4FC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B500 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B502 117C 0006 0020             		move.b	#6,$20(a0)
0001B508 117C 0008 0021             		move.b	#8,$21(a0)
0001B50E                            
0001B50E                            Obj3E_Not02:
0001B50E 4E75                       		rts	
0001B510                            ; ===========================================================================
0001B510                            
0001B510                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B510 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B516 6700                       		beq.s	Obj3E_ChkOpened
0001B518 323C 002B                  		move.w	#$2B,d1
0001B51C 343C 0018                  		move.w	#$18,d2
0001B520 363C 0018                  		move.w	#$18,d3
0001B524 3828 0008                  		move.w	8(a0),d4
0001B528 4EF9 0001 0238             		jmp	SolidObject
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            Obj3E_ChkOpened:
0001B52E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B532 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B534 4228 0025                  		clr.b	$25(a0)
0001B538 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B53E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B544                            
0001B544                            Obj3E_DoOpen:
0001B544 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B54A 4E75                       		rts	
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B54C 323C 0017                  		move.w	#$17,d1
0001B550 343C 0008                  		move.w	#8,d2
0001B554 363C 0008                  		move.w	#8,d3
0001B558 3828 0008                  		move.w	8(a0),d4
0001B55C 4EB9 0001 0238             		jsr	SolidObject
0001B562 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B568 4EB9 0000 AEEE             		jsr	AnimateSprite
0001B56E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B574 4A28 0025                  		tst.b	$25(a0)
0001B578 6700                       		beq.s	locret_1AC60
0001B57A 5068 000C                  		addq.w	#8,$C(a0)
0001B57E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B584 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B58A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B58E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B592 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B598 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B59E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B5A0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B5A6 6000                       		bra.s	Obj3E_ContinueCode
0001B5A8                            
0001B5A8                            Obj3E_MoveLeft:
0001B5A8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B5AE                            
0001B5AE                            Obj3E_ContinueCode:
0001B5AE 4228 0025                  		clr.b	$25(a0)
0001B5B2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B5B8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B5BE                            
0001B5BE                            locret_1AC60:
0001B5BE 4E75                       		rts	
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B5C0 7007                       		moveq	#7,d0
0001B5C2 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5C6 6600                       		bne.s	loc_1ACA0
0001B5C8 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B5CE 6600                       		bne.s	loc_1ACA0
0001B5D0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B5D4 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5E0 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001B5E6 7200                       		moveq	#0,d1
0001B5E8 1200                       		move.b	d0,d1
0001B5EA E409                       		lsr.b	#2,d1
0001B5EC 0441 0020                  		subi.w	#$20,d1
0001B5F0 D369 0008                  		add.w	d1,8(a1)
0001B5F4 E048                       		lsr.w	#8,d0
0001B5F6 E608                       		lsr.b	#3,d0
0001B5F8 D169 000C                  		add.w	d0,$C(a1)
0001B5FC                            
0001B5FC                            loc_1ACA0:
0001B5FC 5368 001E                  		subq.w	#1,$1E(a0)
0001B600 6700                       		beq.s	Obj3E_MakeAnimal
0001B602 4E75                       		rts	
0001B604                            ; ===========================================================================
0001B604                            
0001B604                            Obj3E_MakeAnimal:
0001B604 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B60A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B610 117C 0006 001A             		move.b	#6,$1A(a0)
0001B616 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B61C 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B622 7C07                       		moveq	#7,d6
0001B624 3A3C 009A                  		move.w	#$9A,d5
0001B628 78E4                       		moveq	#-$1C,d4
0001B62A                            
0001B62A                            Obj3E_Loop:
0001B62A 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B630 6600                       		bne.s	locret_1ACF8
0001B632 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B636 3368 0008 0008             		move.w	8(a0),8(a1)
0001B63C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B642 D969 0008                  		add.w	d4,8(a1)
0001B646 5E44                       		addq.w	#7,d4
0001B648 3345 0036                  		move.w	d5,$36(a1)
0001B64C 5145                       		subq.w	#8,d5
0001B64E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B652                            
0001B652                            locret_1ACF8:
0001B652 4E75                       		rts	
0001B654                            ; ===========================================================================
0001B654                            
0001B654                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B654 7007                       		moveq	#7,d0
0001B656 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B65A 6600                       		bne.s	loc_1AD38
0001B65C 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B662 6600                       		bne.s	loc_1AD38
0001B664 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B668 3368 0008 0008             		move.w	8(a0),8(a1)
0001B66E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B674 4EB9 0000 2CDC             		jsr	(RandomNumber).l
0001B67A 0240 001F                  		andi.w	#$1F,d0
0001B67E 5D40                       		subq.w	#6,d0
0001B680 4A41                       		tst.w	d1
0001B682 6A00                       		bpl.s	loc_1AD2E
0001B684 4440                       		neg.w	d0
0001B686                            
0001B686                            loc_1AD2E:
0001B686 D169 0008                  		add.w	d0,8(a1)
0001B68A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B690                            
0001B690                            loc_1AD38:
0001B690 5368 001E                  		subq.w	#1,$1E(a0)
0001B694 6600                       		bne.s	locret_1AD48
0001B696 5428 0024                  		addq.b	#2,$24(a0)
0001B69A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B6A0                            
0001B6A0                            locret_1AD48:
0001B6A0 4E75                       		rts	
0001B6A2                            ; ===========================================================================
0001B6A2                            
0001B6A2                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B6A2 703E                       		moveq	#$3E,d0
0001B6A4 7228                       		moveq	#$28,d1
0001B6A6 7440                       		moveq	#$40,d2
0001B6A8 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B6AC                            
0001B6AC                            Obj3E_FindObj28:
0001B6AC B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B6AE 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B6B0 D2C2                       		adda.w	d2,a1		; next object RAM
0001B6B2 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B6B6                            
0001B6B6 4EB9 0000 F4F4             		jsr	GotThroughAct
0001B6BC 4EF9 0000 DEA4             		jmp	DeleteObject
0001B6C2                            ; ===========================================================================
0001B6C2                            
0001B6C2                            Obj3E_Obj28Found:
0001B6C2 4E75                       		rts	
0001B6C4                            ; ===========================================================================
0001B6C4                            Ani_obj3E:
0001B6C4                            	include "_anim\obj3E.asm"
0001B6C4                            ; ---------------------------------------------------------------------------
0001B6C4                            ; Animation script - prison capsule
0001B6C4                            ; ---------------------------------------------------------------------------
0001B6C4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B6C6 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B6C8 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B6CC                            		even
0001B6CC                            		even
0001B6CC                            
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC                            ; Sprite mappings - prison capsule
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC                            Map_obj3E:
0001B6CC                            	include "_maps\obj3E.asm"
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC                            ; Sprite mappings - prison capsule
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B6D0 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B6D4 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B6D8 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B6DA 07                         byte_1AD82:	dc.b 7
0001B6DB E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B6E0 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B6E5 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B6EA F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B6EF F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B6F4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B6F9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B6FE 01                         byte_1ADA6:	dc.b 1
0001B6FF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B704 06                         byte_1ADAC:	dc.b 6
0001B705 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B70A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B70F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B714 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B719 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B71E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B723 01                         byte_1ADCB:	dc.b 1
0001B724 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B729 02                         byte_1ADD1:	dc.b 2
0001B72A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B72F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B734 01                         byte_1ADDC:	dc.b 1
0001B735 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B73A 00                         byte_1ADE2:	dc.b 0
0001B73C 00                         		even
0001B73C 00                         		even
0001B73C                            
0001B73C                            ; ---------------------------------------------------------------------------
0001B73C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B73C                            ; ---------------------------------------------------------------------------
0001B73C                            
0001B73C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B73C                            
0001B73C                            
0001B73C                            TouchResponse:				; XREF: Obj01
0001B73C 4E71                       		nop	
0001B73E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B742 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B746 5142                       		subq.w	#8,d2
0001B748 7A00                       		moveq	#0,d5
0001B74A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B74E 5705                       		subq.b	#3,d5
0001B750 9645                       		sub.w	d5,d3
0001B752 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B758 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B75A 0643 000C                  		addi.w	#$C,d3
0001B75E 7A0A                       		moveq	#$A,d5
0001B760                            
0001B760                            Touch_NoDuck:
0001B760 383C 0010                  		move.w	#$10,d4
0001B764 DA45                       		add.w	d5,d5
0001B766 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B76A 3C3C 005F                  		move.w	#$5F,d6
0001B76E                            
0001B76E                            Touch_Loop:
0001B76E 4A29 0001                  		tst.b	1(a1)
0001B772 6A00                       		bpl.s	Touch_NextObj
0001B774 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B778 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B77A                            
0001B77A                            Touch_NextObj:
0001B77A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B77E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B782                            
0001B782 7000                       		moveq	#0,d0
0001B784 4E75                       		rts	
0001B786                            ; ===========================================================================
0001B786 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B788 0C14                       		dc.b   $C, $14
0001B78A 140C                       		dc.b  $14,  $C
0001B78C 0410                       		dc.b	4, $10
0001B78E 0C12                       		dc.b   $C, $12
0001B790 1010                       		dc.b  $10, $10
0001B792 0606                       		dc.b	6,   6
0001B794 180C                       		dc.b  $18,  $C
0001B796 0C10                       		dc.b   $C, $10
0001B798 100C                       		dc.b  $10,  $C
0001B79A 0808                       		dc.b	8,   8
0001B79C 1410                       		dc.b  $14, $10
0001B79E 1408                       		dc.b  $14,   8
0001B7A0 0E0E                       		dc.b   $E,  $E
0001B7A2 1818                       		dc.b  $18, $18
0001B7A4 2810                       		dc.b  $28, $10
0001B7A6 1018                       		dc.b  $10, $18
0001B7A8 0810                       		dc.b	8, $10
0001B7AA 2070                       		dc.b  $20, $70
0001B7AC 4020                       		dc.b  $40, $20
0001B7AE 8020                       		dc.b  $80, $20
0001B7B0 2020                       		dc.b  $20, $20
0001B7B2 0808                       		dc.b	8,   8
0001B7B4 0404                       		dc.b	4,   4
0001B7B6 2008                       		dc.b  $20,   8
0001B7B8 0C0C                       		dc.b   $C,  $C
0001B7BA 0804                       		dc.b	8,   4
0001B7BC 1804                       		dc.b  $18,   4
0001B7BE 2804                       		dc.b  $28,   4
0001B7C0 0408                       		dc.b	4,   8
0001B7C2 0418                       		dc.b	4, $18
0001B7C4 0428                       		dc.b	4, $28
0001B7C6 0420                       		dc.b	4, $20
0001B7C8 1818                       		dc.b  $18, $18
0001B7CA 0C18                       		dc.b   $C, $18
0001B7CC 4808                       		dc.b  $48,   8
0001B7CE                            ; ===========================================================================
0001B7CE                            
0001B7CE                            Touch_Height:				; XREF: TouchResponse
0001B7CE 0240 003F                  		andi.w	#$3F,d0
0001B7D2 D040                       		add.w	d0,d0
0001B7D4 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B7D8 7200                       		moveq	#0,d1
0001B7DA 121A                       		move.b	(a2)+,d1
0001B7DC 3029 0008                  		move.w	8(a1),d0
0001B7E0 9041                       		sub.w	d1,d0
0001B7E2 9042                       		sub.w	d2,d0
0001B7E4 6400                       		bcc.s	loc_1AE98
0001B7E6 D241                       		add.w	d1,d1
0001B7E8 D041                       		add.w	d1,d0
0001B7EA 6500                       		bcs.s	Touch_Width
0001B7EC 6000 FF8C                  		bra.w	Touch_NextObj
0001B7F0                            ; ===========================================================================
0001B7F0                            
0001B7F0                            loc_1AE98:
0001B7F0 B044                       		cmp.w	d4,d0
0001B7F2 6200 FF86                  		bhi.w	Touch_NextObj
0001B7F6                            
0001B7F6                            Touch_Width:
0001B7F6 7200                       		moveq	#0,d1
0001B7F8 121A                       		move.b	(a2)+,d1
0001B7FA 3029 000C                  		move.w	$C(a1),d0
0001B7FE 9041                       		sub.w	d1,d0
0001B800 9043                       		sub.w	d3,d0
0001B802 6400                       		bcc.s	loc_1AEB6
0001B804 D241                       		add.w	d1,d1
0001B806 D240                       		add.w	d0,d1
0001B808 6500                       		bcs.s	Touch_ChkValue
0001B80A 6000 FF6E                  		bra.w	Touch_NextObj
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            loc_1AEB6:
0001B80E B045                       		cmp.w	d5,d0
0001B810 6200 FF68                  		bhi.w	Touch_NextObj
0001B814                            
0001B814                            Touch_ChkValue:
0001B814 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B818 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B81C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B820 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B824 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B828 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B82A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B82E                            
0001B82E                            ; touch	response is $40-$7F
0001B82E                            
0001B82E 1029 0020                  		move.b	$20(a1),d0
0001B832 0200 003F                  		andi.b	#$3F,d0
0001B836 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B83A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B83C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B842 6400 0000                  		bcc.w	locret_1AEF2
0001B846 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B84A                            
0001B84A                            locret_1AEF2:
0001B84A 4E75                       		rts	
0001B84C                            ; ===========================================================================
0001B84C                            
0001B84C                            Touch_Monitor:
0001B84C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B850 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B852 3028 000C                  		move.w	$C(a0),d0
0001B856 0440 0010                  		subi.w	#$10,d0
0001B85A B069 000C                  		cmp.w	$C(a1),d0
0001B85E 6500                       		bcs.s	locret_1AF2E
0001B860 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B864 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B86A 4A29 0025                  		tst.b	$25(a1)
0001B86E 6600                       		bne.s	locret_1AF2E
0001B870 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B874 4E75                       		rts	
0001B876                            ; ===========================================================================
0001B876                            
0001B876                            loc_1AF1E:
0001B876 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B87C 6600                       		bne.s	locret_1AF2E
0001B87E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B882 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B886                            
0001B886                            locret_1AF2E:
0001B886 4E75                       		rts	
0001B888                            ; ===========================================================================
0001B888                            
0001B888                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B888 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B88C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B88E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B894 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B898                            
0001B898                            loc_1AF40:
0001B898 4A29 0021                  		tst.b	$21(a1)
0001B89C 6700                       		beq.s	Touch_KillEnemy
0001B89E 4468 0010                  		neg.w	$10(a0)
0001B8A2 4468 0012                  		neg.w	$12(a0)
0001B8A6 E0E8 0010                  		asr	$10(a0)
0001B8AA E0E8 0012                  		asr	$12(a0)
0001B8AE 137C 0000 0020             		move.b	#0,$20(a1)
0001B8B4 5329 0021                  		subq.b	#1,$21(a1)
0001B8B8 6600                       		bne.s	locret_1AF68
0001B8BA 08E9 0007 0022             		bset	#7,$22(a1)
0001B8C0                            
0001B8C0                            locret_1AF68:
0001B8C0 4E75                       		rts	
0001B8C2                            ; ===========================================================================
0001B8C2                            
0001B8C2                            Touch_KillEnemy:
0001B8C2 08E9 0007 0022             		bset	#7,$22(a1)
0001B8C8 7000                       		moveq	#0,d0
0001B8CA 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B8CE 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B8D2 0C40 0006                  		cmpi.w	#6,d0
0001B8D6 6500                       		bcs.s	loc_1AF82
0001B8D8 7006                       		moveq	#6,d0
0001B8DA                            
0001B8DA                            loc_1AF82:
0001B8DA 3340 003E                  		move.w	d0,$3E(a1)
0001B8DE 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B8E2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B8E8 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B8EA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B8EE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B8F4                            
0001B8F4                            loc_1AF9C:
0001B8F4 6100 0000                  		bsr.w	AddPoints
0001B8F8 7400                       		moveq	#0,d2	; GMZ
0001B8FA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B8FC 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B8FE                            
0001B8FE                            TouchKE_Explode:
0001B8FE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B902 137C 0000 0024             		move.b	#0,$24(a1)
0001B908 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B90C                            
0001B90C                            TouchKE_NextExplosion:
0001B90C 5802                       		addq.b	#4,d2
0001B90E 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B914 6600                       		bne.s	TouchKE_NoExplosion
0001B916 336A 0008 0008             		move.w	8(a2),8(a1)
0001B91C 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B922 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B926                            
0001B926                            TouchKE_NoExplosion:
0001B926 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B928 4A68 0012                  		tst.w	$12(a0)
0001B92C 6B00                       		bmi.s	loc_1AFC2
0001B92E 3028 000C                  		move.w	$C(a0),d0
0001B932 B069 000C                  		cmp.w	$C(a1),d0
0001B936 6400                       		bcc.s	loc_1AFCA
0001B938 4468 0012                  		neg.w	$12(a0)
0001B93C 4E75                       		rts	
0001B93E                            ; ===========================================================================
0001B93E                            
0001B93E                            loc_1AFC2:
0001B93E 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B944 4E75                       		rts	
0001B946                            ; ===========================================================================
0001B946                            
0001B946                            loc_1AFCA:
0001B946 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B94C 4E75                       		rts	
0001B94E                            ; ===========================================================================
0001B94E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B956                            ; ===========================================================================
0001B956                            
0001B956                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B956 08E9 0007 0022             		bset	#7,$22(a1)
0001B95C                            
0001B95C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B95C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B960 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B962                            
0001B962                            loc_1AFE6:				; XREF: Touch_Hurt
0001B962 70FF                       		moveq	#-1,d0
0001B964 4E75                       		rts	
0001B966                            ; ===========================================================================
0001B966                            
0001B966                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B966 4E71                       		nop	
0001B968 4A68 0030                  		tst.w	$30(a0)
0001B96C 66F4                       		bne.s	loc_1AFE6
0001B96E 2449                       		movea.l	a1,a2
0001B970                            
0001B970                            ; End of function TouchResponse
0001B970                            ; continue straight to HurtSonic
0001B970                            
0001B970                            ; ---------------------------------------------------------------------------
0001B970                            ; Hurting Sonic	subroutine
0001B970                            ; ---------------------------------------------------------------------------
0001B970                            
0001B970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B970                            
0001B970                            
0001B970                            HurtSonic:
0001B970 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B974 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B976 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B97A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B97E 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001B984 6600                       		bne.s	Hurt_Shield
0001B986 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B98A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B990 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B996                            
0001B996                            Hurt_Shield:
0001B996 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B99C 117C 0004 0024             		move.b	#4,$24(a0)
0001B9A2 6100 870A                  		bsr.w	Sonic_ResetOnFloor
0001B9A6 08E8 0001 0022             		bset	#1,$22(a0)
0001B9AC 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B9B2 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B9B8 0828 0006 0022             		btst	#6,$22(a0)
0001B9BE 6700                       		beq.s	Hurt_Reverse
0001B9C0 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B9C6 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B9CC                            
0001B9CC                            Hurt_Reverse:
0001B9CC 3028 0008                  		move.w	8(a0),d0
0001B9D0 B06A 0008                  		cmp.w	8(a2),d0
0001B9D4 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B9D6 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B9DA                            
0001B9DA                            Hurt_ChkSpikes:
0001B9DA 317C 0000 0014             		move.w	#0,$14(a0)
0001B9E0 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B9E6 317C 0078 0030             		move.w	#$78,$30(a0)
0001B9EC 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B9F0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B9F4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B9F6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B9FA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B9FC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BA00                            
0001BA00                            Hurt_Sound:
0001BA00 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BA06 70FF                       		moveq	#-1,d0
0001BA08 4E75                       		rts	
0001BA0A                            ; ===========================================================================
0001BA0A                            
0001BA0A                            Hurt_NoRings:
0001BA0A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BA0E 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BA12                            ; End of function HurtSonic
0001BA12                            
0001BA12                            ; ---------------------------------------------------------------------------
0001BA12                            ; Subroutine to	kill Sonic
0001BA12                            ; ---------------------------------------------------------------------------
0001BA12                            
0001BA12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA12                            
0001BA12                            
0001BA12                            KillSonic:
0001BA12 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BA16 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BA18 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BA1E 117C 0006 0024             		move.b	#6,$24(a0)
0001BA24 6100 8688                  		bsr.w	Sonic_ResetOnFloor
0001BA28 08E8 0001 0022             		bset	#1,$22(a0)
0001BA2E 317C F900 0012             		move.w	#-$700,$12(a0)
0001BA34 317C 0000 0010             		move.w	#0,$10(a0)
0001BA3A 317C 0000 0014             		move.w	#0,$14(a0)
0001BA40 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BA46 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BA4C 08E8 0007 0002             		bset	#7,2(a0)
0001BA52 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BA56 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BA5A 6600                       		bne.s	Kill_Sound
0001BA5C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BA60                            
0001BA60                            Kill_Sound:
0001BA60 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BA66                            
0001BA66                            Kill_NoDeath:
0001BA66 70FF                       		moveq	#-1,d0
0001BA68 4E75                       		rts	
0001BA6A                            ; End of function KillSonic
0001BA6A                            
0001BA6A                            
0001BA6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA6A                            
0001BA6A                            
0001BA6A                            Touch_Special:				; XREF: Touch_ChkValue
0001BA6A 1229 0020                  		move.b	$20(a1),d1
0001BA6E 0201 003F                  		andi.b	#$3F,d1
0001BA72 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BA76 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BA78 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BA7C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BA7E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BA82 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA84 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BA88 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA8A 4E75                       		rts	
0001BA8C                            ; ===========================================================================
0001BA8C                            
0001BA8C                            Touch_CatKiller:			; XREF: Touch_Special
0001BA8C 6000 FEC8                  		bra.w	loc_1AFDA
0001BA90                            ; ===========================================================================
0001BA90                            
0001BA90                            Touch_Yadrin:				; XREF: Touch_Special
0001BA90 9A40                       		sub.w	d0,d5
0001BA92 0C45 0008                  		cmpi.w	#8,d5
0001BA96 6400                       		bcc.s	loc_1B144
0001BA98 3029 0008                  		move.w	8(a1),d0
0001BA9C 5940                       		subq.w	#4,d0
0001BA9E 0829 0000 0022             		btst	#0,$22(a1)
0001BAA4 6700                       		beq.s	loc_1B130
0001BAA6 0440 0010                  		subi.w	#$10,d0
0001BAAA                            
0001BAAA                            loc_1B130:
0001BAAA 9042                       		sub.w	d2,d0
0001BAAC 6400                       		bcc.s	loc_1B13C
0001BAAE 0640 0018                  		addi.w	#$18,d0
0001BAB2 6500                       		bcs.s	loc_1B140
0001BAB4 6000                       		bra.s	loc_1B144
0001BAB6                            ; ===========================================================================
0001BAB6                            
0001BAB6                            loc_1B13C:
0001BAB6 B044                       		cmp.w	d4,d0
0001BAB8 6200                       		bhi.s	loc_1B144
0001BABA                            
0001BABA                            loc_1B140:
0001BABA 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BABE                            ; ===========================================================================
0001BABE                            
0001BABE                            loc_1B144:
0001BABE 6000 FDC8                  		bra.w	Touch_Enemy
0001BAC2                            ; ===========================================================================
0001BAC2                            
0001BAC2                            Touch_D7orE1:				; XREF: Touch_Special
0001BAC2 5229 0021                  		addq.b	#1,$21(a1)
0001BAC6 4E75                       		rts	
0001BAC8                            ; End of function Touch_Special
0001BAC8                            
0001BAC8                            ; ---------------------------------------------------------------------------
0001BAC8                            ; Subroutine to	show the special stage layout
0001BAC8                            ; ---------------------------------------------------------------------------
0001BAC8                            
0001BAC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAC8                            
0001BAC8                            
0001BAC8                            SS_ShowLayout:				; XREF: SpecialStage
0001BAC8 6100 0000                  		bsr.w	SS_AniWallsRings
0001BACC 6100 0000                  		bsr.w	SS_AniItems
0001BAD0 3F05                       		move.w	d5,-(sp)
0001BAD2 43F8 8000                  		lea	($FFFF8000).w,a1
0001BAD6 1038 F780                  		move.b	($FFFFF780).w,d0
0001BADA 0200 00FC                  		andi.b	#$FC,d0
0001BADE 4EB9 0000 2D02             		jsr	(CalcSine).l
0001BAE4 3800                       		move.w	d0,d4
0001BAE6 3A01                       		move.w	d1,d5
0001BAE8 C9FC 0018                  		muls.w	#$18,d4
0001BAEC CBFC 0018                  		muls.w	#$18,d5
0001BAF0 7400                       		moveq	#0,d2
0001BAF2 3438 F700                  		move.w	($FFFFF700).w,d2
0001BAF6 84FC 0018                  		divu.w	#$18,d2
0001BAFA 4842                       		swap	d2
0001BAFC 4442                       		neg.w	d2
0001BAFE 0642 FF4C                  		addi.w	#-$B4,d2
0001BB02 7600                       		moveq	#0,d3
0001BB04 3638 F704                  		move.w	($FFFFF704).w,d3
0001BB08 86FC 0018                  		divu.w	#$18,d3
0001BB0C 4843                       		swap	d3
0001BB0E 4443                       		neg.w	d3
0001BB10 0643 FF4C                  		addi.w	#-$B4,d3
0001BB14 3E3C 000F                  		move.w	#$F,d7
0001BB18                            
0001BB18                            loc_1B19E:
0001BB18 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BB1C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BB20 4440                       		neg.w	d0
0001BB22 C3C2                       		muls.w	d2,d1
0001BB24 C1C3                       		muls.w	d3,d0
0001BB26 2C00                       		move.l	d0,d6
0001BB28 DC81                       		add.l	d1,d6
0001BB2A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BB2E C1C2                       		muls.w	d2,d0
0001BB30 C3C3                       		muls.w	d3,d1
0001BB32 D280                       		add.l	d0,d1
0001BB34 2406                       		move.l	d6,d2
0001BB36 3C3C 000F                  		move.w	#$F,d6
0001BB3A                            
0001BB3A                            loc_1B1C0:
0001BB3A 2002                       		move.l	d2,d0
0001BB3C E080                       		asr.l	#8,d0
0001BB3E 32C0                       		move.w	d0,(a1)+
0001BB40 2001                       		move.l	d1,d0
0001BB42 E080                       		asr.l	#8,d0
0001BB44 32C0                       		move.w	d0,(a1)+
0001BB46 D485                       		add.l	d5,d2
0001BB48 D284                       		add.l	d4,d1
0001BB4A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BB4E                            
0001BB4E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BB52 0643 0018                  		addi.w	#$18,d3
0001BB56 51CF FFC0                  		dbf	d7,loc_1B19E
0001BB5A                            
0001BB5A 3A1F                       		move.w	(sp)+,d5
0001BB5C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BB62 7000                       		moveq	#0,d0
0001BB64 3038 F704                  		move.w	($FFFFF704).w,d0
0001BB68 80FC 0018                  		divu.w	#$18,d0
0001BB6C C0FC 0080                  		mulu.w	#$80,d0
0001BB70 D1C0                       		adda.l	d0,a0
0001BB72 7000                       		moveq	#0,d0
0001BB74 3038 F700                  		move.w	($FFFFF700).w,d0
0001BB78 80FC 0018                  		divu.w	#$18,d0
0001BB7C D0C0                       		adda.w	d0,a0
0001BB7E 49F8 8000                  		lea	($FFFF8000).w,a4
0001BB82 3E3C 000F                  		move.w	#$F,d7
0001BB86                            
0001BB86                            loc_1B20C:
0001BB86 3C3C 000F                  		move.w	#$F,d6
0001BB8A                            
0001BB8A                            loc_1B210:
0001BB8A 7000                       		moveq	#0,d0
0001BB8C 1018                       		move.b	(a0)+,d0
0001BB8E 6700                       		beq.s	loc_1B268
0001BB90 0C00 004E                  		cmpi.b	#$4E,d0
0001BB94 6200                       		bhi.s	loc_1B268
0001BB96 3614                       		move.w	(a4),d3
0001BB98 0643 0120                  		addi.w	#$120,d3
0001BB9C 0C43 0070                  		cmpi.w	#$70,d3
0001BBA0 6500                       		bcs.s	loc_1B268
0001BBA2 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BBA6 6400                       		bcc.s	loc_1B268
0001BBA8 342C 0002                  		move.w	2(a4),d2
0001BBAC 0642 00F0                  		addi.w	#$F0,d2
0001BBB0 0C42 0070                  		cmpi.w	#$70,d2
0001BBB4 6500                       		bcs.s	loc_1B268
0001BBB6 0C42 0170                  		cmpi.w	#$170,d2
0001BBBA 6400                       		bcc.s	loc_1B268
0001BBBC 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BBC2 E748                       		lsl.w	#3,d0
0001BBC4 4BF5 0000                  		lea	(a5,d0.w),a5
0001BBC8 225D                       		movea.l	(a5)+,a1
0001BBCA 321D                       		move.w	(a5)+,d1
0001BBCC D241                       		add.w	d1,d1
0001BBCE D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BBD2 365D                       		movea.w	(a5)+,a3
0001BBD4 7200                       		moveq	#0,d1
0001BBD6 1219                       		move.b	(a1)+,d1
0001BBD8 5301                       		subq.b	#1,d1
0001BBDA 6B00                       		bmi.s	loc_1B268
0001BBDC 4EB9 0000 DFC6             		jsr	sub_D762
0001BBE2                            
0001BBE2                            loc_1B268:
0001BBE2 584C                       		addq.w	#4,a4
0001BBE4 51CE FFA4                  		dbf	d6,loc_1B210
0001BBE8                            
0001BBE8 41E8 0070                  		lea	$70(a0),a0
0001BBEC 51CF FF98                  		dbf	d7,loc_1B20C
0001BBF0                            
0001BBF0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BBF4 0C05 0050                  		cmpi.b	#$50,d5
0001BBF8 6700                       		beq.s	loc_1B288
0001BBFA 24BC 0000 0000             		move.l	#0,(a2)
0001BC00 4E75                       		rts	
0001BC02                            ; ===========================================================================
0001BC02                            
0001BC02                            loc_1B288:
0001BC02 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BC08 4E75                       		rts	
0001BC0A                            ; End of function SS_ShowLayout
0001BC0A                            
0001BC0A                            ; ---------------------------------------------------------------------------
0001BC0A                            ; Subroutine to	animate	walls and rings	in the special stage
0001BC0A                            ; ---------------------------------------------------------------------------
0001BC0A                            
0001BC0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC0A                            
0001BC0A                            
0001BC0A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BC0A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BC10 7000                       		moveq	#0,d0
0001BC12 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC16 E408                       		lsr.b	#2,d0
0001BC18 0240 000F                  		andi.w	#$F,d0
0001BC1C 7223                       		moveq	#$23,d1
0001BC1E                            
0001BC1E                            loc_1B2A4:
0001BC1E 3280                       		move.w	d0,(a1)
0001BC20 5049                       		addq.w	#8,a1
0001BC22 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BC26                            
0001BC26 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BC2C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BC30 6A00                       		bpl.s	loc_1B2C8
0001BC32 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BC38 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BC3C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BC42                            
0001BC42                            loc_1B2C8:
0001BC42 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BC48 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BC4C 6A00                       		bpl.s	loc_1B2E4
0001BC4E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BC54 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BC58 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BC5E                            
0001BC5E                            loc_1B2E4:
0001BC5E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BC62 1340 0138                  		move.b	d0,$138(a1)
0001BC66 1340 0160                  		move.b	d0,$160(a1)
0001BC6A 1340 0148                  		move.b	d0,$148(a1)
0001BC6E 1340 0150                  		move.b	d0,$150(a1)
0001BC72 1340 01D8                  		move.b	d0,$1D8(a1)
0001BC76 1340 01E0                  		move.b	d0,$1E0(a1)
0001BC7A 1340 01E8                  		move.b	d0,$1E8(a1)
0001BC7E 1340 01F0                  		move.b	d0,$1F0(a1)
0001BC82 1340 01F8                  		move.b	d0,$1F8(a1)
0001BC86 1340 0200                  		move.b	d0,$200(a1)
0001BC8A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BC8E 6A00                       		bpl.s	loc_1B326
0001BC90 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BC96 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BC9A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BCA0                            
0001BCA0                            loc_1B326:
0001BCA0 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BCA4 1340 0168                  		move.b	d0,$168(a1)
0001BCA8 1340 0170                  		move.b	d0,$170(a1)
0001BCAC 1340 0178                  		move.b	d0,$178(a1)
0001BCB0 1340 0180                  		move.b	d0,$180(a1)
0001BCB4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BCB8 6A00                       		bpl.s	loc_1B350
0001BCBA 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BCC0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BCC4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BCCA                            
0001BCCA                            loc_1B350:
0001BCCA 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BCD0 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BCD6 7000                       		moveq	#0,d0
0001BCD8 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BCDC D040                       		add.w	d0,d0
0001BCDE 41F0 0000                  		lea	(a0,d0.w),a0
0001BCE2 3290                       		move.w	(a0),(a1)
0001BCE4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCEA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCF0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCF6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCFC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD02 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD08 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD0E D0FC 0020                  		adda.w	#$20,a0
0001BD12 D2FC 0048                  		adda.w	#$48,a1
0001BD16 3290                       		move.w	(a0),(a1)
0001BD18 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD1E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD24 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD2A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD30 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD36 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD3C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD42 D0FC 0020                  		adda.w	#$20,a0
0001BD46 D2FC 0048                  		adda.w	#$48,a1
0001BD4A 3290                       		move.w	(a0),(a1)
0001BD4C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD52 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD58 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD5E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD64 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD6A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD70 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD76 D0FC 0020                  		adda.w	#$20,a0
0001BD7A D2FC 0048                  		adda.w	#$48,a1
0001BD7E 3290                       		move.w	(a0),(a1)
0001BD80 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD86 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD8C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD92 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD98 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD9E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BDA4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BDAA D0FC 0020                  		adda.w	#$20,a0
0001BDAE D2FC 0048                  		adda.w	#$48,a1
0001BDB2 4E75                       		rts	
0001BDB4                            ; End of function SS_AniWallsRings
0001BDB4                            
0001BDB4                            ; ===========================================================================
0001BDB4 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BDC4 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BDD4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BDE4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BDF4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BE04 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BE14 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BE24 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BE34                            ; ---------------------------------------------------------------------------
0001BE34                            ; Subroutine to	remove items when you collect them in the special stage
0001BE34                            ; ---------------------------------------------------------------------------
0001BE34                            
0001BE34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE34                            
0001BE34                            
0001BE34                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BE34 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BE3A 303C 001F                  		move.w	#$1F,d0
0001BE3E                            
0001BE3E                            loc_1B4C4:
0001BE3E 4A12                       		tst.b	(a2)
0001BE40 6700                       		beq.s	locret_1B4CE
0001BE42 504A                       		addq.w	#8,a2
0001BE44 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BE48                            
0001BE48                            locret_1B4CE:
0001BE48 4E75                       		rts	
0001BE4A                            ; End of function SS_RemoveCollectedItem
0001BE4A                            
0001BE4A                            ; ---------------------------------------------------------------------------
0001BE4A                            ; Subroutine to	animate	special	stage items when you touch them
0001BE4A                            ; ---------------------------------------------------------------------------
0001BE4A                            
0001BE4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE4A                            
0001BE4A                            
0001BE4A                            SS_AniItems:				; XREF: SS_ShowLayout
0001BE4A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BE50 3E3C 001F                  		move.w	#$1F,d7
0001BE54                            
0001BE54                            loc_1B4DA:
0001BE54 7000                       		moveq	#0,d0
0001BE56 1010                       		move.b	(a0),d0
0001BE58 6700                       		beq.s	loc_1B4E8
0001BE5A E548                       		lsl.w	#2,d0
0001BE5C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BE60 4E91                       		jsr	(a1)
0001BE62                            
0001BE62                            loc_1B4E8:
0001BE62 5048                       		addq.w	#8,a0
0001BE64                            
0001BE64                            loc_1B4EA:
0001BE64 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BE68                            
0001BE68 4E75                       		rts	
0001BE6A                            ; End of function SS_AniItems
0001BE6A                            
0001BE6A                            ; ===========================================================================
0001BE6A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BE6E 0000 0000                  		dc.l SS_AniBumper
0001BE72 0000 0000                  		dc.l SS_Ani1Up
0001BE76 0000 0000                  		dc.l SS_AniReverse
0001BE7A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BE7E 0000 0000                  		dc.l SS_AniGlassBlock
0001BE82                            ; ===========================================================================
0001BE82                            
0001BE82                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BE82 5328 0002                  		subq.b	#1,2(a0)
0001BE86 6A00                       		bpl.s	locret_1B530
0001BE88 117C 0005 0002             		move.b	#5,2(a0)
0001BE8E 7000                       		moveq	#0,d0
0001BE90 1028 0003                  		move.b	3(a0),d0
0001BE94 5228 0003                  		addq.b	#1,3(a0)
0001BE98 2268 0004                  		movea.l	4(a0),a1
0001BE9C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BEA0 1280                       		move.b	d0,(a1)
0001BEA2 6600                       		bne.s	locret_1B530
0001BEA4 4290                       		clr.l	(a0)
0001BEA6 42A8 0004                  		clr.l	4(a0)
0001BEAA                            
0001BEAA                            locret_1B530:
0001BEAA 4E75                       		rts	
0001BEAC                            ; ===========================================================================
0001BEAC 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BEB2                            ; ===========================================================================
0001BEB2                            
0001BEB2                            SS_AniBumper:				; XREF: SS_AniIndex
0001BEB2 5328 0002                  		subq.b	#1,2(a0)
0001BEB6 6A00                       		bpl.s	locret_1B566
0001BEB8 117C 0007 0002             		move.b	#7,2(a0)
0001BEBE 7000                       		moveq	#0,d0
0001BEC0 1028 0003                  		move.b	3(a0),d0
0001BEC4 5228 0003                  		addq.b	#1,3(a0)
0001BEC8 2268 0004                  		movea.l	4(a0),a1
0001BECC 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BED0 6600                       		bne.s	loc_1B564
0001BED2 4290                       		clr.l	(a0)
0001BED4 42A8 0004                  		clr.l	4(a0)
0001BED8 12BC 0025                  		move.b	#$25,(a1)
0001BEDC 4E75                       		rts	
0001BEDE                            ; ===========================================================================
0001BEDE                            
0001BEDE                            loc_1B564:
0001BEDE 1280                       		move.b	d0,(a1)
0001BEE0                            
0001BEE0                            locret_1B566:
0001BEE0 4E75                       		rts	
0001BEE2                            ; ===========================================================================
0001BEE2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BEE8                            ; ===========================================================================
0001BEE8                            
0001BEE8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BEE8 5328 0002                  		subq.b	#1,2(a0)
0001BEEC 6A00                       		bpl.s	locret_1B596
0001BEEE 117C 0005 0002             		move.b	#5,2(a0)
0001BEF4 7000                       		moveq	#0,d0
0001BEF6 1028 0003                  		move.b	3(a0),d0
0001BEFA 5228 0003                  		addq.b	#1,3(a0)
0001BEFE 2268 0004                  		movea.l	4(a0),a1
0001BF02 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BF06 1280                       		move.b	d0,(a1)
0001BF08 6600                       		bne.s	locret_1B596
0001BF0A 4290                       		clr.l	(a0)
0001BF0C 42A8 0004                  		clr.l	4(a0)
0001BF10                            
0001BF10                            locret_1B596:
0001BF10 4E75                       		rts	
0001BF12                            ; ===========================================================================
0001BF12 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            SS_AniReverse:				; XREF: SS_AniIndex
0001BF18 5328 0002                  		subq.b	#1,2(a0)
0001BF1C 6A00                       		bpl.s	locret_1B5CC
0001BF1E 117C 0007 0002             		move.b	#7,2(a0)
0001BF24 7000                       		moveq	#0,d0
0001BF26 1028 0003                  		move.b	3(a0),d0
0001BF2A 5228 0003                  		addq.b	#1,3(a0)
0001BF2E 2268 0004                  		movea.l	4(a0),a1
0001BF32 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BF36 6600                       		bne.s	loc_1B5CA
0001BF38 4290                       		clr.l	(a0)
0001BF3A 42A8 0004                  		clr.l	4(a0)
0001BF3E 12BC 002B                  		move.b	#$2B,(a1)
0001BF42 4E75                       		rts	
0001BF44                            ; ===========================================================================
0001BF44                            
0001BF44                            loc_1B5CA:
0001BF44 1280                       		move.b	d0,(a1)
0001BF46                            
0001BF46                            locret_1B5CC:
0001BF46 4E75                       		rts	
0001BF48                            ; ===========================================================================
0001BF48 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BF4E                            ; ===========================================================================
0001BF4E                            
0001BF4E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BF4E 5328 0002                  		subq.b	#1,2(a0)
0001BF52 6A00                       		bpl.s	locret_1B60C
0001BF54 117C 0005 0002             		move.b	#5,2(a0)
0001BF5A 7000                       		moveq	#0,d0
0001BF5C 1028 0003                  		move.b	3(a0),d0
0001BF60 5228 0003                  		addq.b	#1,3(a0)
0001BF64 2268 0004                  		movea.l	4(a0),a1
0001BF68 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BF6C 1280                       		move.b	d0,(a1)
0001BF6E 6600                       		bne.s	locret_1B60C
0001BF70 4290                       		clr.l	(a0)
0001BF72 42A8 0004                  		clr.l	4(a0)
0001BF76 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BF7C 303C 00A8                  		move.w	#$A8,d0
0001BF80 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BF86                            
0001BF86                            locret_1B60C:
0001BF86 4E75                       		rts	
0001BF88                            ; ===========================================================================
0001BF88 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BF8E                            ; ===========================================================================
0001BF8E                            
0001BF8E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BF8E 5328 0002                  		subq.b	#1,2(a0)
0001BF92 6A00                       		bpl.s	locret_1B640
0001BF94 117C 0001 0002             		move.b	#1,2(a0)
0001BF9A 7000                       		moveq	#0,d0
0001BF9C 1028 0003                  		move.b	3(a0),d0
0001BFA0 5228 0003                  		addq.b	#1,3(a0)
0001BFA4 2268 0004                  		movea.l	4(a0),a1
0001BFA8 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BFAC 1280                       		move.b	d0,(a1)
0001BFAE 6600                       		bne.s	locret_1B640
0001BFB0 12A8 0004                  		move.b	4(a0),(a1)
0001BFB4 4290                       		clr.l	(a0)
0001BFB6 42A8 0004                  		clr.l	4(a0)
0001BFBA                            
0001BFBA                            locret_1B640:
0001BFBA 4E75                       		rts	
0001BFBC                            ; ===========================================================================
0001BFBC 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            ; Special stage	layout pointers
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            SS_LayoutIndex:
0001BFC6                            	include "_inc\Special stage layout pointers.asm"
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            ; Special stage	layout pointers
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6 0000 0000                  	dc.l SS_1
0001BFCA 0000 0000                  	dc.l SS_2
0001BFCE 0000 0000                  	dc.l SS_3
0001BFD2 0000 0000                  	dc.l SS_4
0001BFD6 0000 0000                  	dc.l SS_5
0001BFDA 0000 0000                  	dc.l SS_6
0001BFDE                            	even
0001BFDE                            	even
0001BFDE                            
0001BFDE                            ; ---------------------------------------------------------------------------
0001BFDE                            ; Special stage	start locations
0001BFDE                            ; ---------------------------------------------------------------------------
0001BFDE                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BFF6                            		even
0001BFF6                            
0001BFF6                            ; ---------------------------------------------------------------------------
0001BFF6                            ; Subroutine to	load special stage layout
0001BFF6                            ; ---------------------------------------------------------------------------
0001BFF6                            
0001BFF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFF6                            
0001BFF6                            
0001BFF6                            SS_Load:				; XREF: SpecialStage
0001BFF6 7000                       		moveq	#0,d0
0001BFF8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BFFC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C000 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C006 6500                       		bcs.s	SS_ChkEmldNum
0001C008 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C00E                            
0001C00E                            SS_ChkEmldNum:
0001C00E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C014 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C016 7200                       		moveq	#0,d1
0001C018 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C01C 5301                       		subq.b	#1,d1
0001C01E 6500                       		bcs.s	SS_LoadData
0001C020 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C024                            
0001C024                            SS_ChkEmldLoop:	
0001C024 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C028 6600                       		bne.s	SS_ChkEmldRepeat
0001C02A 60CA                       		bra.s	SS_Load
0001C02C                            ; ===========================================================================
0001C02C                            
0001C02C                            SS_ChkEmldRepeat:
0001C02C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C030                            
0001C030                            SS_LoadData:
0001C030 E548                       		lsl.w	#2,d0
0001C032 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C036 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C03A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C03E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C042 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C048 303C 0000                  		move.w	#0,d0
0001C04C 4EB9 0000 1954             		jsr	(EniDec).l
0001C052 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C058 303C 0FFF                  		move.w	#$FFF,d0
0001C05C                            
0001C05C                            SS_ClrRAM3:
0001C05C 4299                       		clr.l	(a1)+
0001C05E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C062                            
0001C062 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C068 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C06E 723F                       		moveq	#$3F,d1
0001C070                            
0001C070                            loc_1B6F6:
0001C070 743F                       		moveq	#$3F,d2
0001C072                            
0001C072                            loc_1B6F8:
0001C072 12D8                       		move.b	(a0)+,(a1)+
0001C074 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C078                            
0001C078 43E9 0040                  		lea	$40(a1),a1
0001C07C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C080                            
0001C080 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C086 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C08C 724D                       		moveq	#$4D,d1
0001C08E                            
0001C08E                            loc_1B714:
0001C08E 22D8                       		move.l	(a0)+,(a1)+
0001C090 32FC 0000                  		move.w	#0,(a1)+
0001C094 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C09A 32D8                       		move.w	(a0)+,(a1)+
0001C09C 51C9 FFF0                  		dbf	d1,loc_1B714
0001C0A0                            
0001C0A0 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C0A6 323C 003F                  		move.w	#$3F,d1
0001C0AA                            
0001C0AA                            loc_1B730:
0001C0AA                            
0001C0AA 4299                       		clr.l	(a1)+
0001C0AC 51C9 FFFC                  		dbf	d1,loc_1B730
0001C0B0                            
0001C0B0 4E75                       		rts	
0001C0B2                            ; End of function SS_Load
0001C0B2                            
0001C0B2                            ; ===========================================================================
0001C0B2                            ; ---------------------------------------------------------------------------
0001C0B2                            ; Special stage	mappings and VRAM pointers
0001C0B2                            ; ---------------------------------------------------------------------------
0001C0B2                            SS_MapIndex:
0001C0B2                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C0B2                            ; ---------------------------------------------------------------------------
0001C0B2                            ; Special stage	mappings and VRAM pointers
0001C0B2                            ; ---------------------------------------------------------------------------
0001C0B2 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C0B6 0142                       	dc.w $142		; VRAM setting
0001C0B8 0000 0000                  	dc.l Map_SSWalls
0001C0BC 0142                       	dc.w $142
0001C0BE 0000 0000                  	dc.l Map_SSWalls
0001C0C2 0142                       	dc.w $142
0001C0C4 0000 0000                  	dc.l Map_SSWalls
0001C0C8 0142                       	dc.w $142
0001C0CA 0000 0000                  	dc.l Map_SSWalls
0001C0CE 0142                       	dc.w $142
0001C0D0 0000 0000                  	dc.l Map_SSWalls
0001C0D4 0142                       	dc.w $142
0001C0D6 0000 0000                  	dc.l Map_SSWalls
0001C0DA 0142                       	dc.w $142
0001C0DC 0000 0000                  	dc.l Map_SSWalls
0001C0E0 0142                       	dc.w $142
0001C0E2 0000 0000                  	dc.l Map_SSWalls
0001C0E6 0142                       	dc.w $142
0001C0E8 0000 0000                  	dc.l Map_SSWalls
0001C0EC 2142                       	dc.w $2142
0001C0EE 0000 0000                  	dc.l Map_SSWalls
0001C0F2 2142                       	dc.w $2142
0001C0F4 0000 0000                  	dc.l Map_SSWalls
0001C0F8 2142                       	dc.w $2142
0001C0FA 0000 0000                  	dc.l Map_SSWalls
0001C0FE 2142                       	dc.w $2142
0001C100 0000 0000                  	dc.l Map_SSWalls
0001C104 2142                       	dc.w $2142
0001C106 0000 0000                  	dc.l Map_SSWalls
0001C10A 2142                       	dc.w $2142
0001C10C 0000 0000                  	dc.l Map_SSWalls
0001C110 2142                       	dc.w $2142
0001C112 0000 0000                  	dc.l Map_SSWalls
0001C116 2142                       	dc.w $2142
0001C118 0000 0000                  	dc.l Map_SSWalls
0001C11C 2142                       	dc.w $2142
0001C11E 0000 0000                  	dc.l Map_SSWalls
0001C122 4142                       	dc.w $4142
0001C124 0000 0000                  	dc.l Map_SSWalls
0001C128 4142                       	dc.w $4142
0001C12A 0000 0000                  	dc.l Map_SSWalls
0001C12E 4142                       	dc.w $4142
0001C130 0000 0000                  	dc.l Map_SSWalls
0001C134 4142                       	dc.w $4142
0001C136 0000 0000                  	dc.l Map_SSWalls
0001C13A 4142                       	dc.w $4142
0001C13C 0000 0000                  	dc.l Map_SSWalls
0001C140 4142                       	dc.w $4142
0001C142 0000 0000                  	dc.l Map_SSWalls
0001C146 4142                       	dc.w $4142
0001C148 0000 0000                  	dc.l Map_SSWalls
0001C14C 4142                       	dc.w $4142
0001C14E 0000 0000                  	dc.l Map_SSWalls
0001C152 4142                       	dc.w $4142
0001C154 0000 0000                  	dc.l Map_SSWalls
0001C158 6142                       	dc.w $6142
0001C15A 0000 0000                  	dc.l Map_SSWalls
0001C15E 6142                       	dc.w $6142
0001C160 0000 0000                  	dc.l Map_SSWalls
0001C164 6142                       	dc.w $6142
0001C166 0000 0000                  	dc.l Map_SSWalls
0001C16A 6142                       	dc.w $6142
0001C16C 0000 0000                  	dc.l Map_SSWalls
0001C170 6142                       	dc.w $6142
0001C172 0000 0000                  	dc.l Map_SSWalls
0001C176 6142                       	dc.w $6142
0001C178 0000 0000                  	dc.l Map_SSWalls
0001C17C 6142                       	dc.w $6142
0001C17E 0000 0000                  	dc.l Map_SSWalls
0001C182 6142                       	dc.w $6142
0001C184 0000 0000                  	dc.l Map_SSWalls
0001C188 6142                       	dc.w $6142
0001C18A 0000 F35C                  	dc.l Map_obj47
0001C18E 023B                       	dc.w $23B
0001C190 0000 0000                  	dc.l Map_SS_R
0001C194 0570                       	dc.w $570
0001C196 0000 0000                  	dc.l Map_SS_R
0001C19A 0251                       	dc.w $251
0001C19C 0000 0000                  	dc.l Map_SS_R
0001C1A0 0370                       	dc.w $370
0001C1A2 0000 0000                  	dc.l Map_SS_Up
0001C1A6 0263                       	dc.w $263
0001C1A8 0000 0000                  	dc.l Map_SS_Down
0001C1AC 0263                       	dc.w $263
0001C1AE 0000 0000                  	dc.l Map_SS_R
0001C1B2 22F0                       	dc.w $22F0
0001C1B4 0000 0000                  	dc.l Map_SS_Glass
0001C1B8 0470                       	dc.w $470
0001C1BA 0000 0000                  	dc.l Map_SS_Glass
0001C1BE 05F0                       	dc.w $5F0
0001C1C0 0000 0000                  	dc.l Map_SS_Glass
0001C1C4 65F0                       	dc.w $65F0
0001C1C6 0000 0000                  	dc.l Map_SS_Glass
0001C1CA 25F0                       	dc.w $25F0
0001C1CC 0000 0000                  	dc.l Map_SS_Glass
0001C1D0 45F0                       	dc.w $45F0
0001C1D2 0000 0000                  	dc.l Map_SS_R
0001C1D6 02F0                       	dc.w $2F0
0001C1D8 0100 F35C                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C1DC 023B                       	dc.w $23B
0001C1DE 0200 F35C                  	dc.l Map_obj47+$2000000
0001C1E2 023B                       	dc.w $23B
0001C1E4 0000 0000                  	dc.l Map_SS_R
0001C1E8 0797                       	dc.w $797
0001C1EA 0000 0000                  	dc.l Map_SS_R
0001C1EE 07A0                       	dc.w $7A0
0001C1F0 0000 0000                  	dc.l Map_SS_R
0001C1F4 07A9                       	dc.w $7A9
0001C1F6 0000 0000                  	dc.l Map_SS_R
0001C1FA 0797                       	dc.w $797
0001C1FC 0000 0000                  	dc.l Map_SS_R
0001C200 07A0                       	dc.w $7A0
0001C202 0000 0000                  	dc.l Map_SS_R
0001C206 07A9                       	dc.w $7A9
0001C208 0000 A68C                  	dc.l Map_obj25
0001C20C 27B2                       	dc.w $27B2
0001C20E 0000 0000                  	dc.l Map_SS_Chaos3
0001C212 0770                       	dc.w $770
0001C214 0000 0000                  	dc.l Map_SS_Chaos3
0001C218 2770                       	dc.w $2770
0001C21A 0000 0000                  	dc.l Map_SS_Chaos3
0001C21E 4770                       	dc.w $4770
0001C220 0000 0000                  	dc.l Map_SS_Chaos3
0001C224 6770                       	dc.w $6770
0001C226 0000 0000                  	dc.l Map_SS_Chaos1
0001C22A 0770                       	dc.w $770
0001C22C 0000 0000                  	dc.l Map_SS_Chaos2
0001C230 0770                       	dc.w $770
0001C232 0000 0000                  	dc.l Map_SS_R
0001C236 04F0                       	dc.w $4F0
0001C238 0400 A68C                  	dc.l Map_obj25+$4000000
0001C23C 27B2                       	dc.w $27B2
0001C23E 0500 A68C                  	dc.l Map_obj25+$5000000
0001C242 27B2                       	dc.w $27B2
0001C244 0600 A68C                  	dc.l Map_obj25+$6000000
0001C248 27B2                       	dc.w $27B2
0001C24A 0700 A68C                  	dc.l Map_obj25+$7000000
0001C24E 27B2                       	dc.w $27B2
0001C250 0000 0000                  	dc.l Map_SS_Glass
0001C254 23F0                       	dc.w $23F0
0001C256 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C25A 23F0                       	dc.w $23F0
0001C25C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C260 23F0                       	dc.w $23F0
0001C262 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C266 23F0                       	dc.w $23F0
0001C268 0000 0000                  	dc.l Map_SS_R+$2000000
0001C26C 04F0                       	dc.w $4F0
0001C26E 0000 0000                  	dc.l Map_SS_Glass
0001C272 05F0                       	dc.w $5F0
0001C274 0000 0000                  	dc.l Map_SS_Glass
0001C278 65F0                       	dc.w $65F0
0001C27A 0000 0000                  	dc.l Map_SS_Glass
0001C27E 25F0                       	dc.w $25F0
0001C280 0000 0000                  	dc.l Map_SS_Glass
0001C284 45F0                       	dc.w $45F0
0001C284 45F0                       	dc.w $45F0
0001C286                            
0001C286                            ; ---------------------------------------------------------------------------
0001C286                            ; Sprite mappings - special stage "R" block
0001C286                            ; ---------------------------------------------------------------------------
0001C286                            Map_SS_R:
0001C286                            	include "_maps\SSRblock.asm"
0001C286                            ; ---------------------------------------------------------------------------
0001C286                            ; Sprite mappings - special stage "R" block
0001C286                            ; ---------------------------------------------------------------------------
0001C286 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C28A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C28C 01                         byte_1B912:	dc.b 1
0001C28D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C292 01                         byte_1B918:	dc.b 1
0001C293 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C298 00                         byte_1B91E:	dc.b 0
0001C29A 00                         		even
0001C29A 00                         		even
0001C29A                            
0001C29A                            ; ---------------------------------------------------------------------------
0001C29A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C29A                            ; ---------------------------------------------------------------------------
0001C29A                            Map_SS_Glass:
0001C29A                            	include "_maps\SSglassblock.asm"
0001C29A                            ; ---------------------------------------------------------------------------
0001C29A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C29A                            ; ---------------------------------------------------------------------------
0001C29A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C29E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C2A2 01                         byte_1B928:	dc.b 1
0001C2A3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C2A8 01                         byte_1B92E:	dc.b 1
0001C2A9 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C2AE 01                         byte_1B934:	dc.b 1
0001C2AF F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C2B4 01                         byte_1B93A:	dc.b 1
0001C2B5 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C2BA                            		even
0001C2BA                            		even
0001C2BA                            
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA                            ; Sprite mappings - special stage "UP" block
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA                            Map_SS_Up:
0001C2BA                            	include "_maps\SSUPblock.asm"
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA                            ; Sprite mappings - special stage "UP" block
0001C2BA                            ; ---------------------------------------------------------------------------
0001C2BA 0000                       		dc.w byte_1B944-Map_SS_Up
0001C2BC 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C2BE 01                         byte_1B944:	dc.b 1
0001C2BF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C2C4 01                         byte_1B94A:	dc.b 1
0001C2C5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C2CA                            		even
0001C2CA                            		even
0001C2CA                            
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA                            ; Sprite mappings - special stage "DOWN" block
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA                            Map_SS_Down:
0001C2CA                            	include "_maps\SSDOWNblock.asm"
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA                            ; Sprite mappings - special stage "DOWN" block
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA 0000                       		dc.w byte_1B954-Map_SS_Down
0001C2CC 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C2CE 01                         byte_1B954:	dc.b 1
0001C2CF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C2D4 01                         byte_1B95A:	dc.b 1
0001C2D5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C2DA                            		even
0001C2DA                            		even
0001C2DA                            
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA                            ; Sprite mappings - special stage chaos	emeralds
0001C2DA                            ; ---------------------------------------------------------------------------
0001C2DA 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C2DC 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C2DE 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C2E0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C2E2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C2E4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C2E6 01                         byte_1B96C:	dc.b 1
0001C2E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C2EC 01                         byte_1B972:	dc.b 1
0001C2ED F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C2F2 01                         byte_1B978:	dc.b 1
0001C2F3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C2F8 01                         byte_1B97E:	dc.b 1
0001C2F9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C2FE                            		even
0001C2FE                            ; ===========================================================================
0001C2FE                            ; ---------------------------------------------------------------------------
0001C2FE                            ; Object 09 - Sonic (special stage)
0001C2FE                            ; ---------------------------------------------------------------------------
0001C2FE                            
0001C2FE                            Obj09:					; XREF: Obj_Index
0001C2FE                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C2FE                            ;		beq.s	Obj09_Normal	; if not, branch
0001C2FE 6100 0000                  		bsr.w	SS_FixCamera
0001C302                            ;		bra.w	DebugMode
0001C302                            ; ===========================================================================
0001C302                            
0001C302                            Obj09_Normal:
0001C302 7000                       		moveq	#0,d0
0001C304 1028 0024                  		move.b	$24(a0),d0
0001C308 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C30C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C310                            ; ===========================================================================
0001C310 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C312 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C314 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C316 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C318                            ; ===========================================================================
0001C318                            
0001C318                            Obj09_Main:				; XREF: Obj09_Index
0001C318 5428 0024                  		addq.b	#2,$24(a0)
0001C31C 117C 000E 0016             		move.b	#$E,$16(a0)
0001C322 117C 0007 0017             		move.b	#7,$17(a0)
0001C328 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C330 317C 0780 0002             		move.w	#$780,2(a0)
0001C336 117C 0004 0001             		move.b	#4,1(a0)
0001C33C 117C 0000 0018             		move.b	#0,$18(a0)
0001C342 117C 0002 001C             		move.b	#2,$1C(a0)
0001C348 08E8 0002 0022             		bset	#2,$22(a0)
0001C34E 08E8 0001 0022             		bset	#1,$22(a0)
0001C354                            
0001C354                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C354                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C354                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C354                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C354                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C354                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C354                            
0001C354                            Obj09_NoDebug:
0001C354 117C 0000 0030             		move.b	#0,$30(a0)
0001C35A 7000                       		moveq	#0,d0
0001C35C 1028 0022                  		move.b	$22(a0),d0
0001C360 0240 0002                  		andi.w	#2,d0
0001C364 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C368 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C36C 4EBA 8212                  		jsr	LoadSonicDynPLC
0001C370 4EF9 0000 DE68             		jmp	DisplaySprite
0001C376                            ; ===========================================================================
0001C376 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C378 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C37A                            ; ===========================================================================
0001C37A                            
0001C37A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C37A 6100 0000                  		bsr.w	Obj09_Rise
0001C37E 6100 0000                  		bsr.w	Obj09_Move
0001C382 6100 0000                  		bsr.w	Obj09_Fall
0001C386 6000                       		bra.s	Obj09_Display
0001C388                            ; ===========================================================================
0001C388                            
0001C388                            Obj09_InAir:				; XREF: Obj09_Modes
0001C388 6100 0000                  		bsr.w	Obj09_Rise
0001C38C 6100 0000                  		bsr.w	Obj09_Move
0001C390 6100 0000                  		bsr.w	Obj09_Fall
0001C394                            
0001C394                            Obj09_Display:				; XREF: Obj09_OnWall
0001C394 6100 0000                  		bsr.w	Obj09_ChkItems
0001C398 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C39C 4EB9 0000 DE42             		jsr	SpeedToPos
0001C3A2 6100 0000                  		bsr.w	SS_FixCamera
0001C3A6 3038 F780                  		move.w	($FFFFF780).w,d0
0001C3AA D078 F782                  		add.w	($FFFFF782).w,d0
0001C3AE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C3B2 4EB9 0001 42DA             		jsr	Sonic_Animate
0001C3B8 4E75                       		rts	
0001C3BA                            
0001C3BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3BA                            
0001C3BA                            
0001C3BA                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C3BA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C3C0 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C3C2 4A78 F784                          tst.w   ($FFFFF784).w
0001C3C6 6600                               bne.s   @corereverse1
0001C3C8 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C3CC 6000                               bra.s   Obj09_ChkRight          
0001C3CE                            
0001C3CE                            @corereverse1:
0001C3CE 6100 0000                          bsr.w	Obj09_MoveRight
0001C3D2                            
0001C3D2                            Obj09_ChkRight:
0001C3D2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C3D8 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C3DA 4A78 F784                          tst.w   ($FFFFF784).w
0001C3DE 6600                               bne.s   @corereverse2
0001C3E0 6100 0000                  		bsr.w	Obj09_MoveRight
0001C3E4 6000                               bra.s   Obj09_MoveSpeed 
0001C3E6                            
0001C3E6                            @corereverse2:
0001C3E6 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C3EA                            
0001C3EA                            Obj09_MoveSpeed:
0001C3EA 1038 F602                  		move.b	($FFFFF602).w,d0
0001C3EE 0200 000C                  		andi.b	#$C,d0
0001C3F2 6600                       		bne.s	Obj09_MoveCollision
0001C3F4 3028 0010                  		move.w	$10(a0),d0
0001C3F8 6700                       		beq.s	Obj09_MoveCollision
0001C3FA 317C 0000 0010             		move.w	#0,$10(a0)
0001C400                            
0001C400                            Obj09_MoveCollision:
0001C400 1038 F780                  		move.b	($FFFFF780).w,d0
0001C404 0600 0020                  		addi.b	#$20,d0
0001C408 0200 00C0                  		andi.b	#$C0,d0
0001C40C 4400                       		neg.b	d0
0001C40E 4EB9 0000 2D02             		jsr	(CalcSine).l
0001C414 C3E8 0010                  		muls.w	$10(a0),d1
0001C418 D3A8 0008                  		add.l	d1,8(a0)
0001C41C C1E8 0012                  		muls.w	$12(a0),d0
0001C420 D1A8 000C                  		add.l	d0,$C(a0)
0001C424 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C428 2428 000C                  		move.l	$C(a0),d2
0001C42C 2628 0008                  		move.l	8(a0),d3
0001C430 6100 0000                  		bsr.w	sub_1BCE8
0001C434 6700                       		beq.s	loc_1BAF2
0001C436 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C43A 93A8 0008                  		sub.l	d1,8(a0)
0001C43E 91A8 000C                  		sub.l	d0,$C(a0)
0001C442 317C 0000 0010             		move.w	#0,$10(a0)
0001C448 4E75                       		rts	
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            loc_1BAF2:
0001C44A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C44E 4E75                       		rts	
0001C450                            ; End of function Obj09_Move
0001C450                            
0001C450                            
0001C450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C450                            
0001C450                            
0001C450                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C450 08E8 0000 0022             		bset	#0,$22(a0)
0001C456 4240                               clr.w   d0
0001C458 3038 F786                          move.w  ($FFFFF786).w,d0
0001C45C D040                               add.w   d0,d0
0001C45E 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C464 4468 0010                          neg.w   $10(a0)
0001C468 4E75                               rts
0001C46A                            
0001C46A                            ; End of function Obj09_MoveLeft
0001C46A                            
0001C46A                            
0001C46A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C46A                            
0001C46A                            
0001C46A                            Obj09_MoveRight:
0001C46A 08A8 0000 0022             		bclr	#0,$22(a0)
0001C470 4240                               clr.w   d0
0001C472 3038 F786                          move.w  ($FFFFF786).w,d0
0001C476 D040                               add.w   d0,d0
0001C478 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C47E 4E75                       		rts
0001C480                            
0001C480                            ; End of function Obj09_MoveRight
0001C480                            
0001C480                            ; ---------------------------------------------------------------------------
0001C480                            
0001C480                            SS_XSpdIndex:
0001C480 0032                       		dc.w 50
0001C482 0064                       		dc.w 100
0001C484 0096                       		dc.w 150
0001C486 00C8                       		dc.w 200
0001C488 00FA                       		dc.w 250
0001C48A                            
0001C48A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C48A                            
0001C48A                            
0001C48A                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C48A 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C490 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C492 4A78 F784                          tst.w   ($FFFFF784).w
0001C496 6600 0000                          bne.w   @corereverse1
0001C49A 6100 0000                  		bsr.w	Obj09_MoveUp
0001C49E 6000                               bra.s   Obj09_NoRise
0001C4A0                            
0001C4A0                            @corereverse1:
0001C4A0 6100 0000                  		bsr.w	Obj09_Falling 
0001C4A4                                    
0001C4A4                            Obj09_NoRise:
0001C4A4 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C4AA 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C4AC 4A78 F784                          tst.w   ($FFFFF784).w
0001C4B0 6600 0000                          bne.w   @corereverse2
0001C4B4 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C4B8 6000                               bra.s   Obj09_MoveYSpeed
0001C4BA                            
0001C4BA                            @corereverse2:
0001C4BA 6100 0000                  		bsr.w	Obj09_MoveUp
0001C4BE                            		
0001C4BE                            Obj09_MoveYSpeed:
0001C4BE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C4C2 0200 0003                  		andi.b	#3,d0
0001C4C6 6600                       		bne.s	Obj09_MoveYCollision
0001C4C8 3028 0012                  		move.w	$12(a0),d0
0001C4CC 6700                       		beq.s	Obj09_MoveYCollision
0001C4CE 317C 0000 0012             		move.w	#0,$12(a0)
0001C4D4                            
0001C4D4                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C4D4 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C4D8 0600 0020                  		addi.b	#$20,d0					;	?
0001C4DC 0200 00C0                  		andi.b	#$C0,d0					;	
0001C4E0 4400                       		neg.b	d0						;	?
0001C4E2 4EB9 0000 2D02             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C4E8 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C4EC D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C4F0 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C4F4 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C4F8 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C4FC 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C500 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C504 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C508 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C50C 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C510 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C514 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C518 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C51E 4E75                       		rts								;	end routine
0001C520                            
0001C520                            Obj09_MoveUp:
0001C520 4240                               clr.w   d0
0001C522 3038 F786                          move.w  ($FFFFF786).w,d0
0001C526 D040                               add.w   d0,d0
0001C528 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C52E 4468 0012                          neg.w   $12(a0)
0001C532 4E75                               rts
0001C534                            
0001C534                            Obj09_Falling:
0001C534 4240                               clr.w   d0
0001C536 3038 F786                          move.w  ($FFFFF786).w,d0
0001C53A D040                               add.w   d0,d0
0001C53C 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C542 4E75                       		rts
0001C544                            ; End of function Obj09_Jump
0001C544                            
0001C544                            ; ---------------------------------------------------------------------------
0001C544                            SS_YSpdIndex:
0001C544 0080                       		dc.w $80
0001C546 0100                       		dc.w $100
0001C548 0180                       		dc.w $180
0001C54A 0200                       		dc.w $200
0001C54C 0280                       		dc.w $280
0001C54E                            
0001C54E                            
0001C54E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C54E                            
0001C54E                            
0001C54E                            nullsub_2:				; XREF: Obj09_InAir
0001C54E 4E75                       		rts	
0001C550                            ; End of function nullsub_2
0001C550                            
0001C550                            ; ===========================================================================
0001C550                            ; ---------------------------------------------------------------------------
0001C550                            ; unused subroutine to limit Sonic's upward vertical speed
0001C550                            ; ---------------------------------------------------------------------------
0001C550 323C FC00                  		move.w	#-$400,d1
0001C554 B268 0012                  		cmp.w	$12(a0),d1
0001C558 6F00                       		ble.s	locret_1BBB4
0001C55A 1038 F602                  		move.b	($FFFFF602).w,d0
0001C55E 0200 0070                  		andi.b	#$70,d0
0001C562 6600                       		bne.s	locret_1BBB4
0001C564 3141 0012                  		move.w	d1,$12(a0)
0001C568                            
0001C568                            locret_1BBB4:
0001C568 4E75                       		rts	
0001C56A                            ; ---------------------------------------------------------------------------
0001C56A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C56A                            ; ---------------------------------------------------------------------------
0001C56A                            
0001C56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C56A                            
0001C56A                            
0001C56A                            SS_FixCamera:				; XREF: Obj09
0001C56A 3428 000C                  		move.w	$C(a0),d2
0001C56E 3628 0008                  		move.w	8(a0),d3
0001C572 3038 F700                  		move.w	($FFFFF700).w,d0
0001C576 0443 00A0                  		subi.w	#$A0,d3
0001C57A 6500                       		bcs.s	loc_1BBCE
0001C57C 9043                       		sub.w	d3,d0
0001C57E 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C582                            
0001C582                            loc_1BBCE:
0001C582 3038 F704                  		move.w	($FFFFF704).w,d0
0001C586 0442 0070                  		subi.w	#$70,d2
0001C58A 6500                       		bcs.s	locret_1BBDE
0001C58C 9042                       		sub.w	d2,d0
0001C58E 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C592                            
0001C592                            locret_1BBDE:
0001C592 4E75                       		rts	
0001C594                            ; End of function SS_FixCamera
0001C594                            
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C594 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C59A 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C5A0 6600                       		bne.s	loc_1BBF4
0001C5A2 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C5A8                            
0001C5A8                            loc_1BBF4:
0001C5A8 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C5AE 6D00                       		blt.s	loc_1BC12
0001C5B0 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C5B6                            ;		move.w	#$4000,($FFFFF780).w
0001C5B6 5428 0024                  		addq.b	#2,$24(a0)
0001C5BA 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C5C0                            
0001C5C0                            loc_1BC12:
0001C5C0                            ;		move.w	($FFFFF780).w,d0
0001C5C0                            ;		add.w	($FFFFF782).w,d0
0001C5C0                            ;		move.w	d0,($FFFFF780).w
0001C5C0 4EB9 0001 42DA             		jsr	Sonic_Animate
0001C5C6 4EB9 0001 4580             		jsr	LoadSonicDynPLC
0001C5CC 6100 FF9C                  		bsr.w	SS_FixCamera
0001C5D0 4EF9 0000 DE68             		jmp	DisplaySprite
0001C5D6                            ; ===========================================================================
0001C5D6                            
0001C5D6                            Obj09_Exit2:				; XREF: Obj09_Index
0001C5D6 5368 0038                  		subq.w	#1,$38(a0)
0001C5DA 6600                       		bne.s	loc_1BC40
0001C5DC 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C5E2                            
0001C5E2                            loc_1BC40:
0001C5E2 4EB9 0001 42DA             		jsr	Sonic_Animate
0001C5E8 4EB9 0001 4580             		jsr	LoadSonicDynPLC
0001C5EE 6100 FF7A                  		bsr.w	SS_FixCamera
0001C5F2 4EF9 0000 DE68             		jmp	DisplaySprite
0001C5F8                            
0001C5F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5F8                            
0001C5F8                            
0001C5F8                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C5F8 2428 000C                  		move.l	$C(a0),d2
0001C5FC 2628 0008                  		move.l	8(a0),d3
0001C600 1038 F780                  		move.b	($FFFFF780).w,d0
0001C604 0200 00FC                  		andi.b	#$FC,d0
0001C608 4EB9 0000 2D02             		jsr	(CalcSine).l
0001C60E 3828 0010                  		move.w	$10(a0),d4
0001C612 48C4                       		ext.l	d4
0001C614 E184                       		asl.l	#8,d4
0001C616 C1FC 002A                  		muls.w	#$2A,d0
0001C61A D084                       		add.l	d4,d0
0001C61C 3828 0012                  		move.w	$12(a0),d4
0001C620 48C4                       		ext.l	d4
0001C622 E184                       		asl.l	#8,d4
0001C624 C3FC 002A                  		muls.w	#$2A,d1
0001C628 D284                       		add.l	d4,d1
0001C62A 7A00                       		moveq	#0,d5
0001C62C 3A28 0010                  		move.w	$10(a0),d5
0001C630 6700                       		beq.s	Obj09_NoXFall
0001C632 D680                       		add.l	d0,d3
0001C634 6100 0000                  		bsr.w	sub_1BCE8
0001C638 6700                       		beq.s	loc_1BCB0
0001C63A 9680                       		sub.l	d0,d3
0001C63C 7000                       		moveq	#0,d0
0001C63E 3140 0010                  		move.w	d0,$10(a0)
0001C642 08A8 0001 0022             		bclr	#1,$22(a0)
0001C648                            
0001C648                            Obj09_NoXFall
0001C648 7C00                       		moveq	#0,d6
0001C64A 3C28 0012                  		move.w	$12(a0),d6
0001C64E 6700                       		beq.s	Obj09_NoYFall
0001C650 D481                       		add.l	d1,d2
0001C652 6100 0000                  		bsr.w	sub_1BCE8
0001C656 6700                       		beq.s	loc_1BCC6
0001C658 9481                       		sub.l	d1,d2
0001C65A 7200                       		moveq	#0,d1
0001C65C 3141 0012                  		move.w	d1,$12(a0)
0001C660 4E75                       		rts	
0001C662                            ; ===========================================================================
0001C662                            
0001C662                            loc_1BCB0:
0001C662 7C00                       		moveq	#0,d6
0001C664 3C28 0012                  		move.w	$12(a0),d6
0001C668 6700                       		beq.s	Obj09_NoYFall
0001C66A D481                       		add.l	d1,d2
0001C66C 6100 0000                  		bsr.w	sub_1BCE8
0001C670 6700                       		beq.s	loc_1BCD4
0001C672 9481                       		sub.l	d1,d2
0001C674 7200                       		moveq	#0,d1
0001C676 3141 0012                  		move.w	d1,$12(a0)
0001C67A 08A8 0001 0022             		bclr	#1,$22(a0)
0001C680                            
0001C680                            loc_1BCC6:
0001C680 E080                       		asr.l	#8,d0
0001C682 E081                       		asr.l	#8,d1
0001C684 3140 0010                  		move.w	d0,$10(a0)
0001C688 3141 0012                  		move.w	d1,$12(a0)
0001C68C 4E75                       		rts	
0001C68E                            ; ===========================================================================
0001C68E                            
0001C68E                            loc_1BCD4:
0001C68E E080                       		asr.l	#8,d0
0001C690 E081                       		asr.l	#8,d1
0001C692 3140 0010                  		move.w	d0,$10(a0)
0001C696 3141 0012                  		move.w	d1,$12(a0)
0001C69A 08E8 0001 0022             		bset	#1,$22(a0)
0001C6A0 4E75                       		rts	
0001C6A2                            
0001C6A2                            Obj09_NoYFall:
0001C6A2 4E75                       		rts
0001C6A4                            ; End of function Obj09_Fall
0001C6A4                            
0001C6A4                            
0001C6A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6A4                            
0001C6A4                            
0001C6A4                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C6A4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C6AA 7800                       		moveq	#0,d4
0001C6AC 4842                       		swap	d2
0001C6AE 3802                       		move.w	d2,d4
0001C6B0 4842                       		swap	d2
0001C6B2 0644 0044                  		addi.w	#$44,d4
0001C6B6 88FC 0018                  		divu.w	#$18,d4
0001C6BA C8FC 0080                  		mulu.w	#$80,d4
0001C6BE D3C4                       		adda.l	d4,a1
0001C6C0 7800                       		moveq	#0,d4
0001C6C2 4843                       		swap	d3
0001C6C4 3803                       		move.w	d3,d4
0001C6C6 4843                       		swap	d3
0001C6C8 0644 0014                  		addi.w	#$14,d4
0001C6CC 88FC 0018                  		divu.w	#$18,d4
0001C6D0 D2C4                       		adda.w	d4,a1
0001C6D2 7A00                       		moveq	#0,d5
0001C6D4 1819                       		move.b	(a1)+,d4
0001C6D6 6100                       		bsr.s	sub_1BD30
0001C6D8 1819                       		move.b	(a1)+,d4
0001C6DA 6100                       		bsr.s	sub_1BD30
0001C6DC D2FC 007E                  		adda.w	#$7E,a1
0001C6E0 1819                       		move.b	(a1)+,d4
0001C6E2 6100                       		bsr.s	sub_1BD30
0001C6E4 1819                       		move.b	(a1)+,d4
0001C6E6 6100                       		bsr.s	sub_1BD30
0001C6E8 4A05                       		tst.b	d5
0001C6EA 4E75                       		rts	
0001C6EC                            ; End of function sub_1BCE8
0001C6EC                            
0001C6EC                            
0001C6EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6EC                            
0001C6EC                            
0001C6EC                            sub_1BD30:				; XREF: sub_1BCE8
0001C6EC 6700                       		beq.s	locret_1BD44
0001C6EE 0C04 0028                  		cmpi.b	#$28,d4
0001C6F2 6500                       		blo.s	loc_1BD46
0001C6F4 0C04 004B                  		cmpi.b	#$4B,d4
0001C6F8 6400                       		bhs.s	loc_1BD46
0001C6FA 0C04 003A                  		cmpi.b	#$3A,d4
0001C6FE 6400                       		bhs.s	locret_1BD44
0001C700 0C04 002C                  		cmpi.b	#$2C,d4
0001C704 6400                       		bhs.s	loc_1BD46
0001C706                            
0001C706                            locret_1BD44:
0001C706 4E75                       		rts	
0001C708                            ; ===========================================================================
0001C708                            
0001C708                            loc_1BD46:
0001C708 1144 0030                  		move.b	d4,$30(a0)
0001C70C 2149 0032                  		move.l	a1,$32(a0)
0001C710 7AFF                       		moveq	#-1,d5
0001C712 4E75                       		rts	
0001C714                            ; End of function sub_1BD30
0001C714                            
0001C714                            
0001C714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C714                            
0001C714                            
0001C714                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C714 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C71A 7800                       		moveq	#0,d4
0001C71C 3828 000C                  		move.w	$C(a0),d4
0001C720 0644 0050                  		addi.w	#$50,d4
0001C724 88FC 0018                  		divu.w	#$18,d4
0001C728 C8FC 0080                  		mulu.w	#$80,d4
0001C72C D3C4                       		adda.l	d4,a1
0001C72E 7800                       		moveq	#0,d4
0001C730 3828 0008                  		move.w	8(a0),d4
0001C734 0644 0020                  		addi.w	#$20,d4
0001C738 88FC 0018                  		divu.w	#$18,d4
0001C73C D2C4                       		adda.w	d4,a1
0001C73E 1811                       		move.b	(a1),d4
0001C740 6600                       		bne.s	Obj09_ChkCont
0001C742 4A28 003A                  		tst.b	$3A(a0)
0001C746 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C74A 7800                       		moveq	#0,d4
0001C74C 4E75                       		rts	
0001C74E                            ; ===========================================================================
0001C74E                            
0001C74E                            Obj09_ChkCont:
0001C74E 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C752 6600                       		bne.s	Obj09_Chk1Up
0001C754 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001C758 6600                       		bne.s	Obj09_GetCont
0001C75A 14BC 0001                  		move.b	#1,(a2)
0001C75E 2549 0004                  		move.l	a1,4(a2)
0001C762                            
0001C762                            Obj09_GetCont:
0001C762 4EB9 0000 A374             		jsr	CollectRing
0001C768 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C76E 6500                       		bcs.s	Obj09_NoCont
0001C770 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C776 6600                       		bne.s	Obj09_NoCont
0001C778 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C77C 303C 00BF                  		move.w	#$BF,d0
0001C780 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra continue sound
0001C786                            
0001C786                            Obj09_NoCont:
0001C786 7800                       		moveq	#0,d4
0001C788 4E75                       		rts	
0001C78A                            ; ===========================================================================
0001C78A                            
0001C78A                            Obj09_Chk1Up:
0001C78A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C78E 6600                       		bne.s	Obj09_ChkEmer
0001C790 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001C794 6600                       		bne.s	Obj09_Get1Up
0001C796 14BC 0003                  		move.b	#3,(a2)
0001C79A 2549 0004                  		move.l	a1,4(a2)
0001C79E                            
0001C79E                            Obj09_Get1Up:
0001C79E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C7A2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C7A6 303C 0088                  		move.w	#$88,d0
0001C7AA 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra life music
0001C7B0 7800                       		moveq	#0,d4
0001C7B2 4E75                       		rts	
0001C7B4                            ; ===========================================================================
0001C7B4                            
0001C7B4                            Obj09_ChkEmer:
0001C7B4 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C7B8 6500                       		bcs.s	Obj09_UPblock
0001C7BA 0C04 0040                  		cmpi.b	#$40,d4
0001C7BE 6200                       		bhi.s	Obj09_UPblock
0001C7C0 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001C7C4 6600                       		bne.s	Obj09_GetEmer
0001C7C6 14BC 0005                  		move.b	#5,(a2)
0001C7CA 2549 0004                  		move.l	a1,4(a2)
0001C7CE                            
0001C7CE                            Obj09_GetEmer:
0001C7CE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C7D4 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C7D6 0404 003B                  		subi.b	#$3B,d4
0001C7DA 7000                       		moveq	#0,d0
0001C7DC 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C7E0 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C7E4 1584 0000                  		move.b	d4,(a2,d0.w)
0001C7E8 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C7EC                            
0001C7EC                            Obj09_NoEmer:
0001C7EC 303C 0093                  		move.w	#$93,d0
0001C7F0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C7F6 7800                       		moveq	#0,d4
0001C7F8 4E75                       		rts	
0001C7FA                            
0001C7FA                            ; ===========================================================================
0001C7FA                            
0001C7FA                            Obj09_UPblock:
0001C7FA 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001C7FE 6600                       		bne.s	Obj09_DOWNblock
0001C800 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001C804 6600                       		bne.s	Obj09_SpeedUp
0001C806 14BC 0001                  		move.b	#1,(a2)
0001C80A 2549 0004                  		move.l	a1,4(a2)
0001C80E                            
0001C80E                            Obj09_SpeedUp:
0001C80E 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001C814 6400                       		bhs.s	Obj09_UPsnd
0001C816 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001C81A                            
0001C81A                            Obj09_UPsnd:
0001C81A 303C 00A9                  		move.w	#$A9,d0
0001C81E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C824 7800                       		moveq	#0,d4
0001C826 4E75                       		rts	
0001C828                            ; ===========================================================================
0001C828                            
0001C828                            Obj09_DOWNblock:
0001C828 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001C82C 6600                       		bne.s	Obj09_Rblock
0001C82E 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001C832 6600                       		bne.s	Obj09_SpeedDown
0001C834 14BC 0001                  		move.b	#1,(a2)
0001C838 2549 0004                  		move.l	a1,4(a2)
0001C83C                            
0001C83C                            Obj09_SpeedDown:
0001C83C 4A78 F786                  		tst.w 	($FFFFF786).w
0001C840 6700                       		beq.s	Obj09_DOWNsnd
0001C842 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001C846                            
0001C846                            Obj09_DOWNsnd:
0001C846 303C 00A9                  		move.w	#$A9,d0
0001C84A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play up/down sound
0001C850 7800                       		moveq	#0,d4
0001C852 4E75                       		rts	
0001C854                            ; ===========================================================================
0001C854                            
0001C854                            Obj09_Rblock:
0001C854 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001C858 6600                       		bne.s	Obj09_ChkGhost
0001C85A 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001C85E 6600                       		bne.s	Obj09_RevStage
0001C860 14BC 0001                  		move.b	#1,(a2)
0001C864 2549 0004                  		move.l	a1,4(a2)
0001C868                            
0001C868                            Obj09_RevStage:
0001C868 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001C86E 103C 00A9                  		move.b	#$A9,d0
0001C872 4EB9 0000 15D2             		jsr	(PlaySound_Special).l	; play sound
0001C878 7800                       		moveq	#0,d4
0001C87A 4E75                       		rts	
0001C87C                            
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            Obj09_ChkGhost:
0001C87C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C880 6600                       		bne.s	Obj09_ChkGhostTag
0001C882 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C888                            
0001C888                            Obj09_ChkGhostTag:
0001C888 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C88C 6600                       		bne.s	Obj09_NoGhost
0001C88E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C894 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C896 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C89C                            
0001C89C                            Obj09_NoGhost:
0001C89C 78FF                       		moveq	#-1,d4
0001C89E 4E75                       		rts	
0001C8A0                            ; ===========================================================================
0001C8A0                            
0001C8A0                            Obj09_MakeGhostSolid:
0001C8A0 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C8A6 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C8A8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C8AE 723F                       		moveq	#$3F,d1
0001C8B0                            
0001C8B0                            Obj09_GhostLoop2:
0001C8B0 743F                       		moveq	#$3F,d2
0001C8B2                            
0001C8B2                            Obj09_GhostLoop:
0001C8B2 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C8B6 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C8B8 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C8BC                            
0001C8BC                            Obj09_NoReplace:
0001C8BC 5249                       		addq.w	#1,a1
0001C8BE 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C8C2 43E9 0040                  		lea	$40(a1),a1
0001C8C6 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C8CA                            
0001C8CA                            Obj09_GhostNotSolid:
0001C8CA 4228 003A                  		clr.b	$3A(a0)
0001C8CE 7800                       		moveq	#0,d4
0001C8D0 4E75                       		rts	
0001C8D2                            ; End of function Obj09_ChkItems
0001C8D2                            
0001C8D2                            
0001C8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8D2                            
0001C8D2                            
0001C8D2                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C8D2 1028 0030                  		move.b	$30(a0),d0
0001C8D6 6600                       		bne.s	Obj09_GOAL
0001C8D8 5328 0036                  		subq.b	#1,$36(a0)
0001C8DC 6A00                       		bpl.s	loc_1BEA0
0001C8DE 117C 0000 0036             		move.b	#0,$36(a0)
0001C8E4                            
0001C8E4                            loc_1BEA0:
0001C8E4 5328 0037                  		subq.b	#1,$37(a0)
0001C8E8 6A00                       		bpl.s	locret_1BEAC
0001C8EA 117C 0000 0037             		move.b	#0,$37(a0)
0001C8F0                            
0001C8F0                            locret_1BEAC:
0001C8F0 4E75                       		rts	
0001C8F2                            ; ===========================================================================
0001C8F2                            
0001C8F2                            ; ===========================================================================
0001C8F2                            
0001C8F2                            Obj09_GOAL:
0001C8F2 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C8F6 6600                       		bne.s	Obj09_ChkGlass
0001C8F8 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C8FC 303C 00A8                  		move.w	#$A8,d0		; change item
0001C900 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C906 4E75                       		rts	
0001C908                            ; ===========================================================================
0001C908                            
0001C908                            ; ===========================================================================
0001C908                            
0001C908                            Obj09_ChkGlass:
0001C908 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C90C 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C90E 0C00 002E                  		cmpi.b	#$2E,d0
0001C912 6700                       		beq.s	Obj09_Glass
0001C914 0C00 002F                  		cmpi.b	#$2F,d0
0001C918 6700                       		beq.s	Obj09_Glass
0001C91A 0C00 0030                  		cmpi.b	#$30,d0
0001C91E 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C920                            
0001C920                            Obj09_Glass:
0001C920 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001C924 6600                       		bne.s	Obj09_GlassSnd
0001C926 14BC 0006                  		move.b	#6,(a2)
0001C92A 2268 0032                  		movea.l	$32(a0),a1
0001C92E 5389                       		subq.l	#1,a1
0001C930 2549 0004                  		move.l	a1,4(a2)
0001C934 1011                       		move.b	(a1),d0
0001C936 5200                       		addq.b	#1,d0		; change glass type when touched
0001C938 0C00 0030                  		cmpi.b	#$30,d0
0001C93C 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C93E 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C940                            
0001C940                            Obj09_GlassUpdate:
0001C940 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C944                            
0001C944                            Obj09_GlassSnd:
0001C944 303C 00BA                  		move.w	#$BA,d0
0001C948 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C94E                            ; ===========================================================================
0001C94E                            
0001C94E                            Obj09_NoGlass:
0001C94E 4E75                       		rts	
0001C950                            ; End of function Obj09_ChkItems2
0001C950                            
0001C950                            ; ===========================================================================
0001C950                            ; ---------------------------------------------------------------------------
0001C950                            ; Object 10 - blank
0001C950                            ; ---------------------------------------------------------------------------
0001C950                            
0001C950                            Obj10:					; XREF: Obj_Index
0001C950 4E75                       		rts	
0001C952                            ; ---------------------------------------------------------------------------
0001C952                            ; Subroutine to	animate	level graphics
0001C952                            ; ---------------------------------------------------------------------------
0001C952                            
0001C952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C952                            
0001C952                            
0001C952                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C952 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C956 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C958 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C95E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C962 7000                       		moveq	#0,d0
0001C964 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C968 D040                       		add.w	d0,d0
0001C96A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C96E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C972                            ; ===========================================================================
0001C972                            
0001C972                            AniArt_Pause:
0001C972 4E75                       		rts	
0001C974                            ; End of function AniArt_Load
0001C974                            
0001C974                            ; ===========================================================================
0001C974 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C978 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C97C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C980 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C982                            ; ===========================================================================
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            ; Animated pattern routine - Green Hill
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            
0001C982                            AniArt_GHZ:				; XREF: AniArt_Index
0001C982 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C986 6A00                       		bpl.s	loc_1C08A
0001C988 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C98E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C994 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C998 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C99C 0240 0001                  		andi.w	#1,d0
0001C9A0 6700                       		beq.s	loc_1C078
0001C9A2 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C9A6                            
0001C9A6                            loc_1C078:
0001C9A6 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C9B0 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C9B4 6000 0000                  		bra.w	LoadTiles
0001C9B8                            ; ===========================================================================
0001C9B8                            
0001C9B8                            loc_1C08A:
0001C9B8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9BC 6A00                       		bpl.s	loc_1C0C0
0001C9BE 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C9C4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C9CA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9CE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9D2 0240 0001                  		andi.w	#1,d0
0001C9D6 6700                       		beq.s	loc_1C0AE
0001C9D8 43E9 0200                  		lea	$200(a1),a1
0001C9DC                            
0001C9DC                            loc_1C0AE:
0001C9DC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C9E6 323C 000F                  		move.w	#$F,d1
0001C9EA 6000 0000                  		bra.w	LoadTiles
0001C9EE                            ; ===========================================================================
0001C9EE                            
0001C9EE                            loc_1C0C0:
0001C9EE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C9F2 6A00                       		bpl.s	locret_1C10C
0001C9F4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C9FA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C9FE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CA02 0240 0003                  		andi.w	#3,d0
0001CA06 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CA0A 0800 0000                  		btst	#0,d0
0001CA0E 6600                       		bne.s	loc_1C0E8
0001CA10 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CA16                            
0001CA16                            loc_1C0E8:
0001CA16 EF48                       		lsl.w	#7,d0
0001CA18 3200                       		move.w	d0,d1
0001CA1A D040                       		add.w	d0,d0
0001CA1C D041                       		add.w	d1,d0
0001CA1E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA28 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA2E 43F1 0000                  		lea	(a1,d0.w),a1
0001CA32 323C 000B                  		move.w	#$B,d1
0001CA36 6100 0000                  		bsr.w	LoadTiles
0001CA3A                            
0001CA3A                            locret_1C10C:
0001CA3A 4E75                       		rts	
0001CA3C                            ; ===========================================================================
0001CA3C 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CA40                            ; ===========================================================================
0001CA40                            ; ---------------------------------------------------------------------------
0001CA40                            ; Animated pattern routine - Marble
0001CA40                            ; ---------------------------------------------------------------------------
0001CA40                            
0001CA40                            AniArt_MZ:				; XREF: AniArt_Index
0001CA40 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA44 6A00                       		bpl.s	loc_1C150
0001CA46 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CA4C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CA52 7000                       		moveq	#0,d0
0001CA54 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA58 5200                       		addq.b	#1,d0
0001CA5A 0C00 0003                  		cmpi.b	#3,d0
0001CA5E 6600                       		bne.s	loc_1C134
0001CA60 7000                       		moveq	#0,d0
0001CA62                            
0001CA62                            loc_1C134:
0001CA62 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CA66 C0FC 0100                  		mulu.w	#$100,d0
0001CA6A D2C0                       		adda.w	d0,a1
0001CA6C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CA76 323C 0007                  		move.w	#7,d1
0001CA7A 6100 0000                  		bsr.w	LoadTiles
0001CA7E                            
0001CA7E                            loc_1C150:
0001CA7E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA82 6A00                       		bpl.s	loc_1C1AE
0001CA84 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CA8A 7000                       		moveq	#0,d0
0001CA8C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA90 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CA96 EE58                       		ror.w	#7,d0
0001CA98 D8C0                       		adda.w	d0,a4
0001CA9A 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CAA4 7600                       		moveq	#0,d3
0001CAA6 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CAAA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAAE 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CAB2 343C 0003                  		move.w	#3,d2
0001CAB6                            
0001CAB6                            loc_1C188:
0001CAB6 3003                       		move.w	d3,d0
0001CAB8 D040                       		add.w	d0,d0
0001CABA 0240 001E                  		andi.w	#$1E,d0
0001CABE 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CAC4 3033 0000                  		move.w	(a3,d0.w),d0
0001CAC8 47F3 0000                  		lea	(a3,d0.w),a3
0001CACC 224C                       		movea.l	a4,a1
0001CACE 323C 001F                  		move.w	#$1F,d1
0001CAD2 4E93                       		jsr	(a3)
0001CAD4 5843                       		addq.w	#4,d3
0001CAD6 51CA FFDE                  		dbf	d2,loc_1C188
0001CADA 4E75                       		rts	
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1C1AE:
0001CADC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CAE0 6A00 0000                  		bpl.w	locret_1C1EA
0001CAE4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CAEA 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CAF0 7000                       		moveq	#0,d0
0001CAF2 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CAF6 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CAFA 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CB00 C0FC 00C0                  		mulu.w	#$C0,d0
0001CB04 D2C0                       		adda.w	d0,a1
0001CB06 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CB10 323C 0005                  		move.w	#5,d1
0001CB14 6000 0000                  		bra.w	LoadTiles
0001CB18                            ; ===========================================================================
0001CB18                            
0001CB18                            locret_1C1EA:
0001CB18 4E75                       		rts	
0001CB1A                            ; ===========================================================================
0001CB1A                            ; ---------------------------------------------------------------------------
0001CB1A                            ; Animated pattern routine - Scrap Brain
0001CB1A                            ; ---------------------------------------------------------------------------
0001CB1A                            
0001CB1A                            AniArt_SBZ:				; XREF: AniArt_Index
0001CB1A 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CB1E 6700                       		beq.s	loc_1C1F8
0001CB20 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CB24 6000                       		bra.s	loc_1C250
0001CB26                            ; ===========================================================================
0001CB26                            
0001CB26                            loc_1C1F8:
0001CB26 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB2A 6A00                       		bpl.s	loc_1C250
0001CB2C 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CB32 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CB38 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CB42 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB46 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB4A 0240 0007                  		andi.w	#7,d0
0001CB4E 6700                       		beq.s	loc_1C234
0001CB50 5340                       		subq.w	#1,d0
0001CB52 C0FC 0180                  		mulu.w	#$180,d0
0001CB56 43F1 0000                  		lea	(a1,d0.w),a1
0001CB5A 323C 000B                  		move.w	#$B,d1
0001CB5E 6000 0000                  		bra.w	LoadTiles
0001CB62                            ; ===========================================================================
0001CB62                            
0001CB62                            loc_1C234:
0001CB62 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CB68                            
0001CB68                            loc_1C23A:
0001CB68 323C 0005                  		move.w	#5,d1
0001CB6C 6100 0000                  		bsr.w	LoadTiles
0001CB70 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB76 323C 0005                  		move.w	#5,d1
0001CB7A 6000 0000                  		bra.w	LoadTiles
0001CB7E                            ; ===========================================================================
0001CB7E                            
0001CB7E                            loc_1C250:
0001CB7E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CB82 6700                       		beq.s	loc_1C25C
0001CB84 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB88 6000                       		bra.s	locret_1C2A0
0001CB8A                            ; ===========================================================================
0001CB8A                            
0001CB8A                            loc_1C25C:
0001CB8A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB8E 6A00                       		bpl.s	locret_1C2A0
0001CB90 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB96 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB9C 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CBA6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBAA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBAE 0240 0007                  		andi.w	#7,d0
0001CBB2 6700                       		beq.s	loc_1C298
0001CBB4 5340                       		subq.w	#1,d0
0001CBB6 C0FC 0180                  		mulu.w	#$180,d0
0001CBBA 43F1 0000                  		lea	(a1,d0.w),a1
0001CBBE 323C 000B                  		move.w	#$B,d1
0001CBC2 6000 0000                  		bra.w	LoadTiles
0001CBC6                            ; ===========================================================================
0001CBC6                            
0001CBC6                            loc_1C298:
0001CBC6 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CBCC 609A                       		bra.s	loc_1C23A
0001CBCE                            ; ===========================================================================
0001CBCE                            
0001CBCE                            locret_1C2A0:
0001CBCE 4E75                       		rts	
0001CBD0                            ; ===========================================================================
0001CBD0                            ; ---------------------------------------------------------------------------
0001CBD0                            ; Animated pattern routine - ending sequence
0001CBD0                            ; ---------------------------------------------------------------------------
0001CBD0                            
0001CBD0                            AniArt_Ending:				; XREF: AniArt_Index
0001CBD0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CBD4 6A00                       		bpl.s	loc_1C2F4
0001CBD6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CBDC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CBE2 45F8 9400                  		lea	($FFFF9400).w,a2
0001CBE6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBEA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBEE 0240 0001                  		andi.w	#1,d0
0001CBF2 6700                       		beq.s	loc_1C2CE
0001CBF4 43E9 0200                  		lea	$200(a1),a1
0001CBF8 45EA 0200                  		lea	$200(a2),a2
0001CBFC                            
0001CBFC                            loc_1C2CE:
0001CBFC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CC06 323C 000F                  		move.w	#$F,d1
0001CC0A 6100 0000                  		bsr.w	LoadTiles
0001CC0E 224A                       		movea.l	a2,a1
0001CC10 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CC1A 323C 000F                  		move.w	#$F,d1
0001CC1E 6000 0000                  		bra.w	LoadTiles
0001CC22                            ; ===========================================================================
0001CC22                            
0001CC22                            loc_1C2F4:
0001CC22 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC26 6A00                       		bpl.s	loc_1C33C
0001CC28 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC2E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC32 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC36 0240 0007                  		andi.w	#7,d0
0001CC3A 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CC3E EF48                       		lsl.w	#7,d0
0001CC40 3200                       		move.w	d0,d1
0001CC42 D040                       		add.w	d0,d0
0001CC44 D041                       		add.w	d1,d0
0001CC46 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CC50 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CC56 43F1 0000                  		lea	(a1,d0.w),a1
0001CC5A 323C 000B                  		move.w	#$B,d1
0001CC5E 6000 0000                  		bra.w	LoadTiles
0001CC62                            ; ===========================================================================
0001CC62 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CC6A                            ; ===========================================================================
0001CC6A                            
0001CC6A                            loc_1C33C:
0001CC6A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CC6E 6A00                       		bpl.s	loc_1C37A
0001CC70 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CC76 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CC7A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CC7E 0240 0003                  		andi.w	#3,d0
0001CC82 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CC86 E148                       		lsl.w	#8,d0
0001CC88 D040                       		add.w	d0,d0
0001CC8A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CC94 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CC98 43F1 0000                  		lea	(a1,d0.w),a1
0001CC9C 323C 000F                  		move.w	#$F,d1
0001CCA0 6000 0000                  		bra.w	LoadTiles
0001CCA4                            ; ===========================================================================
0001CCA4 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CCA8                            ; ===========================================================================
0001CCA8                            
0001CCA8                            loc_1C37A:
0001CCA8 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CCAC 6A00                       		bpl.s	locret_1C3B4
0001CCAE 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CCB4 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CCB8 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CCBC 0240 0003                  		andi.w	#3,d0
0001CCC0 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CCC4 E148                       		lsl.w	#8,d0
0001CCC6 D040                       		add.w	d0,d0
0001CCC8 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CCD2 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CCD6 43F1 0000                  		lea	(a1,d0.w),a1
0001CCDA 323C 000F                  		move.w	#$F,d1
0001CCDE 6000 0000                  		bra.w	LoadTiles
0001CCE2                            ; ===========================================================================
0001CCE2                            
0001CCE2                            locret_1C3B4:
0001CCE2 4E75                       		rts	
0001CCE4                            ; ===========================================================================
0001CCE4                            
0001CCE4                            AniArt_none:				; XREF: AniArt_Index
0001CCE4 4E75                       		rts	
0001CCE6                            
0001CCE6                            ; ---------------------------------------------------------------------------
0001CCE6                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CCE6                            ; ---------------------------------------------------------------------------
0001CCE6                            
0001CCE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCE6                            
0001CCE6                            
0001CCE6                            LoadTiles:
0001CCE6 2C99                       		move.l	(a1)+,(a6)
0001CCE8 2C99                       		move.l	(a1)+,(a6)
0001CCEA 2C99                       		move.l	(a1)+,(a6)
0001CCEC 2C99                       		move.l	(a1)+,(a6)
0001CCEE 2C99                       		move.l	(a1)+,(a6)
0001CCF0 2C99                       		move.l	(a1)+,(a6)
0001CCF2 2C99                       		move.l	(a1)+,(a6)
0001CCF4 2C99                       		move.l	(a1)+,(a6)
0001CCF6 51C9 FFEE                  		dbf	d1,LoadTiles
0001CCFA 4E75                       		rts	
0001CCFC                            ; End of function LoadTiles
0001CCFC                            
0001CCFC                            ; ===========================================================================
0001CCFC                            ; ---------------------------------------------------------------------------
0001CCFC                            ; Animated pattern routine - more Marble Zone
0001CCFC                            ; ---------------------------------------------------------------------------
0001CCFC 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CD00 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CD04 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CD08 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CD0C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CD10 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CD14 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CD18 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CD1C                            ; ===========================================================================
0001CD1C                            
0001CD1C                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CD1C 2C91                       		move.l	(a1),(a6)
0001CD1E 43E9 0010                  		lea	$10(a1),a1
0001CD22 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CD26 4E75                       		rts	
0001CD28                            ; ===========================================================================
0001CD28                            
0001CD28                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CD28 2029 0002                  		move.l	2(a1),d0
0001CD2C 1029 0001                  		move.b	1(a1),d0
0001CD30 E098                       		ror.l	#8,d0
0001CD32 2C80                       		move.l	d0,(a6)
0001CD34 43E9 0010                  		lea	$10(a1),a1
0001CD38 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CD3C 4E75                       		rts	
0001CD3E                            ; ===========================================================================
0001CD3E                            
0001CD3E                            loc_1C410:				; XREF: AniArt_MZextra
0001CD3E 2CA9 0002                  		move.l	2(a1),(a6)
0001CD42 43E9 0010                  		lea	$10(a1),a1
0001CD46 51C9 FFF6                  		dbf	d1,loc_1C410
0001CD4A 4E75                       		rts	
0001CD4C                            ; ===========================================================================
0001CD4C                            
0001CD4C                            loc_1C41E:				; XREF: AniArt_MZextra
0001CD4C 2029 0004                  		move.l	4(a1),d0
0001CD50 1029 0003                  		move.b	3(a1),d0
0001CD54 E098                       		ror.l	#8,d0
0001CD56 2C80                       		move.l	d0,(a6)
0001CD58 43E9 0010                  		lea	$10(a1),a1
0001CD5C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CD60 4E75                       		rts	
0001CD62                            ; ===========================================================================
0001CD62                            
0001CD62                            loc_1C434:				; XREF: AniArt_MZextra
0001CD62 2CA9 0004                  		move.l	4(a1),(a6)
0001CD66 43E9 0010                  		lea	$10(a1),a1
0001CD6A 51C9 FFF6                  		dbf	d1,loc_1C434
0001CD6E 4E75                       		rts	
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            loc_1C442:				; XREF: AniArt_MZextra
0001CD70 2029 0006                  		move.l	6(a1),d0
0001CD74 1029 0005                  		move.b	5(a1),d0
0001CD78 E098                       		ror.l	#8,d0
0001CD7A 2C80                       		move.l	d0,(a6)
0001CD7C 43E9 0010                  		lea	$10(a1),a1
0001CD80 51C9 FFEE                  		dbf	d1,loc_1C442
0001CD84 4E75                       		rts	
0001CD86                            ; ===========================================================================
0001CD86                            
0001CD86                            loc_1C458:				; XREF: AniArt_MZextra
0001CD86 2CA9 0006                  		move.l	6(a1),(a6)
0001CD8A 43E9 0010                  		lea	$10(a1),a1
0001CD8E 51C9 FFF6                  		dbf	d1,loc_1C458
0001CD92 4E75                       		rts	
0001CD94                            ; ===========================================================================
0001CD94                            
0001CD94                            loc_1C466:				; XREF: AniArt_MZextra
0001CD94 2029 0008                  		move.l	8(a1),d0
0001CD98 1029 0007                  		move.b	7(a1),d0
0001CD9C E098                       		ror.l	#8,d0
0001CD9E 2C80                       		move.l	d0,(a6)
0001CDA0 43E9 0010                  		lea	$10(a1),a1
0001CDA4 51C9 FFEE                  		dbf	d1,loc_1C466
0001CDA8 4E75                       		rts	
0001CDAA                            ; ===========================================================================
0001CDAA                            
0001CDAA                            loc_1C47C:				; XREF: AniArt_MZextra
0001CDAA 2CA9 0008                  		move.l	8(a1),(a6)
0001CDAE 43E9 0010                  		lea	$10(a1),a1
0001CDB2 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CDB6 4E75                       		rts	
0001CDB8                            ; ===========================================================================
0001CDB8                            
0001CDB8                            loc_1C48A:				; XREF: AniArt_MZextra
0001CDB8 2029 000A                  		move.l	$A(a1),d0
0001CDBC 1029 0009                  		move.b	9(a1),d0
0001CDC0 E098                       		ror.l	#8,d0
0001CDC2 2C80                       		move.l	d0,(a6)
0001CDC4 43E9 0010                  		lea	$10(a1),a1
0001CDC8 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CDCC 4E75                       		rts	
0001CDCE                            ; ===========================================================================
0001CDCE                            
0001CDCE                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CDCE 2CA9 000A                  		move.l	$A(a1),(a6)
0001CDD2 43E9 0010                  		lea	$10(a1),a1
0001CDD6 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CDDA 4E75                       		rts	
0001CDDC                            ; ===========================================================================
0001CDDC                            
0001CDDC                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CDDC 2029 000C                  		move.l	$C(a1),d0
0001CDE0 1029 000B                  		move.b	$B(a1),d0
0001CDE4 E098                       		ror.l	#8,d0
0001CDE6 2C80                       		move.l	d0,(a6)
0001CDE8 43E9 0010                  		lea	$10(a1),a1
0001CDEC 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CDF0 4E75                       		rts	
0001CDF2                            ; ===========================================================================
0001CDF2                            
0001CDF2                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CDF2 2CA9 000C                  		move.l	$C(a1),(a6)
0001CDF6 43E9 0010                  		lea	$10(a1),a1
0001CDFA 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CDFE 4E75                       		rts	
0001CE00                            ; ===========================================================================
0001CE00                            
0001CE00                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CE00 2029 000C                  		move.l	$C(a1),d0
0001CE04 E198                       		rol.l	#8,d0
0001CE06 1011                       		move.b	0(a1),d0
0001CE08 2C80                       		move.l	d0,(a6)
0001CE0A 43E9 0010                  		lea	$10(a1),a1
0001CE0E 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CE12 4E75                       		rts	
0001CE14                            ; ===========================================================================
0001CE14                            
0001CE14                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CE14 3CA9 000E                  		move.w	$E(a1),(a6)
0001CE18 3C91                       		move.w	0(a1),(a6)
0001CE1A 43E9 0010                  		lea	$10(a1),a1
0001CE1E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CE22 4E75                       		rts	
0001CE24                            ; ===========================================================================
0001CE24                            
0001CE24                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CE24 2011                       		move.l	0(a1),d0
0001CE26 1029 000F                  		move.b	$F(a1),d0
0001CE2A E098                       		ror.l	#8,d0
0001CE2C 2C80                       		move.l	d0,(a6)
0001CE2E 43E9 0010                  		lea	$10(a1),a1
0001CE32 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CE36 4E75                       		rts	
0001CE38                            
0001CE38                            ; ---------------------------------------------------------------------------
0001CE38                            ; Animated pattern routine - giant ring
0001CE38                            ; ---------------------------------------------------------------------------
0001CE38                            
0001CE38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE38                            
0001CE38                            
0001CE38                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CE38 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CE3C 6600                       		bne.s	loc_1C518
0001CE3E 4E75                       		rts	
0001CE40                            ; ===========================================================================
0001CE40                            
0001CE40                            loc_1C518:
0001CE40 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CE46 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CE4C 7000                       		moveq	#0,d0
0001CE4E 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CE52 43F1 0000                  		lea	(a1,d0.w),a1
0001CE56 0640 8000                  		addi.w	#$8000,d0
0001CE5A E588                       		lsl.l	#2,d0
0001CE5C E448                       		lsr.w	#2,d0
0001CE5E 0040 4000                  		ori.w	#$4000,d0
0001CE62 4840                       		swap	d0
0001CE64 2D40 0004                  		move.l	d0,4(a6)
0001CE68 323C 000D                  		move.w	#$D,d1
0001CE6C 6000 FE78                  		bra.w	LoadTiles
0001CE70                            ; End of function AniArt_GiantRing
0001CE70                            
0001CE70                            ; ===========================================================================
0001CE70                            ; ---------------------------------------------------------------------------
0001CE70                            ; Object 21 - SCORE, TIME, RINGS
0001CE70                            ; ---------------------------------------------------------------------------
0001CE70                            
0001CE70                            Obj21:					; XREF: Obj_Index
0001CE70 7000                       		moveq	#0,d0
0001CE72 1028 0024                  		move.b	$24(a0),d0
0001CE76 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CE7A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CE7E                            ; ===========================================================================
0001CE7E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CE80 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CE82                            ; ===========================================================================
0001CE82                            
0001CE82                            Obj21_Main:				; XREF: Obj21_Main
0001CE82 5428 0024                  		addq.b	#2,$24(a0)
0001CE86 317C 0090 0008             		move.w	#$90,8(a0)
0001CE8C 317C 0108 000A             		move.w	#$108,$A(a0)
0001CE92 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CE9A 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CEA0 117C 0000 0001             		move.b	#0,1(a0)
0001CEA6 117C 0000 0018             		move.b	#0,$18(a0)
0001CEAC                            
0001CEAC                            Obj21_Flash:				; XREF: Obj21_Main
0001CEAC 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CEB0 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CEB2 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CEB6 4EF9 0000 DE68             		jmp	DisplaySprite
0001CEBC                            ; ===========================================================================
0001CEBC                            
0001CEBC                            Obj21_Flash2:
0001CEBC 7000                       		moveq	#0,d0
0001CEBE 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CEC4 6600                       		bne.s	Obj21_Display
0001CEC6 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CEC8 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CECE 6600                       		bne.s	Obj21_Display	; if not, branch
0001CED0 5440                       		addq.w	#2,d0		; make time counter flash red
0001CED2                            
0001CED2                            Obj21_Display:
0001CED2 1140 001A                  		move.b	d0,$1A(a0)
0001CED6 4EF9 0000 DE68             		jmp	DisplaySprite
0001CEDC                            ; ===========================================================================
0001CEDC                            ; ---------------------------------------------------------------------------
0001CEDC                            ; Sprite mappings - SCORE, TIME, RINGS
0001CEDC                            ; ---------------------------------------------------------------------------
0001CEDC                            Map_obj21:
0001CEDC                            	include "_maps\obj21.asm"
0001CEDC                            ; ---------------------------------------------------------------------------
0001CEDC                            ; Sprite mappings - SCORE, TIME, RINGS
0001CEDC                            ; ---------------------------------------------------------------------------
0001CEDC 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CEE0 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CEE4 0A                         byte_1C5BC:	dc.b $A
0001CEE5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEEA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEEF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEF4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CEF9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEFE A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF03 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF08 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF0D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF12 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF17 00                         		dc.b 0
0001CF18 0A                         byte_1C5F0:	dc.b $A
0001CF19 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF1E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF23 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF28 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF2D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF32 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF37 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF3C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF41 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF46 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF4B 00                         		dc.b 0
0001CF4C 0A                         byte_1C624:	dc.b $A
0001CF4D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF52 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF57 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF5C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF61 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF66 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF6B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF70 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF75 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF7A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF7F 00                         		dc.b 0
0001CF80 0A                         byte_1C658:	dc.b $A
0001CF81 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF86 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF8B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF90 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF95 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF9A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF9F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CFA4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CFA9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CFAE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CFB4 00                         		even
0001CFB4 00                         		even
0001CFB4                            
0001CFB4                            ; ---------------------------------------------------------------------------
0001CFB4                            ; Add points subroutine
0001CFB4                            ; ---------------------------------------------------------------------------
0001CFB4                            
0001CFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFB4                            
0001CFB4                            
0001CFB4                            AddPoints:
0001CFB4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CFBA 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CFBE 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CFC2 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CFC4 223C 000F 423F             		move.l	#999999,d1
0001CFCA B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CFCC 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CFD0 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CFD2 2481                       		move.l	d1,(a2)
0001CFD4                            
0001CFD4                            loc_1C6AC:
0001CFD4 2013                       		move.l	(a3),d0
0001CFD6 B092                       		cmp.l	(a2),d0
0001CFD8 6500 0000                  		bcs.w	locret_1C6B6
0001CFDC 2480                       		move.l	d0,(a2)
0001CFDE                            
0001CFDE                            locret_1C6B6:
0001CFDE 4E75                       		rts	
0001CFE0                            ; End of function AddPoints
0001CFE0                            
0001CFE0                            ; ---------------------------------------------------------------------------
0001CFE0                            ; Subroutine to	update the HUD
0001CFE0                            ; ---------------------------------------------------------------------------
0001CFE0                            
0001CFE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE0                            
0001CFE0                            
0001CFE0                            HudUpdate:
0001CFE0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CFE4 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CFE8 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CFEC 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CFEE 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CFF2 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CFF8 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CFFC 6100 0000                  		bsr.w	Hud_Score
0001D000                            
0001D000                            Hud_ChkRings:
0001D000 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D004 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D006 6A00                       		bpl.s	loc_1C6E4
0001D008 6100 0000                  		bsr.w	Hud_LoadZero
0001D00C                            
0001D00C                            loc_1C6E4:
0001D00C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D010 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D016 7200                       		moveq	#0,d1
0001D018 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D01C 6100 0000                  		bsr.w	Hud_Rings
0001D020                            
0001D020                            Hud_ChkTime:
0001D020 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D024 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D026 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D02A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D02C 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D030 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D036 6700                       		beq.s	TimeOver	; if yes, branch
0001D038 5221                       		addq.b	#1,-(a1)
0001D03A 0C11 003C                  		cmpi.b	#60,(a1)
0001D03E 6500                       		bcs.s	Hud_ChkLives
0001D040 12BC 0000                  		move.b	#0,(a1)
0001D044 5221                       		addq.b	#1,-(a1)
0001D046 0C11 003C                  		cmpi.b	#60,(a1)
0001D04A 6500                       		bcs.s	loc_1C734
0001D04C 12BC 0000                  		move.b	#0,(a1)
0001D050 5221                       		addq.b	#1,-(a1)
0001D052 0C11 0009                  		cmpi.b	#9,(a1)
0001D056 6500                       		bcs.s	loc_1C734
0001D058 12BC 0009                  		move.b	#9,(a1)
0001D05C                            
0001D05C                            loc_1C734:
0001D05C 203C 5E40 0003             		move.l	#$5E400003,d0
0001D062 7200                       		moveq	#0,d1
0001D064 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D068 6100 0000                  		bsr.w	Hud_Mins
0001D06C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D072 7200                       		moveq	#0,d1
0001D074 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D078 6100 0000                  		bsr.w	Hud_Secs
0001D07C                            
0001D07C                            Hud_ChkLives:
0001D07C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D080 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D082 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D086 6100 0000                  		bsr.w	Hud_Lives
0001D08A                            
0001D08A                            Hud_ChkBonus:
0001D08A 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D08E 6700                       		beq.s	Hud_End		; if not, branch
0001D090 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D094 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D09E 7200                       		moveq	#0,d1
0001D0A0 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D0A4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0A8 7200                       		moveq	#0,d1
0001D0AA 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D0AE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0B2                            
0001D0B2                            Hud_End:
0001D0B2 4E75                       		rts	
0001D0B4                            ; ===========================================================================
0001D0B4                            
0001D0B4                            TimeOver:				; XREF: Hud_ChkTime
0001D0B4 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D0B8 41F8 D000                  		lea	($FFFFD000).w,a0
0001D0BC 2448                       		movea.l	a0,a2
0001D0BE 6100 E952                  		bsr.w	KillSonic
0001D0C2 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D0C8 4E75                       		rts	
0001D0CA                            ; ===========================================================================
0001D0CA                            
0001D0CA                            HudDebug:				; XREF: HudUpdate
0001D0CA 6100 0000                  		bsr.w	HudDb_XY
0001D0CE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D0D2 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D0D4 6A00                       		bpl.s	HudDb_Rings
0001D0D6 6100 0000                  		bsr.w	Hud_LoadZero
0001D0DA                            
0001D0DA                            HudDb_Rings:
0001D0DA 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D0DE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D0E4 7200                       		moveq	#0,d1
0001D0E6 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D0EA 6100 0000                  		bsr.w	Hud_Rings
0001D0EE                            
0001D0EE                            HudDb_ObjCount:
0001D0EE 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D0F4 7200                       		moveq	#0,d1
0001D0F6 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D0FA 6100 0000                  		bsr.w	Hud_Secs
0001D0FE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D102 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D104 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D108 6100 0000                  		bsr.w	Hud_Lives
0001D10C                            
0001D10C                            HudDb_ChkBonus:
0001D10C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D110 6700                       		beq.s	HudDb_End	; if not, branch
0001D112 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D116 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D120 7200                       		moveq	#0,d1
0001D122 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D126 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D12A 7200                       		moveq	#0,d1
0001D12C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D130 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D134                            
0001D134                            HudDb_End:
0001D134 4E75                       		rts	
0001D136                            ; End of function HudUpdate
0001D136                            
0001D136                            ; ---------------------------------------------------------------------------
0001D136                            ; Subroutine to	load "0" on the	HUD
0001D136                            ; ---------------------------------------------------------------------------
0001D136                            
0001D136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D136                            
0001D136                            
0001D136                            Hud_LoadZero:				; XREF: HudUpdate
0001D136 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D140 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D144 343C 0002                  		move.w	#2,d2
0001D148 6000                       		bra.s	loc_1C83E
0001D14A                            ; End of function Hud_LoadZero
0001D14A                            
0001D14A                            ; ---------------------------------------------------------------------------
0001D14A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D14A                            ; ---------------------------------------------------------------------------
0001D14A                            
0001D14A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D14A                            
0001D14A                            
0001D14A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D14A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D150 6100 0000                  		bsr.w	Hud_Lives
0001D154 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D15E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D162 343C 000E                  		move.w	#$E,d2
0001D166                            
0001D166                            loc_1C83E:				; XREF: Hud_LoadZero
0001D166 43FA 0000                  		lea	Art_Hud(pc),a1
0001D16A                            
0001D16A                            loc_1C842:
0001D16A 323C 000F                  		move.w	#$F,d1
0001D16E 101A                       		move.b	(a2)+,d0
0001D170 6B00                       		bmi.s	loc_1C85E
0001D172 4880                       		ext.w	d0
0001D174 EB48                       		lsl.w	#5,d0
0001D176 47F1 0000                  		lea	(a1,d0.w),a3
0001D17A                            
0001D17A                            loc_1C852:
0001D17A 2C9B                       		move.l	(a3)+,(a6)
0001D17C 51C9 FFFC                  		dbf	d1,loc_1C852
0001D180                            
0001D180                            loc_1C858:
0001D180 51CA FFE8                  		dbf	d2,loc_1C842
0001D184                            
0001D184 4E75                       		rts	
0001D186                            ; ===========================================================================
0001D186                            
0001D186                            loc_1C85E:
0001D186 2CBC 0000 0000             		move.l	#0,(a6)
0001D18C 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D190                            
0001D190 60EE                       		bra.s	loc_1C858
0001D192                            ; End of function Hud_Base
0001D192                            
0001D192                            ; ===========================================================================
0001D192 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D19E FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D1A2                            ; ---------------------------------------------------------------------------
0001D1A2                            ; Subroutine to	load debug mode	numbers	patterns
0001D1A2                            ; ---------------------------------------------------------------------------
0001D1A2                            
0001D1A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A2                            
0001D1A2                            
0001D1A2                            HudDb_XY:				; XREF: HudDebug
0001D1A2 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D1AC 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D1B0 4841                       		swap	d1
0001D1B2 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D1B6 6100                       		bsr.s	HudDb_XY2
0001D1B8 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D1BC 4841                       		swap	d1
0001D1BE 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D1C2                            ; End of function HudDb_XY
0001D1C2                            
0001D1C2                            
0001D1C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1C2                            
0001D1C2                            
0001D1C2                            HudDb_XY2:
0001D1C2 7C07                       		moveq	#7,d6
0001D1C4 43F9 0000 0606             		lea	(Art_Text).l,a1
0001D1CA                            
0001D1CA                            HudDb_XYLoop:
0001D1CA E959                       		rol.w	#4,d1
0001D1CC 3401                       		move.w	d1,d2
0001D1CE 0242 000F                  		andi.w	#$F,d2
0001D1D2 0C42 000A                  		cmpi.w	#$A,d2
0001D1D6 6500                       		bcs.s	loc_1C8B2
0001D1D8 5E42                       		addq.w	#7,d2
0001D1DA                            
0001D1DA                            loc_1C8B2:
0001D1DA EB4A                       		lsl.w	#5,d2
0001D1DC 47F1 2000                  		lea	(a1,d2.w),a3
0001D1E0 2C9B                       		move.l	(a3)+,(a6)
0001D1E2 2C9B                       		move.l	(a3)+,(a6)
0001D1E4 2C9B                       		move.l	(a3)+,(a6)
0001D1E6 2C9B                       		move.l	(a3)+,(a6)
0001D1E8 2C9B                       		move.l	(a3)+,(a6)
0001D1EA 2C9B                       		move.l	(a3)+,(a6)
0001D1EC 2C9B                       		move.l	(a3)+,(a6)
0001D1EE 2C9B                       		move.l	(a3)+,(a6)
0001D1F0 4841                       		swap	d1
0001D1F2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D1F6                            
0001D1F6 4E75                       		rts	
0001D1F8                            ; End of function HudDb_XY2
0001D1F8                            
0001D1F8                            ; ---------------------------------------------------------------------------
0001D1F8                            ; Subroutine to	load rings numbers patterns
0001D1F8                            ; ---------------------------------------------------------------------------
0001D1F8                            
0001D1F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1F8                            
0001D1F8                            
0001D1F8                            Hud_Rings:				; XREF: HudUpdate
0001D1F8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D1FE 7C02                       		moveq	#2,d6
0001D200 6000                       		bra.s	Hud_LoadArt
0001D202                            ; End of function Hud_Rings
0001D202                            
0001D202                            ; ---------------------------------------------------------------------------
0001D202                            ; Subroutine to	load score numbers patterns
0001D202                            ; ---------------------------------------------------------------------------
0001D202                            
0001D202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D202                            
0001D202                            
0001D202                            Hud_Score:				; XREF: HudUpdate
0001D202 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D208 7C05                       		moveq	#5,d6
0001D20A                            
0001D20A                            Hud_LoadArt:
0001D20A 7800                       		moveq	#0,d4
0001D20C 43FA 0000                  		lea	Art_Hud(pc),a1
0001D210                            
0001D210                            Hud_ScoreLoop:
0001D210 7400                       		moveq	#0,d2
0001D212 261A                       		move.l	(a2)+,d3
0001D214                            
0001D214                            loc_1C8EC:
0001D214 9283                       		sub.l	d3,d1
0001D216 6500                       		bcs.s	loc_1C8F4
0001D218 5242                       		addq.w	#1,d2
0001D21A 60F8                       		bra.s	loc_1C8EC
0001D21C                            ; ===========================================================================
0001D21C                            
0001D21C                            loc_1C8F4:
0001D21C D283                       		add.l	d3,d1
0001D21E 4A42                       		tst.w	d2
0001D220 6700                       		beq.s	loc_1C8FE
0001D222 383C 0001                  		move.w	#1,d4
0001D226                            
0001D226                            loc_1C8FE:
0001D226 4A44                       		tst.w	d4
0001D228 6700                       		beq.s	loc_1C92C
0001D22A ED4A                       		lsl.w	#6,d2
0001D22C 2D40 0004                  		move.l	d0,4(a6)
0001D230 47F1 2000                  		lea	(a1,d2.w),a3
0001D234 2C9B                       		move.l	(a3)+,(a6)
0001D236 2C9B                       		move.l	(a3)+,(a6)
0001D238 2C9B                       		move.l	(a3)+,(a6)
0001D23A 2C9B                       		move.l	(a3)+,(a6)
0001D23C 2C9B                       		move.l	(a3)+,(a6)
0001D23E 2C9B                       		move.l	(a3)+,(a6)
0001D240 2C9B                       		move.l	(a3)+,(a6)
0001D242 2C9B                       		move.l	(a3)+,(a6)
0001D244 2C9B                       		move.l	(a3)+,(a6)
0001D246 2C9B                       		move.l	(a3)+,(a6)
0001D248 2C9B                       		move.l	(a3)+,(a6)
0001D24A 2C9B                       		move.l	(a3)+,(a6)
0001D24C 2C9B                       		move.l	(a3)+,(a6)
0001D24E 2C9B                       		move.l	(a3)+,(a6)
0001D250 2C9B                       		move.l	(a3)+,(a6)
0001D252 2C9B                       		move.l	(a3)+,(a6)
0001D254                            
0001D254                            loc_1C92C:
0001D254 0680 0040 0000             		addi.l	#$400000,d0
0001D25A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D25E                            
0001D25E 4E75                       		rts	
0001D260                            ; End of function Hud_Score
0001D260                            
0001D260                            ; ---------------------------------------------------------------------------
0001D260                            ; Subroutine to	load countdown numbers on the continue screen
0001D260                            ; ---------------------------------------------------------------------------
0001D260                            
0001D260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D260                            
0001D260                            
0001D260                            ContScrCounter:				; XREF: ContinueScreen
0001D260 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D26A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D270 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D276 7C01                       		moveq	#1,d6
0001D278 7800                       		moveq	#0,d4
0001D27A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D27E                            
0001D27E                            ContScr_Loop:
0001D27E 7400                       		moveq	#0,d2
0001D280 261A                       		move.l	(a2)+,d3
0001D282                            
0001D282                            loc_1C95A:
0001D282 9283                       		sub.l	d3,d1
0001D284 6500                       		bcs.s	loc_1C962
0001D286 5242                       		addq.w	#1,d2
0001D288 60F8                       		bra.s	loc_1C95A
0001D28A                            ; ===========================================================================
0001D28A                            
0001D28A                            loc_1C962:
0001D28A D283                       		add.l	d3,d1
0001D28C ED4A                       		lsl.w	#6,d2
0001D28E 47F1 2000                  		lea	(a1,d2.w),a3
0001D292 2C9B                       		move.l	(a3)+,(a6)
0001D294 2C9B                       		move.l	(a3)+,(a6)
0001D296 2C9B                       		move.l	(a3)+,(a6)
0001D298 2C9B                       		move.l	(a3)+,(a6)
0001D29A 2C9B                       		move.l	(a3)+,(a6)
0001D29C 2C9B                       		move.l	(a3)+,(a6)
0001D29E 2C9B                       		move.l	(a3)+,(a6)
0001D2A0 2C9B                       		move.l	(a3)+,(a6)
0001D2A2 2C9B                       		move.l	(a3)+,(a6)
0001D2A4 2C9B                       		move.l	(a3)+,(a6)
0001D2A6 2C9B                       		move.l	(a3)+,(a6)
0001D2A8 2C9B                       		move.l	(a3)+,(a6)
0001D2AA 2C9B                       		move.l	(a3)+,(a6)
0001D2AC 2C9B                       		move.l	(a3)+,(a6)
0001D2AE 2C9B                       		move.l	(a3)+,(a6)
0001D2B0 2C9B                       		move.l	(a3)+,(a6)
0001D2B2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D2B6                            
0001D2B6 4E75                       		rts	
0001D2B8                            ; End of function ContScrCounter
0001D2B8                            
0001D2B8                            ; ===========================================================================
0001D2B8                            ; ---------------------------------------------------------------------------
0001D2B8                            ; HUD counter sizes
0001D2B8                            ; ---------------------------------------------------------------------------
0001D2B8 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D2BC 0000 2710                  Hud_10000:	dc.l 10000
0001D2C0 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D2C4 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D2C8 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D2CC 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D2D0                            
0001D2D0                            ; ---------------------------------------------------------------------------
0001D2D0                            ; Subroutine to	load time numbers patterns
0001D2D0                            ; ---------------------------------------------------------------------------
0001D2D0                            
0001D2D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2D0                            
0001D2D0                            
0001D2D0                            Hud_Mins:				; XREF: Hud_ChkTime
0001D2D0 45F9 0001 D2CC             		lea	(Hud_1).l,a2
0001D2D6 7C00                       		moveq	#0,d6
0001D2D8 6000                       		bra.s	loc_1C9BA
0001D2DA                            ; End of function Hud_Mins
0001D2DA                            
0001D2DA                            
0001D2DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2DA                            
0001D2DA                            
0001D2DA                            Hud_Secs:				; XREF: Hud_ChkTime
0001D2DA 45F9 0001 D2C8             		lea	(Hud_10).l,a2
0001D2E0 7C01                       		moveq	#1,d6
0001D2E2                            
0001D2E2                            loc_1C9BA:
0001D2E2 7800                       		moveq	#0,d4
0001D2E4 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2E8                            
0001D2E8                            Hud_TimeLoop:
0001D2E8 7400                       		moveq	#0,d2
0001D2EA 261A                       		move.l	(a2)+,d3
0001D2EC                            
0001D2EC                            loc_1C9C4:
0001D2EC 9283                       		sub.l	d3,d1
0001D2EE 6500                       		bcs.s	loc_1C9CC
0001D2F0 5242                       		addq.w	#1,d2
0001D2F2 60F8                       		bra.s	loc_1C9C4
0001D2F4                            ; ===========================================================================
0001D2F4                            
0001D2F4                            loc_1C9CC:
0001D2F4 D283                       		add.l	d3,d1
0001D2F6 4A42                       		tst.w	d2
0001D2F8 6700                       		beq.s	loc_1C9D6
0001D2FA 383C 0001                  		move.w	#1,d4
0001D2FE                            
0001D2FE                            loc_1C9D6:
0001D2FE ED4A                       		lsl.w	#6,d2
0001D300 2D40 0004                  		move.l	d0,4(a6)
0001D304 47F1 2000                  		lea	(a1,d2.w),a3
0001D308 2C9B                       		move.l	(a3)+,(a6)
0001D30A 2C9B                       		move.l	(a3)+,(a6)
0001D30C 2C9B                       		move.l	(a3)+,(a6)
0001D30E 2C9B                       		move.l	(a3)+,(a6)
0001D310 2C9B                       		move.l	(a3)+,(a6)
0001D312 2C9B                       		move.l	(a3)+,(a6)
0001D314 2C9B                       		move.l	(a3)+,(a6)
0001D316 2C9B                       		move.l	(a3)+,(a6)
0001D318 2C9B                       		move.l	(a3)+,(a6)
0001D31A 2C9B                       		move.l	(a3)+,(a6)
0001D31C 2C9B                       		move.l	(a3)+,(a6)
0001D31E 2C9B                       		move.l	(a3)+,(a6)
0001D320 2C9B                       		move.l	(a3)+,(a6)
0001D322 2C9B                       		move.l	(a3)+,(a6)
0001D324 2C9B                       		move.l	(a3)+,(a6)
0001D326 2C9B                       		move.l	(a3)+,(a6)
0001D328 0680 0040 0000             		addi.l	#$400000,d0
0001D32E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D332                            
0001D332 4E75                       		rts	
0001D334                            ; End of function Hud_Secs
0001D334                            
0001D334                            ; ---------------------------------------------------------------------------
0001D334                            ; Subroutine to	load time/ring bonus numbers patterns
0001D334                            ; ---------------------------------------------------------------------------
0001D334                            
0001D334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D334                            
0001D334                            
0001D334                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D334 45F9 0001 D2C0             		lea	(Hud_1000).l,a2
0001D33A 7C03                       		moveq	#3,d6
0001D33C 7800                       		moveq	#0,d4
0001D33E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D342                            
0001D342                            Hud_BonusLoop:
0001D342 7400                       		moveq	#0,d2
0001D344 261A                       		move.l	(a2)+,d3
0001D346                            
0001D346                            loc_1CA1E:
0001D346 9283                       		sub.l	d3,d1
0001D348 6500                       		bcs.s	loc_1CA26
0001D34A 5242                       		addq.w	#1,d2
0001D34C 60F8                       		bra.s	loc_1CA1E
0001D34E                            ; ===========================================================================
0001D34E                            
0001D34E                            loc_1CA26:
0001D34E D283                       		add.l	d3,d1
0001D350 4A42                       		tst.w	d2
0001D352 6700                       		beq.s	loc_1CA30
0001D354 383C 0001                  		move.w	#1,d4
0001D358                            
0001D358                            loc_1CA30:
0001D358 4A44                       		tst.w	d4
0001D35A 6700                       		beq.s	Hud_ClrBonus
0001D35C ED4A                       		lsl.w	#6,d2
0001D35E 47F1 2000                  		lea	(a1,d2.w),a3
0001D362 2C9B                       		move.l	(a3)+,(a6)
0001D364 2C9B                       		move.l	(a3)+,(a6)
0001D366 2C9B                       		move.l	(a3)+,(a6)
0001D368 2C9B                       		move.l	(a3)+,(a6)
0001D36A 2C9B                       		move.l	(a3)+,(a6)
0001D36C 2C9B                       		move.l	(a3)+,(a6)
0001D36E 2C9B                       		move.l	(a3)+,(a6)
0001D370 2C9B                       		move.l	(a3)+,(a6)
0001D372 2C9B                       		move.l	(a3)+,(a6)
0001D374 2C9B                       		move.l	(a3)+,(a6)
0001D376 2C9B                       		move.l	(a3)+,(a6)
0001D378 2C9B                       		move.l	(a3)+,(a6)
0001D37A 2C9B                       		move.l	(a3)+,(a6)
0001D37C 2C9B                       		move.l	(a3)+,(a6)
0001D37E 2C9B                       		move.l	(a3)+,(a6)
0001D380 2C9B                       		move.l	(a3)+,(a6)
0001D382                            
0001D382                            loc_1CA5A:
0001D382 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D386                            
0001D386 4E75                       		rts	
0001D388                            ; ===========================================================================
0001D388                            
0001D388                            Hud_ClrBonus:
0001D388 7A0F                       		moveq	#$F,d5
0001D38A                            
0001D38A                            Hud_ClrBonusLoop:
0001D38A 2CBC 0000 0000             		move.l	#0,(a6)
0001D390 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D394                            
0001D394 60EC                       		bra.s	loc_1CA5A
0001D396                            ; End of function Hud_TimeRingBonus
0001D396                            
0001D396                            ; ---------------------------------------------------------------------------
0001D396                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D396                            ; ---------------------------------------------------------------------------
0001D396                            
0001D396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D396                            
0001D396                            
0001D396                            Hud_Lives:				; XREF: Hud_ChkLives
0001D396 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D39C 7200                       		moveq	#0,d1
0001D39E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D3A2 45F9 0001 D2C8             		lea	(Hud_10).l,a2
0001D3A8 7C01                       		moveq	#1,d6
0001D3AA 7800                       		moveq	#0,d4
0001D3AC 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D3B0                            
0001D3B0                            Hud_LivesLoop:
0001D3B0 2D40 0004                  		move.l	d0,4(a6)
0001D3B4 7400                       		moveq	#0,d2
0001D3B6 261A                       		move.l	(a2)+,d3
0001D3B8                            
0001D3B8                            loc_1CA90:
0001D3B8 9283                       		sub.l	d3,d1
0001D3BA 6500                       		bcs.s	loc_1CA98
0001D3BC 5242                       		addq.w	#1,d2
0001D3BE 60F8                       		bra.s	loc_1CA90
0001D3C0                            ; ===========================================================================
0001D3C0                            
0001D3C0                            loc_1CA98:
0001D3C0 D283                       		add.l	d3,d1
0001D3C2 4A42                       		tst.w	d2
0001D3C4 6700                       		beq.s	loc_1CAA2
0001D3C6 383C 0001                  		move.w	#1,d4
0001D3CA                            
0001D3CA                            loc_1CAA2:
0001D3CA 4A44                       		tst.w	d4
0001D3CC 6700                       		beq.s	Hud_ClrLives
0001D3CE                            
0001D3CE                            loc_1CAA6:
0001D3CE EB4A                       		lsl.w	#5,d2
0001D3D0 47F1 2000                  		lea	(a1,d2.w),a3
0001D3D4 2C9B                       		move.l	(a3)+,(a6)
0001D3D6 2C9B                       		move.l	(a3)+,(a6)
0001D3D8 2C9B                       		move.l	(a3)+,(a6)
0001D3DA 2C9B                       		move.l	(a3)+,(a6)
0001D3DC 2C9B                       		move.l	(a3)+,(a6)
0001D3DE 2C9B                       		move.l	(a3)+,(a6)
0001D3E0 2C9B                       		move.l	(a3)+,(a6)
0001D3E2 2C9B                       		move.l	(a3)+,(a6)
0001D3E4                            
0001D3E4                            loc_1CABC:
0001D3E4 0680 0040 0000             		addi.l	#$400000,d0
0001D3EA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D3EE                            
0001D3EE 4E75                       		rts	
0001D3F0                            ; ===========================================================================
0001D3F0                            
0001D3F0                            Hud_ClrLives:
0001D3F0 4A46                       		tst.w	d6
0001D3F2 67DA                       		beq.s	loc_1CAA6
0001D3F4 7A07                       		moveq	#7,d5
0001D3F6                            
0001D3F6                            Hud_ClrLivesLoop:
0001D3F6 2CBC 0000 0000             		move.l	#0,(a6)
0001D3FC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D400 60E2                       		bra.s	loc_1CABC
0001D402                            ; End of function Hud_Lives
0001D402                            
0001D402                            ; ===========================================================================
0001D402                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D702                            		even
0001D702                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D842                            		even
0001D842                            ; ===========================================================================
0001D842                            ; ---------------------------------------------------------------------------
0001D842                            ; When debug mode is currently in use
0001D842                            ; ---------------------------------------------------------------------------
0001D842                            
0001D842                            DebugMode:				; XREF: Obj01; Obj09
0001D842 7000                       		moveq	#0,d0
0001D844 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D848 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D84C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D850                            ; ===========================================================================
0001D850 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D852 0000                       		dc.w Debug_Skip-Debug_Index
0001D854                            ; ===========================================================================
0001D854                            
0001D854                            Debug_Main:				; XREF: Debug_Index
0001D854 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D858 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D85E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D864 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D86A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D870 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D876 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D87C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D882 117C 0000 001A             		move.b	#0,$1A(a0)
0001D888 117C 0000 001C             		move.b	#0,$1C(a0)
0001D88E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D894 6600                       		bne.s	Debug_Zone	; if not, branch
0001D896 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D89C 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D8A2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D8A4 6000                       		bra.s	Debug_UseList
0001D8A6                            ; ===========================================================================
0001D8A6                            
0001D8A6                            Debug_Zone:
0001D8A6 7000                       		moveq	#0,d0
0001D8A8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D8AC                            
0001D8AC                            Debug_UseList:
0001D8AC 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8B2 D040                       		add.w	d0,d0
0001D8B4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8B8 3C1A                       		move.w	(a2)+,d6
0001D8BA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D8BE 6200                       		bhi.s	loc_1CF9E
0001D8C0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D8C6                            
0001D8C6                            loc_1CF9E:
0001D8C6 6100 0000                  		bsr.w	Debug_ShowItem
0001D8CA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8D0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D8D6                            
0001D8D6                            Debug_Skip:				; XREF: Debug_Index
0001D8D6 7006                       		moveq	#6,d0
0001D8D8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D8DE 6700                       		beq.s	loc_1CFBE
0001D8E0 7000                       		moveq	#0,d0
0001D8E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D8E6                            
0001D8E6                            loc_1CFBE:
0001D8E6 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8EC D040                       		add.w	d0,d0
0001D8EE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8F2 3C1A                       		move.w	(a2)+,d6
0001D8F4 6100 0000                  		bsr.w	Debug_Control
0001D8F8 4EF9 0000 DE68             		jmp	DisplaySprite
0001D8FE                            
0001D8FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8FE                            
0001D8FE                            
0001D8FE                            Debug_Control:
0001D8FE 7800                       		moveq	#0,d4
0001D900 323C 0001                  		move.w	#1,d1
0001D904 1838 F605                  		move.b	($FFFFF605).w,d4
0001D908 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D90C 6600                       		bne.s	loc_1D018	; if yes, branch
0001D90E 1038 F604                  		move.b	($FFFFF604).w,d0
0001D912 0240 000F                  		andi.w	#$F,d0
0001D916 6600                       		bne.s	loc_1D000
0001D918 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D91E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D924 6000 0000                  		bra.w	Debug_BackItem
0001D928                            ; ===========================================================================
0001D928                            
0001D928                            loc_1D000:
0001D928 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D92C 6600                       		bne.s	loc_1D01C
0001D92E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D934 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D938 6600                       		bne.s	loc_1D018
0001D93A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D940                            
0001D940                            loc_1D018:
0001D940 1838 F604                  		move.b	($FFFFF604).w,d4
0001D944                            
0001D944                            loc_1D01C:
0001D944 7200                       		moveq	#0,d1
0001D946 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D94A 5241                       		addq.w	#1,d1
0001D94C 4841                       		swap	d1
0001D94E E881                       		asr.l	#4,d1
0001D950 2428 000C                  		move.l	$C(a0),d2
0001D954 2628 0008                  		move.l	8(a0),d3
0001D958 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D95C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D95E 9481                       		sub.l	d1,d2
0001D960 6400                       		bcc.s	loc_1D03C
0001D962 7400                       		moveq	#0,d2
0001D964                            
0001D964                            loc_1D03C:
0001D964 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D968 6700                       		beq.s	loc_1D052	; if not, branch
0001D96A D481                       		add.l	d1,d2
0001D96C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D972 6500                       		bcs.s	loc_1D052
0001D974 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D97A                            
0001D97A                            loc_1D052:
0001D97A 0804 0002                  		btst	#2,d4
0001D97E 6700                       		beq.s	loc_1D05E
0001D980 9681                       		sub.l	d1,d3
0001D982 6400                       		bcc.s	loc_1D05E
0001D984 7600                       		moveq	#0,d3
0001D986                            
0001D986                            loc_1D05E:
0001D986 0804 0003                  		btst	#3,d4
0001D98A 6700                       		beq.s	loc_1D066
0001D98C D681                       		add.l	d1,d3
0001D98E                            
0001D98E                            loc_1D066:
0001D98E 2142 000C                  		move.l	d2,$C(a0)
0001D992 2143 0008                  		move.l	d3,8(a0)
0001D996                            
0001D996                            Debug_BackItem:
0001D996 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D99C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D99E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D9A4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D9A6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D9AA 6400                       		bcc.s	Debug_NoLoop
0001D9AC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D9B0 6000                       		bra.s	Debug_NoLoop
0001D9B2                            ; ===========================================================================
0001D9B2                            
0001D9B2                            Debug_NextItem:
0001D9B2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D9B8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D9BA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D9BE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D9C2 6200                       		bhi.s	Debug_NoLoop
0001D9C4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D9CA                            
0001D9CA                            Debug_NoLoop:
0001D9CA 6000 0000                  		bra.w	Debug_ShowItem
0001D9CE                            ; ===========================================================================
0001D9CE                            
0001D9CE                            Debug_MakeItem:
0001D9CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D9D4 6700                       		beq.s	Debug_Exit	; if not, branch
0001D9D6 4EB9 0000 E2EE             		jsr	SingleObjLoad
0001D9DC 6600                       		bne.s	Debug_Exit
0001D9DE 3368 0008 0008             		move.w	8(a0),8(a1)
0001D9E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D9EA 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D9EE 1368 0001 0001             		move.b	1(a0),1(a1)
0001D9F4 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D9FA 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DA00 7000                       		moveq	#0,d0
0001DA02 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA06 E748                       		lsl.w	#3,d0
0001DA08 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DA0E 4E75                       		rts	
0001DA10                            ; ===========================================================================
0001DA10                            
0001DA10                            Debug_Exit:
0001DA10 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA16 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DA18 7000                       		moveq	#0,d0
0001DA1A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DA1E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA26 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA2C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DA30 3140 000A                  		move.w	d0,$A(a0)
0001DA34 3140 000E                  		move.w	d0,$E(a0)
0001DA38 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DA3E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DA44 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DA4A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DA4C 4278 F780                  		clr.w	($FFFFF780).w
0001DA50 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DA56 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA5E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA64 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DA6A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DA70 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DA76                            
0001DA76                            Debug_DoNothing:
0001DA76 4E75                       		rts	
0001DA78                            ; End of function Debug_Control
0001DA78                            
0001DA78                            
0001DA78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA78                            
0001DA78                            
0001DA78                            Debug_ShowItem:				; XREF: Debug_Main
0001DA78 7000                       		moveq	#0,d0
0001DA7A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA7E E748                       		lsl.w	#3,d0
0001DA80 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DA86 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DA8C 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DA92 4E75                       		rts	
0001DA94                            ; End of function Debug_ShowItem
0001DA94                            
0001DA94                            ; ===========================================================================
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Debug	list pointers
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            DebugList:
0001DA94                            	include "_inc\Debug list pointers.asm"
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Debug	list pointers
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94 0000                       	dc.w Debug_GHZ-DebugList
0001DA96 0000                       	dc.w Debug_LZ-DebugList
0001DA98 0000                       	dc.w Debug_MZ-DebugList
0001DA9A 0000                       	dc.w Debug_SLZ-DebugList
0001DA9C 0000                       	dc.w Debug_SYZ-DebugList
0001DA9E 0000                       	dc.w Debug_SBZ-DebugList
0001DAA0 0000                       	dc.w Debug_Ending-DebugList
0001DAA0 0000                       	dc.w Debug_Ending-DebugList
0001DAA2                            
0001DAA2                            ; ---------------------------------------------------------------------------
0001DAA2                            ; Debug	list - Green Hill
0001DAA2                            ; ---------------------------------------------------------------------------
0001DAA2                            Debug_GHZ:
0001DAA2                            	include "_inc\Debug list - GHZ.asm"
0001DAA2                            ; ---------------------------------------------------------------------------
0001DAA2                            ; Debug	list - Green Hill
0001DAA2                            ; ---------------------------------------------------------------------------
0001DAA2 0010                       	dc.w $10			; number of items in list
0001DAA4 2500 A68C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DAA8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DAAC 2600 AC92                  	dc.l Map_obj26+$26000000
0001DAB0 0000 0680                  	dc.b 0,	0, 6, $80
0001DAB4 1F00 9E84                  	dc.l Map_obj1F+$1F000000
0001DAB8 0000 0400                  	dc.b 0,	0, 4, 0
0001DABC 2200 A140                  	dc.l Map_obj22+$22000000
0001DAC0 0000 0444                  	dc.b 0,	0, 4, $44
0001DAC4 2B00 B306                  	dc.l Map_obj2B+$2B000000
0001DAC8 0000 047B                  	dc.b 0,	0, 4, $7B
0001DACC 3600 D80A                  	dc.l Map_obj36+$36000000
0001DAD0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DAD4 1800 8796                  	dc.l Map_obj18+$18000000
0001DAD8 0000 4000                  	dc.b 0,	0, $40,	0
0001DADC 3B00 D930                  	dc.l Map_obj3B+$3B000000
0001DAE0 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DAE4 4001 0002                  	dc.l Map_obj40+$40000000
0001DAE8 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DAEC 4100 E57C                  	dc.l Map_obj41+$41000000
0001DAF0 0000 0523                  	dc.b 0,	0, 5, $23
0001DAF4 4200 E7A2                  	dc.l Map_obj42+$42000000
0001DAF8 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DAFC 4400 EAB0                  	dc.l Map_obj44+$44000000
0001DB00 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DB04 1900 8896                  	dc.l Map_obj48+$19000000
0001DB08 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DB0C 7901 7A60                  	dc.l Map_obj79+$79000000
0001DB10 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB14 4B00 A6CC                  	dc.l Map_obj4B+$4B000000
0001DB18 0000 2400                  	dc.b 0,	0, $24,	0
0001DB1C 7D01 7BB0                  	dc.l Map_obj7D+$7D000000
0001DB20 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DB24                            	even
0001DB24                            	even
0001DB24                            
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            ; Debug	list - Labyrinth
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            Debug_LZ:
0001DB24                            	include "_inc\Debug list - LZ.asm"
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24                            ; Debug	list - Labyrinth
0001DB24                            ; ---------------------------------------------------------------------------
0001DB24 0019                       	dc.w $19
0001DB26 2500 A68C                  	dc.l Map_obj25+$25000000
0001DB2A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB2E 2600 AC92                  	dc.l Map_obj26+$26000000
0001DB32 0000 0680                  	dc.b 0,	0, 6, $80
0001DB36 4100 E57C                  	dc.l Map_obj41+$41000000
0001DB3A 0000 0523                  	dc.b 0,	0, 5, $23
0001DB3E 2C00 B3B6                  	dc.l Map_obj2C+$2C000000
0001DB42 0800 2486                  	dc.b 8,	0, $24,	$86
0001DB46 2D00 B5AA                  	dc.l Map_obj2D+$2D000000
0001DB4A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DB4E 1601 27D6                  	dc.l Map_obj16+$16000000
0001DB52 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DB56 1601 27D6                  	dc.l Map_obj16+$16000000
0001DB5A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB5E 3300 CA62                  	dc.l Map_obj33+$33000000
0001DB62 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB66 3200 C622                  	dc.l Map_obj32+$32000000
0001DB6A 0000 0513                  	dc.b 0,	0, 5, $13
0001DB6E 3600 D80A                  	dc.l Map_obj36+$36000000
0001DB72 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB76 5201 08F8                  	dc.l Map_obj52a+$52000000
0001DB7A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DB7E 6101 29FE                  	dc.l Map_obj61+$61000000
0001DB82 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DB86 6101 29FE                  	dc.l Map_obj61+$61000000
0001DB8A 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DB8E 6101 29FE                  	dc.l Map_obj61+$61000000
0001DB92 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DB96 6201 2B52                  	dc.l Map_obj62+$62000000
0001DB9A 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DB9E 6101 29FE                  	dc.l Map_obj61+$61000000
0001DBA2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DBA6 6101 29FE                  	dc.l Map_obj61+$61000000
0001DBAA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DBAE 6301 2EB4                  	dc.l Map_obj63+$63000000
0001DBB2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DBB6 6001 2720                  	dc.l Map_obj60+$60000000
0001DBBA 0000 0467                  	dc.b 0,	0, 4, $67
0001DBBE 6401 31FA                  	dc.l Map_obj64+$64000000
0001DBC2 8413 8348                  	dc.b $84, $13, $83, $48
0001DBC6 6501 3382                  	dc.l Map_obj65+$65000000
0001DBCA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DBCE 6501 3382                  	dc.l Map_obj65+$65000000
0001DBD2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DBD6 0B01 1B70                  	dc.l Map_obj0B+$B000000
0001DBDA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DBDE 0C01 1C40                  	dc.l Map_obj0C+$C000000
0001DBE2 0200 4328                  	dc.b 2,	0, $43,	$28
0001DBE6 7901 7A60                  	dc.l Map_obj79+$79000000
0001DBEA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DBEE                            	even
0001DBEE                            	even
0001DBEE                            
0001DBEE                            ; ---------------------------------------------------------------------------
0001DBEE                            ; Debug	list - Marble
0001DBEE                            ; ---------------------------------------------------------------------------
0001DBEE                            Debug_MZ:
0001DBEE                            	include "_inc\Debug list - MZ.asm"
0001DBEE                            ; ---------------------------------------------------------------------------
0001DBEE                            ; Debug	list - Marble
0001DBEE                            ; ---------------------------------------------------------------------------
0001DBEE 0012                       	dc.w $12
0001DBF0 2500 A68C                  	dc.l Map_obj25+$25000000
0001DBF4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DBF8 2600 AC92                  	dc.l Map_obj26+$26000000
0001DBFC 0000 0680                  	dc.b 0,	0, 6, $80
0001DC00 2200 A140                  	dc.l Map_obj22+$22000000
0001DC04 0000 0444                  	dc.b 0,	0, 4, $44
0001DC08 3600 D80A                  	dc.l Map_obj36+$36000000
0001DC0C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC10 4100 E57C                  	dc.l Map_obj41+$41000000
0001DC14 0000 0523                  	dc.b 0,	0, 5, $23
0001DC18 1300 BAEC                  	dc.l Map_obj14+$13000000
0001DC1C 0000 0345                  	dc.b 0,	0, 3, $45
0001DC20 4600 F162                  	dc.l Map_obj46+$46000000
0001DC24 0000 4000                  	dc.b 0,	0, $40,	0
0001DC28 4C00 FAAE                  	dc.l Map_obj4C+$4C000000
0001DC2C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC30 4E00 FD92                  	dc.l Map_obj4E+$4E000000
0001DC34 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC38 3300 CA62                  	dc.l Map_obj33+$33000000
0001DC3C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC40 5001 0190                  	dc.l Map_obj50+$50000000
0001DC44 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC48 5101 062C                  	dc.l Map_obj51+$51000000
0001DC4C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC50 5201 08A2                  	dc.l Map_obj52+$52000000
0001DC54 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DC58 5300 8E2E                  	dc.l Map_obj53+$53000000
0001DC5C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DC60 5400 FA74                  	dc.l Map_obj54+$54000000
0001DC64 0000 8680                  	dc.b 0,	0, $86,	$80
0001DC68 5501 0A96                  	dc.l Map_obj55+$55000000
0001DC6C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC70 7801 76DA                  	dc.l Map_obj78+$78000000
0001DC74 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC78 7901 7A60                  	dc.l Map_obj79+$79000000
0001DC7C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC80                            	even
0001DC80                            	even
0001DC80                            
0001DC80                            ; ---------------------------------------------------------------------------
0001DC80                            ; Debug	list - Star Light
0001DC80                            ; ---------------------------------------------------------------------------
0001DC80                            Debug_SLZ:
0001DC80                            	include "_inc\Debug list - SLZ.asm"
0001DC80                            ; ---------------------------------------------------------------------------
0001DC80                            ; Debug	list - Star Light
0001DC80                            ; ---------------------------------------------------------------------------
0001DC80 000F                       	dc.w $F
0001DC82 2500 A68C                  	dc.l Map_obj25+$25000000
0001DC86 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC8A 2600 AC92                  	dc.l Map_obj26+$26000000
0001DC8E 0000 0680                  	dc.b 0,	0, 6, $80
0001DC92 5901 1598                  	dc.l Map_obj59+$59000000
0001DC96 0000 4000                  	dc.b 0,	0, $40,	0
0001DC9A 5300 8E2E                  	dc.l Map_obj53+$53000000
0001DC9E 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DCA2 1800 87F4                  	dc.l Map_obj18b+$18000000
0001DCA6 0000 4000                  	dc.b 0,	0, $40,	0
0001DCAA 5A01 16D2                  	dc.l Map_obj5A+$5A000000
0001DCAE 0000 4000                  	dc.b 0,	0, $40,	0
0001DCB2 5B01 188A                  	dc.l Map_obj5B+$5B000000
0001DCB6 0000 4000                  	dc.b 0,	0, $40,	0
0001DCBA 5D01 1E5A                  	dc.l Map_obj5D+$5D000000
0001DCBE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DCC2 5E01 21EC                  	dc.l Map_obj5E+$5E000000
0001DCC6 0000 0374                  	dc.b 0,	0, 3, $74
0001DCCA 4100 E57C                  	dc.l Map_obj41+$41000000
0001DCCE 0000 0523                  	dc.b 0,	0, 5, $23
0001DCD2 1300 BAEC                  	dc.l Map_obj14+$13000000
0001DCD6 0000 0480                  	dc.b 0,	0, 4, $80
0001DCDA 1C00 8F3E                  	dc.l Map_obj1C+$1C000000
0001DCDE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DCE2 5F01 246A                  	dc.l Map_obj5F+$5F000000
0001DCE6 0000 0400                  	dc.b 0,	0, 4, 0
0001DCEA 6001 2720                  	dc.l Map_obj60+$60000000
0001DCEE 0000 2429                  	dc.b 0,	0, $24,	$29
0001DCF2 7901 7A60                  	dc.l Map_obj79+$79000000
0001DCF6 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCFA                            	even
0001DCFA                            	even
0001DCFA                            
0001DCFA                            ; ---------------------------------------------------------------------------
0001DCFA                            ; Debug	list - Spring Yard
0001DCFA                            ; ---------------------------------------------------------------------------
0001DCFA                            Debug_SYZ:
0001DCFA                            	include "_inc\Debug list - SYZ.asm"
0001DCFA                            ; ---------------------------------------------------------------------------
0001DCFA                            ; Debug	list - Spring Yard
0001DCFA                            ; ---------------------------------------------------------------------------
0001DCFA 000F                       	dc.w $F
0001DCFC 2500 A68C                  	dc.l Map_obj25+$25000000
0001DD00 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD04 2600 AC92                  	dc.l Map_obj26+$26000000
0001DD08 0000 0680                  	dc.b 0,	0, 6, $80
0001DD0C 3600 D80A                  	dc.l Map_obj36+$36000000
0001DD10 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD14 4100 E57C                  	dc.l Map_obj41+$41000000
0001DD18 0000 0523                  	dc.b 0,	0, 5, $23
0001DD1C 4300 EA02                  	dc.l Map_obj43+$43000000
0001DD20 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DD24 1200 F1E0                  	dc.l Map_obj12+$12000000
0001DD28 0000 0000                  	dc.b 0,	0, 0, 0
0001DD2C 4700 F35C                  	dc.l Map_obj47+$47000000
0001DD30 0000 0380                  	dc.b 0,	0, 3, $80
0001DD34 1F00 9E84                  	dc.l Map_obj1F+$1F000000
0001DD38 0000 0400                  	dc.b 0,	0, 4, 0
0001DD3C 2200 A140                  	dc.l Map_obj22+$22000000
0001DD40 0000 0444                  	dc.b 0,	0, 4, $44
0001DD44 5001 0190                  	dc.l Map_obj50+$50000000
0001DD48 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DD4C 1800 87E2                  	dc.l Map_obj18a+$18000000
0001DD50 0000 4000                  	dc.b 0,	0, $40,	0
0001DD54 5601 0F58                  	dc.l Map_obj56+$56000000
0001DD58 0000 4000                  	dc.b 0,	0, $40,	0
0001DD5C 3200 C622                  	dc.l Map_obj32+$32000000
0001DD60 0000 0513                  	dc.b 0,	0, 5, $13
0001DD64 7801 76DA                  	dc.l Map_obj78+$78000000
0001DD68 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DD6C 7901 7A60                  	dc.l Map_obj79+$79000000
0001DD70 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD74                            	even
0001DD74                            	even
0001DD74                            
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            ; Debug	list - Scrap Brain
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            Debug_SBZ:
0001DD74                            	include "_inc\Debug list - SBZ.asm"
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74                            ; Debug	list - Scrap Brain
0001DD74                            ; ---------------------------------------------------------------------------
0001DD74 001D                       	dc.w $1D
0001DD76 2500 A68C                  	dc.l Map_obj25+$25000000
0001DD7A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD7E 2600 AC92                  	dc.l Map_obj26+$26000000
0001DD82 0000 0680                  	dc.b 0,	0, 6, $80
0001DD86 5F01 246A                  	dc.l Map_obj5F+$5F000000
0001DD8A 0000 0400                  	dc.b 0,	0, 4, 0
0001DD8E 6001 2720                  	dc.l Map_obj60+$60000000
0001DD92 0000 0429                  	dc.b 0,	0, 4, $29
0001DD96 7801 76DA                  	dc.l Map_obj78+$78000000
0001DD9A 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DD9E 1501 12F4                  	dc.l Map_obj15b+$15000000
0001DDA2 0702 4391                  	dc.b 7,	2, $43,	$91
0001DDA6 6701 5FEE                  	dc.l Map_obj67+$67000000
0001DDAA E000 C344                  	dc.b $E0, 0, $C3, $44
0001DDAE 5201 08A2                  	dc.l Map_obj52+$52000000
0001DDB2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DDB6 3200 C622                  	dc.l Map_obj32+$32000000
0001DDBA 0000 0513                  	dc.b 0,	0, 5, $13
0001DDBE 6901 6248                  	dc.l Map_obj69+$69000000
0001DDC2 0300 4492                  	dc.b 3,	0, $44,	$92
0001DDC6 6901 62A2                  	dc.l Map_obj69a+$69000000
0001DDCA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DDCE 6A01 6500                  	dc.l Map_obj6A+$6A000000
0001DDD2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DDD6 5300 8E2E                  	dc.l Map_obj53+$53000000
0001DDDA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DDDE 5201 08A2                  	dc.l Map_obj52+$52000000
0001DDE2 3903 4460                  	dc.b $39, 3, $44, $60
0001DDE6 6B01 68D0                  	dc.l Map_obj6B+$6B000000
0001DDEA 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DDEE 2A00 90D4                  	dc.l Map_obj2A+$2A000000
0001DDF2 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DDF6 6B01 68D0                  	dc.l Map_obj6B+$6B000000
0001DDFA 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DDFE 6A01 6500                  	dc.l Map_obj6A+$6A000000
0001DE02 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DE06 6B01 68D0                  	dc.l Map_obj6B+$6B000000
0001DE0A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DE0E 6A01 6500                  	dc.l Map_obj6A+$6A000000
0001DE12 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DE16 6B01 68D0                  	dc.l Map_obj6B+$6B000000
0001DE1A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DE1E 6C01 6A92                  	dc.l Map_obj6C+$6C000000
0001DE22 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DE26 6D00 EE52                  	dc.l Map_obj6D+$6D000000
0001DE2A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DE2E 6D00 EE52                  	dc.l Map_obj6D+$6D000000
0001DE32 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DE36 6E01 6B48                  	dc.l Map_obj6E+$6E000000
0001DE3A 0400 047E                  	dc.b 4,	0, 4, $7E
0001DE3E 7001 6F9E                  	dc.l Map_obj70+$70000000
0001DE42 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DE46 7101 1D00                  	dc.l Map_obj71+$71000000
0001DE4A 1100 8680                  	dc.b $11, 0, $86, $80
0001DE4E 1E00 9592                  	dc.l Map_obj1E+$1E000000
0001DE52 0400 2302                  	dc.b 4,	0, $23,	2
0001DE56 7901 7A60                  	dc.l Map_obj79+$79000000
0001DE5A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE5E                            	even
0001DE5E                            	even
0001DE5E                            
0001DE5E                            ; ---------------------------------------------------------------------------
0001DE5E                            ; Debug	list - ending sequence / special stage
0001DE5E                            ; ---------------------------------------------------------------------------
0001DE5E                            Debug_Ending:
0001DE5E                            	include "_inc\Debug list - Ending and SS.asm"
0001DE5E                            ; ---------------------------------------------------------------------------
0001DE5E                            ; Debug	list - ending sequence / special stage
0001DE5E                            ; ---------------------------------------------------------------------------
0001DE5E 000D                       	dc.w $D
0001DE60 2500 A68C                  	dc.l Map_obj25+$25000000
0001DE64 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE68 4700 F35C                  	dc.l Map_obj47+$47000000
0001DE6C 0000 0380                  	dc.b 0,	0, 3, $80
0001DE70 2800 9BB6                  	dc.l Map_obj28a+$28000000
0001DE74 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DE78 2800 9BB6                  	dc.l Map_obj28a+$28000000
0001DE7C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DE80 2800 9BB6                  	dc.l Map_obj28a+$28000000
0001DE84 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DE88 2800 9B9E                  	dc.l Map_obj28+$28000000
0001DE8C 0D00 0553                  	dc.b $D, 0, 5, $53
0001DE90 2800 9B9E                  	dc.l Map_obj28+$28000000
0001DE94 0E00 0553                  	dc.b $E, 0, 5, $53
0001DE98 2800 9B9E                  	dc.l Map_obj28+$28000000
0001DE9C 0F00 0573                  	dc.b $F, 0, 5, $73
0001DEA0 2800 9B9E                  	dc.l Map_obj28+$28000000
0001DEA4 1000 0573                  	dc.b $10, 0, 5,	$73
0001DEA8 2800 9BB6                  	dc.l Map_obj28a+$28000000
0001DEAC 1100 0585                  	dc.b $11, 0, 5,	$85
0001DEB0 2800 9BCE                  	dc.l Map_obj28b+$28000000
0001DEB4 1200 0593                  	dc.b $12, 0, 5,	$93
0001DEB8 2800 9BB6                  	dc.l Map_obj28a+$28000000
0001DEBC 1300 0565                  	dc.b $13, 0, 5,	$65
0001DEC0 2800 9BCE                  	dc.l Map_obj28b+$28000000
0001DEC4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DEC8                            	even
0001DEC8                            	even
0001DEC8                            
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8                            ; Main level load blocks
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8                            MainLoadBlocks:
0001DEC8                            	include "_inc\Main level load blocks.asm"
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8                            ; Main level load blocks
0001DEC8                            ;
0001DEC8                            ; ===FORMAT===
0001DEC8                            ; level	patterns + (1st	PLC num	* 10^6)
0001DEC8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DEC8                            ; 256x256 mappings
0001DEC8                            ; blank, music (unused), pal index (unused), pal index
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DECC 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DED0 0000 0000                  	dc.l Blk256_GHZ
0001DED4 0081 0404                  	dc.b 0,	$81, 4,	4
0001DED8 0000 0000                  	dc.l Nem_LZ+$6000000
0001DEDC 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DEE0 0000 0000                  	dc.l Blk256_LZ
0001DEE4 0082 0505                  	dc.b 0,	$82, 5,	5
0001DEE8 0000 0000                  	dc.l Nem_MZ+$8000000
0001DEEC 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DEF0 0000 0000                  	dc.l Blk256_MZ
0001DEF4 0083 0606                  	dc.b 0,	$83, 6,	6
0001DEF8 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DEFC 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DF00 0000 0000                  	dc.l Blk256_SLZ
0001DF04 0084 0707                  	dc.b 0,	$84, 7,	7
0001DF08 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DF0C 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DF10 0000 0000                  	dc.l Blk256_SYZ
0001DF14 0085 0808                  	dc.b 0,	$85, 8,	8
0001DF18 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DF1C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DF20 0000 0000                  	dc.l Blk256_SBZ
0001DF24 0086 0909                  	dc.b 0,	$86, 9,	9
0001DF28 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DF2C 0000 0000                  	dc.l Blk16_GHZ
0001DF30 0000 0000                  	dc.l Blk256_GHZ
0001DF34 0086 1313                  	dc.b 0,	$86, $13, $13
0001DF38                            	even
0001DF38                            	even
0001DF38                            
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            ; Pattern load cues
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            ArtLoadCues:
0001DF38                            	include "_inc\Pattern load cues.asm"
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38                            ; Pattern load cues - index
0001DF38                            ; ---------------------------------------------------------------------------
0001DF38 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DF3C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DF40 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DF44 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DF48 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DF4C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DF50 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DF54 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DF58 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DF5C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DF60 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DF64 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DF68 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DF6C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DF70 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DF74 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DF78 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DF7A                            ; ---------------------------------------------------------------------------
0001DF7A                            ; Pattern load cues - standard block 1
0001DF7A                            ; ---------------------------------------------------------------------------
0001DF7A 0004                       PLC_Main:	dc.w 4
0001DF7C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DF80 F400                       		dc.w $F400
0001DF82 0000 0000                  		dc.l Nem_Hud		; HUD
0001DF86 D940                       		dc.w $D940
0001DF88 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DF8C FA80                       		dc.w $FA80
0001DF8E 0000 0000                  		dc.l Nem_Ring		; rings
0001DF92 F640                       		dc.w $F640
0001DF94 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DF98 F2E0                       		dc.w $F2E0
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A                            ; Pattern load cues - standard block 2
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A 0002                       PLC_Main2:	dc.w 2
0001DF9C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DFA0 D000                       		dc.w $D000
0001DFA2 0000 0000                  		dc.l Nem_Shield		; shield
0001DFA6 A820                       		dc.w $A820
0001DFA8 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DFAC AB80                       		dc.w $AB80
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE                            ; Pattern load cues - explosion
0001DFAE                            ; ---------------------------------------------------------------------------
0001DFAE 0000                       PLC_Explode:	dc.w 0
0001DFB0 0000 0000                  		dc.l Nem_Explode	; explosion
0001DFB4 B400                       		dc.w $B400
0001DFB6                            ; ---------------------------------------------------------------------------
0001DFB6                            ; Pattern load cues - game/time	over
0001DFB6                            ; ---------------------------------------------------------------------------
0001DFB6 0000                       PLC_GameOver:	dc.w 0
0001DFB8 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DFBC ABC0                       		dc.w $ABC0
0001DFBE                            ; ---------------------------------------------------------------------------
0001DFBE                            ; Pattern load cues - Green Hill
0001DFBE                            ; ---------------------------------------------------------------------------
0001DFBE 000B                       PLC_GHZ:	dc.w $B
0001DFC0 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DFC4 0000                       		dc.w 0
0001DFC6 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DFCA 39A0                       		dc.w $39A0
0001DFCC 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DFD0 6B00                       		dc.w $6B00
0001DFD2 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DFD6 7A00                       		dc.w $7A00
0001DFD8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DFDC 8000                       		dc.w $8000
0001DFDE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DFE2 8880                       		dc.w $8880
0001DFE4 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DFE8 8F60                       		dc.w $8F60
0001DFEA 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DFEE 9360                       		dc.w $9360
0001DFF0 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DFF4 9E00                       		dc.w $9E00
0001DFF6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFFA A360                       		dc.w $A360
0001DFFC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E000 A460                       		dc.w $A460
0001E002 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E006 A660                       		dc.w $A660
0001E008 0005                       PLC_GHZ2:	dc.w 5
0001E00A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E00E 7000                       		dc.w $7000
0001E010 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E014 71C0                       		dc.w $71C0
0001E016 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E01A 7300                       		dc.w $7300
0001E01C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E020 7540                       		dc.w $7540
0001E022 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E026 A1E0                       		dc.w $A1E0
0001E028 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E02C 6980                       		dc.w $6980
0001E02E                            ; ---------------------------------------------------------------------------
0001E02E                            ; Pattern load cues - Labyrinth
0001E02E                            ; ---------------------------------------------------------------------------
0001E02E 000B                       PLC_LZ:		dc.w $B
0001E030 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E034 0000                       		dc.w 0
0001E036 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E03A 3C00                       		dc.w $3C00
0001E03C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E040 3E00                       		dc.w $3E00
0001E042 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E046 4B20                       		dc.w $4B20
0001E048 0000 0000                  		dc.l Nem_Water		; water	surface
0001E04C 6000                       		dc.w $6000
0001E04E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E052 6200                       		dc.w $6200
0001E054 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E058 6500                       		dc.w $6500
0001E05A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E05E 6900                       		dc.w $6900
0001E060 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E064 7780                       		dc.w $7780
0001E066 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E06A 7880                       		dc.w $7880
0001E06C 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E070 7980                       		dc.w $7980
0001E072 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E076 94C0                       		dc.w $94C0
0001E078 000C                       PLC_LZ2:	dc.w $C
0001E07A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E07E 7BC0                       		dc.w $7BC0
0001E080 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E084 7CC0                       		dc.w $7CC0
0001E086 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E08A 7EC0                       		dc.w $7EC0
0001E08C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E090 5D20                       		dc.w $5D20
0001E092 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E096 8800                       		dc.w $8800
0001E098 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E09C 89E0                       		dc.w $89E0
0001E09E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0A2 8CE0                       		dc.w $8CE0
0001E0A4 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E0A8 90C0                       		dc.w $90C0
0001E0AA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0AE A1E0                       		dc.w $A1E0
0001E0B0 0000 0000                  		dc.l Nem_Cork		; cork block
0001E0B4 A000                       		dc.w $A000
0001E0B6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0BA A360                       		dc.w $A360
0001E0BC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0C0 A460                       		dc.w $A460
0001E0C2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0C6 A660                       		dc.w $A660
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            ; Pattern load cues - Marble
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8 0009                       PLC_MZ:		dc.w 9
0001E0CA 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E0CE 0000                       		dc.w 0
0001E0D0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E0D4 6000                       		dc.w $6000
0001E0D6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E0DA 68A0                       		dc.w $68A0
0001E0DC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E0E0 7000                       		dc.w $7000
0001E0E2 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E0E6 71C0                       		dc.w $71C0
0001E0E8 0000 0000                  		dc.l Nem_Lava		; lava
0001E0EC 7500                       		dc.w $7500
0001E0EE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E0F2 8880                       		dc.w $8880
0001E0F4 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0F8 8F60                       		dc.w $8F60
0001E0FA 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E0FE 9700                       		dc.w $9700
0001E100 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E104 9FE0                       		dc.w $9FE0
0001E106 0004                       PLC_MZ2:	dc.w 4
0001E108 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E10C A260                       		dc.w $A260
0001E10E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E112 A360                       		dc.w $A360
0001E114 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E118 A460                       		dc.w $A460
0001E11A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E11E A660                       		dc.w $A660
0001E120 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E124 5700                       		dc.w $5700
0001E126                            ; ---------------------------------------------------------------------------
0001E126                            ; Pattern load cues - Star Light
0001E126                            ; ---------------------------------------------------------------------------
0001E126 0008                       PLC_SLZ:	dc.w 8
0001E128 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E12C 0000                       		dc.w 0
0001E12E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E132 8000                       		dc.w $8000
0001E134 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E138 8520                       		dc.w $8520
0001E13A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E13E 9000                       		dc.w $9000
0001E140 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E144 9C00                       		dc.w $9C00
0001E146 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E14A A260                       		dc.w $A260
0001E14C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E150 A360                       		dc.w $A360
0001E152 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E156 A460                       		dc.w $A460
0001E158 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E15C A660                       		dc.w $A660
0001E15E 0005                       PLC_SLZ2:	dc.w 5
0001E160 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E164 6E80                       		dc.w $6E80
0001E166 0000 0000                  		dc.l Nem_Fan		; fan
0001E16A 7400                       		dc.w $7400
0001E16C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E170 7980                       		dc.w $7980
0001E172 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E176 7B80                       		dc.w $7B80
0001E178 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E17C 9B00                       		dc.w $9B00
0001E17E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E182 9E00                       		dc.w $9E00
0001E184                            ; ---------------------------------------------------------------------------
0001E184                            ; Pattern load cues - Spring Yard
0001E184                            ; ---------------------------------------------------------------------------
0001E184 0004                       PLC_SYZ:	dc.w 4
0001E186 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E18A 0000                       		dc.w 0
0001E18C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E190 8000                       		dc.w $8000
0001E192 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E196 8880                       		dc.w $8880
0001E198 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E19C 8F60                       		dc.w $8F60
0001E19E 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E1A2 9700                       		dc.w $9700
0001E1A4 0007                       PLC_SYZ2:	dc.w 7
0001E1A6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E1AA 7000                       		dc.w $7000
0001E1AC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1B0 72C0                       		dc.w $72C0
0001E1B2 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E1B6 7740                       		dc.w $7740
0001E1B8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1BC 9FE0                       		dc.w $9FE0
0001E1BE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E1C2 A1E0                       		dc.w $A1E0
0001E1C4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1C8 A360                       		dc.w $A360
0001E1CA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E1CE A460                       		dc.w $A460
0001E1D0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E1D4 A660                       		dc.w $A660
0001E1D6                            ; ---------------------------------------------------------------------------
0001E1D6                            ; Pattern load cues - Scrap Brain
0001E1D6                            ; ---------------------------------------------------------------------------
0001E1D6 000B                       PLC_SBZ:	dc.w $B
0001E1D8 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E1DC 0000                       		dc.w 0
0001E1DE 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E1E2 5800                       		dc.w $5800
0001E1E4 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E1E8 5D00                       		dc.w $5D00
0001E1EA 0000 0000                  		dc.l Nem_Girder		; girder
0001E1EE 5E00                       		dc.w $5E00
0001E1F0 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E1F4 6040                       		dc.w $6040
0001E1F6 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E1FA 6880                       		dc.w $6880
0001E1FC 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E200 6900                       		dc.w $6900
0001E202 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E206 7220                       		dc.w $7220
0001E208 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E20C 76A0                       		dc.w $76A0
0001E20E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E212 7B20                       		dc.w $7B20
0001E214 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E218 7EA0                       		dc.w $7EA0
0001E21A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E21E 9860                       		dc.w $9860
0001E220 000C                       PLC_SBZ2:	dc.w $C
0001E222 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E226 5600                       		dc.w $5600
0001E228 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E22C 8000                       		dc.w $8000
0001E22E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E232 8520                       		dc.w $8520
0001E234 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E238 8C00                       		dc.w $8C00
0001E23A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E23E 8DE0                       		dc.w $8DE0
0001E240 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E244 8FC0                       		dc.w $8FC0
0001E246 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E24A 9240                       		dc.w $9240
0001E24C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E250 7F20                       		dc.w $7F20
0001E252 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E256 9BE0                       		dc.w $9BE0
0001E258 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E25C A1E0                       		dc.w $A1E0
0001E25E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E262 A360                       		dc.w $A360
0001E264 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E268 A460                       		dc.w $A460
0001E26A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E26E A660                       		dc.w $A660
0001E270                            ; ---------------------------------------------------------------------------
0001E270                            ; Pattern load cues - title card
0001E270                            ; ---------------------------------------------------------------------------
0001E270 0000                       PLC_TitleCard:	dc.w 0
0001E272 0000 0000                  		dc.l Nem_TitleCard
0001E276 B000                       		dc.w $B000
0001E278                            ; ---------------------------------------------------------------------------
0001E278                            ; Pattern load cues - act 3 boss
0001E278                            ; ---------------------------------------------------------------------------
0001E278 0005                       PLC_Boss:	dc.w 5
0001E27A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E27E 8000                       		dc.w $8000
0001E280 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E284 8D80                       		dc.w $8D80
0001E286 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E28A 93A0                       		dc.w $93A0
0001E28C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E290 A300                       		dc.w $A300
0001E292 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E296 A300                       		dc.w $A300
0001E298 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E29C A540                       		dc.w $A540
0001E29E                            ; ---------------------------------------------------------------------------
0001E29E                            ; Pattern load cues - act 1/2 signpost
0001E29E                            ; ---------------------------------------------------------------------------
0001E29E 0002                       PLC_Signpost:	dc.w 2
0001E2A0 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E2A4 D000                       		dc.w $D000
0001E2A6 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E2AA 96C0                       		dc.w $96C0
0001E2AC 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E2B0 8C40                       		dc.w $8C40
0001E2B2                            ; ---------------------------------------------------------------------------
0001E2B2                            ; Pattern load cues - beta special stage warp effect
0001E2B2                            ; ---------------------------------------------------------------------------
0001E2B2 0000                       PLC_Warp:	dc.w 0
0001E2B4 0000 0000                  		dc.l Nem_Warp
0001E2B8 A820                       		dc.w $A820
0001E2BA                            ; ---------------------------------------------------------------------------
0001E2BA                            ; Pattern load cues - special stage
0001E2BA                            ; ---------------------------------------------------------------------------
0001E2BA 0010                       PLC_SpeStage:	dc.w $10
0001E2BC 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E2C0 0000                       		dc.w 0
0001E2C2 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E2C6 0A20                       		dc.w $A20
0001E2C8 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E2CC 2840                       		dc.w $2840
0001E2CE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E2D2 4760                       		dc.w $4760
0001E2D4 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E2D8 4A20                       		dc.w $4A20
0001E2DA 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E2DE 4C60                       		dc.w $4C60
0001E2E0 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E2E4 5E00                       		dc.w $5E00
0001E2E6 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E2EA 6E00                       		dc.w $6E00
0001E2EC 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E2F0 7E00                       		dc.w $7E00
0001E2F2 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E2F6 8E00                       		dc.w $8E00
0001E2F8 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E2FC 9E00                       		dc.w $9E00
0001E2FE 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E302 AE00                       		dc.w $AE00
0001E304 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E308 BE00                       		dc.w $BE00
0001E30A 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E30E EE00                       		dc.w $EE00
0001E310 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E314 F2E0                       		dc.w $F2E0
0001E316 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E31A F400                       		dc.w $F400
0001E31C 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E320 F520                       		dc.w $F520
0001E322 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E326 F2E0                       		dc.w $F2E0
0001E328 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E32C F400                       		dc.w $F400
0001E32E 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E332 F520                       		dc.w $F520
0001E334                            ; ---------------------------------------------------------------------------
0001E334                            ; Pattern load cues - GHZ animals
0001E334                            ; ---------------------------------------------------------------------------
0001E334 0001                       PLC_GHZAnimals:	dc.w 1
0001E336 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E33A B000                       		dc.w $B000
0001E33C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E340 B240                       		dc.w $B240
0001E342                            ; ---------------------------------------------------------------------------
0001E342                            ; Pattern load cues - LZ animals
0001E342                            ; ---------------------------------------------------------------------------
0001E342 0001                       PLC_LZAnimals:	dc.w 1
0001E344 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E348 B000                       		dc.w $B000
0001E34A 0000 0000                  		dc.l Nem_Seal		; seal
0001E34E B240                       		dc.w $B240
0001E350                            ; ---------------------------------------------------------------------------
0001E350                            ; Pattern load cues - MZ animals
0001E350                            ; ---------------------------------------------------------------------------
0001E350 0001                       PLC_MZAnimals:	dc.w 1
0001E352 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E356 B000                       		dc.w $B000
0001E358 0000 0000                  		dc.l Nem_Seal		; seal
0001E35C B240                       		dc.w $B240
0001E35E                            ; ---------------------------------------------------------------------------
0001E35E                            ; Pattern load cues - SLZ animals
0001E35E                            ; ---------------------------------------------------------------------------
0001E35E 0001                       PLC_SLZAnimals:	dc.w 1
0001E360 0000 0000                  		dc.l Nem_Pig		; pig
0001E364 B000                       		dc.w $B000
0001E366 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E36A B240                       		dc.w $B240
0001E36C                            ; ---------------------------------------------------------------------------
0001E36C                            ; Pattern load cues - SYZ animals
0001E36C                            ; ---------------------------------------------------------------------------
0001E36C 0001                       PLC_SYZAnimals:	dc.w 1
0001E36E 0000 0000                  		dc.l Nem_Pig		; pig
0001E372 B000                       		dc.w $B000
0001E374 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E378 B240                       		dc.w $B240
0001E37A                            ; ---------------------------------------------------------------------------
0001E37A                            ; Pattern load cues - SBZ animals
0001E37A                            ; ---------------------------------------------------------------------------
0001E37A 0001                       PLC_SBZAnimals:	dc.w 1
0001E37C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E380 B000                       		dc.w $B000
0001E382 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E386 B240                       		dc.w $B240
0001E388                            ; ---------------------------------------------------------------------------
0001E388                            ; Pattern load cues - special stage results screen
0001E388                            ; ---------------------------------------------------------------------------
0001E388 0001                       PLC_SpeStResult:dc.w 1
0001E38A 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E38E A820                       		dc.w $A820
0001E390 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E394 AA20                       		dc.w $AA20
0001E396                            ; ---------------------------------------------------------------------------
0001E396                            ; Pattern load cues - ending sequence
0001E396                            ; ---------------------------------------------------------------------------
0001E396 000E                       PLC_Ending:	dc.w $E
0001E398 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E39C 0000                       		dc.w 0
0001E39E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E3A2 39A0                       		dc.w $39A0
0001E3A4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E3A8 6B00                       		dc.w $6B00
0001E3AA 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E3AE 7400                       		dc.w $7400
0001E3B0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3B4 78A0                       		dc.w $78A0
0001E3B6 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E3BA 7C20                       		dc.w $7C20
0001E3BC 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E3C0 A480                       		dc.w $A480
0001E3C2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E3C6 AA60                       		dc.w $AA60
0001E3C8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3CC ACA0                       		dc.w $ACA0
0001E3CE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E3D2 AE60                       		dc.w $AE60
0001E3D4 0000 0000                  		dc.l Nem_Seal		; seal
0001E3D8 B0A0                       		dc.w $B0A0
0001E3DA 0000 0000                  		dc.l Nem_Pig		; pig
0001E3DE B260                       		dc.w $B260
0001E3E0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E3E4 B4A0                       		dc.w $B4A0
0001E3E6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E3EA B660                       		dc.w $B660
0001E3EC 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E3F0 B8A0                       		dc.w $B8A0
0001E3F2                            ; ---------------------------------------------------------------------------
0001E3F2                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E3F2                            ; ---------------------------------------------------------------------------
0001E3F2 0002                       PLC_TryAgain:	dc.w 2
0001E3F4 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3F8 78A0                       		dc.w $78A0
0001E3FA 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E3FE 7C20                       		dc.w $7C20
0001E400 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E404 B400                       		dc.w $B400
0001E406                            ; ---------------------------------------------------------------------------
0001E406                            ; Pattern load cues - Eggman on SBZ 2
0001E406                            ; ---------------------------------------------------------------------------
0001E406 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E408 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E40C A300                       		dc.w $A300
0001E40E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E412 8000                       		dc.w $8000
0001E414 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E418 9400                       		dc.w $9400
0001E41A                            ; ---------------------------------------------------------------------------
0001E41A                            ; Pattern load cues - final boss
0001E41A                            ; ---------------------------------------------------------------------------
0001E41A 0004                       PLC_FZBoss:	dc.w 4
0001E41C 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E420 7400                       		dc.w $7400
0001E422 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E426 6000                       		dc.w $6000
0001E428 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E42C 8000                       		dc.w $8000
0001E42E 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E432 8E00                       		dc.w $8E00
0001E434 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E438 A540                       		dc.w $A540
0001E43A                            ; ---------------------------------------------------------------------------
0001E43A                            ; Pattern load cues - Teto boss
0001E43A                            ; ---------------------------------------------------------------------------
0001E43A 0002                       PLC_TetoBoss:	dc.w 2
0001E43C 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E440 8000                       		dc.w $8000
0001E442 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E446 93A0                       		dc.w $93A0
0001E448 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E44C 9000                       		dc.w $9000
0001E44E                            		even
0001E44E                            		even
0001E44E                            
0001E44E                            		incbin	misc\padding.bin
0001E53C                            		even
0001E53C                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E992                            		even
0001E992                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EA2A                            		even
0001EA2A                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EB6C                            		even
0001EB6C                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EBBA                            		even
0001EBBA                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001ECCE                            		even
0001ECCE                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FB98                            		even
0001FB98                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023C9E                            		even
00023C9E                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023CD2                            		even
00023CD2                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023D90                            		even
00023D90                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024238                            		even
00024238                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024296                            		even
00024296                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024E9C                            		even
00024E9C                            ; ---------------------------------------------------------------------------
00024E9C                            ; Sprite mappings - Sonic
00024E9C                            ; ---------------------------------------------------------------------------
00024E9C                            Map_Sonic:
00024E9C                            	include "_maps\Sonic.asm"
00024E9C                            Map_a933:
00024E9C 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
00024E9E 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
00024EA0 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
00024EA2 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00024EA4 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00024EA6 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
00024EA8 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
00024EAA 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
00024EAC 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
00024EAE 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
00024EB0 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
00024EB2 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00024EB4 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00024EB6 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
00024EB8 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
00024EBA 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
00024EBC 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
00024EBE 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
00024EC0 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
00024EC2 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00024EC4 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00024EC6 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00024EC8 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
00024ECA 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
00024ECC 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
00024ECE 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
00024ED0 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
00024ED2 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
00024ED4 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
00024ED6 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
00024ED8 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
00024EDA 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
00024EDC 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
00024EDE 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
00024EE0 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
00024EE2 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
00024EE4 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
00024EE6 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
00024EE8 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
00024EEA 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
00024EEC 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
00024EEE 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
00024EF0 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
00024EF2 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
00024EF4 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00024EF6 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00024EF8 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
00024EFA 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
00024EFC 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
00024EFE 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
00024F00 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
00024F02 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
00024F04 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00024F06 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00024F08 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
00024F0A 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
00024F0C 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
00024F0E 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
00024F10 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
00024F12 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
00024F14 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00024F16 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00024F18 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00024F1A 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00024F1C 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
00024F1E 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
00024F20 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
00024F22 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
00024F24 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00024F26 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00024F28 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00024F2A 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00024F2C 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00024F2E 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
00024F30 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
00024F32 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00024F34 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00024F36 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00024F38 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00024F3A 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00024F3C 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00024F3E 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
00024F40 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00024F42 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00024F44 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00024F46 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00024F48 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00024F4A 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00024F4C 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00024F4E 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
00024F50 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00024F52 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00024F54 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00024F56 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00024F58 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00024F5A 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00024F5C 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
00024F5E 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
00024F60 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00024F62 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00024F64 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00024F66 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00024F68 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00024F6A 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00024F6C 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
00024F6E 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
00024F70 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00024F72 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00024F74 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00024F76 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00024F78 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00024F7A 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00024F7C 00                         Map_a933_E0: 	dc.b $0
00024F7D 02                         Map_a933_E1: 	dc.b $2
00024F7E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024F83 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024F88 03                         Map_a933_EC: 	dc.b $3
00024F89 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F8E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F93 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F98 03                         Map_a933_FC: 	dc.b $3
00024F99 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F9E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FA3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FA8 03                         Map_a933_10C: 	dc.b $3
00024FA9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024FAE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FB3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FB8 03                         Map_a933_11C: 	dc.b $3
00024FB9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024FBE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024FC3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FC8 04                         Map_a933_12C: 	dc.b $4
00024FC9 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024FCE FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024FD3 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024FD8 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024FDD 02                         Map_a933_141: 	dc.b $2
00024FDE EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024FE3 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024FE8 02                         Map_a933_14C: 	dc.b $2
00024FE9 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024FEE FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024FF3 04                         Map_a933_157: 	dc.b $4
00024FF4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024FF9 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024FFE FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00025003 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025008 02                         Map_a933_16C: 	dc.b $2
00025009 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
0002500E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00025013 03                         Map_a933_177: 	dc.b $3
00025014 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025019 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002501E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00025023 05                         Map_a933_187: 	dc.b $5
00025024 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025029 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002502E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00025033 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025038 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002503D 06                         Map_a933_1A1: 	dc.b $6
0002503E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025043 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025048 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002504D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00025052 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025057 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002505C 04                         Map_a933_1C0: 	dc.b $4
0002505D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025062 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025067 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002506C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00025071 05                         Map_a933_1D5: 	dc.b $5
00025072 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025077 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002507C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00025081 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025086 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
0002508B 04                         Map_a933_1EF: 	dc.b $4
0002508C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00025091 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025096 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
0002509B 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000250A0 05                         Map_a933_204: 	dc.b $5
000250A1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000250A6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000250AB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000250B0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000250B5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000250BA 04                         Map_a933_21E: 	dc.b $4
000250BB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000250C0 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000250C5 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000250CA 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000250CF 02                         Map_a933_233: 	dc.b $2
000250D0 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000250D5 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000250DA 02                         Map_a933_23E: 	dc.b $2
000250DB F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000250E0 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000250E5 04                         Map_a933_249: 	dc.b $4
000250E6 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000250EB EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000250F0 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000250F5 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000250FA 02                         Map_a933_25E: 	dc.b $2
000250FB F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00025100 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025105 03                         Map_a933_269: 	dc.b $3
00025106 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002510B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00025110 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025115 06                         Map_a933_279: 	dc.b $6
00025116 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002511B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00025120 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025125 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002512A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002512F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025134 06                         Map_a933_298: 	dc.b $6
00025135 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002513A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002513F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025144 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025149 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002514E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025153 04                         Map_a933_2B7: 	dc.b $4
00025154 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025159 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002515E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025163 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025168 05                         Map_a933_2CC: 	dc.b $5
00025169 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002516E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025173 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025178 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002517D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025182 04                         Map_a933_2E6: 	dc.b $4
00025183 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025188 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002518D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025192 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025197 05                         Map_a933_2FB: 	dc.b $5
00025198 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002519D EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000251A2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000251A7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000251AC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000251B1 02                         Map_a933_315: 	dc.b $2
000251B2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251B7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251BC 02                         Map_a933_320: 	dc.b $2
000251BD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251C2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251C7 02                         Map_a933_32B: 	dc.b $2
000251C8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251CD FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251D2 02                         Map_a933_336: 	dc.b $2
000251D3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251D8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251DD 04                         Map_a933_341: 	dc.b $4
000251DE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251E3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251E8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251ED FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251F2 03                         Map_a933_356: 	dc.b $3
000251F3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251F8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251FD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025202 04                         Map_a933_366: 	dc.b $4
00025203 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025208 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002520D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025212 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025217 03                         Map_a933_37B: 	dc.b $3
00025218 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002521D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025222 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025227 02                         Map_a933_38B: 	dc.b $2
00025228 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002522D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025232 02                         Map_a933_396: 	dc.b $2
00025233 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025238 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002523D 02                         Map_a933_3A1: 	dc.b $2
0002523E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025243 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025248 02                         Map_a933_3AC: 	dc.b $2
00025249 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002524E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025253 04                         Map_a933_3B7: 	dc.b $4
00025254 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025259 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002525E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025263 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025268 02                         Map_a933_3CC: 	dc.b $2
00025269 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002526E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025273 04                         Map_a933_3D7: 	dc.b $4
00025274 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025279 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002527E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025283 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025288 02                         Map_a933_3EC: 	dc.b $2
00025289 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002528E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025293 01                         Map_a933_3F7: 	dc.b $1
00025294 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025299 01                         Map_a933_3FD: 	dc.b $1
0002529A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002529F 01                         Map_a933_403: 	dc.b $1
000252A0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252A5 01                         Map_a933_409: 	dc.b $1
000252A6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252AB 01                         Map_a933_40F: 	dc.b $1
000252AC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252B1 02                         Map_a933_415: 	dc.b $2
000252B2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000252B7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000252BC 01                         Map_a933_420: 	dc.b $1
000252BD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252C2 02                         Map_a933_426: 	dc.b $2
000252C3 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000252C8 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000252CD 01                         Map_a933_431: 	dc.b $1
000252CE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252D3 02                         Map_a933_437: 	dc.b $2
000252D4 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000252D9 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000252DE 04                         Map_a933_442: 	dc.b $4
000252DF ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000252E4 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000252E9 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000252EE 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000252F3 06                         Map_a933_457: 	dc.b $6
000252F4 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000252F9 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000252FE 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025303 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025308 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002530D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025312 02                         Map_a933_476: 	dc.b $2
00025313 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025318 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002531D 02                         Map_a933_481: 	dc.b $2
0002531E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025323 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025328 04                         Map_a933_48C: 	dc.b $4
00025329 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002532E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025333 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025338 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002533D 02                         Map_a933_4A1: 	dc.b $2
0002533E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025343 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025348 03                         Map_a933_4AC: 	dc.b $3
00025349 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002534E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025353 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025358 04                         Map_a933_4BC: 	dc.b $4
00025359 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002535E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025363 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025368 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002536D 02                         Map_a933_4D1: 	dc.b $2
0002536E EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025373 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025378 04                         Map_a933_4DC: 	dc.b $4
00025379 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002537E 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025383 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025388 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002538D 04                         Map_a933_4F1: 	dc.b $4
0002538E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025393 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025398 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002539D F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000253A2 05                         Map_a933_506: 	dc.b $5
000253A3 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000253A8 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000253AD 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000253B2 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000253B7 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000253BC 05                         Map_a933_520: 	dc.b $5
000253BD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000253C2 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000253C7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000253CC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000253D1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000253D6 02                         Map_a933_53A: 	dc.b $2
000253D7 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000253DC 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000253E1 03                         Map_a933_545: 	dc.b $3
000253E2 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000253E7 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000253EC 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253F1 02                         Map_a933_555: 	dc.b $2
000253F2 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000253F7 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000253FC 03                         Map_a933_560: 	dc.b $3
000253FD EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025402 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025407 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002540C 02                         Map_a933_570: 	dc.b $2
0002540D EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025412 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025417 03                         Map_a933_57B: 	dc.b $3
00025418 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002541D 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025422 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025427 03                         Map_a933_58B: 	dc.b $3
00025428 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002542D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025432 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025437 05                         Map_a933_59B: 	dc.b $5
00025438 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002543D E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025442 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025447 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002544C 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025451 05                         Map_a933_5B5: 	dc.b $5
00025452 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025457 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002545C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025461 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025466 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002546B 02                         Map_a933_5CF: 	dc.b $2
0002546C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025471 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025476 03                         Map_a933_5DA: 	dc.b $3
00025477 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002547C F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025481 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025486 01                         Map_a933_5EA: 	dc.b $1
00025487 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002548C 01                         Map_a933_5F0: 	dc.b $1
0002548D F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025492 01                         Map_a933_5F6: 	dc.b $1
00025493 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025498 04                         Map_a933_5FC: 	dc.b $4
00025499 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002549E F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000254A3 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000254A8 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000254AD 03                         Map_a933_611: 	dc.b $3
000254AE F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000254B3 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000254B8 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000254BD 03                         Map_a933_621: 	dc.b $3
000254BE F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000254C3 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000254C8 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000254CD 03                         Map_a933_631: 	dc.b $3
000254CE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000254D3 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000254D8 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000254DD 02                         Map_a933_641: 	dc.b $2
000254DE F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000254E3 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000254E8 02                         Map_a933_64C: 	dc.b $2
000254E9 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000254EE EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000254F3 03                         Map_a933_657: 	dc.b $3
000254F4 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000254F9 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000254FE 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025503 02                         Map_a933_667: 	dc.b $2
00025504 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025509 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
0002550E 04                         Map_a933_672: 	dc.b $4
0002550F ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025514 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025519 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
0002551E 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025523 00                         Map_a933_687: 	dc.b $0
00025524 00                         Map_a933_688: 	dc.b $0
00025525 00                         Map_a933_689: 	dc.b $0
00025526 00                         Map_a933_68A: 	dc.b $0
00025527 02                         Map_a933_68B: 	dc.b $2
00025528 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002552D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025532 00                         Map_a933_696: 	dc.b $0
00025533 02                         Map_a933_697: 	dc.b $2
00025534 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025539 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002553E 00                         Map_a933_6A2: 	dc.b $0
0002553F 00                         Map_a933_6A3: 	dc.b $0
00025540 00                         Map_a933_6A4: 	dc.b $0
00025541 02                         Map_a933_6A5: 	dc.b $2
00025542 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025547 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002554C 00                         Map_a933_6B0: 	dc.b $0
0002554D 02                         Map_a933_6B1: 	dc.b $2
0002554E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025553 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025558 00                         Map_a933_6BC: 	dc.b $0
00025559 00                         Map_a933_6BD: 	dc.b $0
0002555A 00                         Map_a933_6BE: 	dc.b $0
0002555B 02                         Map_a933_6BF: 	dc.b $2
0002555C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025561 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025566 00                         Map_a933_6CA: 	dc.b $0
00025567 02                         Map_a933_6CB: 	dc.b $2
00025568 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002556D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025572 00                         Map_a933_6D6: 	dc.b $0
00025574 00                         	even
00025574 00                         	even
00025574                            
00025574                            ; ---------------------------------------------------------------------------
00025574                            ; Uncompressed graphics	loading	array for Sonic
00025574                            ; ---------------------------------------------------------------------------
00025574                            SonicDynPLC:
00025574                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025574                            DPLC_33c5:
00025574 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025576 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025578 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
0002557A 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
0002557C 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002557E 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
00025580 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00025582 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025584 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025586 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025588 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
0002558A 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
0002558C 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002558E 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
00025590 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00025592 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025594 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025596 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00025598 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
0002559A 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
0002559C 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
0002559E 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000255A0 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000255A2 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000255A4 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000255A6 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000255A8 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000255AA 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000255AC 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000255AE 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000255B0 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000255B2 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000255B4 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000255B6 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000255B8 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000255BA 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
000255BC 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
000255BE 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
000255C0 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
000255C2 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
000255C4 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
000255C6 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
000255C8 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
000255CA 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
000255CC 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000255CE 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000255D0 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000255D2 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000255D4 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000255D6 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000255D8 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000255DA 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000255DC 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000255DE 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000255E0 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000255E2 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000255E4 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000255E6 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000255E8 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000255EA 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000255EC 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000255EE 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000255F0 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000255F2 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000255F4 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
000255F6 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
000255F8 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
000255FA 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
000255FC 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
000255FE 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
00025600 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
00025602 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
00025604 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00025606 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00025608 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
0002560A 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
0002560C 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
0002560E 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
00025610 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
00025612 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
00025614 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00025616 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00025618 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
0002561A 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
0002561C 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
0002561E 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
00025620 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
00025622 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
00025624 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00025626 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00025628 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
0002562A 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
0002562C 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
0002562E 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
00025630 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
00025632 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025634 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025636 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025638 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
0002563A 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
0002563C 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
0002563E 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025640 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025642 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025644 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025646 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025648 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
0002564A 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
0002564C 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002564E 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025650 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025652 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025654 00                         DPLC_33c5_E0: 	dc.b $0
00025655 02                         DPLC_33c5_E1: 	dc.b $2
00025656 F000                       	dc.b $F0, $0
00025658 1010                       	dc.b $10, $10
0002565A 03                         DPLC_33c5_E6: 	dc.b $3
0002565B 5012                       	dc.b $50, $12
0002565D 5018                       	dc.b $50, $18
0002565F 201E                       	dc.b $20, $1E
00025661 03                         DPLC_33c5_ED: 	dc.b $3
00025662 5021                       	dc.b $50, $21
00025664 5018                       	dc.b $50, $18
00025666 201E                       	dc.b $20, $1E
00025668 03                         DPLC_33c5_F4: 	dc.b $3
00025669 5021                       	dc.b $50, $21
0002566B 5018                       	dc.b $50, $18
0002566D 2027                       	dc.b $20, $27
0002566F 03                         DPLC_33c5_FB: 	dc.b $3
00025670 802A                       	dc.b $80, $2A
00025672 2033                       	dc.b $20, $33
00025674 2036                       	dc.b $20, $36
00025676 04                         DPLC_33c5_102: 	dc.b $4
00025677 7039                       	dc.b $70, $39
00025679 5041                       	dc.b $50, $41
0002567B 5047                       	dc.b $50, $47
0002567D 104D                       	dc.b $10, $4D
0002567F 02                         DPLC_33c5_10B: 	dc.b $2
00025680 7039                       	dc.b $70, $39
00025682 B04F                       	dc.b $B0, $4F
00025684 02                         DPLC_33c5_110: 	dc.b $2
00025685 505B                       	dc.b $50, $5B
00025687 8061                       	dc.b $80, $61
00025689 04                         DPLC_33c5_115: 	dc.b $4
0002568A 505B                       	dc.b $50, $5B
0002568C 506A                       	dc.b $50, $6A
0002568E 5070                       	dc.b $50, $70
00025690 1076                       	dc.b $10, $76
00025692 02                         DPLC_33c5_11E: 	dc.b $2
00025693 F4F0                       	dc.b $F4, $F0
00025695 1500                       	dc.b $15, $0
00025697 03                         DPLC_33c5_123: 	dc.b $3
00025698 7039                       	dc.b $70, $39
0002569A 3078                       	dc.b $30, $78
0002569C 507C                       	dc.b $50, $7C
0002569E 05                         DPLC_33c5_12A: 	dc.b $5
0002569F 5082                       	dc.b $50, $82
000256A1 5088                       	dc.b $50, $88
000256A3 208E                       	dc.b $20, $8E
000256A5 5091                       	dc.b $50, $91
000256A7 0097                       	dc.b $0, $97
000256A9 06                         DPLC_33c5_135: 	dc.b $6
000256AA 5082                       	dc.b $50, $82
000256AC 1098                       	dc.b $10, $98
000256AE 309A                       	dc.b $30, $9A
000256B0 509E                       	dc.b $50, $9E
000256B2 30A4                       	dc.b $30, $A4
000256B4 00A8                       	dc.b $0, $A8
000256B6 04                         DPLC_33c5_142: 	dc.b $4
000256B7 50A9                       	dc.b $50, $A9
000256B9 10AF                       	dc.b $10, $AF
000256BB 70B1                       	dc.b $70, $B1
000256BD 20B9                       	dc.b $20, $B9
000256BF 05                         DPLC_33c5_14B: 	dc.b $5
000256C0 50BC                       	dc.b $50, $BC
000256C2 30C2                       	dc.b $30, $C2
000256C4 70C6                       	dc.b $70, $C6
000256C6 20CE                       	dc.b $20, $CE
000256C8 10D1                       	dc.b $10, $D1
000256CA 04                         DPLC_33c5_156: 	dc.b $4
000256CB 50BC                       	dc.b $50, $BC
000256CD 10D3                       	dc.b $10, $D3
000256CF 70D5                       	dc.b $70, $D5
000256D1 20DD                       	dc.b $20, $DD
000256D3 05                         DPLC_33c5_15F: 	dc.b $5
000256D4 5082                       	dc.b $50, $82
000256D6 1098                       	dc.b $10, $98
000256D8 008E                       	dc.b $0, $8E
000256DA 70E0                       	dc.b $70, $E0
000256DC 20E8                       	dc.b $20, $E8
000256DE 04                         DPLC_33c5_16A: 	dc.b $4
000256DF 70EB                       	dc.b $70, $EB
000256E1 50F3                       	dc.b $50, $F3
000256E3 10F9                       	dc.b $10, $F9
000256E5 50FB                       	dc.b $50, $FB
000256E7 02                         DPLC_33c5_173: 	dc.b $2
000256E8 70EB                       	dc.b $70, $EB
000256EA B101                       	dc.b $B1, $1
000256EC 02                         DPLC_33c5_178: 	dc.b $2
000256ED 510D                       	dc.b $51, $D
000256EF 8113                       	dc.b $81, $13
000256F1 04                         DPLC_33c5_17D: 	dc.b $4
000256F2 510D                       	dc.b $51, $D
000256F4 511C                       	dc.b $51, $1C
000256F6 1122                       	dc.b $11, $22
000256F8 5124                       	dc.b $51, $24
000256FA 02                         DPLC_33c5_186: 	dc.b $2
000256FB 510D                       	dc.b $51, $D
000256FD B12A                       	dc.b $B1, $2A
000256FF 03                         DPLC_33c5_18B: 	dc.b $3
00025700 70EB                       	dc.b $70, $EB
00025702 0101                       	dc.b $1, $1
00025704 8136                       	dc.b $81, $36
00025706 06                         DPLC_33c5_192: 	dc.b $6
00025707 513F                       	dc.b $51, $3F
00025709 1145                       	dc.b $11, $45
0002570B 1147                       	dc.b $11, $47
0002570D 8149                       	dc.b $81, $49
0002570F 0152                       	dc.b $1, $52
00025711 0153                       	dc.b $1, $53
00025713 06                         DPLC_33c5_19F: 	dc.b $6
00025714 513F                       	dc.b $51, $3F
00025716 2154                       	dc.b $21, $54
00025718 1157                       	dc.b $11, $57
0002571A 1159                       	dc.b $11, $59
0002571C 815B                       	dc.b $81, $5B
0002571E 0152                       	dc.b $1, $52
00025720 04                         DPLC_33c5_1AC: 	dc.b $4
00025721 5164                       	dc.b $51, $64
00025723 116A                       	dc.b $11, $6A
00025725 816C                       	dc.b $81, $6C
00025727 1175                       	dc.b $11, $75
00025729 05                         DPLC_33c5_1B5: 	dc.b $5
0002572A 5177                       	dc.b $51, $77
0002572C 217D                       	dc.b $21, $7D
0002572E 1180                       	dc.b $11, $80
00025730 7182                       	dc.b $71, $82
00025732 218A                       	dc.b $21, $8A
00025734 04                         DPLC_33c5_1C0: 	dc.b $4
00025735 5177                       	dc.b $51, $77
00025737 118D                       	dc.b $11, $8D
00025739 818F                       	dc.b $81, $8F
0002573B 1198                       	dc.b $11, $98
0002573D 05                         DPLC_33c5_1C9: 	dc.b $5
0002573E 513F                       	dc.b $51, $3F
00025740 819A                       	dc.b $81, $9A
00025742 1159                       	dc.b $11, $59
00025744 11A3                       	dc.b $11, $A3
00025746 0152                       	dc.b $1, $52
00025748 02                         DPLC_33c5_1D4: 	dc.b $2
00025749 51A5                       	dc.b $51, $A5
0002574B B1AB                       	dc.b $B1, $AB
0002574D 02                         DPLC_33c5_1D9: 	dc.b $2
0002574E 505B                       	dc.b $50, $5B
00025750 B1B7                       	dc.b $B1, $B7
00025752 02                         DPLC_33c5_1DE: 	dc.b $2
00025753 51A5                       	dc.b $51, $A5
00025755 B1C3                       	dc.b $B1, $C3
00025757 02                         DPLC_33c5_1E3: 	dc.b $2
00025758 505B                       	dc.b $50, $5B
0002575A B1CF                       	dc.b $B1, $CF
0002575C 04                         DPLC_33c5_1E8: 	dc.b $4
0002575D 51DB                       	dc.b $51, $DB
0002575F 11E1                       	dc.b $11, $E1
00025761 B1E3                       	dc.b $B1, $E3
00025763 01EF                       	dc.b $1, $EF
00025765 03                         DPLC_33c5_1F1: 	dc.b $3
00025766 51F0                       	dc.b $51, $F0
00025768 11F6                       	dc.b $11, $F6
0002576A B1F8                       	dc.b $B1, $F8
0002576C 04                         DPLC_33c5_1F8: 	dc.b $4
0002576D 51DB                       	dc.b $51, $DB
0002576F 1204                       	dc.b $12, $4
00025771 B206                       	dc.b $B2, $6
00025773 01EF                       	dc.b $1, $EF
00025775 03                         DPLC_33c5_201: 	dc.b $3
00025776 51F0                       	dc.b $51, $F0
00025778 11F6                       	dc.b $11, $F6
0002577A B212                       	dc.b $B2, $12
0002577C 02                         DPLC_33c5_208: 	dc.b $2
0002577D 521E                       	dc.b $52, $1E
0002577F B224                       	dc.b $B2, $24
00025781 02                         DPLC_33c5_20D: 	dc.b $2
00025782 510D                       	dc.b $51, $D
00025784 B230                       	dc.b $B2, $30
00025786 02                         DPLC_33c5_212: 	dc.b $2
00025787 521E                       	dc.b $52, $1E
00025789 B23C                       	dc.b $B2, $3C
0002578B 02                         DPLC_33c5_217: 	dc.b $2
0002578C 510D                       	dc.b $51, $D
0002578E B248                       	dc.b $B2, $48
00025790 04                         DPLC_33c5_21C: 	dc.b $4
00025791 5254                       	dc.b $52, $54
00025793 125A                       	dc.b $12, $5A
00025795 B25C                       	dc.b $B2, $5C
00025797 0268                       	dc.b $2, $68
00025799 02                         DPLC_33c5_225: 	dc.b $2
0002579A 7269                       	dc.b $72, $69
0002579C B271                       	dc.b $B2, $71
0002579E 04                         DPLC_33c5_22A: 	dc.b $4
0002579F 5254                       	dc.b $52, $54
000257A1 127D                       	dc.b $12, $7D
000257A3 B27F                       	dc.b $B2, $7F
000257A5 0268                       	dc.b $2, $68
000257A7 02                         DPLC_33c5_233: 	dc.b $2
000257A8 7269                       	dc.b $72, $69
000257AA B28B                       	dc.b $B2, $8B
000257AC 01                         DPLC_33c5_238: 	dc.b $1
000257AD F297                       	dc.b $F2, $97
000257AF 01                         DPLC_33c5_23B: 	dc.b $1
000257B0 F2A7                       	dc.b $F2, $A7
000257B2 01                         DPLC_33c5_23E: 	dc.b $1
000257B3 F2B7                       	dc.b $F2, $B7
000257B5 01                         DPLC_33c5_241: 	dc.b $1
000257B6 F2C7                       	dc.b $F2, $C7
000257B8 01                         DPLC_33c5_244: 	dc.b $1
000257B9 F2D7                       	dc.b $F2, $D7
000257BB 02                         DPLC_33c5_247: 	dc.b $2
000257BC B2E7                       	dc.b $B2, $E7
000257BE 22F3                       	dc.b $22, $F3
000257C0 01                         DPLC_33c5_24C: 	dc.b $1
000257C1 F2F6                       	dc.b $F2, $F6
000257C3 02                         DPLC_33c5_24F: 	dc.b $2
000257C4 B306                       	dc.b $B3, $6
000257C6 2312                       	dc.b $23, $12
000257C8 01                         DPLC_33c5_254: 	dc.b $1
000257C9 F315                       	dc.b $F3, $15
000257CB 02                         DPLC_33c5_257: 	dc.b $2
000257CC 5325                       	dc.b $53, $25
000257CE B32B                       	dc.b $B3, $2B
000257D0 04                         DPLC_33c5_25C: 	dc.b $4
000257D1 5337                       	dc.b $53, $37
000257D3 733D                       	dc.b $73, $3D
000257D5 1345                       	dc.b $13, $45
000257D7 0347                       	dc.b $3, $47
000257D9 02                         DPLC_33c5_265: 	dc.b $2
000257DA D348                       	dc.b $D3, $48
000257DC 34EC                       	dc.b $34, $EC
000257DE 02                         DPLC_33c5_26A: 	dc.b $2
000257DF F528                       	dc.b $F5, $28
000257E1 0538                       	dc.b $5, $38
000257E3 02                         DPLC_33c5_26F: 	dc.b $2
000257E4 F539                       	dc.b $F5, $39
000257E6 0549                       	dc.b $5, $49
000257E8 02                         DPLC_33c5_274: 	dc.b $2
000257E9 E356                       	dc.b $E3, $56
000257EB 054A                       	dc.b $5, $4A
000257ED 01                         DPLC_33c5_279: 	dc.b $1
000257EE 8365                       	dc.b $83, $65
000257F0 03                         DPLC_33c5_27C: 	dc.b $3
000257F1 736E                       	dc.b $73, $6E
000257F3 0376                       	dc.b $3, $76
000257F5 3377                       	dc.b $33, $77
000257F7 02                         DPLC_33c5_283: 	dc.b $2
000257F8 E37B                       	dc.b $E3, $7B
000257FA 054A                       	dc.b $5, $4A
000257FC 01                         DPLC_33c5_288: 	dc.b $1
000257FD D561                       	dc.b $D5, $61
000257FF 04                         DPLC_33c5_28B: 	dc.b $4
00025800 B399                       	dc.b $B3, $99
00025802 33A5                       	dc.b $33, $A5
00025804 03A9                       	dc.b $3, $A9
00025806 03AA                       	dc.b $3, $AA
00025808 04                         DPLC_33c5_294: 	dc.b $4
00025809 B3AB                       	dc.b $B3, $AB
0002580B 33B7                       	dc.b $33, $B7
0002580D 03BB                       	dc.b $3, $BB
0002580F 03BC                       	dc.b $3, $BC
00025811 05                         DPLC_33c5_29D: 	dc.b $5
00025812 83BD                       	dc.b $83, $BD
00025814 13C6                       	dc.b $13, $C6
00025816 53C8                       	dc.b $53, $C8
00025818 13CE                       	dc.b $13, $CE
0002581A 03D0                       	dc.b $3, $D0
0002581C 05                         DPLC_33c5_2A8: 	dc.b $5
0002581D 83D1                       	dc.b $83, $D1
0002581F 13DA                       	dc.b $13, $DA
00025821 53C8                       	dc.b $53, $C8
00025823 13CE                       	dc.b $13, $CE
00025825 03D0                       	dc.b $3, $D0
00025827 02                         DPLC_33c5_2B3: 	dc.b $2
00025828 83DC                       	dc.b $83, $DC
0002582A 73E5                       	dc.b $73, $E5
0002582C 03                         DPLC_33c5_2B8: 	dc.b $3
0002582D 83ED                       	dc.b $83, $ED
0002582F 23F6                       	dc.b $23, $F6
00025831 13F9                       	dc.b $13, $F9
00025833 02                         DPLC_33c5_2BF: 	dc.b $2
00025834 83FB                       	dc.b $83, $FB
00025836 7404                       	dc.b $74, $4
00025838 03                         DPLC_33c5_2C4: 	dc.b $3
00025839 83ED                       	dc.b $83, $ED
0002583B 240C                       	dc.b $24, $C
0002583D 140F                       	dc.b $14, $F
0002583F 02                         DPLC_33c5_2CB: 	dc.b $2
00025840 5411                       	dc.b $54, $11
00025842 B417                       	dc.b $B4, $17
00025844 03                         DPLC_33c5_2D0: 	dc.b $3
00025845 8423                       	dc.b $84, $23
00025847 342C                       	dc.b $34, $2C
00025849 0430                       	dc.b $4, $30
0002584B 03                         DPLC_33c5_2D7: 	dc.b $3
0002584C 7431                       	dc.b $74, $31
0002584E 1439                       	dc.b $14, $39
00025850 B43B                       	dc.b $B4, $3B
00025852 05                         DPLC_33c5_2DE: 	dc.b $5
00025853 7447                       	dc.b $74, $47
00025855 144F                       	dc.b $14, $4F
00025857 5451                       	dc.b $54, $51
00025859 3457                       	dc.b $34, $57
0002585B 045B                       	dc.b $4, $5B
0002585D 05                         DPLC_33c5_2E9: 	dc.b $5
0002585E 745C                       	dc.b $74, $5C
00025860 144F                       	dc.b $14, $4F
00025862 5464                       	dc.b $54, $64
00025864 3457                       	dc.b $34, $57
00025866 045B                       	dc.b $4, $5B
00025868 02                         DPLC_33c5_2F4: 	dc.b $2
00025869 246A                       	dc.b $24, $6A
0002586B F46D                       	dc.b $F4, $6D
0002586D 03                         DPLC_33c5_2F9: 	dc.b $3
0002586E 247D                       	dc.b $24, $7D
00025870 B480                       	dc.b $B4, $80
00025872 248C                       	dc.b $24, $8C
00025874 01                         DPLC_33c5_300: 	dc.b $1
00025875 B48F                       	dc.b $B4, $8F
00025877 01                         DPLC_33c5_303: 	dc.b $1
00025878 549B                       	dc.b $54, $9B
0002587A 01                         DPLC_33c5_306: 	dc.b $1
0002587B 14A1                       	dc.b $14, $A1
0002587D 02                         DPLC_33c5_309: 	dc.b $2
0002587E E356                       	dc.b $E3, $56
00025880 054A                       	dc.b $5, $4A
00025882 03                         DPLC_33c5_30E: 	dc.b $3
00025883 736E                       	dc.b $73, $6E
00025885 0376                       	dc.b $3, $76
00025887 3377                       	dc.b $33, $77
00025889 03                         DPLC_33c5_315: 	dc.b $3
0002588A B4A3                       	dc.b $B4, $A3
0002588C 14AF                       	dc.b $14, $AF
0002588E 34B1                       	dc.b $34, $B1
00025890 03                         DPLC_33c5_31C: 	dc.b $3
00025891 54B5                       	dc.b $54, $B5
00025893 B4BB                       	dc.b $B4, $BB
00025895 1074                       	dc.b $10, $74
00025897 02                         DPLC_33c5_323: 	dc.b $2
00025898 F4C7                       	dc.b $F4, $C7
0002589A 24D7                       	dc.b $24, $D7
0002589C 02                         DPLC_33c5_328: 	dc.b $2
0002589D F4DA                       	dc.b $F4, $DA
0002589F 14EA                       	dc.b $14, $EA
000258A1 02                         DPLC_33c5_32D: 	dc.b $2
000258A2 F502                       	dc.b $F5, $2
000258A4 2512                       	dc.b $25, $12
000258A6 02                         DPLC_33c5_332: 	dc.b $2
000258A7 F515                       	dc.b $F5, $15
000258A9 2525                       	dc.b $25, $25
000258AB 02                         DPLC_33c5_337: 	dc.b $2
000258AC F54B                       	dc.b $F5, $4B
000258AE 755B                       	dc.b $75, $5B
000258B0 00                         DPLC_33c5_33C: 	dc.b $0
000258B1 00                         DPLC_33c5_33D: 	dc.b $0
000258B2 00                         DPLC_33c5_33E: 	dc.b $0
000258B3 00                         DPLC_33c5_33F: 	dc.b $0
000258B4 02                         DPLC_33c5_340: 	dc.b $2
000258B5 F4DA                       	dc.b $F4, $DA
000258B7 14EA                       	dc.b $14, $EA
000258B9 00                         DPLC_33c5_345: 	dc.b $0
000258BA 02                         DPLC_33c5_346: 	dc.b $2
000258BB F4DA                       	dc.b $F4, $DA
000258BD 14EA                       	dc.b $14, $EA
000258BF 00                         DPLC_33c5_34B: 	dc.b $0
000258C0 00                         DPLC_33c5_34C: 	dc.b $0
000258C1 00                         DPLC_33c5_34D: 	dc.b $0
000258C2 02                         DPLC_33c5_34E: 	dc.b $2
000258C3 F4DA                       	dc.b $F4, $DA
000258C5 14EA                       	dc.b $14, $EA
000258C7 00                         DPLC_33c5_353: 	dc.b $0
000258C8 02                         DPLC_33c5_354: 	dc.b $2
000258C9 F4DA                       	dc.b $F4, $DA
000258CB 14EA                       	dc.b $14, $EA
000258CD 00                         DPLC_33c5_359: 	dc.b $0
000258CE 00                         DPLC_33c5_35A: 	dc.b $0
000258CF 00                         DPLC_33c5_35B: 	dc.b $0
000258D0 02                         DPLC_33c5_35C: 	dc.b $2
000258D1 F4DA                       	dc.b $F4, $DA
000258D3 14EA                       	dc.b $14, $EA
000258D5 00                         DPLC_33c5_361: 	dc.b $0
000258D6 02                         DPLC_33c5_362: 	dc.b $2
000258D7 F4DA                       	dc.b $F4, $DA
000258D9 14EA                       	dc.b $14, $EA
000258DB 00                         DPLC_33c5_367: 	dc.b $0
000258DC                            	even
000258DC                            	even
000258DC                            
000258DC                            ; ---------------------------------------------------------------------------
000258DC                            ; Uncompressed graphics	- Sonic
000258DC                            ; ---------------------------------------------------------------------------
000258DC                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000306BC                            		even
000306BC                            ; ---------------------------------------------------------------------------
000306BC                            ; Compressed graphics - various
000306BC                            ; ---------------------------------------------------------------------------
000306BC                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000307C0                            		even
000307C0                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000307FA                            		even
000307FA                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030990                            		even
00030990                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030AD8                            		even
00030AD8                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030BE2                            		even
00030BE2                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030C34                            		even
00030C34                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030E7C                            		even
00030E7C                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00031002                            		even
00031002                            ; ---------------------------------------------------------------------------
00031002                            ; Sprite mappings - walls of the special stage
00031002                            ; ---------------------------------------------------------------------------
00031002                            Map_SSWalls:
00031002                            	include "_maps\SSwalls.asm"
00031002                            ; ---------------------------------------------------------------------------
00031002                            ; Sprite mappings - walls of the special stage
00031002                            ; ---------------------------------------------------------------------------
00031002 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00031006 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003100A 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003100E 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00031012 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00031016 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003101A 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003101E 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00031022 01                         byte_2C584:	dc.b 1
00031023 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00031028 01                         byte_2C58A:	dc.b 1
00031029 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003102E 01                         byte_2C590:	dc.b 1
0003102F F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031034 01                         byte_2C596:	dc.b 1
00031035 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003103A 01                         byte_2C59C:	dc.b 1
0003103B F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00031040 01                         byte_2C5A2:	dc.b 1
00031041 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031046 01                         byte_2C5A8:	dc.b 1
00031047 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003104C 01                         byte_2C5AE:	dc.b 1
0003104D F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00031052 01                         byte_2C5B4:	dc.b 1
00031053 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031058 01                         byte_2C5BA:	dc.b 1
00031059 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003105E 01                         byte_2C5C0:	dc.b 1
0003105F F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031064 01                         byte_2C5C6:	dc.b 1
00031065 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003106A 01                         byte_2C5CC:	dc.b 1
0003106B F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00031070 01                         byte_2C5D2:	dc.b 1
00031071 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031076 01                         byte_2C5D8:	dc.b 1
00031077 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003107C 01                         byte_2C5DE:	dc.b 1
0003107D F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00031082                            		even
00031082                            		even
00031082                            ; ---------------------------------------------------------------------------
00031082                            ; Compressed graphics - special stage
00031082                            ; ---------------------------------------------------------------------------
00031082                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000319BA                            		even
000319BA                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031B08                            		even
00031B08                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032F9A                            		even
00032F9A                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003329A                            		even
0003329A                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003378E                            		even
0003378E                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003387C                            		even
0003387C                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003394C                            		even
0003394C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033A42                            		even
00033A42                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033AA0                            		even
00033AA0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033B32                            		even
00033B32                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033BF4                            		even
00033BF4                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033CC2                            		even
00033CC2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033D8E                            		even
00033D8E                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033E56                            		even
00033E56                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033F20                            		even
00033F20                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033FF0                            		even
00033FF0                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000341E4                            		even
000341E4                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003434C                            		even
0003434C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000343FC                            		even
000343FC                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000344D6                            		even
000344D6                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003455A                            		even
0003455A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000346D8                            		even
000346D8                            ; ---------------------------------------------------------------------------
000346D8                            ; Compressed graphics - GHZ stuff
000346D8                            ; ---------------------------------------------------------------------------
000346D8                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034722                            		even
00034722                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003483C                            		even
0003483C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034928                            		even
00034928                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034970                            		even
00034970                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034B0E                            		even
00034B0E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034BCA                            		even
00034BCA                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034DDE                            		even
00034DDE                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034F0A                            		even
00034F0A                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035038                            		even
00035038                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000350D6                            		even
000350D6                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035136                            		even
00035136                            ; ---------------------------------------------------------------------------
00035136                            ; Compressed graphics - LZ stuff
00035136                            ; ---------------------------------------------------------------------------
00035136                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003525A                            		even
0003525A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035A4E                            		even
00035A4E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035BCE                            		even
00035BCE                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035D38                            		even
00035D38                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003638E                            		even
0003638E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036444                            		even
00036444                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000364E6                            		even
000364E6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036642                            		even
00036642                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000366A6                            		even
000366A6                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000367F8                            		even
000367F8                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036CDA                            		even
00036CDA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036E4A                            		even
00036E4A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037102                            		even
00037102                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003723A                            		even
0003723A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037364                            		even
00037364                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037474                            		even
00037474                            ; ---------------------------------------------------------------------------
00037474                            ; Compressed graphics - MZ stuff
00037474                            ; ---------------------------------------------------------------------------
00037474                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037702                            		even
00037702                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000377C0                            		even
000377C0                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037878                            		even
00037878                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000378CC                            		even
000378CC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037B9E 00                         		even
00037B9E                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000384B4                            		even
000384B4                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038618                            		even
00038618                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000386A0                            		even
000386A0                            ; ---------------------------------------------------------------------------
000386A0                            ; Compressed graphics - SLZ stuff
000386A0                            ; ---------------------------------------------------------------------------
000386A0                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000388DC                            		even
000388DC                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038A22                            		even
00038A22                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038C66                            		even
00038C66                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038CC8                            		even
00038CC8                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038DAA                            		even
00038DAA                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038F8C                            		even
00038F8C                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00039098                            		even
00039098                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003913C                            		even
0003913C                            ; ---------------------------------------------------------------------------
0003913C                            ; Compressed graphics - SYZ stuff
0003913C                            ; ---------------------------------------------------------------------------
0003913C                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000392A6                            		even
000392A6                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00039308                            		even
00039308                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000393EA                            		even
000393EA                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039678                            		even
00039678                            ; ---------------------------------------------------------------------------
00039678                            ; Compressed graphics - SBZ stuff
00039678                            ; ---------------------------------------------------------------------------
00039678                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000396CC                            		even
000396CC                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039968                            		even
00039968                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039B6C                            		even
00039B6C                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039D0A                            		even
00039D0A                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A03A                            		even
0003A03A                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A218                            		even
0003A218                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A270                            		even
0003A270                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A43A 00                         		even
0003A43A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A538                            		even
0003A538                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A6C4                            		even
0003A6C4                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A714                            		even
0003A714                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A76C                            		even
0003A76C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A868                            		even
0003A868                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A97E                            		even
0003A97E                            ; ---------------------------------------------------------------------------
0003A97E                            ; Compressed graphics - enemies
0003A97E                            ; ---------------------------------------------------------------------------
0003A97E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003ADEC 00                         		even
0003ADEC                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AF96 00                         		even
0003AF96                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B358 00                         		even
0003B358                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B540                            		even
0003B540                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B6F8 00                         		even
0003B6F8                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B842                            		even
0003B842                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BACC                            		even
0003BACC                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C0F0                            		even
0003C0F0                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C2E6                            		even
0003C2E6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C904                            		even
0003C904                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CD04 00                         		even
0003CD04                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D000                            		even
0003D000                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D248                            		even
0003D248                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D4E0                            		even
0003D4E0                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D6BE                            		even
0003D6BE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D84C                            		even
0003D84C                            ; ---------------------------------------------------------------------------
0003D84C                            ; Compressed graphics - various
0003D84C                            ; ---------------------------------------------------------------------------
0003D84C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DD7C                            		even
0003DD7C                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DE72                            		even
0003DE72                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DF78                            		even
0003DF78                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E06C                            		even
0003E06C                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E5B0                            		even
0003E5B0                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EC16                            		even
0003EC16                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003ECC6                            		even
0003ECC6                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EE58                            		even
0003EE58                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EF6C                            		even
0003EF6C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F03E                            		even
0003F03E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F4BA                            		even
0003F4BA                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F57A                            		even
0003F57A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F6EE                            		even
0003F6EE                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F9F0                            		even
0003F9F0                            ; ---------------------------------------------------------------------------
0003F9F0                            ; Compressed graphics - continue screen
0003F9F0                            ; ---------------------------------------------------------------------------
0003F9F0                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FCA0                            		even
0003FCA0                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FEDA                            		even
0003FEDA                            ; ---------------------------------------------------------------------------
0003FEDA                            ; Compressed graphics - animals
0003FEDA                            ; ---------------------------------------------------------------------------
0003FEDA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00040032                            		even
00040032                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004018E                            		even
0004018E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004030A                            		even
0004030A                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040426                            		even
00040426                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004055C                            		even
0004055C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040696                            		even
00040696                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000407F2                            		even
000407F2                            ; ---------------------------------------------------------------------------
000407F2                            ; Compressed graphics - primary patterns and block mappings
000407F2                            ; ---------------------------------------------------------------------------
000407F2                            Blk16_GHZ:	incbin	map16\ghz.bin
00041106                            		even
00041106                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042A14                            		even
00042A14                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043D94                            		even
00043D94                            Blk256_GHZ:	incbin	map256\ghz.bin
000461CE                            		even
000461CE                            Blk16_LZ:	incbin	map16\lz.bin
00046908                            		even
00046908                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048D0E                            		even
00048D0E                            Blk256_LZ:	incbin	map256\lz.bin
0004B68E                            		even
0004B68E                            Blk16_MZ:	incbin	map16\mz.bin
0004BDF6                            		even
0004BDF6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E732                            		even
0004E732                            Blk256_MZ:	incbin	map256\mz.bin
0004FED6                            		even
0004FED6                            Blk16_SLZ:	incbin	map16\slz.bin
000505A0                            		even
000505A0                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000524F4                            		even
000524F4                            Blk256_SLZ:	incbin	map256\slz.bin
00052B6E                            		even
00052B6E                            Blk16_SYZ:	incbin	map16\syz.bin
00053794                            		even
00053794                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057D26                            		even
00057D26                            Blk256_SYZ:	incbin	map256\syz.bin
00059D82                            		even
00059D82                            Blk16_SBZ:	incbin	map16\sbz.bin
0005ACCA                            		even
0005ACCA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D68E                            		even
0005D68E                            Blk256_SBZ:	incbin	map256\sbz.bin
00060184                            		even
00060184                            ; ---------------------------------------------------------------------------
00060184                            ; Compressed graphics - bosses and ending sequence
00060184                            ; ---------------------------------------------------------------------------
00060184                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006099E 00                         		even
0006099E                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060FEC                            		even
00060FEC                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00061066                            		even
00061066                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00061350                            		even
00061350                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00061BD4                            		even
00061BD4                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006292A 00                         		even
0006292A                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00063092                            		even
00063092                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00063612                            		even
00063612                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00063732                            		even
00063732                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00063930                            		even
00063930                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064B0E                            		even
00064B0E                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00065452                            		even
00065452                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00065828                            		even
00065828                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065DB8                            		even
00065DB8                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00066040                            		even
00066040                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006662E 00                         		even
0006662E                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000668B6                            		even
000668B6                            		incbin	misc\padding2.bin
000669BA                            		even
000669BA                            ; ---------------------------------------------------------------------------
000669BA                            ; Collision data
000669BA                            ; ---------------------------------------------------------------------------
000669BA                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066ABA                            		even
00066ABA                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067ABA                            		even
00067ABA                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068ABA                            		even
00068ABA                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068C72 00                         		even
00068C72                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068DDA                            		even
00068DDA                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068F6A 00                         		even
00068F6A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006915E                            		even
0006915E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00069364                            		even
00069364                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00069602                            		even
00069602                            ; ---------------------------------------------------------------------------
00069602                            ; Special layouts
00069602                            ; ---------------------------------------------------------------------------
00069602                            SS_1:		incbin	sslayout\1.bin
0006984A                            		even
0006984A                            SS_2:		incbin	sslayout\2.bin
00069C02                            		even
00069C02                            SS_3:		incbin	sslayout\3.bin
00069F5E                            		even
00069F5E                            SS_4:		incbin	sslayout\4.bin
0006A438                            		even
0006A438                            SS_5:		incbin	sslayout\5.bin
0006A8E8                            		even
0006A8E8                            SS_6:		incbin	sslayout\6.bin
0006ABDA                            		even
0006ABDA                            ; ---------------------------------------------------------------------------
0006ABDA                            ; Animated uncompressed graphics
0006ABDA                            ; ---------------------------------------------------------------------------
0006ABDA                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006ADDA                            		even
0006ADDA                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006B1DA                            		even
0006B1DA                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B65A                            		even
0006B65A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B95A                            		even
0006B95A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BF5A                            		even
0006BF5A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006C25A                            		even
0006C25A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006CCDA                            		even
0006CCDA                            
0006CCDA                            ; ---------------------------------------------------------------------------
0006CCDA                            ; Level	layout index
0006CCDA                            ; ---------------------------------------------------------------------------
0006CCDA 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006CCE0 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006CCE6 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006CCEC 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006CCF2 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006CCF8 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006CCFE 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006CD04 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006CD0A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006CD10 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006CD16 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006CD1C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006CD22 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CD28 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CD2E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CD34 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006CD3A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006CD40 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006CD46 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006CD4C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006CD52 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006CD58 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006CD5E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006CD64 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006CD6A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CD70 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CD76 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CD7C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CD82                            
0006CD82                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CE74                            		even
0006CE74 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CE78                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CF40                            		even
0006CF40 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CF44                            Level_GHZ3:	incbin	levels\ghz3.bin
0006D066                            		even
0006D066                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006D088                            		even
0006D088 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006D08C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006D090                            
0006D090                            Level_LZ1:	incbin	levels\lz1.bin
0006D192                            		even
0006D192                            Level_LZbg:	incbin	levels\lzbg.bin
0006D294                            		even
0006D294 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006D298                            Level_LZ2:	incbin	levels\lz2.bin
0006D332                            		even
0006D332 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006D336                            Level_LZ3:	incbin	levels\lz3.bin
0006D450                            		even
0006D450 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D454                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D50E                            		even
0006D50E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D512                            
0006D512                            Level_MZ1:	incbin	levels\mz1.bin
0006D5B0                            		even
0006D5B0                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D62A                            		even
0006D62A                            Level_MZ2:	incbin	levels\mz2.bin
0006D6CE                            		even
0006D6CE                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D760                            		even
0006D760 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D764                            Level_MZ3:	incbin	levels\mz3.bin
0006D846                            		even
0006D846                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D8EA 00                         		even
0006D8EA 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D8EE 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D8F2                            
0006D8F2                            Level_SLZ1:	incbin	levels\slz1.bin
0006DA04                            		even
0006DA04                            Level_SLZbg:	incbin	levels\slzbg.bin
0006DA1E                            		even
0006DA1E                            Level_SLZ2:	incbin	levels\slz2.bin
0006DB0E                            		even
0006DB0E                            Level_SLZ3:	incbin	levels\slz3.bin
0006DC28                            		even
0006DC28 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006DC2C                            
0006DC2C                            Level_SYZ1:	incbin	levels\syz1.bin
0006DCE8 00                         		even
0006DCE8                            Level_SYZbg:	incbin	levels\syzbg.bin
0006DD22                            		even
0006DD22 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006DD26                            Level_SYZ2:	incbin	levels\syz2.bin
0006DE2A                            		even
0006DE2A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DE2E                            Level_SYZ3:	incbin	levels\syz3.bin
0006DF88 00                         		even
0006DF88 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DF8C 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DF90                            
0006DF90                            Level_SBZ1:	incbin	levels\sbz1.bin
0006E0B2                            		even
0006E0B2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006E0F0                            		even
0006E0F0                            Level_SBZ2:	incbin	levels\sbz2.bin
0006E232                            		even
0006E232                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006E39C                            		even
0006E39C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006E3A0 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006E3A4                            Level_End:	incbin	levels\ending.bin
0006E3D4 00                         		even
0006E3D4 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006E3D8                            
0006E3D8                            ; ---------------------------------------------------------------------------
0006E3D8                            ; Animated uncompressed giant ring graphics
0006E3D8                            ; ---------------------------------------------------------------------------
0006E3D8                            Art_BigRing:	incbin	artunc\bigring.bin
0006F018                            		even
0006F018                            
0006F018                            		incbin	misc\padding3.bin
0006F0B4                            		even
0006F0B4                            
0006F0B4                            ; ---------------------------------------------------------------------------
0006F0B4                            ; Sprite locations index
0006F0B4                            ; ---------------------------------------------------------------------------
0006F0B4 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0B8 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0BC 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0C0 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0C4 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0C8 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0CC 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0D0 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0D4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0D8 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0DC 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0E0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0E4 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0E8 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0EC 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0F0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0F4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0F8 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F0FC 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F100 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F104 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F108 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F10C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F110 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F114 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F118 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F11C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F120 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F124 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006F128 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006F12C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006F130 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006F134 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006F138 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006F13C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006F140 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006F144 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006F14A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F996                            		even
0006F996                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006FC60                            		even
0006FC60                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007062C                            		even
0007062C                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000709D4                            		even
000709D4                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070D0A                            		even
00070D0A                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00071220                            		even
00071220                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000716B8                            		even
000716B8                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000716EA                            		even
000716EA                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007171C                            		even
0007171C                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007174E                            		even
0007174E                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00071780                            		even
00071780                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000717CA                            		even
000717CA                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071808                            		even
00071808                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00071B74                            		even
00071B74                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007201E                            		even
0007201E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00072594                            		even
00072594                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000725BE                            		even
000725BE                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00072A26                            		even
00072A26                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00073008                            		even
00073008                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007367A                            		even
0007367A                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00073BE4                            		even
00073BE4                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000741EA                            		even
000741EA                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074928                            		even
00074928                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00075006                            		even
00075006                            ObjPos_FZ:	incbin	objpos\fz.bin
00075018                            		even
00075018                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007504A                            		even
0007504A                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007507C                            		even
0007507C                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000750AE                            		even
000750AE                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000750E0                            		even
000750E0                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00075112                            		even
00075112                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007514A                            		even
0007514A                            ObjPos_End:	incbin	objpos\ending.bin
000752A6                            		even
000752A6 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000752AC                            ; ---------------------------------------------------------------------------
000752AC                            		incbin	misc\padding4.bin
000758D6                            		even
000758D6                            
000758D6 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000758DA 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000758DE 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000758E2 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000758E6 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000758EA 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000758EE                            ; ---------------------------------------------------------------------------
000758EE                            ; PSG instruments used in music
000758EE                            ; ---------------------------------------------------------------------------
000758EE 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000758FA 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00075906 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00075912                            
00075912 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
00075922 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
00075929                            
00075929 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
00075930                            
00075930 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
00075940 80                                     dc.b    $80
00075941                            
00075941 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007594C                            
0007594C 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007595C 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007596C 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
00075976                            
00075976 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
00075985                            
00075985 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00075995 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
000759A1                            
000759A1 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
000759B1 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
000759C1 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
000759C9                            
000759C9 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
000759D9 80                                     dc.b    $80
000759DA                            
000759DA 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000759E2                            ; ---------------------------------------------------------------------------
000759E2                            ; Music	Pointers
000759E2                            ; ---------------------------------------------------------------------------
000759E2 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000759EA 0000 0000 0000 0000        		dc.l Music83, Music84
000759F2 0000 0000 0000 0000        		dc.l Music85, Music86
000759FA 0000 0000 0000 0000        		dc.l Music87, Music88
00075A02 0000 0000 0000 0000        		dc.l Music89, Music8A
00075A0A 0000 0000 0000 0000        		dc.l Music8B, Music8C
00075A12 0000 0000 0000 0000        		dc.l Music8D, Music8E
00075A1A 0000 0000 0000 0000        		dc.l Music8F, Music90
00075A22 0000 0000 0000 0000        		dc.l Music91, Music92
00075A2A 0000 0000 0000 0000        		dc.l Music93, Music94
00075A32 0000 0000 0000 0000        		dc.l Music95, Music96
00075A3A 0000 0000 0000 0000        		dc.l Music97, Music98
00075A42 0000 0000 0000 0000        		dc.l Music99, Music9A
00075A4A 0000 0000 0000 0000        		dc.l Music9B, Music9C
00075A52 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075A5A 0000 0000                  		dc.l Music9F
00075A5E                            ; ---------------------------------------------------------------------------
00075A5E                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075A5E                            ; ---------------------------------------------------------------------------
00075A5E 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075A6E 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075A7E 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075A8E 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00075A9E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00075AAE 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00075ABE 9090 9090                  		dc.b $90, $90, $90, $90
00075AC2                            
00075AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AC2                            
00075AC2                            
00075AC2                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075AC2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00075ACA 4E71                       		nop	
00075ACC 4E71                       		nop	
00075ACE 4E71                       		nop	
00075AD0                            
00075AD0                            loc_71B5A:
00075AD0 0839 0000 00A1 1100        		btst	#0,($A11100).l
00075AD8 66F6                       		bne.s	loc_71B5A
00075ADA                            
00075ADA 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075AE2 6700                       		beq.s	loc_71B82
00075AE4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075AEC 4E71                       		nop	
00075AEE 4E71                       		nop	
00075AF0 4E71                       		nop	
00075AF2 4E71                       		nop	
00075AF4 4E71                       		nop	
00075AF6 60CA                       		bra.s	sub_71B4C
00075AF8                            ; ===========================================================================
00075AF8                            
00075AF8                            loc_71B82:
00075AF8 4DF9 00FF F000             		lea	($FFF000).l,a6
00075AFE 422E 000E                  		clr.b	$E(a6)
00075B02 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00075B06 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00075B0A 532E 0001                  		subq.b	#1,1(a6)
00075B0E 6600                       		bne.s	loc_71B9E
00075B10 4EBA 0000                  		jsr	sub_7260C(pc)
00075B14                            
00075B14                            loc_71B9E:
00075B14 102E 0004                  		move.b	4(a6),d0
00075B18 6700                       		beq.s	loc_71BA8
00075B1A 4EBA 0000                  		jsr	sub_72504(pc)
00075B1E                            
00075B1E                            loc_71BA8:
00075B1E 4A2E 0024                  		tst.b	$24(a6)
00075B22 6700                       		beq.s	loc_71BB2
00075B24 4EBA 0000                  		jsr	sub_7267C(pc)
00075B28                            
00075B28                            loc_71BB2:
00075B28 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00075B2C 6700                       		beq.s	loc_71BBC	; if not, branch
00075B2E 4EBA 0000                  		jsr	Sound_Play(pc)
00075B32                            
00075B32                            loc_71BBC:
00075B32 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075B38 6700                       		beq.s	loc_71BC8
00075B3A 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00075B3E                            
00075B3E                            loc_71BC8:
00075B3E 4BEE 0040                  		lea	$40(a6),a5
00075B42 4A15                       		tst.b	(a5)
00075B44 6A00                       		bpl.s	loc_71BD4
00075B46 4EBA 0000                  		jsr	sub_71C4E(pc)
00075B4A                            
00075B4A                            loc_71BD4:
00075B4A 422E 0008                  		clr.b	8(a6)
00075B4E 7E05                       		moveq	#5,d7
00075B50                            
00075B50                            loc_71BDA:
00075B50 DAFC 0030                  		adda.w	#$30,a5
00075B54 4A15                       		tst.b	(a5)
00075B56 6A00                       		bpl.s	loc_71BE6
00075B58 4EBA 0000                  		jsr	sub_71CCA(pc)
00075B5C                            
00075B5C                            loc_71BE6:
00075B5C 51CF FFF2                  		dbf	d7,loc_71BDA
00075B60                            
00075B60 7E02                       		moveq	#2,d7
00075B62                            
00075B62                            loc_71BEC:
00075B62 DAFC 0030                  		adda.w	#$30,a5
00075B66 4A15                       		tst.b	(a5)
00075B68 6A00                       		bpl.s	loc_71BF8
00075B6A 4EBA 0000                  		jsr	sub_72850(pc)
00075B6E                            
00075B6E                            loc_71BF8:
00075B6E 51CF FFF2                  		dbf	d7,loc_71BEC
00075B72                            
00075B72 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075B78 7E02                       		moveq	#2,d7
00075B7A                            
00075B7A                            loc_71C04:
00075B7A DAFC 0030                  		adda.w	#$30,a5
00075B7E 4A15                       		tst.b	(a5)
00075B80 6A00                       		bpl.s	loc_71C10
00075B82 4EBA 0000                  		jsr	sub_71CCA(pc)
00075B86                            
00075B86                            loc_71C10:
00075B86 51CF FFF2                  		dbf	d7,loc_71C04
00075B8A                            
00075B8A 7E02                       		moveq	#2,d7
00075B8C                            
00075B8C                            loc_71C16:
00075B8C DAFC 0030                  		adda.w	#$30,a5
00075B90 4A15                       		tst.b	(a5)
00075B92 6A00                       		bpl.s	loc_71C22
00075B94 4EBA 0000                  		jsr	sub_72850(pc)
00075B98                            
00075B98                            loc_71C22:
00075B98 51CF FFF2                  		dbf	d7,loc_71C16
00075B9C 1D7C 0040 000E             		move.b	#$40,$E(a6)
00075BA2 DAFC 0030                  		adda.w	#$30,a5
00075BA6 4A15                       		tst.b	(a5)
00075BA8 6A00                       		bpl.s	loc_71C38
00075BAA 4EBA 0000                  		jsr	sub_71CCA(pc)
00075BAE                            
00075BAE                            loc_71C38:
00075BAE DAFC 0030                  		adda.w	#$30,a5
00075BB2 4A15                       		tst.b	(a5)
00075BB4 6A00                       		bpl.s	loc_71C44
00075BB6 4EBA 0000                  		jsr	sub_72850(pc)
00075BBA                            
00075BBA                            loc_71C44:
00075BBA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075BC2 4E75                       		rts	
00075BC4                            ; End of function sub_71B4C
00075BC4                            
00075BC4                            
00075BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BC4                            
00075BC4                            
00075BC4                            sub_71C4E:				; XREF: sub_71B4C
00075BC4 532D 000E                  		subq.b	#1,$E(a5)
00075BC8 6600                       		bne.s	locret_71CAA
00075BCA 1D7C 0080 0008             		move.b	#$80,8(a6)
00075BD0 286D 0004                  		movea.l	4(a5),a4
00075BD4                            
00075BD4                            loc_71C5E:
00075BD4 7A00                       		moveq	#0,d5
00075BD6 1A1C                       		move.b	(a4)+,d5
00075BD8 0C05 00E0                  		cmpi.b	#-$20,d5
00075BDC 6500                       		bcs.s	loc_71C6E
00075BDE 4EBA 0000                  		jsr	sub_72A5A(pc)
00075BE2 60F0                       		bra.s	loc_71C5E
00075BE4                            ; ===========================================================================
00075BE4                            
00075BE4                            loc_71C6E:
00075BE4 4A05                       		tst.b	d5
00075BE6 6A00                       		bpl.s	loc_71C84
00075BE8 1B45 0010                  		move.b	d5,$10(a5)
00075BEC 1A1C                       		move.b	(a4)+,d5
00075BEE 6A00                       		bpl.s	loc_71C84
00075BF0 534C                       		subq.w	#1,a4
00075BF2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075BF8 6000                       		bra.s	loc_71C88
00075BFA                            ; ===========================================================================
00075BFA                            
00075BFA                            loc_71C84:
00075BFA 4EBA 0000                  		jsr	sub_71D40(pc)
00075BFE                            
00075BFE                            loc_71C88:
00075BFE 2B4C 0004                  		move.l	a4,4(a5)
00075C02 0815 0002                  		btst	#2,(a5)
00075C06 6600                       		bne.s	locret_71CAA
00075C08 7000                       		moveq	#0,d0
00075C0A 102D 0010                  		move.b	$10(a5),d0
00075C0E 0C00 0080                  		cmpi.b	#$80,d0
00075C12 6700                       		beq.s	locret_71CAA
00075C14 0800 0003                  		btst	#3,d0
00075C18 6600                       		bne.s	loc_71CAC
00075C1A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00075C20                            
00075C20                            locret_71CAA:
00075C20 4E75                       		rts	
00075C22                            ; ===========================================================================
00075C22                            
00075C22                            loc_71CAC:
00075C22 0400 0088                  		subi.b	#$88,d0
00075C26 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00075C2A 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00075C30 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00075C38 4E75                       		rts	
00075C3A                            ; End of function sub_71C4E
00075C3A                            
00075C3A                            ; ===========================================================================
00075C3A 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00075C40                            
00075C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C40                            
00075C40                            
00075C40                            sub_71CCA:				; XREF: sub_71B4C
00075C40 532D 000E                  		subq.b	#1,$E(a5)
00075C44 6600                       		bne.s	loc_71CE0
00075C46 0895 0004                  		bclr	#4,(a5)
00075C4A 4EBA 0000                  		jsr	sub_71CEC(pc)
00075C4E 4EBA 0000                  		jsr	sub_71E18(pc)
00075C52 6000 0000                  		bra.w	loc_726E2
00075C56                            ; ===========================================================================
00075C56                            
00075C56                            loc_71CE0:
00075C56 4EBA 0000                  		jsr	sub_71D9E(pc)
00075C5A 4EBA 0000                  		jsr	sub_71DC6(pc)
00075C5E 6000 0000                  		bra.w	loc_71E24
00075C62                            ; End of function sub_71CCA
00075C62                            
00075C62                            
00075C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C62                            
00075C62                            
00075C62                            sub_71CEC:				; XREF: sub_71CCA
00075C62 286D 0004                  		movea.l	4(a5),a4
00075C66 0895 0001                  		bclr	#1,(a5)
00075C6A                            
00075C6A                            loc_71CF4:
00075C6A 7A00                       		moveq	#0,d5
00075C6C 1A1C                       		move.b	(a4)+,d5
00075C6E 0C05 00E0                  		cmpi.b	#-$20,d5
00075C72 6500                       		bcs.s	loc_71D04
00075C74 4EBA 0000                  		jsr	sub_72A5A(pc)
00075C78 60F0                       		bra.s	loc_71CF4
00075C7A                            ; ===========================================================================
00075C7A                            
00075C7A                            loc_71D04:
00075C7A 4EBA 0000                  		jsr	sub_726FE(pc)
00075C7E 4A05                       		tst.b	d5
00075C80 6A00                       		bpl.s	loc_71D1A
00075C82 4EBA 0000                  		jsr	sub_71D22(pc)
00075C86 1A1C                       		move.b	(a4)+,d5
00075C88 6A00                       		bpl.s	loc_71D1A
00075C8A 534C                       		subq.w	#1,a4
00075C8C 6000 0000                  		bra.w	sub_71D60
00075C90                            ; ===========================================================================
00075C90                            
00075C90                            loc_71D1A:
00075C90 4EBA 0000                  		jsr	sub_71D40(pc)
00075C94 6000 0000                  		bra.w	sub_71D60
00075C98                            ; End of function sub_71CEC
00075C98                            
00075C98                            
00075C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C98                            
00075C98                            
00075C98                            sub_71D22:				; XREF: sub_71CEC
00075C98 0405 0080                  		subi.b	#$80,d5
00075C9C 6700                       		beq.s	loc_71D58
00075C9E DA2D 0008                  		add.b	8(a5),d5
00075CA2 0245 007F                  		andi.w	#$7F,d5
00075CA6 E34D                       		lsl.w	#1,d5
00075CA8 41FA 0000                  		lea	word_72790(pc),a0
00075CAC 3C30 5000                  		move.w	(a0,d5.w),d6
00075CB0 3B46 0010                  		move.w	d6,$10(a5)
00075CB4 4E75                       		rts	
00075CB6                            ; End of function sub_71D22
00075CB6                            
00075CB6                            
00075CB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CB6                            
00075CB6                            
00075CB6                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075CB6 1005                       		move.b	d5,d0
00075CB8 122D 0002                  		move.b	2(a5),d1
00075CBC                            
00075CBC                            loc_71D46:
00075CBC 5301                       		subq.b	#1,d1
00075CBE 6700                       		beq.s	loc_71D4E
00075CC0 D005                       		add.b	d5,d0
00075CC2 60F8                       		bra.s	loc_71D46
00075CC4                            ; ===========================================================================
00075CC4                            
00075CC4                            loc_71D4E:
00075CC4 1B40 000F                  		move.b	d0,$F(a5)
00075CC8 1B40 000E                  		move.b	d0,$E(a5)
00075CCC 4E75                       		rts	
00075CCE                            ; End of function sub_71D40
00075CCE                            
00075CCE                            ; ===========================================================================
00075CCE                            
00075CCE                            loc_71D58:				; XREF: sub_71D22
00075CCE 08D5 0001                  		bset	#1,(a5)
00075CD2 426D 0010                  		clr.w	$10(a5)
00075CD6                            
00075CD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CD6                            
00075CD6                            
00075CD6                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00075CD6 2B4C 0004                  		move.l	a4,4(a5)
00075CDA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075CE0 0815 0004                  		btst	#4,(a5)
00075CE4 6600                       		bne.s	locret_71D9C
00075CE6 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075CEC 422D 000C                  		clr.b	$C(a5)
00075CF0 0815 0003                  		btst	#3,(a5)
00075CF4 6700                       		beq.s	locret_71D9C
00075CF6 206D 0014                  		movea.l	$14(a5),a0
00075CFA 1B58 0018                  		move.b	(a0)+,$18(a5)
00075CFE 1B58 0019                  		move.b	(a0)+,$19(a5)
00075D02 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075D06 1018                       		move.b	(a0)+,d0
00075D08 E208                       		lsr.b	#1,d0
00075D0A 1B40 001B                  		move.b	d0,$1B(a5)
00075D0E 426D 001C                  		clr.w	$1C(a5)
00075D12                            
00075D12                            locret_71D9C:
00075D12 4E75                       		rts	
00075D14                            ; End of function sub_71D60
00075D14                            
00075D14                            
00075D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D14                            
00075D14                            
00075D14                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075D14 4A2D 0012                  		tst.b	$12(a5)
00075D18 6700                       		beq.s	locret_71DC4
00075D1A 532D 0012                  		subq.b	#1,$12(a5)
00075D1E 6600                       		bne.s	locret_71DC4
00075D20 08D5 0001                  		bset	#1,(a5)
00075D24 4A2D 0001                  		tst.b	1(a5)
00075D28 6B00 0000                  		bmi.w	loc_71DBE
00075D2C 4EBA 0000                  		jsr	sub_726FE(pc)
00075D30 584F                       		addq.w	#4,sp
00075D32 4E75                       		rts	
00075D34                            ; ===========================================================================
00075D34                            
00075D34                            loc_71DBE:
00075D34 4EBA 0000                  		jsr	sub_729A0(pc)
00075D38 584F                       		addq.w	#4,sp
00075D3A                            
00075D3A                            locret_71DC4:
00075D3A 4E75                       		rts	
00075D3C                            ; End of function sub_71D9E
00075D3C                            
00075D3C                            
00075D3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D3C                            
00075D3C                            
00075D3C                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075D3C 584F                       		addq.w	#4,sp
00075D3E 0815 0003                  		btst	#3,(a5)
00075D42 6700                       		beq.s	locret_71E16
00075D44 4A2D 0018                  		tst.b	$18(a5)
00075D48 6700                       		beq.s	loc_71DDA
00075D4A 532D 0018                  		subq.b	#1,$18(a5)
00075D4E 4E75                       		rts	
00075D50                            ; ===========================================================================
00075D50                            
00075D50                            loc_71DDA:
00075D50 532D 0019                  		subq.b	#1,$19(a5)
00075D54 6700                       		beq.s	loc_71DE2
00075D56 4E75                       		rts	
00075D58                            ; ===========================================================================
00075D58                            
00075D58                            loc_71DE2:
00075D58 206D 0014                  		movea.l	$14(a5),a0
00075D5C 1B68 0001 0019             		move.b	1(a0),$19(a5)
00075D62 4A2D 001B                  		tst.b	$1B(a5)
00075D66 6600                       		bne.s	loc_71DFE
00075D68 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075D6E 442D 001A                  		neg.b	$1A(a5)
00075D72 4E75                       		rts	
00075D74                            ; ===========================================================================
00075D74                            
00075D74                            loc_71DFE:
00075D74 532D 001B                  		subq.b	#1,$1B(a5)
00075D78 1C2D 001A                  		move.b	$1A(a5),d6
00075D7C 4886                       		ext.w	d6
00075D7E DC6D 001C                  		add.w	$1C(a5),d6
00075D82 3B46 001C                  		move.w	d6,$1C(a5)
00075D86 DC6D 0010                  		add.w	$10(a5),d6
00075D8A 594F                       		subq.w	#4,sp
00075D8C                            
00075D8C                            locret_71E16:
00075D8C 4E75                       		rts	
00075D8E                            ; End of function sub_71DC6
00075D8E                            
00075D8E                            
00075D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D8E                            
00075D8E                            
00075D8E                            sub_71E18:				; XREF: sub_71CCA
00075D8E 0815 0001                  		btst	#1,(a5)
00075D92 6600                       		bne.s	locret_71E48
00075D94 3C2D 0010                  		move.w	$10(a5),d6
00075D98 6700                       		beq.s	loc_71E4A
00075D9A                            
00075D9A                            loc_71E24:				; XREF: sub_71CCA
00075D9A 102D 001E                  		move.b	$1E(a5),d0
00075D9E 4880                       		ext.w	d0
00075DA0 DC40                       		add.w	d0,d6
00075DA2 0815 0002                  		btst	#2,(a5)
00075DA6 6600                       		bne.s	locret_71E48
00075DA8 3206                       		move.w	d6,d1
00075DAA E049                       		lsr.w	#8,d1
00075DAC 103C 00A4                  		move.b	#-$5C,d0
00075DB0 4EBA 0000                  		jsr	sub_72722(pc)
00075DB4 1206                       		move.b	d6,d1
00075DB6 103C 00A0                  		move.b	#-$60,d0
00075DBA 4EBA 0000                  		jsr	sub_72722(pc)
00075DBE                            
00075DBE                            locret_71E48:
00075DBE 4E75                       		rts	
00075DC0                            ; ===========================================================================
00075DC0                            
00075DC0                            loc_71E4A:
00075DC0 08D5 0001                  		bset	#1,(a5)
00075DC4 4E75                       		rts	
00075DC6                            ; End of function sub_71E18
00075DC6                            
00075DC6                            ; ===========================================================================
00075DC6                            
00075DC6                            loc_71E50:				; XREF: sub_71B4C
00075DC6 6B00                       		bmi.s	loc_71E94
00075DC8 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075DCE 6700 0000                  		beq.w	loc_71EFE
00075DD2 1D7C 0002 0003             		move.b	#2,3(a6)
00075DD8 7602                       		moveq	#2,d3
00075DDA 103C 00B4                  		move.b	#-$4C,d0
00075DDE 7200                       		moveq	#0,d1
00075DE0                            
00075DE0                            loc_71E6A:
00075DE0 4EBA 0000                  		jsr	sub_7272E(pc)
00075DE4 4EBA 0000                  		jsr	sub_72764(pc)
00075DE8 5200                       		addq.b	#1,d0
00075DEA 51CB FFF4                  		dbf	d3,loc_71E6A
00075DEE                            
00075DEE 7602                       		moveq	#2,d3
00075DF0 7028                       		moveq	#$28,d0
00075DF2                            
00075DF2                            loc_71E7C:
00075DF2 1203                       		move.b	d3,d1
00075DF4 4EBA 0000                  		jsr	sub_7272E(pc)
00075DF8 5801                       		addq.b	#4,d1
00075DFA 4EBA 0000                  		jsr	sub_7272E(pc)
00075DFE 51CB FFF2                  		dbf	d3,loc_71E7C
00075E02                            
00075E02 4EBA 0000                  		jsr	sub_729B6(pc)
00075E06 6000 FDB2                  		bra.w	loc_71C44
00075E0A                            ; ===========================================================================
00075E0A                            
00075E0A                            loc_71E94:				; XREF: loc_71E50
00075E0A 422E 0003                  		clr.b	3(a6)
00075E0E 7630                       		moveq	#$30,d3
00075E10 4BEE 0040                  		lea	$40(a6),a5
00075E14 7806                       		moveq	#6,d4
00075E16                            
00075E16                            loc_71EA0:
00075E16 0815 0007                  		btst	#7,(a5)
00075E1A 6700                       		beq.s	loc_71EB8
00075E1C 0815 0002                  		btst	#2,(a5)
00075E20 6600                       		bne.s	loc_71EB8
00075E22 103C 00B4                  		move.b	#-$4C,d0
00075E26 122D 000A                  		move.b	$A(a5),d1
00075E2A 4EBA 0000                  		jsr	sub_72722(pc)
00075E2E                            
00075E2E                            loc_71EB8:
00075E2E DAC3                       		adda.w	d3,a5
00075E30 51CC FFE4                  		dbf	d4,loc_71EA0
00075E34                            
00075E34 4BEE 0220                  		lea	$220(a6),a5
00075E38 7802                       		moveq	#2,d4
00075E3A                            
00075E3A                            loc_71EC4:
00075E3A 0815 0007                  		btst	#7,(a5)
00075E3E 6700                       		beq.s	loc_71EDC
00075E40 0815 0002                  		btst	#2,(a5)
00075E44 6600                       		bne.s	loc_71EDC
00075E46 103C 00B4                  		move.b	#-$4C,d0
00075E4A 122D 000A                  		move.b	$A(a5),d1
00075E4E 4EBA 0000                  		jsr	sub_72722(pc)
00075E52                            
00075E52                            loc_71EDC:
00075E52 DAC3                       		adda.w	d3,a5
00075E54 51CC FFE4                  		dbf	d4,loc_71EC4
00075E58                            
00075E58 4BEE 0340                  		lea	$340(a6),a5
00075E5C 0815 0007                  		btst	#7,(a5)
00075E60 6700                       		beq.s	loc_71EFE
00075E62 0815 0002                  		btst	#2,(a5)
00075E66 6600                       		bne.s	loc_71EFE
00075E68 103C 00B4                  		move.b	#-$4C,d0
00075E6C 122D 000A                  		move.b	$A(a5),d1
00075E70 4EBA 0000                  		jsr	sub_72722(pc)
00075E74                            
00075E74                            loc_71EFE:
00075E74 6000 FD44                  		bra.w	loc_71C44
00075E78                            
00075E78                            ; ---------------------------------------------------------------------------
00075E78                            ; Subroutine to	play a sound or	music track
00075E78                            ; ---------------------------------------------------------------------------
00075E78                            
00075E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E78                            
00075E78                            
00075E78                            Sound_Play:				; XREF: sub_71B4C
00075E78 2079 0007 58D6             		movea.l	(Go_SoundTypes).l,a0
00075E7E 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075E82 1616                       		move.b	0(a6),d3
00075E84 7802                       		moveq	#2,d4
00075E86                            
00075E86                            loc_71F12:
00075E86 1011                       		move.b	(a1),d0		; move track number to d0
00075E88 1200                       		move.b	d0,d1
00075E8A 4219                       		clr.b	(a1)+
00075E8C 0400 0081                  		subi.b	#$81,d0
00075E90 6500                       		bcs.s	loc_71F3E
00075E92 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075E98 6700                       		beq.s	loc_71F2C
00075E9A 1D41 000A                  		move.b	d1,$A(a6)
00075E9E 6000                       		bra.s	loc_71F3E
00075EA0                            ; ===========================================================================
00075EA0                            
00075EA0                            loc_71F2C:
00075EA0 0240 007F                  		andi.w	#$7F,d0
00075EA4 1430 0000                  		move.b	(a0,d0.w),d2
00075EA8 B403                       		cmp.b	d3,d2
00075EAA 6500                       		bcs.s	loc_71F3E
00075EAC 1602                       		move.b	d2,d3
00075EAE 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075EB2                            
00075EB2                            loc_71F3E:
00075EB2 51CC FFD2                  		dbf	d4,loc_71F12
00075EB6                            
00075EB6 4A03                       		tst.b	d3
00075EB8 6B00                       		bmi.s	locret_71F4A
00075EBA 1C83                       		move.b	d3,0(a6)
00075EBC                            
00075EBC                            locret_71F4A:
00075EBC 4E75                       		rts	
00075EBE                            ; End of function Sound_Play
00075EBE                            
00075EBE                            
00075EBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075EBE                            
00075EBE                            
00075EBE                            Sound_ChkValue:				; XREF: sub_71B4C
00075EBE 7E00                       		moveq	#0,d7
00075EC0 1E2E 0009                  		move.b	9(a6),d7
00075EC4 6700 0000                  		beq.w	Sound_E4
00075EC8 6A00                       		bpl.s	locret_71F8C
00075ECA 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075ED0 0C07 009F                  		cmpi.b	#$9F,d7
00075ED4 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075ED8 0C07 00A0                  		cmpi.b	#$A0,d7
00075EDC 6500 0000                  		bcs.w	locret_71F8C
00075EE0 0C07 00CF                  		cmpi.b	#$CF,d7
00075EE4 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075EE8 0C07 00D0                  		cmpi.b	#$D0,d7
00075EEC 6500 0000                  		bcs.w	locret_71F8C
00075EF0 0C07 00E0                  		cmpi.b	#$E0,d7
00075EF4 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075EF8 0C07 00E5                  		cmpi.b	#$E5,d7
00075EFC 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075EFE                            
00075EFE                            locret_71F8C:
00075EFE 4E75                       		rts	
00075F00                            ; ===========================================================================
00075F00                            
00075F00                            Sound_E0toE5				; XREF: Sound_ChkValue
00075F00 0407 00E0                  		subi.b	#$E0,d7
00075F04 E54F                       		lsl.w	#2,d7
00075F06 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075F0A                            ; ===========================================================================
00075F0A                            
00075F0A                            Sound_ExIndex:
00075F0A 6000 0000                  		bra.w	Sound_E0
00075F0E                            ; ===========================================================================
00075F0E 6000 0000                  		bra.w	Sound_E1
00075F12                            ; ===========================================================================
00075F12 6000 0000                  		bra.w	Sound_E2
00075F16                            ; ===========================================================================
00075F16 6000 0000                  		bra.w	Sound_E3
00075F1A                            ; ===========================================================================
00075F1A 6000 0000                  		bra.w	Sound_E4
00075F1E                            ; ===========================================================================
00075F1E 6000 0000                  		bra.w	Sound_E5
00075F22                            ; ===========================================================================
00075F22                            ; ---------------------------------------------------------------------------
00075F22                            ; Play "Say-gaa" PCM sound
00075F22                            ; ---------------------------------------------------------------------------
00075F22                            
00075F22                            Sound_E1:				  
00075F22 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075F28 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075F2E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075F36                            PlayPCM_Loop:	  
00075F36 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075F3C 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075F40 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075F44 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075F46 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075F48 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075F4C 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075F52 4EB8 142A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00075F56 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075F5C 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075F5E 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075F60                            return_PlayPCM: 
00075F60 584F                       		addq.w	#4,sp 
00075F62 4E75                       		rts
00075F64                            		
00075F64                            ; ---------------------------------------------------------------------------
00075F64                            ; Play you are an idiot pcm sound
00075F64                            ; since the sfx already crashes the game forever load it here :V
00075F64                            ; ---------------------------------------------------------------------------
00075F64                            
00075F64                            Sound_E5: 
00075F64 4EB8 14FA                  		jsr	ClearScreen
00075F68                            		;control port on a5
00075F68 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075F6E 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00075F74 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075F78 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075F7C 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075F80                            		
00075F80 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00075F84                            		
00075F84 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075F8A 41F9 0002 4296             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075F90 4EB8 1676                  		jsr	NemDec
00075F94 43F9 00FF 0000             		lea	($FF0000).l,a1
00075F9A 41F9 0002 4238             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075FA0 303C 0000                  		move.w	#0,d0
00075FA4 4EB8 1954                  		jsr	EniDec
00075FA8 43F9 00FF 0000             		lea	($FF0000).l,a1
00075FAE 203C 4304 0003             		move.l	#$43040003,d0
00075FB4 7223                       		moveq	#35,d1
00075FB6 740D                       		moveq	#13,d2
00075FB8 4EB8 1656                  		jsr	ShowVDPGraphics
00075FBC 7014                       		moveq	#20,d0
00075FBE 4EB8 2318                  		jsr	PalLoad2	; load pallet
00075FC2                            		
00075FC2                            Sound_E5_StartPCM:
00075FC2 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075FC8 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075FCE 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075FD6                            PlayPCM_LoopE5:	  
00075FD6                            
00075FD6 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075FDC                            		
00075FDC 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075FE0                            		
00075FE0 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075FE4 0200 000F                  		andi.b	#$F,d0
00075FE8 6700                       		beq.s	SfxE5SwapPalette
00075FEA                            		
00075FEA 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075FEE 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075FF2 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075FF4 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075FF6 60DE                       		bra.s	PlayPCM_LoopE5
00075FF8                            		
00075FF8                            SfxE5SwapPalette:
00075FF8                            		
00075FF8 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075FFE                            		
00075FFE                            		
00075FFE 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00076004 6700                       		beq.s	@not_black
00076006 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007600C 6000                       		bra.s	@merge
0007600E                            	@not_black:
0007600E 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00076014                            	@merge:
00076014 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00076018 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007601C 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00076022 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00076026                            		
00076026 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007602A 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007602E 60A6                       		bra.s	PlayPCM_LoopE5
00076030                            		
00076030                            ; ===========================================================================
00076030                            ; ---------------------------------------------------------------------------
00076030                            ; Play music track $81-$9F
00076030                            ; ---------------------------------------------------------------------------
00076030                            
00076030                            Sound_81to9F:				; XREF: Sound_ChkValue
00076030 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00076034 6600                       		bne.s	loc_72024	; if not, branch
00076036 4A2E 0027                  		tst.b	$27(a6)
0007603A 6600 0000                  		bne.w	loc_721B6
0007603E 4BEE 0040                  		lea	$40(a6),a5
00076042 7009                       		moveq	#9,d0
00076044                            
00076044                            loc_71FE6:
00076044 0895 0002                  		bclr	#2,(a5)
00076048 DAFC 0030                  		adda.w	#$30,a5
0007604C 51C8 FFF6                  		dbf	d0,loc_71FE6
00076050                            
00076050 4BEE 0220                  		lea	$220(a6),a5
00076054 7005                       		moveq	#5,d0
00076056                            
00076056                            loc_71FF8:
00076056 0895 0007                  		bclr	#7,(a5)
0007605A DAFC 0030                  		adda.w	#$30,a5
0007605E 51C8 FFF6                  		dbf	d0,loc_71FF8
00076062 4216                       		clr.b	0(a6)
00076064 204E                       		movea.l	a6,a0
00076066 43EE 03A0                  		lea	$3A0(a6),a1
0007606A 303C 0087                  		move.w	#$87,d0
0007606E                            
0007606E                            loc_72012:
0007606E 22D8                       		move.l	(a0)+,(a1)+
00076070 51C8 FFFC                  		dbf	d0,loc_72012
00076074                            
00076074 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007607A 4216                       		clr.b	0(a6)
0007607C 6000                       		bra.s	loc_7202C
0007607E                            ; ===========================================================================
0007607E                            
0007607E                            loc_72024:
0007607E 422E 0027                  		clr.b	$27(a6)
00076082 422E 0026                  		clr.b	$26(a6)
00076086                            
00076086                            loc_7202C:
00076086 4EBA 0000                  		jsr	sub_725CA(pc)
0007608A 2879 0007 58E6             		movea.l	(off_719A0).l,a4
00076090 0407 0081                  		subi.b	#$81,d7
00076094 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007609A 2879 0007 58DE             		movea.l	(Go_MusicIndex).l,a4
000760A0 E54F                       		lsl.w	#2,d7
000760A2 2874 7000                  		movea.l	(a4,d7.w),a4
000760A6 7000                       		moveq	#0,d0
000760A8 3014                       		move.w	(a4),d0
000760AA D08C                       		add.l	a4,d0
000760AC 2D40 0018                  		move.l	d0,$18(a6)
000760B0 102C 0005                  		move.b	5(a4),d0
000760B4 1D40 0028                  		move.b	d0,$28(a6)
000760B8 4A2E 002A                  		tst.b	$2A(a6)
000760BC 6700                       		beq.s	loc_72068
000760BE 102E 0029                  		move.b	$29(a6),d0
000760C2                            
000760C2                            loc_72068:
000760C2 1D40 0002                  		move.b	d0,2(a6)
000760C6 1D40 0001                  		move.b	d0,1(a6)
000760CA 7200                       		moveq	#0,d1
000760CC 264C                       		movea.l	a4,a3
000760CE 5C4C                       		addq.w	#6,a4
000760D0 7E00                       		moveq	#0,d7
000760D2 1E2B 0002                  		move.b	2(a3),d7
000760D6 6700 0000                  		beq.w	loc_72114
000760DA 5307                       		subq.b	#1,d7
000760DC 123C 00C0                  		move.b	#-$40,d1
000760E0 182B 0004                  		move.b	4(a3),d4
000760E4 7C30                       		moveq	#$30,d6
000760E6 1A3C 0001                  		move.b	#1,d5
000760EA 43EE 0040                  		lea	$40(a6),a1
000760EE 45FA 0000                  		lea	byte_721BA(pc),a2
000760F2                            
000760F2                            loc_72098:
000760F2 08D1 0007                  		bset	#7,(a1)
000760F6 135A 0001                  		move.b	(a2)+,1(a1)
000760FA 1344 0002                  		move.b	d4,2(a1)
000760FE 1346 000D                  		move.b	d6,$D(a1)
00076102 1341 000A                  		move.b	d1,$A(a1)
00076106 1345 000E                  		move.b	d5,$E(a1)
0007610A 7000                       		moveq	#0,d0
0007610C 301C                       		move.w	(a4)+,d0
0007610E D08B                       		add.l	a3,d0
00076110 2340 0004                  		move.l	d0,4(a1)
00076114 335C 0008                  		move.w	(a4)+,8(a1)
00076118 D2C6                       		adda.w	d6,a1
0007611A 51CF FFD6                  		dbf	d7,loc_72098
0007611E 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00076124 6600                       		bne.s	loc_720D8
00076126 702B                       		moveq	#$2B,d0
00076128 7200                       		moveq	#0,d1
0007612A 4EBA 0000                  		jsr	sub_7272E(pc)
0007612E 6000 0000                  		bra.w	loc_72114
00076132                            ; ===========================================================================
00076132                            
00076132                            loc_720D8:
00076132 7028                       		moveq	#$28,d0
00076134 7206                       		moveq	#6,d1
00076136 4EBA 0000                  		jsr	sub_7272E(pc)
0007613A 103C 0042                  		move.b	#$42,d0
0007613E 727F                       		moveq	#$7F,d1
00076140 4EBA 0000                  		jsr	sub_72764(pc)
00076144 103C 004A                  		move.b	#$4A,d0
00076148 727F                       		moveq	#$7F,d1
0007614A 4EBA 0000                  		jsr	sub_72764(pc)
0007614E 103C 0046                  		move.b	#$46,d0
00076152 727F                       		moveq	#$7F,d1
00076154 4EBA 0000                  		jsr	sub_72764(pc)
00076158 103C 004E                  		move.b	#$4E,d0
0007615C 727F                       		moveq	#$7F,d1
0007615E 4EBA 0000                  		jsr	sub_72764(pc)
00076162 103C 00B6                  		move.b	#-$4A,d0
00076166 123C 00C0                  		move.b	#-$40,d1
0007616A 4EBA 0000                  		jsr	sub_72764(pc)
0007616E                            
0007616E                            loc_72114:
0007616E 7E00                       		moveq	#0,d7
00076170 1E2B 0003                  		move.b	3(a3),d7
00076174 6700                       		beq.s	loc_72154
00076176 5307                       		subq.b	#1,d7
00076178 43EE 0190                  		lea	$190(a6),a1
0007617C 45FA 0000                  		lea	byte_721C2(pc),a2
00076180                            
00076180                            loc_72126:
00076180 08D1 0007                  		bset	#7,(a1)
00076184 135A 0001                  		move.b	(a2)+,1(a1)
00076188 1344 0002                  		move.b	d4,2(a1)
0007618C 1346 000D                  		move.b	d6,$D(a1)
00076190 1345 000E                  		move.b	d5,$E(a1)
00076194 7000                       		moveq	#0,d0
00076196 301C                       		move.w	(a4)+,d0
00076198 D08B                       		add.l	a3,d0
0007619A 2340 0004                  		move.l	d0,4(a1)
0007619E 335C 0008                  		move.w	(a4)+,8(a1)
000761A2 101C                       		move.b	(a4)+,d0
000761A4 135C 000B                  		move.b	(a4)+,$B(a1)
000761A8 D2C6                       		adda.w	d6,a1
000761AA 51CF FFD4                  		dbf	d7,loc_72126
000761AE                            
000761AE                            loc_72154:
000761AE 43EE 0220                  		lea	$220(a6),a1
000761B2 7E05                       		moveq	#5,d7
000761B4                            
000761B4                            loc_7215A:
000761B4 4A11                       		tst.b	(a1)
000761B6 6A00 0000                  		bpl.w	loc_7217C
000761BA 7000                       		moveq	#0,d0
000761BC 1029 0001                  		move.b	1(a1),d0
000761C0 6B00                       		bmi.s	loc_7216E
000761C2 5500                       		subq.b	#2,d0
000761C4 E508                       		lsl.b	#2,d0
000761C6 6000                       		bra.s	loc_72170
000761C8                            ; ===========================================================================
000761C8                            
000761C8                            loc_7216E:
000761C8 E608                       		lsr.b	#3,d0
000761CA                            
000761CA                            loc_72170:
000761CA 41FA 0000                  		lea	dword_722CC(pc),a0
000761CE 2070 0000                  		movea.l	(a0,d0.w),a0
000761D2 08D0 0002                  		bset	#2,(a0)
000761D6                            
000761D6                            loc_7217C:
000761D6 D2C6                       		adda.w	d6,a1
000761D8 51CF FFDA                  		dbf	d7,loc_7215A
000761DC                            
000761DC 4A6E 0340                  		tst.w	$340(a6)
000761E0 6A00                       		bpl.s	loc_7218E
000761E2 08EE 0002 0100             		bset	#2,$100(a6)
000761E8                            
000761E8                            loc_7218E:
000761E8 4A6E 0370                  		tst.w	$370(a6)
000761EC 6A00                       		bpl.s	loc_7219A
000761EE 08EE 0002 01F0             		bset	#2,$1F0(a6)
000761F4                            
000761F4                            loc_7219A:
000761F4 4BEE 0070                  		lea	$70(a6),a5
000761F8 7805                       		moveq	#5,d4
000761FA                            
000761FA                            loc_721A0:
000761FA 4EBA 0000                  		jsr	sub_726FE(pc)
000761FE DAC6                       		adda.w	d6,a5
00076200 51CC FFF8                  		dbf	d4,loc_721A0
00076204 7802                       		moveq	#2,d4
00076206                            
00076206                            loc_721AC:
00076206 4EBA 0000                  		jsr	sub_729A0(pc)
0007620A DAC6                       		adda.w	d6,a5
0007620C 51CC FFF8                  		dbf	d4,loc_721AC
00076210                            
00076210                            loc_721B6:
00076210 584F                       		addq.w	#4,sp
00076212 4E75                       		rts	
00076214                            ; ===========================================================================
00076214 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007621C                            		even
0007621C 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00076220                            		even
00076220                            ; ===========================================================================
00076220                            ; ---------------------------------------------------------------------------
00076220                            ; Play normal sound effect
00076220                            ; ---------------------------------------------------------------------------
00076220                            
00076220                            Sound_A0toCF:				; XREF: Sound_ChkValue
00076220 4A2E 0027                  		tst.b	$27(a6)
00076224 6600 0000                  		bne.w	loc_722C6
00076228 4A2E 0004                  		tst.b	4(a6)
0007622C 6600 0000                  		bne.w	loc_722C6
00076230 4A2E 0024                  		tst.b	$24(a6)
00076234 6600 0000                  		bne.w	loc_722C6
00076238 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007623C 6600                       		bne.s	Sound_notB5	; if not, branch
0007623E 4A2E 002B                  		tst.b	$2B(a6)
00076242 6600                       		bne.s	loc_721EE
00076244 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00076248                            
00076248                            loc_721EE:
00076248 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007624E                            
0007624E                            Sound_notB5:
0007624E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00076252 6600                       		bne.s	Sound_notA7	; if not, branch
00076254 4A2E 002C                  		tst.b	$2C(a6)
00076258 6600 0000                  		bne.w	locret_722C4
0007625C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00076262                            
00076262                            Sound_notA7:
00076262 2079 0007 58E2             		movea.l	(Go_SoundIndex).l,a0
00076268 0407 00A0                  		subi.b	#$A0,d7
0007626C E54F                       		lsl.w	#2,d7
0007626E 2670 7000                  		movea.l	(a0,d7.w),a3
00076272 224B                       		movea.l	a3,a1
00076274 7200                       		moveq	#0,d1
00076276 3219                       		move.w	(a1)+,d1
00076278 D28B                       		add.l	a3,d1
0007627A 1A19                       		move.b	(a1)+,d5
0007627C 1E19                       		move.b	(a1)+,d7
0007627E 5307                       		subq.b	#1,d7
00076280 7C30                       		moveq	#$30,d6
00076282                            
00076282                            loc_72228:
00076282 7600                       		moveq	#0,d3
00076284 1629 0001                  		move.b	1(a1),d3
00076288 1803                       		move.b	d3,d4
0007628A 6B00                       		bmi.s	loc_72244
0007628C 5543                       		subq.w	#2,d3
0007628E E54B                       		lsl.w	#2,d3
00076290 4BFA 0000                  		lea	dword_722CC(pc),a5
00076294 2A75 3000                  		movea.l	(a5,d3.w),a5
00076298 08D5 0002                  		bset	#2,(a5)
0007629C 6000                       		bra.s	loc_7226E
0007629E                            ; ===========================================================================
0007629E                            
0007629E                            loc_72244:
0007629E E64B                       		lsr.w	#3,d3
000762A0 4BFA 0000                  		lea	dword_722CC(pc),a5
000762A4 2A75 3000                  		movea.l	(a5,d3.w),a5
000762A8 08D5 0002                  		bset	#2,(a5)
000762AC 0C04 00C0                  		cmpi.b	#$C0,d4
000762B0 6600                       		bne.s	loc_7226E
000762B2 1004                       		move.b	d4,d0
000762B4 0000 001F                  		ori.b	#$1F,d0
000762B8 13C0 00C0 0011             		move.b	d0,($C00011).l
000762BE 0840 0005                  		bchg	#5,d0
000762C2 13C0 00C0 0011             		move.b	d0,($C00011).l
000762C8                            
000762C8                            loc_7226E:
000762C8 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000762CC 244D                       		movea.l	a5,a2
000762CE 700B                       		moveq	#$B,d0
000762D0                            
000762D0                            loc_72276:
000762D0 429A                       		clr.l	(a2)+
000762D2 51C8 FFFC                  		dbf	d0,loc_72276
000762D6                            
000762D6 3A99                       		move.w	(a1)+,(a5)
000762D8 1B45 0002                  		move.b	d5,2(a5)
000762DC 7000                       		moveq	#0,d0
000762DE 3019                       		move.w	(a1)+,d0
000762E0 D08B                       		add.l	a3,d0
000762E2 2B40 0004                  		move.l	d0,4(a5)
000762E6 3B59 0008                  		move.w	(a1)+,8(a5)
000762EA 1B7C 0001 000E             		move.b	#1,$E(a5)
000762F0 1B46 000D                  		move.b	d6,$D(a5)
000762F4 4A04                       		tst.b	d4
000762F6 6B00                       		bmi.s	loc_722A8
000762F8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000762FE 2B41 0020                  		move.l	d1,$20(a5)
00076302                            
00076302                            loc_722A8:
00076302 51CF FF7E                  		dbf	d7,loc_72228
00076306                            
00076306 4A2E 0250                  		tst.b	$250(a6)
0007630A 6A00                       		bpl.s	loc_722B8
0007630C 08EE 0002 0340             		bset	#2,$340(a6)
00076312                            
00076312                            loc_722B8:
00076312 4A2E 0310                  		tst.b	$310(a6)
00076316 6A00                       		bpl.s	locret_722C4
00076318 08EE 0002 0370             		bset	#2,$370(a6)
0007631E                            
0007631E                            locret_722C4:
0007631E 4E75                       		rts	
00076320                            ; ===========================================================================
00076320                            
00076320                            loc_722C6:
00076320 4216                       		clr.b	0(a6)
00076322 4E75                       		rts	
00076324                            ; ===========================================================================
00076324 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00076328 0000 0000                  		dc.l 0
0007632C 00FF F100                  		dc.l $FFF100
00076330 00FF F130                  		dc.l $FFF130
00076334 00FF F190                  		dc.l $FFF190
00076338 00FF F1C0                  		dc.l $FFF1C0
0007633C 00FF F1F0                  		dc.l $FFF1F0
00076340 00FF F1F0                  		dc.l $FFF1F0
00076344 00FF F220                  dword_722EC:	dc.l $FFF220
00076348 0000 0000                  		dc.l 0
0007634C 00FF F250                  		dc.l $FFF250
00076350 00FF F280                  		dc.l $FFF280
00076354 00FF F2B0                  		dc.l $FFF2B0
00076358 00FF F2E0                  		dc.l $FFF2E0
0007635C 00FF F310                  		dc.l $FFF310
00076360 00FF F310                  		dc.l $FFF310
00076364                            ; ===========================================================================
00076364                            ; ---------------------------------------------------------------------------
00076364                            ; Play GHZ waterfall sound
00076364                            ; ---------------------------------------------------------------------------
00076364                            
00076364                            Sound_D0toDF:				; XREF: Sound_ChkValue
00076364 4A2E 0027                  		tst.b	$27(a6)
00076368 6600 0000                  		bne.w	locret_723C6
0007636C 4A2E 0004                  		tst.b	4(a6)
00076370 6600 0000                  		bne.w	locret_723C6
00076374 4A2E 0024                  		tst.b	$24(a6)
00076378 6600 0000                  		bne.w	locret_723C6
0007637C 2079 0007 58DA             		movea.l	(Go_SoundD0).l,a0
00076382 0407 00D0                  		subi.b	#$D0,d7
00076386 E54F                       		lsl.w	#2,d7
00076388 2670 7000                  		movea.l	(a0,d7.w),a3
0007638C 224B                       		movea.l	a3,a1
0007638E 7000                       		moveq	#0,d0
00076390 3019                       		move.w	(a1)+,d0
00076392 D08B                       		add.l	a3,d0
00076394 2D40 0020                  		move.l	d0,$20(a6)
00076398 1A19                       		move.b	(a1)+,d5
0007639A 1E19                       		move.b	(a1)+,d7
0007639C 5307                       		subq.b	#1,d7
0007639E 7C30                       		moveq	#$30,d6
000763A0                            
000763A0                            loc_72348:
000763A0 1829 0001                  		move.b	1(a1),d4
000763A4 6B00                       		bmi.s	loc_7235A
000763A6 08EE 0002 0100             		bset	#2,$100(a6)
000763AC 4BEE 0340                  		lea	$340(a6),a5
000763B0 6000                       		bra.s	loc_72364
000763B2                            ; ===========================================================================
000763B2                            
000763B2                            loc_7235A:
000763B2 08EE 0002 01F0             		bset	#2,$1F0(a6)
000763B8 4BEE 0370                  		lea	$370(a6),a5
000763BC                            
000763BC                            loc_72364:
000763BC 244D                       		movea.l	a5,a2
000763BE 700B                       		moveq	#$B,d0
000763C0                            
000763C0                            loc_72368:
000763C0 429A                       		clr.l	(a2)+
000763C2 51C8 FFFC                  		dbf	d0,loc_72368
000763C6                            
000763C6 3A99                       		move.w	(a1)+,(a5)
000763C8 1B45 0002                  		move.b	d5,2(a5)
000763CC 7000                       		moveq	#0,d0
000763CE 3019                       		move.w	(a1)+,d0
000763D0 D08B                       		add.l	a3,d0
000763D2 2B40 0004                  		move.l	d0,4(a5)
000763D6 3B59 0008                  		move.w	(a1)+,8(a5)
000763DA 1B7C 0001 000E             		move.b	#1,$E(a5)
000763E0 1B46 000D                  		move.b	d6,$D(a5)
000763E4 4A04                       		tst.b	d4
000763E6 6B00                       		bmi.s	loc_72396
000763E8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000763EE                            
000763EE                            loc_72396:
000763EE 51CF FFB0                  		dbf	d7,loc_72348
000763F2                            
000763F2 4A2E 0250                  		tst.b	$250(a6)
000763F6 6A00                       		bpl.s	loc_723A6
000763F8 08EE 0002 0340             		bset	#2,$340(a6)
000763FE                            
000763FE                            loc_723A6:
000763FE 4A2E 0310                  		tst.b	$310(a6)
00076402 6A00                       		bpl.s	locret_723C6
00076404 08EE 0002 0370             		bset	#2,$370(a6)
0007640A 0004 001F                  		ori.b	#$1F,d4
0007640E 13C4 00C0 0011             		move.b	d4,($C00011).l
00076414 0844 0005                  		bchg	#5,d4
00076418 13C4 00C0 0011             		move.b	d4,($C00011).l
0007641E                            
0007641E                            locret_723C6:
0007641E 4E75                       		rts	
00076420                            ; End of function Sound_ChkValue
00076420                            
00076420                            ; ===========================================================================
00076420 00FF F100                  		dc.l $FFF100
00076424 00FF F1F0                  		dc.l $FFF1F0
00076428 00FF F250                  		dc.l $FFF250
0007642C 00FF F310                  		dc.l $FFF310
00076430 00FF F340                  		dc.l $FFF340
00076434 00FF F370                  		dc.l $FFF370
00076438                            
00076438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076438                            
00076438                            
00076438                            Snd_FadeOut1:				; XREF: Sound_E0
00076438 4216                       		clr.b	0(a6)
0007643A 4BEE 0220                  		lea	$220(a6),a5
0007643E 7E05                       		moveq	#5,d7
00076440                            
00076440                            loc_723EA:
00076440 4A15                       		tst.b	(a5)
00076442 6A00 0000                  		bpl.w	loc_72472
00076446 0895 0007                  		bclr	#7,(a5)
0007644A 7600                       		moveq	#0,d3
0007644C 162D 0001                  		move.b	1(a5),d3
00076450 6B00                       		bmi.s	loc_7243C
00076452 4EBA 0000                  		jsr	sub_726FE(pc)
00076456 0C03 0004                  		cmpi.b	#4,d3
0007645A 6600                       		bne.s	loc_72416
0007645C 4A2E 0340                  		tst.b	$340(a6)
00076460 6A00                       		bpl.s	loc_72416
00076462 4BEE 0340                  		lea	$340(a6),a5
00076466 226E 0020                  		movea.l	$20(a6),a1
0007646A 6000                       		bra.s	loc_72428
0007646C                            ; ===========================================================================
0007646C                            
0007646C                            loc_72416:
0007646C 5503                       		subq.b	#2,d3
0007646E E50B                       		lsl.b	#2,d3
00076470 41FA FEB2                  		lea	dword_722CC(pc),a0
00076474 264D                       		movea.l	a5,a3
00076476 2A70 3000                  		movea.l	(a0,d3.w),a5
0007647A 226E 0018                  		movea.l	$18(a6),a1
0007647E                            
0007647E                            loc_72428:
0007647E 0895 0002                  		bclr	#2,(a5)
00076482 08D5 0001                  		bset	#1,(a5)
00076486 102D 000B                  		move.b	$B(a5),d0
0007648A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007648E 2A4B                       		movea.l	a3,a5
00076490 6000                       		bra.s	loc_72472
00076492                            ; ===========================================================================
00076492                            
00076492                            loc_7243C:
00076492 4EBA 0000                  		jsr	sub_729A0(pc)
00076496 41EE 0370                  		lea	$370(a6),a0
0007649A 0C03 00E0                  		cmpi.b	#$E0,d3
0007649E 6700                       		beq.s	loc_7245A
000764A0 0C03 00C0                  		cmpi.b	#$C0,d3
000764A4 6700                       		beq.s	loc_7245A
000764A6 E60B                       		lsr.b	#3,d3
000764A8 41FA FE7A                  		lea	dword_722CC(pc),a0
000764AC 2070 3000                  		movea.l	(a0,d3.w),a0
000764B0                            
000764B0                            loc_7245A:
000764B0 0890 0002                  		bclr	#2,(a0)
000764B4 08D0 0001                  		bset	#1,(a0)
000764B8 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000764BE 6600                       		bne.s	loc_72472
000764C0 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000764C8                            
000764C8                            loc_72472:
000764C8 DAFC 0030                  		adda.w	#$30,a5
000764CC 51CF FF72                  		dbf	d7,loc_723EA
000764D0                            
000764D0 4E75                       		rts	
000764D2                            ; End of function Snd_FadeOut1
000764D2                            
000764D2                            
000764D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764D2                            
000764D2                            
000764D2                            Snd_FadeOut2:				; XREF: Sound_E0
000764D2 4BEE 0340                  		lea	$340(a6),a5
000764D6 4A15                       		tst.b	(a5)
000764D8 6A00                       		bpl.s	loc_724AE
000764DA 0895 0007                  		bclr	#7,(a5)
000764DE 0815 0002                  		btst	#2,(a5)
000764E2 6600                       		bne.s	loc_724AE
000764E4 4EBA 0000                  		jsr	loc_7270A(pc)
000764E8 4BEE 0100                  		lea	$100(a6),a5
000764EC 0895 0002                  		bclr	#2,(a5)
000764F0 08D5 0001                  		bset	#1,(a5)
000764F4 4A15                       		tst.b	(a5)
000764F6 6A00                       		bpl.s	loc_724AE
000764F8 226E 0018                  		movea.l	$18(a6),a1
000764FC 102D 000B                  		move.b	$B(a5),d0
00076500 4EBA 0000                  		jsr	sub_72C4E(pc)
00076504                            
00076504                            loc_724AE:
00076504 4BEE 0370                  		lea	$370(a6),a5
00076508 4A15                       		tst.b	(a5)
0007650A 6A00                       		bpl.s	locret_724E4
0007650C 0895 0007                  		bclr	#7,(a5)
00076510 0815 0002                  		btst	#2,(a5)
00076514 6600                       		bne.s	locret_724E4
00076516 4EBA 0000                  		jsr	loc_729A6(pc)
0007651A 4BEE 01F0                  		lea	$1F0(a6),a5
0007651E 0895 0002                  		bclr	#2,(a5)
00076522 08D5 0001                  		bset	#1,(a5)
00076526 4A15                       		tst.b	(a5)
00076528 6A00                       		bpl.s	locret_724E4
0007652A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00076530 6600                       		bne.s	locret_724E4
00076532 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007653A                            
0007653A                            locret_724E4:
0007653A 4E75                       		rts	
0007653C                            ; End of function Snd_FadeOut2
0007653C                            
0007653C                            ; ===========================================================================
0007653C                            ; ---------------------------------------------------------------------------
0007653C                            ; Fade out music
0007653C                            ; ---------------------------------------------------------------------------
0007653C                            
0007653C                            Sound_E0:				; XREF: Sound_ExIndex
0007653C 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00076540 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00076544 1D7C 0003 0006             		move.b	#3,6(a6)
0007654A 1D7C 0028 0004             		move.b	#$28,4(a6)
00076550 422E 0040                  		clr.b	$40(a6)
00076554 422E 002A                  		clr.b	$2A(a6)
00076558 4E75                       		rts	
0007655A                            
0007655A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007655A                            
0007655A                            
0007655A                            sub_72504:				; XREF: sub_71B4C
0007655A 102E 0006                  		move.b	6(a6),d0
0007655E 6700                       		beq.s	loc_72510
00076560 532E 0006                  		subq.b	#1,6(a6)
00076564 4E75                       		rts	
00076566                            ; ===========================================================================
00076566                            
00076566                            loc_72510:
00076566 532E 0004                  		subq.b	#1,4(a6)
0007656A 6700 0000                  		beq.w	Sound_E4
0007656E 1D7C 0003 0006             		move.b	#3,6(a6)
00076574 4BEE 0070                  		lea	$70(a6),a5
00076578 7E05                       		moveq	#5,d7
0007657A                            
0007657A                            loc_72524:
0007657A 4A15                       		tst.b	(a5)
0007657C 6A00                       		bpl.s	loc_72538
0007657E 522D 0009                  		addq.b	#1,9(a5)
00076582 6A00                       		bpl.s	loc_72534
00076584 0895 0007                  		bclr	#7,(a5)
00076588 6000                       		bra.s	loc_72538
0007658A                            ; ===========================================================================
0007658A                            
0007658A                            loc_72534:
0007658A 4EBA 0000                  		jsr	sub_72CB4(pc)
0007658E                            
0007658E                            loc_72538:
0007658E DAFC 0030                  		adda.w	#$30,a5
00076592 51CF FFE6                  		dbf	d7,loc_72524
00076596                            
00076596 7E02                       		moveq	#2,d7
00076598                            
00076598                            loc_72542:
00076598 4A15                       		tst.b	(a5)
0007659A 6A00                       		bpl.s	loc_72560
0007659C 522D 0009                  		addq.b	#1,9(a5)
000765A0 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000765A6 6500                       		bcs.s	loc_72558
000765A8 0895 0007                  		bclr	#7,(a5)
000765AC 6000                       		bra.s	loc_72560
000765AE                            ; ===========================================================================
000765AE                            
000765AE                            loc_72558:
000765AE 1C2D 0009                  		move.b	9(a5),d6
000765B2 4EBA 0000                  		jsr	sub_7296A(pc)
000765B6                            
000765B6                            loc_72560:
000765B6 DAFC 0030                  		adda.w	#$30,a5
000765BA 51CF FFDC                  		dbf	d7,loc_72542
000765BE                            
000765BE 4E75                       		rts	
000765C0                            ; End of function sub_72504
000765C0                            
000765C0                            
000765C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000765C0                            
000765C0                            
000765C0                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000765C0 7602                       		moveq	#2,d3
000765C2 7028                       		moveq	#$28,d0
000765C4                            
000765C4                            loc_7256E:
000765C4 1203                       		move.b	d3,d1
000765C6 4EBA 0000                  		jsr	sub_7272E(pc)
000765CA 5801                       		addq.b	#4,d1
000765CC 4EBA 0000                  		jsr	sub_7272E(pc)
000765D0 51CB FFF2                  		dbf	d3,loc_7256E
000765D4                            
000765D4 7040                       		moveq	#$40,d0
000765D6 727F                       		moveq	#$7F,d1
000765D8 7802                       		moveq	#2,d4
000765DA                            
000765DA                            loc_72584:
000765DA 7603                       		moveq	#3,d3
000765DC                            
000765DC                            loc_72586:
000765DC 4EBA 0000                  		jsr	sub_7272E(pc)
000765E0 4EBA 0000                  		jsr	sub_72764(pc)
000765E4 5840                       		addq.w	#4,d0
000765E6 51CB FFF4                  		dbf	d3,loc_72586
000765EA                            
000765EA 0400 000F                  		subi.b	#$F,d0
000765EE 51CC FFEA                  		dbf	d4,loc_72584
000765F2                            
000765F2 4E75                       		rts	
000765F4                            ; End of function sub_7256A
000765F4                            
000765F4                            ; ===========================================================================
000765F4                            ; ---------------------------------------------------------------------------
000765F4                            ; Stop music
000765F4                            ; ---------------------------------------------------------------------------
000765F4                            
000765F4                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000765F4 702B                       		moveq	#$2B,d0
000765F6 123C 0080                  		move.b	#$80,d1
000765FA 4EBA 0000                  		jsr	sub_7272E(pc)
000765FE 7027                       		moveq	#$27,d0
00076600 7200                       		moveq	#0,d1
00076602 4EBA 0000                  		jsr	sub_7272E(pc)
00076606 204E                       		movea.l	a6,a0
00076608 303C 00E3                  		move.w	#$E3,d0
0007660C                            
0007660C                            loc_725B6:
0007660C 4298                       		clr.l	(a0)+
0007660E 51C8 FFFC                  		dbf	d0,loc_725B6
00076612                            
00076612 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076618 4EBA FFA6                  		jsr	sub_7256A(pc)
0007661C 6000 0000                  		bra.w	sub_729B6
00076620                            
00076620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076620                            
00076620                            
00076620                            sub_725CA:				; XREF: Sound_ChkValue
00076620 204E                       		movea.l	a6,a0
00076622 1216                       		move.b	0(a6),d1
00076624 142E 0027                  		move.b	$27(a6),d2
00076628 162E 002A                  		move.b	$2A(a6),d3
0007662C 182E 0026                  		move.b	$26(a6),d4
00076630 3A2E 000A                  		move.w	$A(a6),d5
00076634 303C 0087                  		move.w	#$87,d0
00076638                            
00076638                            loc_725E4:
00076638 4298                       		clr.l	(a0)+
0007663A 51C8 FFFC                  		dbf	d0,loc_725E4
0007663E                            
0007663E 1C81                       		move.b	d1,0(a6)
00076640 1D42 0027                  		move.b	d2,$27(a6)
00076644 1D43 002A                  		move.b	d3,$2A(a6)
00076648 1D44 0026                  		move.b	d4,$26(a6)
0007664C 3D45 000A                  		move.w	d5,$A(a6)
00076650 1D7C 0080 0009             		move.b	#$80,9(a6)
00076656 4EBA FF68                  		jsr	sub_7256A(pc)
0007665A 6000 0000                  		bra.w	sub_729B6
0007665E                            ; End of function sub_725CA
0007665E                            
0007665E                            
0007665E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007665E                            
0007665E                            
0007665E                            sub_7260C:				; XREF: sub_71B4C
0007665E 1D6E 0002 0001             		move.b	2(a6),1(a6)
00076664 41EE 004E                  		lea	$4E(a6),a0
00076668 7030                       		moveq	#$30,d0
0007666A 7209                       		moveq	#9,d1
0007666C                            
0007666C                            loc_7261A:
0007666C 5210                       		addq.b	#1,(a0)
0007666E D0C0                       		adda.w	d0,a0
00076670 51C9 FFFA                  		dbf	d1,loc_7261A
00076674                            
00076674 4E75                       		rts	
00076676                            ; End of function sub_7260C
00076676                            
00076676                            ; ===========================================================================
00076676                            ; ---------------------------------------------------------------------------
00076676                            ; Speed	up music
00076676                            ; ---------------------------------------------------------------------------
00076676                            
00076676                            Sound_E2:				; XREF: Sound_ExIndex
00076676 4A2E 0027                  		tst.b	$27(a6)
0007667A 6600                       		bne.s	loc_7263E
0007667C 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00076682 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00076688 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007668E 4E75                       		rts	
00076690                            ; ===========================================================================
00076690                            
00076690                            loc_7263E:
00076690 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00076696 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007669C 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000766A2 4E75                       		rts	
000766A4                            ; ===========================================================================
000766A4                            ; ---------------------------------------------------------------------------
000766A4                            ; Change music back to normal speed
000766A4                            ; ---------------------------------------------------------------------------
000766A4                            
000766A4                            Sound_E3:				; XREF: Sound_ExIndex
000766A4 4A2E 0027                  		tst.b	$27(a6)
000766A8 6600                       		bne.s	loc_7266A
000766AA 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000766B0 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000766B6 422E 002A                  		clr.b	$2A(a6)
000766BA 4E75                       		rts	
000766BC                            ; ===========================================================================
000766BC                            
000766BC                            loc_7266A:
000766BC 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000766C2 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000766C8 422E 03CA                  		clr.b	$3CA(a6)
000766CC 4E75                       		rts	
000766CE                            
000766CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766CE                            
000766CE                            
000766CE                            sub_7267C:				; XREF: sub_71B4C
000766CE 4A2E 0025                  		tst.b	$25(a6)
000766D2 6700                       		beq.s	loc_72688
000766D4 532E 0025                  		subq.b	#1,$25(a6)
000766D8 4E75                       		rts	
000766DA                            ; ===========================================================================
000766DA                            
000766DA                            loc_72688:
000766DA 4A2E 0026                  		tst.b	$26(a6)
000766DE 6700                       		beq.s	loc_726D6
000766E0 532E 0026                  		subq.b	#1,$26(a6)
000766E4 1D7C 0002 0025             		move.b	#2,$25(a6)
000766EA 4BEE 0070                  		lea	$70(a6),a5
000766EE 7E05                       		moveq	#5,d7
000766F0                            
000766F0                            loc_7269E:
000766F0 4A15                       		tst.b	(a5)
000766F2 6A00                       		bpl.s	loc_726AA
000766F4 532D 0009                  		subq.b	#1,9(a5)
000766F8 4EBA 0000                  		jsr	sub_72CB4(pc)
000766FC                            
000766FC                            loc_726AA:
000766FC DAFC 0030                  		adda.w	#$30,a5
00076700 51CF FFEE                  		dbf	d7,loc_7269E
00076704 7E02                       		moveq	#2,d7
00076706                            
00076706                            loc_726B4:
00076706 4A15                       		tst.b	(a5)
00076708 6A00                       		bpl.s	loc_726CC
0007670A 532D 0009                  		subq.b	#1,9(a5)
0007670E 1C2D 0009                  		move.b	9(a5),d6
00076712 0C06 0010                  		cmpi.b	#$10,d6
00076716 6500                       		bcs.s	loc_726C8
00076718 7C0F                       		moveq	#$F,d6
0007671A                            
0007671A                            loc_726C8:
0007671A 4EBA 0000                  		jsr	sub_7296A(pc)
0007671E                            
0007671E                            loc_726CC:
0007671E DAFC 0030                  		adda.w	#$30,a5
00076722 51CF FFE2                  		dbf	d7,loc_726B4
00076726 4E75                       		rts	
00076728                            ; ===========================================================================
00076728                            
00076728                            loc_726D6:
00076728 08AE 0002 0040             		bclr	#2,$40(a6)
0007672E 422E 0024                  		clr.b	$24(a6)
00076732 4E75                       		rts	
00076734                            ; End of function sub_7267C
00076734                            
00076734                            ; ===========================================================================
00076734                            
00076734                            loc_726E2:				; XREF: sub_71CCA
00076734 0815 0001                  		btst	#1,(a5)
00076738 6600                       		bne.s	locret_726FC
0007673A 0815 0002                  		btst	#2,(a5)
0007673E 6600                       		bne.s	locret_726FC
00076740 7028                       		moveq	#$28,d0
00076742 122D 0001                  		move.b	1(a5),d1
00076746 0001 00F0                  		ori.b	#-$10,d1
0007674A 6000 0000                  		bra.w	sub_7272E
0007674E                            ; ===========================================================================
0007674E                            
0007674E                            locret_726FC:
0007674E 4E75                       		rts	
00076750                            
00076750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076750                            
00076750                            
00076750                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00076750 0815 0004                  		btst	#4,(a5)
00076754 6600                       		bne.s	locret_72714
00076756 0815 0002                  		btst	#2,(a5)
0007675A 6600                       		bne.s	locret_72714
0007675C                            
0007675C                            loc_7270A:				; XREF: Snd_FadeOut2
0007675C 7028                       		moveq	#$28,d0
0007675E 122D 0001                  		move.b	1(a5),d1
00076762 6000 0000                  		bra.w	sub_7272E
00076766                            ; ===========================================================================
00076766                            
00076766                            locret_72714:
00076766 4E75                       		rts	
00076768                            ; End of function sub_726FE
00076768                            
00076768                            ; ===========================================================================
00076768                            
00076768                            loc_72716:				; XREF: sub_72A5A
00076768 0815 0002                  		btst	#2,(a5)
0007676C 6600                       		bne.s	locret_72720
0007676E 6000 0000                  		bra.w	sub_72722
00076772                            ; ===========================================================================
00076772                            
00076772                            locret_72720:
00076772 4E75                       		rts	
00076774                            
00076774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076774                            
00076774                            
00076774                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00076774 082D 0002 0001             		btst	#2,1(a5)
0007677A 6600                       		bne.s	loc_7275A
0007677C D02D 0001                  		add.b	1(a5),d0
00076780                            ; End of function sub_72722
00076780                            
00076780                            
00076780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076780                            
00076780                            
00076780                            sub_7272E:				; XREF: loc_71E6A
00076780 1439 00A0 4000             		move.b	($A04000).l,d2
00076786 0802 0007                  		btst	#7,d2
0007678A 66F4                       		bne.s	sub_7272E
0007678C 13C0 00A0 4000             		move.b	d0,($A04000).l
00076792 4E71                       		nop	
00076794 4E71                       		nop	
00076796 4E71                       		nop	
00076798                            
00076798                            loc_72746:
00076798 1439 00A0 4000             		move.b	($A04000).l,d2
0007679E 0802 0007                  		btst	#7,d2
000767A2 66F4                       		bne.s	loc_72746
000767A4                            
000767A4 13C1 00A0 4001             		move.b	d1,($A04001).l
000767AA 4E75                       		rts	
000767AC                            ; End of function sub_7272E
000767AC                            
000767AC                            ; ===========================================================================
000767AC                            
000767AC                            loc_7275A:				; XREF: sub_72722
000767AC 142D 0001                  		move.b	1(a5),d2
000767B0 0882 0002                  		bclr	#2,d2
000767B4 D002                       		add.b	d2,d0
000767B6                            
000767B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000767B6                            
000767B6                            
000767B6                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000767B6 1439 00A0 4000             		move.b	($A04000).l,d2
000767BC 0802 0007                  		btst	#7,d2
000767C0 66F4                       		bne.s	sub_72764
000767C2 13C0 00A0 4002             		move.b	d0,($A04002).l
000767C8 4E71                       		nop	
000767CA 4E71                       		nop	
000767CC 4E71                       		nop	
000767CE                            
000767CE                            loc_7277C:
000767CE 1439 00A0 4000             		move.b	($A04000).l,d2
000767D4 0802 0007                  		btst	#7,d2
000767D8 66F4                       		bne.s	loc_7277C
000767DA                            
000767DA 13C1 00A0 4003             		move.b	d1,($A04003).l
000767E0 4E75                       		rts	
000767E2                            ; End of function sub_72764
000767E2                            
000767E2                            ; ===========================================================================
000767E2 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000767F4 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00076806 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00076816 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00076826 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00076836 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00076846 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00076856 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00076866 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00076876 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00076886 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00076896 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000768A2                            
000768A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000768A2                            
000768A2                            
000768A2                            sub_72850:				; XREF: sub_71B4C
000768A2 532D 000E                  		subq.b	#1,$E(a5)
000768A6 6600                       		bne.s	loc_72866
000768A8 0895 0004                  		bclr	#4,(a5)
000768AC 4EBA 0000                  		jsr	sub_72878(pc)
000768B0 4EBA 0000                  		jsr	sub_728DC(pc)
000768B4 6000 0000                  		bra.w	loc_7292E
000768B8                            ; ===========================================================================
000768B8                            
000768B8                            loc_72866:
000768B8 4EBA F45A                  		jsr	sub_71D9E(pc)
000768BC 4EBA 0000                  		jsr	sub_72926(pc)
000768C0 4EBA F47A                  		jsr	sub_71DC6(pc)
000768C4 4EBA 0000                  		jsr	sub_728E2(pc)
000768C8 4E75                       		rts	
000768CA                            ; End of function sub_72850
000768CA                            
000768CA                            
000768CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000768CA                            
000768CA                            
000768CA                            sub_72878:				; XREF: sub_72850
000768CA 0895 0001                  		bclr	#1,(a5)
000768CE 286D 0004                  		movea.l	4(a5),a4
000768D2                            
000768D2                            loc_72880:
000768D2 7A00                       		moveq	#0,d5
000768D4 1A1C                       		move.b	(a4)+,d5
000768D6 0C05 00E0                  		cmpi.b	#$E0,d5
000768DA 6500                       		bcs.s	loc_72890
000768DC 4EBA 0000                  		jsr	sub_72A5A(pc)
000768E0 60F0                       		bra.s	loc_72880
000768E2                            ; ===========================================================================
000768E2                            
000768E2                            loc_72890:
000768E2 4A05                       		tst.b	d5
000768E4 6A00                       		bpl.s	loc_728A4
000768E6 4EBA 0000                  		jsr	sub_728AC(pc)
000768EA 1A1C                       		move.b	(a4)+,d5
000768EC 4A05                       		tst.b	d5
000768EE 6A00                       		bpl.s	loc_728A4
000768F0 534C                       		subq.w	#1,a4
000768F2 6000 F3E2                  		bra.w	sub_71D60
000768F6                            ; ===========================================================================
000768F6                            
000768F6                            loc_728A4:
000768F6 4EBA F3BE                  		jsr	sub_71D40(pc)
000768FA 6000 F3DA                  		bra.w	sub_71D60
000768FE                            ; End of function sub_72878
000768FE                            
000768FE                            
000768FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000768FE                            
000768FE                            
000768FE                            sub_728AC:				; XREF: sub_72878
000768FE 0405 0081                  		subi.b	#$81,d5
00076902 6500                       		bcs.s	loc_728CA
00076904 DA2D 0008                  		add.b	8(a5),d5
00076908 0245 007F                  		andi.w	#$7F,d5
0007690C E34D                       		lsl.w	#1,d5
0007690E 41FA 0000                  		lea	word_729CE(pc),a0
00076912 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076918 6000 F3BC                  		bra.w	sub_71D60
0007691C                            ; ===========================================================================
0007691C                            
0007691C                            loc_728CA:
0007691C 08D5 0001                  		bset	#1,(a5)
00076920 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00076926 4EBA F3AE                  		jsr	sub_71D60(pc)
0007692A 6000 0000                  		bra.w	sub_729A0
0007692E                            ; End of function sub_728AC
0007692E                            
0007692E                            
0007692E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007692E                            
0007692E                            
0007692E                            sub_728DC:				; XREF: sub_72850
0007692E 3C2D 0010                  		move.w	$10(a5),d6
00076932 6B00                       		bmi.s	loc_72920
00076934                            ; End of function sub_728DC
00076934                            
00076934                            
00076934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076934                            
00076934                            
00076934                            sub_728E2:				; XREF: sub_72850
00076934 102D 001E                  		move.b	$1E(a5),d0
00076938 4880                       		ext.w	d0
0007693A DC40                       		add.w	d0,d6
0007693C 0815 0002                  		btst	#2,(a5)
00076940 6600                       		bne.s	locret_7291E
00076942 0815 0001                  		btst	#1,(a5)
00076946 6600                       		bne.s	locret_7291E
00076948 102D 0001                  		move.b	1(a5),d0
0007694C 0C00 00E0                  		cmpi.b	#$E0,d0
00076950 6600                       		bne.s	loc_72904
00076952 103C 00C0                  		move.b	#$C0,d0
00076956                            
00076956                            loc_72904:
00076956 3206                       		move.w	d6,d1
00076958 0201 000F                  		andi.b	#$F,d1
0007695C 8001                       		or.b	d1,d0
0007695E E84E                       		lsr.w	#4,d6
00076960 0206 003F                  		andi.b	#$3F,d6
00076964 13C0 00C0 0011             		move.b	d0,($C00011).l
0007696A 13C6 00C0 0011             		move.b	d6,($C00011).l
00076970                            
00076970                            locret_7291E:
00076970 4E75                       		rts	
00076972                            ; End of function sub_728E2
00076972                            
00076972                            ; ===========================================================================
00076972                            
00076972                            loc_72920:				; XREF: sub_728DC
00076972 08D5 0001                  		bset	#1,(a5)
00076976 4E75                       		rts	
00076978                            
00076978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076978                            
00076978                            
00076978                            sub_72926:				; XREF: sub_72850
00076978 4A2D 000B                  		tst.b	$B(a5)
0007697C 6700 0000                  		beq.w	locret_7298A
00076980                            
00076980                            loc_7292E:				; XREF: sub_72850
00076980 1C2D 0009                  		move.b	9(a5),d6
00076984 7000                       		moveq	#0,d0
00076986 102D 000B                  		move.b	$B(a5),d0
0007698A 6700                       		beq.s	sub_7296A
0007698C 2079 0007 58EA             		movea.l	(Go_PSGIndex).l,a0
00076992 5340                       		subq.w	#1,d0
00076994 E548                       		lsl.w	#2,d0
00076996 2070 0000                  		movea.l	(a0,d0.w),a0
0007699A 102D 000C                  		move.b	$C(a5),d0
0007699E 1030 0000                  		move.b	(a0,d0.w),d0
000769A2 522D 000C                  		addq.b	#1,$C(a5)
000769A6 0800 0007                  		btst	#7,d0
000769AA 6700                       		beq.s	loc_72960
000769AC 0C00 0080                  		cmpi.b	#$80,d0
000769B0 6700                       		beq.s	loc_7299A
000769B2                            
000769B2                            loc_72960:
000769B2 DC40                       		add.w	d0,d6
000769B4 0C06 0010                  		cmpi.b	#$10,d6
000769B8 6500                       		bcs.s	sub_7296A
000769BA 7C0F                       		moveq	#$F,d6
000769BC                            ; End of function sub_72926
000769BC                            
000769BC                            
000769BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000769BC                            
000769BC                            
000769BC                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000769BC 0815 0001                  		btst	#1,(a5)
000769C0 6600                       		bne.s	locret_7298A
000769C2 0815 0002                  		btst	#2,(a5)
000769C6 6600                       		bne.s	locret_7298A
000769C8 0815 0004                  		btst	#4,(a5)
000769CC 6600                       		bne.s	loc_7298C
000769CE                            
000769CE                            loc_7297C:
000769CE 8C2D 0001                  		or.b	1(a5),d6
000769D2 0606 0010                  		addi.b	#$10,d6
000769D6 13C6 00C0 0011             		move.b	d6,($C00011).l
000769DC                            
000769DC                            locret_7298A:
000769DC 4E75                       		rts	
000769DE                            ; ===========================================================================
000769DE                            
000769DE                            loc_7298C:
000769DE 4A2D 0013                  		tst.b	$13(a5)
000769E2 67EA                       		beq.s	loc_7297C
000769E4 4A2D 0012                  		tst.b	$12(a5)
000769E8 66E4                       		bne.s	loc_7297C
000769EA 4E75                       		rts	
000769EC                            ; End of function sub_7296A
000769EC                            
000769EC                            ; ===========================================================================
000769EC                            
000769EC                            loc_7299A:				; XREF: sub_72926
000769EC 532D 000C                  		subq.b	#1,$C(a5)
000769F0 4E75                       		rts	
000769F2                            
000769F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000769F2                            
000769F2                            
000769F2                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000769F2 0815 0002                  		btst	#2,(a5)
000769F6 6600                       		bne.s	locret_729B4
000769F8                            
000769F8                            loc_729A6:				; XREF: Snd_FadeOut2
000769F8 102D 0001                  		move.b	1(a5),d0
000769FC 0000 001F                  		ori.b	#$1F,d0
00076A00 13C0 00C0 0011             		move.b	d0,($C00011).l
00076A06                            
00076A06                            locret_729B4:
00076A06 4E75                       		rts	
00076A08                            ; End of function sub_729A0
00076A08                            
00076A08                            
00076A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A08                            
00076A08                            
00076A08                            sub_729B6:				; XREF: loc_71E7C
00076A08 41F9 00C0 0011             		lea	($C00011).l,a0
00076A0E 10BC 009F                  		move.b	#$9F,(a0)
00076A12 10BC 00BF                  		move.b	#$BF,(a0)
00076A16 10BC 00DF                  		move.b	#$DF,(a0)
00076A1A 10BC 00FF                  		move.b	#$FF,(a0)
00076A1E 4E75                       		rts	
00076A20                            ; End of function sub_729B6
00076A20                            
00076A20                            ; ===========================================================================
00076A20 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00076A32 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00076A44 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076A58 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076A6C 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076A80 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00076A94 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00076AA8 0011 0000                  		dc.w $11, 0
00076AAC                            
00076AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076AAC                            
00076AAC                            
00076AAC                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00076AAC 0445 00E0                  		subi.w	#$E0,d5
00076AB0 E54D                       		lsl.w	#2,d5
00076AB2 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00076AB6                            ; End of function sub_72A5A
00076AB6                            
00076AB6                            ; ===========================================================================
00076AB6                            
00076AB6                            loc_72A64:
00076AB6 6000 0000                  		bra.w	loc_72ACC
00076ABA                            ; ===========================================================================
00076ABA 6000 0000                  		bra.w	loc_72AEC
00076ABE                            ; ===========================================================================
00076ABE 6000 0000                  		bra.w	loc_72AF2
00076AC2                            ; ===========================================================================
00076AC2 6000 0000                  		bra.w	loc_72AF8
00076AC6                            ; ===========================================================================
00076AC6 6000 0000                  		bra.w	loc_72B14
00076ACA                            ; ===========================================================================
00076ACA 6000 0000                  		bra.w	loc_72B9E
00076ACE                            ; ===========================================================================
00076ACE 6000 0000                  		bra.w	loc_72BA4
00076AD2                            ; ===========================================================================
00076AD2 6000 0000                  		bra.w	loc_72BAE
00076AD6                            ; ===========================================================================
00076AD6 6000 0000                  		bra.w	loc_72BB4
00076ADA                            ; ===========================================================================
00076ADA 6000 0000                  		bra.w	loc_72BBE
00076ADE                            ; ===========================================================================
00076ADE 6000 0000                  		bra.w	loc_72BC6
00076AE2                            ; ===========================================================================
00076AE2 6000 0000                  		bra.w	loc_72BD0
00076AE6                            ; ===========================================================================
00076AE6 6000 0000                  		bra.w	loc_72BE6
00076AEA                            ; ===========================================================================
00076AEA 6000 0000                  		bra.w	loc_72BEE
00076AEE                            ; ===========================================================================
00076AEE 6000 0000                  		bra.w	loc_72BF4
00076AF2                            ; ===========================================================================
00076AF2 6000 0000                  		bra.w	loc_72C26
00076AF6                            ; ===========================================================================
00076AF6 6000 0000                  		bra.w	loc_72D30
00076AFA                            ; ===========================================================================
00076AFA 6000 0000                  		bra.w	loc_72D52
00076AFE                            ; ===========================================================================
00076AFE 6000 0000                  		bra.w	loc_72D58
00076B02                            ; ===========================================================================
00076B02 6000 0000                  		bra.w	loc_72E06
00076B06                            ; ===========================================================================
00076B06 6000 0000                  		bra.w	loc_72E20
00076B0A                            ; ===========================================================================
00076B0A 6000 0000                  		bra.w	loc_72E26
00076B0E                            ; ===========================================================================
00076B0E 6000 0000                  		bra.w	loc_72E2C
00076B12                            ; ===========================================================================
00076B12 6000 0000                  		bra.w	loc_72E38
00076B16                            ; ===========================================================================
00076B16 6000 0000                  		bra.w	loc_72E52
00076B1A                            ; ===========================================================================
00076B1A 6000 0000                  		bra.w	loc_72E64
00076B1E                            ; ===========================================================================
00076B1E                            
00076B1E                            loc_72ACC:				; XREF: loc_72A64
00076B1E 121C                       		move.b	(a4)+,d1
00076B20 4A2D 0001                  		tst.b	1(a5)
00076B24 6B00                       		bmi.s	locret_72AEA
00076B26 102D 000A                  		move.b	$A(a5),d0
00076B2A 0200 0037                  		andi.b	#$37,d0
00076B2E 8200                       		or.b	d0,d1
00076B30 1B41 000A                  		move.b	d1,$A(a5)
00076B34 103C 00B4                  		move.b	#$B4,d0
00076B38 6000 FC2E                  		bra.w	loc_72716
00076B3C                            ; ===========================================================================
00076B3C                            
00076B3C                            locret_72AEA:
00076B3C 4E75                       		rts	
00076B3E                            ; ===========================================================================
00076B3E                            
00076B3E                            loc_72AEC:				; XREF: loc_72A64
00076B3E 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00076B42 4E75                       		rts	
00076B44                            ; ===========================================================================
00076B44                            
00076B44                            loc_72AF2:				; XREF: loc_72A64
00076B44 1D5C 0007                  		move.b	(a4)+,7(a6)
00076B48 4E75                       		rts	
00076B4A                            ; ===========================================================================
00076B4A                            
00076B4A                            loc_72AF8:				; XREF: loc_72A64
00076B4A 7000                       		moveq	#0,d0
00076B4C 102D 000D                  		move.b	$D(a5),d0
00076B50 2875 0000                  		movea.l	(a5,d0.w),a4
00076B54 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076B5C 544C                       		addq.w	#2,a4
00076B5E 5800                       		addq.b	#4,d0
00076B60 1B40 000D                  		move.b	d0,$D(a5)
00076B64 4E75                       		rts	
00076B66                            ; ===========================================================================
00076B66                            
00076B66                            loc_72B14:				; XREF: loc_72A64
00076B66 204E                       		movea.l	a6,a0
00076B68 43EE 03A0                  		lea	$3A0(a6),a1
00076B6C 303C 0087                  		move.w	#$87,d0
00076B70                            
00076B70                            loc_72B1E:
00076B70 20D9                       		move.l	(a1)+,(a0)+
00076B72 51C8 FFFC                  		dbf	d0,loc_72B1E
00076B76                            
00076B76 08EE 0002 0040             		bset	#2,$40(a6)
00076B7C 264D                       		movea.l	a5,a3
00076B7E 1C3C 0028                  		move.b	#$28,d6
00076B82 9C2E 0026                  		sub.b	$26(a6),d6
00076B86 7E05                       		moveq	#5,d7
00076B88 4BEE 0070                  		lea	$70(a6),a5
00076B8C                            
00076B8C                            loc_72B3A:
00076B8C 0815 0007                  		btst	#7,(a5)
00076B90 6700                       		beq.s	loc_72B5C
00076B92 08D5 0001                  		bset	#1,(a5)
00076B96 DD2D 0009                  		add.b	d6,9(a5)
00076B9A 0815 0002                  		btst	#2,(a5)
00076B9E 6600                       		bne.s	loc_72B5C
00076BA0 7000                       		moveq	#0,d0
00076BA2 102D 000B                  		move.b	$B(a5),d0
00076BA6 226E 0018                  		movea.l	$18(a6),a1
00076BAA 4EBA 0000                  		jsr	sub_72C4E(pc)
00076BAE                            
00076BAE                            loc_72B5C:
00076BAE DAFC 0030                  		adda.w	#$30,a5
00076BB2 51CF FFD8                  		dbf	d7,loc_72B3A
00076BB6                            
00076BB6 7E02                       		moveq	#2,d7
00076BB8                            
00076BB8                            loc_72B66:
00076BB8 0815 0007                  		btst	#7,(a5)
00076BBC 6700                       		beq.s	loc_72B78
00076BBE 08D5 0001                  		bset	#1,(a5)
00076BC2 4EBA FE2E                  		jsr	sub_729A0(pc)
00076BC6 DD2D 0009                  		add.b	d6,9(a5)
00076BCA                            
00076BCA                            loc_72B78:
00076BCA DAFC 0030                  		adda.w	#$30,a5
00076BCE 51CF FFE8                  		dbf	d7,loc_72B66
00076BD2 2A4B                       		movea.l	a3,a5
00076BD4 1D7C 0080 0024             		move.b	#$80,$24(a6)
00076BDA 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076BE0 422E 0027                  		clr.b	$27(a6)
00076BE4 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00076BEC 504F                       		addq.w	#8,sp
00076BEE 4E75                       		rts	
00076BF0                            ; ===========================================================================
00076BF0                            
00076BF0                            loc_72B9E:				; XREF: loc_72A64
00076BF0 1B5C 0002                  		move.b	(a4)+,2(a5)
00076BF4 4E75                       		rts	
00076BF6                            ; ===========================================================================
00076BF6                            
00076BF6                            loc_72BA4:				; XREF: loc_72A64
00076BF6 101C                       		move.b	(a4)+,d0
00076BF8 D12D 0009                  		add.b	d0,9(a5)
00076BFC 6000 0000                  		bra.w	sub_72CB4
00076C00                            ; ===========================================================================
00076C00                            
00076C00                            loc_72BAE:				; XREF: loc_72A64
00076C00 08D5 0004                  		bset	#4,(a5)
00076C04 4E75                       		rts	
00076C06                            ; ===========================================================================
00076C06                            
00076C06                            loc_72BB4:				; XREF: loc_72A64
00076C06 1B54 0012                  		move.b	(a4),$12(a5)
00076C0A 1B5C 0013                  		move.b	(a4)+,$13(a5)
00076C0E 4E75                       		rts	
00076C10                            ; ===========================================================================
00076C10                            
00076C10                            loc_72BBE:				; XREF: loc_72A64
00076C10 101C                       		move.b	(a4)+,d0
00076C12 D12D 0008                  		add.b	d0,8(a5)
00076C16 4E75                       		rts	
00076C18                            ; ===========================================================================
00076C18                            
00076C18                            loc_72BC6:				; XREF: loc_72A64
00076C18 1D54 0002                  		move.b	(a4),2(a6)
00076C1C 1D5C 0001                  		move.b	(a4)+,1(a6)
00076C20 4E75                       		rts	
00076C22                            ; ===========================================================================
00076C22                            
00076C22                            loc_72BD0:				; XREF: loc_72A64
00076C22 41EE 0040                  		lea	$40(a6),a0
00076C26 101C                       		move.b	(a4)+,d0
00076C28 7230                       		moveq	#$30,d1
00076C2A 7409                       		moveq	#9,d2
00076C2C                            
00076C2C                            loc_72BDA:
00076C2C 1140 0002                  		move.b	d0,2(a0)
00076C30 D0C1                       		adda.w	d1,a0
00076C32 51CA FFF8                  		dbf	d2,loc_72BDA
00076C36                            
00076C36 4E75                       		rts	
00076C38                            ; ===========================================================================
00076C38                            
00076C38                            loc_72BE6:				; XREF: loc_72A64
00076C38 101C                       		move.b	(a4)+,d0
00076C3A D12D 0009                  		add.b	d0,9(a5)
00076C3E 4E75                       		rts	
00076C40                            ; ===========================================================================
00076C40                            
00076C40                            loc_72BEE:				; XREF: loc_72A64
00076C40 422E 002C                  		clr.b	$2C(a6)
00076C44 4E75                       		rts	
00076C46                            ; ===========================================================================
00076C46                            
00076C46                            loc_72BF4:				; XREF: loc_72A64
00076C46 0895 0007                  		bclr	#7,(a5)
00076C4A 0895 0004                  		bclr	#4,(a5)
00076C4E 4EBA FB00                  		jsr	sub_726FE(pc)
00076C52 4A2E 0250                  		tst.b	$250(a6)
00076C56 6B00                       		bmi.s	loc_72C22
00076C58 264D                       		movea.l	a5,a3
00076C5A 4BEE 0100                  		lea	$100(a6),a5
00076C5E 226E 0018                  		movea.l	$18(a6),a1
00076C62 0895 0002                  		bclr	#2,(a5)
00076C66 08D5 0001                  		bset	#1,(a5)
00076C6A 102D 000B                  		move.b	$B(a5),d0
00076C6E 4EBA 0000                  		jsr	sub_72C4E(pc)
00076C72 2A4B                       		movea.l	a3,a5
00076C74                            
00076C74                            loc_72C22:
00076C74 504F                       		addq.w	#8,sp
00076C76 4E75                       		rts	
00076C78                            ; ===========================================================================
00076C78                            
00076C78                            loc_72C26:				; XREF: loc_72A64
00076C78 7000                       		moveq	#0,d0
00076C7A 101C                       		move.b	(a4)+,d0
00076C7C 1B40 000B                  		move.b	d0,$B(a5)
00076C80 0815 0002                  		btst	#2,(a5)
00076C84 6600 0000                  		bne.w	locret_72CAA
00076C88 226E 0018                  		movea.l	$18(a6),a1
00076C8C 4A2E 000E                  		tst.b	$E(a6)
00076C90 6700                       		beq.s	sub_72C4E
00076C92 226D 0020                  		movea.l	$20(a5),a1
00076C96 4A2E 000E                  		tst.b	$E(a6)
00076C9A 6B00                       		bmi.s	sub_72C4E
00076C9C 226E 0020                  		movea.l	$20(a6),a1
00076CA0                            
00076CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076CA0                            
00076CA0                            
00076CA0                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076CA0 5340                       		subq.w	#1,d0
00076CA2 6B00                       		bmi.s	loc_72C5C
00076CA4 323C 0019                  		move.w	#$19,d1
00076CA8                            
00076CA8                            loc_72C56:
00076CA8 D2C1                       		adda.w	d1,a1
00076CAA 51C8 FFFC                  		dbf	d0,loc_72C56
00076CAE                            
00076CAE                            loc_72C5C:
00076CAE 1219                       		move.b	(a1)+,d1
00076CB0 1B41 001F                  		move.b	d1,$1F(a5)
00076CB4 1801                       		move.b	d1,d4
00076CB6 103C 00B0                  		move.b	#$B0,d0
00076CBA 4EBA FAB8                  		jsr	sub_72722(pc)
00076CBE 45FA 0000                  		lea	byte_72D18(pc),a2
00076CC2 7613                       		moveq	#$13,d3
00076CC4                            
00076CC4                            loc_72C72:
00076CC4 101A                       		move.b	(a2)+,d0
00076CC6 1219                       		move.b	(a1)+,d1
00076CC8 4EBA FAAA                  		jsr	sub_72722(pc)
00076CCC 51CB FFF6                  		dbf	d3,loc_72C72
00076CD0 7A03                       		moveq	#3,d5
00076CD2 0244 0007                  		andi.w	#7,d4
00076CD6 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00076CDA 162D 0009                  		move.b	9(a5),d3
00076CDE                            
00076CDE                            loc_72C8C:
00076CDE 101A                       		move.b	(a2)+,d0
00076CE0 1219                       		move.b	(a1)+,d1
00076CE2 E20C                       		lsr.b	#1,d4
00076CE4 6400                       		bcc.s	loc_72C96
00076CE6 D203                       		add.b	d3,d1
00076CE8                            
00076CE8                            loc_72C96:
00076CE8 4EBA FA8A                  		jsr	sub_72722(pc)
00076CEC 51CD FFF0                  		dbf	d5,loc_72C8C
00076CF0 103C 00B4                  		move.b	#$B4,d0
00076CF4 122D 000A                  		move.b	$A(a5),d1
00076CF8 4EBA FA7A                  		jsr	sub_72722(pc)
00076CFC                            
00076CFC                            locret_72CAA:
00076CFC 4E75                       		rts	
00076CFE                            ; End of function sub_72C4E
00076CFE                            
00076CFE                            ; ===========================================================================
00076CFE 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00076D06                            
00076D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076D06                            
00076D06                            
00076D06                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00076D06 0815 0002                  		btst	#2,(a5)
00076D0A 6600                       		bne.s	locret_72D16
00076D0C 7000                       		moveq	#0,d0
00076D0E 102D 000B                  		move.b	$B(a5),d0
00076D12 226E 0018                  		movea.l	$18(a6),a1
00076D16 4A2E 000E                  		tst.b	$E(a6)
00076D1A 6700                       		beq.s	loc_72CD8
00076D1C 226E 0020                  		movea.l	$20(a6),a1
00076D20 4A2E 000E                  		tst.b	$E(a6)
00076D24 6B00                       		bmi.s	loc_72CD8
00076D26 226E 0020                  		movea.l	$20(a6),a1
00076D2A                            
00076D2A                            loc_72CD8:
00076D2A 5340                       		subq.w	#1,d0
00076D2C 6B00                       		bmi.s	loc_72CE6
00076D2E 323C 0019                  		move.w	#$19,d1
00076D32                            
00076D32                            loc_72CE0:
00076D32 D2C1                       		adda.w	d1,a1
00076D34 51C8 FFFC                  		dbf	d0,loc_72CE0
00076D38                            
00076D38                            loc_72CE6:
00076D38 D2FC 0015                  		adda.w	#$15,a1
00076D3C 45FA 0000                  		lea	byte_72D2C(pc),a2
00076D40 102D 001F                  		move.b	$1F(a5),d0
00076D44 0240 0007                  		andi.w	#7,d0
00076D48 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076D4C 162D 0009                  		move.b	9(a5),d3
00076D50 6B00                       		bmi.s	locret_72D16
00076D52 7A03                       		moveq	#3,d5
00076D54                            
00076D54                            loc_72D02:
00076D54 101A                       		move.b	(a2)+,d0
00076D56 1219                       		move.b	(a1)+,d1
00076D58 E20C                       		lsr.b	#1,d4
00076D5A 6400                       		bcc.s	loc_72D12
00076D5C D203                       		add.b	d3,d1
00076D5E 6500                       		bcs.s	loc_72D12
00076D60 4EBA FA12                  		jsr	sub_72722(pc)
00076D64                            
00076D64                            loc_72D12:
00076D64 51CD FFEE                  		dbf	d5,loc_72D02
00076D68                            
00076D68                            locret_72D16:
00076D68 4E75                       		rts	
00076D6A                            ; End of function sub_72CB4
00076D6A                            
00076D6A                            ; ===========================================================================
00076D6A 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076D74 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076D7E 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076D82                            ; ===========================================================================
00076D82                            
00076D82                            loc_72D30:				; XREF: loc_72A64
00076D82 08D5 0003                  		bset	#3,(a5)
00076D86 2B4C 0014                  		move.l	a4,$14(a5)
00076D8A 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076D8E 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076D92 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076D96 101C                       		move.b	(a4)+,d0
00076D98 E208                       		lsr.b	#1,d0
00076D9A 1B40 001B                  		move.b	d0,$1B(a5)
00076D9E 426D 001C                  		clr.w	$1C(a5)
00076DA2 4E75                       		rts	
00076DA4                            ; ===========================================================================
00076DA4                            
00076DA4                            loc_72D52:				; XREF: loc_72A64
00076DA4 08D5 0003                  		bset	#3,(a5)
00076DA8 4E75                       		rts	
00076DAA                            ; ===========================================================================
00076DAA                            
00076DAA                            loc_72D58:				; XREF: loc_72A64
00076DAA 0895 0007                  		bclr	#7,(a5)
00076DAE 0895 0004                  		bclr	#4,(a5)
00076DB2 4A2D 0001                  		tst.b	1(a5)
00076DB6 6B00                       		bmi.s	loc_72D74
00076DB8 4A2E 0008                  		tst.b	8(a6)
00076DBC 6B00 0000                  		bmi.w	loc_72E02
00076DC0 4EBA F98E                  		jsr	sub_726FE(pc)
00076DC4 6000                       		bra.s	loc_72D78
00076DC6                            ; ===========================================================================
00076DC6                            
00076DC6                            loc_72D74:
00076DC6 4EBA FC2A                  		jsr	sub_729A0(pc)
00076DCA                            
00076DCA                            loc_72D78:
00076DCA 4A2E 000E                  		tst.b	$E(a6)
00076DCE 6A00 0000                  		bpl.w	loc_72E02
00076DD2 4216                       		clr.b	0(a6)
00076DD4 7000                       		moveq	#0,d0
00076DD6 102D 0001                  		move.b	1(a5),d0
00076DDA 6B00                       		bmi.s	loc_72DCC
00076DDC 41FA F546                  		lea	dword_722CC(pc),a0
00076DE0 264D                       		movea.l	a5,a3
00076DE2 0C00 0004                  		cmpi.b	#4,d0
00076DE6 6600                       		bne.s	loc_72DA8
00076DE8 4A2E 0340                  		tst.b	$340(a6)
00076DEC 6A00                       		bpl.s	loc_72DA8
00076DEE 4BEE 0340                  		lea	$340(a6),a5
00076DF2 226E 0020                  		movea.l	$20(a6),a1
00076DF6 6000                       		bra.s	loc_72DB8
00076DF8                            ; ===========================================================================
00076DF8                            
00076DF8                            loc_72DA8:
00076DF8 5500                       		subq.b	#2,d0
00076DFA E508                       		lsl.b	#2,d0
00076DFC 2A70 0000                  		movea.l	(a0,d0.w),a5
00076E00 4A15                       		tst.b	(a5)
00076E02 6A00                       		bpl.s	loc_72DC8
00076E04 226E 0018                  		movea.l	$18(a6),a1
00076E08                            
00076E08                            loc_72DB8:
00076E08 0895 0002                  		bclr	#2,(a5)
00076E0C 08D5 0001                  		bset	#1,(a5)
00076E10 102D 000B                  		move.b	$B(a5),d0
00076E14 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076E18                            
00076E18                            loc_72DC8:
00076E18 2A4B                       		movea.l	a3,a5
00076E1A 6000                       		bra.s	loc_72E02
00076E1C                            ; ===========================================================================
00076E1C                            
00076E1C                            loc_72DCC:
00076E1C 41EE 0370                  		lea	$370(a6),a0
00076E20 4A10                       		tst.b	(a0)
00076E22 6A00                       		bpl.s	loc_72DE0
00076E24 0C00 00E0                  		cmpi.b	#$E0,d0
00076E28 6700                       		beq.s	loc_72DEA
00076E2A 0C00 00C0                  		cmpi.b	#$C0,d0
00076E2E 6700                       		beq.s	loc_72DEA
00076E30                            
00076E30                            loc_72DE0:
00076E30 41FA F4F2                  		lea	dword_722CC(pc),a0
00076E34 E608                       		lsr.b	#3,d0
00076E36 2070 0000                  		movea.l	(a0,d0.w),a0
00076E3A                            
00076E3A                            loc_72DEA:
00076E3A 0890 0002                  		bclr	#2,(a0)
00076E3E 08D0 0001                  		bset	#1,(a0)
00076E42 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076E48 6600                       		bne.s	loc_72E02
00076E4A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076E52                            
00076E52                            loc_72E02:
00076E52 504F                       		addq.w	#8,sp
00076E54 4E75                       		rts	
00076E56                            ; ===========================================================================
00076E56                            
00076E56                            loc_72E06:				; XREF: loc_72A64
00076E56 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076E5C 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076E60 0815 0002                  		btst	#2,(a5)
00076E64 6600                       		bne.s	locret_72E1E
00076E66 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076E6E                            
00076E6E                            locret_72E1E:
00076E6E 4E75                       		rts	
00076E70                            ; ===========================================================================
00076E70                            
00076E70                            loc_72E20:				; XREF: loc_72A64
00076E70 0895 0003                  		bclr	#3,(a5)
00076E74 4E75                       		rts	
00076E76                            ; ===========================================================================
00076E76                            
00076E76                            loc_72E26:				; XREF: loc_72A64
00076E76 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076E7A 4E75                       		rts	
00076E7C                            ; ===========================================================================
00076E7C                            
00076E7C                            loc_72E2C:				; XREF: loc_72A64
00076E7C 101C                       		move.b	(a4)+,d0
00076E7E E148                       		lsl.w	#8,d0
00076E80 101C                       		move.b	(a4)+,d0
00076E82 D8C0                       		adda.w	d0,a4
00076E84 534C                       		subq.w	#1,a4
00076E86 4E75                       		rts	
00076E88                            ; ===========================================================================
00076E88                            
00076E88                            loc_72E38:				; XREF: loc_72A64
00076E88 7000                       		moveq	#0,d0
00076E8A 101C                       		move.b	(a4)+,d0
00076E8C 121C                       		move.b	(a4)+,d1
00076E8E 4A35 0024                  		tst.b	$24(a5,d0.w)
00076E92 6600                       		bne.s	loc_72E48
00076E94 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076E98                            
00076E98                            loc_72E48:
00076E98 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076E9C 66DE                       		bne.s	loc_72E2C
00076E9E 544C                       		addq.w	#2,a4
00076EA0 4E75                       		rts	
00076EA2                            ; ===========================================================================
00076EA2                            
00076EA2                            loc_72E52:				; XREF: loc_72A64
00076EA2 7000                       		moveq	#0,d0
00076EA4 102D 000D                  		move.b	$D(a5),d0
00076EA8 5900                       		subq.b	#4,d0
00076EAA 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076EAE 1B40 000D                  		move.b	d0,$D(a5)
00076EB2 60C8                       		bra.s	loc_72E2C
00076EB4                            ; ===========================================================================
00076EB4                            
00076EB4                            loc_72E64:				; XREF: loc_72A64
00076EB4 103C 0088                  		move.b	#$88,d0
00076EB8 123C 000F                  		move.b	#$F,d1
00076EBC 4EBA F8C2                  		jsr	sub_7272E(pc)
00076EC0 103C 008C                  		move.b	#$8C,d0
00076EC4 123C 000F                  		move.b	#$F,d1
00076EC8 6000 F8B6                  		bra.w	sub_7272E
00076ECC                            ; ===========================================================================
00076ECC                            Kos_Z80:	incbin	sound\z80_1.bin
00076F7C 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076F7E 21                         		dc.b $21
00076F7F 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076F81                            		incbin	sound\z80_2.bin
0007862C                            		even
0007862C                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007EE2C                            		even
0007EE2C                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000886CA                            		even
000886CA                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008C2EA 00                         		even
0008C2EA                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008C2EA                            music84_Header:
0008C2EA =00000001                  smpsHeaderStartSong = 1
0008C2EA 0000                       	smpsHeaderVoice     music84_Voices
0008C2EC 0603                       	smpsHeaderChan      $06, $03
0008C2EE 0205                       	smpsHeaderTempo     $02, $05
0008C2F0                            
0008C2F4 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008C2F8 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008C2FC 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008C300 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008C304 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008C308 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008C30E 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008C314 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008C31A                            
0008C31A                            ; FM1 Data
0008C31A                            music84_FM1:
0008C31A E0C0                       	smpsPan             panCenter, $00
0008C31E E107                       	smpsAlterNote       $07
0008C320 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008C324 E106                       	smpsAlterNote       $06
0008C326 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008C32A E10B                       	smpsAlterNote       $0B
0008C32C 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008C332 E10C                       	smpsAlterNote       $0C
0008C334 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C337 E10B                       	smpsAlterNote       $0B
0008C339 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C33C E109                       	smpsAlterNote       $09
0008C33E E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008C343 E108                       	smpsAlterNote       $08
0008C345 8001                       	dc.b	nRst, $01
0008C347 E10B                       	smpsAlterNote       $0B
0008C349 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008C34F E107                       	smpsAlterNote       $07
0008C351 9B03                       	dc.b	nD2, $03
0008C353                            
0008C353                            music84_Jump04:
0008C353 E107                       	smpsAlterNote       $07
0008C355 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C359 E10B                       	smpsAlterNote       $0B
0008C35B A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C35F E107                       	smpsAlterNote       $07
0008C361 9B03                       	dc.b	nD2, $03
0008C363 E11A                       	smpsAlterNote       $1A
0008C365 A301                       	dc.b	nBb2, $01
0008C367 E1F2                       	smpsAlterNote       $F2
0008C369 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C36C E1FF                       	smpsAlterNote       $FF
0008C36E E701                       	dc.b	smpsNoAttack, $01
0008C370 E111                       	smpsAlterNote       $11
0008C372 E701                       	dc.b	smpsNoAttack, $01
0008C374 E106                       	smpsAlterNote       $06
0008C376 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C379 E107                       	smpsAlterNote       $07
0008C37B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C37F E108                       	smpsAlterNote       $08
0008C381 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008C389 E109                       	smpsAlterNote       $09
0008C38B A003                       	dc.b	nG2, $03
0008C38D E10C                       	smpsAlterNote       $0C
0008C38F A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C393 E1FD                       	smpsAlterNote       $FD
0008C395 A401                       	dc.b	nB2, $01
0008C397 E109                       	smpsAlterNote       $09
0008C399 E701                       	dc.b	smpsNoAttack, $01
0008C39B E106                       	smpsAlterNote       $06
0008C39D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C3A0 E109                       	smpsAlterNote       $09
0008C3A2 A007                       	dc.b	nG2, $07
0008C3A4 E108                       	smpsAlterNote       $08
0008C3A6 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C3AA E107                       	smpsAlterNote       $07
0008C3AC 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C3B2 E10B                       	smpsAlterNote       $0B
0008C3B4 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C3B8 E107                       	smpsAlterNote       $07
0008C3BA 9B03                       	dc.b	nD2, $03
0008C3BC E11A                       	smpsAlterNote       $1A
0008C3BE A301                       	dc.b	nBb2, $01
0008C3C0 E1F9                       	smpsAlterNote       $F9
0008C3C2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C3C5 E107                       	smpsAlterNote       $07
0008C3C7 E701                       	dc.b	smpsNoAttack, $01
0008C3C9 E111                       	smpsAlterNote       $11
0008C3CB E701                       	dc.b	smpsNoAttack, $01
0008C3CD E106                       	smpsAlterNote       $06
0008C3CF E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C3D4 E107                       	smpsAlterNote       $07
0008C3D6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C3DE E1EC                       	smpsAlterNote       $EC
0008C3E0 A101                       	dc.b	nAb2, $01
0008C3E2 E108                       	smpsAlterNote       $08
0008C3E4 E701                       	dc.b	smpsNoAttack, $01
0008C3E6 E116                       	smpsAlterNote       $16
0008C3E8 E701                       	dc.b	smpsNoAttack, $01
0008C3EA E1F5                       	smpsAlterNote       $F5
0008C3EC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C3EF E10B                       	smpsAlterNote       $0B
0008C3F1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C3F5 E107                       	smpsAlterNote       $07
0008C3F7 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C3FD E109                       	smpsAlterNote       $09
0008C3FF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C403 E10B                       	smpsAlterNote       $0B
0008C405 9603                       	dc.b	nA1, $03
0008C407 E107                       	smpsAlterNote       $07
0008C409 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C40F E10B                       	smpsAlterNote       $0B
0008C411 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C415 E107                       	smpsAlterNote       $07
0008C417 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C41B E11A                       	smpsAlterNote       $1A
0008C41D A301                       	dc.b	nBb2, $01
0008C41F E1F9                       	smpsAlterNote       $F9
0008C421 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C424 E107                       	smpsAlterNote       $07
0008C426 E701                       	dc.b	smpsNoAttack, $01
0008C428 E1FB                       	smpsAlterNote       $FB
0008C42A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C42D E106                       	smpsAlterNote       $06
0008C42F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C433 E107                       	smpsAlterNote       $07
0008C435 9B03                       	dc.b	nD2, $03
0008C437 E108                       	smpsAlterNote       $08
0008C439 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C43F E109                       	smpsAlterNote       $09
0008C441 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008C445 E10C                       	smpsAlterNote       $0C
0008C447 A303                       	dc.b	nBb2, $03
0008C449 E1F0                       	smpsAlterNote       $F0
0008C44B A401                       	dc.b	nB2, $01
0008C44D E1FD                       	smpsAlterNote       $FD
0008C44F E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008C454 E106                       	smpsAlterNote       $06
0008C456 8001                       	dc.b	nRst, $01
0008C458 E109                       	smpsAlterNote       $09
0008C45A A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C45E E108                       	smpsAlterNote       $08
0008C460 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008C464 E107                       	smpsAlterNote       $07
0008C466 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C46C E10B                       	smpsAlterNote       $0B
0008C46E A203                       	dc.b	nA2, $03
0008C470 E107                       	smpsAlterNote       $07
0008C472 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C476 E1F2                       	smpsAlterNote       $F2
0008C478 A401                       	dc.b	nB2, $01
0008C47A E1FF                       	smpsAlterNote       $FF
0008C47C E701                       	dc.b	smpsNoAttack, $01
0008C47E E107                       	smpsAlterNote       $07
0008C480 E701                       	dc.b	smpsNoAttack, $01
0008C482 E1FB                       	smpsAlterNote       $FB
0008C484 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C487 E106                       	smpsAlterNote       $06
0008C489 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C48D E107                       	smpsAlterNote       $07
0008C48F 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008C499 E117                       	smpsAlterNote       $17
0008C49B A001                       	dc.b	nG2, $01
0008C49D E1FA                       	smpsAlterNote       $FA
0008C49F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C4A2 E108                       	smpsAlterNote       $08
0008C4A4 E701                       	dc.b	smpsNoAttack, $01
0008C4A6 E1E7                       	smpsAlterNote       $E7
0008C4A8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C4AB E103                       	smpsAlterNote       $03
0008C4AD E701                       	dc.b	smpsNoAttack, $01
0008C4AF E10B                       	smpsAlterNote       $0B
0008C4B1 E702                       	dc.b	smpsNoAttack, $02
0008C4B3 E107                       	smpsAlterNote       $07
0008C4B5 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008C4BD E106                       	smpsAlterNote       $06
0008C4BF 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008C4C5 E10C                       	smpsAlterNote       $0C
0008C4C7 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008C4CD E109                       	smpsAlterNote       $09
0008C4CF 9E03                       	dc.b	nF2, $03
0008C4D1 E10C                       	smpsAlterNote       $0C
0008C4D3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C4D7 E1EA                       	smpsAlterNote       $EA
0008C4D9 A201                       	dc.b	nA2, $01
0008C4DB E106                       	smpsAlterNote       $06
0008C4DD E701                       	dc.b	smpsNoAttack, $01
0008C4DF E1E2                       	smpsAlterNote       $E2
0008C4E1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C4E4 E1F0                       	smpsAlterNote       $F0
0008C4E6 E701                       	dc.b	smpsNoAttack, $01
0008C4E8 E10C                       	smpsAlterNote       $0C
0008C4EA E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C4F6 E116                       	smpsAlterNote       $16
0008C4F8 9C01                       	dc.b	nEb2, $01
0008C4FA E105                       	smpsAlterNote       $05
0008C4FC E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C4FF E1F1                       	smpsAlterNote       $F1
0008C501 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C504 E1FF                       	smpsAlterNote       $FF
0008C506 E701                       	dc.b	smpsNoAttack, $01
0008C508 E109                       	smpsAlterNote       $09
0008C50A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C50E E10C                       	smpsAlterNote       $0C
0008C510 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C51C 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008C522 E109                       	smpsAlterNote       $09
0008C524 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C528 E10C                       	smpsAlterNote       $0C
0008C52A 9703                       	dc.b	nBb1, $03
0008C52C E11A                       	smpsAlterNote       $1A
0008C52E A101                       	dc.b	nAb2, $01
0008C530 E1FB                       	smpsAlterNote       $FB
0008C532 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C535 E10A                       	smpsAlterNote       $0A
0008C537 E701                       	dc.b	smpsNoAttack, $01
0008C539 E1E8                       	smpsAlterNote       $E8
0008C53B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C53E E106                       	smpsAlterNote       $06
0008C540 E701                       	dc.b	smpsNoAttack, $01
0008C542 E10C                       	smpsAlterNote       $0C
0008C544 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008C550 E1F9                       	smpsAlterNote       $F9
0008C552 9D01                       	dc.b	nE2, $01
0008C554 E108                       	smpsAlterNote       $08
0008C556 E701                       	dc.b	smpsNoAttack, $01
0008C558 E1F6                       	smpsAlterNote       $F6
0008C55A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C55D E109                       	smpsAlterNote       $09
0008C55F E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008C563 E10C                       	smpsAlterNote       $0C
0008C565 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008C571 E108                       	smpsAlterNote       $08
0008C573 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C579 E106                       	smpsAlterNote       $06
0008C57B A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C57F E108                       	smpsAlterNote       $08
0008C581 9D03                       	dc.b	nE2, $03
0008C583 E1EB                       	smpsAlterNote       $EB
0008C585 A801                       	dc.b	nEb3, $01
0008C587 E109                       	smpsAlterNote       $09
0008C589 E701                       	dc.b	smpsNoAttack, $01
0008C58B E1FA                       	smpsAlterNote       $FA
0008C58D E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C590 E108                       	smpsAlterNote       $08
0008C592 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008C59E E1E9                       	smpsAlterNote       $E9
0008C5A0 A301                       	dc.b	nBb2, $01
0008C5A2 E107                       	smpsAlterNote       $07
0008C5A4 E701                       	dc.b	smpsNoAttack, $01
0008C5A6 E1F0                       	smpsAlterNote       $F0
0008C5A8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C5AB E1F7                       	smpsAlterNote       $F7
0008C5AD E701                       	dc.b	smpsNoAttack, $01
0008C5AF E107                       	smpsAlterNote       $07
0008C5B1 E701                       	dc.b	smpsNoAttack, $01
0008C5B3 E106                       	smpsAlterNote       $06
0008C5B5 E701                       	dc.b	smpsNoAttack, $01
0008C5B7 E108                       	smpsAlterNote       $08
0008C5B9 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C5BF E106                       	smpsAlterNote       $06
0008C5C1 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C5C5 E108                       	smpsAlterNote       $08
0008C5C7 9D03                       	dc.b	nE2, $03
0008C5C9 E10B                       	smpsAlterNote       $0B
0008C5CB 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C5D3 E108                       	smpsAlterNote       $08
0008C5D5 9D03                       	dc.b	nE2, $03
0008C5D7 E10B                       	smpsAlterNote       $0B
0008C5D9 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C5DD E113                       	smpsAlterNote       $13
0008C5DF A001                       	dc.b	nG2, $01
0008C5E1 E118                       	smpsAlterNote       $18
0008C5E3 E701                       	dc.b	smpsNoAttack, $01
0008C5E5 E1E9                       	smpsAlterNote       $E9
0008C5E7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C5EA E1F3                       	smpsAlterNote       $F3
0008C5EC E701                       	dc.b	smpsNoAttack, $01
0008C5EE E1FD                       	smpsAlterNote       $FD
0008C5F0 E701                       	dc.b	smpsNoAttack, $01
0008C5F2 E102                       	smpsAlterNote       $02
0008C5F4 E701                       	dc.b	smpsNoAttack, $01
0008C5F6 E107                       	smpsAlterNote       $07
0008C5F8 8001                       	dc.b	nRst, $01
0008C5FA E10B                       	smpsAlterNote       $0B
0008C5FC 9603                       	dc.b	nA1, $03
0008C5FE E10C                       	smpsAlterNote       $0C
0008C600 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C606 E10B                       	smpsAlterNote       $0B
0008C608 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C614 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C61A E107                       	smpsAlterNote       $07
0008C61C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C622 E10B                       	smpsAlterNote       $0B
0008C624 A203                       	dc.b	nA2, $03
0008C626 E107                       	smpsAlterNote       $07
0008C628 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C62C E1F2                       	smpsAlterNote       $F2
0008C62E A401                       	dc.b	nB2, $01
0008C630 E1FF                       	smpsAlterNote       $FF
0008C632 E701                       	dc.b	smpsNoAttack, $01
0008C634 E107                       	smpsAlterNote       $07
0008C636 E701                       	dc.b	smpsNoAttack, $01
0008C638 E1FB                       	smpsAlterNote       $FB
0008C63A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C63D E106                       	smpsAlterNote       $06
0008C63F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C643 E107                       	smpsAlterNote       $07
0008C645 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C649 E108                       	smpsAlterNote       $08
0008C64B 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C651 E109                       	smpsAlterNote       $09
0008C653 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C657 E10C                       	smpsAlterNote       $0C
0008C659 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C65D E1F0                       	smpsAlterNote       $F0
0008C65F A401                       	dc.b	nB2, $01
0008C661 E109                       	smpsAlterNote       $09
0008C663 E701                       	dc.b	smpsNoAttack, $01
0008C665 E106                       	smpsAlterNote       $06
0008C667 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C66A E109                       	smpsAlterNote       $09
0008C66C A007                       	dc.b	nG2, $07
0008C66E E108                       	smpsAlterNote       $08
0008C670 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C674 E107                       	smpsAlterNote       $07
0008C676 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C67C E10B                       	smpsAlterNote       $0B
0008C67E A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C682 E107                       	smpsAlterNote       $07
0008C684 9B03                       	dc.b	nD2, $03
0008C686 E11A                       	smpsAlterNote       $1A
0008C688 A301                       	dc.b	nBb2, $01
0008C68A E1F2                       	smpsAlterNote       $F2
0008C68C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C68F E1FF                       	smpsAlterNote       $FF
0008C691 E701                       	dc.b	smpsNoAttack, $01
0008C693 E111                       	smpsAlterNote       $11
0008C695 E701                       	dc.b	smpsNoAttack, $01
0008C697 E106                       	smpsAlterNote       $06
0008C699 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C69C E107                       	smpsAlterNote       $07
0008C69E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C6AA E117                       	smpsAlterNote       $17
0008C6AC A001                       	dc.b	nG2, $01
0008C6AE E1FA                       	smpsAlterNote       $FA
0008C6B0 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C6B3 E116                       	smpsAlterNote       $16
0008C6B5 E701                       	dc.b	smpsNoAttack, $01
0008C6B7 E1F5                       	smpsAlterNote       $F5
0008C6B9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C6BC E103                       	smpsAlterNote       $03
0008C6BE E701                       	dc.b	smpsNoAttack, $01
0008C6C0 E10B                       	smpsAlterNote       $0B
0008C6C2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C6C6 E107                       	smpsAlterNote       $07
0008C6C8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C6CE E109                       	smpsAlterNote       $09
0008C6D0 9E03                       	dc.b	nF2, $03
0008C6D2 E10B                       	smpsAlterNote       $0B
0008C6D4 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C6D8 E107                       	smpsAlterNote       $07
0008C6DA 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C6E0 E10B                       	smpsAlterNote       $0B
0008C6E2 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C6E6 E107                       	smpsAlterNote       $07
0008C6E8 9B03                       	dc.b	nD2, $03
0008C6EA E11A                       	smpsAlterNote       $1A
0008C6EC A301                       	dc.b	nBb2, $01
0008C6EE E1F9                       	smpsAlterNote       $F9
0008C6F0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C6F3 E107                       	smpsAlterNote       $07
0008C6F5 E701                       	dc.b	smpsNoAttack, $01
0008C6F7 E111                       	smpsAlterNote       $11
0008C6F9 E701                       	dc.b	smpsNoAttack, $01
0008C6FB E106                       	smpsAlterNote       $06
0008C6FD E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C702 E107                       	smpsAlterNote       $07
0008C704 9B03                       	dc.b	nD2, $03
0008C706 E108                       	smpsAlterNote       $08
0008C708 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C70E E109                       	smpsAlterNote       $09
0008C710 A003                       	dc.b	nG2, $03
0008C712 E10C                       	smpsAlterNote       $0C
0008C714 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C718 E1FD                       	smpsAlterNote       $FD
0008C71A A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C71F E106                       	smpsAlterNote       $06
0008C721 8001                       	dc.b	nRst, $01
0008C723 E109                       	smpsAlterNote       $09
0008C725 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C729 E108                       	smpsAlterNote       $08
0008C72B 9C03                       	dc.b	nEb2, $03
0008C72D E107                       	smpsAlterNote       $07
0008C72F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C735 E10B                       	smpsAlterNote       $0B
0008C737 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C73B E107                       	smpsAlterNote       $07
0008C73D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C741 E11A                       	smpsAlterNote       $1A
0008C743 A301                       	dc.b	nBb2, $01
0008C745 E1F9                       	smpsAlterNote       $F9
0008C747 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C74A E107                       	smpsAlterNote       $07
0008C74C E701                       	dc.b	smpsNoAttack, $01
0008C74E E1FB                       	smpsAlterNote       $FB
0008C750 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C753 E106                       	smpsAlterNote       $06
0008C755 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C759 E107                       	smpsAlterNote       $07
0008C75B 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C763 E1EC                       	smpsAlterNote       $EC
0008C765 A101                       	dc.b	nAb2, $01
0008C767 E108                       	smpsAlterNote       $08
0008C769 E701                       	dc.b	smpsNoAttack, $01
0008C76B E1E7                       	smpsAlterNote       $E7
0008C76D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C770 E1F5                       	smpsAlterNote       $F5
0008C772 E701                       	dc.b	smpsNoAttack, $01
0008C774 E10B                       	smpsAlterNote       $0B
0008C776 E702                       	dc.b	smpsNoAttack, $02
0008C778 E107                       	smpsAlterNote       $07
0008C77A 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C780 E106                       	smpsAlterNote       $06
0008C782 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C788 E10C                       	smpsAlterNote       $0C
0008C78A 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C792 E109                       	smpsAlterNote       $09
0008C794 9E03                       	dc.b	nF2, $03
0008C796 E10C                       	smpsAlterNote       $0C
0008C798 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C79C E1EA                       	smpsAlterNote       $EA
0008C79E A201                       	dc.b	nA2, $01
0008C7A0 E106                       	smpsAlterNote       $06
0008C7A2 E701                       	dc.b	smpsNoAttack, $01
0008C7A4 E114                       	smpsAlterNote       $14
0008C7A6 E701                       	dc.b	smpsNoAttack, $01
0008C7A8 E1F0                       	smpsAlterNote       $F0
0008C7AA E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C7AD E10C                       	smpsAlterNote       $0C
0008C7AF E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C7BB 9703                       	dc.b	nBb1, $03
0008C7BD E116                       	smpsAlterNote       $16
0008C7BF 9C01                       	dc.b	nEb2, $01
0008C7C1 E105                       	smpsAlterNote       $05
0008C7C3 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C7C6 E113                       	smpsAlterNote       $13
0008C7C8 E701                       	dc.b	smpsNoAttack, $01
0008C7CA E1FF                       	smpsAlterNote       $FF
0008C7CC E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C7CF E109                       	smpsAlterNote       $09
0008C7D1 E703                       	dc.b	smpsNoAttack, $03
0008C7D3 E10C                       	smpsAlterNote       $0C
0008C7D5 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C7E1 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C7E9 E109                       	smpsAlterNote       $09
0008C7EB 9E03                       	dc.b	nF2, $03
0008C7ED E10C                       	smpsAlterNote       $0C
0008C7EF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C7F3 E1EC                       	smpsAlterNote       $EC
0008C7F5 A201                       	dc.b	nA2, $01
0008C7F7 E10A                       	smpsAlterNote       $0A
0008C7F9 E701                       	dc.b	smpsNoAttack, $01
0008C7FB E1E8                       	smpsAlterNote       $E8
0008C7FD E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C800 E1F7                       	smpsAlterNote       $F7
0008C802 E701                       	dc.b	smpsNoAttack, $01
0008C804 E10C                       	smpsAlterNote       $0C
0008C806 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C812 E1EA                       	smpsAlterNote       $EA
0008C814 9D01                       	dc.b	nE2, $01
0008C816 E108                       	smpsAlterNote       $08
0008C818 E701                       	dc.b	smpsNoAttack, $01
0008C81A E1F6                       	smpsAlterNote       $F6
0008C81C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C81F E105                       	smpsAlterNote       $05
0008C821 E701                       	dc.b	smpsNoAttack, $01
0008C823 E109                       	smpsAlterNote       $09
0008C825 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C829 E10C                       	smpsAlterNote       $0C
0008C82B 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C837 E108                       	smpsAlterNote       $08
0008C839 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C83F E106                       	smpsAlterNote       $06
0008C841 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C845 E108                       	smpsAlterNote       $08
0008C847 9D03                       	dc.b	nE2, $03
0008C849 E1EB                       	smpsAlterNote       $EB
0008C84B A801                       	dc.b	nEb3, $01
0008C84D E109                       	smpsAlterNote       $09
0008C84F E701                       	dc.b	smpsNoAttack, $01
0008C851 E1EB                       	smpsAlterNote       $EB
0008C853 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C856 E108                       	smpsAlterNote       $08
0008C858 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C864 E1E9                       	smpsAlterNote       $E9
0008C866 A301                       	dc.b	nBb2, $01
0008C868 E1F8                       	smpsAlterNote       $F8
0008C86A E701                       	dc.b	smpsNoAttack, $01
0008C86C E116                       	smpsAlterNote       $16
0008C86E E701                       	dc.b	smpsNoAttack, $01
0008C870 E1F7                       	smpsAlterNote       $F7
0008C872 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C875 E107                       	smpsAlterNote       $07
0008C877 E701                       	dc.b	smpsNoAttack, $01
0008C879 E1EE                       	smpsAlterNote       $EE
0008C87B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C87E E106                       	smpsAlterNote       $06
0008C880 8001                       	dc.b	nRst, $01
0008C882 E108                       	smpsAlterNote       $08
0008C884 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C88A E106                       	smpsAlterNote       $06
0008C88C A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C890 E108                       	smpsAlterNote       $08
0008C892 9D03                       	dc.b	nE2, $03
0008C894 E10B                       	smpsAlterNote       $0B
0008C896 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C89C E108                       	smpsAlterNote       $08
0008C89E 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C8A2 E10B                       	smpsAlterNote       $0B
0008C8A4 9603                       	dc.b	nA1, $03
0008C8A6 E10E                       	smpsAlterNote       $0E
0008C8A8 A001                       	dc.b	nG2, $01
0008C8AA E118                       	smpsAlterNote       $18
0008C8AC E701                       	dc.b	smpsNoAttack, $01
0008C8AE E1E9                       	smpsAlterNote       $E9
0008C8B0 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C8B3 E1EE                       	smpsAlterNote       $EE
0008C8B5 E701                       	dc.b	smpsNoAttack, $01
0008C8B7 E1F8                       	smpsAlterNote       $F8
0008C8B9 E701                       	dc.b	smpsNoAttack, $01
0008C8BB E102                       	smpsAlterNote       $02
0008C8BD E701                       	dc.b	smpsNoAttack, $01
0008C8BF E107                       	smpsAlterNote       $07
0008C8C1 8001                       	dc.b	nRst, $01
0008C8C3 E10B                       	smpsAlterNote       $0B
0008C8C5 9603                       	dc.b	nA1, $03
0008C8C7 E10C                       	smpsAlterNote       $0C
0008C8C9 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C8CF E10B                       	smpsAlterNote       $0B
0008C8D1 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C8DD 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C8E1 E10C                       	smpsAlterNote       $0C
0008C8E3 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C8EF 8001                       	dc.b	nRst, $01
0008C8F1 E10B                       	smpsAlterNote       $0B
0008C8F3 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C8FB E107                       	smpsAlterNote       $07
0008C8FD 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C901 E10B                       	smpsAlterNote       $0B
0008C903 9603                       	dc.b	nA1, $03
0008C905 E109                       	smpsAlterNote       $09
0008C907 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C90B E108                       	smpsAlterNote       $08
0008C90D 9D06                       	dc.b	nE2, $06
0008C90F E107                       	smpsAlterNote       $07
0008C911 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C915 E106                       	smpsAlterNote       $06
0008C917 9903                       	dc.b	nC2, $03
0008C919 E10C                       	smpsAlterNote       $0C
0008C91B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C91F E10B                       	smpsAlterNote       $0B
0008C921 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C92D 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C937 E10C                       	smpsAlterNote       $0C
0008C939 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C945 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C951 8001                       	dc.b	nRst, $01
0008C953 E10B                       	smpsAlterNote       $0B
0008C955 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C961 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C96D 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C979 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C983 E10C                       	smpsAlterNote       $0C
0008C985 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C991 E10B                       	smpsAlterNote       $0B
0008C993 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C99B E107                       	smpsAlterNote       $07
0008C99D 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C9A1 E10B                       	smpsAlterNote       $0B
0008C9A3 9603                       	dc.b	nA1, $03
0008C9A5 E109                       	smpsAlterNote       $09
0008C9A7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C9AB E108                       	smpsAlterNote       $08
0008C9AD 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C9B1 E107                       	smpsAlterNote       $07
0008C9B3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C9B7 E106                       	smpsAlterNote       $06
0008C9B9 9903                       	dc.b	nC2, $03
0008C9BB E10C                       	smpsAlterNote       $0C
0008C9BD 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C9C1 E10B                       	smpsAlterNote       $0B
0008C9C3 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C9CF 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C9D9 E10C                       	smpsAlterNote       $0C
0008C9DB 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C9E7 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C9F3 8001                       	dc.b	nRst, $01
0008C9F5 E10B                       	smpsAlterNote       $0B
0008C9F7 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008CA03 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008CA0D E10C                       	smpsAlterNote       $0C
0008CA0F 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008CA1B 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008CA27 E10B                       	smpsAlterNote       $0B
0008CA29 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008CA35 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008CA3F E10C                       	smpsAlterNote       $0C
0008CA41 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008CA4D 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008CA59 E10B                       	smpsAlterNote       $0B
0008CA5B 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008CA67 8001                       	dc.b	nRst, $01
0008CA69 E1EC                       	smpsAlterNote       $EC
0008CA6B A101                       	dc.b	nAb2, $01
0008CA6D E1FA                       	smpsAlterNote       $FA
0008CA6F E701                       	dc.b	smpsNoAttack, $01
0008CA71 E116                       	smpsAlterNote       $16
0008CA73 E701                       	dc.b	smpsNoAttack, $01
0008CA75 E1F5                       	smpsAlterNote       $F5
0008CA77 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008CA7A E10B                       	smpsAlterNote       $0B
0008CA7C E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008CA88 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008CA94 E107                       	smpsAlterNote       $07
0008CA96 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CA9C E10B                       	smpsAlterNote       $0B
0008CA9E A203                       	dc.b	nA2, $03
0008CAA0 E107                       	smpsAlterNote       $07
0008CAA2 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CAA6 E1F3                       	smpsAlterNote       $F3
0008CAA8 A401                       	dc.b	nB2, $01
0008CAAA E102                       	smpsAlterNote       $02
0008CAAC E701                       	dc.b	smpsNoAttack, $01
0008CAAE E109                       	smpsAlterNote       $09
0008CAB0 E701                       	dc.b	smpsNoAttack, $01
0008CAB2 E102                       	smpsAlterNote       $02
0008CAB4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CAB7 E106                       	smpsAlterNote       $06
0008CAB9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CABD E107                       	smpsAlterNote       $07
0008CABF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CAC3 E108                       	smpsAlterNote       $08
0008CAC5 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008CACB E109                       	smpsAlterNote       $09
0008CACD A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CAD1 E1F2                       	smpsAlterNote       $F2
0008CAD3 A401                       	dc.b	nB2, $01
0008CAD5 E1FF                       	smpsAlterNote       $FF
0008CAD7 E701                       	dc.b	smpsNoAttack, $01
0008CAD9 E111                       	smpsAlterNote       $11
0008CADB E701                       	dc.b	smpsNoAttack, $01
0008CADD E1FB                       	smpsAlterNote       $FB
0008CADF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CAE2 E106                       	smpsAlterNote       $06
0008CAE4 E702                       	dc.b	smpsNoAttack, $02
0008CAE6 E109                       	smpsAlterNote       $09
0008CAE8 A007                       	dc.b	nG2, $07
0008CAEA E108                       	smpsAlterNote       $08
0008CAEC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008CAF0 E107                       	smpsAlterNote       $07
0008CAF2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CAF8 E10B                       	smpsAlterNote       $0B
0008CAFA A202 8001                  	dc.b	nA2, $02, nRst, $01
0008CAFE E107                       	smpsAlterNote       $07
0008CB00 9B03                       	dc.b	nD2, $03
0008CB02 E11A                       	smpsAlterNote       $1A
0008CB04 A301                       	dc.b	nBb2, $01
0008CB06 E1F2                       	smpsAlterNote       $F2
0008CB08 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CB0B E1FF                       	smpsAlterNote       $FF
0008CB0D E701                       	dc.b	smpsNoAttack, $01
0008CB0F E111                       	smpsAlterNote       $11
0008CB11 E701                       	dc.b	smpsNoAttack, $01
0008CB13 E106                       	smpsAlterNote       $06
0008CB15 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB18 E107                       	smpsAlterNote       $07
0008CB1A 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008CB26 E117                       	smpsAlterNote       $17
0008CB28 A001                       	dc.b	nG2, $01
0008CB2A E1FA                       	smpsAlterNote       $FA
0008CB2C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008CB2F E116                       	smpsAlterNote       $16
0008CB31 E701                       	dc.b	smpsNoAttack, $01
0008CB33 E1F5                       	smpsAlterNote       $F5
0008CB35 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008CB38 E103                       	smpsAlterNote       $03
0008CB3A E701                       	dc.b	smpsNoAttack, $01
0008CB3C E10B                       	smpsAlterNote       $0B
0008CB3E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CB42 E107                       	smpsAlterNote       $07
0008CB44 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CB4A E109                       	smpsAlterNote       $09
0008CB4C 9E03                       	dc.b	nF2, $03
0008CB4E E10B                       	smpsAlterNote       $0B
0008CB50 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008CB54 E107                       	smpsAlterNote       $07
0008CB56 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008CB5C E10B                       	smpsAlterNote       $0B
0008CB5E A203 8001                  	dc.b	nA2, $03, nRst, $01
0008CB62 E107                       	smpsAlterNote       $07
0008CB64 9B03                       	dc.b	nD2, $03
0008CB66 E11A                       	smpsAlterNote       $1A
0008CB68 A301                       	dc.b	nBb2, $01
0008CB6A E1F9                       	smpsAlterNote       $F9
0008CB6C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CB6F E1FF                       	smpsAlterNote       $FF
0008CB71 E701                       	dc.b	smpsNoAttack, $01
0008CB73 E111                       	smpsAlterNote       $11
0008CB75 E701                       	dc.b	smpsNoAttack, $01
0008CB77 E106                       	smpsAlterNote       $06
0008CB79 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB7C E107                       	smpsAlterNote       $07
0008CB7E 9B03                       	dc.b	nD2, $03
0008CB80 E108                       	smpsAlterNote       $08
0008CB82 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008CB88 E109                       	smpsAlterNote       $09
0008CB8A A003                       	dc.b	nG2, $03
0008CB8C E1F0                       	smpsAlterNote       $F0
0008CB8E A501                       	dc.b	nC3, $01
0008CB90 E106                       	smpsAlterNote       $06
0008CB92 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008CB96 E109                       	smpsAlterNote       $09
0008CB98 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008CB9C E108                       	smpsAlterNote       $08
0008CB9E 9C03                       	dc.b	nEb2, $03
0008CBA0 E107                       	smpsAlterNote       $07
0008CBA2 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008CBA8 E10B                       	smpsAlterNote       $0B
0008CBAA A203 8001                  	dc.b	nA2, $03, nRst, $01
0008CBAE E107                       	smpsAlterNote       $07
0008CBB0 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CBB4 E11A                       	smpsAlterNote       $1A
0008CBB6 A301                       	dc.b	nBb2, $01
0008CBB8 E1F9                       	smpsAlterNote       $F9
0008CBBA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CBBD E107                       	smpsAlterNote       $07
0008CBBF E701                       	dc.b	smpsNoAttack, $01
0008CBC1 E1FB                       	smpsAlterNote       $FB
0008CBC3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CBC6 E106                       	smpsAlterNote       $06
0008CBC8 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CBCC E107                       	smpsAlterNote       $07
0008CBCE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008CBD6 E1EC                       	smpsAlterNote       $EC
0008CBD8 A101                       	dc.b	nAb2, $01
0008CBDA E108                       	smpsAlterNote       $08
0008CBDC E701                       	dc.b	smpsNoAttack, $01
0008CBDE E1E7                       	smpsAlterNote       $E7
0008CBE0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008CBE3 E1F5                       	smpsAlterNote       $F5
0008CBE5 E701                       	dc.b	smpsNoAttack, $01
0008CBE7 E10B                       	smpsAlterNote       $0B
0008CBE9 E702                       	dc.b	smpsNoAttack, $02
0008CBEB E107                       	smpsAlterNote       $07
0008CBED 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008CBF3 E106                       	smpsAlterNote       $06
0008CBF5 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008CBFB E10C                       	smpsAlterNote       $0C
0008CBFD 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008CC05 E109                       	smpsAlterNote       $09
0008CC07 9E03                       	dc.b	nF2, $03
0008CC09 E10C                       	smpsAlterNote       $0C
0008CC0B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CC0F E1EA                       	smpsAlterNote       $EA
0008CC11 A201                       	dc.b	nA2, $01
0008CC13 E106                       	smpsAlterNote       $06
0008CC15 E701                       	dc.b	smpsNoAttack, $01
0008CC17 E114                       	smpsAlterNote       $14
0008CC19 E701                       	dc.b	smpsNoAttack, $01
0008CC1B E1F0                       	smpsAlterNote       $F0
0008CC1D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008CC20 E10C                       	smpsAlterNote       $0C
0008CC22 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008CC2E 9703                       	dc.b	nBb1, $03
0008CC30 E116                       	smpsAlterNote       $16
0008CC32 9C01                       	dc.b	nEb2, $01
0008CC34 E105                       	smpsAlterNote       $05
0008CC36 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008CC39 E113                       	smpsAlterNote       $13
0008CC3B E701                       	dc.b	smpsNoAttack, $01
0008CC3D E1FF                       	smpsAlterNote       $FF
0008CC3F E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008CC42 E109                       	smpsAlterNote       $09
0008CC44 E703                       	dc.b	smpsNoAttack, $03
0008CC46 E10C                       	smpsAlterNote       $0C
0008CC48 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008CC54 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008CC5C E109                       	smpsAlterNote       $09
0008CC5E 9E03                       	dc.b	nF2, $03
0008CC60 E10C                       	smpsAlterNote       $0C
0008CC62 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CC66 E1EA                       	smpsAlterNote       $EA
0008CC68 A201                       	dc.b	nA2, $01
0008CC6A E106                       	smpsAlterNote       $06
0008CC6C E701                       	dc.b	smpsNoAttack, $01
0008CC6E E1E2                       	smpsAlterNote       $E2
0008CC70 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008CC73 E1F0                       	smpsAlterNote       $F0
0008CC75 E701                       	dc.b	smpsNoAttack, $01
0008CC77 E10C                       	smpsAlterNote       $0C
0008CC79 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008CC85 E116                       	smpsAlterNote       $16
0008CC87 9C01                       	dc.b	nEb2, $01
0008CC89 E105                       	smpsAlterNote       $05
0008CC8B E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008CC8E E1F1                       	smpsAlterNote       $F1
0008CC90 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008CC93 E1FF                       	smpsAlterNote       $FF
0008CC95 E701                       	dc.b	smpsNoAttack, $01
0008CC97 E109                       	smpsAlterNote       $09
0008CC99 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CC9D E10C                       	smpsAlterNote       $0C
0008CC9F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008CCAB E106                       	smpsAlterNote       $06
0008CCAD 9903                       	dc.b	nC2, $03
0008CCAF E107                       	smpsAlterNote       $07
0008CCB1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CCB5 E109                       	smpsAlterNote       $09
0008CCB7 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008CCBD E107                       	smpsAlterNote       $07
0008CCBF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CCC3 E108                       	smpsAlterNote       $08
0008CCC5 9D03                       	dc.b	nE2, $03
0008CCC7 E10B                       	smpsAlterNote       $0B
0008CCC9 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008CCCF E109                       	smpsAlterNote       $09
0008CCD1 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008CCD7 E10C                       	smpsAlterNote       $0C
0008CCD9 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008CCDF E106                       	smpsAlterNote       $06
0008CCE1 9903                       	dc.b	nC2, $03
0008CCE3 E11A                       	smpsAlterNote       $1A
0008CCE5 A301                       	dc.b	nBb2, $01
0008CCE7 E1F9                       	smpsAlterNote       $F9
0008CCE9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CCEC E1FF                       	smpsAlterNote       $FF
0008CCEE E701                       	dc.b	smpsNoAttack, $01
0008CCF0 E111                       	smpsAlterNote       $11
0008CCF2 E701                       	dc.b	smpsNoAttack, $01
0008CCF4 E106                       	smpsAlterNote       $06
0008CCF6 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008CCFD E109                       	smpsAlterNote       $09
0008CCFF A003                       	dc.b	nG2, $03
0008CD01 E106                       	smpsAlterNote       $06
0008CD03 9907                       	dc.b	nC2, $07
0008CD05 E107                       	smpsAlterNote       $07
0008CD07 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008CD0F E10B                       	smpsAlterNote       $0B
0008CD11 A203                       	dc.b	nA2, $03
0008CD13 E107                       	smpsAlterNote       $07
0008CD15 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CD19 E1F2                       	smpsAlterNote       $F2
0008CD1B A401                       	dc.b	nB2, $01
0008CD1D E1F9                       	smpsAlterNote       $F9
0008CD1F E701                       	dc.b	smpsNoAttack, $01
0008CD21 E107                       	smpsAlterNote       $07
0008CD23 E701                       	dc.b	smpsNoAttack, $01
0008CD25 E1FB                       	smpsAlterNote       $FB
0008CD27 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CD2A E106                       	smpsAlterNote       $06
0008CD2C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CD30 E107                       	smpsAlterNote       $07
0008CD32 9B03                       	dc.b	nD2, $03
0008CD34 E108                       	smpsAlterNote       $08
0008CD36 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CD3C E109                       	smpsAlterNote       $09
0008CD3E A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CD42 E1F2                       	smpsAlterNote       $F2
0008CD44 A401                       	dc.b	nB2, $01
0008CD46 E1F9                       	smpsAlterNote       $F9
0008CD48 E701                       	dc.b	smpsNoAttack, $01
0008CD4A E107                       	smpsAlterNote       $07
0008CD4C E701                       	dc.b	smpsNoAttack, $01
0008CD4E E1FB                       	smpsAlterNote       $FB
0008CD50 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CD53 E106                       	smpsAlterNote       $06
0008CD55 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CD59 E108                       	smpsAlterNote       $08
0008CD5B 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008CD5F E10C                       	smpsAlterNote       $0C
0008CD61 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008CD65 E107                       	smpsAlterNote       $07
0008CD67 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CD6D E10B                       	smpsAlterNote       $0B
0008CD6F A203                       	dc.b	nA2, $03
0008CD71 E107                       	smpsAlterNote       $07
0008CD73 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CD77 E1F2                       	smpsAlterNote       $F2
0008CD79 A401                       	dc.b	nB2, $01
0008CD7B E1FF                       	smpsAlterNote       $FF
0008CD7D E701                       	dc.b	smpsNoAttack, $01
0008CD7F E107                       	smpsAlterNote       $07
0008CD81 E701                       	dc.b	smpsNoAttack, $01
0008CD83 E1FB                       	smpsAlterNote       $FB
0008CD85 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CD88 E106                       	smpsAlterNote       $06
0008CD8A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CD8E E107                       	smpsAlterNote       $07
0008CD90 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CD94 E108                       	smpsAlterNote       $08
0008CD96 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CD9C E109                       	smpsAlterNote       $09
0008CD9E A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CDA2 E1F2                       	smpsAlterNote       $F2
0008CDA4 A401                       	dc.b	nB2, $01
0008CDA6 E1FF                       	smpsAlterNote       $FF
0008CDA8 E701                       	dc.b	smpsNoAttack, $01
0008CDAA E111                       	smpsAlterNote       $11
0008CDAC E701                       	dc.b	smpsNoAttack, $01
0008CDAE E1FB                       	smpsAlterNote       $FB
0008CDB0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CDB3 E106                       	smpsAlterNote       $06
0008CDB5 E702                       	dc.b	smpsNoAttack, $02
0008CDB7 E108                       	smpsAlterNote       $08
0008CDB9 9C07                       	dc.b	nEb2, $07
0008CDBB E10C                       	smpsAlterNote       $0C
0008CDBD A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CDC1 E107                       	smpsAlterNote       $07
0008CDC3 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CDC9 E10B                       	smpsAlterNote       $0B
0008CDCB A202 8001                  	dc.b	nA2, $02, nRst, $01
0008CDCF E107                       	smpsAlterNote       $07
0008CDD1 9B03                       	dc.b	nD2, $03
0008CDD3 E11A                       	smpsAlterNote       $1A
0008CDD5 A301                       	dc.b	nBb2, $01
0008CDD7 E1F2                       	smpsAlterNote       $F2
0008CDD9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CDDC E1FF                       	smpsAlterNote       $FF
0008CDDE E701                       	dc.b	smpsNoAttack, $01
0008CDE0 E111                       	smpsAlterNote       $11
0008CDE2 E701                       	dc.b	smpsNoAttack, $01
0008CDE4 E106                       	smpsAlterNote       $06
0008CDE6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CDE9 E107                       	smpsAlterNote       $07
0008CDEB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CDEF E108                       	smpsAlterNote       $08
0008CDF1 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008CDF9 E109                       	smpsAlterNote       $09
0008CDFB A003                       	dc.b	nG2, $03
0008CDFD E11A                       	smpsAlterNote       $1A
0008CDFF A301                       	dc.b	nBb2, $01
0008CE01 E1F2                       	smpsAlterNote       $F2
0008CE03 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CE06 E1FF                       	smpsAlterNote       $FF
0008CE08 E701                       	dc.b	smpsNoAttack, $01
0008CE0A E111                       	smpsAlterNote       $11
0008CE0C E701                       	dc.b	smpsNoAttack, $01
0008CE0E E106                       	smpsAlterNote       $06
0008CE10 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CE13 E108                       	smpsAlterNote       $08
0008CE15 9C07                       	dc.b	nEb2, $07
0008CE17 E10C                       	smpsAlterNote       $0C
0008CE19 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CE1D E107                       	smpsAlterNote       $07
0008CE1F 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008CE2B 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008CE35 E108                       	smpsAlterNote       $08
0008CE37 9C06                       	dc.b	nEb2, $06
0008CE39 E10C                       	smpsAlterNote       $0C
0008CE3B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CE3F E108                       	smpsAlterNote       $08
0008CE41 9C03                       	dc.b	nEb2, $03
0008CE43 E109                       	smpsAlterNote       $09
0008CE45 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CE49 E10C                       	smpsAlterNote       $0C
0008CE4B A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008CE53 E107                       	smpsAlterNote       $07
0008CE55 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CE59 F6F4 F8                    	smpsJump            music84_Jump04
0008CE5C                            
0008CE5C                            ; FM2 Data
0008CE5C                            music84_FM2:
0008CE5C E0C0                       	smpsPan             panCenter, $00
0008CE60 E10B                       	smpsAlterNote       $0B
0008CE62 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008CE66 E109                       	smpsAlterNote       $09
0008CE68 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008CE6C E108                       	smpsAlterNote       $08
0008CE6E C103 8004                  	dc.b	nE5, $03, nRst, $04
0008CE74 E080                       	smpsPan             panLeft, $00
0008CE76 E10C                       	smpsAlterNote       $0C
0008CE78 E6F9                       	smpsAlterVol        $F9
0008CE7A C703                       	dc.b	nBb5, $03
0008CE7C E10B                       	smpsAlterNote       $0B
0008CE7E C603 8001                  	dc.b	nA5, $03, nRst, $01
0008CE82 E109                       	smpsAlterNote       $09
0008CE84 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008CE8A E108                       	smpsAlterNote       $08
0008CE8C C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CE90 E106                       	smpsAlterNote       $06
0008CE92 BD03                       	dc.b	nC5, $03
0008CE94 E10B                       	smpsAlterNote       $0B
0008CE96 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008CE9C E0C0                       	smpsPan             panCenter, $00
0008CE9E E107                       	smpsAlterNote       $07
0008CEA0 E606                       	smpsAlterVol        $06
0008CEA2 BF03                       	dc.b	nD5, $03
0008CEA4                            
0008CEA4                            music84_Jump03:
0008CEA4 E108                       	smpsAlterNote       $08
0008CEA6 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CEAA E109                       	smpsAlterNote       $09
0008CEAC C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008CEB2 E10B                       	smpsAlterNote       $0B
0008CEB4 C607                       	dc.b	nA5, $07
0008CEB6 E107                       	smpsAlterNote       $07
0008CEB8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CEBC E106                       	smpsAlterNote       $06
0008CEBE C90D                       	dc.b	nC6, $0D
0008CEC0 E100                       	smpsAlterNote       $00
0008CEC2 E701                       	dc.b	smpsNoAttack, $01
0008CEC4 E1FF                       	smpsAlterNote       $FF
0008CEC6 E701                       	dc.b	smpsNoAttack, $01
0008CEC8 E103                       	smpsAlterNote       $03
0008CECA E701                       	dc.b	smpsNoAttack, $01
0008CECC E109                       	smpsAlterNote       $09
0008CECE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CED2 E106                       	smpsAlterNote       $06
0008CED4 E701                       	dc.b	smpsNoAttack, $01
0008CED6 E100                       	smpsAlterNote       $00
0008CED8 E701                       	dc.b	smpsNoAttack, $01
0008CEDA E10C                       	smpsAlterNote       $0C
0008CEDC C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CEE0 E10B                       	smpsAlterNote       $0B
0008CEE2 C603                       	dc.b	nA5, $03
0008CEE4 E109                       	smpsAlterNote       $09
0008CEE6 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CEEA E10B                       	smpsAlterNote       $0B
0008CEEC C60D                       	dc.b	nA5, $0D
0008CEEE E105                       	smpsAlterNote       $05
0008CEF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEF4 E10B                       	smpsAlterNote       $0B
0008CEF6 E701                       	dc.b	smpsNoAttack, $01
0008CEF8 E10E                       	smpsAlterNote       $0E
0008CEFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CEFE E108                       	smpsAlterNote       $08
0008CF00 E701                       	dc.b	smpsNoAttack, $01
0008CF02 E104                       	smpsAlterNote       $04
0008CF04 E701                       	dc.b	smpsNoAttack, $01
0008CF06 E105                       	smpsAlterNote       $05
0008CF08 E701                       	dc.b	smpsNoAttack, $01
0008CF0A E10B                       	smpsAlterNote       $0B
0008CF0C E701                       	dc.b	smpsNoAttack, $01
0008CF0E E10F                       	smpsAlterNote       $0F
0008CF10 E701                       	dc.b	smpsNoAttack, $01
0008CF12 E10B                       	smpsAlterNote       $0B
0008CF14 E701                       	dc.b	smpsNoAttack, $01
0008CF16 E108                       	smpsAlterNote       $08
0008CF18 E701                       	dc.b	smpsNoAttack, $01
0008CF1A E104                       	smpsAlterNote       $04
0008CF1C E701                       	dc.b	smpsNoAttack, $01
0008CF1E E108                       	smpsAlterNote       $08
0008CF20 E701                       	dc.b	smpsNoAttack, $01
0008CF22 E10E                       	smpsAlterNote       $0E
0008CF24 E701                       	dc.b	smpsNoAttack, $01
0008CF26 E10F                       	smpsAlterNote       $0F
0008CF28 E701                       	dc.b	smpsNoAttack, $01
0008CF2A E10B                       	smpsAlterNote       $0B
0008CF2C E701                       	dc.b	smpsNoAttack, $01
0008CF2E E105                       	smpsAlterNote       $05
0008CF30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF34 E108                       	smpsAlterNote       $08
0008CF36 E701                       	dc.b	smpsNoAttack, $01
0008CF38 E10E                       	smpsAlterNote       $0E
0008CF3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF3E E108                       	smpsAlterNote       $08
0008CF40 E701                       	dc.b	smpsNoAttack, $01
0008CF42 E105                       	smpsAlterNote       $05
0008CF44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF48 E10B                       	smpsAlterNote       $0B
0008CF4A E701                       	dc.b	smpsNoAttack, $01
0008CF4C E10F                       	smpsAlterNote       $0F
0008CF4E E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008CF52 E107                       	smpsAlterNote       $07
0008CF54 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CF58 E108                       	smpsAlterNote       $08
0008CF5A C103                       	dc.b	nE5, $03
0008CF5C E109                       	smpsAlterNote       $09
0008CF5E C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CF66 E10B                       	smpsAlterNote       $0B
0008CF68 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CF6C E107                       	smpsAlterNote       $07
0008CF6E BF03                       	dc.b	nD5, $03
0008CF70 E106                       	smpsAlterNote       $06
0008CF72 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008CF76 E107                       	smpsAlterNote       $07
0008CF78 CB03                       	dc.b	nD6, $03
0008CF7A E10C                       	smpsAlterNote       $0C
0008CF7C C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008CF80 E10B                       	smpsAlterNote       $0B
0008CF82 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CF86 E109                       	smpsAlterNote       $09
0008CF88 C404                       	dc.b	nG5, $04
0008CF8A E10B                       	smpsAlterNote       $0B
0008CF8C C60D                       	dc.b	nA5, $0D
0008CF8E E108                       	smpsAlterNote       $08
0008CF90 E701                       	dc.b	smpsNoAttack, $01
0008CF92 E104                       	smpsAlterNote       $04
0008CF94 E701                       	dc.b	smpsNoAttack, $01
0008CF96 E108                       	smpsAlterNote       $08
0008CF98 E701                       	dc.b	smpsNoAttack, $01
0008CF9A E10B                       	smpsAlterNote       $0B
0008CF9C E701                       	dc.b	smpsNoAttack, $01
0008CF9E E10F                       	smpsAlterNote       $0F
0008CFA0 E701                       	dc.b	smpsNoAttack, $01
0008CFA2 E10B                       	smpsAlterNote       $0B
0008CFA4 E701                       	dc.b	smpsNoAttack, $01
0008CFA6 E105                       	smpsAlterNote       $05
0008CFA8 E701                       	dc.b	smpsNoAttack, $01
0008CFAA E104                       	smpsAlterNote       $04
0008CFAC E701                       	dc.b	smpsNoAttack, $01
0008CFAE E108                       	smpsAlterNote       $08
0008CFB0 E701                       	dc.b	smpsNoAttack, $01
0008CFB2 E10E                       	smpsAlterNote       $0E
0008CFB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFB8 E10B                       	smpsAlterNote       $0B
0008CFBA E701                       	dc.b	smpsNoAttack, $01
0008CFBC E105                       	smpsAlterNote       $05
0008CFBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFC2 E10B                       	smpsAlterNote       $0B
0008CFC4 E701                       	dc.b	smpsNoAttack, $01
0008CFC6 E10E                       	smpsAlterNote       $0E
0008CFC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFCC E108                       	smpsAlterNote       $08
0008CFCE E701                       	dc.b	smpsNoAttack, $01
0008CFD0 E104                       	smpsAlterNote       $04
0008CFD2 E701                       	dc.b	smpsNoAttack, $01
0008CFD4 E105                       	smpsAlterNote       $05
0008CFD6 E701                       	dc.b	smpsNoAttack, $01
0008CFD8 E10B                       	smpsAlterNote       $0B
0008CFDA E701                       	dc.b	smpsNoAttack, $01
0008CFDC E10F                       	smpsAlterNote       $0F
0008CFDE E701                       	dc.b	smpsNoAttack, $01
0008CFE0 E10B                       	smpsAlterNote       $0B
0008CFE2 E701                       	dc.b	smpsNoAttack, $01
0008CFE4 E108                       	smpsAlterNote       $08
0008CFE6 E701                       	dc.b	smpsNoAttack, $01
0008CFE8 E105                       	smpsAlterNote       $05
0008CFEA 8001                       	dc.b	nRst, $01
0008CFEC E109                       	smpsAlterNote       $09
0008CFEE C401                       	dc.b	nG5, $01
0008CFF0 E10B                       	smpsAlterNote       $0B
0008CFF2 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CFFB E109                       	smpsAlterNote       $09
0008CFFD C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D001 E10B                       	smpsAlterNote       $0B
0008D003 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D007 E107                       	smpsAlterNote       $07
0008D009 BF0D                       	dc.b	nD5, $0D
0008D00B E101                       	smpsAlterNote       $01
0008D00D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D011 E104                       	smpsAlterNote       $04
0008D013 E701                       	dc.b	smpsNoAttack, $01
0008D015 E10A                       	smpsAlterNote       $0A
0008D017 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D01B E104                       	smpsAlterNote       $04
0008D01D E701                       	dc.b	smpsNoAttack, $01
0008D01F E101                       	smpsAlterNote       $01
0008D021 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D025 E107                       	smpsAlterNote       $07
0008D027 E701                       	dc.b	smpsNoAttack, $01
0008D029 E10B                       	smpsAlterNote       $0B
0008D02B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D02F E108                       	smpsAlterNote       $08
0008D031 C101                       	dc.b	nE5, $01
0008D033 E109                       	smpsAlterNote       $09
0008D035 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008D03A E10B                       	smpsAlterNote       $0B
0008D03C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D044 E108                       	smpsAlterNote       $08
0008D046 CD06                       	dc.b	nE6, $06
0008D048 E109                       	smpsAlterNote       $09
0008D04A CE07                       	dc.b	nF6, $07
0008D04C E108                       	smpsAlterNote       $08
0008D04E CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008D052 E106                       	smpsAlterNote       $06
0008D054 C903                       	dc.b	nC6, $03
0008D056 E109                       	smpsAlterNote       $09
0008D058 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D05C E10C                       	smpsAlterNote       $0C
0008D05E C70D                       	dc.b	nBb5, $0D
0008D060 E106                       	smpsAlterNote       $06
0008D062 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D066 E109                       	smpsAlterNote       $09
0008D068 E701                       	dc.b	smpsNoAttack, $01
0008D06A E10F                       	smpsAlterNote       $0F
0008D06C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D070 E109                       	smpsAlterNote       $09
0008D072 E701                       	dc.b	smpsNoAttack, $01
0008D074 E106                       	smpsAlterNote       $06
0008D076 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D07A E10C                       	smpsAlterNote       $0C
0008D07C E701                       	dc.b	smpsNoAttack, $01
0008D07E E110                       	smpsAlterNote       $10
0008D080 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D084 E10B                       	smpsAlterNote       $0B
0008D086 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008D08A E105                       	smpsAlterNote       $05
0008D08C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D090 E10B                       	smpsAlterNote       $0B
0008D092 E701                       	dc.b	smpsNoAttack, $01
0008D094 E10E                       	smpsAlterNote       $0E
0008D096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D09A E108                       	smpsAlterNote       $08
0008D09C E701                       	dc.b	smpsNoAttack, $01
0008D09E E104                       	smpsAlterNote       $04
0008D0A0 E701                       	dc.b	smpsNoAttack, $01
0008D0A2 E105                       	smpsAlterNote       $05
0008D0A4 E701                       	dc.b	smpsNoAttack, $01
0008D0A6 E10B                       	smpsAlterNote       $0B
0008D0A8 E701                       	dc.b	smpsNoAttack, $01
0008D0AA E10F                       	smpsAlterNote       $0F
0008D0AC E701                       	dc.b	smpsNoAttack, $01
0008D0AE E10B                       	smpsAlterNote       $0B
0008D0B0 E701                       	dc.b	smpsNoAttack, $01
0008D0B2 E108                       	smpsAlterNote       $08
0008D0B4 E701                       	dc.b	smpsNoAttack, $01
0008D0B6 E104                       	smpsAlterNote       $04
0008D0B8 E701                       	dc.b	smpsNoAttack, $01
0008D0BA E108                       	smpsAlterNote       $08
0008D0BC E701                       	dc.b	smpsNoAttack, $01
0008D0BE E10E                       	smpsAlterNote       $0E
0008D0C0 E701                       	dc.b	smpsNoAttack, $01
0008D0C2 E10F                       	smpsAlterNote       $0F
0008D0C4 E701                       	dc.b	smpsNoAttack, $01
0008D0C6 E10B                       	smpsAlterNote       $0B
0008D0C8 E701                       	dc.b	smpsNoAttack, $01
0008D0CA E105                       	smpsAlterNote       $05
0008D0CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0D0 E108                       	smpsAlterNote       $08
0008D0D2 E701                       	dc.b	smpsNoAttack, $01
0008D0D4 E10E                       	smpsAlterNote       $0E
0008D0D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0DA E108                       	smpsAlterNote       $08
0008D0DC E701                       	dc.b	smpsNoAttack, $01
0008D0DE E105                       	smpsAlterNote       $05
0008D0E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0E4 E10B                       	smpsAlterNote       $0B
0008D0E6 E701                       	dc.b	smpsNoAttack, $01
0008D0E8 E10F                       	smpsAlterNote       $0F
0008D0EA E701                       	dc.b	smpsNoAttack, $01
0008D0EC E10E                       	smpsAlterNote       $0E
0008D0EE E701                       	dc.b	smpsNoAttack, $01
0008D0F0 E108                       	smpsAlterNote       $08
0008D0F2 E701                       	dc.b	smpsNoAttack, $01
0008D0F4 E104                       	smpsAlterNote       $04
0008D0F6 E701                       	dc.b	smpsNoAttack, $01
0008D0F8 E108                       	smpsAlterNote       $08
0008D0FA E701                       	dc.b	smpsNoAttack, $01
0008D0FC E10E                       	smpsAlterNote       $0E
0008D0FE E701                       	dc.b	smpsNoAttack, $01
0008D100 E10F                       	smpsAlterNote       $0F
0008D102 E701                       	dc.b	smpsNoAttack, $01
0008D104 E10B                       	smpsAlterNote       $0B
0008D106 E701                       	dc.b	smpsNoAttack, $01
0008D108 E105                       	smpsAlterNote       $05
0008D10A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D10E E108                       	smpsAlterNote       $08
0008D110 E701                       	dc.b	smpsNoAttack, $01
0008D112 E10E                       	smpsAlterNote       $0E
0008D114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D118 E108                       	smpsAlterNote       $08
0008D11A E701                       	dc.b	smpsNoAttack, $01
0008D11C E105                       	smpsAlterNote       $05
0008D11E E701                       	dc.b	smpsNoAttack, $01
0008D120 E10B                       	smpsAlterNote       $0B
0008D122 C60D                       	dc.b	nA5, $0D
0008D124 E108                       	smpsAlterNote       $08
0008D126 E701                       	dc.b	smpsNoAttack, $01
0008D128 E104                       	smpsAlterNote       $04
0008D12A E701                       	dc.b	smpsNoAttack, $01
0008D12C E105                       	smpsAlterNote       $05
0008D12E E701                       	dc.b	smpsNoAttack, $01
0008D130 E10B                       	smpsAlterNote       $0B
0008D132 E701                       	dc.b	smpsNoAttack, $01
0008D134 E10F                       	smpsAlterNote       $0F
0008D136 E701                       	dc.b	smpsNoAttack, $01
0008D138 E10B                       	smpsAlterNote       $0B
0008D13A E701                       	dc.b	smpsNoAttack, $01
0008D13C E108                       	smpsAlterNote       $08
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 E104                       	smpsAlterNote       $04
0008D142 E701                       	dc.b	smpsNoAttack, $01
0008D144 E108                       	smpsAlterNote       $08
0008D146 E701                       	dc.b	smpsNoAttack, $01
0008D148 E10E                       	smpsAlterNote       $0E
0008D14A E701                       	dc.b	smpsNoAttack, $01
0008D14C E10F                       	smpsAlterNote       $0F
0008D14E E701                       	dc.b	smpsNoAttack, $01
0008D152 E109                       	smpsAlterNote       $09
0008D154 E6FF                       	smpsAlterVol        $FF
0008D156 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008D160 E108                       	smpsAlterNote       $08
0008D162 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008D168 E107                       	smpsAlterNote       $07
0008D16A E601                       	smpsAlterVol        $01
0008D16C BF03                       	dc.b	nD5, $03
0008D16E E108                       	smpsAlterNote       $08
0008D170 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D174 E109                       	smpsAlterNote       $09
0008D176 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D17C E10B                       	smpsAlterNote       $0B
0008D17E C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D182 E107                       	smpsAlterNote       $07
0008D184 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D188 E106                       	smpsAlterNote       $06
0008D18A C90D                       	dc.b	nC6, $0D
0008D18C E103                       	smpsAlterNote       $03
0008D18E E701                       	dc.b	smpsNoAttack, $01
0008D190 E1FF                       	smpsAlterNote       $FF
0008D192 E701                       	dc.b	smpsNoAttack, $01
0008D194 E103                       	smpsAlterNote       $03
0008D196 E701                       	dc.b	smpsNoAttack, $01
0008D198 E109                       	smpsAlterNote       $09
0008D19A E701                       	dc.b	smpsNoAttack, $01
0008D19C E10A                       	smpsAlterNote       $0A
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E106                       	smpsAlterNote       $06
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 E100                       	smpsAlterNote       $00
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1A8 E10C                       	smpsAlterNote       $0C
0008D1AA C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D1AE E10B                       	smpsAlterNote       $0B
0008D1B0 C603                       	dc.b	nA5, $03
0008D1B2 E109                       	smpsAlterNote       $09
0008D1B4 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D1B8 E10B                       	smpsAlterNote       $0B
0008D1BA C60D                       	dc.b	nA5, $0D
0008D1BC E105                       	smpsAlterNote       $05
0008D1BE E701                       	dc.b	smpsNoAttack, $01
0008D1C0 E104                       	smpsAlterNote       $04
0008D1C2 E701                       	dc.b	smpsNoAttack, $01
0008D1C4 E108                       	smpsAlterNote       $08
0008D1C6 E701                       	dc.b	smpsNoAttack, $01
0008D1C8 E10E                       	smpsAlterNote       $0E
0008D1CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1CE E10B                       	smpsAlterNote       $0B
0008D1D0 E701                       	dc.b	smpsNoAttack, $01
0008D1D2 E105                       	smpsAlterNote       $05
0008D1D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1D8 E10B                       	smpsAlterNote       $0B
0008D1DA E701                       	dc.b	smpsNoAttack, $01
0008D1DC E10E                       	smpsAlterNote       $0E
0008D1DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1E2 E108                       	smpsAlterNote       $08
0008D1E4 E701                       	dc.b	smpsNoAttack, $01
0008D1E6 E104                       	smpsAlterNote       $04
0008D1E8 E701                       	dc.b	smpsNoAttack, $01
0008D1EA E105                       	smpsAlterNote       $05
0008D1EC E701                       	dc.b	smpsNoAttack, $01
0008D1EE E10B                       	smpsAlterNote       $0B
0008D1F0 E701                       	dc.b	smpsNoAttack, $01
0008D1F2 E10F                       	smpsAlterNote       $0F
0008D1F4 E701                       	dc.b	smpsNoAttack, $01
0008D1F6 E10B                       	smpsAlterNote       $0B
0008D1F8 E701                       	dc.b	smpsNoAttack, $01
0008D1FA E108                       	smpsAlterNote       $08
0008D1FC E701                       	dc.b	smpsNoAttack, $01
0008D1FE E104                       	smpsAlterNote       $04
0008D200 E701                       	dc.b	smpsNoAttack, $01
0008D202 E108                       	smpsAlterNote       $08
0008D204 E701                       	dc.b	smpsNoAttack, $01
0008D206 E10E                       	smpsAlterNote       $0E
0008D208 E701                       	dc.b	smpsNoAttack, $01
0008D20A E10F                       	smpsAlterNote       $0F
0008D20C E701                       	dc.b	smpsNoAttack, $01
0008D20E E10B                       	smpsAlterNote       $0B
0008D210 E701                       	dc.b	smpsNoAttack, $01
0008D212 E105                       	smpsAlterNote       $05
0008D214 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D218 E108                       	smpsAlterNote       $08
0008D21A E701                       	dc.b	smpsNoAttack, $01
0008D21C E10E                       	smpsAlterNote       $0E
0008D21E E701                       	dc.b	smpsNoAttack, $01
0008D220 E10F                       	smpsAlterNote       $0F
0008D222 800F                       	dc.b	nRst, $0F
0008D224 E107                       	smpsAlterNote       $07
0008D226 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D22A E108                       	smpsAlterNote       $08
0008D22C C103                       	dc.b	nE5, $03
0008D22E E109                       	smpsAlterNote       $09
0008D230 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D236 E10B                       	smpsAlterNote       $0B
0008D238 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D23C E107                       	smpsAlterNote       $07
0008D23E BF03                       	dc.b	nD5, $03
0008D240 E106                       	smpsAlterNote       $06
0008D242 C90E                       	dc.b	nC6, $0E
0008D244 E107                       	smpsAlterNote       $07
0008D246 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D24A E10C                       	smpsAlterNote       $0C
0008D24C C704                       	dc.b	nBb5, $04
0008D24E E10B                       	smpsAlterNote       $0B
0008D250 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D254 E109                       	smpsAlterNote       $09
0008D256 C404                       	dc.b	nG5, $04
0008D258 E10B                       	smpsAlterNote       $0B
0008D25A C60D                       	dc.b	nA5, $0D
0008D25C E108                       	smpsAlterNote       $08
0008D25E E701                       	dc.b	smpsNoAttack, $01
0008D260 E105                       	smpsAlterNote       $05
0008D262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D266 E10B                       	smpsAlterNote       $0B
0008D268 E701                       	dc.b	smpsNoAttack, $01
0008D26A E10F                       	smpsAlterNote       $0F
0008D26C E701                       	dc.b	smpsNoAttack, $01
0008D26E E10E                       	smpsAlterNote       $0E
0008D270 E701                       	dc.b	smpsNoAttack, $01
0008D272 E108                       	smpsAlterNote       $08
0008D274 E701                       	dc.b	smpsNoAttack, $01
0008D276 E104                       	smpsAlterNote       $04
0008D278 E701                       	dc.b	smpsNoAttack, $01
0008D27A E108                       	smpsAlterNote       $08
0008D27C E701                       	dc.b	smpsNoAttack, $01
0008D27E E10B                       	smpsAlterNote       $0B
0008D280 E701                       	dc.b	smpsNoAttack, $01
0008D282 E10F                       	smpsAlterNote       $0F
0008D284 E701                       	dc.b	smpsNoAttack, $01
0008D286 E10B                       	smpsAlterNote       $0B
0008D288 E701                       	dc.b	smpsNoAttack, $01
0008D28A E105                       	smpsAlterNote       $05
0008D28C E701                       	dc.b	smpsNoAttack, $01
0008D28E E104                       	smpsAlterNote       $04
0008D290 E701                       	dc.b	smpsNoAttack, $01
0008D292 E108                       	smpsAlterNote       $08
0008D294 E701                       	dc.b	smpsNoAttack, $01
0008D296 E10E                       	smpsAlterNote       $0E
0008D298 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D29C E10B                       	smpsAlterNote       $0B
0008D29E E701                       	dc.b	smpsNoAttack, $01
0008D2A0 E105                       	smpsAlterNote       $05
0008D2A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2A6 E10B                       	smpsAlterNote       $0B
0008D2A8 E701                       	dc.b	smpsNoAttack, $01
0008D2AA E10E                       	smpsAlterNote       $0E
0008D2AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2B0 E108                       	smpsAlterNote       $08
0008D2B2 E701                       	dc.b	smpsNoAttack, $01
0008D2B4 E105                       	smpsAlterNote       $05
0008D2B6 8001                       	dc.b	nRst, $01
0008D2B8 E109                       	smpsAlterNote       $09
0008D2BA C402                       	dc.b	nG5, $02
0008D2BC E10B                       	smpsAlterNote       $0B
0008D2BE E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D2C7 E109                       	smpsAlterNote       $09
0008D2C9 C404                       	dc.b	nG5, $04
0008D2CB E10B                       	smpsAlterNote       $0B
0008D2CD C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D2D1 E107                       	smpsAlterNote       $07
0008D2D3 BF0D                       	dc.b	nD5, $0D
0008D2D5 E101                       	smpsAlterNote       $01
0008D2D7 E701                       	dc.b	smpsNoAttack, $01
0008D2D9 E100                       	smpsAlterNote       $00
0008D2DB E701                       	dc.b	smpsNoAttack, $01
0008D2DD E104                       	smpsAlterNote       $04
0008D2DF E701                       	dc.b	smpsNoAttack, $01
0008D2E1 E10A                       	smpsAlterNote       $0A
0008D2E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2E7 E107                       	smpsAlterNote       $07
0008D2E9 E701                       	dc.b	smpsNoAttack, $01
0008D2EB E101                       	smpsAlterNote       $01
0008D2ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2F1 E107                       	smpsAlterNote       $07
0008D2F3 E701                       	dc.b	smpsNoAttack, $01
0008D2F5 E10A                       	smpsAlterNote       $0A
0008D2F7 E701                       	dc.b	smpsNoAttack, $01
0008D2F9 E10B                       	smpsAlterNote       $0B
0008D2FB 8001                       	dc.b	nRst, $01
0008D2FD E108                       	smpsAlterNote       $08
0008D2FF C101                       	dc.b	nE5, $01
0008D301 E109                       	smpsAlterNote       $09
0008D303 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008D308 E10B                       	smpsAlterNote       $0B
0008D30A C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D312 E108                       	smpsAlterNote       $08
0008D314 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D318 E109                       	smpsAlterNote       $09
0008D31A CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D31E E108                       	smpsAlterNote       $08
0008D320 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D324 E106                       	smpsAlterNote       $06
0008D326 C903                       	dc.b	nC6, $03
0008D328 E109                       	smpsAlterNote       $09
0008D32A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D32E E10C                       	smpsAlterNote       $0C
0008D330 C70D                       	dc.b	nBb5, $0D
0008D332 E109                       	smpsAlterNote       $09
0008D334 E701                       	dc.b	smpsNoAttack, $01
0008D336 E105                       	smpsAlterNote       $05
0008D338 E701                       	dc.b	smpsNoAttack, $01
0008D33A E109                       	smpsAlterNote       $09
0008D33C E701                       	dc.b	smpsNoAttack, $01
0008D33E E10F                       	smpsAlterNote       $0F
0008D340 E701                       	dc.b	smpsNoAttack, $01
0008D342 E110                       	smpsAlterNote       $10
0008D344 E701                       	dc.b	smpsNoAttack, $01
0008D346 E10C                       	smpsAlterNote       $0C
0008D348 E701                       	dc.b	smpsNoAttack, $01
0008D34A E106                       	smpsAlterNote       $06
0008D34C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D350 E109                       	smpsAlterNote       $09
0008D352 E701                       	dc.b	smpsNoAttack, $01
0008D354 E10F                       	smpsAlterNote       $0F
0008D356 E701                       	dc.b	smpsNoAttack, $01
0008D358 E110                       	smpsAlterNote       $10
0008D35A 8001                       	dc.b	nRst, $01
0008D35C E10B                       	smpsAlterNote       $0B
0008D35E C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008D364 E105                       	smpsAlterNote       $05
0008D366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D36A E108                       	smpsAlterNote       $08
0008D36C E701                       	dc.b	smpsNoAttack, $01
0008D36E E10E                       	smpsAlterNote       $0E
0008D370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D374 E108                       	smpsAlterNote       $08
0008D376 E701                       	dc.b	smpsNoAttack, $01
0008D378 E105                       	smpsAlterNote       $05
0008D37A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D37E E10B                       	smpsAlterNote       $0B
0008D380 E701                       	dc.b	smpsNoAttack, $01
0008D382 E10F                       	smpsAlterNote       $0F
0008D384 E701                       	dc.b	smpsNoAttack, $01
0008D386 E10E                       	smpsAlterNote       $0E
0008D388 E701                       	dc.b	smpsNoAttack, $01
0008D38A E108                       	smpsAlterNote       $08
0008D38C E701                       	dc.b	smpsNoAttack, $01
0008D38E E104                       	smpsAlterNote       $04
0008D390 E701                       	dc.b	smpsNoAttack, $01
0008D392 E108                       	smpsAlterNote       $08
0008D394 E701                       	dc.b	smpsNoAttack, $01
0008D396 E10B                       	smpsAlterNote       $0B
0008D398 E701                       	dc.b	smpsNoAttack, $01
0008D39A E10F                       	smpsAlterNote       $0F
0008D39C E701                       	dc.b	smpsNoAttack, $01
0008D39E E10B                       	smpsAlterNote       $0B
0008D3A0 E701                       	dc.b	smpsNoAttack, $01
0008D3A2 E105                       	smpsAlterNote       $05
0008D3A4 E701                       	dc.b	smpsNoAttack, $01
0008D3A6 E104                       	smpsAlterNote       $04
0008D3A8 E701                       	dc.b	smpsNoAttack, $01
0008D3AA E108                       	smpsAlterNote       $08
0008D3AC E701                       	dc.b	smpsNoAttack, $01
0008D3AE E10E                       	smpsAlterNote       $0E
0008D3B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3B4 E10B                       	smpsAlterNote       $0B
0008D3B6 E701                       	dc.b	smpsNoAttack, $01
0008D3B8 E105                       	smpsAlterNote       $05
0008D3BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3BE E10B                       	smpsAlterNote       $0B
0008D3C0 E701                       	dc.b	smpsNoAttack, $01
0008D3C2 E10E                       	smpsAlterNote       $0E
0008D3C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3C8 E108                       	smpsAlterNote       $08
0008D3CA E701                       	dc.b	smpsNoAttack, $01
0008D3CC E104                       	smpsAlterNote       $04
0008D3CE E701                       	dc.b	smpsNoAttack, $01
0008D3D0 E105                       	smpsAlterNote       $05
0008D3D2 E701                       	dc.b	smpsNoAttack, $01
0008D3D4 E10B                       	smpsAlterNote       $0B
0008D3D6 E701                       	dc.b	smpsNoAttack, $01
0008D3D8 E10F                       	smpsAlterNote       $0F
0008D3DA E701                       	dc.b	smpsNoAttack, $01
0008D3DC E10B                       	smpsAlterNote       $0B
0008D3DE E701                       	dc.b	smpsNoAttack, $01
0008D3E0 E108                       	smpsAlterNote       $08
0008D3E2 E701                       	dc.b	smpsNoAttack, $01
0008D3E4 E104                       	smpsAlterNote       $04
0008D3E6 E701                       	dc.b	smpsNoAttack, $01
0008D3E8 E108                       	smpsAlterNote       $08
0008D3EA E701                       	dc.b	smpsNoAttack, $01
0008D3EC E10E                       	smpsAlterNote       $0E
0008D3EE E701                       	dc.b	smpsNoAttack, $01
0008D3F0 E10F                       	smpsAlterNote       $0F
0008D3F2 E701                       	dc.b	smpsNoAttack, $01
0008D3F4 E10B                       	smpsAlterNote       $0B
0008D3F6 E701                       	dc.b	smpsNoAttack, $01
0008D3F8 E105                       	smpsAlterNote       $05
0008D3FA E701                       	dc.b	smpsNoAttack, $01
0008D3FC E10B                       	smpsAlterNote       $0B
0008D3FE C60E                       	dc.b	nA5, $0E
0008D400 E105                       	smpsAlterNote       $05
0008D402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D406 E10B                       	smpsAlterNote       $0B
0008D408 E701                       	dc.b	smpsNoAttack, $01
0008D40A E10E                       	smpsAlterNote       $0E
0008D40C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D410 E108                       	smpsAlterNote       $08
0008D412 E701                       	dc.b	smpsNoAttack, $01
0008D414 E104                       	smpsAlterNote       $04
0008D416 E701                       	dc.b	smpsNoAttack, $01
0008D418 E105                       	smpsAlterNote       $05
0008D41A E701                       	dc.b	smpsNoAttack, $01
0008D41C E10B                       	smpsAlterNote       $0B
0008D41E E701                       	dc.b	smpsNoAttack, $01
0008D420 E10F                       	smpsAlterNote       $0F
0008D422 E701                       	dc.b	smpsNoAttack, $01
0008D424 E10B                       	smpsAlterNote       $0B
0008D426 E701                       	dc.b	smpsNoAttack, $01
0008D428 E108                       	smpsAlterNote       $08
0008D42A E701                       	dc.b	smpsNoAttack, $01
0008D42C E104                       	smpsAlterNote       $04
0008D42E E701                       	dc.b	smpsNoAttack, $01
0008D430 E108                       	smpsAlterNote       $08
0008D432 E701                       	dc.b	smpsNoAttack, $01
0008D434 E10E                       	smpsAlterNote       $0E
0008D436 E701                       	dc.b	smpsNoAttack, $01
0008D438 E10F                       	smpsAlterNote       $0F
0008D43A E701                       	dc.b	smpsNoAttack, $01
0008D43C E10B                       	smpsAlterNote       $0B
0008D43E E701                       	dc.b	smpsNoAttack, $01
0008D440 E105                       	smpsAlterNote       $05
0008D442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D446 E108                       	smpsAlterNote       $08
0008D448 E701                       	dc.b	smpsNoAttack, $01
0008D44A E10E                       	smpsAlterNote       $0E
0008D44C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D450 E108                       	smpsAlterNote       $08
0008D452 E701                       	dc.b	smpsNoAttack, $01
0008D454 E105                       	smpsAlterNote       $05
0008D456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D45A E10B                       	smpsAlterNote       $0B
0008D45C E701                       	dc.b	smpsNoAttack, $01
0008D45E E10F                       	smpsAlterNote       $0F
0008D460 E701                       	dc.b	smpsNoAttack, $01
0008D462 E10E                       	smpsAlterNote       $0E
0008D464 E701                       	dc.b	smpsNoAttack, $01
0008D466 E108                       	smpsAlterNote       $08
0008D468 E701                       	dc.b	smpsNoAttack, $01
0008D46A E104                       	smpsAlterNote       $04
0008D46C E701                       	dc.b	smpsNoAttack, $01
0008D46E E108                       	smpsAlterNote       $08
0008D470 E701                       	dc.b	smpsNoAttack, $01
0008D472 E10E                       	smpsAlterNote       $0E
0008D474 E701                       	dc.b	smpsNoAttack, $01
0008D476 E10F                       	smpsAlterNote       $0F
0008D478 E701                       	dc.b	smpsNoAttack, $01
0008D47A E10B                       	smpsAlterNote       $0B
0008D47C E701                       	dc.b	smpsNoAttack, $01
0008D47E E105                       	smpsAlterNote       $05
0008D480 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D484 E108                       	smpsAlterNote       $08
0008D486 E701                       	dc.b	smpsNoAttack, $01
0008D488 E10E                       	smpsAlterNote       $0E
0008D48A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D48E E108                       	smpsAlterNote       $08
0008D490 E701                       	dc.b	smpsNoAttack, $01
0008D492 E105                       	smpsAlterNote       $05
0008D494 E701                       	dc.b	smpsNoAttack, $01
0008D498 E10B                       	smpsAlterNote       $0B
0008D49A E6FD                       	smpsAlterVol        $FD
0008D49C C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D4A0 E109                       	smpsAlterNote       $09
0008D4A2 C404                       	dc.b	nG5, $04
0008D4A4 E10B                       	smpsAlterNote       $0B
0008D4A6 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D4AA E107                       	smpsAlterNote       $07
0008D4AC BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D4B2 E10B                       	smpsAlterNote       $0B
0008D4B4 C604                       	dc.b	nA5, $04
0008D4B6 E109                       	smpsAlterNote       $09
0008D4B8 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D4BC E10B                       	smpsAlterNote       $0B
0008D4BE C604                       	dc.b	nA5, $04
0008D4C0 E108                       	smpsAlterNote       $08
0008D4C2 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008D4CA E106                       	smpsAlterNote       $06
0008D4CC C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D4D0 E10C                       	smpsAlterNote       $0C
0008D4D2 C704                       	dc.b	nBb5, $04
0008D4D4 E10B                       	smpsAlterNote       $0B
0008D4D6 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D4DA E109                       	smpsAlterNote       $09
0008D4DC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D4E6 E10B                       	smpsAlterNote       $0B
0008D4E8 C60D                       	dc.b	nA5, $0D
0008D4EA E108                       	smpsAlterNote       $08
0008D4EC E701                       	dc.b	smpsNoAttack, $01
0008D4EE E104                       	smpsAlterNote       $04
0008D4F0 E701                       	dc.b	smpsNoAttack, $01
0008D4F2 E108                       	smpsAlterNote       $08
0008D4F4 E701                       	dc.b	smpsNoAttack, $01
0008D4F6 E10E                       	smpsAlterNote       $0E
0008D4F8 E701                       	dc.b	smpsNoAttack, $01
0008D4FA E10F                       	smpsAlterNote       $0F
0008D4FC E701                       	dc.b	smpsNoAttack, $01
0008D4FE E10B                       	smpsAlterNote       $0B
0008D500 E701                       	dc.b	smpsNoAttack, $01
0008D502 E105                       	smpsAlterNote       $05
0008D504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D508 E108                       	smpsAlterNote       $08
0008D50A E701                       	dc.b	smpsNoAttack, $01
0008D50C E10E                       	smpsAlterNote       $0E
0008D50E E701                       	dc.b	smpsNoAttack, $01
0008D510 E10F                       	smpsAlterNote       $0F
0008D512 8001                       	dc.b	nRst, $01
0008D514 E109                       	smpsAlterNote       $09
0008D516 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D51C E108                       	smpsAlterNote       $08
0008D51E C10D                       	dc.b	nE5, $0D
0008D520 E102                       	smpsAlterNote       $02
0008D522 E701                       	dc.b	smpsNoAttack, $01
0008D524 E101                       	smpsAlterNote       $01
0008D526 E701                       	dc.b	smpsNoAttack, $01
0008D528 E105                       	smpsAlterNote       $05
0008D52A E701                       	dc.b	smpsNoAttack, $01
0008D52C E10B                       	smpsAlterNote       $0B
0008D52E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D532 E108                       	smpsAlterNote       $08
0008D534 E701                       	dc.b	smpsNoAttack, $01
0008D536 E102                       	smpsAlterNote       $02
0008D538 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D53C E108                       	smpsAlterNote       $08
0008D53E E701                       	dc.b	smpsNoAttack, $01
0008D540 E10B                       	smpsAlterNote       $0B
0008D542 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D546 E105                       	smpsAlterNote       $05
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A E101                       	smpsAlterNote       $01
0008D54C E701                       	dc.b	smpsNoAttack, $01
0008D54E E102                       	smpsAlterNote       $02
0008D550 E701                       	dc.b	smpsNoAttack, $01
0008D552 E108                       	smpsAlterNote       $08
0008D554 E701                       	dc.b	smpsNoAttack, $01
0008D556 E10C                       	smpsAlterNote       $0C
0008D558 E701                       	dc.b	smpsNoAttack, $01
0008D55A E108                       	smpsAlterNote       $08
0008D55C E701                       	dc.b	smpsNoAttack, $01
0008D55E E105                       	smpsAlterNote       $05
0008D560 E701                       	dc.b	smpsNoAttack, $01
0008D562 E101                       	smpsAlterNote       $01
0008D564 E701                       	dc.b	smpsNoAttack, $01
0008D566 E105                       	smpsAlterNote       $05
0008D568 E701                       	dc.b	smpsNoAttack, $01
0008D56A E10B                       	smpsAlterNote       $0B
0008D56C E701                       	dc.b	smpsNoAttack, $01
0008D56E E10C                       	smpsAlterNote       $0C
0008D570 E701                       	dc.b	smpsNoAttack, $01
0008D572 E108                       	smpsAlterNote       $08
0008D574 E701                       	dc.b	smpsNoAttack, $01
0008D576 E102                       	smpsAlterNote       $02
0008D578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D57C E105                       	smpsAlterNote       $05
0008D57E E701                       	dc.b	smpsNoAttack, $01
0008D580 E10B                       	smpsAlterNote       $0B
0008D582 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D586 E105                       	smpsAlterNote       $05
0008D588 E701                       	dc.b	smpsNoAttack, $01
0008D58A E102                       	smpsAlterNote       $02
0008D58C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D590 E108                       	smpsAlterNote       $08
0008D592 E701                       	dc.b	smpsNoAttack, $01
0008D594 E10C                       	smpsAlterNote       $0C
0008D596 E701                       	dc.b	smpsNoAttack, $01
0008D598 E10B                       	smpsAlterNote       $0B
0008D59A E701                       	dc.b	smpsNoAttack, $01
0008D59C E105                       	smpsAlterNote       $05
0008D59E E701                       	dc.b	smpsNoAttack, $01
0008D5A0 E101                       	smpsAlterNote       $01
0008D5A2 E701                       	dc.b	smpsNoAttack, $01
0008D5A4 E105                       	smpsAlterNote       $05
0008D5A6 E701                       	dc.b	smpsNoAttack, $01
0008D5A8 E108                       	smpsAlterNote       $08
0008D5AA E701                       	dc.b	smpsNoAttack, $01
0008D5AC E10C                       	smpsAlterNote       $0C
0008D5AE E701                       	dc.b	smpsNoAttack, $01
0008D5B0 E108                       	smpsAlterNote       $08
0008D5B2 E701                       	dc.b	smpsNoAttack, $01
0008D5B4 E102                       	smpsAlterNote       $02
0008D5B6 E701                       	dc.b	smpsNoAttack, $01
0008D5B8 E101                       	smpsAlterNote       $01
0008D5BA E701                       	dc.b	smpsNoAttack, $01
0008D5BC E105                       	smpsAlterNote       $05
0008D5BE E701                       	dc.b	smpsNoAttack, $01
0008D5C0 E10B                       	smpsAlterNote       $0B
0008D5C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5C6 E108                       	smpsAlterNote       $08
0008D5C8 E701                       	dc.b	smpsNoAttack, $01
0008D5CA E102                       	smpsAlterNote       $02
0008D5CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5D0 E108                       	smpsAlterNote       $08
0008D5D2 E701                       	dc.b	smpsNoAttack, $01
0008D5D4 E10B                       	smpsAlterNote       $0B
0008D5D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5DA E105                       	smpsAlterNote       $05
0008D5DC E701                       	dc.b	smpsNoAttack, $01
0008D5DE E101                       	smpsAlterNote       $01
0008D5E0 E701                       	dc.b	smpsNoAttack, $01
0008D5E2 E102                       	smpsAlterNote       $02
0008D5E4 E701                       	dc.b	smpsNoAttack, $01
0008D5E6 E108                       	smpsAlterNote       $08
0008D5E8 E701                       	dc.b	smpsNoAttack, $01
0008D5EA E10C                       	smpsAlterNote       $0C
0008D5EC E701                       	dc.b	smpsNoAttack, $01
0008D5EE E108                       	smpsAlterNote       $08
0008D5F0 E701                       	dc.b	smpsNoAttack, $01
0008D5F2 E105                       	smpsAlterNote       $05
0008D5F4 E701                       	dc.b	smpsNoAttack, $01
0008D5F6 E101                       	smpsAlterNote       $01
0008D5F8 E701                       	dc.b	smpsNoAttack, $01
0008D5FA E105                       	smpsAlterNote       $05
0008D5FC E701                       	dc.b	smpsNoAttack, $01
0008D5FE E10B                       	smpsAlterNote       $0B
0008D600 E701                       	dc.b	smpsNoAttack, $01
0008D602 E10C                       	smpsAlterNote       $0C
0008D604 E701                       	dc.b	smpsNoAttack, $01
0008D606 E108                       	smpsAlterNote       $08
0008D608 E701                       	dc.b	smpsNoAttack, $01
0008D60A E102                       	smpsAlterNote       $02
0008D60C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D610 E105                       	smpsAlterNote       $05
0008D612 E701                       	dc.b	smpsNoAttack, $01
0008D614 E10B                       	smpsAlterNote       $0B
0008D616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D61A E105                       	smpsAlterNote       $05
0008D61C E701                       	dc.b	smpsNoAttack, $01
0008D61E E101                       	smpsAlterNote       $01
0008D620 E701                       	dc.b	smpsNoAttack, $01
0008D622 E102                       	smpsAlterNote       $02
0008D624 E701                       	dc.b	smpsNoAttack, $01
0008D626 E108                       	smpsAlterNote       $08
0008D628 E701                       	dc.b	smpsNoAttack, $01
0008D62A E10C                       	smpsAlterNote       $0C
0008D62C E701                       	dc.b	smpsNoAttack, $01
0008D62E E108                       	smpsAlterNote       $08
0008D630 E701                       	dc.b	smpsNoAttack, $01
0008D632 E105                       	smpsAlterNote       $05
0008D634 E701                       	dc.b	smpsNoAttack, $01
0008D636 E101                       	smpsAlterNote       $01
0008D638 E701                       	dc.b	smpsNoAttack, $01
0008D63A E105                       	smpsAlterNote       $05
0008D63C E701                       	dc.b	smpsNoAttack, $01
0008D63E E10B                       	smpsAlterNote       $0B
0008D640 E701                       	dc.b	smpsNoAttack, $01
0008D642 E10C                       	smpsAlterNote       $0C
0008D644 E701                       	dc.b	smpsNoAttack, $01
0008D646 E108                       	smpsAlterNote       $08
0008D648 E701                       	dc.b	smpsNoAttack, $01
0008D64A E102                       	smpsAlterNote       $02
0008D64C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D650 E105                       	smpsAlterNote       $05
0008D652 E701                       	dc.b	smpsNoAttack, $01
0008D654 E10B                       	smpsAlterNote       $0B
0008D656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D65A E105                       	smpsAlterNote       $05
0008D65C E701                       	dc.b	smpsNoAttack, $01
0008D65E E102                       	smpsAlterNote       $02
0008D660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D664 E108                       	smpsAlterNote       $08
0008D666 E701                       	dc.b	smpsNoAttack, $01
0008D668 E10C                       	smpsAlterNote       $0C
0008D66A E701                       	dc.b	smpsNoAttack, $01
0008D66C E10B                       	smpsAlterNote       $0B
0008D66E E701                       	dc.b	smpsNoAttack, $01
0008D670 E105                       	smpsAlterNote       $05
0008D672 E701                       	dc.b	smpsNoAttack, $01
0008D674 E101                       	smpsAlterNote       $01
0008D676 E701                       	dc.b	smpsNoAttack, $01
0008D678 E105                       	smpsAlterNote       $05
0008D67A E701                       	dc.b	smpsNoAttack, $01
0008D67C E108                       	smpsAlterNote       $08
0008D67E E701                       	dc.b	smpsNoAttack, $01
0008D680 E10C                       	smpsAlterNote       $0C
0008D682 E701                       	dc.b	smpsNoAttack, $01
0008D686 E10B                       	smpsAlterNote       $0B
0008D688 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D68C E109                       	smpsAlterNote       $09
0008D68E C404                       	dc.b	nG5, $04
0008D690 E10B                       	smpsAlterNote       $0B
0008D692 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D696 E107                       	smpsAlterNote       $07
0008D698 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D69E E10B                       	smpsAlterNote       $0B
0008D6A0 C604                       	dc.b	nA5, $04
0008D6A2 E109                       	smpsAlterNote       $09
0008D6A4 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D6A8 E10B                       	smpsAlterNote       $0B
0008D6AA C604                       	dc.b	nA5, $04
0008D6AC E108                       	smpsAlterNote       $08
0008D6AE C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D6B4 E106                       	smpsAlterNote       $06
0008D6B6 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D6BA E10C                       	smpsAlterNote       $0C
0008D6BC C704                       	dc.b	nBb5, $04
0008D6BE E10B                       	smpsAlterNote       $0B
0008D6C0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D6C4 E109                       	smpsAlterNote       $09
0008D6C6 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D6D0 E10B                       	smpsAlterNote       $0B
0008D6D2 C60D                       	dc.b	nA5, $0D
0008D6D4 E108                       	smpsAlterNote       $08
0008D6D6 E701                       	dc.b	smpsNoAttack, $01
0008D6D8 E104                       	smpsAlterNote       $04
0008D6DA E701                       	dc.b	smpsNoAttack, $01
0008D6DC E108                       	smpsAlterNote       $08
0008D6DE E701                       	dc.b	smpsNoAttack, $01
0008D6E0 E10B                       	smpsAlterNote       $0B
0008D6E2 E701                       	dc.b	smpsNoAttack, $01
0008D6E4 E10F                       	smpsAlterNote       $0F
0008D6E6 E701                       	dc.b	smpsNoAttack, $01
0008D6E8 E10B                       	smpsAlterNote       $0B
0008D6EA E701                       	dc.b	smpsNoAttack, $01
0008D6EC E105                       	smpsAlterNote       $05
0008D6EE E701                       	dc.b	smpsNoAttack, $01
0008D6F0 E104                       	smpsAlterNote       $04
0008D6F2 E701                       	dc.b	smpsNoAttack, $01
0008D6F4 E108                       	smpsAlterNote       $08
0008D6F6 E701                       	dc.b	smpsNoAttack, $01
0008D6F8 E10E                       	smpsAlterNote       $0E
0008D6FA E701                       	dc.b	smpsNoAttack, $01
0008D6FC E10F                       	smpsAlterNote       $0F
0008D6FE 8001                       	dc.b	nRst, $01
0008D700 E109                       	smpsAlterNote       $09
0008D702 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D708 E108                       	smpsAlterNote       $08
0008D70A C10D                       	dc.b	nE5, $0D
0008D70C E105                       	smpsAlterNote       $05
0008D70E E701                       	dc.b	smpsNoAttack, $01
0008D710 E101                       	smpsAlterNote       $01
0008D712 E701                       	dc.b	smpsNoAttack, $01
0008D714 E105                       	smpsAlterNote       $05
0008D716 E701                       	dc.b	smpsNoAttack, $01
0008D718 E10B                       	smpsAlterNote       $0B
0008D71A E701                       	dc.b	smpsNoAttack, $01
0008D71C E10C                       	smpsAlterNote       $0C
0008D71E E701                       	dc.b	smpsNoAttack, $01
0008D720 E108                       	smpsAlterNote       $08
0008D722 E701                       	dc.b	smpsNoAttack, $01
0008D724 E102                       	smpsAlterNote       $02
0008D726 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D72A E105                       	smpsAlterNote       $05
0008D72C E701                       	dc.b	smpsNoAttack, $01
0008D72E E10B                       	smpsAlterNote       $0B
0008D730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D734 E105                       	smpsAlterNote       $05
0008D736 E701                       	dc.b	smpsNoAttack, $01
0008D738 E102                       	smpsAlterNote       $02
0008D73A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D73E E108                       	smpsAlterNote       $08
0008D740 E701                       	dc.b	smpsNoAttack, $01
0008D742 E10C                       	smpsAlterNote       $0C
0008D744 E701                       	dc.b	smpsNoAttack, $01
0008D746 E10B                       	smpsAlterNote       $0B
0008D748 E701                       	dc.b	smpsNoAttack, $01
0008D74A E105                       	smpsAlterNote       $05
0008D74C E701                       	dc.b	smpsNoAttack, $01
0008D74E E101                       	smpsAlterNote       $01
0008D750 E701                       	dc.b	smpsNoAttack, $01
0008D752 E105                       	smpsAlterNote       $05
0008D754 E701                       	dc.b	smpsNoAttack, $01
0008D756 E108                       	smpsAlterNote       $08
0008D758 E701                       	dc.b	smpsNoAttack, $01
0008D75A E10C                       	smpsAlterNote       $0C
0008D75C E701                       	dc.b	smpsNoAttack, $01
0008D75E E108                       	smpsAlterNote       $08
0008D760 E701                       	dc.b	smpsNoAttack, $01
0008D762 E102                       	smpsAlterNote       $02
0008D764 E701                       	dc.b	smpsNoAttack, $01
0008D766 E101                       	smpsAlterNote       $01
0008D768 E701                       	dc.b	smpsNoAttack, $01
0008D76A E105                       	smpsAlterNote       $05
0008D76C E701                       	dc.b	smpsNoAttack, $01
0008D76E E10B                       	smpsAlterNote       $0B
0008D770 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D774 E108                       	smpsAlterNote       $08
0008D776 E701                       	dc.b	smpsNoAttack, $01
0008D778 E102                       	smpsAlterNote       $02
0008D77A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D77E E108                       	smpsAlterNote       $08
0008D780 E701                       	dc.b	smpsNoAttack, $01
0008D782 E10B                       	smpsAlterNote       $0B
0008D784 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D788 E105                       	smpsAlterNote       $05
0008D78A E701                       	dc.b	smpsNoAttack, $01
0008D78C E101                       	smpsAlterNote       $01
0008D78E E701                       	dc.b	smpsNoAttack, $01
0008D790 E102                       	smpsAlterNote       $02
0008D792 E701                       	dc.b	smpsNoAttack, $01
0008D794 E108                       	smpsAlterNote       $08
0008D796 E701                       	dc.b	smpsNoAttack, $01
0008D798 E10C                       	smpsAlterNote       $0C
0008D79A E701                       	dc.b	smpsNoAttack, $01
0008D79C E108                       	smpsAlterNote       $08
0008D79E E701                       	dc.b	smpsNoAttack, $01
0008D7A0 E105                       	smpsAlterNote       $05
0008D7A2 E701                       	dc.b	smpsNoAttack, $01
0008D7A4 E101                       	smpsAlterNote       $01
0008D7A6 E701                       	dc.b	smpsNoAttack, $01
0008D7A8 E105                       	smpsAlterNote       $05
0008D7AA E701                       	dc.b	smpsNoAttack, $01
0008D7AC E10B                       	smpsAlterNote       $0B
0008D7AE E701                       	dc.b	smpsNoAttack, $01
0008D7B0 E10C                       	smpsAlterNote       $0C
0008D7B2 E701                       	dc.b	smpsNoAttack, $01
0008D7B4 E108                       	smpsAlterNote       $08
0008D7B6 E701                       	dc.b	smpsNoAttack, $01
0008D7B8 E102                       	smpsAlterNote       $02
0008D7BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7BE E108                       	smpsAlterNote       $08
0008D7C0 E701                       	dc.b	smpsNoAttack, $01
0008D7C2 E10B                       	smpsAlterNote       $0B
0008D7C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7C8 E105                       	smpsAlterNote       $05
0008D7CA E701                       	dc.b	smpsNoAttack, $01
0008D7CC E101                       	smpsAlterNote       $01
0008D7CE E701                       	dc.b	smpsNoAttack, $01
0008D7D0 E102                       	smpsAlterNote       $02
0008D7D2 E701                       	dc.b	smpsNoAttack, $01
0008D7D4 E108                       	smpsAlterNote       $08
0008D7D6 E701                       	dc.b	smpsNoAttack, $01
0008D7D8 E10C                       	smpsAlterNote       $0C
0008D7DA E701                       	dc.b	smpsNoAttack, $01
0008D7DC E108                       	smpsAlterNote       $08
0008D7DE E701                       	dc.b	smpsNoAttack, $01
0008D7E0 E105                       	smpsAlterNote       $05
0008D7E2 E701                       	dc.b	smpsNoAttack, $01
0008D7E4 E101                       	smpsAlterNote       $01
0008D7E6 E701                       	dc.b	smpsNoAttack, $01
0008D7E8 E105                       	smpsAlterNote       $05
0008D7EA E701                       	dc.b	smpsNoAttack, $01
0008D7EC E10B                       	smpsAlterNote       $0B
0008D7EE E701                       	dc.b	smpsNoAttack, $01
0008D7F0 E10C                       	smpsAlterNote       $0C
0008D7F2 E701                       	dc.b	smpsNoAttack, $01
0008D7F4 E108                       	smpsAlterNote       $08
0008D7F6 E701                       	dc.b	smpsNoAttack, $01
0008D7F8 E102                       	smpsAlterNote       $02
0008D7FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7FE E105                       	smpsAlterNote       $05
0008D800 E701                       	dc.b	smpsNoAttack, $01
0008D802 E10B                       	smpsAlterNote       $0B
0008D804 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D808 E105                       	smpsAlterNote       $05
0008D80A E701                       	dc.b	smpsNoAttack, $01
0008D80C E102                       	smpsAlterNote       $02
0008D80E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D812 E108                       	smpsAlterNote       $08
0008D814 E701                       	dc.b	smpsNoAttack, $01
0008D816 E10C                       	smpsAlterNote       $0C
0008D818 E701                       	dc.b	smpsNoAttack, $01
0008D81A E10B                       	smpsAlterNote       $0B
0008D81C E701                       	dc.b	smpsNoAttack, $01
0008D81E E105                       	smpsAlterNote       $05
0008D820 E701                       	dc.b	smpsNoAttack, $01
0008D822 E101                       	smpsAlterNote       $01
0008D824 E701                       	dc.b	smpsNoAttack, $01
0008D826 E105                       	smpsAlterNote       $05
0008D828 E701                       	dc.b	smpsNoAttack, $01
0008D82A E108                       	smpsAlterNote       $08
0008D82C E701                       	dc.b	smpsNoAttack, $01
0008D82E E10C                       	smpsAlterNote       $0C
0008D830 E701                       	dc.b	smpsNoAttack, $01
0008D832 E108                       	smpsAlterNote       $08
0008D834 E701                       	dc.b	smpsNoAttack, $01
0008D836 E102                       	smpsAlterNote       $02
0008D838 E701                       	dc.b	smpsNoAttack, $01
0008D83A E101                       	smpsAlterNote       $01
0008D83C E701                       	dc.b	smpsNoAttack, $01
0008D83E E105                       	smpsAlterNote       $05
0008D840 E701                       	dc.b	smpsNoAttack, $01
0008D842 E10B                       	smpsAlterNote       $0B
0008D844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D848 E108                       	smpsAlterNote       $08
0008D84A E701                       	dc.b	smpsNoAttack, $01
0008D84C E102                       	smpsAlterNote       $02
0008D84E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D852 E108                       	smpsAlterNote       $08
0008D854 E701                       	dc.b	smpsNoAttack, $01
0008D856 E10B                       	smpsAlterNote       $0B
0008D858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D85C E105                       	smpsAlterNote       $05
0008D85E E701                       	dc.b	smpsNoAttack, $01
0008D860 E102                       	smpsAlterNote       $02
0008D862 8001                       	dc.b	nRst, $01
0008D864 E107                       	smpsAlterNote       $07
0008D866 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D86A E108                       	smpsAlterNote       $08
0008D86C C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D870 E102                       	smpsAlterNote       $02
0008D872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D876 E108                       	smpsAlterNote       $08
0008D878 E701                       	dc.b	smpsNoAttack, $01
0008D87A E10B                       	smpsAlterNote       $0B
0008D87C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D880 E105                       	smpsAlterNote       $05
0008D882 E701                       	dc.b	smpsNoAttack, $01
0008D884 E101                       	smpsAlterNote       $01
0008D886 E701                       	dc.b	smpsNoAttack, $01
0008D888 E102                       	smpsAlterNote       $02
0008D88A E701                       	dc.b	smpsNoAttack, $01
0008D88C E108                       	smpsAlterNote       $08
0008D88E E701                       	dc.b	smpsNoAttack, $01
0008D890 E10C                       	smpsAlterNote       $0C
0008D892 E701                       	dc.b	smpsNoAttack, $01
0008D894 E108                       	smpsAlterNote       $08
0008D896 E701                       	dc.b	smpsNoAttack, $01
0008D898 E105                       	smpsAlterNote       $05
0008D89A E701                       	dc.b	smpsNoAttack, $01
0008D89C E101                       	smpsAlterNote       $01
0008D89E E701                       	dc.b	smpsNoAttack, $01
0008D8A0 E105                       	smpsAlterNote       $05
0008D8A2 E701                       	dc.b	smpsNoAttack, $01
0008D8A4 E10B                       	smpsAlterNote       $0B
0008D8A6 E701                       	dc.b	smpsNoAttack, $01
0008D8A8 E10C                       	smpsAlterNote       $0C
0008D8AA E701                       	dc.b	smpsNoAttack, $01
0008D8AC E108                       	smpsAlterNote       $08
0008D8AE E701                       	dc.b	smpsNoAttack, $01
0008D8B0 E102                       	smpsAlterNote       $02
0008D8B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8B6 E105                       	smpsAlterNote       $05
0008D8B8 E701                       	dc.b	smpsNoAttack, $01
0008D8BA E10B                       	smpsAlterNote       $0B
0008D8BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8C0 E105                       	smpsAlterNote       $05
0008D8C2 E701                       	dc.b	smpsNoAttack, $01
0008D8C4 E102                       	smpsAlterNote       $02
0008D8C6 E701                       	dc.b	smpsNoAttack, $01
0008D8C8 E109                       	smpsAlterNote       $09
0008D8CA C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D8CE E108                       	smpsAlterNote       $08
0008D8D0 C10D                       	dc.b	nE5, $0D
0008D8D2 E105                       	smpsAlterNote       $05
0008D8D4 E701                       	dc.b	smpsNoAttack, $01
0008D8D6 E101                       	smpsAlterNote       $01
0008D8D8 E701                       	dc.b	smpsNoAttack, $01
0008D8DA E102                       	smpsAlterNote       $02
0008D8DC E701                       	dc.b	smpsNoAttack, $01
0008D8DE E108                       	smpsAlterNote       $08
0008D8E0 E701                       	dc.b	smpsNoAttack, $01
0008D8E2 E10C                       	smpsAlterNote       $0C
0008D8E4 E701                       	dc.b	smpsNoAttack, $01
0008D8E6 E108                       	smpsAlterNote       $08
0008D8E8 E701                       	dc.b	smpsNoAttack, $01
0008D8EA E105                       	smpsAlterNote       $05
0008D8EC E701                       	dc.b	smpsNoAttack, $01
0008D8EE E101                       	smpsAlterNote       $01
0008D8F0 E701                       	dc.b	smpsNoAttack, $01
0008D8F2 E105                       	smpsAlterNote       $05
0008D8F4 E701                       	dc.b	smpsNoAttack, $01
0008D8F6 E10B                       	smpsAlterNote       $0B
0008D8F8 E701                       	dc.b	smpsNoAttack, $01
0008D8FA E10C                       	smpsAlterNote       $0C
0008D8FC E701                       	dc.b	smpsNoAttack, $01
0008D8FE E108                       	smpsAlterNote       $08
0008D900 E701                       	dc.b	smpsNoAttack, $01
0008D902 E102                       	smpsAlterNote       $02
0008D904 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D90C E10B                       	smpsAlterNote       $0B
0008D90E BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D912 E10C                       	smpsAlterNote       $0C
0008D914 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D918 E10B                       	smpsAlterNote       $0B
0008D91A BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D920 E107                       	smpsAlterNote       $07
0008D922 BF03                       	dc.b	nD5, $03
0008D924 E108                       	smpsAlterNote       $08
0008D926 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D92A E109                       	smpsAlterNote       $09
0008D92C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D932 E10B                       	smpsAlterNote       $0B
0008D934 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D938 E107                       	smpsAlterNote       $07
0008D93A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D93E E106                       	smpsAlterNote       $06
0008D940 C90D                       	dc.b	nC6, $0D
0008D942 E103                       	smpsAlterNote       $03
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 E1FF                       	smpsAlterNote       $FF
0008D948 E701                       	dc.b	smpsNoAttack, $01
0008D94A E103                       	smpsAlterNote       $03
0008D94C E701                       	dc.b	smpsNoAttack, $01
0008D94E E109                       	smpsAlterNote       $09
0008D950 E701                       	dc.b	smpsNoAttack, $01
0008D952 E10A                       	smpsAlterNote       $0A
0008D954 E701                       	dc.b	smpsNoAttack, $01
0008D956 E106                       	smpsAlterNote       $06
0008D958 E701                       	dc.b	smpsNoAttack, $01
0008D95A E100                       	smpsAlterNote       $00
0008D95C E701                       	dc.b	smpsNoAttack, $01
0008D95E E10C                       	smpsAlterNote       $0C
0008D960 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D964 E10B                       	smpsAlterNote       $0B
0008D966 C603                       	dc.b	nA5, $03
0008D968 E109                       	smpsAlterNote       $09
0008D96A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D96E E10B                       	smpsAlterNote       $0B
0008D970 C60D                       	dc.b	nA5, $0D
0008D972 E105                       	smpsAlterNote       $05
0008D974 E701                       	dc.b	smpsNoAttack, $01
0008D976 E104                       	smpsAlterNote       $04
0008D978 E701                       	dc.b	smpsNoAttack, $01
0008D97A E108                       	smpsAlterNote       $08
0008D97C E701                       	dc.b	smpsNoAttack, $01
0008D97E E10E                       	smpsAlterNote       $0E
0008D980 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D984 E10B                       	smpsAlterNote       $0B
0008D986 E701                       	dc.b	smpsNoAttack, $01
0008D988 E105                       	smpsAlterNote       $05
0008D98A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D98E E10B                       	smpsAlterNote       $0B
0008D990 E701                       	dc.b	smpsNoAttack, $01
0008D992 E10E                       	smpsAlterNote       $0E
0008D994 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D998 E108                       	smpsAlterNote       $08
0008D99A E701                       	dc.b	smpsNoAttack, $01
0008D99C E104                       	smpsAlterNote       $04
0008D99E E701                       	dc.b	smpsNoAttack, $01
0008D9A0 E105                       	smpsAlterNote       $05
0008D9A2 E701                       	dc.b	smpsNoAttack, $01
0008D9A4 E10B                       	smpsAlterNote       $0B
0008D9A6 E701                       	dc.b	smpsNoAttack, $01
0008D9A8 E10F                       	smpsAlterNote       $0F
0008D9AA E701                       	dc.b	smpsNoAttack, $01
0008D9AC E10B                       	smpsAlterNote       $0B
0008D9AE E701                       	dc.b	smpsNoAttack, $01
0008D9B0 E108                       	smpsAlterNote       $08
0008D9B2 E701                       	dc.b	smpsNoAttack, $01
0008D9B4 E104                       	smpsAlterNote       $04
0008D9B6 E701                       	dc.b	smpsNoAttack, $01
0008D9B8 E108                       	smpsAlterNote       $08
0008D9BA E701                       	dc.b	smpsNoAttack, $01
0008D9BC E10E                       	smpsAlterNote       $0E
0008D9BE E701                       	dc.b	smpsNoAttack, $01
0008D9C0 E10F                       	smpsAlterNote       $0F
0008D9C2 E701                       	dc.b	smpsNoAttack, $01
0008D9C4 E10B                       	smpsAlterNote       $0B
0008D9C6 E701                       	dc.b	smpsNoAttack, $01
0008D9C8 E105                       	smpsAlterNote       $05
0008D9CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9CE E108                       	smpsAlterNote       $08
0008D9D0 E701                       	dc.b	smpsNoAttack, $01
0008D9D2 E10E                       	smpsAlterNote       $0E
0008D9D4 E701                       	dc.b	smpsNoAttack, $01
0008D9D6 E10F                       	smpsAlterNote       $0F
0008D9D8 800F                       	dc.b	nRst, $0F
0008D9DA E107                       	smpsAlterNote       $07
0008D9DC BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D9E0 E108                       	smpsAlterNote       $08
0008D9E2 C103                       	dc.b	nE5, $03
0008D9E4 E109                       	smpsAlterNote       $09
0008D9E6 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D9EC E10B                       	smpsAlterNote       $0B
0008D9EE C607                       	dc.b	nA5, $07
0008D9F0 E107                       	smpsAlterNote       $07
0008D9F2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D9F6 E106                       	smpsAlterNote       $06
0008D9F8 C90D                       	dc.b	nC6, $0D
0008D9FA E107                       	smpsAlterNote       $07
0008D9FC CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008DA00 E10C                       	smpsAlterNote       $0C
0008DA02 C704                       	dc.b	nBb5, $04
0008DA04 E10B                       	smpsAlterNote       $0B
0008DA06 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008DA0A E109                       	smpsAlterNote       $09
0008DA0C C404                       	dc.b	nG5, $04
0008DA0E E10B                       	smpsAlterNote       $0B
0008DA10 C60D                       	dc.b	nA5, $0D
0008DA12 E108                       	smpsAlterNote       $08
0008DA14 E701                       	dc.b	smpsNoAttack, $01
0008DA16 E105                       	smpsAlterNote       $05
0008DA18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA1C E10B                       	smpsAlterNote       $0B
0008DA1E E701                       	dc.b	smpsNoAttack, $01
0008DA20 E10F                       	smpsAlterNote       $0F
0008DA22 E701                       	dc.b	smpsNoAttack, $01
0008DA24 E10E                       	smpsAlterNote       $0E
0008DA26 E701                       	dc.b	smpsNoAttack, $01
0008DA28 E108                       	smpsAlterNote       $08
0008DA2A E701                       	dc.b	smpsNoAttack, $01
0008DA2C E104                       	smpsAlterNote       $04
0008DA2E E701                       	dc.b	smpsNoAttack, $01
0008DA30 E108                       	smpsAlterNote       $08
0008DA32 E701                       	dc.b	smpsNoAttack, $01
0008DA34 E10B                       	smpsAlterNote       $0B
0008DA36 E701                       	dc.b	smpsNoAttack, $01
0008DA38 E10F                       	smpsAlterNote       $0F
0008DA3A E701                       	dc.b	smpsNoAttack, $01
0008DA3C E10B                       	smpsAlterNote       $0B
0008DA3E E701                       	dc.b	smpsNoAttack, $01
0008DA40 E105                       	smpsAlterNote       $05
0008DA42 E701                       	dc.b	smpsNoAttack, $01
0008DA44 E104                       	smpsAlterNote       $04
0008DA46 E701                       	dc.b	smpsNoAttack, $01
0008DA48 E108                       	smpsAlterNote       $08
0008DA4A E701                       	dc.b	smpsNoAttack, $01
0008DA4C E10E                       	smpsAlterNote       $0E
0008DA4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA52 E10B                       	smpsAlterNote       $0B
0008DA54 E701                       	dc.b	smpsNoAttack, $01
0008DA56 E105                       	smpsAlterNote       $05
0008DA58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA5C E10B                       	smpsAlterNote       $0B
0008DA5E E701                       	dc.b	smpsNoAttack, $01
0008DA60 E10E                       	smpsAlterNote       $0E
0008DA62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA66 E108                       	smpsAlterNote       $08
0008DA68 E701                       	dc.b	smpsNoAttack, $01
0008DA6A E105                       	smpsAlterNote       $05
0008DA6C 8001                       	dc.b	nRst, $01
0008DA6E E109                       	smpsAlterNote       $09
0008DA70 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008DA74 E10B                       	smpsAlterNote       $0B
0008DA76 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008DA7E E109                       	smpsAlterNote       $09
0008DA80 C404                       	dc.b	nG5, $04
0008DA82 E10B                       	smpsAlterNote       $0B
0008DA84 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008DA88 E107                       	smpsAlterNote       $07
0008DA8A BF0D                       	dc.b	nD5, $0D
0008DA8C E101                       	smpsAlterNote       $01
0008DA8E E701                       	dc.b	smpsNoAttack, $01
0008DA90 E100                       	smpsAlterNote       $00
0008DA92 E701                       	dc.b	smpsNoAttack, $01
0008DA94 E104                       	smpsAlterNote       $04
0008DA96 E701                       	dc.b	smpsNoAttack, $01
0008DA98 E10A                       	smpsAlterNote       $0A
0008DA9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA9E E107                       	smpsAlterNote       $07
0008DAA0 E701                       	dc.b	smpsNoAttack, $01
0008DAA2 E101                       	smpsAlterNote       $01
0008DAA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAA8 E107                       	smpsAlterNote       $07
0008DAAA E701                       	dc.b	smpsNoAttack, $01
0008DAAC E10A                       	smpsAlterNote       $0A
0008DAAE E701                       	dc.b	smpsNoAttack, $01
0008DAB0 E10B                       	smpsAlterNote       $0B
0008DAB2 8001                       	dc.b	nRst, $01
0008DAB4 E108                       	smpsAlterNote       $08
0008DAB6 8001                       	dc.b	nRst, $01
0008DAB8 E109                       	smpsAlterNote       $09
0008DABA 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008DABE E10B                       	smpsAlterNote       $0B
0008DAC0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008DAC8 E108                       	smpsAlterNote       $08
0008DACA CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DACE E109                       	smpsAlterNote       $09
0008DAD0 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008DAD4 E108                       	smpsAlterNote       $08
0008DAD6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008DADA E106                       	smpsAlterNote       $06
0008DADC C903                       	dc.b	nC6, $03
0008DADE E109                       	smpsAlterNote       $09
0008DAE0 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008DAE4 E10C                       	smpsAlterNote       $0C
0008DAE6 C70D                       	dc.b	nBb5, $0D
0008DAE8 E109                       	smpsAlterNote       $09
0008DAEA E701                       	dc.b	smpsNoAttack, $01
0008DAEC E105                       	smpsAlterNote       $05
0008DAEE E701                       	dc.b	smpsNoAttack, $01
0008DAF0 E109                       	smpsAlterNote       $09
0008DAF2 E701                       	dc.b	smpsNoAttack, $01
0008DAF4 E10F                       	smpsAlterNote       $0F
0008DAF6 E701                       	dc.b	smpsNoAttack, $01
0008DAF8 E110                       	smpsAlterNote       $10
0008DAFA E701                       	dc.b	smpsNoAttack, $01
0008DAFC E10C                       	smpsAlterNote       $0C
0008DAFE E701                       	dc.b	smpsNoAttack, $01
0008DB00 E106                       	smpsAlterNote       $06
0008DB02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB06 E109                       	smpsAlterNote       $09
0008DB08 E701                       	dc.b	smpsNoAttack, $01
0008DB0A E10F                       	smpsAlterNote       $0F
0008DB0C E701                       	dc.b	smpsNoAttack, $01
0008DB0E E110                       	smpsAlterNote       $10
0008DB10 8001                       	dc.b	nRst, $01
0008DB12 E10B                       	smpsAlterNote       $0B
0008DB14 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008DB18 E109                       	smpsAlterNote       $09
0008DB1A C40D                       	dc.b	nG5, $0D
0008DB1C E103                       	smpsAlterNote       $03
0008DB1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB22 E106                       	smpsAlterNote       $06
0008DB24 E701                       	dc.b	smpsNoAttack, $01
0008DB26 E10C                       	smpsAlterNote       $0C
0008DB28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB2C E106                       	smpsAlterNote       $06
0008DB2E E701                       	dc.b	smpsNoAttack, $01
0008DB30 E103                       	smpsAlterNote       $03
0008DB32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB36 E109                       	smpsAlterNote       $09
0008DB38 E701                       	dc.b	smpsNoAttack, $01
0008DB3A E10D                       	smpsAlterNote       $0D
0008DB3C E701                       	dc.b	smpsNoAttack, $01
0008DB3E E10C                       	smpsAlterNote       $0C
0008DB40 E701                       	dc.b	smpsNoAttack, $01
0008DB42 E106                       	smpsAlterNote       $06
0008DB44 E701                       	dc.b	smpsNoAttack, $01
0008DB46 E102                       	smpsAlterNote       $02
0008DB48 E701                       	dc.b	smpsNoAttack, $01
0008DB4A E103                       	smpsAlterNote       $03
0008DB4C 8001                       	dc.b	nRst, $01
0008DB4E E10B                       	smpsAlterNote       $0B
0008DB50 C60D                       	dc.b	nA5, $0D
0008DB52 E108                       	smpsAlterNote       $08
0008DB54 E701                       	dc.b	smpsNoAttack, $01
0008DB56 E104                       	smpsAlterNote       $04
0008DB58 E701                       	dc.b	smpsNoAttack, $01
0008DB5A E108                       	smpsAlterNote       $08
0008DB5C E701                       	dc.b	smpsNoAttack, $01
0008DB5E E10B                       	smpsAlterNote       $0B
0008DB60 E701                       	dc.b	smpsNoAttack, $01
0008DB62 E10F                       	smpsAlterNote       $0F
0008DB64 E701                       	dc.b	smpsNoAttack, $01
0008DB66 E10B                       	smpsAlterNote       $0B
0008DB68 E701                       	dc.b	smpsNoAttack, $01
0008DB6A E105                       	smpsAlterNote       $05
0008DB6C E701                       	dc.b	smpsNoAttack, $01
0008DB6E E104                       	smpsAlterNote       $04
0008DB70 E701                       	dc.b	smpsNoAttack, $01
0008DB72 E108                       	smpsAlterNote       $08
0008DB74 E701                       	dc.b	smpsNoAttack, $01
0008DB76 E10E                       	smpsAlterNote       $0E
0008DB78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB7C E10B                       	smpsAlterNote       $0B
0008DB7E E701                       	dc.b	smpsNoAttack, $01
0008DB80 E105                       	smpsAlterNote       $05
0008DB82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB86 E10C                       	smpsAlterNote       $0C
0008DB88 C70E                       	dc.b	nBb5, $0E
0008DB8A E106                       	smpsAlterNote       $06
0008DB8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB90 E10C                       	smpsAlterNote       $0C
0008DB92 E701                       	dc.b	smpsNoAttack, $01
0008DB94 E10F                       	smpsAlterNote       $0F
0008DB96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB9A E109                       	smpsAlterNote       $09
0008DB9C E701                       	dc.b	smpsNoAttack, $01
0008DB9E E105                       	smpsAlterNote       $05
0008DBA0 E701                       	dc.b	smpsNoAttack, $01
0008DBA2 E106                       	smpsAlterNote       $06
0008DBA4 E701                       	dc.b	smpsNoAttack, $01
0008DBA6 E10C                       	smpsAlterNote       $0C
0008DBA8 E701                       	dc.b	smpsNoAttack, $01
0008DBAA E110                       	smpsAlterNote       $10
0008DBAC E701                       	dc.b	smpsNoAttack, $01
0008DBAE E10C                       	smpsAlterNote       $0C
0008DBB0 E701                       	dc.b	smpsNoAttack, $01
0008DBB2 E109                       	smpsAlterNote       $09
0008DBB4 E701                       	dc.b	smpsNoAttack, $01
0008DBB6 E105                       	smpsAlterNote       $05
0008DBB8 E701                       	dc.b	smpsNoAttack, $01
0008DBBA E106                       	smpsAlterNote       $06
0008DBBC 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008DBC0 E107                       	smpsAlterNote       $07
0008DBC2 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008DBC7 E108                       	smpsAlterNote       $08
0008DBC9 CD0D                       	dc.b	nE6, $0D
0008DBCB E107                       	smpsAlterNote       $07
0008DBCD CB0D                       	dc.b	nD6, $0D
0008DBCF E104                       	smpsAlterNote       $04
0008DBD1 E701                       	dc.b	smpsNoAttack, $01
0008DBD3 E100                       	smpsAlterNote       $00
0008DBD5 E701                       	dc.b	smpsNoAttack, $01
0008DBD7 E101                       	smpsAlterNote       $01
0008DBD9 E701                       	dc.b	smpsNoAttack, $01
0008DBDB E107                       	smpsAlterNote       $07
0008DBDD E701                       	dc.b	smpsNoAttack, $01
0008DBDF E10B                       	smpsAlterNote       $0B
0008DBE1 E701                       	dc.b	smpsNoAttack, $01
0008DBE3 E107                       	smpsAlterNote       $07
0008DBE5 E701                       	dc.b	smpsNoAttack, $01
0008DBE7 E104                       	smpsAlterNote       $04
0008DBE9 E701                       	dc.b	smpsNoAttack, $01
0008DBEB E100                       	smpsAlterNote       $00
0008DBED E701                       	dc.b	smpsNoAttack, $01
0008DBEF E104                       	smpsAlterNote       $04
0008DBF1 E701                       	dc.b	smpsNoAttack, $01
0008DBF3 E10A                       	smpsAlterNote       $0A
0008DBF5 E701                       	dc.b	smpsNoAttack, $01
0008DBF7 E10B                       	smpsAlterNote       $0B
0008DBF9 E701                       	dc.b	smpsNoAttack, $01
0008DBFB E108                       	smpsAlterNote       $08
0008DBFD CC0D                       	dc.b	nEb6, $0D
0008DBFF E105                       	smpsAlterNote       $05
0008DC01 E701                       	dc.b	smpsNoAttack, $01
0008DC03 E101                       	smpsAlterNote       $01
0008DC05 E701                       	dc.b	smpsNoAttack, $01
0008DC07 E102                       	smpsAlterNote       $02
0008DC09 E701                       	dc.b	smpsNoAttack, $01
0008DC0B E108                       	smpsAlterNote       $08
0008DC0D E701                       	dc.b	smpsNoAttack, $01
0008DC0F E106                       	smpsAlterNote       $06
0008DC11 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008DC1D 8001                       	dc.b	nRst, $01
0008DC1F E107                       	smpsAlterNote       $07
0008DC21 CB0D                       	dc.b	nD6, $0D
0008DC23 E104                       	smpsAlterNote       $04
0008DC25 E701                       	dc.b	smpsNoAttack, $01
0008DC27 E100                       	smpsAlterNote       $00
0008DC29 E701                       	dc.b	smpsNoAttack, $01
0008DC2B E104                       	smpsAlterNote       $04
0008DC2D E701                       	dc.b	smpsNoAttack, $01
0008DC2F E107                       	smpsAlterNote       $07
0008DC31 E701                       	dc.b	smpsNoAttack, $01
0008DC33 E10B                       	smpsAlterNote       $0B
0008DC35 E701                       	dc.b	smpsNoAttack, $01
0008DC37 E107                       	smpsAlterNote       $07
0008DC39 E701                       	dc.b	smpsNoAttack, $01
0008DC3B E101                       	smpsAlterNote       $01
0008DC3D E701                       	dc.b	smpsNoAttack, $01
0008DC3F E100                       	smpsAlterNote       $00
0008DC41 E701                       	dc.b	smpsNoAttack, $01
0008DC43 E104                       	smpsAlterNote       $04
0008DC45 E701                       	dc.b	smpsNoAttack, $01
0008DC47 E10A                       	smpsAlterNote       $0A
0008DC49 E701                       	dc.b	smpsNoAttack, $01
0008DC4B E10B                       	smpsAlterNote       $0B
0008DC4D 8001                       	dc.b	nRst, $01
0008DC4F E109                       	smpsAlterNote       $09
0008DC51 CE0A                       	dc.b	nF6, $0A
0008DC53 E108                       	smpsAlterNote       $08
0008DC55 CC07                       	dc.b	nEb6, $07
0008DC57 E106                       	smpsAlterNote       $06
0008DC59 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008DC65 E107                       	smpsAlterNote       $07
0008DC67 CB0D                       	dc.b	nD6, $0D
0008DC69 E101                       	smpsAlterNote       $01
0008DC6B E701                       	dc.b	smpsNoAttack, $01
0008DC6D E100                       	smpsAlterNote       $00
0008DC6F E701                       	dc.b	smpsNoAttack, $01
0008DC71 E104                       	smpsAlterNote       $04
0008DC73 E701                       	dc.b	smpsNoAttack, $01
0008DC75 E10A                       	smpsAlterNote       $0A
0008DC77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC7B E107                       	smpsAlterNote       $07
0008DC7D E701                       	dc.b	smpsNoAttack, $01
0008DC7F E101                       	smpsAlterNote       $01
0008DC81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC85 E107                       	smpsAlterNote       $07
0008DC87 E701                       	dc.b	smpsNoAttack, $01
0008DC89 E10A                       	smpsAlterNote       $0A
0008DC8B E701                       	dc.b	smpsNoAttack, $01
0008DC8D E10B                       	smpsAlterNote       $0B
0008DC8F 8001                       	dc.b	nRst, $01
0008DC91 E108                       	smpsAlterNote       $08
0008DC93 CC0D                       	dc.b	nEb6, $0D
0008DC95 E102                       	smpsAlterNote       $02
0008DC97 E701                       	dc.b	smpsNoAttack, $01
0008DC99 E101                       	smpsAlterNote       $01
0008DC9B E701                       	dc.b	smpsNoAttack, $01
0008DC9D E105                       	smpsAlterNote       $05
0008DC9F E701                       	dc.b	smpsNoAttack, $01
0008DCA1 E108                       	smpsAlterNote       $08
0008DCA3 8001                       	dc.b	nRst, $01
0008DCA5 E106                       	smpsAlterNote       $06
0008DCA7 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008DCB3 8001                       	dc.b	nRst, $01
0008DCB5 E107                       	smpsAlterNote       $07
0008DCB7 CB0D                       	dc.b	nD6, $0D
0008DCB9 E101                       	smpsAlterNote       $01
0008DCBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCBF E104                       	smpsAlterNote       $04
0008DCC1 E701                       	dc.b	smpsNoAttack, $01
0008DCC3 E10A                       	smpsAlterNote       $0A
0008DCC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCC9 E104                       	smpsAlterNote       $04
0008DCCB E701                       	dc.b	smpsNoAttack, $01
0008DCCD E101                       	smpsAlterNote       $01
0008DCCF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCD3 E107                       	smpsAlterNote       $07
0008DCD5 E701                       	dc.b	smpsNoAttack, $01
0008DCD7 E10B                       	smpsAlterNote       $0B
0008DCD9 E701                       	dc.b	smpsNoAttack, $01
0008DCDB E10A                       	smpsAlterNote       $0A
0008DCDD E701                       	dc.b	smpsNoAttack, $01
0008DCDF E104                       	smpsAlterNote       $04
0008DCE1 E701                       	dc.b	smpsNoAttack, $01
0008DCE3 E100                       	smpsAlterNote       $00
0008DCE5 E701                       	dc.b	smpsNoAttack, $01
0008DCE7 E101                       	smpsAlterNote       $01
0008DCE9 801C                       	dc.b	nRst, $1C
0008DCED E107                       	smpsAlterNote       $07
0008DCEF BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008DCF3 E603                       	smpsAlterVol        $03
0008DCF5 F6F1 AD                    	smpsJump            music84_Jump03
0008DCF8                            
0008DCF8                            ; FM3 Data
0008DCF8                            music84_FM3:
0008DCF8 E0C0                       	smpsPan             panCenter, $00
0008DCFC E109                       	smpsAlterNote       $09
0008DCFE C203 8007                  	dc.b	nF5, $03, nRst, $07
0008DD02 E108                       	smpsAlterNote       $08
0008DD04 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008DD08 E10B                       	smpsAlterNote       $0B
0008DD0A BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008DD10 E040                       	smpsPan             panRight, $00
0008DD12 E110                       	smpsAlterNote       $10
0008DD14 E6F9                       	smpsAlterVol        $F9
0008DD16 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008DD1A E10F                       	smpsAlterNote       $0F
0008DD1C C603                       	dc.b	nA5, $03
0008DD1E E10D                       	smpsAlterNote       $0D
0008DD20 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008DD26 E10C                       	smpsAlterNote       $0C
0008DD28 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DD2C E10A                       	smpsAlterNote       $0A
0008DD2E BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DD32 E10F                       	smpsAlterNote       $0F
0008DD34 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008DD38 E0C0                       	smpsPan             panCenter, $00
0008DD3C E109                       	smpsAlterNote       $09
0008DD3E E609                       	smpsAlterVol        $09
0008DD40 B603                       	dc.b	nF4, $03
0008DD42                            
0008DD42                            music84_Jump02:
0008DD42 E70A                       	dc.b	smpsNoAttack, $0A
0008DD44 E103                       	smpsAlterNote       $03
0008DD46 E701                       	dc.b	smpsNoAttack, $01
0008DD48 E102                       	smpsAlterNote       $02
0008DD4A E701                       	dc.b	smpsNoAttack, $01
0008DD4C E106                       	smpsAlterNote       $06
0008DD4E E701                       	dc.b	smpsNoAttack, $01
0008DD50 E10C                       	smpsAlterNote       $0C
0008DD52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD56 E109                       	smpsAlterNote       $09
0008DD58 E701                       	dc.b	smpsNoAttack, $01
0008DD5A E103                       	smpsAlterNote       $03
0008DD5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD60 E109                       	smpsAlterNote       $09
0008DD62 E701                       	dc.b	smpsNoAttack, $01
0008DD64 E10C                       	smpsAlterNote       $0C
0008DD66 E701                       	dc.b	smpsNoAttack, $01
0008DD68 E10D                       	smpsAlterNote       $0D
0008DD6A 8001                       	dc.b	nRst, $01
0008DD6C E109                       	smpsAlterNote       $09
0008DD6E B80D                       	dc.b	nG4, $0D
0008DD70 E103                       	smpsAlterNote       $03
0008DD72 E701                       	dc.b	smpsNoAttack, $01
0008DD74 E102                       	smpsAlterNote       $02
0008DD76 E701                       	dc.b	smpsNoAttack, $01
0008DD78 E106                       	smpsAlterNote       $06
0008DD7A E701                       	dc.b	smpsNoAttack, $01
0008DD7C E10C                       	smpsAlterNote       $0C
0008DD7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD82 E109                       	smpsAlterNote       $09
0008DD84 E701                       	dc.b	smpsNoAttack, $01
0008DD86 E103                       	smpsAlterNote       $03
0008DD88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD8C E109                       	smpsAlterNote       $09
0008DD8E E701                       	dc.b	smpsNoAttack, $01
0008DD90 E10C                       	smpsAlterNote       $0C
0008DD92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD96 E106                       	smpsAlterNote       $06
0008DD98 E701                       	dc.b	smpsNoAttack, $01
0008DD9A E102                       	smpsAlterNote       $02
0008DD9C E701                       	dc.b	smpsNoAttack, $01
0008DD9E E103                       	smpsAlterNote       $03
0008DDA0 E701                       	dc.b	smpsNoAttack, $01
0008DDA2 E109                       	smpsAlterNote       $09
0008DDA4 E701                       	dc.b	smpsNoAttack, $01
0008DDA6 E10D                       	smpsAlterNote       $0D
0008DDA8 E701                       	dc.b	smpsNoAttack, $01
0008DDAA E109                       	smpsAlterNote       $09
0008DDAC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DDB0 E10B                       	smpsAlterNote       $0B
0008DDB2 BA0D                       	dc.b	nA4, $0D
0008DDB4 E105                       	smpsAlterNote       $05
0008DDB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDBA E108                       	smpsAlterNote       $08
0008DDBC E701                       	dc.b	smpsNoAttack, $01
0008DDBE E10E                       	smpsAlterNote       $0E
0008DDC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDC4 E108                       	smpsAlterNote       $08
0008DDC6 E701                       	dc.b	smpsNoAttack, $01
0008DDC8 E104                       	smpsAlterNote       $04
0008DDCA E701                       	dc.b	smpsNoAttack, $01
0008DDCC E105                       	smpsAlterNote       $05
0008DDCE E701                       	dc.b	smpsNoAttack, $01
0008DDD0 E10B                       	smpsAlterNote       $0B
0008DDD2 E701                       	dc.b	smpsNoAttack, $01
0008DDD4 E10F                       	smpsAlterNote       $0F
0008DDD6 E701                       	dc.b	smpsNoAttack, $01
0008DDD8 E10B                       	smpsAlterNote       $0B
0008DDDA E701                       	dc.b	smpsNoAttack, $01
0008DDDC E108                       	smpsAlterNote       $08
0008DDDE E701                       	dc.b	smpsNoAttack, $01
0008DDE0 E104                       	smpsAlterNote       $04
0008DDE2 E701                       	dc.b	smpsNoAttack, $01
0008DDE4 E108                       	smpsAlterNote       $08
0008DDE6 E701                       	dc.b	smpsNoAttack, $01
0008DDE8 E10E                       	smpsAlterNote       $0E
0008DDEA E701                       	dc.b	smpsNoAttack, $01
0008DDEC E10F                       	smpsAlterNote       $0F
0008DDEE E701                       	dc.b	smpsNoAttack, $01
0008DDF0 E10B                       	smpsAlterNote       $0B
0008DDF2 E701                       	dc.b	smpsNoAttack, $01
0008DDF4 E105                       	smpsAlterNote       $05
0008DDF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDFA E108                       	smpsAlterNote       $08
0008DDFC E701                       	dc.b	smpsNoAttack, $01
0008DDFE E10E                       	smpsAlterNote       $0E
0008DE00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE04 E108                       	smpsAlterNote       $08
0008DE06 E701                       	dc.b	smpsNoAttack, $01
0008DE08 E105                       	smpsAlterNote       $05
0008DE0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE0E E10B                       	smpsAlterNote       $0B
0008DE10 E701                       	dc.b	smpsNoAttack, $01
0008DE12 E10F                       	smpsAlterNote       $0F
0008DE14 E701                       	dc.b	smpsNoAttack, $01
0008DE16 E10E                       	smpsAlterNote       $0E
0008DE18 E701                       	dc.b	smpsNoAttack, $01
0008DE1A E108                       	smpsAlterNote       $08
0008DE1C E701                       	dc.b	smpsNoAttack, $01
0008DE1E E104                       	smpsAlterNote       $04
0008DE20 E701                       	dc.b	smpsNoAttack, $01
0008DE22 E105                       	smpsAlterNote       $05
0008DE24 8001                       	dc.b	nRst, $01
0008DE26 E108                       	smpsAlterNote       $08
0008DE28 B50A                       	dc.b	nE4, $0A
0008DE2A E109                       	smpsAlterNote       $09
0008DE2C B60D                       	dc.b	nF4, $0D
0008DE2E E106                       	smpsAlterNote       $06
0008DE30 E701                       	dc.b	smpsNoAttack, $01
0008DE32 E103                       	smpsAlterNote       $03
0008DE34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE38 E109                       	smpsAlterNote       $09
0008DE3A E701                       	dc.b	smpsNoAttack, $01
0008DE3C E10D                       	smpsAlterNote       $0D
0008DE3E E701                       	dc.b	smpsNoAttack, $01
0008DE40 E10C                       	smpsAlterNote       $0C
0008DE42 E701                       	dc.b	smpsNoAttack, $01
0008DE44 E106                       	smpsAlterNote       $06
0008DE46 E701                       	dc.b	smpsNoAttack, $01
0008DE48 E102                       	smpsAlterNote       $02
0008DE4A E701                       	dc.b	smpsNoAttack, $01
0008DE4C E106                       	smpsAlterNote       $06
0008DE4E E701                       	dc.b	smpsNoAttack, $01
0008DE50 E109                       	smpsAlterNote       $09
0008DE52 E701                       	dc.b	smpsNoAttack, $01
0008DE54 E10D                       	smpsAlterNote       $0D
0008DE56 E701                       	dc.b	smpsNoAttack, $01
0008DE58 E109                       	smpsAlterNote       $09
0008DE5A B80D                       	dc.b	nG4, $0D
0008DE5C E106                       	smpsAlterNote       $06
0008DE5E E701                       	dc.b	smpsNoAttack, $01
0008DE60 E103                       	smpsAlterNote       $03
0008DE62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE66 E109                       	smpsAlterNote       $09
0008DE68 E701                       	dc.b	smpsNoAttack, $01
0008DE6A E10D                       	smpsAlterNote       $0D
0008DE6C E701                       	dc.b	smpsNoAttack, $01
0008DE6E E10C                       	smpsAlterNote       $0C
0008DE70 E701                       	dc.b	smpsNoAttack, $01
0008DE72 E106                       	smpsAlterNote       $06
0008DE74 E701                       	dc.b	smpsNoAttack, $01
0008DE76 E102                       	smpsAlterNote       $02
0008DE78 E701                       	dc.b	smpsNoAttack, $01
0008DE7A E106                       	smpsAlterNote       $06
0008DE7C E701                       	dc.b	smpsNoAttack, $01
0008DE7E E109                       	smpsAlterNote       $09
0008DE80 E701                       	dc.b	smpsNoAttack, $01
0008DE82 E10D                       	smpsAlterNote       $0D
0008DE84 E701                       	dc.b	smpsNoAttack, $01
0008DE86 E109                       	smpsAlterNote       $09
0008DE88 E701                       	dc.b	smpsNoAttack, $01
0008DE8A E103                       	smpsAlterNote       $03
0008DE8C E701                       	dc.b	smpsNoAttack, $01
0008DE8E E102                       	smpsAlterNote       $02
0008DE90 E701                       	dc.b	smpsNoAttack, $01
0008DE92 E106                       	smpsAlterNote       $06
0008DE94 E701                       	dc.b	smpsNoAttack, $01
0008DE96 E10C                       	smpsAlterNote       $0C
0008DE98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE9C E109                       	smpsAlterNote       $09
0008DE9E E701                       	dc.b	smpsNoAttack, $01
0008DEA0 E10B                       	smpsAlterNote       $0B
0008DEA2 BA0D                       	dc.b	nA4, $0D
0008DEA4 E108                       	smpsAlterNote       $08
0008DEA6 E701                       	dc.b	smpsNoAttack, $01
0008DEA8 E104                       	smpsAlterNote       $04
0008DEAA E701                       	dc.b	smpsNoAttack, $01
0008DEAC E108                       	smpsAlterNote       $08
0008DEAE E701                       	dc.b	smpsNoAttack, $01
0008DEB0 E10B                       	smpsAlterNote       $0B
0008DEB2 E701                       	dc.b	smpsNoAttack, $01
0008DEB4 E10F                       	smpsAlterNote       $0F
0008DEB6 E701                       	dc.b	smpsNoAttack, $01
0008DEB8 E10B                       	smpsAlterNote       $0B
0008DEBA E701                       	dc.b	smpsNoAttack, $01
0008DEBC E105                       	smpsAlterNote       $05
0008DEBE E701                       	dc.b	smpsNoAttack, $01
0008DEC0 E104                       	smpsAlterNote       $04
0008DEC2 E701                       	dc.b	smpsNoAttack, $01
0008DEC4 E108                       	smpsAlterNote       $08
0008DEC6 E701                       	dc.b	smpsNoAttack, $01
0008DEC8 E10E                       	smpsAlterNote       $0E
0008DECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DECE E10B                       	smpsAlterNote       $0B
0008DED0 E701                       	dc.b	smpsNoAttack, $01
0008DED2 E105                       	smpsAlterNote       $05
0008DED4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DED8 E10B                       	smpsAlterNote       $0B
0008DEDA E701                       	dc.b	smpsNoAttack, $01
0008DEDC E10E                       	smpsAlterNote       $0E
0008DEDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEE2 E108                       	smpsAlterNote       $08
0008DEE4 E701                       	dc.b	smpsNoAttack, $01
0008DEE6 E104                       	smpsAlterNote       $04
0008DEE8 E701                       	dc.b	smpsNoAttack, $01
0008DEEA E105                       	smpsAlterNote       $05
0008DEEC E701                       	dc.b	smpsNoAttack, $01
0008DEEE E10B                       	smpsAlterNote       $0B
0008DEF0 E701                       	dc.b	smpsNoAttack, $01
0008DEF2 E10F                       	smpsAlterNote       $0F
0008DEF4 E701                       	dc.b	smpsNoAttack, $01
0008DEF6 E10B                       	smpsAlterNote       $0B
0008DEF8 E701                       	dc.b	smpsNoAttack, $01
0008DEFA E108                       	smpsAlterNote       $08
0008DEFC E701                       	dc.b	smpsNoAttack, $01
0008DEFE E105                       	smpsAlterNote       $05
0008DF00 8001                       	dc.b	nRst, $01
0008DF02 E109                       	smpsAlterNote       $09
0008DF04 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008DF08 E108                       	smpsAlterNote       $08
0008DF0A B506 8001                  	dc.b	nE4, $06, nRst, $01
0008DF0E E107                       	smpsAlterNote       $07
0008DF10 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008DF14 E108                       	smpsAlterNote       $08
0008DF16 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DF1A E109                       	smpsAlterNote       $09
0008DF1C B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008DF22 E10B                       	smpsAlterNote       $0B
0008DF24 BA0D                       	dc.b	nA4, $0D
0008DF26 E108                       	smpsAlterNote       $08
0008DF28 E701                       	dc.b	smpsNoAttack, $01
0008DF2A E104                       	smpsAlterNote       $04
0008DF2C E701                       	dc.b	smpsNoAttack, $01
0008DF2E E108                       	smpsAlterNote       $08
0008DF30 E701                       	dc.b	smpsNoAttack, $01
0008DF32 E10E                       	smpsAlterNote       $0E
0008DF34 E701                       	dc.b	smpsNoAttack, $01
0008DF36 E10F                       	smpsAlterNote       $0F
0008DF38 E701                       	dc.b	smpsNoAttack, $01
0008DF3A E10B                       	smpsAlterNote       $0B
0008DF3C E701                       	dc.b	smpsNoAttack, $01
0008DF3E E105                       	smpsAlterNote       $05
0008DF40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF44 E108                       	smpsAlterNote       $08
0008DF46 E701                       	dc.b	smpsNoAttack, $01
0008DF48 E10E                       	smpsAlterNote       $0E
0008DF4A E701                       	dc.b	smpsNoAttack, $01
0008DF4C E10F                       	smpsAlterNote       $0F
0008DF4E 8001                       	dc.b	nRst, $01
0008DF50 E109                       	smpsAlterNote       $09
0008DF52 C20D                       	dc.b	nF5, $0D
0008DF54 E103                       	smpsAlterNote       $03
0008DF56 E701                       	dc.b	smpsNoAttack, $01
0008DF58 E102                       	smpsAlterNote       $02
0008DF5A E701                       	dc.b	smpsNoAttack, $01
0008DF5C E106                       	smpsAlterNote       $06
0008DF5E E701                       	dc.b	smpsNoAttack, $01
0008DF60 E10C                       	smpsAlterNote       $0C
0008DF62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF66 E109                       	smpsAlterNote       $09
0008DF68 E701                       	dc.b	smpsNoAttack, $01
0008DF6A E103                       	smpsAlterNote       $03
0008DF6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF70 E109                       	smpsAlterNote       $09
0008DF72 E701                       	dc.b	smpsNoAttack, $01
0008DF74 E10C                       	smpsAlterNote       $0C
0008DF76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF7A E106                       	smpsAlterNote       $06
0008DF7C E701                       	dc.b	smpsNoAttack, $01
0008DF7E E102                       	smpsAlterNote       $02
0008DF80 E701                       	dc.b	smpsNoAttack, $01
0008DF82 E103                       	smpsAlterNote       $03
0008DF84 E701                       	dc.b	smpsNoAttack, $01
0008DF86 E109                       	smpsAlterNote       $09
0008DF88 E701                       	dc.b	smpsNoAttack, $01
0008DF8A E10D                       	smpsAlterNote       $0D
0008DF8C E701                       	dc.b	smpsNoAttack, $01
0008DF8E E109                       	smpsAlterNote       $09
0008DF90 E701                       	dc.b	smpsNoAttack, $01
0008DF92 E106                       	smpsAlterNote       $06
0008DF94 E701                       	dc.b	smpsNoAttack, $01
0008DF96 E102                       	smpsAlterNote       $02
0008DF98 E701                       	dc.b	smpsNoAttack, $01
0008DF9A E106                       	smpsAlterNote       $06
0008DF9C E701                       	dc.b	smpsNoAttack, $01
0008DF9E E10C                       	smpsAlterNote       $0C
0008DFA0 E701                       	dc.b	smpsNoAttack, $01
0008DFA2 E10D                       	smpsAlterNote       $0D
0008DFA4 E701                       	dc.b	smpsNoAttack, $01
0008DFA6 E109                       	smpsAlterNote       $09
0008DFA8 E701                       	dc.b	smpsNoAttack, $01
0008DFAA E103                       	smpsAlterNote       $03
0008DFAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFB0 E106                       	smpsAlterNote       $06
0008DFB2 E701                       	dc.b	smpsNoAttack, $01
0008DFB4 E10C                       	smpsAlterNote       $0C
0008DFB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFBA E106                       	smpsAlterNote       $06
0008DFBC E701                       	dc.b	smpsNoAttack, $01
0008DFBE E103                       	smpsAlterNote       $03
0008DFC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFC4 E109                       	smpsAlterNote       $09
0008DFC6 E701                       	dc.b	smpsNoAttack, $01
0008DFC8 E10D                       	smpsAlterNote       $0D
0008DFCA E701                       	dc.b	smpsNoAttack, $01
0008DFCC E10C                       	smpsAlterNote       $0C
0008DFCE E701                       	dc.b	smpsNoAttack, $01
0008DFD0 E106                       	smpsAlterNote       $06
0008DFD2 E701                       	dc.b	smpsNoAttack, $01
0008DFD4 E102                       	smpsAlterNote       $02
0008DFD6 E701                       	dc.b	smpsNoAttack, $01
0008DFD8 E106                       	smpsAlterNote       $06
0008DFDA E701                       	dc.b	smpsNoAttack, $01
0008DFDC E109                       	smpsAlterNote       $09
0008DFDE E701                       	dc.b	smpsNoAttack, $01
0008DFE0 E10D                       	smpsAlterNote       $0D
0008DFE2 E701                       	dc.b	smpsNoAttack, $01
0008DFE4 E109                       	smpsAlterNote       $09
0008DFE6 E701                       	dc.b	smpsNoAttack, $01
0008DFE8 E103                       	smpsAlterNote       $03
0008DFEA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DFEE E109                       	smpsAlterNote       $09
0008DFF0 C206                       	dc.b	nF5, $06
0008DFF2 E108                       	smpsAlterNote       $08
0008DFF4 C10E                       	dc.b	nE5, $0E
0008DFF6 E102                       	smpsAlterNote       $02
0008DFF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFFC E108                       	smpsAlterNote       $08
0008DFFE E701                       	dc.b	smpsNoAttack, $01
0008E000 E10B                       	smpsAlterNote       $0B
0008E002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E006 E105                       	smpsAlterNote       $05
0008E008 E701                       	dc.b	smpsNoAttack, $01
0008E00A E101                       	smpsAlterNote       $01
0008E00C E701                       	dc.b	smpsNoAttack, $01
0008E00E E102                       	smpsAlterNote       $02
0008E010 E701                       	dc.b	smpsNoAttack, $01
0008E012 E108                       	smpsAlterNote       $08
0008E014 E701                       	dc.b	smpsNoAttack, $01
0008E016 E10C                       	smpsAlterNote       $0C
0008E018 E701                       	dc.b	smpsNoAttack, $01
0008E01A E107                       	smpsAlterNote       $07
0008E01C BF0E                       	dc.b	nD5, $0E
0008E01E E101                       	smpsAlterNote       $01
0008E020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E024 E107                       	smpsAlterNote       $07
0008E026 E701                       	dc.b	smpsNoAttack, $01
0008E028 E10A                       	smpsAlterNote       $0A
0008E02A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E02E E104                       	smpsAlterNote       $04
0008E030 E701                       	dc.b	smpsNoAttack, $01
0008E032 E100                       	smpsAlterNote       $00
0008E034 E701                       	dc.b	smpsNoAttack, $01
0008E036 E104                       	smpsAlterNote       $04
0008E038 E701                       	dc.b	smpsNoAttack, $01
0008E03A E107                       	smpsAlterNote       $07
0008E03C E701                       	dc.b	smpsNoAttack, $01
0008E03E E10B                       	smpsAlterNote       $0B
0008E040 E701                       	dc.b	smpsNoAttack, $01
0008E042 E107                       	smpsAlterNote       $07
0008E044 E701                       	dc.b	smpsNoAttack, $01
0008E046 E101                       	smpsAlterNote       $01
0008E048 E701                       	dc.b	smpsNoAttack, $01
0008E04A E100                       	smpsAlterNote       $00
0008E04C E701                       	dc.b	smpsNoAttack, $01
0008E04E E104                       	smpsAlterNote       $04
0008E050 E701                       	dc.b	smpsNoAttack, $01
0008E052 E10A                       	smpsAlterNote       $0A
0008E054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E058 E107                       	smpsAlterNote       $07
0008E05A E701                       	dc.b	smpsNoAttack, $01
0008E05C E101                       	smpsAlterNote       $01
0008E05E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E062 E107                       	smpsAlterNote       $07
0008E064 E701                       	dc.b	smpsNoAttack, $01
0008E066 E10A                       	smpsAlterNote       $0A
0008E068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E06C E104                       	smpsAlterNote       $04
0008E06E E701                       	dc.b	smpsNoAttack, $01
0008E070 E100                       	smpsAlterNote       $00
0008E072 E701                       	dc.b	smpsNoAttack, $01
0008E074 E101                       	smpsAlterNote       $01
0008E076 E701                       	dc.b	smpsNoAttack, $01
0008E078 E107                       	smpsAlterNote       $07
0008E07A E701                       	dc.b	smpsNoAttack, $01
0008E07C E10B                       	smpsAlterNote       $0B
0008E07E E701                       	dc.b	smpsNoAttack, $01
0008E080 E107                       	smpsAlterNote       $07
0008E082 E701                       	dc.b	smpsNoAttack, $01
0008E084 E104                       	smpsAlterNote       $04
0008E086 E701                       	dc.b	smpsNoAttack, $01
0008E088 E100                       	smpsAlterNote       $00
0008E08A E701                       	dc.b	smpsNoAttack, $01
0008E08C E104                       	smpsAlterNote       $04
0008E08E E701                       	dc.b	smpsNoAttack, $01
0008E090 E10A                       	smpsAlterNote       $0A
0008E092 E701                       	dc.b	smpsNoAttack, $01
0008E094 E10B                       	smpsAlterNote       $0B
0008E096 E701                       	dc.b	smpsNoAttack, $01
0008E098 E107                       	smpsAlterNote       $07
0008E09A E701                       	dc.b	smpsNoAttack, $01
0008E09C E101                       	smpsAlterNote       $01
0008E09E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0A2 E104                       	smpsAlterNote       $04
0008E0A4 E701                       	dc.b	smpsNoAttack, $01
0008E0A6 E10A                       	smpsAlterNote       $0A
0008E0A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0AC E104                       	smpsAlterNote       $04
0008E0AE E701                       	dc.b	smpsNoAttack, $01
0008E0B0 E101                       	smpsAlterNote       $01
0008E0B2 E701                       	dc.b	smpsNoAttack, $01
0008E0B6 E107                       	smpsAlterNote       $07
0008E0B8 E6FF                       	smpsAlterVol        $FF
0008E0BA BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008E0C6 8004                       	dc.b	nRst, $04
0008E0CA E109                       	smpsAlterNote       $09
0008E0CC E602                       	smpsAlterVol        $02
0008E0CE B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008E0D4 E108                       	smpsAlterNote       $08
0008E0D6 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008E0DA E109                       	smpsAlterNote       $09
0008E0DC B60D                       	dc.b	nF4, $0D
0008E0DE E106                       	smpsAlterNote       $06
0008E0E0 E701                       	dc.b	smpsNoAttack, $01
0008E0E2 E102                       	smpsAlterNote       $02
0008E0E4 E701                       	dc.b	smpsNoAttack, $01
0008E0E6 E106                       	smpsAlterNote       $06
0008E0E8 E701                       	dc.b	smpsNoAttack, $01
0008E0EA E109                       	smpsAlterNote       $09
0008E0EC E701                       	dc.b	smpsNoAttack, $01
0008E0EE E10D                       	smpsAlterNote       $0D
0008E0F0 E701                       	dc.b	smpsNoAttack, $01
0008E0F2 E109                       	smpsAlterNote       $09
0008E0F4 E701                       	dc.b	smpsNoAttack, $01
0008E0F6 E103                       	smpsAlterNote       $03
0008E0F8 E701                       	dc.b	smpsNoAttack, $01
0008E0FA E102                       	smpsAlterNote       $02
0008E0FC E701                       	dc.b	smpsNoAttack, $01
0008E0FE E106                       	smpsAlterNote       $06
0008E100 E701                       	dc.b	smpsNoAttack, $01
0008E102 E10C                       	smpsAlterNote       $0C
0008E104 E701                       	dc.b	smpsNoAttack, $01
0008E106 E10D                       	smpsAlterNote       $0D
0008E108 8001                       	dc.b	nRst, $01
0008E10A E109                       	smpsAlterNote       $09
0008E10C B80D                       	dc.b	nG4, $0D
0008E10E E106                       	smpsAlterNote       $06
0008E110 E701                       	dc.b	smpsNoAttack, $01
0008E112 E102                       	smpsAlterNote       $02
0008E114 E701                       	dc.b	smpsNoAttack, $01
0008E116 E106                       	smpsAlterNote       $06
0008E118 E701                       	dc.b	smpsNoAttack, $01
0008E11A E10C                       	smpsAlterNote       $0C
0008E11C E701                       	dc.b	smpsNoAttack, $01
0008E11E E10D                       	smpsAlterNote       $0D
0008E120 E701                       	dc.b	smpsNoAttack, $01
0008E122 E109                       	smpsAlterNote       $09
0008E124 E701                       	dc.b	smpsNoAttack, $01
0008E126 E103                       	smpsAlterNote       $03
0008E128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E12C E106                       	smpsAlterNote       $06
0008E12E E701                       	dc.b	smpsNoAttack, $01
0008E130 E10C                       	smpsAlterNote       $0C
0008E132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E136 E106                       	smpsAlterNote       $06
0008E138 E701                       	dc.b	smpsNoAttack, $01
0008E13A E103                       	smpsAlterNote       $03
0008E13C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E140 E109                       	smpsAlterNote       $09
0008E142 E701                       	dc.b	smpsNoAttack, $01
0008E144 E10D                       	smpsAlterNote       $0D
0008E146 E701                       	dc.b	smpsNoAttack, $01
0008E148 E10C                       	smpsAlterNote       $0C
0008E14A E701                       	dc.b	smpsNoAttack, $01
0008E14C E109                       	smpsAlterNote       $09
0008E14E 8001                       	dc.b	nRst, $01
0008E150 E10B                       	smpsAlterNote       $0B
0008E152 BA03                       	dc.b	nA4, $03
0008E154 E10C                       	smpsAlterNote       $0C
0008E156 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008E15A E10B                       	smpsAlterNote       $0B
0008E15C BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008E162 E10C                       	smpsAlterNote       $0C
0008E164 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E168 E10B                       	smpsAlterNote       $0B
0008E16A C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008E170 E10C                       	smpsAlterNote       $0C
0008E172 D303                       	dc.b	nBb6, $03
0008E174 E10B                       	smpsAlterNote       $0B
0008E176 D20D                       	dc.b	nA6, $0D
0008E178 E108                       	smpsAlterNote       $08
0008E17A E701                       	dc.b	smpsNoAttack, $01
0008E17C E104                       	smpsAlterNote       $04
0008E17E E701                       	dc.b	smpsNoAttack, $01
0008E180 E105                       	smpsAlterNote       $05
0008E182 E701                       	dc.b	smpsNoAttack, $01
0008E184 E10B                       	smpsAlterNote       $0B
0008E186 E701                       	dc.b	smpsNoAttack, $01
0008E188 E10F                       	smpsAlterNote       $0F
0008E18A E701                       	dc.b	smpsNoAttack, $01
0008E18C E10B                       	smpsAlterNote       $0B
0008E18E E701                       	dc.b	smpsNoAttack, $01
0008E190 E108                       	smpsAlterNote       $08
0008E192 E701                       	dc.b	smpsNoAttack, $01
0008E194 E104                       	smpsAlterNote       $04
0008E196 E701                       	dc.b	smpsNoAttack, $01
0008E198 E108                       	smpsAlterNote       $08
0008E19A E701                       	dc.b	smpsNoAttack, $01
0008E19C E10E                       	smpsAlterNote       $0E
0008E19E E701                       	dc.b	smpsNoAttack, $01
0008E1A0 E10F                       	smpsAlterNote       $0F
0008E1A2 E701                       	dc.b	smpsNoAttack, $01
0008E1A4 E10B                       	smpsAlterNote       $0B
0008E1A6 E701                       	dc.b	smpsNoAttack, $01
0008E1A8 E105                       	smpsAlterNote       $05
0008E1AA E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008E1B0 E109                       	smpsAlterNote       $09
0008E1B2 CE07                       	dc.b	nF6, $07
0008E1B4 E108                       	smpsAlterNote       $08
0008E1B6 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008E1BA E109                       	smpsAlterNote       $09
0008E1BC CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008E1C0 E108                       	smpsAlterNote       $08
0008E1C2 CC0D                       	dc.b	nEb6, $0D
0008E1C4 E102                       	smpsAlterNote       $02
0008E1C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1CA E108                       	smpsAlterNote       $08
0008E1CC E701                       	dc.b	smpsNoAttack, $01
0008E1CE E10B                       	smpsAlterNote       $0B
0008E1D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1D4 E105                       	smpsAlterNote       $05
0008E1D6 E701                       	dc.b	smpsNoAttack, $01
0008E1D8 E101                       	smpsAlterNote       $01
0008E1DA E701                       	dc.b	smpsNoAttack, $01
0008E1DC E102                       	smpsAlterNote       $02
0008E1DE E701                       	dc.b	smpsNoAttack, $01
0008E1E0 E108                       	smpsAlterNote       $08
0008E1E2 E701                       	dc.b	smpsNoAttack, $01
0008E1E4 E10C                       	smpsAlterNote       $0C
0008E1E6 E701                       	dc.b	smpsNoAttack, $01
0008E1E8 E108                       	smpsAlterNote       $08
0008E1EA E701                       	dc.b	smpsNoAttack, $01
0008E1EC E105                       	smpsAlterNote       $05
0008E1EE E701                       	dc.b	smpsNoAttack, $01
0008E1F0 E101                       	smpsAlterNote       $01
0008E1F2 E701                       	dc.b	smpsNoAttack, $01
0008E1F4 E105                       	smpsAlterNote       $05
0008E1F6 E701                       	dc.b	smpsNoAttack, $01
0008E1F8 E10B                       	smpsAlterNote       $0B
0008E1FA E701                       	dc.b	smpsNoAttack, $01
0008E1FC E10C                       	smpsAlterNote       $0C
0008E1FE E701                       	dc.b	smpsNoAttack, $01
0008E200 E108                       	smpsAlterNote       $08
0008E202 E701                       	dc.b	smpsNoAttack, $01
0008E204 E107                       	smpsAlterNote       $07
0008E206 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008E210 E10B                       	smpsAlterNote       $0B
0008E212 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008E21C E109                       	smpsAlterNote       $09
0008E21E C203                       	dc.b	nF5, $03
0008E220 E108                       	smpsAlterNote       $08
0008E222 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E226 E109                       	smpsAlterNote       $09
0008E228 C20D                       	dc.b	nF5, $0D
0008E22A E108                       	smpsAlterNote       $08
0008E22C C10E                       	dc.b	nE5, $0E
0008E22E E107                       	smpsAlterNote       $07
0008E230 BF0D                       	dc.b	nD5, $0D
0008E232 E104                       	smpsAlterNote       $04
0008E234 E701                       	dc.b	smpsNoAttack, $01
0008E236 E100                       	smpsAlterNote       $00
0008E238 E701                       	dc.b	smpsNoAttack, $01
0008E23A E104                       	smpsAlterNote       $04
0008E23C E701                       	dc.b	smpsNoAttack, $01
0008E23E E107                       	smpsAlterNote       $07
0008E240 E701                       	dc.b	smpsNoAttack, $01
0008E242 E10B                       	smpsAlterNote       $0B
0008E244 E701                       	dc.b	smpsNoAttack, $01
0008E246 E107                       	smpsAlterNote       $07
0008E248 E701                       	dc.b	smpsNoAttack, $01
0008E24A E101                       	smpsAlterNote       $01
0008E24C E701                       	dc.b	smpsNoAttack, $01
0008E24E E100                       	smpsAlterNote       $00
0008E250 E701                       	dc.b	smpsNoAttack, $01
0008E252 E104                       	smpsAlterNote       $04
0008E254 E701                       	dc.b	smpsNoAttack, $01
0008E256 E10A                       	smpsAlterNote       $0A
0008E258 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E25C E107                       	smpsAlterNote       $07
0008E25E E701                       	dc.b	smpsNoAttack, $01
0008E260 E101                       	smpsAlterNote       $01
0008E262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E266 E107                       	smpsAlterNote       $07
0008E268 E701                       	dc.b	smpsNoAttack, $01
0008E26A E10A                       	smpsAlterNote       $0A
0008E26C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E270 E104                       	smpsAlterNote       $04
0008E272 E701                       	dc.b	smpsNoAttack, $01
0008E274 E100                       	smpsAlterNote       $00
0008E276 E701                       	dc.b	smpsNoAttack, $01
0008E278 E101                       	smpsAlterNote       $01
0008E27A E701                       	dc.b	smpsNoAttack, $01
0008E27C E107                       	smpsAlterNote       $07
0008E27E E701                       	dc.b	smpsNoAttack, $01
0008E280 E10B                       	smpsAlterNote       $0B
0008E282 E701                       	dc.b	smpsNoAttack, $01
0008E284 E107                       	smpsAlterNote       $07
0008E286 E701                       	dc.b	smpsNoAttack, $01
0008E288 E104                       	smpsAlterNote       $04
0008E28A E701                       	dc.b	smpsNoAttack, $01
0008E28C E100                       	smpsAlterNote       $00
0008E28E E701                       	dc.b	smpsNoAttack, $01
0008E290 E104                       	smpsAlterNote       $04
0008E292 E701                       	dc.b	smpsNoAttack, $01
0008E294 E10A                       	smpsAlterNote       $0A
0008E296 E701                       	dc.b	smpsNoAttack, $01
0008E298 E10B                       	smpsAlterNote       $0B
0008E29A E701                       	dc.b	smpsNoAttack, $01
0008E29C E107                       	smpsAlterNote       $07
0008E29E E701                       	dc.b	smpsNoAttack, $01
0008E2A0 E101                       	smpsAlterNote       $01
0008E2A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2A6 E104                       	smpsAlterNote       $04
0008E2A8 E701                       	dc.b	smpsNoAttack, $01
0008E2AA E10A                       	smpsAlterNote       $0A
0008E2AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2B0 E104                       	smpsAlterNote       $04
0008E2B2 E701                       	dc.b	smpsNoAttack, $01
0008E2B4 E101                       	smpsAlterNote       $01
0008E2B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2BA E107                       	smpsAlterNote       $07
0008E2BC E701                       	dc.b	smpsNoAttack, $01
0008E2BE E10B                       	smpsAlterNote       $0B
0008E2C0 E701                       	dc.b	smpsNoAttack, $01
0008E2C2 E10A                       	smpsAlterNote       $0A
0008E2C4 E701                       	dc.b	smpsNoAttack, $01
0008E2C6 E104                       	smpsAlterNote       $04
0008E2C8 E701                       	dc.b	smpsNoAttack, $01
0008E2CA E100                       	smpsAlterNote       $00
0008E2CC E701                       	dc.b	smpsNoAttack, $01
0008E2CE E104                       	smpsAlterNote       $04
0008E2D0 E701                       	dc.b	smpsNoAttack, $01
0008E2D2 E107                       	smpsAlterNote       $07
0008E2D4 E701                       	dc.b	smpsNoAttack, $01
0008E2D6 E10B                       	smpsAlterNote       $0B
0008E2D8 E701                       	dc.b	smpsNoAttack, $01
0008E2DA E107                       	smpsAlterNote       $07
0008E2DC E701                       	dc.b	smpsNoAttack, $01
0008E2DE E101                       	smpsAlterNote       $01
0008E2E0 E701                       	dc.b	smpsNoAttack, $01
0008E2E2 E100                       	smpsAlterNote       $00
0008E2E4 E701                       	dc.b	smpsNoAttack, $01
0008E2E6 E104                       	smpsAlterNote       $04
0008E2E8 E701                       	dc.b	smpsNoAttack, $01
0008E2EA E10A                       	smpsAlterNote       $0A
0008E2EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2F0 E107                       	smpsAlterNote       $07
0008E2F2 E701                       	dc.b	smpsNoAttack, $01
0008E2F4 E101                       	smpsAlterNote       $01
0008E2F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2FA E107                       	smpsAlterNote       $07
0008E2FC E701                       	dc.b	smpsNoAttack, $01
0008E2FE E10A                       	smpsAlterNote       $0A
0008E300 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E304 E104                       	smpsAlterNote       $04
0008E306 E701                       	dc.b	smpsNoAttack, $01
0008E308 E100                       	smpsAlterNote       $00
0008E30A E701                       	dc.b	smpsNoAttack, $01
0008E30C E101                       	smpsAlterNote       $01
0008E30E E701                       	dc.b	smpsNoAttack, $01
0008E310 E107                       	smpsAlterNote       $07
0008E312 E701                       	dc.b	smpsNoAttack, $01
0008E314 E10B                       	smpsAlterNote       $0B
0008E316 E701                       	dc.b	smpsNoAttack, $01
0008E318 E107                       	smpsAlterNote       $07
0008E31A E701                       	dc.b	smpsNoAttack, $01
0008E31C E104                       	smpsAlterNote       $04
0008E31E E701                       	dc.b	smpsNoAttack, $01
0008E320 E100                       	smpsAlterNote       $00
0008E322 E701                       	dc.b	smpsNoAttack, $01
0008E324 E101                       	smpsAlterNote       $01
0008E326 8001                       	dc.b	nRst, $01
0008E328 E109                       	smpsAlterNote       $09
0008E32A C20D                       	dc.b	nF5, $0D
0008E32C E106                       	smpsAlterNote       $06
0008E32E E701                       	dc.b	smpsNoAttack, $01
0008E330 E102                       	smpsAlterNote       $02
0008E332 E701                       	dc.b	smpsNoAttack, $01
0008E334 E106                       	smpsAlterNote       $06
0008E336 E701                       	dc.b	smpsNoAttack, $01
0008E338 E10C                       	smpsAlterNote       $0C
0008E33A E701                       	dc.b	smpsNoAttack, $01
0008E33C E10D                       	smpsAlterNote       $0D
0008E33E E701                       	dc.b	smpsNoAttack, $01
0008E340 E109                       	smpsAlterNote       $09
0008E342 E701                       	dc.b	smpsNoAttack, $01
0008E344 E103                       	smpsAlterNote       $03
0008E346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E34A E106                       	smpsAlterNote       $06
0008E34C E701                       	dc.b	smpsNoAttack, $01
0008E34E E10C                       	smpsAlterNote       $0C
0008E350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E354 E106                       	smpsAlterNote       $06
0008E356 E701                       	dc.b	smpsNoAttack, $01
0008E358 E103                       	smpsAlterNote       $03
0008E35A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E35E E109                       	smpsAlterNote       $09
0008E360 E701                       	dc.b	smpsNoAttack, $01
0008E362 E10D                       	smpsAlterNote       $0D
0008E364 E701                       	dc.b	smpsNoAttack, $01
0008E366 E10C                       	smpsAlterNote       $0C
0008E368 E701                       	dc.b	smpsNoAttack, $01
0008E36A E109                       	smpsAlterNote       $09
0008E36C 8001                       	dc.b	nRst, $01
0008E36E E108                       	smpsAlterNote       $08
0008E370 C10D                       	dc.b	nE5, $0D
0008E372 E109                       	smpsAlterNote       $09
0008E374 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008E378 E108                       	smpsAlterNote       $08
0008E37A C10D                       	dc.b	nE5, $0D
0008E37C E102                       	smpsAlterNote       $02
0008E37E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E382 E105                       	smpsAlterNote       $05
0008E384 E701                       	dc.b	smpsNoAttack, $01
0008E386 E108                       	smpsAlterNote       $08
0008E388 8001                       	dc.b	nRst, $01
0008E38A E107                       	smpsAlterNote       $07
0008E38C BF0D                       	dc.b	nD5, $0D
0008E38E E108                       	smpsAlterNote       $08
0008E390 C107                       	dc.b	nE5, $07
0008E392 E109                       	smpsAlterNote       $09
0008E394 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008E39A E10B                       	smpsAlterNote       $0B
0008E39C C603                       	dc.b	nA5, $03
0008E39E E10C                       	smpsAlterNote       $0C
0008E3A0 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008E3A6 E10B                       	smpsAlterNote       $0B
0008E3A8 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008E3AE E109                       	smpsAlterNote       $09
0008E3B0 D003                       	dc.b	nG6, $03
0008E3B2 E108                       	smpsAlterNote       $08
0008E3B4 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008E3B8 E10B                       	smpsAlterNote       $0B
0008E3BA C601 8001                  	dc.b	nA5, $01, nRst, $01
0008E3BE E108                       	smpsAlterNote       $08
0008E3C0 C102                       	dc.b	nE5, $02
0008E3C4 E10C                       	smpsAlterNote       $0C
0008E3C6 E6FB                       	smpsAlterVol        $FB
0008E3C8 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008E3D4 8001                       	dc.b	nRst, $01
0008E3D6 E10B                       	smpsAlterNote       $0B
0008E3D8 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E3E0 E107                       	smpsAlterNote       $07
0008E3E2 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E3E6 E10B                       	smpsAlterNote       $0B
0008E3E8 A203                       	dc.b	nA2, $03
0008E3EA E109                       	smpsAlterNote       $09
0008E3EC AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E3F0 E108                       	smpsAlterNote       $08
0008E3F2 A906                       	dc.b	nE3, $06
0008E3F4 E107                       	smpsAlterNote       $07
0008E3F6 A703 8001                  	dc.b	nD3, $03, nRst, $01
0008E3FA E106                       	smpsAlterNote       $06
0008E3FC A503                       	dc.b	nC3, $03
0008E3FE E10C                       	smpsAlterNote       $0C
0008E400 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E404 E10B                       	smpsAlterNote       $0B
0008E406 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008E40A E11B                       	smpsAlterNote       $1B
0008E40C C401                       	dc.b	nG5, $01
0008E40E E1F4                       	smpsAlterNote       $F4
0008E410 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E413 E106                       	smpsAlterNote       $06
0008E415 E701                       	dc.b	smpsNoAttack, $01
0008E417 E10F                       	smpsAlterNote       $0F
0008E419 E701                       	dc.b	smpsNoAttack, $01
0008E41B E1E4                       	smpsAlterNote       $E4
0008E41D E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E420 E1F6                       	smpsAlterNote       $F6
0008E422 E701                       	dc.b	smpsNoAttack, $01
0008E424 E108                       	smpsAlterNote       $08
0008E426 E701                       	dc.b	smpsNoAttack, $01
0008E428 E10B                       	smpsAlterNote       $0B
0008E42A E706                       	dc.b	smpsNoAttack, $06
0008E42C E105                       	smpsAlterNote       $05
0008E42E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E432 E108                       	smpsAlterNote       $08
0008E434 E701                       	dc.b	smpsNoAttack, $01
0008E436 E10E                       	smpsAlterNote       $0E
0008E438 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E43C E108                       	smpsAlterNote       $08
0008E43E E701                       	dc.b	smpsNoAttack, $01
0008E440 E105                       	smpsAlterNote       $05
0008E442 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E446 E10B                       	smpsAlterNote       $0B
0008E448 E701                       	dc.b	smpsNoAttack, $01
0008E44A E10F                       	smpsAlterNote       $0F
0008E44C E701                       	dc.b	smpsNoAttack, $01
0008E44E E10E                       	smpsAlterNote       $0E
0008E450 E701                       	dc.b	smpsNoAttack, $01
0008E452 E108                       	smpsAlterNote       $08
0008E454 E701                       	dc.b	smpsNoAttack, $01
0008E456 E104                       	smpsAlterNote       $04
0008E458 E701                       	dc.b	smpsNoAttack, $01
0008E45A E108                       	smpsAlterNote       $08
0008E45C E701                       	dc.b	smpsNoAttack, $01
0008E45E E10B                       	smpsAlterNote       $0B
0008E460 E701                       	dc.b	smpsNoAttack, $01
0008E462 E10F                       	smpsAlterNote       $0F
0008E464 E701                       	dc.b	smpsNoAttack, $01
0008E466 E10B                       	smpsAlterNote       $0B
0008E468 E701                       	dc.b	smpsNoAttack, $01
0008E46A E105                       	smpsAlterNote       $05
0008E46C E701                       	dc.b	smpsNoAttack, $01
0008E46E E104                       	smpsAlterNote       $04
0008E470 E701                       	dc.b	smpsNoAttack, $01
0008E472 E108                       	smpsAlterNote       $08
0008E474 E701                       	dc.b	smpsNoAttack, $01
0008E476 E10E                       	smpsAlterNote       $0E
0008E478 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E47C E10B                       	smpsAlterNote       $0B
0008E47E E701                       	dc.b	smpsNoAttack, $01
0008E480 E105                       	smpsAlterNote       $05
0008E482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E486 E10B                       	smpsAlterNote       $0B
0008E488 E701                       	dc.b	smpsNoAttack, $01
0008E48A E10E                       	smpsAlterNote       $0E
0008E48C E701                       	dc.b	smpsNoAttack, $01
0008E48E E10F                       	smpsAlterNote       $0F
0008E490 8001                       	dc.b	nRst, $01
0008E492 E109                       	smpsAlterNote       $09
0008E494 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008E49A E108                       	smpsAlterNote       $08
0008E49C C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E4A0 E109                       	smpsAlterNote       $09
0008E4A2 C202                       	dc.b	nF5, $02
0008E4A4 E108                       	smpsAlterNote       $08
0008E4A6 C102                       	dc.b	nE5, $02
0008E4A8 E107                       	smpsAlterNote       $07
0008E4AA BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008E4AE E108                       	smpsAlterNote       $08
0008E4B0 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E4B4 E107                       	smpsAlterNote       $07
0008E4B6 BF02                       	dc.b	nD5, $02
0008E4B8 E106                       	smpsAlterNote       $06
0008E4BA BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E4BE E107                       	smpsAlterNote       $07
0008E4C0 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008E4C4 E106                       	smpsAlterNote       $06
0008E4C6 BD02                       	dc.b	nC5, $02
0008E4C8 E10C                       	smpsAlterNote       $0C
0008E4CA BB02                       	dc.b	nBb4, $02
0008E4CC E106                       	smpsAlterNote       $06
0008E4CE BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E4D2 E10C                       	smpsAlterNote       $0C
0008E4D4 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008E4D8 E10B                       	smpsAlterNote       $0B
0008E4DA BA02                       	dc.b	nA4, $02
0008E4DC E10C                       	smpsAlterNote       $0C
0008E4DE BB02                       	dc.b	nBb4, $02
0008E4E0 E10B                       	smpsAlterNote       $0B
0008E4E2 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008E4EC E108                       	smpsAlterNote       $08
0008E4EE B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008E4F6 E107                       	smpsAlterNote       $07
0008E4F8 BE02                       	dc.b	nCs5, $02
0008E4FA E10B                       	smpsAlterNote       $0B
0008E4FC BA02                       	dc.b	nA4, $02
0008E4FE E109                       	smpsAlterNote       $09
0008E500 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008E504 E108                       	smpsAlterNote       $08
0008E506 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008E50A E10B                       	smpsAlterNote       $0B
0008E50C AE02                       	dc.b	nA3, $02
0008E50E E10C                       	smpsAlterNote       $0C
0008E510 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008E51C E10B                       	smpsAlterNote       $0B
0008E51E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E526 E107                       	smpsAlterNote       $07
0008E528 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E52C E10B                       	smpsAlterNote       $0B
0008E52E A203                       	dc.b	nA2, $03
0008E530 E109                       	smpsAlterNote       $09
0008E532 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E536 E108                       	smpsAlterNote       $08
0008E538 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008E53C E107                       	smpsAlterNote       $07
0008E53E A702 8001                  	dc.b	nD3, $02, nRst, $01
0008E542 E106                       	smpsAlterNote       $06
0008E544 A503                       	dc.b	nC3, $03
0008E546 E10C                       	smpsAlterNote       $0C
0008E548 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E54E E107                       	smpsAlterNote       $07
0008E550 B20D                       	dc.b	nCs4, $0D
0008E552 E104                       	smpsAlterNote       $04
0008E554 E701                       	dc.b	smpsNoAttack, $01
0008E556 E100                       	smpsAlterNote       $00
0008E558 E701                       	dc.b	smpsNoAttack, $01
0008E55A E104                       	smpsAlterNote       $04
0008E55C E701                       	dc.b	smpsNoAttack, $01
0008E55E E10A                       	smpsAlterNote       $0A
0008E560 E701                       	dc.b	smpsNoAttack, $01
0008E562 E10B                       	smpsAlterNote       $0B
0008E564 E701                       	dc.b	smpsNoAttack, $01
0008E566 E107                       	smpsAlterNote       $07
0008E568 E701                       	dc.b	smpsNoAttack, $01
0008E56A E101                       	smpsAlterNote       $01
0008E56C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E570 E104                       	smpsAlterNote       $04
0008E572 E701                       	dc.b	smpsNoAttack, $01
0008E574 E10A                       	smpsAlterNote       $0A
0008E576 E701                       	dc.b	smpsNoAttack, $01
0008E578 E10B                       	smpsAlterNote       $0B
0008E57A 8001                       	dc.b	nRst, $01
0008E57C E107                       	smpsAlterNote       $07
0008E57E B30D                       	dc.b	nD4, $0D
0008E580 E104                       	smpsAlterNote       $04
0008E582 E701                       	dc.b	smpsNoAttack, $01
0008E584 E100                       	smpsAlterNote       $00
0008E586 E701                       	dc.b	smpsNoAttack, $01
0008E588 E104                       	smpsAlterNote       $04
0008E58A E701                       	dc.b	smpsNoAttack, $01
0008E58C E10A                       	smpsAlterNote       $0A
0008E58E E701                       	dc.b	smpsNoAttack, $01
0008E590 E10B                       	smpsAlterNote       $0B
0008E592 E701                       	dc.b	smpsNoAttack, $01
0008E594 E107                       	smpsAlterNote       $07
0008E596 E701                       	dc.b	smpsNoAttack, $01
0008E598 E101                       	smpsAlterNote       $01
0008E59A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E59E E104                       	smpsAlterNote       $04
0008E5A0 E701                       	dc.b	smpsNoAttack, $01
0008E5A2 E10A                       	smpsAlterNote       $0A
0008E5A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5A8 E104                       	smpsAlterNote       $04
0008E5AA E701                       	dc.b	smpsNoAttack, $01
0008E5AC E101                       	smpsAlterNote       $01
0008E5AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5B2 E107                       	smpsAlterNote       $07
0008E5B4 E701                       	dc.b	smpsNoAttack, $01
0008E5B6 E10B                       	smpsAlterNote       $0B
0008E5B8 E701                       	dc.b	smpsNoAttack, $01
0008E5BA E10A                       	smpsAlterNote       $0A
0008E5BC E701                       	dc.b	smpsNoAttack, $01
0008E5BE E107                       	smpsAlterNote       $07
0008E5C0 8001                       	dc.b	nRst, $01
0008E5C2 E108                       	smpsAlterNote       $08
0008E5C4 B50D                       	dc.b	nE4, $0D
0008E5C6 E102                       	smpsAlterNote       $02
0008E5C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5CC E105                       	smpsAlterNote       $05
0008E5CE E701                       	dc.b	smpsNoAttack, $01
0008E5D0 E10B                       	smpsAlterNote       $0B
0008E5D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5D6 E105                       	smpsAlterNote       $05
0008E5D8 E701                       	dc.b	smpsNoAttack, $01
0008E5DA E102                       	smpsAlterNote       $02
0008E5DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5E0 E108                       	smpsAlterNote       $08
0008E5E2 E701                       	dc.b	smpsNoAttack, $01
0008E5E4 E10C                       	smpsAlterNote       $0C
0008E5E6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E5EA E107                       	smpsAlterNote       $07
0008E5EC B30D                       	dc.b	nD4, $0D
0008E5EE E101                       	smpsAlterNote       $01
0008E5F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5F4 E104                       	smpsAlterNote       $04
0008E5F6 E701                       	dc.b	smpsNoAttack, $01
0008E5F8 E10A                       	smpsAlterNote       $0A
0008E5FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5FE E104                       	smpsAlterNote       $04
0008E600 E701                       	dc.b	smpsNoAttack, $01
0008E602 E101                       	smpsAlterNote       $01
0008E604 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E608 E107                       	smpsAlterNote       $07
0008E60A E701                       	dc.b	smpsNoAttack, $01
0008E60C E10B                       	smpsAlterNote       $0B
0008E60E E701                       	dc.b	smpsNoAttack, $01
0008E610 E10A                       	smpsAlterNote       $0A
0008E612 E701                       	dc.b	smpsNoAttack, $01
0008E614 E104                       	smpsAlterNote       $04
0008E616 E701                       	dc.b	smpsNoAttack, $01
0008E618 E100                       	smpsAlterNote       $00
0008E61A E701                       	dc.b	smpsNoAttack, $01
0008E61C E104                       	smpsAlterNote       $04
0008E61E E701                       	dc.b	smpsNoAttack, $01
0008E620 E107                       	smpsAlterNote       $07
0008E622 E701                       	dc.b	smpsNoAttack, $01
0008E624 E10B                       	smpsAlterNote       $0B
0008E626 E701                       	dc.b	smpsNoAttack, $01
0008E628 E107                       	smpsAlterNote       $07
0008E62A E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E62E E101                       	smpsAlterNote       $01
0008E630 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E634 E107                       	smpsAlterNote       $07
0008E636 E701                       	dc.b	smpsNoAttack, $01
0008E638 E10A                       	smpsAlterNote       $0A
0008E63A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E63E E104                       	smpsAlterNote       $04
0008E640 E701                       	dc.b	smpsNoAttack, $01
0008E642 E100                       	smpsAlterNote       $00
0008E644 E701                       	dc.b	smpsNoAttack, $01
0008E646 E101                       	smpsAlterNote       $01
0008E648 E701                       	dc.b	smpsNoAttack, $01
0008E64A E107                       	smpsAlterNote       $07
0008E64C E701                       	dc.b	smpsNoAttack, $01
0008E64E E10B                       	smpsAlterNote       $0B
0008E650 E701                       	dc.b	smpsNoAttack, $01
0008E652 E107                       	smpsAlterNote       $07
0008E654 B30E                       	dc.b	nD4, $0E
0008E656 E101                       	smpsAlterNote       $01
0008E658 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E65C E107                       	smpsAlterNote       $07
0008E65E E701                       	dc.b	smpsNoAttack, $01
0008E660 E10A                       	smpsAlterNote       $0A
0008E662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E666 E104                       	smpsAlterNote       $04
0008E668 E701                       	dc.b	smpsNoAttack, $01
0008E66A E100                       	smpsAlterNote       $00
0008E66C E701                       	dc.b	smpsNoAttack, $01
0008E66E E101                       	smpsAlterNote       $01
0008E670 E701                       	dc.b	smpsNoAttack, $01
0008E672 E107                       	smpsAlterNote       $07
0008E674 E701                       	dc.b	smpsNoAttack, $01
0008E676 E10B                       	smpsAlterNote       $0B
0008E678 E701                       	dc.b	smpsNoAttack, $01
0008E67A E107                       	smpsAlterNote       $07
0008E67C E701                       	dc.b	smpsNoAttack, $01
0008E67E E104                       	smpsAlterNote       $04
0008E680 E701                       	dc.b	smpsNoAttack, $01
0008E682 E100                       	smpsAlterNote       $00
0008E684 E701                       	dc.b	smpsNoAttack, $01
0008E686 E104                       	smpsAlterNote       $04
0008E688 E701                       	dc.b	smpsNoAttack, $01
0008E68A E10A                       	smpsAlterNote       $0A
0008E68C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E690 E107                       	smpsAlterNote       $07
0008E692 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E696 E104                       	smpsAlterNote       $04
0008E698 E701                       	dc.b	smpsNoAttack, $01
0008E69A E100                       	smpsAlterNote       $00
0008E69C E701                       	dc.b	smpsNoAttack, $01
0008E69E E101                       	smpsAlterNote       $01
0008E6A0 E701                       	dc.b	smpsNoAttack, $01
0008E6A2 E107                       	smpsAlterNote       $07
0008E6A4 E701                       	dc.b	smpsNoAttack, $01
0008E6A6 E10B                       	smpsAlterNote       $0B
0008E6A8 E701                       	dc.b	smpsNoAttack, $01
0008E6AA E107                       	smpsAlterNote       $07
0008E6AC E701                       	dc.b	smpsNoAttack, $01
0008E6AE E104                       	smpsAlterNote       $04
0008E6B0 E701                       	dc.b	smpsNoAttack, $01
0008E6B2 E100                       	smpsAlterNote       $00
0008E6B4 E701                       	dc.b	smpsNoAttack, $01
0008E6B6 E104                       	smpsAlterNote       $04
0008E6B8 E701                       	dc.b	smpsNoAttack, $01
0008E6BA E10A                       	smpsAlterNote       $0A
0008E6BC E701                       	dc.b	smpsNoAttack, $01
0008E6BE E10B                       	smpsAlterNote       $0B
0008E6C0 E701                       	dc.b	smpsNoAttack, $01
0008E6C4 E6FF                       	smpsAlterVol        $FF
0008E6C6 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E6D2 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E6DA E109                       	smpsAlterNote       $09
0008E6DC E601                       	smpsAlterVol        $01
0008E6DE B60D                       	dc.b	nF4, $0D
0008E6E0 E106                       	smpsAlterNote       $06
0008E6E2 E701                       	dc.b	smpsNoAttack, $01
0008E6E4 E102                       	smpsAlterNote       $02
0008E6E6 E701                       	dc.b	smpsNoAttack, $01
0008E6E8 E106                       	smpsAlterNote       $06
0008E6EA E701                       	dc.b	smpsNoAttack, $01
0008E6EC E109                       	smpsAlterNote       $09
0008E6EE E701                       	dc.b	smpsNoAttack, $01
0008E6F0 E10D                       	smpsAlterNote       $0D
0008E6F2 E701                       	dc.b	smpsNoAttack, $01
0008E6F4 E109                       	smpsAlterNote       $09
0008E6F6 E701                       	dc.b	smpsNoAttack, $01
0008E6F8 E103                       	smpsAlterNote       $03
0008E6FA E701                       	dc.b	smpsNoAttack, $01
0008E6FC E102                       	smpsAlterNote       $02
0008E6FE E701                       	dc.b	smpsNoAttack, $01
0008E700 E106                       	smpsAlterNote       $06
0008E702 E701                       	dc.b	smpsNoAttack, $01
0008E704 E10C                       	smpsAlterNote       $0C
0008E706 E701                       	dc.b	smpsNoAttack, $01
0008E708 E10D                       	smpsAlterNote       $0D
0008E70A 8001                       	dc.b	nRst, $01
0008E70C E109                       	smpsAlterNote       $09
0008E70E B80D                       	dc.b	nG4, $0D
0008E710 E106                       	smpsAlterNote       $06
0008E712 E701                       	dc.b	smpsNoAttack, $01
0008E714 E102                       	smpsAlterNote       $02
0008E716 E701                       	dc.b	smpsNoAttack, $01
0008E718 E106                       	smpsAlterNote       $06
0008E71A E701                       	dc.b	smpsNoAttack, $01
0008E71C E109                       	smpsAlterNote       $09
0008E71E E701                       	dc.b	smpsNoAttack, $01
0008E720 E10D                       	smpsAlterNote       $0D
0008E722 E701                       	dc.b	smpsNoAttack, $01
0008E724 E109                       	smpsAlterNote       $09
0008E726 E701                       	dc.b	smpsNoAttack, $01
0008E728 E103                       	smpsAlterNote       $03
0008E72A E701                       	dc.b	smpsNoAttack, $01
0008E72C E102                       	smpsAlterNote       $02
0008E72E E701                       	dc.b	smpsNoAttack, $01
0008E730 E106                       	smpsAlterNote       $06
0008E732 E701                       	dc.b	smpsNoAttack, $01
0008E734 E10C                       	smpsAlterNote       $0C
0008E736 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E73A E106                       	smpsAlterNote       $06
0008E73C E701                       	dc.b	smpsNoAttack, $01
0008E73E E103                       	smpsAlterNote       $03
0008E740 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E744 E109                       	smpsAlterNote       $09
0008E746 E701                       	dc.b	smpsNoAttack, $01
0008E748 E10D                       	smpsAlterNote       $0D
0008E74A E701                       	dc.b	smpsNoAttack, $01
0008E74C E10C                       	smpsAlterNote       $0C
0008E74E E701                       	dc.b	smpsNoAttack, $01
0008E750 E109                       	smpsAlterNote       $09
0008E752 8001                       	dc.b	nRst, $01
0008E754 E10B                       	smpsAlterNote       $0B
0008E756 BA0D                       	dc.b	nA4, $0D
0008E758 E105                       	smpsAlterNote       $05
0008E75A E701                       	dc.b	smpsNoAttack, $01
0008E75C E104                       	smpsAlterNote       $04
0008E75E E701                       	dc.b	smpsNoAttack, $01
0008E760 E108                       	smpsAlterNote       $08
0008E762 E701                       	dc.b	smpsNoAttack, $01
0008E764 E10E                       	smpsAlterNote       $0E
0008E766 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E76A E10B                       	smpsAlterNote       $0B
0008E76C E701                       	dc.b	smpsNoAttack, $01
0008E76E E105                       	smpsAlterNote       $05
0008E770 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E774 E10B                       	smpsAlterNote       $0B
0008E776 E701                       	dc.b	smpsNoAttack, $01
0008E778 E10E                       	smpsAlterNote       $0E
0008E77A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E77E E108                       	smpsAlterNote       $08
0008E780 E701                       	dc.b	smpsNoAttack, $01
0008E782 E104                       	smpsAlterNote       $04
0008E784 E701                       	dc.b	smpsNoAttack, $01
0008E786 E105                       	smpsAlterNote       $05
0008E788 E701                       	dc.b	smpsNoAttack, $01
0008E78A E10B                       	smpsAlterNote       $0B
0008E78C E701                       	dc.b	smpsNoAttack, $01
0008E78E E10F                       	smpsAlterNote       $0F
0008E790 E701                       	dc.b	smpsNoAttack, $01
0008E792 E10B                       	smpsAlterNote       $0B
0008E794 E701                       	dc.b	smpsNoAttack, $01
0008E796 E108                       	smpsAlterNote       $08
0008E798 E701                       	dc.b	smpsNoAttack, $01
0008E79A E104                       	smpsAlterNote       $04
0008E79C E701                       	dc.b	smpsNoAttack, $01
0008E79E E108                       	smpsAlterNote       $08
0008E7A0 E701                       	dc.b	smpsNoAttack, $01
0008E7A2 E10E                       	smpsAlterNote       $0E
0008E7A4 E701                       	dc.b	smpsNoAttack, $01
0008E7A6 E10F                       	smpsAlterNote       $0F
0008E7A8 E701                       	dc.b	smpsNoAttack, $01
0008E7AA E10B                       	smpsAlterNote       $0B
0008E7AC E701                       	dc.b	smpsNoAttack, $01
0008E7AE E105                       	smpsAlterNote       $05
0008E7B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7B4 E108                       	smpsAlterNote       $08
0008E7B6 E701                       	dc.b	smpsNoAttack, $01
0008E7B8 E10E                       	smpsAlterNote       $0E
0008E7BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7BE E108                       	smpsAlterNote       $08
0008E7C0 E701                       	dc.b	smpsNoAttack, $01
0008E7C2 E105                       	smpsAlterNote       $05
0008E7C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7C8 E108                       	smpsAlterNote       $08
0008E7CA B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E7CE E109                       	smpsAlterNote       $09
0008E7D0 B60D                       	dc.b	nF4, $0D
0008E7D2 E103                       	smpsAlterNote       $03
0008E7D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7D8 E106                       	smpsAlterNote       $06
0008E7DA E701                       	dc.b	smpsNoAttack, $01
0008E7DC E10C                       	smpsAlterNote       $0C
0008E7DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7E2 E106                       	smpsAlterNote       $06
0008E7E4 E701                       	dc.b	smpsNoAttack, $01
0008E7E6 E103                       	smpsAlterNote       $03
0008E7E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7EC E109                       	smpsAlterNote       $09
0008E7EE E701                       	dc.b	smpsNoAttack, $01
0008E7F0 E10D                       	smpsAlterNote       $0D
0008E7F2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E7F6 E109                       	smpsAlterNote       $09
0008E7F8 B80D                       	dc.b	nG4, $0D
0008E7FA E103                       	smpsAlterNote       $03
0008E7FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E800 E109                       	smpsAlterNote       $09
0008E802 E701                       	dc.b	smpsNoAttack, $01
0008E804 E10C                       	smpsAlterNote       $0C
0008E806 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E80A E106                       	smpsAlterNote       $06
0008E80C E701                       	dc.b	smpsNoAttack, $01
0008E80E E102                       	smpsAlterNote       $02
0008E810 E701                       	dc.b	smpsNoAttack, $01
0008E812 E103                       	smpsAlterNote       $03
0008E814 E701                       	dc.b	smpsNoAttack, $01
0008E816 E109                       	smpsAlterNote       $09
0008E818 E701                       	dc.b	smpsNoAttack, $01
0008E81A E10D                       	smpsAlterNote       $0D
0008E81C E701                       	dc.b	smpsNoAttack, $01
0008E81E E109                       	smpsAlterNote       $09
0008E820 E701                       	dc.b	smpsNoAttack, $01
0008E822 E106                       	smpsAlterNote       $06
0008E824 E701                       	dc.b	smpsNoAttack, $01
0008E826 E102                       	smpsAlterNote       $02
0008E828 E701                       	dc.b	smpsNoAttack, $01
0008E82A E106                       	smpsAlterNote       $06
0008E82C E701                       	dc.b	smpsNoAttack, $01
0008E82E E10C                       	smpsAlterNote       $0C
0008E830 E701                       	dc.b	smpsNoAttack, $01
0008E832 E10D                       	smpsAlterNote       $0D
0008E834 E701                       	dc.b	smpsNoAttack, $01
0008E836 E109                       	smpsAlterNote       $09
0008E838 E701                       	dc.b	smpsNoAttack, $01
0008E83A E10B                       	smpsAlterNote       $0B
0008E83C BA0D                       	dc.b	nA4, $0D
0008E83E E108                       	smpsAlterNote       $08
0008E840 E701                       	dc.b	smpsNoAttack, $01
0008E842 E105                       	smpsAlterNote       $05
0008E844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E848 E10B                       	smpsAlterNote       $0B
0008E84A E701                       	dc.b	smpsNoAttack, $01
0008E84C E10F                       	smpsAlterNote       $0F
0008E84E E701                       	dc.b	smpsNoAttack, $01
0008E850 E10E                       	smpsAlterNote       $0E
0008E852 E701                       	dc.b	smpsNoAttack, $01
0008E854 E108                       	smpsAlterNote       $08
0008E856 E701                       	dc.b	smpsNoAttack, $01
0008E858 E104                       	smpsAlterNote       $04
0008E85A E701                       	dc.b	smpsNoAttack, $01
0008E85C E108                       	smpsAlterNote       $08
0008E85E E701                       	dc.b	smpsNoAttack, $01
0008E860 E10B                       	smpsAlterNote       $0B
0008E862 E701                       	dc.b	smpsNoAttack, $01
0008E864 E10F                       	smpsAlterNote       $0F
0008E866 E701                       	dc.b	smpsNoAttack, $01
0008E868 E10B                       	smpsAlterNote       $0B
0008E86A E701                       	dc.b	smpsNoAttack, $01
0008E86C E105                       	smpsAlterNote       $05
0008E86E E701                       	dc.b	smpsNoAttack, $01
0008E870 E104                       	smpsAlterNote       $04
0008E872 E701                       	dc.b	smpsNoAttack, $01
0008E874 E108                       	smpsAlterNote       $08
0008E876 E701                       	dc.b	smpsNoAttack, $01
0008E878 E10E                       	smpsAlterNote       $0E
0008E87A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E87E E10B                       	smpsAlterNote       $0B
0008E880 E701                       	dc.b	smpsNoAttack, $01
0008E882 E105                       	smpsAlterNote       $05
0008E884 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E888 E10B                       	smpsAlterNote       $0B
0008E88A E701                       	dc.b	smpsNoAttack, $01
0008E88C E10E                       	smpsAlterNote       $0E
0008E88E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E892 E108                       	smpsAlterNote       $08
0008E894 E701                       	dc.b	smpsNoAttack, $01
0008E896 E105                       	smpsAlterNote       $05
0008E898 8001                       	dc.b	nRst, $01
0008E89A E109                       	smpsAlterNote       $09
0008E89C B60A                       	dc.b	nF4, $0A
0008E89E E108                       	smpsAlterNote       $08
0008E8A0 B507                       	dc.b	nE4, $07
0008E8A2 E107                       	smpsAlterNote       $07
0008E8A4 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E8A8 E108                       	smpsAlterNote       $08
0008E8AA B503                       	dc.b	nE4, $03
0008E8AC E109                       	smpsAlterNote       $09
0008E8AE B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E8B6 E10B                       	smpsAlterNote       $0B
0008E8B8 BA0D                       	dc.b	nA4, $0D
0008E8BA E108                       	smpsAlterNote       $08
0008E8BC E701                       	dc.b	smpsNoAttack, $01
0008E8BE E104                       	smpsAlterNote       $04
0008E8C0 E701                       	dc.b	smpsNoAttack, $01
0008E8C2 E108                       	smpsAlterNote       $08
0008E8C4 E701                       	dc.b	smpsNoAttack, $01
0008E8C6 E10B                       	smpsAlterNote       $0B
0008E8C8 E701                       	dc.b	smpsNoAttack, $01
0008E8CA E10F                       	smpsAlterNote       $0F
0008E8CC E701                       	dc.b	smpsNoAttack, $01
0008E8CE E10B                       	smpsAlterNote       $0B
0008E8D0 E701                       	dc.b	smpsNoAttack, $01
0008E8D2 E105                       	smpsAlterNote       $05
0008E8D4 E701                       	dc.b	smpsNoAttack, $01
0008E8D6 E104                       	smpsAlterNote       $04
0008E8D8 E701                       	dc.b	smpsNoAttack, $01
0008E8DA E108                       	smpsAlterNote       $08
0008E8DC E701                       	dc.b	smpsNoAttack, $01
0008E8DE E10E                       	smpsAlterNote       $0E
0008E8E0 E701                       	dc.b	smpsNoAttack, $01
0008E8E2 E10F                       	smpsAlterNote       $0F
0008E8E4 8001                       	dc.b	nRst, $01
0008E8E6 E109                       	smpsAlterNote       $09
0008E8E8 C20D                       	dc.b	nF5, $0D
0008E8EA E106                       	smpsAlterNote       $06
0008E8EC E701                       	dc.b	smpsNoAttack, $01
0008E8EE E102                       	smpsAlterNote       $02
0008E8F0 E701                       	dc.b	smpsNoAttack, $01
0008E8F2 E106                       	smpsAlterNote       $06
0008E8F4 E701                       	dc.b	smpsNoAttack, $01
0008E8F6 E109                       	smpsAlterNote       $09
0008E8F8 E701                       	dc.b	smpsNoAttack, $01
0008E8FA E10D                       	smpsAlterNote       $0D
0008E8FC E701                       	dc.b	smpsNoAttack, $01
0008E8FE E109                       	smpsAlterNote       $09
0008E900 E701                       	dc.b	smpsNoAttack, $01
0008E902 E103                       	smpsAlterNote       $03
0008E904 E701                       	dc.b	smpsNoAttack, $01
0008E906 E102                       	smpsAlterNote       $02
0008E908 E701                       	dc.b	smpsNoAttack, $01
0008E90A E106                       	smpsAlterNote       $06
0008E90C E701                       	dc.b	smpsNoAttack, $01
0008E90E E10C                       	smpsAlterNote       $0C
0008E910 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E914 E109                       	smpsAlterNote       $09
0008E916 E701                       	dc.b	smpsNoAttack, $01
0008E918 E103                       	smpsAlterNote       $03
0008E91A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E91E E109                       	smpsAlterNote       $09
0008E920 E701                       	dc.b	smpsNoAttack, $01
0008E922 E10C                       	smpsAlterNote       $0C
0008E924 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E928 E106                       	smpsAlterNote       $06
0008E92A E701                       	dc.b	smpsNoAttack, $01
0008E92C E102                       	smpsAlterNote       $02
0008E92E E701                       	dc.b	smpsNoAttack, $01
0008E930 E103                       	smpsAlterNote       $03
0008E932 E701                       	dc.b	smpsNoAttack, $01
0008E934 E109                       	smpsAlterNote       $09
0008E936 E701                       	dc.b	smpsNoAttack, $01
0008E938 E10D                       	smpsAlterNote       $0D
0008E93A E701                       	dc.b	smpsNoAttack, $01
0008E93C E109                       	smpsAlterNote       $09
0008E93E E701                       	dc.b	smpsNoAttack, $01
0008E940 E106                       	smpsAlterNote       $06
0008E942 E701                       	dc.b	smpsNoAttack, $01
0008E944 E102                       	smpsAlterNote       $02
0008E946 E701                       	dc.b	smpsNoAttack, $01
0008E948 E106                       	smpsAlterNote       $06
0008E94A E701                       	dc.b	smpsNoAttack, $01
0008E94C E10C                       	smpsAlterNote       $0C
0008E94E E701                       	dc.b	smpsNoAttack, $01
0008E950 E10D                       	smpsAlterNote       $0D
0008E952 E701                       	dc.b	smpsNoAttack, $01
0008E954 E109                       	smpsAlterNote       $09
0008E956 E701                       	dc.b	smpsNoAttack, $01
0008E958 E103                       	smpsAlterNote       $03
0008E95A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E95E E106                       	smpsAlterNote       $06
0008E960 E701                       	dc.b	smpsNoAttack, $01
0008E962 E10C                       	smpsAlterNote       $0C
0008E964 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E968 E106                       	smpsAlterNote       $06
0008E96A E701                       	dc.b	smpsNoAttack, $01
0008E96C E103                       	smpsAlterNote       $03
0008E96E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E972 E109                       	smpsAlterNote       $09
0008E974 E701                       	dc.b	smpsNoAttack, $01
0008E976 E10D                       	smpsAlterNote       $0D
0008E978 E701                       	dc.b	smpsNoAttack, $01
0008E97A E10C                       	smpsAlterNote       $0C
0008E97C E701                       	dc.b	smpsNoAttack, $01
0008E97E E106                       	smpsAlterNote       $06
0008E980 E701                       	dc.b	smpsNoAttack, $01
0008E982 E103                       	smpsAlterNote       $03
0008E984 8001                       	dc.b	nRst, $01
0008E986 E109                       	smpsAlterNote       $09
0008E988 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E98E E10C                       	smpsAlterNote       $0C
0008E990 E601                       	smpsAlterVol        $01
0008E992 BB0D                       	dc.b	nBb4, $0D
0008E994 E106                       	smpsAlterNote       $06
0008E996 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E99A E109                       	smpsAlterNote       $09
0008E99C E701                       	dc.b	smpsNoAttack, $01
0008E99E E10F                       	smpsAlterNote       $0F
0008E9A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9A4 E109                       	smpsAlterNote       $09
0008E9A6 E701                       	dc.b	smpsNoAttack, $01
0008E9A8 E106                       	smpsAlterNote       $06
0008E9AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9AE E10C                       	smpsAlterNote       $0C
0008E9B0 E701                       	dc.b	smpsNoAttack, $01
0008E9B2 E110                       	smpsAlterNote       $10
0008E9B4 E701                       	dc.b	smpsNoAttack, $01
0008E9B6 E10F                       	smpsAlterNote       $0F
0008E9B8 E701                       	dc.b	smpsNoAttack, $01
0008E9BA E109                       	smpsAlterNote       $09
0008E9BC E701                       	dc.b	smpsNoAttack, $01
0008E9BE E105                       	smpsAlterNote       $05
0008E9C0 E701                       	dc.b	smpsNoAttack, $01
0008E9C2 E106                       	smpsAlterNote       $06
0008E9C4 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E9C8 E103                       	smpsAlterNote       $03
0008E9CA E701                       	dc.b	smpsNoAttack, $01
0008E9CC E1FF                       	smpsAlterNote       $FF
0008E9CE E701                       	dc.b	smpsNoAttack, $01
0008E9D0 E103                       	smpsAlterNote       $03
0008E9D2 E701                       	dc.b	smpsNoAttack, $01
0008E9D4 E106                       	smpsAlterNote       $06
0008E9D6 E701                       	dc.b	smpsNoAttack, $01
0008E9D8 E10A                       	smpsAlterNote       $0A
0008E9DA E701                       	dc.b	smpsNoAttack, $01
0008E9DC E106                       	smpsAlterNote       $06
0008E9DE E701                       	dc.b	smpsNoAttack, $01
0008E9E0 E100                       	smpsAlterNote       $00
0008E9E2 E701                       	dc.b	smpsNoAttack, $01
0008E9E4 E1FF                       	smpsAlterNote       $FF
0008E9E6 E701                       	dc.b	smpsNoAttack, $01
0008E9E8 E103                       	smpsAlterNote       $03
0008E9EA E701                       	dc.b	smpsNoAttack, $01
0008E9EC E109                       	smpsAlterNote       $09
0008E9EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9F2 E106                       	smpsAlterNote       $06
0008E9F4 E701                       	dc.b	smpsNoAttack, $01
0008E9F6 E100                       	smpsAlterNote       $00
0008E9F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9FC E107                       	smpsAlterNote       $07
0008E9FE BF0E                       	dc.b	nD5, $0E
0008EA00 E101                       	smpsAlterNote       $01
0008EA02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA06 E107                       	smpsAlterNote       $07
0008EA08 E701                       	dc.b	smpsNoAttack, $01
0008EA0A E10A                       	smpsAlterNote       $0A
0008EA0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA10 E104                       	smpsAlterNote       $04
0008EA12 E701                       	dc.b	smpsNoAttack, $01
0008EA14 E100                       	smpsAlterNote       $00
0008EA16 E701                       	dc.b	smpsNoAttack, $01
0008EA18 E101                       	smpsAlterNote       $01
0008EA1A E701                       	dc.b	smpsNoAttack, $01
0008EA1C E107                       	smpsAlterNote       $07
0008EA1E E701                       	dc.b	smpsNoAttack, $01
0008EA20 E10B                       	smpsAlterNote       $0B
0008EA22 E701                       	dc.b	smpsNoAttack, $01
0008EA24 E107                       	smpsAlterNote       $07
0008EA26 E701                       	dc.b	smpsNoAttack, $01
0008EA28 E104                       	smpsAlterNote       $04
0008EA2A E701                       	dc.b	smpsNoAttack, $01
0008EA2C E100                       	smpsAlterNote       $00
0008EA2E E701                       	dc.b	smpsNoAttack, $01
0008EA30 E101                       	smpsAlterNote       $01
0008EA32 8001                       	dc.b	nRst, $01
0008EA34 E108                       	smpsAlterNote       $08
0008EA36 C10C                       	dc.b	nE5, $0C
0008EA38 E109                       	smpsAlterNote       $09
0008EA3A C201 8001                  	dc.b	nF5, $01, nRst, $01
0008EA3E E10A                       	smpsAlterNote       $0A
0008EA40 8001                       	dc.b	nRst, $01
0008EA42 E109                       	smpsAlterNote       $09
0008EA44 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008EA48 E106                       	smpsAlterNote       $06
0008EA4A E701                       	dc.b	smpsNoAttack, $01
0008EA4C E102                       	smpsAlterNote       $02
0008EA4E E701                       	dc.b	smpsNoAttack, $01
0008EA50 E103                       	smpsAlterNote       $03
0008EA52 E701                       	dc.b	smpsNoAttack, $01
0008EA54 E109                       	smpsAlterNote       $09
0008EA56 E701                       	dc.b	smpsNoAttack, $01
0008EA58 E10D                       	smpsAlterNote       $0D
0008EA5A E701                       	dc.b	smpsNoAttack, $01
0008EA5C E109                       	smpsAlterNote       $09
0008EA5E E701                       	dc.b	smpsNoAttack, $01
0008EA60 E106                       	smpsAlterNote       $06
0008EA62 E701                       	dc.b	smpsNoAttack, $01
0008EA64 E102                       	smpsAlterNote       $02
0008EA66 E701                       	dc.b	smpsNoAttack, $01
0008EA68 E106                       	smpsAlterNote       $06
0008EA6A E701                       	dc.b	smpsNoAttack, $01
0008EA6C E10C                       	smpsAlterNote       $0C
0008EA6E E701                       	dc.b	smpsNoAttack, $01
0008EA70 E10D                       	smpsAlterNote       $0D
0008EA72 E701                       	dc.b	smpsNoAttack, $01
0008EA74 E109                       	smpsAlterNote       $09
0008EA76 C40D                       	dc.b	nG5, $0D
0008EA78 E106                       	smpsAlterNote       $06
0008EA7A E701                       	dc.b	smpsNoAttack, $01
0008EA7C E102                       	smpsAlterNote       $02
0008EA7E E701                       	dc.b	smpsNoAttack, $01
0008EA80 E103                       	smpsAlterNote       $03
0008EA82 E701                       	dc.b	smpsNoAttack, $01
0008EA84 E109                       	smpsAlterNote       $09
0008EA86 E701                       	dc.b	smpsNoAttack, $01
0008EA88 E108                       	smpsAlterNote       $08
0008EA8A C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008EA96 E109                       	smpsAlterNote       $09
0008EA98 C20D                       	dc.b	nF5, $0D
0008EA9A E106                       	smpsAlterNote       $06
0008EA9C E701                       	dc.b	smpsNoAttack, $01
0008EA9E E102                       	smpsAlterNote       $02
0008EAA0 E701                       	dc.b	smpsNoAttack, $01
0008EAA2 E106                       	smpsAlterNote       $06
0008EAA4 E701                       	dc.b	smpsNoAttack, $01
0008EAA6 E109                       	smpsAlterNote       $09
0008EAA8 E701                       	dc.b	smpsNoAttack, $01
0008EAAA E10D                       	smpsAlterNote       $0D
0008EAAC E701                       	dc.b	smpsNoAttack, $01
0008EAAE E109                       	smpsAlterNote       $09
0008EAB0 E701                       	dc.b	smpsNoAttack, $01
0008EAB2 E103                       	smpsAlterNote       $03
0008EAB4 E701                       	dc.b	smpsNoAttack, $01
0008EAB6 E102                       	smpsAlterNote       $02
0008EAB8 E701                       	dc.b	smpsNoAttack, $01
0008EABA E106                       	smpsAlterNote       $06
0008EABC E701                       	dc.b	smpsNoAttack, $01
0008EABE E10C                       	smpsAlterNote       $0C
0008EAC0 E701                       	dc.b	smpsNoAttack, $01
0008EAC2 E10D                       	smpsAlterNote       $0D
0008EAC4 8001                       	dc.b	nRst, $01
0008EAC6 E112                       	smpsAlterNote       $12
0008EAC8 C401                       	dc.b	nG5, $01
0008EACA E1EB                       	smpsAlterNote       $EB
0008EACC E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008EACF E1FD                       	smpsAlterNote       $FD
0008EAD1 E701                       	dc.b	smpsNoAttack, $01
0008EAD3 E10F                       	smpsAlterNote       $0F
0008EAD5 E701                       	dc.b	smpsNoAttack, $01
0008EAD7 E118                       	smpsAlterNote       $18
0008EAD9 E701                       	dc.b	smpsNoAttack, $01
0008EADB E1ED                       	smpsAlterNote       $ED
0008EADD E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008EAE0 E1FF                       	smpsAlterNote       $FF
0008EAE2 E701                       	dc.b	smpsNoAttack, $01
0008EAE4 E10B                       	smpsAlterNote       $0B
0008EAE6 E703                       	dc.b	smpsNoAttack, $03
0008EAE8 E109                       	smpsAlterNote       $09
0008EAEA C407                       	dc.b	nG5, $07
0008EAEC E108                       	smpsAlterNote       $08
0008EAEE C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008EAFA E109                       	smpsAlterNote       $09
0008EAFC C20D                       	dc.b	nF5, $0D
0008EAFE E103                       	smpsAlterNote       $03
0008EB00 E701                       	dc.b	smpsNoAttack, $01
0008EB02 E102                       	smpsAlterNote       $02
0008EB04 E701                       	dc.b	smpsNoAttack, $01
0008EB06 E106                       	smpsAlterNote       $06
0008EB08 E701                       	dc.b	smpsNoAttack, $01
0008EB0A E10C                       	smpsAlterNote       $0C
0008EB0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB10 E109                       	smpsAlterNote       $09
0008EB12 E701                       	dc.b	smpsNoAttack, $01
0008EB14 E103                       	smpsAlterNote       $03
0008EB16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB1A E109                       	smpsAlterNote       $09
0008EB1C E701                       	dc.b	smpsNoAttack, $01
0008EB1E E10C                       	smpsAlterNote       $0C
0008EB20 E701                       	dc.b	smpsNoAttack, $01
0008EB22 E10D                       	smpsAlterNote       $0D
0008EB24 8001                       	dc.b	nRst, $01
0008EB26 E10B                       	smpsAlterNote       $0B
0008EB28 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008EB2C E109                       	smpsAlterNote       $09
0008EB2E B806 8001                  	dc.b	nG4, $06, nRst, $01
0008EB32 E108                       	smpsAlterNote       $08
0008EB34 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008EB40 8001                       	dc.b	nRst, $01
0008EB42 E109                       	smpsAlterNote       $09
0008EB44 C20D                       	dc.b	nF5, $0D
0008EB46 E103                       	smpsAlterNote       $03
0008EB48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB4C E106                       	smpsAlterNote       $06
0008EB4E E701                       	dc.b	smpsNoAttack, $01
0008EB50 E10C                       	smpsAlterNote       $0C
0008EB52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB56 E106                       	smpsAlterNote       $06
0008EB58 E701                       	dc.b	smpsNoAttack, $01
0008EB5A E103                       	smpsAlterNote       $03
0008EB5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB60 E109                       	smpsAlterNote       $09
0008EB62 E701                       	dc.b	smpsNoAttack, $01
0008EB64 E10D                       	smpsAlterNote       $0D
0008EB66 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EB6C E108                       	smpsAlterNote       $08
0008EB6E E6FF                       	smpsAlterVol        $FF
0008EB70 A806                       	dc.b	nEb3, $06
0008EB72 E10C                       	smpsAlterNote       $0C
0008EB74 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008EB78 E108                       	smpsAlterNote       $08
0008EB7A A803                       	dc.b	nEb3, $03
0008EB7C E109                       	smpsAlterNote       $09
0008EB7E AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008EB82 E10C                       	smpsAlterNote       $0C
0008EB84 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008EB8E E109                       	smpsAlterNote       $09
0008EB90 E602                       	smpsAlterVol        $02
0008EB92 B604                       	dc.b	nF4, $04
0008EB94 E602                       	smpsAlterVol        $02
0008EB96 F6F1 AA                    	smpsJump            music84_Jump02
0008EB99                            
0008EB99                            ; FM4 Data
0008EB99                            music84_FM4:
0008EB9B E040                       	smpsPan             panRight, $00
0008EB9D 8003                       	dc.b	nRst, $03
0008EB9F E10F                       	smpsAlterNote       $0F
0008EBA1 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008EBA5 E10D                       	smpsAlterNote       $0D
0008EBA7 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008EBAB E10C                       	smpsAlterNote       $0C
0008EBAD C103 8004                  	dc.b	nE5, $03, nRst, $04
0008EBB3 E6FE                       	smpsAlterVol        $FE
0008EBB5 E110                       	smpsAlterNote       $10
0008EBB7 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008EBBB E10F                       	smpsAlterNote       $0F
0008EBBD C602 8001                  	dc.b	nA5, $02, nRst, $01
0008EBC1 E10D                       	smpsAlterNote       $0D
0008EBC3 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008EBCC E10C                       	smpsAlterNote       $0C
0008EBCE C103                       	dc.b	nE5, $03
0008EBD0 E10A                       	smpsAlterNote       $0A
0008EBD2 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008EBD8 03                         	dc.b	$03
0008EBD9                            
0008EBD9                            music84_Jump01:
0008EBD9 E10B                       	smpsAlterNote       $0B
0008EBDB BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EBDF E10C                       	smpsAlterNote       $0C
0008EBE1 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008EBE5 E10D                       	smpsAlterNote       $0D
0008EBE7 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008EBF1 E10B                       	smpsAlterNote       $0B
0008EBF3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EBF7 E107                       	smpsAlterNote       $07
0008EBF9 E701                       	dc.b	smpsNoAttack, $01
0008EBFB E103                       	smpsAlterNote       $03
0008EBFD E701                       	dc.b	smpsNoAttack, $01
0008EBFF E104                       	smpsAlterNote       $04
0008EC01 E701                       	dc.b	smpsNoAttack, $01
0008EC03 E10A                       	smpsAlterNote       $0A
0008EC05 E701                       	dc.b	smpsNoAttack, $01
0008EC07 E10E                       	smpsAlterNote       $0E
0008EC09 E701                       	dc.b	smpsNoAttack, $01
0008EC0B E10A                       	smpsAlterNote       $0A
0008EC0D E701                       	dc.b	smpsNoAttack, $01
0008EC0F E107                       	smpsAlterNote       $07
0008EC11 E701                       	dc.b	smpsNoAttack, $01
0008EC13 E104                       	smpsAlterNote       $04
0008EC15 8001                       	dc.b	nRst, $01
0008EC17 E110                       	smpsAlterNote       $10
0008EC19 C703                       	dc.b	nBb5, $03
0008EC1B E10F                       	smpsAlterNote       $0F
0008EC1D C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EC21 E10D                       	smpsAlterNote       $0D
0008EC23 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008EC29 E10C                       	smpsAlterNote       $0C
0008EC2B E701                       	dc.b	smpsNoAttack, $01
0008EC2D E108                       	smpsAlterNote       $08
0008EC2F E701                       	dc.b	smpsNoAttack, $01
0008EC31 E10C                       	smpsAlterNote       $0C
0008EC33 E701                       	dc.b	smpsNoAttack, $01
0008EC35 E10F                       	smpsAlterNote       $0F
0008EC37 E701                       	dc.b	smpsNoAttack, $01
0008EC39 E113                       	smpsAlterNote       $13
0008EC3B E701                       	dc.b	smpsNoAttack, $01
0008EC3D E10F                       	smpsAlterNote       $0F
0008EC3F E701                       	dc.b	smpsNoAttack, $01
0008EC41 E109                       	smpsAlterNote       $09
0008EC43 E701                       	dc.b	smpsNoAttack, $01
0008EC45 E108                       	smpsAlterNote       $08
0008EC47 E701                       	dc.b	smpsNoAttack, $01
0008EC49 E10C                       	smpsAlterNote       $0C
0008EC4B E701                       	dc.b	smpsNoAttack, $01
0008EC4D E112                       	smpsAlterNote       $12
0008EC4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC53 E10C                       	smpsAlterNote       $0C
0008EC55 E701                       	dc.b	smpsNoAttack, $01
0008EC57 E109                       	smpsAlterNote       $09
0008EC59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC5D E10F                       	smpsAlterNote       $0F
0008EC5F E701                       	dc.b	smpsNoAttack, $01
0008EC61 E113                       	smpsAlterNote       $13
0008EC63 E701                       	dc.b	smpsNoAttack, $01
0008EC65 E112                       	smpsAlterNote       $12
0008EC67 E701                       	dc.b	smpsNoAttack, $01
0008EC69 E10C                       	smpsAlterNote       $0C
0008EC6B E701                       	dc.b	smpsNoAttack, $01
0008EC6D E108                       	smpsAlterNote       $08
0008EC6F E701                       	dc.b	smpsNoAttack, $01
0008EC71 E10C                       	smpsAlterNote       $0C
0008EC73 E701                       	dc.b	smpsNoAttack, $01
0008EC75 E10F                       	smpsAlterNote       $0F
0008EC77 E701                       	dc.b	smpsNoAttack, $01
0008EC79 E113                       	smpsAlterNote       $13
0008EC7B E701                       	dc.b	smpsNoAttack, $01
0008EC7D E10F                       	smpsAlterNote       $0F
0008EC7F E701                       	dc.b	smpsNoAttack, $01
0008EC81 E109                       	smpsAlterNote       $09
0008EC83 E701                       	dc.b	smpsNoAttack, $01
0008EC85 E108                       	smpsAlterNote       $08
0008EC87 E701                       	dc.b	smpsNoAttack, $01
0008EC89 E10C                       	smpsAlterNote       $0C
0008EC8B E701                       	dc.b	smpsNoAttack, $01
0008EC8D E112                       	smpsAlterNote       $12
0008EC8F E701                       	dc.b	smpsNoAttack, $01
0008EC91 E113                       	smpsAlterNote       $13
0008EC93 800F                       	dc.b	nRst, $0F
0008EC95 E10B                       	smpsAlterNote       $0B
0008EC97 BF03                       	dc.b	nD5, $03
0008EC99 E10C                       	smpsAlterNote       $0C
0008EC9B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008EC9F E10D                       	smpsAlterNote       $0D
0008ECA1 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008ECA9 E10B                       	smpsAlterNote       $0B
0008ECAB BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008ECB5 E110                       	smpsAlterNote       $10
0008ECB7 C704                       	dc.b	nBb5, $04
0008ECB9 E10F                       	smpsAlterNote       $0F
0008ECBB C604 8001                  	dc.b	nA5, $04, nRst, $01
0008ECBF E10D                       	smpsAlterNote       $0D
0008ECC1 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008ECC7 E109                       	smpsAlterNote       $09
0008ECC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECCD E10F                       	smpsAlterNote       $0F
0008ECCF E701                       	dc.b	smpsNoAttack, $01
0008ECD1 E112                       	smpsAlterNote       $12
0008ECD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECD7 E10C                       	smpsAlterNote       $0C
0008ECD9 E701                       	dc.b	smpsNoAttack, $01
0008ECDB E108                       	smpsAlterNote       $08
0008ECDD E701                       	dc.b	smpsNoAttack, $01
0008ECDF E109                       	smpsAlterNote       $09
0008ECE1 E701                       	dc.b	smpsNoAttack, $01
0008ECE3 E10F                       	smpsAlterNote       $0F
0008ECE5 E701                       	dc.b	smpsNoAttack, $01
0008ECE7 E113                       	smpsAlterNote       $13
0008ECE9 E701                       	dc.b	smpsNoAttack, $01
0008ECEB E10F                       	smpsAlterNote       $0F
0008ECED E701                       	dc.b	smpsNoAttack, $01
0008ECEF E10C                       	smpsAlterNote       $0C
0008ECF1 E701                       	dc.b	smpsNoAttack, $01
0008ECF3 E108                       	smpsAlterNote       $08
0008ECF5 E701                       	dc.b	smpsNoAttack, $01
0008ECF7 E10C                       	smpsAlterNote       $0C
0008ECF9 E701                       	dc.b	smpsNoAttack, $01
0008ECFB E112                       	smpsAlterNote       $12
0008ECFD E701                       	dc.b	smpsNoAttack, $01
0008ECFF E113                       	smpsAlterNote       $13
0008ED01 E701                       	dc.b	smpsNoAttack, $01
0008ED03 E10F                       	smpsAlterNote       $0F
0008ED05 E701                       	dc.b	smpsNoAttack, $01
0008ED07 E109                       	smpsAlterNote       $09
0008ED09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED0D E10C                       	smpsAlterNote       $0C
0008ED0F E701                       	dc.b	smpsNoAttack, $01
0008ED11 E112                       	smpsAlterNote       $12
0008ED13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED17 E10C                       	smpsAlterNote       $0C
0008ED19 E701                       	dc.b	smpsNoAttack, $01
0008ED1B E109                       	smpsAlterNote       $09
0008ED1D E701                       	dc.b	smpsNoAttack, $01
0008ED1F E10D                       	smpsAlterNote       $0D
0008ED21 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008ED25 E10F                       	smpsAlterNote       $0F
0008ED27 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008ED31 E10D                       	smpsAlterNote       $0D
0008ED33 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008ED39 E10B                       	smpsAlterNote       $0B
0008ED3B BF0D                       	dc.b	nD5, $0D
0008ED3D E108                       	smpsAlterNote       $08
0008ED3F E701                       	dc.b	smpsNoAttack, $01
0008ED41 E104                       	smpsAlterNote       $04
0008ED43 E701                       	dc.b	smpsNoAttack, $01
0008ED45 E108                       	smpsAlterNote       $08
0008ED47 E701                       	dc.b	smpsNoAttack, $01
0008ED49 E10B                       	smpsAlterNote       $0B
0008ED4B E701                       	dc.b	smpsNoAttack, $01
0008ED4D E10F                       	smpsAlterNote       $0F
0008ED4F E701                       	dc.b	smpsNoAttack, $01
0008ED51 E10B                       	smpsAlterNote       $0B
0008ED53 E701                       	dc.b	smpsNoAttack, $01
0008ED55 E105                       	smpsAlterNote       $05
0008ED57 E701                       	dc.b	smpsNoAttack, $01
0008ED59 E104                       	smpsAlterNote       $04
0008ED5B E701                       	dc.b	smpsNoAttack, $01
0008ED5D E108                       	smpsAlterNote       $08
0008ED5F E701                       	dc.b	smpsNoAttack, $01
0008ED61 E10E                       	smpsAlterNote       $0E
0008ED63 E701                       	dc.b	smpsNoAttack, $01
0008ED65 E10F                       	smpsAlterNote       $0F
0008ED67 8001                       	dc.b	nRst, $01
0008ED69 E10C                       	smpsAlterNote       $0C
0008ED6B C101                       	dc.b	nE5, $01
0008ED6D E10D                       	smpsAlterNote       $0D
0008ED6F C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008ED75 E10F                       	smpsAlterNote       $0F
0008ED77 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008ED7B E10C                       	smpsAlterNote       $0C
0008ED7D CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008ED81 E10D                       	smpsAlterNote       $0D
0008ED83 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008ED87 E10C                       	smpsAlterNote       $0C
0008ED89 CD03                       	dc.b	nE6, $03
0008ED8B E10A                       	smpsAlterNote       $0A
0008ED8D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008ED91 E10D                       	smpsAlterNote       $0D
0008ED93 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008ED9B E109                       	smpsAlterNote       $09
0008ED9D E701                       	dc.b	smpsNoAttack, $01
0008ED9F E10D                       	smpsAlterNote       $0D
0008EDA1 E701                       	dc.b	smpsNoAttack, $01
0008EDA3 E110                       	smpsAlterNote       $10
0008EDA5 E701                       	dc.b	smpsNoAttack, $01
0008EDA7 E114                       	smpsAlterNote       $14
0008EDA9 E701                       	dc.b	smpsNoAttack, $01
0008EDAB E110                       	smpsAlterNote       $10
0008EDAD E701                       	dc.b	smpsNoAttack, $01
0008EDAF E10A                       	smpsAlterNote       $0A
0008EDB1 E701                       	dc.b	smpsNoAttack, $01
0008EDB3 E109                       	smpsAlterNote       $09
0008EDB5 E701                       	dc.b	smpsNoAttack, $01
0008EDB7 E10D                       	smpsAlterNote       $0D
0008EDB9 E701                       	dc.b	smpsNoAttack, $01
0008EDBB E113                       	smpsAlterNote       $13
0008EDBD E701                       	dc.b	smpsNoAttack, $01
0008EDBF E114                       	smpsAlterNote       $14
0008EDC1 8001                       	dc.b	nRst, $01
0008EDC3 E10F                       	smpsAlterNote       $0F
0008EDC5 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008EDCB E10C                       	smpsAlterNote       $0C
0008EDCD E701                       	dc.b	smpsNoAttack, $01
0008EDCF E108                       	smpsAlterNote       $08
0008EDD1 E701                       	dc.b	smpsNoAttack, $01
0008EDD3 E10C                       	smpsAlterNote       $0C
0008EDD5 E701                       	dc.b	smpsNoAttack, $01
0008EDD7 E112                       	smpsAlterNote       $12
0008EDD9 E701                       	dc.b	smpsNoAttack, $01
0008EDDB E113                       	smpsAlterNote       $13
0008EDDD E701                       	dc.b	smpsNoAttack, $01
0008EDDF E10F                       	smpsAlterNote       $0F
0008EDE1 E701                       	dc.b	smpsNoAttack, $01
0008EDE3 E109                       	smpsAlterNote       $09
0008EDE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDE9 E10C                       	smpsAlterNote       $0C
0008EDEB E701                       	dc.b	smpsNoAttack, $01
0008EDED E112                       	smpsAlterNote       $12
0008EDEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDF3 E10C                       	smpsAlterNote       $0C
0008EDF5 E701                       	dc.b	smpsNoAttack, $01
0008EDF7 E109                       	smpsAlterNote       $09
0008EDF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDFD E10F                       	smpsAlterNote       $0F
0008EDFF E701                       	dc.b	smpsNoAttack, $01
0008EE01 E113                       	smpsAlterNote       $13
0008EE03 E701                       	dc.b	smpsNoAttack, $01
0008EE05 E112                       	smpsAlterNote       $12
0008EE07 E701                       	dc.b	smpsNoAttack, $01
0008EE09 E10C                       	smpsAlterNote       $0C
0008EE0B E701                       	dc.b	smpsNoAttack, $01
0008EE0D E108                       	smpsAlterNote       $08
0008EE0F E701                       	dc.b	smpsNoAttack, $01
0008EE11 E10C                       	smpsAlterNote       $0C
0008EE13 E701                       	dc.b	smpsNoAttack, $01
0008EE15 E10F                       	smpsAlterNote       $0F
0008EE17 E701                       	dc.b	smpsNoAttack, $01
0008EE19 E113                       	smpsAlterNote       $13
0008EE1B E701                       	dc.b	smpsNoAttack, $01
0008EE1D E10F                       	smpsAlterNote       $0F
0008EE1F E701                       	dc.b	smpsNoAttack, $01
0008EE21 E109                       	smpsAlterNote       $09
0008EE23 E701                       	dc.b	smpsNoAttack, $01
0008EE25 E108                       	smpsAlterNote       $08
0008EE27 E701                       	dc.b	smpsNoAttack, $01
0008EE29 E10C                       	smpsAlterNote       $0C
0008EE2B E701                       	dc.b	smpsNoAttack, $01
0008EE2D E112                       	smpsAlterNote       $12
0008EE2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE33 E10F                       	smpsAlterNote       $0F
0008EE35 E701                       	dc.b	smpsNoAttack, $01
0008EE37 E109                       	smpsAlterNote       $09
0008EE39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE3D E10F                       	smpsAlterNote       $0F
0008EE3F E701                       	dc.b	smpsNoAttack, $01
0008EE41 E113                       	smpsAlterNote       $13
0008EE43 E701                       	dc.b	smpsNoAttack, $01
0008EE45 E112                       	smpsAlterNote       $12
0008EE47 E701                       	dc.b	smpsNoAttack, $01
0008EE49 E10C                       	smpsAlterNote       $0C
0008EE4B E701                       	dc.b	smpsNoAttack, $01
0008EE4D E108                       	smpsAlterNote       $08
0008EE4F E701                       	dc.b	smpsNoAttack, $01
0008EE51 E10C                       	smpsAlterNote       $0C
0008EE53 E701                       	dc.b	smpsNoAttack, $01
0008EE55 E10F                       	smpsAlterNote       $0F
0008EE57 E701                       	dc.b	smpsNoAttack, $01
0008EE59 E113                       	smpsAlterNote       $13
0008EE5B E701                       	dc.b	smpsNoAttack, $01
0008EE5D E10F                       	smpsAlterNote       $0F
0008EE5F E701                       	dc.b	smpsNoAttack, $01
0008EE61 E109                       	smpsAlterNote       $09
0008EE63 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EE67 E10F                       	smpsAlterNote       $0F
0008EE69 C60D                       	dc.b	nA5, $0D
0008EE6B E109                       	smpsAlterNote       $09
0008EE6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE71 E10C                       	smpsAlterNote       $0C
0008EE73 E701                       	dc.b	smpsNoAttack, $01
0008EE75 E112                       	smpsAlterNote       $12
0008EE77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE7B E10C                       	smpsAlterNote       $0C
0008EE7D E701                       	dc.b	smpsNoAttack, $01
0008EE7F E109                       	smpsAlterNote       $09
0008EE81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE85 E10F                       	smpsAlterNote       $0F
0008EE87 E701                       	dc.b	smpsNoAttack, $01
0008EE89 E113                       	smpsAlterNote       $13
0008EE8B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EE91 E10D                       	smpsAlterNote       $0D
0008EE93 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008EE9B E10C                       	smpsAlterNote       $0C
0008EE9D C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008EEA3 E6FF                       	smpsAlterVol        $FF
0008EEA5 E10B                       	smpsAlterNote       $0B
0008EEA7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EEAB E10C                       	smpsAlterNote       $0C
0008EEAD C103                       	dc.b	nE5, $03
0008EEAF E10D                       	smpsAlterNote       $0D
0008EEB1 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008EEBB E10B                       	smpsAlterNote       $0B
0008EEBD BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EEC1 E107                       	smpsAlterNote       $07
0008EEC3 E701                       	dc.b	smpsNoAttack, $01
0008EEC5 E104                       	smpsAlterNote       $04
0008EEC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EECB E10A                       	smpsAlterNote       $0A
0008EECD E701                       	dc.b	smpsNoAttack, $01
0008EECF E10D                       	smpsAlterNote       $0D
0008EED1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EED5 E107                       	smpsAlterNote       $07
0008EED7 E701                       	dc.b	smpsNoAttack, $01
0008EED9 E104                       	smpsAlterNote       $04
0008EEDB 8001                       	dc.b	nRst, $01
0008EEDD E110                       	smpsAlterNote       $10
0008EEDF C703                       	dc.b	nBb5, $03
0008EEE1 E10F                       	smpsAlterNote       $0F
0008EEE3 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EEE7 E10D                       	smpsAlterNote       $0D
0008EEE9 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008EEED E10C                       	smpsAlterNote       $0C
0008EEEF E701                       	dc.b	smpsNoAttack, $01
0008EEF1 E108                       	smpsAlterNote       $08
0008EEF3 E701                       	dc.b	smpsNoAttack, $01
0008EEF5 E109                       	smpsAlterNote       $09
0008EEF7 E701                       	dc.b	smpsNoAttack, $01
0008EEF9 E10F                       	smpsAlterNote       $0F
0008EEFB E701                       	dc.b	smpsNoAttack, $01
0008EEFD E113                       	smpsAlterNote       $13
0008EEFF E701                       	dc.b	smpsNoAttack, $01
0008EF01 E10F                       	smpsAlterNote       $0F
0008EF03 E701                       	dc.b	smpsNoAttack, $01
0008EF05 E10C                       	smpsAlterNote       $0C
0008EF07 E701                       	dc.b	smpsNoAttack, $01
0008EF09 E108                       	smpsAlterNote       $08
0008EF0B E701                       	dc.b	smpsNoAttack, $01
0008EF0D E10C                       	smpsAlterNote       $0C
0008EF0F E701                       	dc.b	smpsNoAttack, $01
0008EF11 E112                       	smpsAlterNote       $12
0008EF13 E701                       	dc.b	smpsNoAttack, $01
0008EF15 E113                       	smpsAlterNote       $13
0008EF17 E701                       	dc.b	smpsNoAttack, $01
0008EF19 E10F                       	smpsAlterNote       $0F
0008EF1B E701                       	dc.b	smpsNoAttack, $01
0008EF1D E109                       	smpsAlterNote       $09
0008EF1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF23 E10C                       	smpsAlterNote       $0C
0008EF25 E701                       	dc.b	smpsNoAttack, $01
0008EF27 E112                       	smpsAlterNote       $12
0008EF29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF2D E10C                       	smpsAlterNote       $0C
0008EF2F E701                       	dc.b	smpsNoAttack, $01
0008EF31 E109                       	smpsAlterNote       $09
0008EF33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF37 E10F                       	smpsAlterNote       $0F
0008EF39 E701                       	dc.b	smpsNoAttack, $01
0008EF3B E113                       	smpsAlterNote       $13
0008EF3D E701                       	dc.b	smpsNoAttack, $01
0008EF3F E112                       	smpsAlterNote       $12
0008EF41 E701                       	dc.b	smpsNoAttack, $01
0008EF43 E10C                       	smpsAlterNote       $0C
0008EF45 E701                       	dc.b	smpsNoAttack, $01
0008EF47 E108                       	smpsAlterNote       $08
0008EF49 E701                       	dc.b	smpsNoAttack, $01
0008EF4B E10C                       	smpsAlterNote       $0C
0008EF4D E701                       	dc.b	smpsNoAttack, $01
0008EF4F E10F                       	smpsAlterNote       $0F
0008EF51 E701                       	dc.b	smpsNoAttack, $01
0008EF53 E113                       	smpsAlterNote       $13
0008EF55 E701                       	dc.b	smpsNoAttack, $01
0008EF57 E10F                       	smpsAlterNote       $0F
0008EF59 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008EF5D E110                       	smpsAlterNote       $10
0008EF5F BB03                       	dc.b	nBb4, $03
0008EF61 E10F                       	smpsAlterNote       $0F
0008EF63 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008EF67 E10B                       	smpsAlterNote       $0B
0008EF69 BF03                       	dc.b	nD5, $03
0008EF6B E10C                       	smpsAlterNote       $0C
0008EF6D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008EF71 E10D                       	smpsAlterNote       $0D
0008EF73 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008EF7D E10B                       	smpsAlterNote       $0B
0008EF7F BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008EF8B E110                       	smpsAlterNote       $10
0008EF8D C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EF91 E10F                       	smpsAlterNote       $0F
0008EF93 C604                       	dc.b	nA5, $04
0008EF95 E10D                       	smpsAlterNote       $0D
0008EF97 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008EF9D E109                       	smpsAlterNote       $09
0008EF9F E701                       	dc.b	smpsNoAttack, $01
0008EFA1 E108                       	smpsAlterNote       $08
0008EFA3 E701                       	dc.b	smpsNoAttack, $01
0008EFA5 E10C                       	smpsAlterNote       $0C
0008EFA7 E701                       	dc.b	smpsNoAttack, $01
0008EFA9 E112                       	smpsAlterNote       $12
0008EFAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFAF E10F                       	smpsAlterNote       $0F
0008EFB1 E701                       	dc.b	smpsNoAttack, $01
0008EFB3 E109                       	smpsAlterNote       $09
0008EFB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFB9 E10F                       	smpsAlterNote       $0F
0008EFBB E701                       	dc.b	smpsNoAttack, $01
0008EFBD E112                       	smpsAlterNote       $12
0008EFBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFC3 E10C                       	smpsAlterNote       $0C
0008EFC5 E701                       	dc.b	smpsNoAttack, $01
0008EFC7 E108                       	smpsAlterNote       $08
0008EFC9 E701                       	dc.b	smpsNoAttack, $01
0008EFCB E109                       	smpsAlterNote       $09
0008EFCD E701                       	dc.b	smpsNoAttack, $01
0008EFCF E10F                       	smpsAlterNote       $0F
0008EFD1 E701                       	dc.b	smpsNoAttack, $01
0008EFD3 E113                       	smpsAlterNote       $13
0008EFD5 E701                       	dc.b	smpsNoAttack, $01
0008EFD7 E10F                       	smpsAlterNote       $0F
0008EFD9 E701                       	dc.b	smpsNoAttack, $01
0008EFDB E10C                       	smpsAlterNote       $0C
0008EFDD E701                       	dc.b	smpsNoAttack, $01
0008EFDF E108                       	smpsAlterNote       $08
0008EFE1 E701                       	dc.b	smpsNoAttack, $01
0008EFE3 E10C                       	smpsAlterNote       $0C
0008EFE5 E701                       	dc.b	smpsNoAttack, $01
0008EFE7 E112                       	smpsAlterNote       $12
0008EFE9 E701                       	dc.b	smpsNoAttack, $01
0008EFEB E113                       	smpsAlterNote       $13
0008EFED E701                       	dc.b	smpsNoAttack, $01
0008EFEF E10F                       	smpsAlterNote       $0F
0008EFF1 E701                       	dc.b	smpsNoAttack, $01
0008EFF3 E109                       	smpsAlterNote       $09
0008EFF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFF9 E10C                       	smpsAlterNote       $0C
0008EFFB E701                       	dc.b	smpsNoAttack, $01
0008EFFD E112                       	smpsAlterNote       $12
0008EFFF E701                       	dc.b	smpsNoAttack, $01
0008F001 E113                       	smpsAlterNote       $13
0008F003 8001                       	dc.b	nRst, $01
0008F005 E10F                       	smpsAlterNote       $0F
0008F007 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008F013 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008F01B E10D                       	smpsAlterNote       $0D
0008F01D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F023 E10B                       	smpsAlterNote       $0B
0008F025 BF0D                       	dc.b	nD5, $0D
0008F027 E108                       	smpsAlterNote       $08
0008F029 E701                       	dc.b	smpsNoAttack, $01
0008F02B E104                       	smpsAlterNote       $04
0008F02D E701                       	dc.b	smpsNoAttack, $01
0008F02F E105                       	smpsAlterNote       $05
0008F031 E701                       	dc.b	smpsNoAttack, $01
0008F033 E10B                       	smpsAlterNote       $0B
0008F035 E701                       	dc.b	smpsNoAttack, $01
0008F037 E10F                       	smpsAlterNote       $0F
0008F039 E701                       	dc.b	smpsNoAttack, $01
0008F03B E10B                       	smpsAlterNote       $0B
0008F03D E701                       	dc.b	smpsNoAttack, $01
0008F03F E108                       	smpsAlterNote       $08
0008F041 E701                       	dc.b	smpsNoAttack, $01
0008F043 E104                       	smpsAlterNote       $04
0008F045 E701                       	dc.b	smpsNoAttack, $01
0008F047 E108                       	smpsAlterNote       $08
0008F049 E701                       	dc.b	smpsNoAttack, $01
0008F04B E10E                       	smpsAlterNote       $0E
0008F04D E701                       	dc.b	smpsNoAttack, $01
0008F04F E10F                       	smpsAlterNote       $0F
0008F051 E701                       	dc.b	smpsNoAttack, $01
0008F053 E10C                       	smpsAlterNote       $0C
0008F055 C101                       	dc.b	nE5, $01
0008F057 E10D                       	smpsAlterNote       $0D
0008F059 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F061 E10F                       	smpsAlterNote       $0F
0008F063 C607                       	dc.b	nA5, $07
0008F065 E10C                       	smpsAlterNote       $0C
0008F067 CD07                       	dc.b	nE6, $07
0008F069 E10D                       	smpsAlterNote       $0D
0008F06B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F06F E10C                       	smpsAlterNote       $0C
0008F071 CD03                       	dc.b	nE6, $03
0008F073 E10A                       	smpsAlterNote       $0A
0008F075 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F079 E10D                       	smpsAlterNote       $0D
0008F07B C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F081 E10A                       	smpsAlterNote       $0A
0008F083 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F087 E110                       	smpsAlterNote       $10
0008F089 E701                       	dc.b	smpsNoAttack, $01
0008F08B E114                       	smpsAlterNote       $14
0008F08D E701                       	dc.b	smpsNoAttack, $01
0008F08F E113                       	smpsAlterNote       $13
0008F091 E701                       	dc.b	smpsNoAttack, $01
0008F093 E10D                       	smpsAlterNote       $0D
0008F095 E701                       	dc.b	smpsNoAttack, $01
0008F097 E109                       	smpsAlterNote       $09
0008F099 E701                       	dc.b	smpsNoAttack, $01
0008F09B E10D                       	smpsAlterNote       $0D
0008F09D E701                       	dc.b	smpsNoAttack, $01
0008F09F E110                       	smpsAlterNote       $10
0008F0A1 E701                       	dc.b	smpsNoAttack, $01
0008F0A3 E114                       	smpsAlterNote       $14
0008F0A5 E701                       	dc.b	smpsNoAttack, $01
0008F0A7 E10F                       	smpsAlterNote       $0F
0008F0A9 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008F0AD E10C                       	smpsAlterNote       $0C
0008F0AF E701                       	dc.b	smpsNoAttack, $01
0008F0B1 E108                       	smpsAlterNote       $08
0008F0B3 E701                       	dc.b	smpsNoAttack, $01
0008F0B5 E10C                       	smpsAlterNote       $0C
0008F0B7 E701                       	dc.b	smpsNoAttack, $01
0008F0B9 E10F                       	smpsAlterNote       $0F
0008F0BB E701                       	dc.b	smpsNoAttack, $01
0008F0BD E113                       	smpsAlterNote       $13
0008F0BF E701                       	dc.b	smpsNoAttack, $01
0008F0C1 E10F                       	smpsAlterNote       $0F
0008F0C3 E701                       	dc.b	smpsNoAttack, $01
0008F0C5 E109                       	smpsAlterNote       $09
0008F0C7 E701                       	dc.b	smpsNoAttack, $01
0008F0C9 E108                       	smpsAlterNote       $08
0008F0CB E701                       	dc.b	smpsNoAttack, $01
0008F0CD E10C                       	smpsAlterNote       $0C
0008F0CF E701                       	dc.b	smpsNoAttack, $01
0008F0D1 E112                       	smpsAlterNote       $12
0008F0D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0D7 E10F                       	smpsAlterNote       $0F
0008F0D9 E701                       	dc.b	smpsNoAttack, $01
0008F0DB E109                       	smpsAlterNote       $09
0008F0DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0E1 E10F                       	smpsAlterNote       $0F
0008F0E3 E701                       	dc.b	smpsNoAttack, $01
0008F0E5 E112                       	smpsAlterNote       $12
0008F0E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0EB E10C                       	smpsAlterNote       $0C
0008F0ED E701                       	dc.b	smpsNoAttack, $01
0008F0EF E108                       	smpsAlterNote       $08
0008F0F1 E701                       	dc.b	smpsNoAttack, $01
0008F0F3 E109                       	smpsAlterNote       $09
0008F0F5 E701                       	dc.b	smpsNoAttack, $01
0008F0F7 E10F                       	smpsAlterNote       $0F
0008F0F9 E701                       	dc.b	smpsNoAttack, $01
0008F0FB E113                       	smpsAlterNote       $13
0008F0FD E701                       	dc.b	smpsNoAttack, $01
0008F0FF E10F                       	smpsAlterNote       $0F
0008F101 E701                       	dc.b	smpsNoAttack, $01
0008F103 E10C                       	smpsAlterNote       $0C
0008F105 E701                       	dc.b	smpsNoAttack, $01
0008F107 E108                       	smpsAlterNote       $08
0008F109 E701                       	dc.b	smpsNoAttack, $01
0008F10B E10C                       	smpsAlterNote       $0C
0008F10D E701                       	dc.b	smpsNoAttack, $01
0008F10F E112                       	smpsAlterNote       $12
0008F111 E701                       	dc.b	smpsNoAttack, $01
0008F113 E113                       	smpsAlterNote       $13
0008F115 E701                       	dc.b	smpsNoAttack, $01
0008F117 E10F                       	smpsAlterNote       $0F
0008F119 E701                       	dc.b	smpsNoAttack, $01
0008F11B E109                       	smpsAlterNote       $09
0008F11D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F121 E10C                       	smpsAlterNote       $0C
0008F123 E701                       	dc.b	smpsNoAttack, $01
0008F125 E112                       	smpsAlterNote       $12
0008F127 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F12B E10C                       	smpsAlterNote       $0C
0008F12D E701                       	dc.b	smpsNoAttack, $01
0008F12F E109                       	smpsAlterNote       $09
0008F131 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F135 E10F                       	smpsAlterNote       $0F
0008F137 E701                       	dc.b	smpsNoAttack, $01
0008F139 E113                       	smpsAlterNote       $13
0008F13B E701                       	dc.b	smpsNoAttack, $01
0008F13D E112                       	smpsAlterNote       $12
0008F13F E701                       	dc.b	smpsNoAttack, $01
0008F141 E10C                       	smpsAlterNote       $0C
0008F143 E701                       	dc.b	smpsNoAttack, $01
0008F145 E109                       	smpsAlterNote       $09
0008F147 8001                       	dc.b	nRst, $01
0008F149 E10F                       	smpsAlterNote       $0F
0008F14B C60D                       	dc.b	nA5, $0D
0008F14D E10C                       	smpsAlterNote       $0C
0008F14F E701                       	dc.b	smpsNoAttack, $01
0008F151 E108                       	smpsAlterNote       $08
0008F153 E701                       	dc.b	smpsNoAttack, $01
0008F155 E10C                       	smpsAlterNote       $0C
0008F157 E701                       	dc.b	smpsNoAttack, $01
0008F159 E112                       	smpsAlterNote       $12
0008F15B E701                       	dc.b	smpsNoAttack, $01
0008F15D E113                       	smpsAlterNote       $13
0008F15F E701                       	dc.b	smpsNoAttack, $01
0008F161 E10F                       	smpsAlterNote       $0F
0008F163 E701                       	dc.b	smpsNoAttack, $01
0008F165 E109                       	smpsAlterNote       $09
0008F167 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F16B E10C                       	smpsAlterNote       $0C
0008F16D E701                       	dc.b	smpsNoAttack, $01
0008F16F E112                       	smpsAlterNote       $12
0008F171 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F175 E10C                       	smpsAlterNote       $0C
0008F177 E701                       	dc.b	smpsNoAttack, $01
0008F179 E109                       	smpsAlterNote       $09
0008F17B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F17F E10F                       	smpsAlterNote       $0F
0008F181 E701                       	dc.b	smpsNoAttack, $01
0008F183 E113                       	smpsAlterNote       $13
0008F185 E701                       	dc.b	smpsNoAttack, $01
0008F187 E112                       	smpsAlterNote       $12
0008F189 E701                       	dc.b	smpsNoAttack, $01
0008F18B E10C                       	smpsAlterNote       $0C
0008F18D E701                       	dc.b	smpsNoAttack, $01
0008F18F E108                       	smpsAlterNote       $08
0008F191 E701                       	dc.b	smpsNoAttack, $01
0008F193 E10C                       	smpsAlterNote       $0C
0008F195 E701                       	dc.b	smpsNoAttack, $01
0008F197 E10F                       	smpsAlterNote       $0F
0008F199 E701                       	dc.b	smpsNoAttack, $01
0008F19B E113                       	smpsAlterNote       $13
0008F19D E701                       	dc.b	smpsNoAttack, $01
0008F19F E10F                       	smpsAlterNote       $0F
0008F1A1 E701                       	dc.b	smpsNoAttack, $01
0008F1A3 E109                       	smpsAlterNote       $09
0008F1A5 E701                       	dc.b	smpsNoAttack, $01
0008F1A7 E108                       	smpsAlterNote       $08
0008F1A9 E701                       	dc.b	smpsNoAttack, $01
0008F1AB E10C                       	smpsAlterNote       $0C
0008F1AD E701                       	dc.b	smpsNoAttack, $01
0008F1AF E112                       	smpsAlterNote       $12
0008F1B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1B5 E10F                       	smpsAlterNote       $0F
0008F1B7 E701                       	dc.b	smpsNoAttack, $01
0008F1B9 E109                       	smpsAlterNote       $09
0008F1BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1BF E10F                       	smpsAlterNote       $0F
0008F1C1 E701                       	dc.b	smpsNoAttack, $01
0008F1C3 E112                       	smpsAlterNote       $12
0008F1C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1C9 E10C                       	smpsAlterNote       $0C
0008F1CB E701                       	dc.b	smpsNoAttack, $01
0008F1CD E108                       	smpsAlterNote       $08
0008F1CF E701                       	dc.b	smpsNoAttack, $01
0008F1D1 E10C                       	smpsAlterNote       $0C
0008F1D3 E701                       	dc.b	smpsNoAttack, $01
0008F1D5 E10F                       	smpsAlterNote       $0F
0008F1D7 E701                       	dc.b	smpsNoAttack, $01
0008F1D9 E113                       	smpsAlterNote       $13
0008F1DB E701                       	dc.b	smpsNoAttack, $01
0008F1DD E10F                       	smpsAlterNote       $0F
0008F1DF E701                       	dc.b	smpsNoAttack, $01
0008F1E1 E109                       	smpsAlterNote       $09
0008F1E3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F1E9 E601                       	smpsAlterVol        $01
0008F1EB E10F                       	smpsAlterNote       $0F
0008F1ED C604                       	dc.b	nA5, $04
0008F1EF E10D                       	smpsAlterNote       $0D
0008F1F1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F1F7 E10B                       	smpsAlterNote       $0B
0008F1F9 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008F201 E10F                       	smpsAlterNote       $0F
0008F203 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008F207 E10D                       	smpsAlterNote       $0D
0008F209 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008F20F E10C                       	smpsAlterNote       $0C
0008F211 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008F217 E10A                       	smpsAlterNote       $0A
0008F219 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008F21D E110                       	smpsAlterNote       $10
0008F21F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F223 E10F                       	smpsAlterNote       $0F
0008F225 C604                       	dc.b	nA5, $04
0008F227 E10D                       	smpsAlterNote       $0D
0008F229 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F235 E109                       	smpsAlterNote       $09
0008F237 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F23B E10F                       	smpsAlterNote       $0F
0008F23D E701                       	dc.b	smpsNoAttack, $01
0008F23F E112                       	smpsAlterNote       $12
0008F241 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F245 E10C                       	smpsAlterNote       $0C
0008F247 E701                       	dc.b	smpsNoAttack, $01
0008F249 E108                       	smpsAlterNote       $08
0008F24B E701                       	dc.b	smpsNoAttack, $01
0008F24D E10C                       	smpsAlterNote       $0C
0008F24F E701                       	dc.b	smpsNoAttack, $01
0008F251 E10F                       	smpsAlterNote       $0F
0008F253 E701                       	dc.b	smpsNoAttack, $01
0008F255 E113                       	smpsAlterNote       $13
0008F257 E701                       	dc.b	smpsNoAttack, $01
0008F259 E10D                       	smpsAlterNote       $0D
0008F25B C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F261 E10C                       	smpsAlterNote       $0C
0008F263 C10D                       	dc.b	nE5, $0D
0008F265 E109                       	smpsAlterNote       $09
0008F267 E701                       	dc.b	smpsNoAttack, $01
0008F269 E105                       	smpsAlterNote       $05
0008F26B E701                       	dc.b	smpsNoAttack, $01
0008F26D E106                       	smpsAlterNote       $06
0008F26F E701                       	dc.b	smpsNoAttack, $01
0008F271 E10C                       	smpsAlterNote       $0C
0008F273 E701                       	dc.b	smpsNoAttack, $01
0008F275 E110                       	smpsAlterNote       $10
0008F277 E701                       	dc.b	smpsNoAttack, $01
0008F279 E10C                       	smpsAlterNote       $0C
0008F27B E701                       	dc.b	smpsNoAttack, $01
0008F27D E109                       	smpsAlterNote       $09
0008F27F E701                       	dc.b	smpsNoAttack, $01
0008F281 E105                       	smpsAlterNote       $05
0008F283 E701                       	dc.b	smpsNoAttack, $01
0008F285 E109                       	smpsAlterNote       $09
0008F287 E701                       	dc.b	smpsNoAttack, $01
0008F289 E10F                       	smpsAlterNote       $0F
0008F28B E701                       	dc.b	smpsNoAttack, $01
0008F28D E110                       	smpsAlterNote       $10
0008F28F E701                       	dc.b	smpsNoAttack, $01
0008F291 E10C                       	smpsAlterNote       $0C
0008F293 E701                       	dc.b	smpsNoAttack, $01
0008F295 E106                       	smpsAlterNote       $06
0008F297 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F29B E109                       	smpsAlterNote       $09
0008F29D E701                       	dc.b	smpsNoAttack, $01
0008F29F E10F                       	smpsAlterNote       $0F
0008F2A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2A5 E109                       	smpsAlterNote       $09
0008F2A7 E701                       	dc.b	smpsNoAttack, $01
0008F2A9 E106                       	smpsAlterNote       $06
0008F2AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2AF E10C                       	smpsAlterNote       $0C
0008F2B1 E701                       	dc.b	smpsNoAttack, $01
0008F2B3 E110                       	smpsAlterNote       $10
0008F2B5 E701                       	dc.b	smpsNoAttack, $01
0008F2B7 E10F                       	smpsAlterNote       $0F
0008F2B9 E701                       	dc.b	smpsNoAttack, $01
0008F2BB E109                       	smpsAlterNote       $09
0008F2BD E701                       	dc.b	smpsNoAttack, $01
0008F2BF E105                       	smpsAlterNote       $05
0008F2C1 E701                       	dc.b	smpsNoAttack, $01
0008F2C3 E109                       	smpsAlterNote       $09
0008F2C5 E701                       	dc.b	smpsNoAttack, $01
0008F2C7 E10C                       	smpsAlterNote       $0C
0008F2C9 E701                       	dc.b	smpsNoAttack, $01
0008F2CB E110                       	smpsAlterNote       $10
0008F2CD E701                       	dc.b	smpsNoAttack, $01
0008F2CF E10C                       	smpsAlterNote       $0C
0008F2D1 E701                       	dc.b	smpsNoAttack, $01
0008F2D3 E106                       	smpsAlterNote       $06
0008F2D5 E701                       	dc.b	smpsNoAttack, $01
0008F2D7 E105                       	smpsAlterNote       $05
0008F2D9 E701                       	dc.b	smpsNoAttack, $01
0008F2DB E109                       	smpsAlterNote       $09
0008F2DD E701                       	dc.b	smpsNoAttack, $01
0008F2DF E10F                       	smpsAlterNote       $0F
0008F2E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2E5 E10C                       	smpsAlterNote       $0C
0008F2E7 E701                       	dc.b	smpsNoAttack, $01
0008F2E9 E106                       	smpsAlterNote       $06
0008F2EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2EF E10C                       	smpsAlterNote       $0C
0008F2F1 E701                       	dc.b	smpsNoAttack, $01
0008F2F3 E10F                       	smpsAlterNote       $0F
0008F2F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2F9 E109                       	smpsAlterNote       $09
0008F2FB E701                       	dc.b	smpsNoAttack, $01
0008F2FD E105                       	smpsAlterNote       $05
0008F2FF E701                       	dc.b	smpsNoAttack, $01
0008F301 E106                       	smpsAlterNote       $06
0008F303 E701                       	dc.b	smpsNoAttack, $01
0008F305 E10C                       	smpsAlterNote       $0C
0008F307 E701                       	dc.b	smpsNoAttack, $01
0008F309 E110                       	smpsAlterNote       $10
0008F30B E701                       	dc.b	smpsNoAttack, $01
0008F30D E10C                       	smpsAlterNote       $0C
0008F30F E701                       	dc.b	smpsNoAttack, $01
0008F311 E109                       	smpsAlterNote       $09
0008F313 E701                       	dc.b	smpsNoAttack, $01
0008F315 E105                       	smpsAlterNote       $05
0008F317 E701                       	dc.b	smpsNoAttack, $01
0008F319 E109                       	smpsAlterNote       $09
0008F31B E701                       	dc.b	smpsNoAttack, $01
0008F31D E10F                       	smpsAlterNote       $0F
0008F31F E701                       	dc.b	smpsNoAttack, $01
0008F321 E110                       	smpsAlterNote       $10
0008F323 E701                       	dc.b	smpsNoAttack, $01
0008F325 E10C                       	smpsAlterNote       $0C
0008F327 E701                       	dc.b	smpsNoAttack, $01
0008F329 E106                       	smpsAlterNote       $06
0008F32B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F32F E109                       	smpsAlterNote       $09
0008F331 E701                       	dc.b	smpsNoAttack, $01
0008F333 E10F                       	smpsAlterNote       $0F
0008F335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F339 E109                       	smpsAlterNote       $09
0008F33B E701                       	dc.b	smpsNoAttack, $01
0008F33D E106                       	smpsAlterNote       $06
0008F33F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F343 E10C                       	smpsAlterNote       $0C
0008F345 E701                       	dc.b	smpsNoAttack, $01
0008F347 E110                       	smpsAlterNote       $10
0008F349 E701                       	dc.b	smpsNoAttack, $01
0008F34B E10F                       	smpsAlterNote       $0F
0008F34D E701                       	dc.b	smpsNoAttack, $01
0008F34F E109                       	smpsAlterNote       $09
0008F351 E701                       	dc.b	smpsNoAttack, $01
0008F353 E105                       	smpsAlterNote       $05
0008F355 E701                       	dc.b	smpsNoAttack, $01
0008F357 E109                       	smpsAlterNote       $09
0008F359 E701                       	dc.b	smpsNoAttack, $01
0008F35B E10C                       	smpsAlterNote       $0C
0008F35D E701                       	dc.b	smpsNoAttack, $01
0008F35F E110                       	smpsAlterNote       $10
0008F361 E701                       	dc.b	smpsNoAttack, $01
0008F363 E10C                       	smpsAlterNote       $0C
0008F365 E701                       	dc.b	smpsNoAttack, $01
0008F367 E106                       	smpsAlterNote       $06
0008F369 E701                       	dc.b	smpsNoAttack, $01
0008F36B E105                       	smpsAlterNote       $05
0008F36D E701                       	dc.b	smpsNoAttack, $01
0008F36F E109                       	smpsAlterNote       $09
0008F371 E701                       	dc.b	smpsNoAttack, $01
0008F373 E10F                       	smpsAlterNote       $0F
0008F375 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F379 E109                       	smpsAlterNote       $09
0008F37B E701                       	dc.b	smpsNoAttack, $01
0008F37D E106                       	smpsAlterNote       $06
0008F37F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F383 E10C                       	smpsAlterNote       $0C
0008F385 E701                       	dc.b	smpsNoAttack, $01
0008F387 E110                       	smpsAlterNote       $10
0008F389 E701                       	dc.b	smpsNoAttack, $01
0008F38B E10F                       	smpsAlterNote       $0F
0008F38D E701                       	dc.b	smpsNoAttack, $01
0008F38F E109                       	smpsAlterNote       $09
0008F391 E701                       	dc.b	smpsNoAttack, $01
0008F393 E105                       	smpsAlterNote       $05
0008F395 E701                       	dc.b	smpsNoAttack, $01
0008F397 E109                       	smpsAlterNote       $09
0008F399 E701                       	dc.b	smpsNoAttack, $01
0008F39B E10C                       	smpsAlterNote       $0C
0008F39D E701                       	dc.b	smpsNoAttack, $01
0008F39F E110                       	smpsAlterNote       $10
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E10C                       	smpsAlterNote       $0C
0008F3A5 E701                       	dc.b	smpsNoAttack, $01
0008F3A7 E106                       	smpsAlterNote       $06
0008F3A9 E701                       	dc.b	smpsNoAttack, $01
0008F3AB E105                       	smpsAlterNote       $05
0008F3AD E701                       	dc.b	smpsNoAttack, $01
0008F3AF E109                       	smpsAlterNote       $09
0008F3B1 E701                       	dc.b	smpsNoAttack, $01
0008F3B3 E10F                       	smpsAlterNote       $0F
0008F3B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3B9 E10C                       	smpsAlterNote       $0C
0008F3BB E701                       	dc.b	smpsNoAttack, $01
0008F3BD E106                       	smpsAlterNote       $06
0008F3BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3C3 E10C                       	smpsAlterNote       $0C
0008F3C5 E701                       	dc.b	smpsNoAttack, $01
0008F3C7 E10F                       	smpsAlterNote       $0F
0008F3C9 E701                       	dc.b	smpsNoAttack, $01
0008F3CB E110                       	smpsAlterNote       $10
0008F3CD 8001                       	dc.b	nRst, $01
0008F3CF E10F                       	smpsAlterNote       $0F
0008F3D1 C604                       	dc.b	nA5, $04
0008F3D3 E10D                       	smpsAlterNote       $0D
0008F3D5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F3DB E10B                       	smpsAlterNote       $0B
0008F3DD BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008F3E3 E10F                       	smpsAlterNote       $0F
0008F3E5 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008F3E9 E10D                       	smpsAlterNote       $0D
0008F3EB C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008F3F1 E10C                       	smpsAlterNote       $0C
0008F3F3 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008F3F9 E10A                       	smpsAlterNote       $0A
0008F3FB C904                       	dc.b	nC6, $04
0008F3FD E110                       	smpsAlterNote       $10
0008F3FF C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F403 E10F                       	smpsAlterNote       $0F
0008F405 C604                       	dc.b	nA5, $04
0008F407 E10D                       	smpsAlterNote       $0D
0008F409 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F415 E109                       	smpsAlterNote       $09
0008F417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F41B E10F                       	smpsAlterNote       $0F
0008F41D E701                       	dc.b	smpsNoAttack, $01
0008F41F E112                       	smpsAlterNote       $12
0008F421 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F425 E10C                       	smpsAlterNote       $0C
0008F427 E701                       	dc.b	smpsNoAttack, $01
0008F429 E108                       	smpsAlterNote       $08
0008F42B E701                       	dc.b	smpsNoAttack, $01
0008F42D E109                       	smpsAlterNote       $09
0008F42F E701                       	dc.b	smpsNoAttack, $01
0008F431 E10F                       	smpsAlterNote       $0F
0008F433 E701                       	dc.b	smpsNoAttack, $01
0008F435 E113                       	smpsAlterNote       $13
0008F437 E701                       	dc.b	smpsNoAttack, $01
0008F439 E10D                       	smpsAlterNote       $0D
0008F43B C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F441 E10C                       	smpsAlterNote       $0C
0008F443 C10D                       	dc.b	nE5, $0D
0008F445 E109                       	smpsAlterNote       $09
0008F447 E701                       	dc.b	smpsNoAttack, $01
0008F449 E106                       	smpsAlterNote       $06
0008F44B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F44F E10C                       	smpsAlterNote       $0C
0008F451 E701                       	dc.b	smpsNoAttack, $01
0008F453 E110                       	smpsAlterNote       $10
0008F455 E701                       	dc.b	smpsNoAttack, $01
0008F457 E10F                       	smpsAlterNote       $0F
0008F459 E701                       	dc.b	smpsNoAttack, $01
0008F45B E109                       	smpsAlterNote       $09
0008F45D E701                       	dc.b	smpsNoAttack, $01
0008F45F E105                       	smpsAlterNote       $05
0008F461 E701                       	dc.b	smpsNoAttack, $01
0008F463 E109                       	smpsAlterNote       $09
0008F465 E701                       	dc.b	smpsNoAttack, $01
0008F467 E10C                       	smpsAlterNote       $0C
0008F469 E701                       	dc.b	smpsNoAttack, $01
0008F46B E110                       	smpsAlterNote       $10
0008F46D E701                       	dc.b	smpsNoAttack, $01
0008F46F E10C                       	smpsAlterNote       $0C
0008F471 E701                       	dc.b	smpsNoAttack, $01
0008F473 E106                       	smpsAlterNote       $06
0008F475 E701                       	dc.b	smpsNoAttack, $01
0008F477 E105                       	smpsAlterNote       $05
0008F479 E701                       	dc.b	smpsNoAttack, $01
0008F47B E109                       	smpsAlterNote       $09
0008F47D E701                       	dc.b	smpsNoAttack, $01
0008F47F E10F                       	smpsAlterNote       $0F
0008F481 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F485 E10C                       	smpsAlterNote       $0C
0008F487 E701                       	dc.b	smpsNoAttack, $01
0008F489 E106                       	smpsAlterNote       $06
0008F48B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F48F E10C                       	smpsAlterNote       $0C
0008F491 E701                       	dc.b	smpsNoAttack, $01
0008F493 E10F                       	smpsAlterNote       $0F
0008F495 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F499 E109                       	smpsAlterNote       $09
0008F49B E701                       	dc.b	smpsNoAttack, $01
0008F49D E105                       	smpsAlterNote       $05
0008F49F E701                       	dc.b	smpsNoAttack, $01
0008F4A1 E106                       	smpsAlterNote       $06
0008F4A3 E701                       	dc.b	smpsNoAttack, $01
0008F4A5 E10C                       	smpsAlterNote       $0C
0008F4A7 E701                       	dc.b	smpsNoAttack, $01
0008F4A9 E110                       	smpsAlterNote       $10
0008F4AB E701                       	dc.b	smpsNoAttack, $01
0008F4AD E10C                       	smpsAlterNote       $0C
0008F4AF E701                       	dc.b	smpsNoAttack, $01
0008F4B1 E109                       	smpsAlterNote       $09
0008F4B3 E701                       	dc.b	smpsNoAttack, $01
0008F4B5 E105                       	smpsAlterNote       $05
0008F4B7 E701                       	dc.b	smpsNoAttack, $01
0008F4B9 E109                       	smpsAlterNote       $09
0008F4BB E701                       	dc.b	smpsNoAttack, $01
0008F4BD E10F                       	smpsAlterNote       $0F
0008F4BF E701                       	dc.b	smpsNoAttack, $01
0008F4C1 E110                       	smpsAlterNote       $10
0008F4C3 E701                       	dc.b	smpsNoAttack, $01
0008F4C5 E10C                       	smpsAlterNote       $0C
0008F4C7 E701                       	dc.b	smpsNoAttack, $01
0008F4C9 E106                       	smpsAlterNote       $06
0008F4CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4CF E109                       	smpsAlterNote       $09
0008F4D1 E701                       	dc.b	smpsNoAttack, $01
0008F4D3 E10F                       	smpsAlterNote       $0F
0008F4D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4D9 E109                       	smpsAlterNote       $09
0008F4DB E701                       	dc.b	smpsNoAttack, $01
0008F4DD E106                       	smpsAlterNote       $06
0008F4DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4E3 E10C                       	smpsAlterNote       $0C
0008F4E5 E701                       	dc.b	smpsNoAttack, $01
0008F4E7 E110                       	smpsAlterNote       $10
0008F4E9 E701                       	dc.b	smpsNoAttack, $01
0008F4EB E10F                       	smpsAlterNote       $0F
0008F4ED E701                       	dc.b	smpsNoAttack, $01
0008F4EF E109                       	smpsAlterNote       $09
0008F4F1 E701                       	dc.b	smpsNoAttack, $01
0008F4F3 E105                       	smpsAlterNote       $05
0008F4F5 E701                       	dc.b	smpsNoAttack, $01
0008F4F7 E109                       	smpsAlterNote       $09
0008F4F9 E701                       	dc.b	smpsNoAttack, $01
0008F4FB E10F                       	smpsAlterNote       $0F
0008F4FD E701                       	dc.b	smpsNoAttack, $01
0008F4FF E110                       	smpsAlterNote       $10
0008F501 E701                       	dc.b	smpsNoAttack, $01
0008F503 E10C                       	smpsAlterNote       $0C
0008F505 E701                       	dc.b	smpsNoAttack, $01
0008F507 E106                       	smpsAlterNote       $06
0008F509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F50D E109                       	smpsAlterNote       $09
0008F50F E701                       	dc.b	smpsNoAttack, $01
0008F511 E10F                       	smpsAlterNote       $0F
0008F513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F517 E109                       	smpsAlterNote       $09
0008F519 E701                       	dc.b	smpsNoAttack, $01
0008F51B E106                       	smpsAlterNote       $06
0008F51D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F521 E10C                       	smpsAlterNote       $0C
0008F523 E701                       	dc.b	smpsNoAttack, $01
0008F525 E110                       	smpsAlterNote       $10
0008F527 E701                       	dc.b	smpsNoAttack, $01
0008F529 E10F                       	smpsAlterNote       $0F
0008F52B E701                       	dc.b	smpsNoAttack, $01
0008F52D E109                       	smpsAlterNote       $09
0008F52F E701                       	dc.b	smpsNoAttack, $01
0008F531 E105                       	smpsAlterNote       $05
0008F533 E701                       	dc.b	smpsNoAttack, $01
0008F535 E109                       	smpsAlterNote       $09
0008F537 E701                       	dc.b	smpsNoAttack, $01
0008F539 E10C                       	smpsAlterNote       $0C
0008F53B E701                       	dc.b	smpsNoAttack, $01
0008F53D E110                       	smpsAlterNote       $10
0008F53F E701                       	dc.b	smpsNoAttack, $01
0008F541 E10C                       	smpsAlterNote       $0C
0008F543 E701                       	dc.b	smpsNoAttack, $01
0008F545 E106                       	smpsAlterNote       $06
0008F547 E701                       	dc.b	smpsNoAttack, $01
0008F549 E105                       	smpsAlterNote       $05
0008F54B E701                       	dc.b	smpsNoAttack, $01
0008F54D E109                       	smpsAlterNote       $09
0008F54F E701                       	dc.b	smpsNoAttack, $01
0008F551 E10F                       	smpsAlterNote       $0F
0008F553 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F557 E10C                       	smpsAlterNote       $0C
0008F559 E701                       	dc.b	smpsNoAttack, $01
0008F55B E106                       	smpsAlterNote       $06
0008F55D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F561 E10C                       	smpsAlterNote       $0C
0008F563 E701                       	dc.b	smpsNoAttack, $01
0008F565 E10F                       	smpsAlterNote       $0F
0008F567 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F56B E109                       	smpsAlterNote       $09
0008F56D E701                       	dc.b	smpsNoAttack, $01
0008F56F E105                       	smpsAlterNote       $05
0008F571 E701                       	dc.b	smpsNoAttack, $01
0008F573 E106                       	smpsAlterNote       $06
0008F575 E701                       	dc.b	smpsNoAttack, $01
0008F577 E10C                       	smpsAlterNote       $0C
0008F579 E701                       	dc.b	smpsNoAttack, $01
0008F57B E110                       	smpsAlterNote       $10
0008F57D E701                       	dc.b	smpsNoAttack, $01
0008F57F E10C                       	smpsAlterNote       $0C
0008F581 E701                       	dc.b	smpsNoAttack, $01
0008F583 E109                       	smpsAlterNote       $09
0008F585 E701                       	dc.b	smpsNoAttack, $01
0008F587 E105                       	smpsAlterNote       $05
0008F589 E701                       	dc.b	smpsNoAttack, $01
0008F58B E109                       	smpsAlterNote       $09
0008F58D E701                       	dc.b	smpsNoAttack, $01
0008F58F E10F                       	smpsAlterNote       $0F
0008F591 E701                       	dc.b	smpsNoAttack, $01
0008F593 E110                       	smpsAlterNote       $10
0008F595 E701                       	dc.b	smpsNoAttack, $01
0008F597 E10C                       	smpsAlterNote       $0C
0008F599 E701                       	dc.b	smpsNoAttack, $01
0008F59B E106                       	smpsAlterNote       $06
0008F59D E701                       	dc.b	smpsNoAttack, $01
0008F59F E10B                       	smpsAlterNote       $0B
0008F5A1 BF02                       	dc.b	nD5, $02
0008F5A3 E10C                       	smpsAlterNote       $0C
0008F5A5 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008F5AB E109                       	smpsAlterNote       $09
0008F5AD E701                       	dc.b	smpsNoAttack, $01
0008F5AF E105                       	smpsAlterNote       $05
0008F5B1 E701                       	dc.b	smpsNoAttack, $01
0008F5B3 E109                       	smpsAlterNote       $09
0008F5B5 E701                       	dc.b	smpsNoAttack, $01
0008F5B7 E10F                       	smpsAlterNote       $0F
0008F5B9 E701                       	dc.b	smpsNoAttack, $01
0008F5BB E110                       	smpsAlterNote       $10
0008F5BD E701                       	dc.b	smpsNoAttack, $01
0008F5BF E10C                       	smpsAlterNote       $0C
0008F5C1 E701                       	dc.b	smpsNoAttack, $01
0008F5C3 E106                       	smpsAlterNote       $06
0008F5C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5C9 E109                       	smpsAlterNote       $09
0008F5CB E701                       	dc.b	smpsNoAttack, $01
0008F5CD E10F                       	smpsAlterNote       $0F
0008F5CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5D3 E109                       	smpsAlterNote       $09
0008F5D5 E701                       	dc.b	smpsNoAttack, $01
0008F5D7 E106                       	smpsAlterNote       $06
0008F5D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5DD E10C                       	smpsAlterNote       $0C
0008F5DF E701                       	dc.b	smpsNoAttack, $01
0008F5E1 E110                       	smpsAlterNote       $10
0008F5E3 E701                       	dc.b	smpsNoAttack, $01
0008F5E5 E10F                       	smpsAlterNote       $0F
0008F5E7 E701                       	dc.b	smpsNoAttack, $01
0008F5E9 E109                       	smpsAlterNote       $09
0008F5EB E701                       	dc.b	smpsNoAttack, $01
0008F5ED E105                       	smpsAlterNote       $05
0008F5EF E701                       	dc.b	smpsNoAttack, $01
0008F5F1 E109                       	smpsAlterNote       $09
0008F5F3 E701                       	dc.b	smpsNoAttack, $01
0008F5F5 E10C                       	smpsAlterNote       $0C
0008F5F7 E701                       	dc.b	smpsNoAttack, $01
0008F5F9 E110                       	smpsAlterNote       $10
0008F5FB E701                       	dc.b	smpsNoAttack, $01
0008F5FD E10C                       	smpsAlterNote       $0C
0008F5FF E701                       	dc.b	smpsNoAttack, $01
0008F601 E106                       	smpsAlterNote       $06
0008F603 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F607 E10D                       	smpsAlterNote       $0D
0008F609 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F611 E10C                       	smpsAlterNote       $0C
0008F613 C10D                       	dc.b	nE5, $0D
0008F615 E106                       	smpsAlterNote       $06
0008F617 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F61B E109                       	smpsAlterNote       $09
0008F61D E701                       	dc.b	smpsNoAttack, $01
0008F61F E10F                       	smpsAlterNote       $0F
0008F621 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F625 E109                       	smpsAlterNote       $09
0008F627 E701                       	dc.b	smpsNoAttack, $01
0008F629 E106                       	smpsAlterNote       $06
0008F62B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F62F E10C                       	smpsAlterNote       $0C
0008F631 E701                       	dc.b	smpsNoAttack, $01
0008F633 E110                       	smpsAlterNote       $10
0008F635 E701                       	dc.b	smpsNoAttack, $01
0008F637 E10F                       	smpsAlterNote       $0F
0008F639 E701                       	dc.b	smpsNoAttack, $01
0008F63B E109                       	smpsAlterNote       $09
0008F63D E701                       	dc.b	smpsNoAttack, $01
0008F63F E105                       	smpsAlterNote       $05
0008F641 E701                       	dc.b	smpsNoAttack, $01
0008F643 E106                       	smpsAlterNote       $06
0008F645 800F                       	dc.b	nRst, $0F
0008F649 E6FF                       	smpsAlterVol        $FF
0008F64B E10F                       	smpsAlterNote       $0F
0008F64D BA01                       	dc.b	nA4, $01
0008F64F E110                       	smpsAlterNote       $10
0008F651 BB02                       	dc.b	nBb4, $02
0008F653 E10F                       	smpsAlterNote       $0F
0008F655 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F65B E10B                       	smpsAlterNote       $0B
0008F65D BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F661 E10C                       	smpsAlterNote       $0C
0008F663 C103                       	dc.b	nE5, $03
0008F665 E10D                       	smpsAlterNote       $0D
0008F667 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F671 E10B                       	smpsAlterNote       $0B
0008F673 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F677 E104                       	smpsAlterNote       $04
0008F679 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F67D E10A                       	smpsAlterNote       $0A
0008F67F E701                       	dc.b	smpsNoAttack, $01
0008F681 E10D                       	smpsAlterNote       $0D
0008F683 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F687 E107                       	smpsAlterNote       $07
0008F689 E701                       	dc.b	smpsNoAttack, $01
0008F68B E104                       	smpsAlterNote       $04
0008F68D 8001                       	dc.b	nRst, $01
0008F68F E110                       	smpsAlterNote       $10
0008F691 C703                       	dc.b	nBb5, $03
0008F693 E10F                       	smpsAlterNote       $0F
0008F695 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F699 E10D                       	smpsAlterNote       $0D
0008F69B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F69F E10C                       	smpsAlterNote       $0C
0008F6A1 E701                       	dc.b	smpsNoAttack, $01
0008F6A3 E108                       	smpsAlterNote       $08
0008F6A5 E701                       	dc.b	smpsNoAttack, $01
0008F6A7 E109                       	smpsAlterNote       $09
0008F6A9 E701                       	dc.b	smpsNoAttack, $01
0008F6AB E10F                       	smpsAlterNote       $0F
0008F6AD E701                       	dc.b	smpsNoAttack, $01
0008F6AF E113                       	smpsAlterNote       $13
0008F6B1 E701                       	dc.b	smpsNoAttack, $01
0008F6B3 E10F                       	smpsAlterNote       $0F
0008F6B5 E701                       	dc.b	smpsNoAttack, $01
0008F6B7 E10C                       	smpsAlterNote       $0C
0008F6B9 E701                       	dc.b	smpsNoAttack, $01
0008F6BB E108                       	smpsAlterNote       $08
0008F6BD E701                       	dc.b	smpsNoAttack, $01
0008F6BF E10C                       	smpsAlterNote       $0C
0008F6C1 E701                       	dc.b	smpsNoAttack, $01
0008F6C3 E112                       	smpsAlterNote       $12
0008F6C5 E701                       	dc.b	smpsNoAttack, $01
0008F6C7 E113                       	smpsAlterNote       $13
0008F6C9 E701                       	dc.b	smpsNoAttack, $01
0008F6CB E10F                       	smpsAlterNote       $0F
0008F6CD E701                       	dc.b	smpsNoAttack, $01
0008F6CF E109                       	smpsAlterNote       $09
0008F6D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6D5 E10C                       	smpsAlterNote       $0C
0008F6D7 E701                       	dc.b	smpsNoAttack, $01
0008F6D9 E112                       	smpsAlterNote       $12
0008F6DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6DF E10C                       	smpsAlterNote       $0C
0008F6E1 E701                       	dc.b	smpsNoAttack, $01
0008F6E3 E109                       	smpsAlterNote       $09
0008F6E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6E9 E10F                       	smpsAlterNote       $0F
0008F6EB E701                       	dc.b	smpsNoAttack, $01
0008F6ED E113                       	smpsAlterNote       $13
0008F6EF E701                       	dc.b	smpsNoAttack, $01
0008F6F1 E112                       	smpsAlterNote       $12
0008F6F3 E701                       	dc.b	smpsNoAttack, $01
0008F6F5 E10C                       	smpsAlterNote       $0C
0008F6F7 E701                       	dc.b	smpsNoAttack, $01
0008F6F9 E108                       	smpsAlterNote       $08
0008F6FB E701                       	dc.b	smpsNoAttack, $01
0008F6FD E10C                       	smpsAlterNote       $0C
0008F6FF E701                       	dc.b	smpsNoAttack, $01
0008F701 E10F                       	smpsAlterNote       $0F
0008F703 E701                       	dc.b	smpsNoAttack, $01
0008F705 E113                       	smpsAlterNote       $13
0008F707 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F70B E10B                       	smpsAlterNote       $0B
0008F70D BF03                       	dc.b	nD5, $03
0008F70F E10C                       	smpsAlterNote       $0C
0008F711 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F715 E10D                       	smpsAlterNote       $0D
0008F717 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F721 E10B                       	smpsAlterNote       $0B
0008F723 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F72F E110                       	smpsAlterNote       $10
0008F731 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F735 E10F                       	smpsAlterNote       $0F
0008F737 C604                       	dc.b	nA5, $04
0008F739 E10D                       	smpsAlterNote       $0D
0008F73B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F741 E109                       	smpsAlterNote       $09
0008F743 E701                       	dc.b	smpsNoAttack, $01
0008F745 E108                       	smpsAlterNote       $08
0008F747 E701                       	dc.b	smpsNoAttack, $01
0008F749 E10C                       	smpsAlterNote       $0C
0008F74B E701                       	dc.b	smpsNoAttack, $01
0008F74D E112                       	smpsAlterNote       $12
0008F74F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F753 E10F                       	smpsAlterNote       $0F
0008F755 E701                       	dc.b	smpsNoAttack, $01
0008F757 E109                       	smpsAlterNote       $09
0008F759 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F75D E10F                       	smpsAlterNote       $0F
0008F75F E701                       	dc.b	smpsNoAttack, $01
0008F761 E112                       	smpsAlterNote       $12
0008F763 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F767 E10C                       	smpsAlterNote       $0C
0008F769 E701                       	dc.b	smpsNoAttack, $01
0008F76B E108                       	smpsAlterNote       $08
0008F76D E701                       	dc.b	smpsNoAttack, $01
0008F76F E109                       	smpsAlterNote       $09
0008F771 E701                       	dc.b	smpsNoAttack, $01
0008F773 E10F                       	smpsAlterNote       $0F
0008F775 E701                       	dc.b	smpsNoAttack, $01
0008F777 E113                       	smpsAlterNote       $13
0008F779 E701                       	dc.b	smpsNoAttack, $01
0008F77B E10F                       	smpsAlterNote       $0F
0008F77D E701                       	dc.b	smpsNoAttack, $01
0008F77F E10C                       	smpsAlterNote       $0C
0008F781 E701                       	dc.b	smpsNoAttack, $01
0008F783 E108                       	smpsAlterNote       $08
0008F785 E701                       	dc.b	smpsNoAttack, $01
0008F787 E10C                       	smpsAlterNote       $0C
0008F789 E701                       	dc.b	smpsNoAttack, $01
0008F78B E112                       	smpsAlterNote       $12
0008F78D E701                       	dc.b	smpsNoAttack, $01
0008F78F E113                       	smpsAlterNote       $13
0008F791 E701                       	dc.b	smpsNoAttack, $01
0008F793 E10F                       	smpsAlterNote       $0F
0008F795 E701                       	dc.b	smpsNoAttack, $01
0008F797 E109                       	smpsAlterNote       $09
0008F799 E701                       	dc.b	smpsNoAttack, $01
0008F79B E10D                       	smpsAlterNote       $0D
0008F79D C402                       	dc.b	nG5, $02
0008F79F E10F                       	smpsAlterNote       $0F
0008F7A1 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F7AB E10D                       	smpsAlterNote       $0D
0008F7AD C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F7B3 E10B                       	smpsAlterNote       $0B
0008F7B5 BF0D                       	dc.b	nD5, $0D
0008F7B7 E108                       	smpsAlterNote       $08
0008F7B9 E701                       	dc.b	smpsNoAttack, $01
0008F7BB E104                       	smpsAlterNote       $04
0008F7BD E701                       	dc.b	smpsNoAttack, $01
0008F7BF E105                       	smpsAlterNote       $05
0008F7C1 E701                       	dc.b	smpsNoAttack, $01
0008F7C3 E10B                       	smpsAlterNote       $0B
0008F7C5 E701                       	dc.b	smpsNoAttack, $01
0008F7C7 E10F                       	smpsAlterNote       $0F
0008F7C9 E701                       	dc.b	smpsNoAttack, $01
0008F7CB E10B                       	smpsAlterNote       $0B
0008F7CD E701                       	dc.b	smpsNoAttack, $01
0008F7CF E108                       	smpsAlterNote       $08
0008F7D1 E701                       	dc.b	smpsNoAttack, $01
0008F7D3 E104                       	smpsAlterNote       $04
0008F7D5 E701                       	dc.b	smpsNoAttack, $01
0008F7D7 E108                       	smpsAlterNote       $08
0008F7D9 E701                       	dc.b	smpsNoAttack, $01
0008F7DB E10E                       	smpsAlterNote       $0E
0008F7DD E701                       	dc.b	smpsNoAttack, $01
0008F7DF E10F                       	smpsAlterNote       $0F
0008F7E1 E701                       	dc.b	smpsNoAttack, $01
0008F7E3 E10C                       	smpsAlterNote       $0C
0008F7E5 C101                       	dc.b	nE5, $01
0008F7E7 E10D                       	smpsAlterNote       $0D
0008F7E9 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F7F1 E10F                       	smpsAlterNote       $0F
0008F7F3 C607                       	dc.b	nA5, $07
0008F7F5 E10C                       	smpsAlterNote       $0C
0008F7F7 CD07                       	dc.b	nE6, $07
0008F7F9 E10D                       	smpsAlterNote       $0D
0008F7FB CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F7FF E10C                       	smpsAlterNote       $0C
0008F801 CD03                       	dc.b	nE6, $03
0008F803 E10A                       	smpsAlterNote       $0A
0008F805 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F809 E10D                       	smpsAlterNote       $0D
0008F80B C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F811 E10A                       	smpsAlterNote       $0A
0008F813 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F817 E110                       	smpsAlterNote       $10
0008F819 E701                       	dc.b	smpsNoAttack, $01
0008F81B E114                       	smpsAlterNote       $14
0008F81D E701                       	dc.b	smpsNoAttack, $01
0008F81F E113                       	smpsAlterNote       $13
0008F821 E701                       	dc.b	smpsNoAttack, $01
0008F823 E10D                       	smpsAlterNote       $0D
0008F825 E701                       	dc.b	smpsNoAttack, $01
0008F827 E109                       	smpsAlterNote       $09
0008F829 E701                       	dc.b	smpsNoAttack, $01
0008F82B E10D                       	smpsAlterNote       $0D
0008F82D E701                       	dc.b	smpsNoAttack, $01
0008F82F E110                       	smpsAlterNote       $10
0008F831 E701                       	dc.b	smpsNoAttack, $01
0008F833 E114                       	smpsAlterNote       $14
0008F835 E701                       	dc.b	smpsNoAttack, $01
0008F837 E10F                       	smpsAlterNote       $0F
0008F839 C607                       	dc.b	nA5, $07
0008F83B E10D                       	smpsAlterNote       $0D
0008F83D C40D                       	dc.b	nG5, $0D
0008F83F E10A                       	smpsAlterNote       $0A
0008F841 E701                       	dc.b	smpsNoAttack, $01
0008F843 E106                       	smpsAlterNote       $06
0008F845 E701                       	dc.b	smpsNoAttack, $01
0008F847 E10A                       	smpsAlterNote       $0A
0008F849 E701                       	dc.b	smpsNoAttack, $01
0008F84B E10D                       	smpsAlterNote       $0D
0008F84D E701                       	dc.b	smpsNoAttack, $01
0008F84F E111                       	smpsAlterNote       $11
0008F851 E701                       	dc.b	smpsNoAttack, $01
0008F853 E10D                       	smpsAlterNote       $0D
0008F855 E701                       	dc.b	smpsNoAttack, $01
0008F857 E107                       	smpsAlterNote       $07
0008F859 E701                       	dc.b	smpsNoAttack, $01
0008F85B E106                       	smpsAlterNote       $06
0008F85D E701                       	dc.b	smpsNoAttack, $01
0008F85F E10A                       	smpsAlterNote       $0A
0008F861 E701                       	dc.b	smpsNoAttack, $01
0008F863 E110                       	smpsAlterNote       $10
0008F865 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F869 E10D                       	smpsAlterNote       $0D
0008F86B E701                       	dc.b	smpsNoAttack, $01
0008F86D E107                       	smpsAlterNote       $07
0008F86F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F873 E10F                       	smpsAlterNote       $0F
0008F875 C60E                       	dc.b	nA5, $0E
0008F877 E109                       	smpsAlterNote       $09
0008F879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F87D E10F                       	smpsAlterNote       $0F
0008F87F E701                       	dc.b	smpsNoAttack, $01
0008F881 E112                       	smpsAlterNote       $12
0008F883 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F887 E10C                       	smpsAlterNote       $0C
0008F889 E701                       	dc.b	smpsNoAttack, $01
0008F88B E108                       	smpsAlterNote       $08
0008F88D E701                       	dc.b	smpsNoAttack, $01
0008F88F E109                       	smpsAlterNote       $09
0008F891 E701                       	dc.b	smpsNoAttack, $01
0008F893 E10F                       	smpsAlterNote       $0F
0008F895 E701                       	dc.b	smpsNoAttack, $01
0008F897 E113                       	smpsAlterNote       $13
0008F899 E701                       	dc.b	smpsNoAttack, $01
0008F89B E10F                       	smpsAlterNote       $0F
0008F89D E701                       	dc.b	smpsNoAttack, $01
0008F89F E10C                       	smpsAlterNote       $0C
0008F8A1 E701                       	dc.b	smpsNoAttack, $01
0008F8A3 E108                       	smpsAlterNote       $08
0008F8A5 E701                       	dc.b	smpsNoAttack, $01
0008F8A7 E109                       	smpsAlterNote       $09
0008F8A9 8001                       	dc.b	nRst, $01
0008F8AB E110                       	smpsAlterNote       $10
0008F8AD C70D                       	dc.b	nBb5, $0D
0008F8AF E10D                       	smpsAlterNote       $0D
0008F8B1 E701                       	dc.b	smpsNoAttack, $01
0008F8B3 E109                       	smpsAlterNote       $09
0008F8B5 E701                       	dc.b	smpsNoAttack, $01
0008F8B7 E10D                       	smpsAlterNote       $0D
0008F8B9 E701                       	dc.b	smpsNoAttack, $01
0008F8BB E113                       	smpsAlterNote       $13
0008F8BD E701                       	dc.b	smpsNoAttack, $01
0008F8BF E114                       	smpsAlterNote       $14
0008F8C1 E701                       	dc.b	smpsNoAttack, $01
0008F8C3 E110                       	smpsAlterNote       $10
0008F8C5 E701                       	dc.b	smpsNoAttack, $01
0008F8C7 E10A                       	smpsAlterNote       $0A
0008F8C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8CD E10D                       	smpsAlterNote       $0D
0008F8CF E701                       	dc.b	smpsNoAttack, $01
0008F8D1 E113                       	smpsAlterNote       $13
0008F8D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8D7 E10D                       	smpsAlterNote       $0D
0008F8D9 E701                       	dc.b	smpsNoAttack, $01
0008F8DB E10A                       	smpsAlterNote       $0A
0008F8DD E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F8E7 E10B                       	smpsAlterNote       $0B
0008F8E9 8001                       	dc.b	nRst, $01
0008F8EB E10C                       	smpsAlterNote       $0C
0008F8ED CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F8F1 E10B                       	smpsAlterNote       $0B
0008F8F3 CB0D                       	dc.b	nD6, $0D
0008F8F5 E105                       	smpsAlterNote       $05
0008F8F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8FB E108                       	smpsAlterNote       $08
0008F8FD E701                       	dc.b	smpsNoAttack, $01
0008F8FF E10E                       	smpsAlterNote       $0E
0008F901 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F905 E108                       	smpsAlterNote       $08
0008F907 E701                       	dc.b	smpsNoAttack, $01
0008F909 E105                       	smpsAlterNote       $05
0008F90B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F90F E10B                       	smpsAlterNote       $0B
0008F911 E701                       	dc.b	smpsNoAttack, $01
0008F913 E10F                       	smpsAlterNote       $0F
0008F915 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F919 E10C                       	smpsAlterNote       $0C
0008F91B CC0D                       	dc.b	nEb6, $0D
0008F91D E106                       	smpsAlterNote       $06
0008F91F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F923 E109                       	smpsAlterNote       $09
0008F925 E701                       	dc.b	smpsNoAttack, $01
0008F927 E10C                       	smpsAlterNote       $0C
0008F929 8001                       	dc.b	nRst, $01
0008F92B E10A                       	smpsAlterNote       $0A
0008F92D C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F939 CB0E                       	dc.b	nD6, $0E
0008F93B E105                       	smpsAlterNote       $05
0008F93D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F941 E10B                       	smpsAlterNote       $0B
0008F943 E701                       	dc.b	smpsNoAttack, $01
0008F945 E10E                       	smpsAlterNote       $0E
0008F947 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F94B E108                       	smpsAlterNote       $08
0008F94D E701                       	dc.b	smpsNoAttack, $01
0008F94F E104                       	smpsAlterNote       $04
0008F951 E701                       	dc.b	smpsNoAttack, $01
0008F953 E105                       	smpsAlterNote       $05
0008F955 E701                       	dc.b	smpsNoAttack, $01
0008F957 E10B                       	smpsAlterNote       $0B
0008F959 E701                       	dc.b	smpsNoAttack, $01
0008F95B E10F                       	smpsAlterNote       $0F
0008F95D E701                       	dc.b	smpsNoAttack, $01
0008F95F E10D                       	smpsAlterNote       $0D
0008F961 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F965 E10C                       	smpsAlterNote       $0C
0008F967 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F96B E10A                       	smpsAlterNote       $0A
0008F96D C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F979 CB0D                       	dc.b	nD6, $0D
0008F97B E108                       	smpsAlterNote       $08
0008F97D E701                       	dc.b	smpsNoAttack, $01
0008F97F E104                       	smpsAlterNote       $04
0008F981 E701                       	dc.b	smpsNoAttack, $01
0008F983 E105                       	smpsAlterNote       $05
0008F985 E701                       	dc.b	smpsNoAttack, $01
0008F987 E10B                       	smpsAlterNote       $0B
0008F989 E701                       	dc.b	smpsNoAttack, $01
0008F98B E10F                       	smpsAlterNote       $0F
0008F98D E701                       	dc.b	smpsNoAttack, $01
0008F98F E10B                       	smpsAlterNote       $0B
0008F991 E701                       	dc.b	smpsNoAttack, $01
0008F993 E108                       	smpsAlterNote       $08
0008F995 E701                       	dc.b	smpsNoAttack, $01
0008F997 E104                       	smpsAlterNote       $04
0008F999 E701                       	dc.b	smpsNoAttack, $01
0008F99B E108                       	smpsAlterNote       $08
0008F99D E701                       	dc.b	smpsNoAttack, $01
0008F99F E10E                       	smpsAlterNote       $0E
0008F9A1 E701                       	dc.b	smpsNoAttack, $01
0008F9A3 E10F                       	smpsAlterNote       $0F
0008F9A5 E701                       	dc.b	smpsNoAttack, $01
0008F9A7 E10C                       	smpsAlterNote       $0C
0008F9A9 CC0D                       	dc.b	nEb6, $0D
0008F9AB E109                       	smpsAlterNote       $09
0008F9AD E701                       	dc.b	smpsNoAttack, $01
0008F9AF E105                       	smpsAlterNote       $05
0008F9B1 E701                       	dc.b	smpsNoAttack, $01
0008F9B3 E106                       	smpsAlterNote       $06
0008F9B5 E701                       	dc.b	smpsNoAttack, $01
0008F9B7 E10C                       	smpsAlterNote       $0C
0008F9B9 E701                       	dc.b	smpsNoAttack, $01
0008F9BB E10A                       	smpsAlterNote       $0A
0008F9BD C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F9C9 CB0D                       	dc.b	nD6, $0D
0008F9CB E108                       	smpsAlterNote       $08
0008F9CD E701                       	dc.b	smpsNoAttack, $01
0008F9CF E104                       	smpsAlterNote       $04
0008F9D1 E701                       	dc.b	smpsNoAttack, $01
0008F9D3 E108                       	smpsAlterNote       $08
0008F9D5 E701                       	dc.b	smpsNoAttack, $01
0008F9D7 E10B                       	smpsAlterNote       $0B
0008F9D9 E701                       	dc.b	smpsNoAttack, $01
0008F9DB E10F                       	smpsAlterNote       $0F
0008F9DD E701                       	dc.b	smpsNoAttack, $01
0008F9DF E10B                       	smpsAlterNote       $0B
0008F9E1 E701                       	dc.b	smpsNoAttack, $01
0008F9E3 E105                       	smpsAlterNote       $05
0008F9E5 E701                       	dc.b	smpsNoAttack, $01
0008F9E7 E104                       	smpsAlterNote       $04
0008F9E9 E701                       	dc.b	smpsNoAttack, $01
0008F9EB E108                       	smpsAlterNote       $08
0008F9ED E701                       	dc.b	smpsNoAttack, $01
0008F9EF E10E                       	smpsAlterNote       $0E
0008F9F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9F5 E10B                       	smpsAlterNote       $0B
0008F9F7 E701                       	dc.b	smpsNoAttack, $01
0008F9F9 E105                       	smpsAlterNote       $05
0008F9FB E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008FA03 03                         	dc.b	$03
0008FA04 E601                       	smpsAlterVol        $01
0008FA06 F6F1 D1                    	smpsJump            music84_Jump01
0008FA09                            
0008FA09                            ; FM5 Data
0008FA09                            music84_FM5:
0008FA0B E080                       	smpsPan             panLeft, $00
0008FA0D 8003                       	dc.b	nRst, $03
0008FA0F E10D                       	smpsAlterNote       $0D
0008FA11 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008FA15 E10C                       	smpsAlterNote       $0C
0008FA17 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008FA1B E10F                       	smpsAlterNote       $0F
0008FA1D BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008FA23 E6FE                       	smpsAlterVol        $FE
0008FA25 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008FA2B E10D                       	smpsAlterNote       $0D
0008FA2D C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008FA33 E10C                       	smpsAlterNote       $0C
0008FA35 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FA39 E10A                       	smpsAlterNote       $0A
0008FA3B BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008FA41 03                         	dc.b	$03
0008FA42                            
0008FA42                            music84_Jump00:
0008FA42 8004                       	dc.b	nRst, $04
0008FA44 E602                       	smpsAlterVol        $02
0008FA46 E10D                       	smpsAlterNote       $0D
0008FA48 B60D                       	dc.b	nF4, $0D
0008FA4A E107                       	smpsAlterNote       $07
0008FA4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA50 E10A                       	smpsAlterNote       $0A
0008FA52 E701                       	dc.b	smpsNoAttack, $01
0008FA54 E110                       	smpsAlterNote       $10
0008FA56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA5A E10A                       	smpsAlterNote       $0A
0008FA5C E701                       	dc.b	smpsNoAttack, $01
0008FA5E E107                       	smpsAlterNote       $07
0008FA60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA64 E10D                       	smpsAlterNote       $0D
0008FA66 E701                       	dc.b	smpsNoAttack, $01
0008FA68 E111                       	smpsAlterNote       $11
0008FA6A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FA6E E10D                       	smpsAlterNote       $0D
0008FA70 B80D                       	dc.b	nG4, $0D
0008FA72 E107                       	smpsAlterNote       $07
0008FA74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA78 E10A                       	smpsAlterNote       $0A
0008FA7A E701                       	dc.b	smpsNoAttack, $01
0008FA7C E110                       	smpsAlterNote       $10
0008FA7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA82 E10A                       	smpsAlterNote       $0A
0008FA84 E701                       	dc.b	smpsNoAttack, $01
0008FA86 E107                       	smpsAlterNote       $07
0008FA88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA8C E10D                       	smpsAlterNote       $0D
0008FA8E E701                       	dc.b	smpsNoAttack, $01
0008FA90 E111                       	smpsAlterNote       $11
0008FA92 E701                       	dc.b	smpsNoAttack, $01
0008FA94 E110                       	smpsAlterNote       $10
0008FA96 E701                       	dc.b	smpsNoAttack, $01
0008FA98 E10A                       	smpsAlterNote       $0A
0008FA9A E701                       	dc.b	smpsNoAttack, $01
0008FA9C E106                       	smpsAlterNote       $06
0008FA9E E701                       	dc.b	smpsNoAttack, $01
0008FAA0 E10A                       	smpsAlterNote       $0A
0008FAA2 E701                       	dc.b	smpsNoAttack, $01
0008FAA4 E10D                       	smpsAlterNote       $0D
0008FAA6 E701                       	dc.b	smpsNoAttack, $01
0008FAA8 E111                       	smpsAlterNote       $11
0008FAAA E701                       	dc.b	smpsNoAttack, $01
0008FAAC E10D                       	smpsAlterNote       $0D
0008FAAE E701                       	dc.b	smpsNoAttack, $01
0008FAB0 E10F                       	smpsAlterNote       $0F
0008FAB2 BA0E                       	dc.b	nA4, $0E
0008FAB4 E109                       	smpsAlterNote       $09
0008FAB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FABA E10F                       	smpsAlterNote       $0F
0008FABC E701                       	dc.b	smpsNoAttack, $01
0008FABE E112                       	smpsAlterNote       $12
0008FAC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAC4 E10C                       	smpsAlterNote       $0C
0008FAC6 E701                       	dc.b	smpsNoAttack, $01
0008FAC8 E108                       	smpsAlterNote       $08
0008FACA E701                       	dc.b	smpsNoAttack, $01
0008FACC E109                       	smpsAlterNote       $09
0008FACE E701                       	dc.b	smpsNoAttack, $01
0008FAD0 E10F                       	smpsAlterNote       $0F
0008FAD2 E701                       	dc.b	smpsNoAttack, $01
0008FAD4 E113                       	smpsAlterNote       $13
0008FAD6 E701                       	dc.b	smpsNoAttack, $01
0008FAD8 E10F                       	smpsAlterNote       $0F
0008FADA E701                       	dc.b	smpsNoAttack, $01
0008FADC E109                       	smpsAlterNote       $09
0008FADE E701                       	dc.b	smpsNoAttack, $01
0008FAE0 E108                       	smpsAlterNote       $08
0008FAE2 E701                       	dc.b	smpsNoAttack, $01
0008FAE4 E10C                       	smpsAlterNote       $0C
0008FAE6 E701                       	dc.b	smpsNoAttack, $01
0008FAE8 E112                       	smpsAlterNote       $12
0008FAEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAEE E10F                       	smpsAlterNote       $0F
0008FAF0 E701                       	dc.b	smpsNoAttack, $01
0008FAF2 E109                       	smpsAlterNote       $09
0008FAF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAF8 E10F                       	smpsAlterNote       $0F
0008FAFA E701                       	dc.b	smpsNoAttack, $01
0008FAFC E112                       	smpsAlterNote       $12
0008FAFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB02 E10C                       	smpsAlterNote       $0C
0008FB04 E701                       	dc.b	smpsNoAttack, $01
0008FB06 E108                       	smpsAlterNote       $08
0008FB08 E701                       	dc.b	smpsNoAttack, $01
0008FB0A E109                       	smpsAlterNote       $09
0008FB0C E701                       	dc.b	smpsNoAttack, $01
0008FB0E E10F                       	smpsAlterNote       $0F
0008FB10 E701                       	dc.b	smpsNoAttack, $01
0008FB12 E113                       	smpsAlterNote       $13
0008FB14 E701                       	dc.b	smpsNoAttack, $01
0008FB16 E10F                       	smpsAlterNote       $0F
0008FB18 E701                       	dc.b	smpsNoAttack, $01
0008FB1A E10C                       	smpsAlterNote       $0C
0008FB1C E701                       	dc.b	smpsNoAttack, $01
0008FB1E E108                       	smpsAlterNote       $08
0008FB20 E701                       	dc.b	smpsNoAttack, $01
0008FB22 E109                       	smpsAlterNote       $09
0008FB24 8001                       	dc.b	nRst, $01
0008FB26 E10C                       	smpsAlterNote       $0C
0008FB28 B50A                       	dc.b	nE4, $0A
0008FB2A E10D                       	smpsAlterNote       $0D
0008FB2C B60D                       	dc.b	nF4, $0D
0008FB2E E10A                       	smpsAlterNote       $0A
0008FB30 E701                       	dc.b	smpsNoAttack, $01
0008FB32 E106                       	smpsAlterNote       $06
0008FB34 E701                       	dc.b	smpsNoAttack, $01
0008FB36 E107                       	smpsAlterNote       $07
0008FB38 E701                       	dc.b	smpsNoAttack, $01
0008FB3A E10D                       	smpsAlterNote       $0D
0008FB3C E701                       	dc.b	smpsNoAttack, $01
0008FB3E E111                       	smpsAlterNote       $11
0008FB40 E701                       	dc.b	smpsNoAttack, $01
0008FB42 E10D                       	smpsAlterNote       $0D
0008FB44 E701                       	dc.b	smpsNoAttack, $01
0008FB46 E10A                       	smpsAlterNote       $0A
0008FB48 E701                       	dc.b	smpsNoAttack, $01
0008FB4A E106                       	smpsAlterNote       $06
0008FB4C E701                       	dc.b	smpsNoAttack, $01
0008FB4E E10A                       	smpsAlterNote       $0A
0008FB50 E701                       	dc.b	smpsNoAttack, $01
0008FB52 E110                       	smpsAlterNote       $10
0008FB54 E701                       	dc.b	smpsNoAttack, $01
0008FB56 E111                       	smpsAlterNote       $11
0008FB58 E701                       	dc.b	smpsNoAttack, $01
0008FB5A E10D                       	smpsAlterNote       $0D
0008FB5C B80D                       	dc.b	nG4, $0D
0008FB5E E10A                       	smpsAlterNote       $0A
0008FB60 E701                       	dc.b	smpsNoAttack, $01
0008FB62 E106                       	smpsAlterNote       $06
0008FB64 E701                       	dc.b	smpsNoAttack, $01
0008FB66 E107                       	smpsAlterNote       $07
0008FB68 E701                       	dc.b	smpsNoAttack, $01
0008FB6A E10D                       	smpsAlterNote       $0D
0008FB6C E701                       	dc.b	smpsNoAttack, $01
0008FB6E E111                       	smpsAlterNote       $11
0008FB70 E701                       	dc.b	smpsNoAttack, $01
0008FB72 E10D                       	smpsAlterNote       $0D
0008FB74 E701                       	dc.b	smpsNoAttack, $01
0008FB76 E10A                       	smpsAlterNote       $0A
0008FB78 E701                       	dc.b	smpsNoAttack, $01
0008FB7A E106                       	smpsAlterNote       $06
0008FB7C E701                       	dc.b	smpsNoAttack, $01
0008FB7E E10A                       	smpsAlterNote       $0A
0008FB80 E701                       	dc.b	smpsNoAttack, $01
0008FB82 E110                       	smpsAlterNote       $10
0008FB84 E701                       	dc.b	smpsNoAttack, $01
0008FB86 E111                       	smpsAlterNote       $11
0008FB88 E701                       	dc.b	smpsNoAttack, $01
0008FB8A E10D                       	smpsAlterNote       $0D
0008FB8C E701                       	dc.b	smpsNoAttack, $01
0008FB8E E107                       	smpsAlterNote       $07
0008FB90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB94 E10A                       	smpsAlterNote       $0A
0008FB96 E701                       	dc.b	smpsNoAttack, $01
0008FB98 E110                       	smpsAlterNote       $10
0008FB9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB9E E10D                       	smpsAlterNote       $0D
0008FBA0 8001                       	dc.b	nRst, $01
0008FBA2 E10F                       	smpsAlterNote       $0F
0008FBA4 BA0D                       	dc.b	nA4, $0D
0008FBA6 E10C                       	smpsAlterNote       $0C
0008FBA8 E701                       	dc.b	smpsNoAttack, $01
0008FBAA E108                       	smpsAlterNote       $08
0008FBAC E701                       	dc.b	smpsNoAttack, $01
0008FBAE E10C                       	smpsAlterNote       $0C
0008FBB0 E701                       	dc.b	smpsNoAttack, $01
0008FBB2 E112                       	smpsAlterNote       $12
0008FBB4 E701                       	dc.b	smpsNoAttack, $01
0008FBB6 E113                       	smpsAlterNote       $13
0008FBB8 E701                       	dc.b	smpsNoAttack, $01
0008FBBA E10F                       	smpsAlterNote       $0F
0008FBBC E701                       	dc.b	smpsNoAttack, $01
0008FBBE E109                       	smpsAlterNote       $09
0008FBC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBC4 E10C                       	smpsAlterNote       $0C
0008FBC6 E701                       	dc.b	smpsNoAttack, $01
0008FBC8 E112                       	smpsAlterNote       $12
0008FBCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBCE E10C                       	smpsAlterNote       $0C
0008FBD0 E701                       	dc.b	smpsNoAttack, $01
0008FBD2 E109                       	smpsAlterNote       $09
0008FBD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBD8 E10F                       	smpsAlterNote       $0F
0008FBDA E701                       	dc.b	smpsNoAttack, $01
0008FBDC E113                       	smpsAlterNote       $13
0008FBDE E701                       	dc.b	smpsNoAttack, $01
0008FBE0 E112                       	smpsAlterNote       $12
0008FBE2 E701                       	dc.b	smpsNoAttack, $01
0008FBE4 E10C                       	smpsAlterNote       $0C
0008FBE6 E701                       	dc.b	smpsNoAttack, $01
0008FBE8 E108                       	smpsAlterNote       $08
0008FBEA E701                       	dc.b	smpsNoAttack, $01
0008FBEC E10C                       	smpsAlterNote       $0C
0008FBEE E701                       	dc.b	smpsNoAttack, $01
0008FBF0 E10F                       	smpsAlterNote       $0F
0008FBF2 E701                       	dc.b	smpsNoAttack, $01
0008FBF4 E113                       	smpsAlterNote       $13
0008FBF6 E701                       	dc.b	smpsNoAttack, $01
0008FBF8 E10F                       	smpsAlterNote       $0F
0008FBFA E701                       	dc.b	smpsNoAttack, $01
0008FBFC E109                       	smpsAlterNote       $09
0008FBFE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FC02 E10D                       	smpsAlterNote       $0D
0008FC04 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008FC08 E10C                       	smpsAlterNote       $0C
0008FC0A B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FC0E E10B                       	smpsAlterNote       $0B
0008FC10 B30D                       	dc.b	nD4, $0D
0008FC12 E10C                       	smpsAlterNote       $0C
0008FC14 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008FC18 E10D                       	smpsAlterNote       $0D
0008FC1A B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008FC22 E109                       	smpsAlterNote       $09
0008FC24 E701                       	dc.b	smpsNoAttack, $01
0008FC26 E108                       	smpsAlterNote       $08
0008FC28 E701                       	dc.b	smpsNoAttack, $01
0008FC2A E10C                       	smpsAlterNote       $0C
0008FC2C E701                       	dc.b	smpsNoAttack, $01
0008FC2E E112                       	smpsAlterNote       $12
0008FC30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC34 E10F                       	smpsAlterNote       $0F
0008FC36 E701                       	dc.b	smpsNoAttack, $01
0008FC38 E109                       	smpsAlterNote       $09
0008FC3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC3E E10F                       	smpsAlterNote       $0F
0008FC40 E701                       	dc.b	smpsNoAttack, $01
0008FC42 E112                       	smpsAlterNote       $12
0008FC44 E701                       	dc.b	smpsNoAttack, $01
0008FC46 E113                       	smpsAlterNote       $13
0008FC48 8001                       	dc.b	nRst, $01
0008FC4A E10D                       	smpsAlterNote       $0D
0008FC4C C20D                       	dc.b	nF5, $0D
0008FC4E E107                       	smpsAlterNote       $07
0008FC50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC54 E10A                       	smpsAlterNote       $0A
0008FC56 E701                       	dc.b	smpsNoAttack, $01
0008FC58 E110                       	smpsAlterNote       $10
0008FC5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC5E E10A                       	smpsAlterNote       $0A
0008FC60 E701                       	dc.b	smpsNoAttack, $01
0008FC62 E107                       	smpsAlterNote       $07
0008FC64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC68 E10D                       	smpsAlterNote       $0D
0008FC6A E701                       	dc.b	smpsNoAttack, $01
0008FC6C E111                       	smpsAlterNote       $11
0008FC6E E701                       	dc.b	smpsNoAttack, $01
0008FC70 E110                       	smpsAlterNote       $10
0008FC72 E701                       	dc.b	smpsNoAttack, $01
0008FC74 E10A                       	smpsAlterNote       $0A
0008FC76 E701                       	dc.b	smpsNoAttack, $01
0008FC78 E106                       	smpsAlterNote       $06
0008FC7A E701                       	dc.b	smpsNoAttack, $01
0008FC7C E10A                       	smpsAlterNote       $0A
0008FC7E E701                       	dc.b	smpsNoAttack, $01
0008FC80 E10D                       	smpsAlterNote       $0D
0008FC82 E701                       	dc.b	smpsNoAttack, $01
0008FC84 E111                       	smpsAlterNote       $11
0008FC86 E701                       	dc.b	smpsNoAttack, $01
0008FC88 E10D                       	smpsAlterNote       $0D
0008FC8A E701                       	dc.b	smpsNoAttack, $01
0008FC8C E107                       	smpsAlterNote       $07
0008FC8E E701                       	dc.b	smpsNoAttack, $01
0008FC90 E106                       	smpsAlterNote       $06
0008FC92 E701                       	dc.b	smpsNoAttack, $01
0008FC94 E10A                       	smpsAlterNote       $0A
0008FC96 E701                       	dc.b	smpsNoAttack, $01
0008FC98 E110                       	smpsAlterNote       $10
0008FC9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC9E E10D                       	smpsAlterNote       $0D
0008FCA0 E701                       	dc.b	smpsNoAttack, $01
0008FCA2 E107                       	smpsAlterNote       $07
0008FCA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCA8 E10D                       	smpsAlterNote       $0D
0008FCAA E701                       	dc.b	smpsNoAttack, $01
0008FCAC E110                       	smpsAlterNote       $10
0008FCAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCB2 E10A                       	smpsAlterNote       $0A
0008FCB4 E701                       	dc.b	smpsNoAttack, $01
0008FCB6 E106                       	smpsAlterNote       $06
0008FCB8 E701                       	dc.b	smpsNoAttack, $01
0008FCBA E107                       	smpsAlterNote       $07
0008FCBC E701                       	dc.b	smpsNoAttack, $01
0008FCBE E10D                       	smpsAlterNote       $0D
0008FCC0 E701                       	dc.b	smpsNoAttack, $01
0008FCC2 E111                       	smpsAlterNote       $11
0008FCC4 E701                       	dc.b	smpsNoAttack, $01
0008FCC6 E10D                       	smpsAlterNote       $0D
0008FCC8 E701                       	dc.b	smpsNoAttack, $01
0008FCCA E10A                       	smpsAlterNote       $0A
0008FCCC E701                       	dc.b	smpsNoAttack, $01
0008FCCE E106                       	smpsAlterNote       $06
0008FCD0 E701                       	dc.b	smpsNoAttack, $01
0008FCD2 E10A                       	smpsAlterNote       $0A
0008FCD4 E701                       	dc.b	smpsNoAttack, $01
0008FCD6 E110                       	smpsAlterNote       $10
0008FCD8 E701                       	dc.b	smpsNoAttack, $01
0008FCDA E111                       	smpsAlterNote       $11
0008FCDC E701                       	dc.b	smpsNoAttack, $01
0008FCDE E10D                       	smpsAlterNote       $0D
0008FCE0 E701                       	dc.b	smpsNoAttack, $01
0008FCE2 E107                       	smpsAlterNote       $07
0008FCE4 E701                       	dc.b	smpsNoAttack, $01
0008FCE6 E10D                       	smpsAlterNote       $0D
0008FCE8 C207                       	dc.b	nF5, $07
0008FCEA E10C                       	smpsAlterNote       $0C
0008FCEC C10D                       	dc.b	nE5, $0D
0008FCEE E109                       	smpsAlterNote       $09
0008FCF0 E701                       	dc.b	smpsNoAttack, $01
0008FCF2 E106                       	smpsAlterNote       $06
0008FCF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCF8 E10C                       	smpsAlterNote       $0C
0008FCFA E701                       	dc.b	smpsNoAttack, $01
0008FCFC E110                       	smpsAlterNote       $10
0008FCFE E701                       	dc.b	smpsNoAttack, $01
0008FD00 E10F                       	smpsAlterNote       $0F
0008FD02 E701                       	dc.b	smpsNoAttack, $01
0008FD04 E109                       	smpsAlterNote       $09
0008FD06 E701                       	dc.b	smpsNoAttack, $01
0008FD08 E105                       	smpsAlterNote       $05
0008FD0A E701                       	dc.b	smpsNoAttack, $01
0008FD0C E109                       	smpsAlterNote       $09
0008FD0E E701                       	dc.b	smpsNoAttack, $01
0008FD10 E10C                       	smpsAlterNote       $0C
0008FD12 E701                       	dc.b	smpsNoAttack, $01
0008FD14 E110                       	smpsAlterNote       $10
0008FD16 E701                       	dc.b	smpsNoAttack, $01
0008FD18 E10B                       	smpsAlterNote       $0B
0008FD1A BF0D                       	dc.b	nD5, $0D
0008FD1C E108                       	smpsAlterNote       $08
0008FD1E E701                       	dc.b	smpsNoAttack, $01
0008FD20 E105                       	smpsAlterNote       $05
0008FD22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD26 E10B                       	smpsAlterNote       $0B
0008FD28 E701                       	dc.b	smpsNoAttack, $01
0008FD2A E10F                       	smpsAlterNote       $0F
0008FD2C E701                       	dc.b	smpsNoAttack, $01
0008FD2E E10E                       	smpsAlterNote       $0E
0008FD30 E701                       	dc.b	smpsNoAttack, $01
0008FD32 E108                       	smpsAlterNote       $08
0008FD34 E701                       	dc.b	smpsNoAttack, $01
0008FD36 E104                       	smpsAlterNote       $04
0008FD38 E701                       	dc.b	smpsNoAttack, $01
0008FD3A E108                       	smpsAlterNote       $08
0008FD3C E701                       	dc.b	smpsNoAttack, $01
0008FD3E E10E                       	smpsAlterNote       $0E
0008FD40 E701                       	dc.b	smpsNoAttack, $01
0008FD42 E10F                       	smpsAlterNote       $0F
0008FD44 E701                       	dc.b	smpsNoAttack, $01
0008FD46 E10B                       	smpsAlterNote       $0B
0008FD48 E701                       	dc.b	smpsNoAttack, $01
0008FD4A E105                       	smpsAlterNote       $05
0008FD4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD50 E108                       	smpsAlterNote       $08
0008FD52 E701                       	dc.b	smpsNoAttack, $01
0008FD54 E10E                       	smpsAlterNote       $0E
0008FD56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD5A E108                       	smpsAlterNote       $08
0008FD5C E701                       	dc.b	smpsNoAttack, $01
0008FD5E E105                       	smpsAlterNote       $05
0008FD60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD64 E10B                       	smpsAlterNote       $0B
0008FD66 E701                       	dc.b	smpsNoAttack, $01
0008FD68 E10F                       	smpsAlterNote       $0F
0008FD6A E701                       	dc.b	smpsNoAttack, $01
0008FD6C E10E                       	smpsAlterNote       $0E
0008FD6E E701                       	dc.b	smpsNoAttack, $01
0008FD70 E108                       	smpsAlterNote       $08
0008FD72 E701                       	dc.b	smpsNoAttack, $01
0008FD74 E104                       	smpsAlterNote       $04
0008FD76 E701                       	dc.b	smpsNoAttack, $01
0008FD78 E108                       	smpsAlterNote       $08
0008FD7A E701                       	dc.b	smpsNoAttack, $01
0008FD7C E10B                       	smpsAlterNote       $0B
0008FD7E E701                       	dc.b	smpsNoAttack, $01
0008FD80 E10F                       	smpsAlterNote       $0F
0008FD82 E701                       	dc.b	smpsNoAttack, $01
0008FD84 E10B                       	smpsAlterNote       $0B
0008FD86 E701                       	dc.b	smpsNoAttack, $01
0008FD88 E105                       	smpsAlterNote       $05
0008FD8A E701                       	dc.b	smpsNoAttack, $01
0008FD8C E104                       	smpsAlterNote       $04
0008FD8E E701                       	dc.b	smpsNoAttack, $01
0008FD90 E108                       	smpsAlterNote       $08
0008FD92 E701                       	dc.b	smpsNoAttack, $01
0008FD94 E10E                       	smpsAlterNote       $0E
0008FD96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD9A E10B                       	smpsAlterNote       $0B
0008FD9C E701                       	dc.b	smpsNoAttack, $01
0008FD9E E105                       	smpsAlterNote       $05
0008FDA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDA4 E10B                       	smpsAlterNote       $0B
0008FDA6 E701                       	dc.b	smpsNoAttack, $01
0008FDA8 E10E                       	smpsAlterNote       $0E
0008FDAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDAE E108                       	smpsAlterNote       $08
0008FDB0 E701                       	dc.b	smpsNoAttack, $01
0008FDB2 E105                       	smpsAlterNote       $05
0008FDB4 8001                       	dc.b	nRst, $01
0008FDB8 E601                       	smpsAlterVol        $01
0008FDBA E10B                       	smpsAlterNote       $0B
0008FDBC BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008FDC8 8004                       	dc.b	nRst, $04
0008FDCC E6FF                       	smpsAlterVol        $FF
0008FDCE E10D                       	smpsAlterNote       $0D
0008FDD0 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008FDD8 E10C                       	smpsAlterNote       $0C
0008FDDA E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008FDDF E10D                       	smpsAlterNote       $0D
0008FDE1 B60D                       	dc.b	nF4, $0D
0008FDE3 E10A                       	smpsAlterNote       $0A
0008FDE5 E701                       	dc.b	smpsNoAttack, $01
0008FDE7 E106                       	smpsAlterNote       $06
0008FDE9 E701                       	dc.b	smpsNoAttack, $01
0008FDEB E10A                       	smpsAlterNote       $0A
0008FDED E701                       	dc.b	smpsNoAttack, $01
0008FDEF E110                       	smpsAlterNote       $10
0008FDF1 E701                       	dc.b	smpsNoAttack, $01
0008FDF3 E111                       	smpsAlterNote       $11
0008FDF5 E701                       	dc.b	smpsNoAttack, $01
0008FDF7 E10D                       	smpsAlterNote       $0D
0008FDF9 E701                       	dc.b	smpsNoAttack, $01
0008FDFB E107                       	smpsAlterNote       $07
0008FDFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE01 E10A                       	smpsAlterNote       $0A
0008FE03 E701                       	dc.b	smpsNoAttack, $01
0008FE05 E110                       	smpsAlterNote       $10
0008FE07 E701                       	dc.b	smpsNoAttack, $01
0008FE09 E111                       	smpsAlterNote       $11
0008FE0B 8001                       	dc.b	nRst, $01
0008FE0D E10D                       	smpsAlterNote       $0D
0008FE0F B80D                       	dc.b	nG4, $0D
0008FE11 E10A                       	smpsAlterNote       $0A
0008FE13 E701                       	dc.b	smpsNoAttack, $01
0008FE15 E106                       	smpsAlterNote       $06
0008FE17 E701                       	dc.b	smpsNoAttack, $01
0008FE19 E10A                       	smpsAlterNote       $0A
0008FE1B E701                       	dc.b	smpsNoAttack, $01
0008FE1D E110                       	smpsAlterNote       $10
0008FE1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE23 E10D                       	smpsAlterNote       $0D
0008FE25 E701                       	dc.b	smpsNoAttack, $01
0008FE27 E107                       	smpsAlterNote       $07
0008FE29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE2D E10D                       	smpsAlterNote       $0D
0008FE2F E701                       	dc.b	smpsNoAttack, $01
0008FE31 E110                       	smpsAlterNote       $10
0008FE33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE37 E10A                       	smpsAlterNote       $0A
0008FE39 E701                       	dc.b	smpsNoAttack, $01
0008FE3B E106                       	smpsAlterNote       $06
0008FE3D E701                       	dc.b	smpsNoAttack, $01
0008FE3F E107                       	smpsAlterNote       $07
0008FE41 E701                       	dc.b	smpsNoAttack, $01
0008FE43 E10D                       	smpsAlterNote       $0D
0008FE45 E701                       	dc.b	smpsNoAttack, $01
0008FE47 E111                       	smpsAlterNote       $11
0008FE49 E701                       	dc.b	smpsNoAttack, $01
0008FE4B E10D                       	smpsAlterNote       $0D
0008FE4D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FE51 E10F                       	smpsAlterNote       $0F
0008FE53 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008FE57 E110                       	smpsAlterNote       $10
0008FE59 BB03                       	dc.b	nBb4, $03
0008FE5B E10F                       	smpsAlterNote       $0F
0008FE5D BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008FE63 E110                       	smpsAlterNote       $10
0008FE65 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008FE69 E10F                       	smpsAlterNote       $0F
0008FE6B C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008FE71 E110                       	smpsAlterNote       $10
0008FE73 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008FE77 E10F                       	smpsAlterNote       $0F
0008FE79 D20D                       	dc.b	nA6, $0D
0008FE7B E10C                       	smpsAlterNote       $0C
0008FE7D E701                       	dc.b	smpsNoAttack, $01
0008FE7F E108                       	smpsAlterNote       $08
0008FE81 E701                       	dc.b	smpsNoAttack, $01
0008FE83 E10C                       	smpsAlterNote       $0C
0008FE85 E701                       	dc.b	smpsNoAttack, $01
0008FE87 E10F                       	smpsAlterNote       $0F
0008FE89 E701                       	dc.b	smpsNoAttack, $01
0008FE8B E113                       	smpsAlterNote       $13
0008FE8D E701                       	dc.b	smpsNoAttack, $01
0008FE8F E10F                       	smpsAlterNote       $0F
0008FE91 E701                       	dc.b	smpsNoAttack, $01
0008FE93 E109                       	smpsAlterNote       $09
0008FE95 E701                       	dc.b	smpsNoAttack, $01
0008FE97 E108                       	smpsAlterNote       $08
0008FE99 E701                       	dc.b	smpsNoAttack, $01
0008FE9B E10C                       	smpsAlterNote       $0C
0008FE9D E701                       	dc.b	smpsNoAttack, $01
0008FE9F E112                       	smpsAlterNote       $12
0008FEA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEA5 E10F                       	smpsAlterNote       $0F
0008FEA7 E701                       	dc.b	smpsNoAttack, $01
0008FEA9 E109                       	smpsAlterNote       $09
0008FEAB E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008FEB1 E10D                       	smpsAlterNote       $0D
0008FEB3 CE07                       	dc.b	nF6, $07
0008FEB5 E10C                       	smpsAlterNote       $0C
0008FEB7 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008FEBB E10D                       	smpsAlterNote       $0D
0008FEBD CE03                       	dc.b	nF6, $03
0008FEBF E10C                       	smpsAlterNote       $0C
0008FEC1 CC0D                       	dc.b	nEb6, $0D
0008FEC3 E109                       	smpsAlterNote       $09
0008FEC5 E701                       	dc.b	smpsNoAttack, $01
0008FEC7 E106                       	smpsAlterNote       $06
0008FEC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FECD E10C                       	smpsAlterNote       $0C
0008FECF E701                       	dc.b	smpsNoAttack, $01
0008FED1 E110                       	smpsAlterNote       $10
0008FED3 E701                       	dc.b	smpsNoAttack, $01
0008FED5 E10F                       	smpsAlterNote       $0F
0008FED7 E701                       	dc.b	smpsNoAttack, $01
0008FED9 E109                       	smpsAlterNote       $09
0008FEDB E701                       	dc.b	smpsNoAttack, $01
0008FEDD E105                       	smpsAlterNote       $05
0008FEDF E701                       	dc.b	smpsNoAttack, $01
0008FEE1 E109                       	smpsAlterNote       $09
0008FEE3 E701                       	dc.b	smpsNoAttack, $01
0008FEE5 E10C                       	smpsAlterNote       $0C
0008FEE7 E701                       	dc.b	smpsNoAttack, $01
0008FEE9 E110                       	smpsAlterNote       $10
0008FEEB E701                       	dc.b	smpsNoAttack, $01
0008FEED E10C                       	smpsAlterNote       $0C
0008FEEF E701                       	dc.b	smpsNoAttack, $01
0008FEF1 E106                       	smpsAlterNote       $06
0008FEF3 E701                       	dc.b	smpsNoAttack, $01
0008FEF5 E105                       	smpsAlterNote       $05
0008FEF7 E701                       	dc.b	smpsNoAttack, $01
0008FEF9 E109                       	smpsAlterNote       $09
0008FEFB E701                       	dc.b	smpsNoAttack, $01
0008FEFD E10F                       	smpsAlterNote       $0F
0008FEFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF03 E10C                       	smpsAlterNote       $0C
0008FF05 E701                       	dc.b	smpsNoAttack, $01
0008FF07 E10B                       	smpsAlterNote       $0B
0008FF09 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008FF13 E10F                       	smpsAlterNote       $0F
0008FF15 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008FF1F E10D                       	smpsAlterNote       $0D
0008FF21 C203                       	dc.b	nF5, $03
0008FF23 E10C                       	smpsAlterNote       $0C
0008FF25 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008FF29 E10D                       	smpsAlterNote       $0D
0008FF2B C20D                       	dc.b	nF5, $0D
0008FF2D E10C                       	smpsAlterNote       $0C
0008FF2F C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008FF33 E10B                       	smpsAlterNote       $0B
0008FF35 BF0D                       	dc.b	nD5, $0D
0008FF37 E108                       	smpsAlterNote       $08
0008FF39 E701                       	dc.b	smpsNoAttack, $01
0008FF3B E104                       	smpsAlterNote       $04
0008FF3D E701                       	dc.b	smpsNoAttack, $01
0008FF3F E108                       	smpsAlterNote       $08
0008FF41 E701                       	dc.b	smpsNoAttack, $01
0008FF43 E10E                       	smpsAlterNote       $0E
0008FF45 E701                       	dc.b	smpsNoAttack, $01
0008FF47 E10F                       	smpsAlterNote       $0F
0008FF49 E701                       	dc.b	smpsNoAttack, $01
0008FF4B E10B                       	smpsAlterNote       $0B
0008FF4D E701                       	dc.b	smpsNoAttack, $01
0008FF4F E105                       	smpsAlterNote       $05
0008FF51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF55 E108                       	smpsAlterNote       $08
0008FF57 E701                       	dc.b	smpsNoAttack, $01
0008FF59 E10E                       	smpsAlterNote       $0E
0008FF5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF5F E108                       	smpsAlterNote       $08
0008FF61 E701                       	dc.b	smpsNoAttack, $01
0008FF63 E105                       	smpsAlterNote       $05
0008FF65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF69 E10B                       	smpsAlterNote       $0B
0008FF6B E701                       	dc.b	smpsNoAttack, $01
0008FF6D E10F                       	smpsAlterNote       $0F
0008FF6F E701                       	dc.b	smpsNoAttack, $01
0008FF71 E10E                       	smpsAlterNote       $0E
0008FF73 E701                       	dc.b	smpsNoAttack, $01
0008FF75 E108                       	smpsAlterNote       $08
0008FF77 E701                       	dc.b	smpsNoAttack, $01
0008FF79 E104                       	smpsAlterNote       $04
0008FF7B E701                       	dc.b	smpsNoAttack, $01
0008FF7D E108                       	smpsAlterNote       $08
0008FF7F E701                       	dc.b	smpsNoAttack, $01
0008FF81 E10B                       	smpsAlterNote       $0B
0008FF83 E701                       	dc.b	smpsNoAttack, $01
0008FF85 E10F                       	smpsAlterNote       $0F
0008FF87 E701                       	dc.b	smpsNoAttack, $01
0008FF89 E10B                       	smpsAlterNote       $0B
0008FF8B E701                       	dc.b	smpsNoAttack, $01
0008FF8D E105                       	smpsAlterNote       $05
0008FF8F E701                       	dc.b	smpsNoAttack, $01
0008FF91 E104                       	smpsAlterNote       $04
0008FF93 E701                       	dc.b	smpsNoAttack, $01
0008FF95 E108                       	smpsAlterNote       $08
0008FF97 E701                       	dc.b	smpsNoAttack, $01
0008FF99 E10E                       	smpsAlterNote       $0E
0008FF9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF9F E10B                       	smpsAlterNote       $0B
0008FFA1 E701                       	dc.b	smpsNoAttack, $01
0008FFA3 E105                       	smpsAlterNote       $05
0008FFA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFA9 E10B                       	smpsAlterNote       $0B
0008FFAB E701                       	dc.b	smpsNoAttack, $01
0008FFAD E10E                       	smpsAlterNote       $0E
0008FFAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFB3 E108                       	smpsAlterNote       $08
0008FFB5 E701                       	dc.b	smpsNoAttack, $01
0008FFB7 E104                       	smpsAlterNote       $04
0008FFB9 E701                       	dc.b	smpsNoAttack, $01
0008FFBB E105                       	smpsAlterNote       $05
0008FFBD E701                       	dc.b	smpsNoAttack, $01
0008FFBF E10B                       	smpsAlterNote       $0B
0008FFC1 E701                       	dc.b	smpsNoAttack, $01
0008FFC3 E10F                       	smpsAlterNote       $0F
0008FFC5 E701                       	dc.b	smpsNoAttack, $01
0008FFC7 E10B                       	smpsAlterNote       $0B
0008FFC9 E701                       	dc.b	smpsNoAttack, $01
0008FFCB E108                       	smpsAlterNote       $08
0008FFCD E701                       	dc.b	smpsNoAttack, $01
0008FFCF E104                       	smpsAlterNote       $04
0008FFD1 E701                       	dc.b	smpsNoAttack, $01
0008FFD3 E108                       	smpsAlterNote       $08
0008FFD5 E701                       	dc.b	smpsNoAttack, $01
0008FFD7 E10E                       	smpsAlterNote       $0E
0008FFD9 E701                       	dc.b	smpsNoAttack, $01
0008FFDB E10F                       	smpsAlterNote       $0F
0008FFDD E701                       	dc.b	smpsNoAttack, $01
0008FFDF E10B                       	smpsAlterNote       $0B
0008FFE1 E701                       	dc.b	smpsNoAttack, $01
0008FFE3 E105                       	smpsAlterNote       $05
0008FFE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFE9 E108                       	smpsAlterNote       $08
0008FFEB E701                       	dc.b	smpsNoAttack, $01
0008FFED E10E                       	smpsAlterNote       $0E
0008FFEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFF3 E108                       	smpsAlterNote       $08
0008FFF5 E701                       	dc.b	smpsNoAttack, $01
0008FFF7 E105                       	smpsAlterNote       $05
0008FFF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFFD E10B                       	smpsAlterNote       $0B
0008FFFF E701                       	dc.b	smpsNoAttack, $01
00090001 E10F                       	smpsAlterNote       $0F
00090003 E701                       	dc.b	smpsNoAttack, $01
00090005 E10E                       	smpsAlterNote       $0E
00090007 E701                       	dc.b	smpsNoAttack, $01
00090009 E108                       	smpsAlterNote       $08
0009000B E701                       	dc.b	smpsNoAttack, $01
0009000D E104                       	smpsAlterNote       $04
0009000F E701                       	dc.b	smpsNoAttack, $01
00090011 E108                       	smpsAlterNote       $08
00090013 E701                       	dc.b	smpsNoAttack, $01
00090015 E10B                       	smpsAlterNote       $0B
00090017 E701                       	dc.b	smpsNoAttack, $01
00090019 E10F                       	smpsAlterNote       $0F
0009001B E701                       	dc.b	smpsNoAttack, $01
0009001D E10B                       	smpsAlterNote       $0B
0009001F E701                       	dc.b	smpsNoAttack, $01
00090021 E105                       	smpsAlterNote       $05
00090023 E701                       	dc.b	smpsNoAttack, $01
00090025 E104                       	smpsAlterNote       $04
00090027 E701                       	dc.b	smpsNoAttack, $01
00090029 E105                       	smpsAlterNote       $05
0009002B 8001                       	dc.b	nRst, $01
0009002D E10D                       	smpsAlterNote       $0D
0009002F C20D                       	dc.b	nF5, $0D
00090031 E107                       	smpsAlterNote       $07
00090033 E701                       	dc.b	smpsNoAttack, $01
00090035 E106                       	smpsAlterNote       $06
00090037 E701                       	dc.b	smpsNoAttack, $01
00090039 E10A                       	smpsAlterNote       $0A
0009003B E701                       	dc.b	smpsNoAttack, $01
0009003D E110                       	smpsAlterNote       $10
0009003F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090043 E10D                       	smpsAlterNote       $0D
00090045 E701                       	dc.b	smpsNoAttack, $01
00090047 E107                       	smpsAlterNote       $07
00090049 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009004D E10D                       	smpsAlterNote       $0D
0009004F E701                       	dc.b	smpsNoAttack, $01
00090051 E110                       	smpsAlterNote       $10
00090053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090057 E10A                       	smpsAlterNote       $0A
00090059 E701                       	dc.b	smpsNoAttack, $01
0009005B E106                       	smpsAlterNote       $06
0009005D E701                       	dc.b	smpsNoAttack, $01
0009005F E107                       	smpsAlterNote       $07
00090061 E701                       	dc.b	smpsNoAttack, $01
00090063 E10D                       	smpsAlterNote       $0D
00090065 E701                       	dc.b	smpsNoAttack, $01
00090067 E111                       	smpsAlterNote       $11
00090069 E701                       	dc.b	smpsNoAttack, $01
0009006B E10D                       	smpsAlterNote       $0D
0009006D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090071 E10C                       	smpsAlterNote       $0C
00090073 C10D                       	dc.b	nE5, $0D
00090075 E10D                       	smpsAlterNote       $0D
00090077 C20A                       	dc.b	nF5, $0A
00090079 E10C                       	smpsAlterNote       $0C
0009007B C10E                       	dc.b	nE5, $0E
0009007D E106                       	smpsAlterNote       $06
0009007F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090083 E10C                       	smpsAlterNote       $0C
00090085 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090089 E10B                       	smpsAlterNote       $0B
0009008B BF0D                       	dc.b	nD5, $0D
0009008D E10C                       	smpsAlterNote       $0C
0009008F C107                       	dc.b	nE5, $07
00090091 E10D                       	smpsAlterNote       $0D
00090093 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0009009D E110                       	smpsAlterNote       $10
0009009F C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000900A5 E10F                       	smpsAlterNote       $0F
000900A7 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
000900AF E10D                       	smpsAlterNote       $0D
000900B1 D003                       	dc.b	nG6, $03
000900B5 E0C0                       	smpsPan             panCenter, $00
000900B7 E6FF                       	smpsAlterVol        $FF
000900B9 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
000900C5 8001                       	dc.b	nRst, $01
000900C7 E10C                       	smpsAlterNote       $0C
000900C9 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000900D3 E604                       	smpsAlterVol        $04
000900D5 E10B                       	smpsAlterNote       $0B
000900D7 B306 8001                  	dc.b	nD4, $06, nRst, $01
000900DB E10F                       	smpsAlterNote       $0F
000900DD AE03                       	dc.b	nA3, $03
000900DF E10D                       	smpsAlterNote       $0D
000900E1 B603 8001                  	dc.b	nF4, $03, nRst, $01
000900E5 E10C                       	smpsAlterNote       $0C
000900E7 B506 8001                  	dc.b	nE4, $06, nRst, $01
000900EB E10B                       	smpsAlterNote       $0B
000900ED B302 8001                  	dc.b	nD4, $02, nRst, $01
000900F1 E10A                       	smpsAlterNote       $0A
000900F3 B103                       	dc.b	nC4, $03
000900F5 E110                       	smpsAlterNote       $10
000900F7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000900FB E10F                       	smpsAlterNote       $0F
000900FD AE03 800A                  	dc.b	nA3, $03, nRst, $0A
00090101 E080                       	smpsPan             panLeft, $00
00090103 01                         	dc.b	$01
00090106 E6FB                       	smpsAlterVol        $FB
00090108 E1E4                       	smpsAlterNote       $E4
0009010A C501                       	dc.b	nAb5, $01
0009010C E1F4                       	smpsAlterNote       $F4
0009010E E701                       	dc.b	smpsNoAttack, $01
00090110 E104                       	smpsAlterNote       $04
00090112 E701                       	dc.b	smpsNoAttack, $01
00090114 E114                       	smpsAlterNote       $14
00090116 E701                       	dc.b	smpsNoAttack, $01
00090118 E11C                       	smpsAlterNote       $1C
0009011A E701                       	dc.b	smpsNoAttack, $01
0009011C E1EF                       	smpsAlterNote       $EF
0009011E E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00090121 E1FF                       	smpsAlterNote       $FF
00090123 E701                       	dc.b	smpsNoAttack, $01
00090125 E10F                       	smpsAlterNote       $0F
00090127 C606                       	dc.b	nA5, $06
00090129 E109                       	smpsAlterNote       $09
0009012B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009012F E10F                       	smpsAlterNote       $0F
00090131 E701                       	dc.b	smpsNoAttack, $01
00090133 E112                       	smpsAlterNote       $12
00090135 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090139 E10C                       	smpsAlterNote       $0C
0009013B E701                       	dc.b	smpsNoAttack, $01
0009013D E108                       	smpsAlterNote       $08
0009013F E701                       	dc.b	smpsNoAttack, $01
00090141 E109                       	smpsAlterNote       $09
00090143 E701                       	dc.b	smpsNoAttack, $01
00090145 E10F                       	smpsAlterNote       $0F
00090147 E701                       	dc.b	smpsNoAttack, $01
00090149 E113                       	smpsAlterNote       $13
0009014B E701                       	dc.b	smpsNoAttack, $01
0009014D E10F                       	smpsAlterNote       $0F
0009014F E701                       	dc.b	smpsNoAttack, $01
00090151 E10C                       	smpsAlterNote       $0C
00090153 E701                       	dc.b	smpsNoAttack, $01
00090155 E108                       	smpsAlterNote       $08
00090157 E701                       	dc.b	smpsNoAttack, $01
00090159 E10C                       	smpsAlterNote       $0C
0009015B E701                       	dc.b	smpsNoAttack, $01
0009015D E112                       	smpsAlterNote       $12
0009015F E701                       	dc.b	smpsNoAttack, $01
00090161 E113                       	smpsAlterNote       $13
00090163 E701                       	dc.b	smpsNoAttack, $01
00090165 E10F                       	smpsAlterNote       $0F
00090167 E701                       	dc.b	smpsNoAttack, $01
00090169 E109                       	smpsAlterNote       $09
0009016B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009016F E10C                       	smpsAlterNote       $0C
00090171 E701                       	dc.b	smpsNoAttack, $01
00090173 E112                       	smpsAlterNote       $12
00090175 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090179 E10C                       	smpsAlterNote       $0C
0009017B E701                       	dc.b	smpsNoAttack, $01
0009017D E109                       	smpsAlterNote       $09
0009017F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090183 E10F                       	smpsAlterNote       $0F
00090185 E701                       	dc.b	smpsNoAttack, $01
00090187 E113                       	smpsAlterNote       $13
00090189 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009018D E10D                       	smpsAlterNote       $0D
0009018F C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00090195 E10C                       	smpsAlterNote       $0C
00090197 C102 8001                  	dc.b	nE5, $02, nRst, $01
0009019B E10D                       	smpsAlterNote       $0D
0009019D C201 8001                  	dc.b	nF5, $01, nRst, $01
000901A1 E10C                       	smpsAlterNote       $0C
000901A3 C102                       	dc.b	nE5, $02
000901A5 E10B                       	smpsAlterNote       $0B
000901A7 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000901AB E10C                       	smpsAlterNote       $0C
000901AD C101 8001                  	dc.b	nE5, $01, nRst, $01
000901B1 E10B                       	smpsAlterNote       $0B
000901B3 BF02                       	dc.b	nD5, $02
000901B5 E10A                       	smpsAlterNote       $0A
000901B7 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000901C1 E110                       	smpsAlterNote       $10
000901C3 BB02                       	dc.b	nBb4, $02
000901C5 E10A                       	smpsAlterNote       $0A
000901C7 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000901CB E110                       	smpsAlterNote       $10
000901CD BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000901D1 E10F                       	smpsAlterNote       $0F
000901D3 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000901D7 E110                       	smpsAlterNote       $10
000901D9 BB02                       	dc.b	nBb4, $02
000901DB E10F                       	smpsAlterNote       $0F
000901DD BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000901E7 E10C                       	smpsAlterNote       $0C
000901E9 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000901F1 E10B                       	smpsAlterNote       $0B
000901F3 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000901F7 E10F                       	smpsAlterNote       $0F
000901F9 BA02                       	dc.b	nA4, $02
000901FD E0C0                       	smpsPan             panCenter, $00
000901FF E601                       	smpsAlterVol        $01
00090201 E109                       	smpsAlterNote       $09
00090203 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0009020F E108                       	smpsAlterNote       $08
00090211 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
00090217 E107                       	smpsAlterNote       $07
00090219 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0009021F E109                       	smpsAlterNote       $09
00090221 B603 8001                  	dc.b	nF4, $03, nRst, $01
00090225 E108                       	smpsAlterNote       $08
00090227 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009022B E107                       	smpsAlterNote       $07
0009022D B302 8001                  	dc.b	nD4, $02, nRst, $01
00090231 E106                       	smpsAlterNote       $06
00090233 B103                       	dc.b	nC4, $03
00090235 E10C                       	smpsAlterNote       $0C
00090237 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009023D E080                       	smpsPan             panLeft, $00
0009023F 07                         	dc.b	$07
00090240 E6FE                       	smpsAlterVol        $FE
00090242 E10B                       	smpsAlterNote       $0B
00090244 B20D                       	dc.b	nCs4, $0D
00090246 E105                       	smpsAlterNote       $05
00090248 E701                       	dc.b	smpsNoAttack, $01
0009024A E104                       	smpsAlterNote       $04
0009024C E701                       	dc.b	smpsNoAttack, $01
0009024E E108                       	smpsAlterNote       $08
00090250 E701                       	dc.b	smpsNoAttack, $01
00090252 E10E                       	smpsAlterNote       $0E
00090254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090258 E10B                       	smpsAlterNote       $0B
0009025A E701                       	dc.b	smpsNoAttack, $01
0009025C E105                       	smpsAlterNote       $05
0009025E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090262 E10B                       	smpsAlterNote       $0B
00090264 E701                       	dc.b	smpsNoAttack, $01
00090266 E10E                       	smpsAlterNote       $0E
00090268 E701                       	dc.b	smpsNoAttack, $01
0009026A E10F                       	smpsAlterNote       $0F
0009026C 8001                       	dc.b	nRst, $01
0009026E E10B                       	smpsAlterNote       $0B
00090270 B30D                       	dc.b	nD4, $0D
00090272 E105                       	smpsAlterNote       $05
00090274 E701                       	dc.b	smpsNoAttack, $01
00090276 E104                       	smpsAlterNote       $04
00090278 E701                       	dc.b	smpsNoAttack, $01
0009027A E108                       	smpsAlterNote       $08
0009027C E701                       	dc.b	smpsNoAttack, $01
0009027E E10E                       	smpsAlterNote       $0E
00090280 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090284 E10B                       	smpsAlterNote       $0B
00090286 E701                       	dc.b	smpsNoAttack, $01
00090288 E105                       	smpsAlterNote       $05
0009028A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009028E E10B                       	smpsAlterNote       $0B
00090290 E701                       	dc.b	smpsNoAttack, $01
00090292 E10E                       	smpsAlterNote       $0E
00090294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090298 E108                       	smpsAlterNote       $08
0009029A E701                       	dc.b	smpsNoAttack, $01
0009029C E104                       	smpsAlterNote       $04
0009029E E701                       	dc.b	smpsNoAttack, $01
000902A0 E105                       	smpsAlterNote       $05
000902A2 E701                       	dc.b	smpsNoAttack, $01
000902A4 E10B                       	smpsAlterNote       $0B
000902A6 E701                       	dc.b	smpsNoAttack, $01
000902A8 E10F                       	smpsAlterNote       $0F
000902AA E701                       	dc.b	smpsNoAttack, $01
000902AC E10B                       	smpsAlterNote       $0B
000902AE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000902B2 E10C                       	smpsAlterNote       $0C
000902B4 B50D                       	dc.b	nE4, $0D
000902B6 E106                       	smpsAlterNote       $06
000902B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902BC E10C                       	smpsAlterNote       $0C
000902BE E701                       	dc.b	smpsNoAttack, $01
000902C0 E10F                       	smpsAlterNote       $0F
000902C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902C6 E109                       	smpsAlterNote       $09
000902C8 E701                       	dc.b	smpsNoAttack, $01
000902CA E105                       	smpsAlterNote       $05
000902CC E701                       	dc.b	smpsNoAttack, $01
000902CE E106                       	smpsAlterNote       $06
000902D0 E701                       	dc.b	smpsNoAttack, $01
000902D2 E10C                       	smpsAlterNote       $0C
000902D4 E701                       	dc.b	smpsNoAttack, $01
000902D6 E110                       	smpsAlterNote       $10
000902D8 E701                       	dc.b	smpsNoAttack, $01
000902DA E10B                       	smpsAlterNote       $0B
000902DC B30E                       	dc.b	nD4, $0E
000902DE E105                       	smpsAlterNote       $05
000902E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902E4 E10B                       	smpsAlterNote       $0B
000902E6 E701                       	dc.b	smpsNoAttack, $01
000902E8 E10E                       	smpsAlterNote       $0E
000902EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902EE E108                       	smpsAlterNote       $08
000902F0 E701                       	dc.b	smpsNoAttack, $01
000902F2 E104                       	smpsAlterNote       $04
000902F4 E701                       	dc.b	smpsNoAttack, $01
000902F6 E105                       	smpsAlterNote       $05
000902F8 E701                       	dc.b	smpsNoAttack, $01
000902FA E10B                       	smpsAlterNote       $0B
000902FC E701                       	dc.b	smpsNoAttack, $01
000902FE E10F                       	smpsAlterNote       $0F
00090300 E701                       	dc.b	smpsNoAttack, $01
00090302 E10B                       	smpsAlterNote       $0B
00090304 E701                       	dc.b	smpsNoAttack, $01
00090306 E108                       	smpsAlterNote       $08
00090308 E701                       	dc.b	smpsNoAttack, $01
0009030A E104                       	smpsAlterNote       $04
0009030C E701                       	dc.b	smpsNoAttack, $01
0009030E E108                       	smpsAlterNote       $08
00090310 E701                       	dc.b	smpsNoAttack, $01
00090312 E10E                       	smpsAlterNote       $0E
00090314 E701                       	dc.b	smpsNoAttack, $01
00090316 E10F                       	smpsAlterNote       $0F
00090318 E701                       	dc.b	smpsNoAttack, $01
0009031A E10B                       	smpsAlterNote       $0B
0009031C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00090320 E108                       	smpsAlterNote       $08
00090322 E701                       	dc.b	smpsNoAttack, $01
00090324 E105                       	smpsAlterNote       $05
00090326 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009032A E10B                       	smpsAlterNote       $0B
0009032C E701                       	dc.b	smpsNoAttack, $01
0009032E E10F                       	smpsAlterNote       $0F
00090330 E701                       	dc.b	smpsNoAttack, $01
00090332 E10E                       	smpsAlterNote       $0E
00090334 E701                       	dc.b	smpsNoAttack, $01
00090336 E108                       	smpsAlterNote       $08
00090338 E701                       	dc.b	smpsNoAttack, $01
0009033A E104                       	smpsAlterNote       $04
0009033C E701                       	dc.b	smpsNoAttack, $01
0009033E E108                       	smpsAlterNote       $08
00090340 E701                       	dc.b	smpsNoAttack, $01
00090342 E10B                       	smpsAlterNote       $0B
00090344 E701                       	dc.b	smpsNoAttack, $01
00090346 E10F                       	smpsAlterNote       $0F
00090348 E701                       	dc.b	smpsNoAttack, $01
0009034A E10B                       	smpsAlterNote       $0B
0009034C B30D                       	dc.b	nD4, $0D
0009034E E108                       	smpsAlterNote       $08
00090350 E701                       	dc.b	smpsNoAttack, $01
00090352 E105                       	smpsAlterNote       $05
00090354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090358 E10B                       	smpsAlterNote       $0B
0009035A E701                       	dc.b	smpsNoAttack, $01
0009035C E10F                       	smpsAlterNote       $0F
0009035E E701                       	dc.b	smpsNoAttack, $01
00090360 E10E                       	smpsAlterNote       $0E
00090362 E701                       	dc.b	smpsNoAttack, $01
00090364 E108                       	smpsAlterNote       $08
00090366 E701                       	dc.b	smpsNoAttack, $01
00090368 E104                       	smpsAlterNote       $04
0009036A E701                       	dc.b	smpsNoAttack, $01
0009036C E108                       	smpsAlterNote       $08
0009036E E701                       	dc.b	smpsNoAttack, $01
00090370 E10B                       	smpsAlterNote       $0B
00090372 E701                       	dc.b	smpsNoAttack, $01
00090374 E10F                       	smpsAlterNote       $0F
00090376 E701                       	dc.b	smpsNoAttack, $01
00090378 E10B                       	smpsAlterNote       $0B
0009037A E701                       	dc.b	smpsNoAttack, $01
0009037C E105                       	smpsAlterNote       $05
0009037E E701                       	dc.b	smpsNoAttack, $01
00090380 E104                       	smpsAlterNote       $04
00090382 E701                       	dc.b	smpsNoAttack, $01
00090384 E108                       	smpsAlterNote       $08
00090386 E701                       	dc.b	smpsNoAttack, $01
00090388 E10E                       	smpsAlterNote       $0E
0009038A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009038E E10B                       	smpsAlterNote       $0B
00090390 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00090394 E108                       	smpsAlterNote       $08
00090396 E701                       	dc.b	smpsNoAttack, $01
00090398 E104                       	smpsAlterNote       $04
0009039A E701                       	dc.b	smpsNoAttack, $01
0009039C E108                       	smpsAlterNote       $08
0009039E E701                       	dc.b	smpsNoAttack, $01
000903A0 E10B                       	smpsAlterNote       $0B
000903A2 E701                       	dc.b	smpsNoAttack, $01
000903A6 E0C0                       	smpsPan             panCenter, $00
000903A8 E601                       	smpsAlterVol        $01
000903AA E108                       	smpsAlterNote       $08
000903AC A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000903B8 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000903C0 E080                       	smpsPan             panLeft, $00
000903C2 07                         	dc.b	$07
000903C3 E6FF                       	smpsAlterVol        $FF
000903C5 E10D                       	smpsAlterNote       $0D
000903C7 B60D                       	dc.b	nF4, $0D
000903C9 E10A                       	smpsAlterNote       $0A
000903CB E701                       	dc.b	smpsNoAttack, $01
000903CD E106                       	smpsAlterNote       $06
000903CF E701                       	dc.b	smpsNoAttack, $01
000903D1 E10A                       	smpsAlterNote       $0A
000903D3 E701                       	dc.b	smpsNoAttack, $01
000903D5 E110                       	smpsAlterNote       $10
000903D7 E701                       	dc.b	smpsNoAttack, $01
000903D9 E111                       	smpsAlterNote       $11
000903DB E701                       	dc.b	smpsNoAttack, $01
000903DD E10D                       	smpsAlterNote       $0D
000903DF E701                       	dc.b	smpsNoAttack, $01
000903E1 E107                       	smpsAlterNote       $07
000903E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903E7 E10A                       	smpsAlterNote       $0A
000903E9 E701                       	dc.b	smpsNoAttack, $01
000903EB E110                       	smpsAlterNote       $10
000903ED E701                       	dc.b	smpsNoAttack, $01
000903EF E111                       	smpsAlterNote       $11
000903F1 8001                       	dc.b	nRst, $01
000903F3 E10D                       	smpsAlterNote       $0D
000903F5 B80D                       	dc.b	nG4, $0D
000903F7 E10A                       	smpsAlterNote       $0A
000903F9 E701                       	dc.b	smpsNoAttack, $01
000903FB E106                       	smpsAlterNote       $06
000903FD E701                       	dc.b	smpsNoAttack, $01
000903FF E10A                       	smpsAlterNote       $0A
00090401 E701                       	dc.b	smpsNoAttack, $01
00090403 E110                       	smpsAlterNote       $10
00090405 E701                       	dc.b	smpsNoAttack, $01
00090407 E111                       	smpsAlterNote       $11
00090409 E701                       	dc.b	smpsNoAttack, $01
0009040B E10D                       	smpsAlterNote       $0D
0009040D E701                       	dc.b	smpsNoAttack, $01
0009040F E107                       	smpsAlterNote       $07
00090411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090415 E10D                       	smpsAlterNote       $0D
00090417 E701                       	dc.b	smpsNoAttack, $01
00090419 E110                       	smpsAlterNote       $10
0009041B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009041F E10A                       	smpsAlterNote       $0A
00090421 E701                       	dc.b	smpsNoAttack, $01
00090423 E106                       	smpsAlterNote       $06
00090425 E701                       	dc.b	smpsNoAttack, $01
00090427 E107                       	smpsAlterNote       $07
00090429 E701                       	dc.b	smpsNoAttack, $01
0009042B E10D                       	smpsAlterNote       $0D
0009042D E701                       	dc.b	smpsNoAttack, $01
0009042F E111                       	smpsAlterNote       $11
00090431 E701                       	dc.b	smpsNoAttack, $01
00090433 E10D                       	smpsAlterNote       $0D
00090435 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090439 E10F                       	smpsAlterNote       $0F
0009043B BA0D                       	dc.b	nA4, $0D
0009043D E109                       	smpsAlterNote       $09
0009043F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090443 E10C                       	smpsAlterNote       $0C
00090445 E701                       	dc.b	smpsNoAttack, $01
00090447 E112                       	smpsAlterNote       $12
00090449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009044D E10C                       	smpsAlterNote       $0C
0009044F E701                       	dc.b	smpsNoAttack, $01
00090451 E109                       	smpsAlterNote       $09
00090453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090457 E10F                       	smpsAlterNote       $0F
00090459 E701                       	dc.b	smpsNoAttack, $01
0009045B E113                       	smpsAlterNote       $13
0009045D E701                       	dc.b	smpsNoAttack, $01
0009045F E112                       	smpsAlterNote       $12
00090461 E701                       	dc.b	smpsNoAttack, $01
00090463 E10C                       	smpsAlterNote       $0C
00090465 E701                       	dc.b	smpsNoAttack, $01
00090467 E108                       	smpsAlterNote       $08
00090469 E701                       	dc.b	smpsNoAttack, $01
0009046B E10C                       	smpsAlterNote       $0C
0009046D E701                       	dc.b	smpsNoAttack, $01
0009046F E10F                       	smpsAlterNote       $0F
00090471 E701                       	dc.b	smpsNoAttack, $01
00090473 E113                       	smpsAlterNote       $13
00090475 E701                       	dc.b	smpsNoAttack, $01
00090477 E10F                       	smpsAlterNote       $0F
00090479 E701                       	dc.b	smpsNoAttack, $01
0009047B E109                       	smpsAlterNote       $09
0009047D E701                       	dc.b	smpsNoAttack, $01
0009047F E108                       	smpsAlterNote       $08
00090481 E701                       	dc.b	smpsNoAttack, $01
00090483 E10C                       	smpsAlterNote       $0C
00090485 E701                       	dc.b	smpsNoAttack, $01
00090487 E112                       	smpsAlterNote       $12
00090489 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009048D E10F                       	smpsAlterNote       $0F
0009048F E701                       	dc.b	smpsNoAttack, $01
00090491 E109                       	smpsAlterNote       $09
00090493 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090497 E10F                       	smpsAlterNote       $0F
00090499 E701                       	dc.b	smpsNoAttack, $01
0009049B E112                       	smpsAlterNote       $12
0009049D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904A1 E10C                       	smpsAlterNote       $0C
000904A3 E701                       	dc.b	smpsNoAttack, $01
000904A5 E108                       	smpsAlterNote       $08
000904A7 E701                       	dc.b	smpsNoAttack, $01
000904A9 E109                       	smpsAlterNote       $09
000904AB E701                       	dc.b	smpsNoAttack, $01
000904AD E10C                       	smpsAlterNote       $0C
000904AF B50A                       	dc.b	nE4, $0A
000904B1 E10D                       	smpsAlterNote       $0D
000904B3 B60E                       	dc.b	nF4, $0E
000904B5 E107                       	smpsAlterNote       $07
000904B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904BB E10D                       	smpsAlterNote       $0D
000904BD E701                       	dc.b	smpsNoAttack, $01
000904BF E110                       	smpsAlterNote       $10
000904C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904C5 E10A                       	smpsAlterNote       $0A
000904C7 E701                       	dc.b	smpsNoAttack, $01
000904C9 E106                       	smpsAlterNote       $06
000904CB E701                       	dc.b	smpsNoAttack, $01
000904CD E107                       	smpsAlterNote       $07
000904CF E701                       	dc.b	smpsNoAttack, $01
000904D1 E10D                       	smpsAlterNote       $0D
000904D3 E701                       	dc.b	smpsNoAttack, $01
000904D5 E111                       	smpsAlterNote       $11
000904D7 E701                       	dc.b	smpsNoAttack, $01
000904D9 E10D                       	smpsAlterNote       $0D
000904DB B80D                       	dc.b	nG4, $0D
000904DD E10A                       	smpsAlterNote       $0A
000904DF E701                       	dc.b	smpsNoAttack, $01
000904E1 E107                       	smpsAlterNote       $07
000904E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000904E7 E10D                       	smpsAlterNote       $0D
000904E9 E701                       	dc.b	smpsNoAttack, $01
000904EB E111                       	smpsAlterNote       $11
000904ED E701                       	dc.b	smpsNoAttack, $01
000904EF E110                       	smpsAlterNote       $10
000904F1 E701                       	dc.b	smpsNoAttack, $01
000904F3 E10A                       	smpsAlterNote       $0A
000904F5 E701                       	dc.b	smpsNoAttack, $01
000904F7 E106                       	smpsAlterNote       $06
000904F9 E701                       	dc.b	smpsNoAttack, $01
000904FB E10A                       	smpsAlterNote       $0A
000904FD E701                       	dc.b	smpsNoAttack, $01
000904FF E10D                       	smpsAlterNote       $0D
00090501 E701                       	dc.b	smpsNoAttack, $01
00090503 E111                       	smpsAlterNote       $11
00090505 E701                       	dc.b	smpsNoAttack, $01
00090507 E10D                       	smpsAlterNote       $0D
00090509 E701                       	dc.b	smpsNoAttack, $01
0009050B E107                       	smpsAlterNote       $07
0009050D E701                       	dc.b	smpsNoAttack, $01
0009050F E106                       	smpsAlterNote       $06
00090511 E701                       	dc.b	smpsNoAttack, $01
00090513 E10A                       	smpsAlterNote       $0A
00090515 E701                       	dc.b	smpsNoAttack, $01
00090517 E110                       	smpsAlterNote       $10
00090519 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009051D E10D                       	smpsAlterNote       $0D
0009051F E701                       	dc.b	smpsNoAttack, $01
00090521 E10F                       	smpsAlterNote       $0F
00090523 BA0D                       	dc.b	nA4, $0D
00090525 E10C                       	smpsAlterNote       $0C
00090527 E701                       	dc.b	smpsNoAttack, $01
00090529 E108                       	smpsAlterNote       $08
0009052B E701                       	dc.b	smpsNoAttack, $01
0009052D E109                       	smpsAlterNote       $09
0009052F E701                       	dc.b	smpsNoAttack, $01
00090531 E10F                       	smpsAlterNote       $0F
00090533 E701                       	dc.b	smpsNoAttack, $01
00090535 E113                       	smpsAlterNote       $13
00090537 E701                       	dc.b	smpsNoAttack, $01
00090539 E10F                       	smpsAlterNote       $0F
0009053B E701                       	dc.b	smpsNoAttack, $01
0009053D E10C                       	smpsAlterNote       $0C
0009053F E701                       	dc.b	smpsNoAttack, $01
00090541 E108                       	smpsAlterNote       $08
00090543 E701                       	dc.b	smpsNoAttack, $01
00090545 E10C                       	smpsAlterNote       $0C
00090547 E701                       	dc.b	smpsNoAttack, $01
00090549 E112                       	smpsAlterNote       $12
0009054B E701                       	dc.b	smpsNoAttack, $01
0009054D E113                       	smpsAlterNote       $13
0009054F E701                       	dc.b	smpsNoAttack, $01
00090551 E10F                       	smpsAlterNote       $0F
00090553 E701                       	dc.b	smpsNoAttack, $01
00090555 E109                       	smpsAlterNote       $09
00090557 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009055B E10C                       	smpsAlterNote       $0C
0009055D E701                       	dc.b	smpsNoAttack, $01
0009055F E112                       	smpsAlterNote       $12
00090561 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090565 E10C                       	smpsAlterNote       $0C
00090567 E701                       	dc.b	smpsNoAttack, $01
00090569 E109                       	smpsAlterNote       $09
0009056B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009056F E10F                       	smpsAlterNote       $0F
00090571 E701                       	dc.b	smpsNoAttack, $01
00090573 E113                       	smpsAlterNote       $13
00090575 E701                       	dc.b	smpsNoAttack, $01
00090577 E112                       	smpsAlterNote       $12
00090579 E701                       	dc.b	smpsNoAttack, $01
0009057B E10C                       	smpsAlterNote       $0C
0009057D E701                       	dc.b	smpsNoAttack, $01
0009057F E109                       	smpsAlterNote       $09
00090581 8001                       	dc.b	nRst, $01
00090583 E10D                       	smpsAlterNote       $0D
00090585 B60A                       	dc.b	nF4, $0A
00090587 E10C                       	smpsAlterNote       $0C
00090589 B506 8001                  	dc.b	nE4, $06, nRst, $01
0009058D E10B                       	smpsAlterNote       $0B
0009058F B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00090593 E10C                       	smpsAlterNote       $0C
00090595 B503                       	dc.b	nE4, $03
00090597 E10D                       	smpsAlterNote       $0D
00090599 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000905A3 E10C                       	smpsAlterNote       $0C
000905A5 E701                       	dc.b	smpsNoAttack, $01
000905A7 E108                       	smpsAlterNote       $08
000905A9 E701                       	dc.b	smpsNoAttack, $01
000905AB E10C                       	smpsAlterNote       $0C
000905AD E701                       	dc.b	smpsNoAttack, $01
000905AF E112                       	smpsAlterNote       $12
000905B1 E701                       	dc.b	smpsNoAttack, $01
000905B3 E113                       	smpsAlterNote       $13
000905B5 E701                       	dc.b	smpsNoAttack, $01
000905B7 E10F                       	smpsAlterNote       $0F
000905B9 E701                       	dc.b	smpsNoAttack, $01
000905BB E109                       	smpsAlterNote       $09
000905BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000905C1 E10C                       	smpsAlterNote       $0C
000905C3 E701                       	dc.b	smpsNoAttack, $01
000905C5 E112                       	smpsAlterNote       $12
000905C7 E701                       	dc.b	smpsNoAttack, $01
000905C9 E113                       	smpsAlterNote       $13
000905CB 8001                       	dc.b	nRst, $01
000905CD E10D                       	smpsAlterNote       $0D
000905CF C20D                       	dc.b	nF5, $0D
000905D1 E10A                       	smpsAlterNote       $0A
000905D3 E701                       	dc.b	smpsNoAttack, $01
000905D5 E106                       	smpsAlterNote       $06
000905D7 E701                       	dc.b	smpsNoAttack, $01
000905D9 E10A                       	smpsAlterNote       $0A
000905DB E701                       	dc.b	smpsNoAttack, $01
000905DD E110                       	smpsAlterNote       $10
000905DF E701                       	dc.b	smpsNoAttack, $01
000905E1 E111                       	smpsAlterNote       $11
000905E3 E701                       	dc.b	smpsNoAttack, $01
000905E5 E10D                       	smpsAlterNote       $0D
000905E7 E701                       	dc.b	smpsNoAttack, $01
000905E9 E107                       	smpsAlterNote       $07
000905EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000905EF E10A                       	smpsAlterNote       $0A
000905F1 E701                       	dc.b	smpsNoAttack, $01
000905F3 E110                       	smpsAlterNote       $10
000905F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000905F9 E10A                       	smpsAlterNote       $0A
000905FB E701                       	dc.b	smpsNoAttack, $01
000905FD E107                       	smpsAlterNote       $07
000905FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090603 E10D                       	smpsAlterNote       $0D
00090605 E701                       	dc.b	smpsNoAttack, $01
00090607 E111                       	smpsAlterNote       $11
00090609 E701                       	dc.b	smpsNoAttack, $01
0009060B E110                       	smpsAlterNote       $10
0009060D E701                       	dc.b	smpsNoAttack, $01
0009060F E10A                       	smpsAlterNote       $0A
00090611 E701                       	dc.b	smpsNoAttack, $01
00090613 E106                       	smpsAlterNote       $06
00090615 E701                       	dc.b	smpsNoAttack, $01
00090617 E10A                       	smpsAlterNote       $0A
00090619 E701                       	dc.b	smpsNoAttack, $01
0009061B E10D                       	smpsAlterNote       $0D
0009061D E701                       	dc.b	smpsNoAttack, $01
0009061F E111                       	smpsAlterNote       $11
00090621 E701                       	dc.b	smpsNoAttack, $01
00090623 E10D                       	smpsAlterNote       $0D
00090625 E701                       	dc.b	smpsNoAttack, $01
00090627 E107                       	smpsAlterNote       $07
00090629 E701                       	dc.b	smpsNoAttack, $01
0009062B E106                       	smpsAlterNote       $06
0009062D E701                       	dc.b	smpsNoAttack, $01
0009062F E10A                       	smpsAlterNote       $0A
00090631 E701                       	dc.b	smpsNoAttack, $01
00090633 E110                       	smpsAlterNote       $10
00090635 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090639 E10D                       	smpsAlterNote       $0D
0009063B E701                       	dc.b	smpsNoAttack, $01
0009063D E107                       	smpsAlterNote       $07
0009063F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090643 E10D                       	smpsAlterNote       $0D
00090645 E701                       	dc.b	smpsNoAttack, $01
00090647 E110                       	smpsAlterNote       $10
00090649 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009064D E10A                       	smpsAlterNote       $0A
0009064F E701                       	dc.b	smpsNoAttack, $01
00090651 E106                       	smpsAlterNote       $06
00090653 E701                       	dc.b	smpsNoAttack, $01
00090655 E107                       	smpsAlterNote       $07
00090657 E701                       	dc.b	smpsNoAttack, $01
00090659 E10D                       	smpsAlterNote       $0D
0009065B E701                       	dc.b	smpsNoAttack, $01
0009065D E111                       	smpsAlterNote       $11
0009065F E701                       	dc.b	smpsNoAttack, $01
00090661 E10D                       	smpsAlterNote       $0D
00090663 E701                       	dc.b	smpsNoAttack, $01
00090665 E10A                       	smpsAlterNote       $0A
00090667 E701                       	dc.b	smpsNoAttack, $01
00090669 E107                       	smpsAlterNote       $07
0009066B 8001                       	dc.b	nRst, $01
0009066D E10D                       	smpsAlterNote       $0D
0009066F C206 8001                  	dc.b	nF5, $06, nRst, $01
00090675 E601                       	smpsAlterVol        $01
00090677 E110                       	smpsAlterNote       $10
00090679 BB0D                       	dc.b	nBb4, $0D
0009067B E10A                       	smpsAlterNote       $0A
0009067D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090681 E110                       	smpsAlterNote       $10
00090683 E701                       	dc.b	smpsNoAttack, $01
00090685 E113                       	smpsAlterNote       $13
00090687 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009068B E10D                       	smpsAlterNote       $0D
0009068D E701                       	dc.b	smpsNoAttack, $01
0009068F E109                       	smpsAlterNote       $09
00090691 E701                       	dc.b	smpsNoAttack, $01
00090693 E10A                       	smpsAlterNote       $0A
00090695 E701                       	dc.b	smpsNoAttack, $01
00090697 E110                       	smpsAlterNote       $10
00090699 E701                       	dc.b	smpsNoAttack, $01
0009069B E114                       	smpsAlterNote       $14
0009069D E701                       	dc.b	smpsNoAttack, $01
0009069F E110                       	smpsAlterNote       $10
000906A1 E701                       	dc.b	smpsNoAttack, $01
000906A3 E10D                       	smpsAlterNote       $0D
000906A5 E701                       	dc.b	smpsNoAttack, $01
000906A7 E109                       	smpsAlterNote       $09
000906A9 E701                       	dc.b	smpsNoAttack, $01
000906AB E10A                       	smpsAlterNote       $0A
000906AD 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000906B1 E107                       	smpsAlterNote       $07
000906B3 E701                       	dc.b	smpsNoAttack, $01
000906B5 E103                       	smpsAlterNote       $03
000906B7 E701                       	dc.b	smpsNoAttack, $01
000906B9 E107                       	smpsAlterNote       $07
000906BB E701                       	dc.b	smpsNoAttack, $01
000906BD E10D                       	smpsAlterNote       $0D
000906BF E701                       	dc.b	smpsNoAttack, $01
000906C1 E10E                       	smpsAlterNote       $0E
000906C3 E701                       	dc.b	smpsNoAttack, $01
000906C5 E10A                       	smpsAlterNote       $0A
000906C7 E701                       	dc.b	smpsNoAttack, $01
000906C9 E104                       	smpsAlterNote       $04
000906CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906CF E107                       	smpsAlterNote       $07
000906D1 E701                       	dc.b	smpsNoAttack, $01
000906D3 E10D                       	smpsAlterNote       $0D
000906D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906D9 E107                       	smpsAlterNote       $07
000906DB E701                       	dc.b	smpsNoAttack, $01
000906DD E104                       	smpsAlterNote       $04
000906DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906E3 E10B                       	smpsAlterNote       $0B
000906E5 BF0D                       	dc.b	nD5, $0D
000906E7 E108                       	smpsAlterNote       $08
000906E9 E701                       	dc.b	smpsNoAttack, $01
000906EB E105                       	smpsAlterNote       $05
000906ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000906F1 E10B                       	smpsAlterNote       $0B
000906F3 E701                       	dc.b	smpsNoAttack, $01
000906F5 E10F                       	smpsAlterNote       $0F
000906F7 E701                       	dc.b	smpsNoAttack, $01
000906F9 E10E                       	smpsAlterNote       $0E
000906FB E701                       	dc.b	smpsNoAttack, $01
000906FD E108                       	smpsAlterNote       $08
000906FF E701                       	dc.b	smpsNoAttack, $01
00090701 E104                       	smpsAlterNote       $04
00090703 E701                       	dc.b	smpsNoAttack, $01
00090705 E108                       	smpsAlterNote       $08
00090707 E701                       	dc.b	smpsNoAttack, $01
00090709 E10B                       	smpsAlterNote       $0B
0009070B E701                       	dc.b	smpsNoAttack, $01
0009070D E10F                       	smpsAlterNote       $0F
0009070F E701                       	dc.b	smpsNoAttack, $01
00090711 E10B                       	smpsAlterNote       $0B
00090713 E701                       	dc.b	smpsNoAttack, $01
00090715 E105                       	smpsAlterNote       $05
00090717 E701                       	dc.b	smpsNoAttack, $01
00090719 E104                       	smpsAlterNote       $04
0009071B E701                       	dc.b	smpsNoAttack, $01
0009071D E105                       	smpsAlterNote       $05
0009071F 8001                       	dc.b	nRst, $01
00090721 E10C                       	smpsAlterNote       $0C
00090723 C10C                       	dc.b	nE5, $0C
00090725 E10D                       	smpsAlterNote       $0D
00090727 C201                       	dc.b	nF5, $01
00090729 E10E                       	smpsAlterNote       $0E
0009072B C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009072F E10D                       	smpsAlterNote       $0D
00090731 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00090735 E10A                       	smpsAlterNote       $0A
00090737 E701                       	dc.b	smpsNoAttack, $01
00090739 E106                       	smpsAlterNote       $06
0009073B E701                       	dc.b	smpsNoAttack, $01
0009073D E10A                       	smpsAlterNote       $0A
0009073F E701                       	dc.b	smpsNoAttack, $01
00090741 E10D                       	smpsAlterNote       $0D
00090743 E701                       	dc.b	smpsNoAttack, $01
00090745 E111                       	smpsAlterNote       $11
00090747 E701                       	dc.b	smpsNoAttack, $01
00090749 E10D                       	smpsAlterNote       $0D
0009074B E701                       	dc.b	smpsNoAttack, $01
0009074D E107                       	smpsAlterNote       $07
0009074F E701                       	dc.b	smpsNoAttack, $01
00090751 E106                       	smpsAlterNote       $06
00090753 E701                       	dc.b	smpsNoAttack, $01
00090755 E10A                       	smpsAlterNote       $0A
00090757 E701                       	dc.b	smpsNoAttack, $01
00090759 E110                       	smpsAlterNote       $10
0009075B E701                       	dc.b	smpsNoAttack, $01
0009075D E111                       	smpsAlterNote       $11
0009075F 8001                       	dc.b	nRst, $01
00090761 E10D                       	smpsAlterNote       $0D
00090763 C40D                       	dc.b	nG5, $0D
00090765 E10A                       	smpsAlterNote       $0A
00090767 E701                       	dc.b	smpsNoAttack, $01
00090769 E106                       	smpsAlterNote       $06
0009076B E701                       	dc.b	smpsNoAttack, $01
0009076D E10A                       	smpsAlterNote       $0A
0009076F E701                       	dc.b	smpsNoAttack, $01
00090771 E10D                       	smpsAlterNote       $0D
00090773 E701                       	dc.b	smpsNoAttack, $01
00090775 E10C                       	smpsAlterNote       $0C
00090777 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00090783 8001                       	dc.b	nRst, $01
00090785 E10D                       	smpsAlterNote       $0D
00090787 C20D                       	dc.b	nF5, $0D
00090789 E10A                       	smpsAlterNote       $0A
0009078B E701                       	dc.b	smpsNoAttack, $01
0009078D E106                       	smpsAlterNote       $06
0009078F E701                       	dc.b	smpsNoAttack, $01
00090791 E10A                       	smpsAlterNote       $0A
00090793 E701                       	dc.b	smpsNoAttack, $01
00090795 E110                       	smpsAlterNote       $10
00090797 E701                       	dc.b	smpsNoAttack, $01
00090799 E111                       	smpsAlterNote       $11
0009079B E701                       	dc.b	smpsNoAttack, $01
0009079D E10D                       	smpsAlterNote       $0D
0009079F E701                       	dc.b	smpsNoAttack, $01
000907A1 E107                       	smpsAlterNote       $07
000907A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907A7 E10A                       	smpsAlterNote       $0A
000907A9 E701                       	dc.b	smpsNoAttack, $01
000907AB E110                       	smpsAlterNote       $10
000907AD E701                       	dc.b	smpsNoAttack, $01
000907AF E111                       	smpsAlterNote       $11
000907B1 8001                       	dc.b	nRst, $01
000907B3 E10F                       	smpsAlterNote       $0F
000907B5 C60A                       	dc.b	nA5, $0A
000907B7 E10D                       	smpsAlterNote       $0D
000907B9 C406 8001                  	dc.b	nG5, $06, nRst, $01
000907BD E10C                       	smpsAlterNote       $0C
000907BF C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000907CB 8001                       	dc.b	nRst, $01
000907CD E10D                       	smpsAlterNote       $0D
000907CF C20D                       	dc.b	nF5, $0D
000907D1 E107                       	smpsAlterNote       $07
000907D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907D7 E10A                       	smpsAlterNote       $0A
000907D9 E701                       	dc.b	smpsNoAttack, $01
000907DB E110                       	smpsAlterNote       $10
000907DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907E1 E10A                       	smpsAlterNote       $0A
000907E3 E701                       	dc.b	smpsNoAttack, $01
000907E5 E107                       	smpsAlterNote       $07
000907E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907EB E10D                       	smpsAlterNote       $0D
000907ED E701                       	dc.b	smpsNoAttack, $01
000907EF E111                       	smpsAlterNote       $11
000907F1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000907F5 E10D                       	smpsAlterNote       $0D
000907F7 C40D                       	dc.b	nG5, $0D
000907F9 E107                       	smpsAlterNote       $07
000907FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907FF E10A                       	smpsAlterNote       $0A
00090801 E701                       	dc.b	smpsNoAttack, $01
00090803 E10D                       	smpsAlterNote       $0D
00090805 8001                       	dc.b	nRst, $01
00090807 E10C                       	smpsAlterNote       $0C
00090809 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090815 E10D                       	smpsAlterNote       $0D
00090817 C20E                       	dc.b	nF5, $0E
00090819 E107                       	smpsAlterNote       $07
0009081B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009081F E10D                       	smpsAlterNote       $0D
00090821 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090827 E0C0                       	smpsPan             panCenter, $00
00090829 E603                       	smpsAlterVol        $03
0009082B E108                       	smpsAlterNote       $08
0009082D B406                       	dc.b	nEb4, $06
0009082F E10C                       	smpsAlterNote       $0C
00090831 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00090835 E108                       	smpsAlterNote       $08
00090837 B403                       	dc.b	nEb4, $03
00090839 E109                       	smpsAlterNote       $09
0009083B B803 8001                  	dc.b	nG4, $03, nRst, $01
0009083F E10C                       	smpsAlterNote       $0C
00090841 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00090849 03                         	dc.b	$03
0009084A E6FD                       	smpsAlterVol        $FD
0009084C F6F1 F4                    	smpsJump            music84_Jump00
0009084F                            
0009084F                            ; PSG1 Data
0009084F                            music84_PSG1:
0009084F E1FD                       	smpsAlterNote       $FD
00090851 EC04                       	smpsPSGAlterVol     $04
00090853 9203                       	dc.b	nF1, $03
00090855 E1FE                       	smpsAlterNote       $FE
00090857 9603                       	dc.b	nA1, $03
00090859 EC04                       	smpsPSGAlterVol     $04
0009085B E701                       	dc.b	smpsNoAttack, $01
0009085D E1FF                       	smpsAlterNote       $FF
0009085F ECFC                       	smpsPSGAlterVol     $FC
00090861 9B03                       	dc.b	nD2, $03
00090863 E1FD                       	smpsAlterNote       $FD
00090865 9403                       	dc.b	nG1, $03
00090867 EC04                       	smpsPSGAlterVol     $04
00090869 E701                       	dc.b	smpsNoAttack, $01
0009086B E1FE                       	smpsAlterNote       $FE
0009086D ECFC                       	smpsPSGAlterVol     $FC
0009086F 9703                       	dc.b	nBb1, $03
00090871 E1FF                       	smpsAlterNote       $FF
00090873 9B03                       	dc.b	nD2, $03
00090875 EC04                       	smpsPSGAlterVol     $04
00090877 E701                       	dc.b	smpsNoAttack, $01
00090879 E1FE                       	smpsAlterNote       $FE
0009087B ECFC                       	smpsPSGAlterVol     $FC
0009087D A002                       	dc.b	nG2, $02
0009087F EC04                       	smpsPSGAlterVol     $04
00090881 E701                       	dc.b	smpsNoAttack, $01
00090883 E1FF                       	smpsAlterNote       $FF
00090885 ECFC                       	smpsPSGAlterVol     $FC
00090887 A203                       	dc.b	nA2, $03
00090889 EC0B                       	smpsPSGAlterVol     $0B
0009088B 800A                       	dc.b	nRst, $0A
0009088D E105                       	smpsAlterNote       $05
0009088F 01                         	dc.b	$01
00090890 E1FC                       	smpsAlterNote       $FC
00090892 01                         	dc.b	$01
00090893 E105                       	smpsAlterNote       $05
00090895 01                         	dc.b	$01
00090896 E1FD                       	smpsAlterNote       $FD
00090898 01                         	dc.b	$01
00090899 E105                       	smpsAlterNote       $05
0009089B 01                         	dc.b	$01
0009089C E1FD                       	smpsAlterNote       $FD
0009089E 01                         	dc.b	$01
0009089F E1FA                       	smpsAlterNote       $FA
000908A1 01                         	dc.b	$01
000908A2 E1FC                       	smpsAlterNote       $FC
000908A4 01                         	dc.b	$01
000908A5 E105                       	smpsAlterNote       $05
000908A7 01                         	dc.b	$01
000908A8 E108                       	smpsAlterNote       $08
000908AA 0101                       	dc.b	$01, $01
000908AC E105                       	smpsAlterNote       $05
000908AE 01                         	dc.b	$01
000908AF E1FA                       	smpsAlterNote       $FA
000908B1 0101                       	dc.b	$01, $01
000908B3 E1FD                       	smpsAlterNote       $FD
000908B5 01                         	dc.b	$01
000908B6 E105                       	smpsAlterNote       $05
000908B8 01                         	dc.b	$01
000908B9 E108                       	smpsAlterNote       $08
000908BB 01                         	dc.b	$01
000908BC E105                       	smpsAlterNote       $05
000908BE 01                         	dc.b	$01
000908BF E1FC                       	smpsAlterNote       $FC
000908C1 01                         	dc.b	$01
000908C2 E105                       	smpsAlterNote       $05
000908C4 01                         	dc.b	$01
000908C5 E1FD                       	smpsAlterNote       $FD
000908C7 01                         	dc.b	$01
000908C8                            
000908C8                            music84_Jump07:
000908C8 E105                       	smpsAlterNote       $05
000908CA 8001                       	dc.b	nRst, $01
000908CC E1FD                       	smpsAlterNote       $FD
000908CE 01                         	dc.b	$01
000908CF E1FA                       	smpsAlterNote       $FA
000908D1 01                         	dc.b	$01
000908D2 E1FC                       	smpsAlterNote       $FC
000908D4 01                         	dc.b	$01
000908D5 E1FD                       	smpsAlterNote       $FD
000908D7 ECF5                       	smpsPSGAlterVol     $F5
000908D9 9206                       	dc.b	nF1, $06
000908DB EC04                       	smpsPSGAlterVol     $04
000908DD E701                       	dc.b	smpsNoAttack, $01
000908DF EC07                       	smpsPSGAlterVol     $07
000908E1 8003                       	dc.b	nRst, $03
000908E3 ECF5                       	smpsPSGAlterVol     $F5
000908E5 9206                       	dc.b	nF1, $06
000908E7 EC04                       	smpsPSGAlterVol     $04
000908E9 E701                       	dc.b	smpsNoAttack, $01
000908EB EC07                       	smpsPSGAlterVol     $07
000908ED 8006                       	dc.b	nRst, $06
000908EF E100                       	smpsAlterNote       $00
000908F1 01                         	dc.b	$01
000908F2 E104                       	smpsAlterNote       $04
000908F4 01                         	dc.b	$01
000908F5 E100                       	smpsAlterNote       $00
000908F7 01                         	dc.b	$01
000908F8 E1FB                       	smpsAlterNote       $FB
000908FA 01                         	dc.b	$01
000908FB E1FD                       	smpsAlterNote       $FD
000908FD ECF5                       	smpsPSGAlterVol     $F5
000908FF 9406                       	dc.b	nG1, $06
00090901 EC04                       	smpsPSGAlterVol     $04
00090903 E701                       	dc.b	smpsNoAttack, $01
00090905 EC07                       	smpsPSGAlterVol     $07
00090907 8003                       	dc.b	nRst, $03
00090909 ECF5                       	smpsPSGAlterVol     $F5
0009090B 9407                       	dc.b	nG1, $07
0009090D EC0B                       	smpsPSGAlterVol     $0B
0009090F 8006                       	dc.b	nRst, $06
00090911 E100                       	smpsAlterNote       $00
00090913 01                         	dc.b	$01
00090914 E103                       	smpsAlterNote       $03
00090916 0101                       	dc.b	$01, $01
00090918 E1FD                       	smpsAlterNote       $FD
0009091A 01                         	dc.b	$01
0009091B ECF5                       	smpsPSGAlterVol     $F5
0009091D 9207                       	dc.b	nF1, $07
0009091F EC0B                       	smpsPSGAlterVol     $0B
00090921 8004                       	dc.b	nRst, $04
00090923 ECF5                       	smpsPSGAlterVol     $F5
00090925 9206                       	dc.b	nF1, $06
00090927 EC04                       	smpsPSGAlterVol     $04
00090929 E701                       	dc.b	smpsNoAttack, $01
0009092B EC07                       	smpsPSGAlterVol     $07
0009092D 8006                       	dc.b	nRst, $06
0009092F E103                       	smpsAlterNote       $03
00090931 01                         	dc.b	$01
00090932 E104                       	smpsAlterNote       $04
00090934 01                         	dc.b	$01
00090935 E100                       	smpsAlterNote       $00
00090937 01                         	dc.b	$01
00090938 E1FA                       	smpsAlterNote       $FA
0009093A 01                         	dc.b	$01
0009093B E1FD                       	smpsAlterNote       $FD
0009093D ECF5                       	smpsPSGAlterVol     $F5
0009093F 9206                       	dc.b	nF1, $06
00090941 EC04                       	smpsPSGAlterVol     $04
00090943 E701                       	dc.b	smpsNoAttack, $01
00090945 EC07                       	smpsPSGAlterVol     $07
00090947 8003                       	dc.b	nRst, $03
00090949 ECF5                       	smpsPSGAlterVol     $F5
0009094B 9106                       	dc.b	nE1, $06
0009094D EC04                       	smpsPSGAlterVol     $04
0009094F E701                       	dc.b	smpsNoAttack, $01
00090951 EC07                       	smpsPSGAlterVol     $07
00090953 8006                       	dc.b	nRst, $06
00090955 E100                       	smpsAlterNote       $00
00090957 01                         	dc.b	$01
00090958 E104                       	smpsAlterNote       $04
0009095A 01                         	dc.b	$01
0009095B E100                       	smpsAlterNote       $00
0009095D 01                         	dc.b	$01
0009095E E1FD                       	smpsAlterNote       $FD
00090960 01                         	dc.b	$01
00090961 ECF5                       	smpsPSGAlterVol     $F5
00090963 9206                       	dc.b	nF1, $06
00090965 EC04                       	smpsPSGAlterVol     $04
00090967 E701                       	dc.b	smpsNoAttack, $01
00090969 EC07                       	smpsPSGAlterVol     $07
0009096B 8003                       	dc.b	nRst, $03
0009096D ECF5                       	smpsPSGAlterVol     $F5
0009096F 9207                       	dc.b	nF1, $07
00090971 EC0B                       	smpsPSGAlterVol     $0B
00090973 8007                       	dc.b	nRst, $07
00090975 E103                       	smpsAlterNote       $03
00090977 0101                       	dc.b	$01, $01
00090979 E1FD                       	smpsAlterNote       $FD
0009097B 01                         	dc.b	$01
0009097C E1FB                       	smpsAlterNote       $FB
0009097E 01                         	dc.b	$01
0009097F E1FD                       	smpsAlterNote       $FD
00090981 ECF5                       	smpsPSGAlterVol     $F5
00090983 9406                       	dc.b	nG1, $06
00090985 EC0B                       	smpsPSGAlterVol     $0B
00090987 8004                       	dc.b	nRst, $04
00090989 ECF5                       	smpsPSGAlterVol     $F5
0009098B 9406                       	dc.b	nG1, $06
0009098D EC04                       	smpsPSGAlterVol     $04
0009098F E701                       	dc.b	smpsNoAttack, $01
00090991 EC07                       	smpsPSGAlterVol     $07
00090993 8006                       	dc.b	nRst, $06
00090995 E100                       	smpsAlterNote       $00
00090997 01                         	dc.b	$01
00090998 E104                       	smpsAlterNote       $04
0009099A 01                         	dc.b	$01
0009099B E100                       	smpsAlterNote       $00
0009099D 01                         	dc.b	$01
0009099E E1F9                       	smpsAlterNote       $F9
000909A0 01                         	dc.b	$01
000909A1 E1FD                       	smpsAlterNote       $FD
000909A3 ECF5                       	smpsPSGAlterVol     $F5
000909A5 9206                       	dc.b	nF1, $06
000909A7 EC04                       	smpsPSGAlterVol     $04
000909A9 E701                       	dc.b	smpsNoAttack, $01
000909AB EC07                       	smpsPSGAlterVol     $07
000909AD 8003                       	dc.b	nRst, $03
000909AF ECF5                       	smpsPSGAlterVol     $F5
000909B1 9207                       	dc.b	nF1, $07
000909B3 EC0B                       	smpsPSGAlterVol     $0B
000909B5 8006                       	dc.b	nRst, $06
000909B7 E100                       	smpsAlterNote       $00
000909B9 01                         	dc.b	$01
000909BA E104                       	smpsAlterNote       $04
000909BC 01                         	dc.b	$01
000909BD E103                       	smpsAlterNote       $03
000909BF 01                         	dc.b	$01
000909C0 E1FD                       	smpsAlterNote       $FD
000909C2 01                         	dc.b	$01
000909C3 ECF5                       	smpsPSGAlterVol     $F5
000909C5 9207                       	dc.b	nF1, $07
000909C7 EC0B                       	smpsPSGAlterVol     $0B
000909C9 8004                       	dc.b	nRst, $04
000909CB ECF5                       	smpsPSGAlterVol     $F5
000909CD 9206                       	dc.b	nF1, $06
000909CF EC0B                       	smpsPSGAlterVol     $0B
000909D1 8007                       	dc.b	nRst, $07
000909D3 E103                       	smpsAlterNote       $03
000909D5 0101                       	dc.b	$01, $01
000909D7 E100                       	smpsAlterNote       $00
000909D9 01                         	dc.b	$01
000909DA E1FA                       	smpsAlterNote       $FA
000909DC 01                         	dc.b	$01
000909DD E1FD                       	smpsAlterNote       $FD
000909DF ECF5                       	smpsPSGAlterVol     $F5
000909E1 9206                       	dc.b	nF1, $06
000909E3 EC04                       	smpsPSGAlterVol     $04
000909E5 E701                       	dc.b	smpsNoAttack, $01
000909E7 EC07                       	smpsPSGAlterVol     $07
000909E9 8003                       	dc.b	nRst, $03
000909EB ECF5                       	smpsPSGAlterVol     $F5
000909ED 9206                       	dc.b	nF1, $06
000909EF EC04                       	smpsPSGAlterVol     $04
000909F1 E701                       	dc.b	smpsNoAttack, $01
000909F3 EC07                       	smpsPSGAlterVol     $07
000909F5 8006                       	dc.b	nRst, $06
000909F7 E100                       	smpsAlterNote       $00
000909F9 01                         	dc.b	$01
000909FA E104                       	smpsAlterNote       $04
000909FC 01                         	dc.b	$01
000909FD E100                       	smpsAlterNote       $00
000909FF 01                         	dc.b	$01
00090A00 E1FD                       	smpsAlterNote       $FD
00090A02 01                         	dc.b	$01
00090A03 ECF5                       	smpsPSGAlterVol     $F5
00090A05 9206                       	dc.b	nF1, $06
00090A07 EC04                       	smpsPSGAlterVol     $04
00090A09 E701                       	dc.b	smpsNoAttack, $01
00090A0B EC07                       	smpsPSGAlterVol     $07
00090A0D 8003                       	dc.b	nRst, $03
00090A0F ECF5                       	smpsPSGAlterVol     $F5
00090A11 9207                       	dc.b	nF1, $07
00090A13 EC0B                       	smpsPSGAlterVol     $0B
00090A15 8007                       	dc.b	nRst, $07
00090A17 E103                       	smpsAlterNote       $03
00090A19 0101                       	dc.b	$01, $01
00090A1B E1FD                       	smpsAlterNote       $FD
00090A1D 01                         	dc.b	$01
00090A1E E1FA                       	smpsAlterNote       $FA
00090A20 01                         	dc.b	$01
00090A21 E1FD                       	smpsAlterNote       $FD
00090A23 ECF5                       	smpsPSGAlterVol     $F5
00090A25 9206                       	dc.b	nF1, $06
00090A27 EC0B                       	smpsPSGAlterVol     $0B
00090A29 8004                       	dc.b	nRst, $04
00090A2B ECF5                       	smpsPSGAlterVol     $F5
00090A2D 9206                       	dc.b	nF1, $06
00090A2F EC04                       	smpsPSGAlterVol     $04
00090A31 E701                       	dc.b	smpsNoAttack, $01
00090A33 EC07                       	smpsPSGAlterVol     $07
00090A35 8006                       	dc.b	nRst, $06
00090A37 E103                       	smpsAlterNote       $03
00090A39 01                         	dc.b	$01
00090A3A E104                       	smpsAlterNote       $04
00090A3C 01                         	dc.b	$01
00090A3D E100                       	smpsAlterNote       $00
00090A3F 01                         	dc.b	$01
00090A40 E1FA                       	smpsAlterNote       $FA
00090A42 01                         	dc.b	$01
00090A43 E1FD                       	smpsAlterNote       $FD
00090A45 ECF5                       	smpsPSGAlterVol     $F5
00090A47 9206                       	dc.b	nF1, $06
00090A49 EC04                       	smpsPSGAlterVol     $04
00090A4B E701                       	dc.b	smpsNoAttack, $01
00090A4D EC07                       	smpsPSGAlterVol     $07
00090A4F 8003                       	dc.b	nRst, $03
00090A51 ECF5                       	smpsPSGAlterVol     $F5
00090A53 9206                       	dc.b	nF1, $06
00090A55 EC04                       	smpsPSGAlterVol     $04
00090A57 E701                       	dc.b	smpsNoAttack, $01
00090A59 EC07                       	smpsPSGAlterVol     $07
00090A5B 8006                       	dc.b	nRst, $06
00090A5D E100                       	smpsAlterNote       $00
00090A5F 01                         	dc.b	$01
00090A60 E104                       	smpsAlterNote       $04
00090A62 01                         	dc.b	$01
00090A63 E103                       	smpsAlterNote       $03
00090A65 01                         	dc.b	$01
00090A66 E1FD                       	smpsAlterNote       $FD
00090A68 01                         	dc.b	$01
00090A69 ECF5                       	smpsPSGAlterVol     $F5
00090A6B 9107                       	dc.b	nE1, $07
00090A6D EC0B                       	smpsPSGAlterVol     $0B
00090A6F 8004                       	dc.b	nRst, $04
00090A71 ECF5                       	smpsPSGAlterVol     $F5
00090A73 9106                       	dc.b	nE1, $06
00090A75 EC0B                       	smpsPSGAlterVol     $0B
00090A77 8007                       	dc.b	nRst, $07
00090A79 E103                       	smpsAlterNote       $03
00090A7B 0101                       	dc.b	$01, $01
00090A7D E100                       	smpsAlterNote       $00
00090A7F 01                         	dc.b	$01
00090A80 E1FA                       	smpsAlterNote       $FA
00090A82 01                         	dc.b	$01
00090A83 E1FD                       	smpsAlterNote       $FD
00090A85 ECF5                       	smpsPSGAlterVol     $F5
00090A87 9106                       	dc.b	nE1, $06
00090A89 EC04                       	smpsPSGAlterVol     $04
00090A8B E701                       	dc.b	smpsNoAttack, $01
00090A8D EC07                       	smpsPSGAlterVol     $07
00090A8F 8003                       	dc.b	nRst, $03
00090A91 ECF5                       	smpsPSGAlterVol     $F5
00090A93 9106                       	dc.b	nE1, $06
00090A95 EC04                       	smpsPSGAlterVol     $04
00090A97 E701                       	dc.b	smpsNoAttack, $01
00090A99 EC07                       	smpsPSGAlterVol     $07
00090A9B 8006                       	dc.b	nRst, $06
00090A9D E100                       	smpsAlterNote       $00
00090A9F 01                         	dc.b	$01
00090AA0 E104                       	smpsAlterNote       $04
00090AA2 01                         	dc.b	$01
00090AA3 E100                       	smpsAlterNote       $00
00090AA5 01                         	dc.b	$01
00090AA6 E1FA                       	smpsAlterNote       $FA
00090AA8 01                         	dc.b	$01
00090AA9 E1FD                       	smpsAlterNote       $FD
00090AAB ECF5                       	smpsPSGAlterVol     $F5
00090AAD 9106                       	dc.b	nE1, $06
00090AAF EC04                       	smpsPSGAlterVol     $04
00090AB1 E701                       	dc.b	smpsNoAttack, $01
00090AB3 EC07                       	smpsPSGAlterVol     $07
00090AB5 8003                       	dc.b	nRst, $03
00090AB7 ECF5                       	smpsPSGAlterVol     $F5
00090AB9 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090ABD EC04                       	smpsPSGAlterVol     $04
00090ABF E701                       	dc.b	smpsNoAttack, $01
00090AC1 ECFC                       	smpsPSGAlterVol     $FC
00090AC3 9103 9103                  	dc.b	nE1, $03, nE1, $03
00090AC7 EC04                       	smpsPSGAlterVol     $04
00090AC9 E701                       	dc.b	smpsNoAttack, $01
00090ACB ECFC                       	smpsPSGAlterVol     $FC
00090ACD 9106                       	dc.b	nE1, $06
00090ACF EC04                       	smpsPSGAlterVol     $04
00090AD1 E701                       	dc.b	smpsNoAttack, $01
00090AD3 EC07                       	smpsPSGAlterVol     $07
00090AD5 8006                       	dc.b	nRst, $06
00090AD7 E100                       	smpsAlterNote       $00
00090AD9 01                         	dc.b	$01
00090ADA E104                       	smpsAlterNote       $04
00090ADC 01                         	dc.b	$01
00090ADD E100                       	smpsAlterNote       $00
00090ADF 01                         	dc.b	$01
00090AE0 E1FA                       	smpsAlterNote       $FA
00090AE2 01                         	dc.b	$01
00090AE3 E1F9                       	smpsAlterNote       $F9
00090AE5 01                         	dc.b	$01
00090AE6 E1FD                       	smpsAlterNote       $FD
00090AE8 01                         	dc.b	$01
00090AE9 E103                       	smpsAlterNote       $03
00090AEB 01                         	dc.b	$01
00090AEC E104                       	smpsAlterNote       $04
00090AEE 01                         	dc.b	$01
00090AEF E100                       	smpsAlterNote       $00
00090AF1 01                         	dc.b	$01
00090AF2 E1FA                       	smpsAlterNote       $FA
00090AF4 0101                       	dc.b	$01, $01
00090AF6 E1FD                       	smpsAlterNote       $FD
00090AF8 ECF5                       	smpsPSGAlterVol     $F5
00090AFA 9206                       	dc.b	nF1, $06
00090AFC EC04                       	smpsPSGAlterVol     $04
00090AFE E701                       	dc.b	smpsNoAttack, $01
00090B00 EC07                       	smpsPSGAlterVol     $07
00090B02 8003                       	dc.b	nRst, $03
00090B04 ECF5                       	smpsPSGAlterVol     $F5
00090B06 9206                       	dc.b	nF1, $06
00090B08 EC04                       	smpsPSGAlterVol     $04
00090B0A E701                       	dc.b	smpsNoAttack, $01
00090B0C EC07                       	smpsPSGAlterVol     $07
00090B0E 8006                       	dc.b	nRst, $06
00090B10 E100                       	smpsAlterNote       $00
00090B12 01                         	dc.b	$01
00090B13 E104                       	smpsAlterNote       $04
00090B15 01                         	dc.b	$01
00090B16 E103                       	smpsAlterNote       $03
00090B18 01                         	dc.b	$01
00090B19 E1FD                       	smpsAlterNote       $FD
00090B1B 01                         	dc.b	$01
00090B1C ECF5                       	smpsPSGAlterVol     $F5
00090B1E 9407                       	dc.b	nG1, $07
00090B20 EC0B                       	smpsPSGAlterVol     $0B
00090B22 8004                       	dc.b	nRst, $04
00090B24 ECF5                       	smpsPSGAlterVol     $F5
00090B26 9406                       	dc.b	nG1, $06
00090B28 EC0B                       	smpsPSGAlterVol     $0B
00090B2A 8007                       	dc.b	nRst, $07
00090B2C E103                       	smpsAlterNote       $03
00090B2E 0101                       	dc.b	$01, $01
00090B30 E1FD                       	smpsAlterNote       $FD
00090B32 01                         	dc.b	$01
00090B33 E1F9                       	smpsAlterNote       $F9
00090B35 01                         	dc.b	$01
00090B36 E1FD                       	smpsAlterNote       $FD
00090B38 ECF5                       	smpsPSGAlterVol     $F5
00090B3A 9206                       	dc.b	nF1, $06
00090B3C EC04                       	smpsPSGAlterVol     $04
00090B3E E701                       	dc.b	smpsNoAttack, $01
00090B40 EC07                       	smpsPSGAlterVol     $07
00090B42 8003                       	dc.b	nRst, $03
00090B44 ECF5                       	smpsPSGAlterVol     $F5
00090B46 9206                       	dc.b	nF1, $06
00090B48 EC04                       	smpsPSGAlterVol     $04
00090B4A E701                       	dc.b	smpsNoAttack, $01
00090B4C EC07                       	smpsPSGAlterVol     $07
00090B4E 8006                       	dc.b	nRst, $06
00090B50 E100                       	smpsAlterNote       $00
00090B52 01                         	dc.b	$01
00090B53 E104                       	smpsAlterNote       $04
00090B55 01                         	dc.b	$01
00090B56 E100                       	smpsAlterNote       $00
00090B58 01                         	dc.b	$01
00090B59 E1FA                       	smpsAlterNote       $FA
00090B5B 01                         	dc.b	$01
00090B5C E1FD                       	smpsAlterNote       $FD
00090B5E ECF5                       	smpsPSGAlterVol     $F5
00090B60 9206                       	dc.b	nF1, $06
00090B62 EC04                       	smpsPSGAlterVol     $04
00090B64 E701                       	dc.b	smpsNoAttack, $01
00090B66 EC07                       	smpsPSGAlterVol     $07
00090B68 8003                       	dc.b	nRst, $03
00090B6A ECF5                       	smpsPSGAlterVol     $F5
00090B6C 9107                       	dc.b	nE1, $07
00090B6E EC0B                       	smpsPSGAlterVol     $0B
00090B70 8006                       	dc.b	nRst, $06
00090B72 E100                       	smpsAlterNote       $00
00090B74 01                         	dc.b	$01
00090B75 E103                       	smpsAlterNote       $03
00090B77 0101                       	dc.b	$01, $01
00090B79 E1FD                       	smpsAlterNote       $FD
00090B7B 01                         	dc.b	$01
00090B7C ECF5                       	smpsPSGAlterVol     $F5
00090B7E 9207                       	dc.b	nF1, $07
00090B80 EC0B                       	smpsPSGAlterVol     $0B
00090B82 8004                       	dc.b	nRst, $04
00090B84 ECF5                       	smpsPSGAlterVol     $F5
00090B86 9206                       	dc.b	nF1, $06
00090B88 EC04                       	smpsPSGAlterVol     $04
00090B8A E701                       	dc.b	smpsNoAttack, $01
00090B8C EC07                       	smpsPSGAlterVol     $07
00090B8E 8006                       	dc.b	nRst, $06
00090B90 E103                       	smpsAlterNote       $03
00090B92 01                         	dc.b	$01
00090B93 E104                       	smpsAlterNote       $04
00090B95 01                         	dc.b	$01
00090B96 E100                       	smpsAlterNote       $00
00090B98 01                         	dc.b	$01
00090B99 E1FB                       	smpsAlterNote       $FB
00090B9B 01                         	dc.b	$01
00090B9C E1FD                       	smpsAlterNote       $FD
00090B9E ECF5                       	smpsPSGAlterVol     $F5
00090BA0 9406                       	dc.b	nG1, $06
00090BA2 EC04                       	smpsPSGAlterVol     $04
00090BA4 E701                       	dc.b	smpsNoAttack, $01
00090BA6 EC07                       	smpsPSGAlterVol     $07
00090BA8 8003                       	dc.b	nRst, $03
00090BAA ECF5                       	smpsPSGAlterVol     $F5
00090BAC 9406                       	dc.b	nG1, $06
00090BAE EC04                       	smpsPSGAlterVol     $04
00090BB0 E701                       	dc.b	smpsNoAttack, $01
00090BB2 EC07                       	smpsPSGAlterVol     $07
00090BB4 8006                       	dc.b	nRst, $06
00090BB6 E100                       	smpsAlterNote       $00
00090BB8 01                         	dc.b	$01
00090BB9 E104                       	smpsAlterNote       $04
00090BBB 01                         	dc.b	$01
00090BBC E100                       	smpsAlterNote       $00
00090BBE 01                         	dc.b	$01
00090BBF E1FD                       	smpsAlterNote       $FD
00090BC1 01                         	dc.b	$01
00090BC2 ECF5                       	smpsPSGAlterVol     $F5
00090BC4 9206                       	dc.b	nF1, $06
00090BC6 EC04                       	smpsPSGAlterVol     $04
00090BC8 E701                       	dc.b	smpsNoAttack, $01
00090BCA EC07                       	smpsPSGAlterVol     $07
00090BCC 8003                       	dc.b	nRst, $03
00090BCE ECF5                       	smpsPSGAlterVol     $F5
00090BD0 9207                       	dc.b	nF1, $07
00090BD2 EC0B                       	smpsPSGAlterVol     $0B
00090BD4 8007                       	dc.b	nRst, $07
00090BD6 E103                       	smpsAlterNote       $03
00090BD8 0101                       	dc.b	$01, $01
00090BDA E1FD                       	smpsAlterNote       $FD
00090BDC 01                         	dc.b	$01
00090BDD E1FA                       	smpsAlterNote       $FA
00090BDF 01                         	dc.b	$01
00090BE0 E1FD                       	smpsAlterNote       $FD
00090BE2 ECF5                       	smpsPSGAlterVol     $F5
00090BE4 9206                       	dc.b	nF1, $06
00090BE6 EC0B                       	smpsPSGAlterVol     $0B
00090BE8 8004                       	dc.b	nRst, $04
00090BEA ECF5                       	smpsPSGAlterVol     $F5
00090BEC 9206                       	dc.b	nF1, $06
00090BEE EC04                       	smpsPSGAlterVol     $04
00090BF0 E701                       	dc.b	smpsNoAttack, $01
00090BF2 EC07                       	smpsPSGAlterVol     $07
00090BF4 8006                       	dc.b	nRst, $06
00090BF6 E100                       	smpsAlterNote       $00
00090BF8 01                         	dc.b	$01
00090BF9 E104                       	smpsAlterNote       $04
00090BFB 01                         	dc.b	$01
00090BFC E100                       	smpsAlterNote       $00
00090BFE 01                         	dc.b	$01
00090BFF E1FA                       	smpsAlterNote       $FA
00090C01 01                         	dc.b	$01
00090C02 E1FD                       	smpsAlterNote       $FD
00090C04 ECF5                       	smpsPSGAlterVol     $F5
00090C06 9206                       	dc.b	nF1, $06
00090C08 EC04                       	smpsPSGAlterVol     $04
00090C0A E704                       	dc.b	smpsNoAttack, $04
00090C0C ECFC                       	smpsPSGAlterVol     $FC
00090C0E 9207                       	dc.b	nF1, $07
00090C10 EC0B                       	smpsPSGAlterVol     $0B
00090C12 8006                       	dc.b	nRst, $06
00090C14 E100                       	smpsAlterNote       $00
00090C16 01                         	dc.b	$01
00090C17 E104                       	smpsAlterNote       $04
00090C19 01                         	dc.b	$01
00090C1A E103                       	smpsAlterNote       $03
00090C1C 01                         	dc.b	$01
00090C1D E1FD                       	smpsAlterNote       $FD
00090C1F 01                         	dc.b	$01
00090C20 ECF5                       	smpsPSGAlterVol     $F5
00090C22 9207                       	dc.b	nF1, $07
00090C24 EC0B                       	smpsPSGAlterVol     $0B
00090C26 8004                       	dc.b	nRst, $04
00090C28 ECF5                       	smpsPSGAlterVol     $F5
00090C2A 9206                       	dc.b	nF1, $06
00090C2C EC0B                       	smpsPSGAlterVol     $0B
00090C2E 8007                       	dc.b	nRst, $07
00090C30 E103                       	smpsAlterNote       $03
00090C32 0101                       	dc.b	$01, $01
00090C34 E100                       	smpsAlterNote       $00
00090C36 01                         	dc.b	$01
00090C37 E1FA                       	smpsAlterNote       $FA
00090C39 01                         	dc.b	$01
00090C3A E1FD                       	smpsAlterNote       $FD
00090C3C ECF5                       	smpsPSGAlterVol     $F5
00090C3E 9206                       	dc.b	nF1, $06
00090C40 EC04                       	smpsPSGAlterVol     $04
00090C42 E704                       	dc.b	smpsNoAttack, $04
00090C44 ECFC                       	smpsPSGAlterVol     $FC
00090C46 9206                       	dc.b	nF1, $06
00090C48 EC04                       	smpsPSGAlterVol     $04
00090C4A E701                       	dc.b	smpsNoAttack, $01
00090C4C EC07                       	smpsPSGAlterVol     $07
00090C4E 8006                       	dc.b	nRst, $06
00090C50 E100                       	smpsAlterNote       $00
00090C52 01                         	dc.b	$01
00090C53 E104                       	smpsAlterNote       $04
00090C55 01                         	dc.b	$01
00090C56 E100                       	smpsAlterNote       $00
00090C58 01                         	dc.b	$01
00090C59 E1FD                       	smpsAlterNote       $FD
00090C5B 01                         	dc.b	$01
00090C5C ECF5                       	smpsPSGAlterVol     $F5
00090C5E 9206                       	dc.b	nF1, $06
00090C60 EC04                       	smpsPSGAlterVol     $04
00090C62 E701                       	dc.b	smpsNoAttack, $01
00090C64 EC07                       	smpsPSGAlterVol     $07
00090C66 8003                       	dc.b	nRst, $03
00090C68 ECF5                       	smpsPSGAlterVol     $F5
00090C6A 9207                       	dc.b	nF1, $07
00090C6C EC0B                       	smpsPSGAlterVol     $0B
00090C6E 8007                       	dc.b	nRst, $07
00090C70 E103                       	smpsAlterNote       $03
00090C72 0101                       	dc.b	$01, $01
00090C74 E1FD                       	smpsAlterNote       $FD
00090C76 01                         	dc.b	$01
00090C77 E1FA                       	smpsAlterNote       $FA
00090C79 01                         	dc.b	$01
00090C7A E1FD                       	smpsAlterNote       $FD
00090C7C ECF5                       	smpsPSGAlterVol     $F5
00090C7E 9106                       	dc.b	nE1, $06
00090C80 EC0B                       	smpsPSGAlterVol     $0B
00090C82 8004                       	dc.b	nRst, $04
00090C84 ECF5                       	smpsPSGAlterVol     $F5
00090C86 9106                       	dc.b	nE1, $06
00090C88 EC04                       	smpsPSGAlterVol     $04
00090C8A E701                       	dc.b	smpsNoAttack, $01
00090C8C EC07                       	smpsPSGAlterVol     $07
00090C8E 8006                       	dc.b	nRst, $06
00090C90 E100                       	smpsAlterNote       $00
00090C92 01                         	dc.b	$01
00090C93 E104                       	smpsAlterNote       $04
00090C95 01                         	dc.b	$01
00090C96 E100                       	smpsAlterNote       $00
00090C98 01                         	dc.b	$01
00090C99 E1FA                       	smpsAlterNote       $FA
00090C9B 01                         	dc.b	$01
00090C9C E1FD                       	smpsAlterNote       $FD
00090C9E ECF5                       	smpsPSGAlterVol     $F5
00090CA0 9106                       	dc.b	nE1, $06
00090CA2 EC04                       	smpsPSGAlterVol     $04
00090CA4 E701                       	dc.b	smpsNoAttack, $01
00090CA6 EC07                       	smpsPSGAlterVol     $07
00090CA8 8003                       	dc.b	nRst, $03
00090CAA ECF5                       	smpsPSGAlterVol     $F5
00090CAC 9106                       	dc.b	nE1, $06
00090CAE EC04                       	smpsPSGAlterVol     $04
00090CB0 E701                       	dc.b	smpsNoAttack, $01
00090CB2 EC07                       	smpsPSGAlterVol     $07
00090CB4 8006                       	dc.b	nRst, $06
00090CB6 E100                       	smpsAlterNote       $00
00090CB8 01                         	dc.b	$01
00090CB9 E104                       	smpsAlterNote       $04
00090CBB 01                         	dc.b	$01
00090CBC E103                       	smpsAlterNote       $03
00090CBE 01                         	dc.b	$01
00090CBF E1FD                       	smpsAlterNote       $FD
00090CC1 01                         	dc.b	$01
00090CC2 ECF5                       	smpsPSGAlterVol     $F5
00090CC4 9107                       	dc.b	nE1, $07
00090CC6 EC0B                       	smpsPSGAlterVol     $0B
00090CC8 8004                       	dc.b	nRst, $04
00090CCA ECF5                       	smpsPSGAlterVol     $F5
00090CCC 9106                       	dc.b	nE1, $06
00090CCE EC0B                       	smpsPSGAlterVol     $0B
00090CD0 8007                       	dc.b	nRst, $07
00090CD2 E103                       	smpsAlterNote       $03
00090CD4 0101                       	dc.b	$01, $01
00090CD6 E100                       	smpsAlterNote       $00
00090CD8 01                         	dc.b	$01
00090CD9 E1FA                       	smpsAlterNote       $FA
00090CDB 01                         	dc.b	$01
00090CDC E1FD                       	smpsAlterNote       $FD
00090CDE ECF5                       	smpsPSGAlterVol     $F5
00090CE0 9106                       	dc.b	nE1, $06
00090CE2 EC04                       	smpsPSGAlterVol     $04
00090CE4 E701                       	dc.b	smpsNoAttack, $01
00090CE6 EC07                       	smpsPSGAlterVol     $07
00090CE8 8003                       	dc.b	nRst, $03
00090CEA ECF5                       	smpsPSGAlterVol     $F5
00090CEC 9106                       	dc.b	nE1, $06
00090CEE EC04                       	smpsPSGAlterVol     $04
00090CF0 E701                       	dc.b	smpsNoAttack, $01
00090CF2 EC07                       	smpsPSGAlterVol     $07
00090CF4 8003                       	dc.b	nRst, $03
00090CF6 ECF5                       	smpsPSGAlterVol     $F5
00090CF8 9207                       	dc.b	nF1, $07
00090CFA EC0B                       	smpsPSGAlterVol     $0B
00090CFC 8006                       	dc.b	nRst, $06
00090CFE E100                       	smpsAlterNote       $00
00090D00 01                         	dc.b	$01
00090D01 E104                       	smpsAlterNote       $04
00090D03 01                         	dc.b	$01
00090D04 E103                       	smpsAlterNote       $03
00090D06 01                         	dc.b	$01
00090D07 E1FD                       	smpsAlterNote       $FD
00090D09 01                         	dc.b	$01
00090D0A E1F9                       	smpsAlterNote       $F9
00090D0C 01                         	dc.b	$01
00090D0D E1FD                       	smpsAlterNote       $FD
00090D0F 01                         	dc.b	$01
00090D10 E100                       	smpsAlterNote       $00
00090D12 01                         	dc.b	$01
00090D13 E104                       	smpsAlterNote       $04
00090D15 01                         	dc.b	$01
00090D16 E1FD                       	smpsAlterNote       $FD
00090D18 ECF5                       	smpsPSGAlterVol     $F5
00090D1A 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090D1E EC04                       	smpsPSGAlterVol     $04
00090D20 E701                       	dc.b	smpsNoAttack, $01
00090D22 EC07                       	smpsPSGAlterVol     $07
00090D24 8009                       	dc.b	nRst, $09
00090D26 E100                       	smpsAlterNote       $00
00090D28 01                         	dc.b	$01
00090D29 E104                       	smpsAlterNote       $04
00090D2B 01                         	dc.b	$01
00090D2C E103                       	smpsAlterNote       $03
00090D2E 01                         	dc.b	$01
00090D2F E1FD                       	smpsAlterNote       $FD
00090D31 01                         	dc.b	$01
00090D32 E1F9                       	smpsAlterNote       $F9
00090D34 01                         	dc.b	$01
00090D35 E1FD                       	smpsAlterNote       $FD
00090D37 01                         	dc.b	$01
00090D38 E100                       	smpsAlterNote       $00
00090D3A 01                         	dc.b	$01
00090D3B E104                       	smpsAlterNote       $04
00090D3D 01                         	dc.b	$01
00090D3E E100                       	smpsAlterNote       $00
00090D40 01                         	dc.b	$01
00090D41 E1FA                       	smpsAlterNote       $FA
00090D43 01                         	dc.b	$01
00090D44 E1F9                       	smpsAlterNote       $F9
00090D46 01                         	dc.b	$01
00090D47 E1FD                       	smpsAlterNote       $FD
00090D49 01                         	dc.b	$01
00090D4A E103                       	smpsAlterNote       $03
00090D4C 0101                       	dc.b	$01, $01
00090D4E E100                       	smpsAlterNote       $00
00090D50 01                         	dc.b	$01
00090D51 E1FD                       	smpsAlterNote       $FD
00090D53 ECF5                       	smpsPSGAlterVol     $F5
00090D55 9202                       	dc.b	nF1, $02
00090D57 EC04                       	smpsPSGAlterVol     $04
00090D59 E701                       	dc.b	smpsNoAttack, $01
00090D5B ECFC                       	smpsPSGAlterVol     $FC
00090D5D 9106                       	dc.b	nE1, $06
00090D5F EC04                       	smpsPSGAlterVol     $04
00090D61 E701                       	dc.b	smpsNoAttack, $01
00090D63 EC07                       	smpsPSGAlterVol     $07
00090D65 8006                       	dc.b	nRst, $06
00090D67 E100                       	smpsAlterNote       $00
00090D69 01                         	dc.b	$01
00090D6A E104                       	smpsAlterNote       $04
00090D6C 01                         	dc.b	$01
00090D6D E100                       	smpsAlterNote       $00
00090D6F 01                         	dc.b	$01
00090D70 E1FD                       	smpsAlterNote       $FD
00090D72 01                         	dc.b	$01
00090D73 E1F9                       	smpsAlterNote       $F9
00090D75 01                         	dc.b	$01
00090D76 E1FD                       	smpsAlterNote       $FD
00090D78 01                         	dc.b	$01
00090D79 E103                       	smpsAlterNote       $03
00090D7B 01                         	dc.b	$01
00090D7C E104                       	smpsAlterNote       $04
00090D7E 01                         	dc.b	$01
00090D7F E1FD                       	smpsAlterNote       $FD
00090D81 ECF5                       	smpsPSGAlterVol     $F5
00090D83 9102                       	dc.b	nE1, $02
00090D85 EC04                       	smpsPSGAlterVol     $04
00090D87 E701                       	dc.b	smpsNoAttack, $01
00090D89 ECFC                       	smpsPSGAlterVol     $FC
00090D8B 920D                       	dc.b	nF1, $0D
00090D8D E100                       	smpsAlterNote       $00
00090D8F E701                       	dc.b	smpsNoAttack, $01
00090D91 E104                       	smpsAlterNote       $04
00090D93 E701                       	dc.b	smpsNoAttack, $01
00090D95 E100                       	smpsAlterNote       $00
00090D97 E701                       	dc.b	smpsNoAttack, $01
00090D99 E1FD                       	smpsAlterNote       $FD
00090D9B E701                       	dc.b	smpsNoAttack, $01
00090D9D E1F9                       	smpsAlterNote       $F9
00090D9F E701                       	dc.b	smpsNoAttack, $01
00090DA1 E1FD                       	smpsAlterNote       $FD
00090DA3 E701                       	dc.b	smpsNoAttack, $01
00090DA5 E103                       	smpsAlterNote       $03
00090DA7 E701                       	dc.b	smpsNoAttack, $01
00090DA9 E104                       	smpsAlterNote       $04
00090DAB E701                       	dc.b	smpsNoAttack, $01
00090DAD E100                       	smpsAlterNote       $00
00090DAF E701                       	dc.b	smpsNoAttack, $01
00090DB1 E1FA                       	smpsAlterNote       $FA
00090DB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090DB7 E1FD                       	smpsAlterNote       $FD
00090DB9 E701                       	dc.b	smpsNoAttack, $01
00090DBB E103                       	smpsAlterNote       $03
00090DBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090DC1 E1FD                       	smpsAlterNote       $FD
00090DC3 E701                       	dc.b	smpsNoAttack, $01
00090DC5 E1F9                       	smpsAlterNote       $F9
00090DC7 E701                       	dc.b	smpsNoAttack, $01
00090DC9 E1FA                       	smpsAlterNote       $FA
00090DCB E701                       	dc.b	smpsNoAttack, $01
00090DCD E100                       	smpsAlterNote       $00
00090DCF EC04                       	smpsPSGAlterVol     $04
00090DD1 E701                       	dc.b	smpsNoAttack, $01
00090DD3 EC07                       	smpsPSGAlterVol     $07
00090DD5 E104                       	smpsAlterNote       $04
00090DD7 8001                       	dc.b	nRst, $01
00090DD9 E100                       	smpsAlterNote       $00
00090DDB 01                         	dc.b	$01
00090DDC E1FD                       	smpsAlterNote       $FD
00090DDE 01                         	dc.b	$01
00090DDF E1F9                       	smpsAlterNote       $F9
00090DE1 01                         	dc.b	$01
00090DE2 E1FD                       	smpsAlterNote       $FD
00090DE4 01                         	dc.b	$01
00090DE5 E103                       	smpsAlterNote       $03
00090DE7 01                         	dc.b	$01
00090DE8 E104                       	smpsAlterNote       $04
00090DEA 01                         	dc.b	$01
00090DEB E1FD                       	smpsAlterNote       $FD
00090DED ECF5                       	smpsPSGAlterVol     $F5
00090DEF 9106                       	dc.b	nE1, $06
00090DF1 EC04                       	smpsPSGAlterVol     $04
00090DF3 E701                       	dc.b	smpsNoAttack, $01
00090DF5 EC07                       	smpsPSGAlterVol     $07
00090DF7 8003                       	dc.b	nRst, $03
00090DF9 ECF5                       	smpsPSGAlterVol     $F5
00090DFB 9106                       	dc.b	nE1, $06
00090DFD EC04                       	smpsPSGAlterVol     $04
00090DFF E701                       	dc.b	smpsNoAttack, $01
00090E01 EC07                       	smpsPSGAlterVol     $07
00090E03 8006                       	dc.b	nRst, $06
00090E05 E100                       	smpsAlterNote       $00
00090E07 01                         	dc.b	$01
00090E08 E104                       	smpsAlterNote       $04
00090E0A 01                         	dc.b	$01
00090E0B E100                       	smpsAlterNote       $00
00090E0D 01                         	dc.b	$01
00090E0E E1FA                       	smpsAlterNote       $FA
00090E10 01                         	dc.b	$01
00090E11 E1FD                       	smpsAlterNote       $FD
00090E13 ECF5                       	smpsPSGAlterVol     $F5
00090E15 9206                       	dc.b	nF1, $06
00090E17 EC04                       	smpsPSGAlterVol     $04
00090E19 E701                       	dc.b	smpsNoAttack, $01
00090E1B EC07                       	smpsPSGAlterVol     $07
00090E1D 8003                       	dc.b	nRst, $03
00090E1F ECF5                       	smpsPSGAlterVol     $F5
00090E21 9207                       	dc.b	nF1, $07
00090E23 EC0B                       	smpsPSGAlterVol     $0B
00090E25 8006                       	dc.b	nRst, $06
00090E27 E100                       	smpsAlterNote       $00
00090E29 01                         	dc.b	$01
00090E2A E103                       	smpsAlterNote       $03
00090E2C 0101                       	dc.b	$01, $01
00090E2E E1FD                       	smpsAlterNote       $FD
00090E30 01                         	dc.b	$01
00090E31 ECF5                       	smpsPSGAlterVol     $F5
00090E33 9107                       	dc.b	nE1, $07
00090E35 EC0B                       	smpsPSGAlterVol     $0B
00090E37 8004                       	dc.b	nRst, $04
00090E39 ECF5                       	smpsPSGAlterVol     $F5
00090E3B 9106                       	dc.b	nE1, $06
00090E3D EC04                       	smpsPSGAlterVol     $04
00090E3F E701                       	dc.b	smpsNoAttack, $01
00090E41 EC07                       	smpsPSGAlterVol     $07
00090E43 8006                       	dc.b	nRst, $06
00090E45 E103                       	smpsAlterNote       $03
00090E47 01                         	dc.b	$01
00090E48 E104                       	smpsAlterNote       $04
00090E4A 01                         	dc.b	$01
00090E4B E100                       	smpsAlterNote       $00
00090E4D 01                         	dc.b	$01
00090E4E E1FA                       	smpsAlterNote       $FA
00090E50 01                         	dc.b	$01
00090E51 E1FD                       	smpsAlterNote       $FD
00090E53 ECF5                       	smpsPSGAlterVol     $F5
00090E55 9106                       	dc.b	nE1, $06
00090E57 EC04                       	smpsPSGAlterVol     $04
00090E59 E701                       	dc.b	smpsNoAttack, $01
00090E5B EC07                       	smpsPSGAlterVol     $07
00090E5D 8003                       	dc.b	nRst, $03
00090E5F ECF5                       	smpsPSGAlterVol     $F5
00090E61 9106                       	dc.b	nE1, $06
00090E63 EC04                       	smpsPSGAlterVol     $04
00090E65 E701                       	dc.b	smpsNoAttack, $01
00090E67 EC07                       	smpsPSGAlterVol     $07
00090E69 8003                       	dc.b	nRst, $03
00090E6B ECF5                       	smpsPSGAlterVol     $F5
00090E6D 9207                       	dc.b	nF1, $07
00090E6F EC0B                       	smpsPSGAlterVol     $0B
00090E71 8006                       	dc.b	nRst, $06
00090E73 E100                       	smpsAlterNote       $00
00090E75 01                         	dc.b	$01
00090E76 E103                       	smpsAlterNote       $03
00090E78 0101                       	dc.b	$01, $01
00090E7A E1FD                       	smpsAlterNote       $FD
00090E7C 01                         	dc.b	$01
00090E7D E1F9                       	smpsAlterNote       $F9
00090E7F 01                         	dc.b	$01
00090E80 E1FA                       	smpsAlterNote       $FA
00090E82 01                         	dc.b	$01
00090E83 E100                       	smpsAlterNote       $00
00090E85 01                         	dc.b	$01
00090E86 E104                       	smpsAlterNote       $04
00090E88 01                         	dc.b	$01
00090E89 E1FD                       	smpsAlterNote       $FD
00090E8B ECF5                       	smpsPSGAlterVol     $F5
00090E8D 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090E91 EC04                       	smpsPSGAlterVol     $04
00090E93 E701                       	dc.b	smpsNoAttack, $01
00090E95 EC07                       	smpsPSGAlterVol     $07
00090E97 8009                       	dc.b	nRst, $09
00090E99 E100                       	smpsAlterNote       $00
00090E9B 01                         	dc.b	$01
00090E9C E103                       	smpsAlterNote       $03
00090E9E 0101                       	dc.b	$01, $01
00090EA0 E1FD                       	smpsAlterNote       $FD
00090EA2 01                         	dc.b	$01
00090EA3 E1F9                       	smpsAlterNote       $F9
00090EA5 01                         	dc.b	$01
00090EA6 E1FA                       	smpsAlterNote       $FA
00090EA8 01                         	dc.b	$01
00090EA9 E100                       	smpsAlterNote       $00
00090EAB 01                         	dc.b	$01
00090EAC E104                       	smpsAlterNote       $04
00090EAE 01                         	dc.b	$01
00090EAF E100                       	smpsAlterNote       $00
00090EB1 01                         	dc.b	$01
00090EB2 E1FD                       	smpsAlterNote       $FD
00090EB4 01                         	dc.b	$01
00090EB5 E1F9                       	smpsAlterNote       $F9
00090EB7 01                         	dc.b	$01
00090EB8 E1FD                       	smpsAlterNote       $FD
00090EBA 01                         	dc.b	$01
00090EBB E103                       	smpsAlterNote       $03
00090EBD 01                         	dc.b	$01
00090EBE E104                       	smpsAlterNote       $04
00090EC0 01                         	dc.b	$01
00090EC1 E100                       	smpsAlterNote       $00
00090EC3 01                         	dc.b	$01
00090EC4 E1FD                       	smpsAlterNote       $FD
00090EC6 ECF5                       	smpsPSGAlterVol     $F5
00090EC8 9203 9106                  	dc.b	nF1, $03, nE1, $06
00090ECC EC04                       	smpsPSGAlterVol     $04
00090ECE E701                       	dc.b	smpsNoAttack, $01
00090ED0 EC07                       	smpsPSGAlterVol     $07
00090ED2 8006                       	dc.b	nRst, $06
00090ED4 E100                       	smpsAlterNote       $00
00090ED6 01                         	dc.b	$01
00090ED7 E104                       	smpsAlterNote       $04
00090ED9 01                         	dc.b	$01
00090EDA E103                       	smpsAlterNote       $03
00090EDC 01                         	dc.b	$01
00090EDD E1FD                       	smpsAlterNote       $FD
00090EDF 01                         	dc.b	$01
00090EE0 E1F9                       	smpsAlterNote       $F9
00090EE2 01                         	dc.b	$01
00090EE3 E1FD                       	smpsAlterNote       $FD
00090EE5 01                         	dc.b	$01
00090EE6 E100                       	smpsAlterNote       $00
00090EE8 01                         	dc.b	$01
00090EE9 E104                       	smpsAlterNote       $04
00090EEB 01                         	dc.b	$01
00090EEC E1FD                       	smpsAlterNote       $FD
00090EEE ECF5                       	smpsPSGAlterVol     $F5
00090EF0 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090EF4 E100                       	smpsAlterNote       $00
00090EF6 E701                       	dc.b	smpsNoAttack, $01
00090EF8 E104                       	smpsAlterNote       $04
00090EFA E701                       	dc.b	smpsNoAttack, $01
00090EFC E100                       	smpsAlterNote       $00
00090EFE E701                       	dc.b	smpsNoAttack, $01
00090F00 E1FD                       	smpsAlterNote       $FD
00090F02 E701                       	dc.b	smpsNoAttack, $01
00090F04 E1F9                       	smpsAlterNote       $F9
00090F06 E701                       	dc.b	smpsNoAttack, $01
00090F08 E1FD                       	smpsAlterNote       $FD
00090F0A E701                       	dc.b	smpsNoAttack, $01
00090F0C E103                       	smpsAlterNote       $03
00090F0E E701                       	dc.b	smpsNoAttack, $01
00090F10 E104                       	smpsAlterNote       $04
00090F12 E701                       	dc.b	smpsNoAttack, $01
00090F14 E100                       	smpsAlterNote       $00
00090F16 E701                       	dc.b	smpsNoAttack, $01
00090F18 E1FA                       	smpsAlterNote       $FA
00090F1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090F1E E1FD                       	smpsAlterNote       $FD
00090F20 E701                       	dc.b	smpsNoAttack, $01
00090F22 E103                       	smpsAlterNote       $03
00090F24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090F28 E100                       	smpsAlterNote       $00
00090F2A E701                       	dc.b	smpsNoAttack, $01
00090F2C E1FA                       	smpsAlterNote       $FA
00090F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090F32 E100                       	smpsAlterNote       $00
00090F34 EC04                       	smpsPSGAlterVol     $04
00090F36 E701                       	dc.b	smpsNoAttack, $01
00090F38 EC07                       	smpsPSGAlterVol     $07
00090F3A E104                       	smpsAlterNote       $04
00090F3C 8001                       	dc.b	nRst, $01
00090F3E E103                       	smpsAlterNote       $03
00090F40 01                         	dc.b	$01
00090F41 E1FD                       	smpsAlterNote       $FD
00090F43 01                         	dc.b	$01
00090F44 E1F9                       	smpsAlterNote       $F9
00090F46 01                         	dc.b	$01
00090F47 E1FD                       	smpsAlterNote       $FD
00090F49 01                         	dc.b	$01
00090F4A E100                       	smpsAlterNote       $00
00090F4C 01                         	dc.b	$01
00090F4D E104                       	smpsAlterNote       $04
00090F4F 01                         	dc.b	$01
00090F50 E1FD                       	smpsAlterNote       $FD
00090F52 ECF5                       	smpsPSGAlterVol     $F5
00090F54 9106                       	dc.b	nE1, $06
00090F56 EC04                       	smpsPSGAlterVol     $04
00090F58 E701                       	dc.b	smpsNoAttack, $01
00090F5A EC07                       	smpsPSGAlterVol     $07
00090F5C 8003                       	dc.b	nRst, $03
00090F5E ECF5                       	smpsPSGAlterVol     $F5
00090F60 9106                       	dc.b	nE1, $06
00090F62 EC04                       	smpsPSGAlterVol     $04
00090F64 E701                       	dc.b	smpsNoAttack, $01
00090F66 EC07                       	smpsPSGAlterVol     $07
00090F68 8006                       	dc.b	nRst, $06
00090F6A E100                       	smpsAlterNote       $00
00090F6C 01                         	dc.b	$01
00090F6D E104                       	smpsAlterNote       $04
00090F6F 01                         	dc.b	$01
00090F70 E100                       	smpsAlterNote       $00
00090F72 01                         	dc.b	$01
00090F73 E1FD                       	smpsAlterNote       $FD
00090F75 01                         	dc.b	$01
00090F76 ECF5                       	smpsPSGAlterVol     $F5
00090F78 9206                       	dc.b	nF1, $06
00090F7A EC04                       	smpsPSGAlterVol     $04
00090F7C E701                       	dc.b	smpsNoAttack, $01
00090F7E EC07                       	smpsPSGAlterVol     $07
00090F80 8003                       	dc.b	nRst, $03
00090F82 ECF5                       	smpsPSGAlterVol     $F5
00090F84 9207                       	dc.b	nF1, $07
00090F86 EC0B                       	smpsPSGAlterVol     $0B
00090F88 8007                       	dc.b	nRst, $07
00090F8A E103                       	smpsAlterNote       $03
00090F8C 0101                       	dc.b	$01, $01
00090F8E E1FD                       	smpsAlterNote       $FD
00090F90 01                         	dc.b	$01
00090F91 E1FA                       	smpsAlterNote       $FA
00090F93 01                         	dc.b	$01
00090F94 E1FD                       	smpsAlterNote       $FD
00090F96 ECF5                       	smpsPSGAlterVol     $F5
00090F98 9106                       	dc.b	nE1, $06
00090F9A EC0B                       	smpsPSGAlterVol     $0B
00090F9C 8004                       	dc.b	nRst, $04
00090F9E ECF5                       	smpsPSGAlterVol     $F5
00090FA0 9106                       	dc.b	nE1, $06
00090FA2 EC04                       	smpsPSGAlterVol     $04
00090FA4 E701                       	dc.b	smpsNoAttack, $01
00090FA6 EC07                       	smpsPSGAlterVol     $07
00090FA8 8006                       	dc.b	nRst, $06
00090FAA E100                       	smpsAlterNote       $00
00090FAC 01                         	dc.b	$01
00090FAD E104                       	smpsAlterNote       $04
00090FAF 01                         	dc.b	$01
00090FB0 E100                       	smpsAlterNote       $00
00090FB2 01                         	dc.b	$01
00090FB3 E1FA                       	smpsAlterNote       $FA
00090FB5 01                         	dc.b	$01
00090FB6 E1FD                       	smpsAlterNote       $FD
00090FB8 ECF5                       	smpsPSGAlterVol     $F5
00090FBA 9206                       	dc.b	nF1, $06
00090FBC EC04                       	smpsPSGAlterVol     $04
00090FBE E701                       	dc.b	smpsNoAttack, $01
00090FC0 EC07                       	smpsPSGAlterVol     $07
00090FC2 8003                       	dc.b	nRst, $03
00090FC4 ECF5                       	smpsPSGAlterVol     $F5
00090FC6 9206                       	dc.b	nF1, $06
00090FC8 EC04                       	smpsPSGAlterVol     $04
00090FCA E701                       	dc.b	smpsNoAttack, $01
00090FCC EC07                       	smpsPSGAlterVol     $07
00090FCE 8006                       	dc.b	nRst, $06
00090FD0 E100                       	smpsAlterNote       $00
00090FD2 01                         	dc.b	$01
00090FD3 E104                       	smpsAlterNote       $04
00090FD5 01                         	dc.b	$01
00090FD6 E103                       	smpsAlterNote       $03
00090FD8 01                         	dc.b	$01
00090FD9 E1FD                       	smpsAlterNote       $FD
00090FDB 01                         	dc.b	$01
00090FDC ECF5                       	smpsPSGAlterVol     $F5
00090FDE 9107                       	dc.b	nE1, $07
00090FE0 EC0B                       	smpsPSGAlterVol     $0B
00090FE2 8004                       	dc.b	nRst, $04
00090FE4 ECF5                       	smpsPSGAlterVol     $F5
00090FE6 9106                       	dc.b	nE1, $06
00090FE8 EC0B                       	smpsPSGAlterVol     $0B
00090FEA 8007                       	dc.b	nRst, $07
00090FEC E103                       	smpsAlterNote       $03
00090FEE 0101                       	dc.b	$01, $01
00090FF0 E100                       	smpsAlterNote       $00
00090FF2 01                         	dc.b	$01
00090FF3 E1FA                       	smpsAlterNote       $FA
00090FF5 01                         	dc.b	$01
00090FF6 E1FD                       	smpsAlterNote       $FD
00090FF8 ECF5                       	smpsPSGAlterVol     $F5
00090FFA 9206                       	dc.b	nF1, $06
00090FFC EC04                       	smpsPSGAlterVol     $04
00090FFE E701                       	dc.b	smpsNoAttack, $01
00091000 EC07                       	smpsPSGAlterVol     $07
00091002 8003                       	dc.b	nRst, $03
00091004 ECF5                       	smpsPSGAlterVol     $F5
00091006 9206                       	dc.b	nF1, $06
00091008 EC04                       	smpsPSGAlterVol     $04
0009100A E701                       	dc.b	smpsNoAttack, $01
0009100C EC07                       	smpsPSGAlterVol     $07
0009100E 8006                       	dc.b	nRst, $06
00091010 E100                       	smpsAlterNote       $00
00091012 01                         	dc.b	$01
00091013 E104                       	smpsAlterNote       $04
00091015 01                         	dc.b	$01
00091016 E100                       	smpsAlterNote       $00
00091018 01                         	dc.b	$01
00091019 E1FD                       	smpsAlterNote       $FD
0009101B 01                         	dc.b	$01
0009101C ECF5                       	smpsPSGAlterVol     $F5
0009101E 9106                       	dc.b	nE1, $06
00091020 EC04                       	smpsPSGAlterVol     $04
00091022 E701                       	dc.b	smpsNoAttack, $01
00091024 EC07                       	smpsPSGAlterVol     $07
00091026 8003                       	dc.b	nRst, $03
00091028 ECF5                       	smpsPSGAlterVol     $F5
0009102A 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009102E EC04                       	smpsPSGAlterVol     $04
00091030 E701                       	dc.b	smpsNoAttack, $01
00091032 ECFC                       	smpsPSGAlterVol     $FC
00091034 9103                       	dc.b	nE1, $03
00091036 EC04                       	smpsPSGAlterVol     $04
00091038 E701                       	dc.b	smpsNoAttack, $01
0009103A ECFC                       	smpsPSGAlterVol     $FC
0009103C 9102                       	dc.b	nE1, $02
0009103E EC04                       	smpsPSGAlterVol     $04
00091040 E701                       	dc.b	smpsNoAttack, $01
00091042 ECFC                       	smpsPSGAlterVol     $FC
00091044 9103                       	dc.b	nE1, $03
00091046 EC0B                       	smpsPSGAlterVol     $0B
00091048 800A                       	dc.b	nRst, $0A
0009104A E100                       	smpsAlterNote       $00
0009104C 01                         	dc.b	$01
0009104D E104                       	smpsAlterNote       $04
0009104F 01                         	dc.b	$01
00091050 E100                       	smpsAlterNote       $00
00091052 01                         	dc.b	$01
00091053 E1FA                       	smpsAlterNote       $FA
00091055 01                         	dc.b	$01
00091056 E1F9                       	smpsAlterNote       $F9
00091058 01                         	dc.b	$01
00091059 E1FD                       	smpsAlterNote       $FD
0009105B 01                         	dc.b	$01
0009105C E103                       	smpsAlterNote       $03
0009105E 0101                       	dc.b	$01, $01
00091060 E100                       	smpsAlterNote       $00
00091062 01                         	dc.b	$01
00091063 E1FA                       	smpsAlterNote       $FA
00091065 0101                       	dc.b	$01, $01
00091067 E1FD                       	smpsAlterNote       $FD
00091069 ECF5                       	smpsPSGAlterVol     $F5
0009106B 9206                       	dc.b	nF1, $06
0009106D EC04                       	smpsPSGAlterVol     $04
0009106F E704                       	dc.b	smpsNoAttack, $04
00091071 ECFC                       	smpsPSGAlterVol     $FC
00091073 9206                       	dc.b	nF1, $06
00091075 EC04                       	smpsPSGAlterVol     $04
00091077 E701                       	dc.b	smpsNoAttack, $01
00091079 EC07                       	smpsPSGAlterVol     $07
0009107B 8006                       	dc.b	nRst, $06
0009107D E100                       	smpsAlterNote       $00
0009107F 01                         	dc.b	$01
00091080 E104                       	smpsAlterNote       $04
00091082 01                         	dc.b	$01
00091083 E103                       	smpsAlterNote       $03
00091085 01                         	dc.b	$01
00091086 E1FD                       	smpsAlterNote       $FD
00091088 01                         	dc.b	$01
00091089 ECF5                       	smpsPSGAlterVol     $F5
0009108B 9407                       	dc.b	nG1, $07
0009108D EC0B                       	smpsPSGAlterVol     $0B
0009108F 8004                       	dc.b	nRst, $04
00091091 ECF5                       	smpsPSGAlterVol     $F5
00091093 9406                       	dc.b	nG1, $06
00091095 EC0B                       	smpsPSGAlterVol     $0B
00091097 8007                       	dc.b	nRst, $07
00091099 E103                       	smpsAlterNote       $03
0009109B 0101                       	dc.b	$01, $01
0009109D E1FD                       	smpsAlterNote       $FD
0009109F 01                         	dc.b	$01
000910A0 E1F9                       	smpsAlterNote       $F9
000910A2 01                         	dc.b	$01
000910A3 E1FD                       	smpsAlterNote       $FD
000910A5 ECF5                       	smpsPSGAlterVol     $F5
000910A7 9206                       	dc.b	nF1, $06
000910A9 EC04                       	smpsPSGAlterVol     $04
000910AB E701                       	dc.b	smpsNoAttack, $01
000910AD EC07                       	smpsPSGAlterVol     $07
000910AF 8003                       	dc.b	nRst, $03
000910B1 ECF5                       	smpsPSGAlterVol     $F5
000910B3 9206                       	dc.b	nF1, $06
000910B5 EC04                       	smpsPSGAlterVol     $04
000910B7 E701                       	dc.b	smpsNoAttack, $01
000910B9 EC07                       	smpsPSGAlterVol     $07
000910BB 8006                       	dc.b	nRst, $06
000910BD E100                       	smpsAlterNote       $00
000910BF 01                         	dc.b	$01
000910C0 E104                       	smpsAlterNote       $04
000910C2 01                         	dc.b	$01
000910C3 E100                       	smpsAlterNote       $00
000910C5 01                         	dc.b	$01
000910C6 E1FA                       	smpsAlterNote       $FA
000910C8 01                         	dc.b	$01
000910C9 E1FD                       	smpsAlterNote       $FD
000910CB ECF5                       	smpsPSGAlterVol     $F5
000910CD 9206                       	dc.b	nF1, $06
000910CF EC04                       	smpsPSGAlterVol     $04
000910D1 E701                       	dc.b	smpsNoAttack, $01
000910D3 EC07                       	smpsPSGAlterVol     $07
000910D5 8003                       	dc.b	nRst, $03
000910D7 ECF5                       	smpsPSGAlterVol     $F5
000910D9 9107                       	dc.b	nE1, $07
000910DB EC0B                       	smpsPSGAlterVol     $0B
000910DD 8006                       	dc.b	nRst, $06
000910DF E100                       	smpsAlterNote       $00
000910E1 01                         	dc.b	$01
000910E2 E103                       	smpsAlterNote       $03
000910E4 0101                       	dc.b	$01, $01
000910E6 E1FD                       	smpsAlterNote       $FD
000910E8 01                         	dc.b	$01
000910E9 ECF5                       	smpsPSGAlterVol     $F5
000910EB 9207                       	dc.b	nF1, $07
000910ED EC0B                       	smpsPSGAlterVol     $0B
000910EF 8004                       	dc.b	nRst, $04
000910F1 ECF5                       	smpsPSGAlterVol     $F5
000910F3 9206                       	dc.b	nF1, $06
000910F5 EC04                       	smpsPSGAlterVol     $04
000910F7 E701                       	dc.b	smpsNoAttack, $01
000910F9 EC07                       	smpsPSGAlterVol     $07
000910FB 8006                       	dc.b	nRst, $06
000910FD E103                       	smpsAlterNote       $03
000910FF 01                         	dc.b	$01
00091100 E104                       	smpsAlterNote       $04
00091102 01                         	dc.b	$01
00091103 E100                       	smpsAlterNote       $00
00091105 01                         	dc.b	$01
00091106 E1FB                       	smpsAlterNote       $FB
00091108 01                         	dc.b	$01
00091109 E1FD                       	smpsAlterNote       $FD
0009110B ECF5                       	smpsPSGAlterVol     $F5
0009110D 9406                       	dc.b	nG1, $06
0009110F EC04                       	smpsPSGAlterVol     $04
00091111 E701                       	dc.b	smpsNoAttack, $01
00091113 EC07                       	smpsPSGAlterVol     $07
00091115 8003                       	dc.b	nRst, $03
00091117 ECF5                       	smpsPSGAlterVol     $F5
00091119 9406                       	dc.b	nG1, $06
0009111B EC04                       	smpsPSGAlterVol     $04
0009111D E701                       	dc.b	smpsNoAttack, $01
0009111F EC07                       	smpsPSGAlterVol     $07
00091121 8006                       	dc.b	nRst, $06
00091123 E100                       	smpsAlterNote       $00
00091125 01                         	dc.b	$01
00091126 E104                       	smpsAlterNote       $04
00091128 01                         	dc.b	$01
00091129 E100                       	smpsAlterNote       $00
0009112B 01                         	dc.b	$01
0009112C E1FD                       	smpsAlterNote       $FD
0009112E 01                         	dc.b	$01
0009112F ECF5                       	smpsPSGAlterVol     $F5
00091131 9206                       	dc.b	nF1, $06
00091133 EC04                       	smpsPSGAlterVol     $04
00091135 E701                       	dc.b	smpsNoAttack, $01
00091137 EC07                       	smpsPSGAlterVol     $07
00091139 8003                       	dc.b	nRst, $03
0009113B ECF5                       	smpsPSGAlterVol     $F5
0009113D 9207                       	dc.b	nF1, $07
0009113F EC0B                       	smpsPSGAlterVol     $0B
00091141 8007                       	dc.b	nRst, $07
00091143 E103                       	smpsAlterNote       $03
00091145 0101                       	dc.b	$01, $01
00091147 E1FD                       	smpsAlterNote       $FD
00091149 01                         	dc.b	$01
0009114A E1FA                       	smpsAlterNote       $FA
0009114C 01                         	dc.b	$01
0009114D E1FD                       	smpsAlterNote       $FD
0009114F ECF5                       	smpsPSGAlterVol     $F5
00091151 9206                       	dc.b	nF1, $06
00091153 EC0B                       	smpsPSGAlterVol     $0B
00091155 8004                       	dc.b	nRst, $04
00091157 ECF5                       	smpsPSGAlterVol     $F5
00091159 9206                       	dc.b	nF1, $06
0009115B EC04                       	smpsPSGAlterVol     $04
0009115D E701                       	dc.b	smpsNoAttack, $01
0009115F EC07                       	smpsPSGAlterVol     $07
00091161 8006                       	dc.b	nRst, $06
00091163 E100                       	smpsAlterNote       $00
00091165 01                         	dc.b	$01
00091166 E104                       	smpsAlterNote       $04
00091168 01                         	dc.b	$01
00091169 E100                       	smpsAlterNote       $00
0009116B 01                         	dc.b	$01
0009116C E1FA                       	smpsAlterNote       $FA
0009116E 01                         	dc.b	$01
0009116F E1FD                       	smpsAlterNote       $FD
00091171 ECF5                       	smpsPSGAlterVol     $F5
00091173 9206                       	dc.b	nF1, $06
00091175 EC04                       	smpsPSGAlterVol     $04
00091177 E701                       	dc.b	smpsNoAttack, $01
00091179 EC07                       	smpsPSGAlterVol     $07
0009117B 8003                       	dc.b	nRst, $03
0009117D ECF5                       	smpsPSGAlterVol     $F5
0009117F 9207                       	dc.b	nF1, $07
00091181 EC0B                       	smpsPSGAlterVol     $0B
00091183 8006                       	dc.b	nRst, $06
00091185 E100                       	smpsAlterNote       $00
00091187 01                         	dc.b	$01
00091188 E103                       	smpsAlterNote       $03
0009118A 0101                       	dc.b	$01, $01
0009118C E1FD                       	smpsAlterNote       $FD
0009118E 01                         	dc.b	$01
0009118F ECF5                       	smpsPSGAlterVol     $F5
00091191 9207                       	dc.b	nF1, $07
00091193 EC0B                       	smpsPSGAlterVol     $0B
00091195 8004                       	dc.b	nRst, $04
00091197 ECF5                       	smpsPSGAlterVol     $F5
00091199 9206                       	dc.b	nF1, $06
0009119B EC0B                       	smpsPSGAlterVol     $0B
0009119D 8007                       	dc.b	nRst, $07
0009119F E103                       	smpsAlterNote       $03
000911A1 0101                       	dc.b	$01, $01
000911A3 E100                       	smpsAlterNote       $00
000911A5 01                         	dc.b	$01
000911A6 E1FA                       	smpsAlterNote       $FA
000911A8 01                         	dc.b	$01
000911A9 E1FD                       	smpsAlterNote       $FD
000911AB ECF5                       	smpsPSGAlterVol     $F5
000911AD 9206                       	dc.b	nF1, $06
000911AF EC04                       	smpsPSGAlterVol     $04
000911B1 E701                       	dc.b	smpsNoAttack, $01
000911B3 EC07                       	smpsPSGAlterVol     $07
000911B5 8003                       	dc.b	nRst, $03
000911B7 ECF5                       	smpsPSGAlterVol     $F5
000911B9 9206                       	dc.b	nF1, $06
000911BB EC04                       	smpsPSGAlterVol     $04
000911BD E701                       	dc.b	smpsNoAttack, $01
000911BF EC07                       	smpsPSGAlterVol     $07
000911C1 8006                       	dc.b	nRst, $06
000911C3 E100                       	smpsAlterNote       $00
000911C5 01                         	dc.b	$01
000911C6 E104                       	smpsAlterNote       $04
000911C8 01                         	dc.b	$01
000911C9 E100                       	smpsAlterNote       $00
000911CB 01                         	dc.b	$01
000911CC E1FD                       	smpsAlterNote       $FD
000911CE 01                         	dc.b	$01
000911CF ECF5                       	smpsPSGAlterVol     $F5
000911D1 9206                       	dc.b	nF1, $06
000911D3 EC04                       	smpsPSGAlterVol     $04
000911D5 E701                       	dc.b	smpsNoAttack, $01
000911D7 EC07                       	smpsPSGAlterVol     $07
000911D9 8003                       	dc.b	nRst, $03
000911DB ECF5                       	smpsPSGAlterVol     $F5
000911DD 9207                       	dc.b	nF1, $07
000911DF EC0B                       	smpsPSGAlterVol     $0B
000911E1 8007                       	dc.b	nRst, $07
000911E3 E104                       	smpsAlterNote       $04
000911E5 0101                       	dc.b	$01, $01
000911E7 E1FB                       	smpsAlterNote       $FB
000911E9 01                         	dc.b	$01
000911EA E1F6                       	smpsAlterNote       $F6
000911EC 0101                       	dc.b	$01, $01
000911EE E1FF                       	smpsAlterNote       $FF
000911F0 01                         	dc.b	$01
000911F1 E105                       	smpsAlterNote       $05
000911F3 01                         	dc.b	$01
000911F4 E104                       	smpsAlterNote       $04
000911F6 01                         	dc.b	$01
000911F7 E1FB                       	smpsAlterNote       $FB
000911F9 01                         	dc.b	$01
000911FA E1F5                       	smpsAlterNote       $F5
000911FC 01                         	dc.b	$01
000911FD E1FC                       	smpsAlterNote       $FC
000911FF ECF5                       	smpsPSGAlterVol     $F5
00091201 8B0E                       	dc.b	nBb0, $0E
00091203 E102                       	smpsAlterNote       $02
00091205 EC0B                       	smpsPSGAlterVol     $0B
00091207 8001                       	dc.b	nRst, $01
00091209 E101                       	smpsAlterNote       $01
0009120B 01                         	dc.b	$01
0009120C E1FC                       	smpsAlterNote       $FC
0009120E 01                         	dc.b	$01
0009120F E1F9                       	smpsAlterNote       $F9
00091211 0101                       	dc.b	$01, $01
00091213 E1FF                       	smpsAlterNote       $FF
00091215 01                         	dc.b	$01
00091216 E102                       	smpsAlterNote       $02
00091218 01                         	dc.b	$01
00091219 E1FF                       	smpsAlterNote       $FF
0009121B 01                         	dc.b	$01
0009121C E1FC                       	smpsAlterNote       $FC
0009121E 01                         	dc.b	$01
0009121F E1F8                       	smpsAlterNote       $F8
00091221 01                         	dc.b	$01
00091222 E1FC                       	smpsAlterNote       $FC
00091224 01                         	dc.b	$01
00091225 E101                       	smpsAlterNote       $01
00091227 01                         	dc.b	$01
00091228 E102                       	smpsAlterNote       $02
0009122A 01                         	dc.b	$01
0009122B E1FF                       	smpsAlterNote       $FF
0009122D 01                         	dc.b	$01
0009122E E1FB                       	smpsAlterNote       $FB
00091230 ECF5                       	smpsPSGAlterVol     $F5
00091232 8D0D                       	dc.b	nC1, $0D
00091234 E101                       	smpsAlterNote       $01
00091236 EC0B                       	smpsPSGAlterVol     $0B
00091238 8001                       	dc.b	nRst, $01
0009123A E102                       	smpsAlterNote       $02
0009123C 01                         	dc.b	$01
0009123D E1FF                       	smpsAlterNote       $FF
0009123F 01                         	dc.b	$01
00091240 E1F9                       	smpsAlterNote       $F9
00091242 0101                       	dc.b	$01, $01
00091244 E1FC                       	smpsAlterNote       $FC
00091246 01                         	dc.b	$01
00091247 E101                       	smpsAlterNote       $01
00091249 0101                       	dc.b	$01, $01
0009124B E1FC                       	smpsAlterNote       $FC
0009124D 01                         	dc.b	$01
0009124E E1F9                       	smpsAlterNote       $F9
00091250 0101                       	dc.b	$01, $01
00091252 E1FF                       	smpsAlterNote       $FF
00091254 01                         	dc.b	$01
00091255 E102                       	smpsAlterNote       $02
00091257 01                         	dc.b	$01
00091258 E101                       	smpsAlterNote       $01
0009125A 01                         	dc.b	$01
0009125B E1FC                       	smpsAlterNote       $FC
0009125D ECF5                       	smpsPSGAlterVol     $F5
0009125F 8F0D                       	dc.b	nD1, $0D
00091261 E1FF                       	smpsAlterNote       $FF
00091263 EC04                       	smpsPSGAlterVol     $04
00091265 E701                       	dc.b	smpsNoAttack, $01
00091267 EC07                       	smpsPSGAlterVol     $07
00091269 E103                       	smpsAlterNote       $03
0009126B 8001                       	dc.b	nRst, $01
0009126D E102                       	smpsAlterNote       $02
0009126F 01                         	dc.b	$01
00091270 E1FD                       	smpsAlterNote       $FD
00091272 01                         	dc.b	$01
00091273 E1F9                       	smpsAlterNote       $F9
00091275 01                         	dc.b	$01
00091276 E1FD                       	smpsAlterNote       $FD
00091278 01                         	dc.b	$01
00091279 E100                       	smpsAlterNote       $00
0009127B 01                         	dc.b	$01
0009127C E103                       	smpsAlterNote       $03
0009127E 01                         	dc.b	$01
0009127F E100                       	smpsAlterNote       $00
00091281 01                         	dc.b	$01
00091282 E1FA                       	smpsAlterNote       $FA
00091284 01                         	dc.b	$01
00091285 E1F9                       	smpsAlterNote       $F9
00091287 01                         	dc.b	$01
00091288 E1FD                       	smpsAlterNote       $FD
0009128A 01                         	dc.b	$01
0009128B E102                       	smpsAlterNote       $02
0009128D 0101                       	dc.b	$01, $01
0009128F E100                       	smpsAlterNote       $00
00091291 01                         	dc.b	$01
00091292 E1FD                       	smpsAlterNote       $FD
00091294 ECF5                       	smpsPSGAlterVol     $F5
00091296 910D                       	dc.b	nE1, $0D
00091298 E103                       	smpsAlterNote       $03
0009129A EC0B                       	smpsPSGAlterVol     $0B
0009129C 8001 01                    	dc.b	nRst, $01, $01
0009129F E100                       	smpsAlterNote       $00
000912A1 01                         	dc.b	$01
000912A2 E1FA                       	smpsAlterNote       $FA
000912A4 0101                       	dc.b	$01, $01
000912A6 E100                       	smpsAlterNote       $00
000912A8 01                         	dc.b	$01
000912A9 E103                       	smpsAlterNote       $03
000912AB 01                         	dc.b	$01
000912AC E1FD                       	smpsAlterNote       $FD
000912AE ECF5                       	smpsPSGAlterVol     $F5
000912B0 9206                       	dc.b	nF1, $06
000912B2 EC04                       	smpsPSGAlterVol     $04
000912B4 E701                       	dc.b	smpsNoAttack, $01
000912B6 EC07                       	smpsPSGAlterVol     $07
000912B8 8003                       	dc.b	nRst, $03
000912BA ECF5                       	smpsPSGAlterVol     $F5
000912BC 9207                       	dc.b	nF1, $07
000912BE EC0B                       	smpsPSGAlterVol     $0B
000912C0 8006                       	dc.b	nRst, $06
000912C2 E100                       	smpsAlterNote       $00
000912C4 01                         	dc.b	$01
000912C5 E103                       	smpsAlterNote       $03
000912C7 0101                       	dc.b	$01, $01
000912C9 E1FD                       	smpsAlterNote       $FD
000912CB 01                         	dc.b	$01
000912CC ECF5                       	smpsPSGAlterVol     $F5
000912CE 9407                       	dc.b	nG1, $07
000912D0 EC0B                       	smpsPSGAlterVol     $0B
000912D2 8004                       	dc.b	nRst, $04
000912D4 ECF5                       	smpsPSGAlterVol     $F5
000912D6 9406                       	dc.b	nG1, $06
000912D8 EC04                       	smpsPSGAlterVol     $04
000912DA E701                       	dc.b	smpsNoAttack, $01
000912DC EC07                       	smpsPSGAlterVol     $07
000912DE 8006                       	dc.b	nRst, $06
000912E0 E103                       	smpsAlterNote       $03
000912E2 01                         	dc.b	$01
000912E3 E104                       	smpsAlterNote       $04
000912E5 01                         	dc.b	$01
000912E6 E100                       	smpsAlterNote       $00
000912E8 01                         	dc.b	$01
000912E9 E1F9                       	smpsAlterNote       $F9
000912EB 01                         	dc.b	$01
000912EC E1FD                       	smpsAlterNote       $FD
000912EE ECF5                       	smpsPSGAlterVol     $F5
000912F0 9206                       	dc.b	nF1, $06
000912F2 EC04                       	smpsPSGAlterVol     $04
000912F4 E701                       	dc.b	smpsNoAttack, $01
000912F6 EC07                       	smpsPSGAlterVol     $07
000912F8 8003                       	dc.b	nRst, $03
000912FA ECF5                       	smpsPSGAlterVol     $F5
000912FC 9206                       	dc.b	nF1, $06
000912FE EC04                       	smpsPSGAlterVol     $04
00091300 E701                       	dc.b	smpsNoAttack, $01
00091302 EC07                       	smpsPSGAlterVol     $07
00091304 8006                       	dc.b	nRst, $06
00091306 E100                       	smpsAlterNote       $00
00091308 01                         	dc.b	$01
00091309 E104                       	smpsAlterNote       $04
0009130B 01                         	dc.b	$01
0009130C E103                       	smpsAlterNote       $03
0009130E 01                         	dc.b	$01
0009130F E1FD                       	smpsAlterNote       $FD
00091311 01                         	dc.b	$01
00091312 ECF5                       	smpsPSGAlterVol     $F5
00091314 9407                       	dc.b	nG1, $07
00091316 EC0B                       	smpsPSGAlterVol     $0B
00091318 8004                       	dc.b	nRst, $04
0009131A ECF5                       	smpsPSGAlterVol     $F5
0009131C 9406                       	dc.b	nG1, $06
0009131E EC0B                       	smpsPSGAlterVol     $0B
00091320 8007                       	dc.b	nRst, $07
00091322 E103                       	smpsAlterNote       $03
00091324 0101                       	dc.b	$01, $01
00091326 E100                       	smpsAlterNote       $00
00091328 01                         	dc.b	$01
00091329 E1F9                       	smpsAlterNote       $F9
0009132B 01                         	dc.b	$01
0009132C E1FD                       	smpsAlterNote       $FD
0009132E ECF5                       	smpsPSGAlterVol     $F5
00091330 9206                       	dc.b	nF1, $06
00091332 EC04                       	smpsPSGAlterVol     $04
00091334 E701                       	dc.b	smpsNoAttack, $01
00091336 EC07                       	smpsPSGAlterVol     $07
00091338 8003                       	dc.b	nRst, $03
0009133A ECF5                       	smpsPSGAlterVol     $F5
0009133C 9206                       	dc.b	nF1, $06
0009133E EC04                       	smpsPSGAlterVol     $04
00091340 E701                       	dc.b	smpsNoAttack, $01
00091342 EC07                       	smpsPSGAlterVol     $07
00091344 8006                       	dc.b	nRst, $06
00091346 E100                       	smpsAlterNote       $00
00091348 01                         	dc.b	$01
00091349 E104                       	smpsAlterNote       $04
0009134B 01                         	dc.b	$01
0009134C E100                       	smpsAlterNote       $00
0009134E 01                         	dc.b	$01
0009134F E1FB                       	smpsAlterNote       $FB
00091351 01                         	dc.b	$01
00091352 E1FD                       	smpsAlterNote       $FD
00091354 ECF5                       	smpsPSGAlterVol     $F5
00091356 9406                       	dc.b	nG1, $06
00091358 EC04                       	smpsPSGAlterVol     $04
0009135A E701                       	dc.b	smpsNoAttack, $01
0009135C EC07                       	smpsPSGAlterVol     $07
0009135E 8003                       	dc.b	nRst, $03
00091360 ECF5                       	smpsPSGAlterVol     $F5
00091362 9407                       	dc.b	nG1, $07
00091364 EC0B                       	smpsPSGAlterVol     $0B
00091366 8006                       	dc.b	nRst, $06
00091368 E100                       	smpsAlterNote       $00
0009136A 01                         	dc.b	$01
0009136B E103                       	smpsAlterNote       $03
0009136D 0101                       	dc.b	$01, $01
0009136F E1FD                       	smpsAlterNote       $FD
00091371 01                         	dc.b	$01
00091372 ECF5                       	smpsPSGAlterVol     $F5
00091374 9207                       	dc.b	nF1, $07
00091376 EC0B                       	smpsPSGAlterVol     $0B
00091378 8004                       	dc.b	nRst, $04
0009137A ECF5                       	smpsPSGAlterVol     $F5
0009137C 9206                       	dc.b	nF1, $06
0009137E EC04                       	smpsPSGAlterVol     $04
00091380 E701                       	dc.b	smpsNoAttack, $01
00091382 ECFC                       	smpsPSGAlterVol     $FC
00091384 E1FC                       	smpsAlterNote       $FC
00091386 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0009138A EC04                       	smpsPSGAlterVol     $04
0009138C E701                       	dc.b	smpsNoAttack, $01
0009138E ECFC                       	smpsPSGAlterVol     $FC
00091390 9003                       	dc.b	nEb1, $03
00091392 E1FD                       	smpsAlterNote       $FD
00091394 9403                       	dc.b	nG1, $03
00091396 EC04                       	smpsPSGAlterVol     $04
00091398 E701                       	dc.b	smpsNoAttack, $01
0009139A E1FE                       	smpsAlterNote       $FE
0009139C ECFC                       	smpsPSGAlterVol     $FC
0009139E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000913A2 EC04                       	smpsPSGAlterVol     $04
000913A4 E701                       	dc.b	smpsNoAttack, $01
000913A6 EC07                       	smpsPSGAlterVol     $07
000913A8 8009                       	dc.b	nRst, $09
000913AA E100                       	smpsAlterNote       $00
000913AC 01                         	dc.b	$01
000913AD F6F5 19                    	smpsJump            music84_Jump07
000913B0                            
000913B0                            ; PSG2 Data
000913B0                            music84_PSG2:
000913B0 E1FC                       	smpsAlterNote       $FC
000913B2 EC04                       	smpsPSGAlterVol     $04
000913B4 8F03                       	dc.b	nD1, $03
000913B6 E1FD                       	smpsAlterNote       $FD
000913B8 9203                       	dc.b	nF1, $03
000913BA EC04                       	smpsPSGAlterVol     $04
000913BC E701                       	dc.b	smpsNoAttack, $01
000913BE E1FE                       	smpsAlterNote       $FE
000913C0 ECFC                       	smpsPSGAlterVol     $FC
000913C2 9603                       	dc.b	nA1, $03
000913C4 E1FD                       	smpsAlterNote       $FD
000913C6 9103                       	dc.b	nE1, $03
000913C8 EC04                       	smpsPSGAlterVol     $04
000913CA E701                       	dc.b	smpsNoAttack, $01
000913CC ECFC                       	smpsPSGAlterVol     $FC
000913CE 9403                       	dc.b	nG1, $03
000913D0 E1FE                       	smpsAlterNote       $FE
000913D2 9703                       	dc.b	nBb1, $03
000913D4 EC04                       	smpsPSGAlterVol     $04
000913D6 E701                       	dc.b	smpsNoAttack, $01
000913D8 E1FF                       	smpsAlterNote       $FF
000913DA ECFC                       	smpsPSGAlterVol     $FC
000913DC 9B02                       	dc.b	nD2, $02
000913DE EC04                       	smpsPSGAlterVol     $04
000913E0 E701                       	dc.b	smpsNoAttack, $01
000913E2 ECFC                       	smpsPSGAlterVol     $FC
000913E4 E1FE                       	smpsAlterNote       $FE
000913E6 9A03                       	dc.b	nCs2, $03
000913E8 EC0B                       	smpsPSGAlterVol     $0B
000913EA 800A                       	dc.b	nRst, $0A
000913EC E102                       	smpsAlterNote       $02
000913EE 01                         	dc.b	$01
000913EF E10A                       	smpsAlterNote       $0A
000913F1 01                         	dc.b	$01
000913F2 E102                       	smpsAlterNote       $02
000913F4 01                         	dc.b	$01
000913F5 E1FC                       	smpsAlterNote       $FC
000913F7 01                         	dc.b	$01
000913F8 E10A                       	smpsAlterNote       $0A
000913FA 01                         	dc.b	$01
000913FB E1FC                       	smpsAlterNote       $FC
000913FD 01                         	dc.b	$01
000913FE E108                       	smpsAlterNote       $08
00091400 01                         	dc.b	$01
00091401 E10A                       	smpsAlterNote       $0A
00091403 01                         	dc.b	$01
00091404 E102                       	smpsAlterNote       $02
00091406 01                         	dc.b	$01
00091407 E1F7                       	smpsAlterNote       $F7
00091409 0101                       	dc.b	$01, $01
0009140B E102                       	smpsAlterNote       $02
0009140D 01                         	dc.b	$01
0009140E E108                       	smpsAlterNote       $08
00091410 0101                       	dc.b	$01, $01
00091412 E1FC                       	smpsAlterNote       $FC
00091414 01                         	dc.b	$01
00091415 E10A                       	smpsAlterNote       $0A
00091417 01                         	dc.b	$01
00091418 E1F7                       	smpsAlterNote       $F7
0009141A 01                         	dc.b	$01
0009141B E102                       	smpsAlterNote       $02
0009141D 01                         	dc.b	$01
0009141E E10A                       	smpsAlterNote       $0A
00091420 01                         	dc.b	$01
00091421 E102                       	smpsAlterNote       $02
00091423 01                         	dc.b	$01
00091424 E1FC                       	smpsAlterNote       $FC
00091426 01                         	dc.b	$01
00091427                            
00091427                            music84_Jump06:
00091427 E10A                       	smpsAlterNote       $0A
00091429 8001                       	dc.b	nRst, $01
0009142B E1FC                       	smpsAlterNote       $FC
0009142D 01                         	dc.b	$01
0009142E E108                       	smpsAlterNote       $08
00091430 01                         	dc.b	$01
00091431 E10A                       	smpsAlterNote       $0A
00091433 01                         	dc.b	$01
00091434 E1FC                       	smpsAlterNote       $FC
00091436 ECF5                       	smpsPSGAlterVol     $F5
00091438 8F06                       	dc.b	nD1, $06
0009143A EC04                       	smpsPSGAlterVol     $04
0009143C E701                       	dc.b	smpsNoAttack, $01
0009143E EC07                       	smpsPSGAlterVol     $07
00091440 8003                       	dc.b	nRst, $03
00091442 ECF5                       	smpsPSGAlterVol     $F5
00091444 8F06                       	dc.b	nD1, $06
00091446 EC04                       	smpsPSGAlterVol     $04
00091448 E701                       	dc.b	smpsNoAttack, $01
0009144A EC07                       	smpsPSGAlterVol     $07
0009144C 8006                       	dc.b	nRst, $06
0009144E E1FF                       	smpsAlterNote       $FF
00091450 01                         	dc.b	$01
00091451 E102                       	smpsAlterNote       $02
00091453 01                         	dc.b	$01
00091454 E1FF                       	smpsAlterNote       $FF
00091456 01                         	dc.b	$01
00091457 E1F9                       	smpsAlterNote       $F9
00091459 01                         	dc.b	$01
0009145A E1FC                       	smpsAlterNote       $FC
0009145C ECF5                       	smpsPSGAlterVol     $F5
0009145E 9006                       	dc.b	nEb1, $06
00091460 EC04                       	smpsPSGAlterVol     $04
00091462 E701                       	dc.b	smpsNoAttack, $01
00091464 EC07                       	smpsPSGAlterVol     $07
00091466 8003                       	dc.b	nRst, $03
00091468 ECF5                       	smpsPSGAlterVol     $F5
0009146A 9007                       	dc.b	nEb1, $07
0009146C EC0B                       	smpsPSGAlterVol     $0B
0009146E 8006                       	dc.b	nRst, $06
00091470 E1FF                       	smpsAlterNote       $FF
00091472 01                         	dc.b	$01
00091473 E103                       	smpsAlterNote       $03
00091475 0101                       	dc.b	$01, $01
00091477 E1FC                       	smpsAlterNote       $FC
00091479 01                         	dc.b	$01
0009147A ECF5                       	smpsPSGAlterVol     $F5
0009147C 8F07                       	dc.b	nD1, $07
0009147E EC0B                       	smpsPSGAlterVol     $0B
00091480 8004                       	dc.b	nRst, $04
00091482 ECF5                       	smpsPSGAlterVol     $F5
00091484 8F06                       	dc.b	nD1, $06
00091486 EC04                       	smpsPSGAlterVol     $04
00091488 E701                       	dc.b	smpsNoAttack, $01
0009148A EC07                       	smpsPSGAlterVol     $07
0009148C 8006                       	dc.b	nRst, $06
0009148E E102                       	smpsAlterNote       $02
00091490 01                         	dc.b	$01
00091491 E103                       	smpsAlterNote       $03
00091493 01                         	dc.b	$01
00091494 E1FF                       	smpsAlterNote       $FF
00091496 01                         	dc.b	$01
00091497 E1F9                       	smpsAlterNote       $F9
00091499 01                         	dc.b	$01
0009149A E1FC                       	smpsAlterNote       $FC
0009149C ECF5                       	smpsPSGAlterVol     $F5
0009149E 8F06                       	dc.b	nD1, $06
000914A0 EC04                       	smpsPSGAlterVol     $04
000914A2 E701                       	dc.b	smpsNoAttack, $01
000914A4 EC07                       	smpsPSGAlterVol     $07
000914A6 8003                       	dc.b	nRst, $03
000914A8 ECF5                       	smpsPSGAlterVol     $F5
000914AA 8F06                       	dc.b	nD1, $06
000914AC EC04                       	smpsPSGAlterVol     $04
000914AE E701                       	dc.b	smpsNoAttack, $01
000914B0 EC07                       	smpsPSGAlterVol     $07
000914B2 8006                       	dc.b	nRst, $06
000914B4 E1FF                       	smpsAlterNote       $FF
000914B6 01                         	dc.b	$01
000914B7 E103                       	smpsAlterNote       $03
000914B9 01                         	dc.b	$01
000914BA E1FF                       	smpsAlterNote       $FF
000914BC 01                         	dc.b	$01
000914BD E1FC                       	smpsAlterNote       $FC
000914BF 01                         	dc.b	$01
000914C0 ECF5                       	smpsPSGAlterVol     $F5
000914C2 8F06                       	dc.b	nD1, $06
000914C4 EC04                       	smpsPSGAlterVol     $04
000914C6 E701                       	dc.b	smpsNoAttack, $01
000914C8 EC07                       	smpsPSGAlterVol     $07
000914CA 8003                       	dc.b	nRst, $03
000914CC ECF5                       	smpsPSGAlterVol     $F5
000914CE 8F07                       	dc.b	nD1, $07
000914D0 EC0B                       	smpsPSGAlterVol     $0B
000914D2 8007                       	dc.b	nRst, $07
000914D4 E101                       	smpsAlterNote       $01
000914D6 0101                       	dc.b	$01, $01
000914D8 E1FC                       	smpsAlterNote       $FC
000914DA 01                         	dc.b	$01
000914DB E1F9                       	smpsAlterNote       $F9
000914DD 01                         	dc.b	$01
000914DE E1FC                       	smpsAlterNote       $FC
000914E0 ECF5                       	smpsPSGAlterVol     $F5
000914E2 9006                       	dc.b	nEb1, $06
000914E4 EC0B                       	smpsPSGAlterVol     $0B
000914E6 8004                       	dc.b	nRst, $04
000914E8 ECF5                       	smpsPSGAlterVol     $F5
000914EA 9006                       	dc.b	nEb1, $06
000914EC EC04                       	smpsPSGAlterVol     $04
000914EE E701                       	dc.b	smpsNoAttack, $01
000914F0 EC07                       	smpsPSGAlterVol     $07
000914F2 8006                       	dc.b	nRst, $06
000914F4 E100                       	smpsAlterNote       $00
000914F6 01                         	dc.b	$01
000914F7 E102                       	smpsAlterNote       $02
000914F9 01                         	dc.b	$01
000914FA E100                       	smpsAlterNote       $00
000914FC 01                         	dc.b	$01
000914FD E1FD                       	smpsAlterNote       $FD
000914FF 01                         	dc.b	$01
00091500 E1FF                       	smpsAlterNote       $FF
00091502 ECF5                       	smpsPSGAlterVol     $F5
00091504 9B06                       	dc.b	nD2, $06
00091506 EC04                       	smpsPSGAlterVol     $04
00091508 E701                       	dc.b	smpsNoAttack, $01
0009150A EC07                       	smpsPSGAlterVol     $07
0009150C 8003                       	dc.b	nRst, $03
0009150E ECF5                       	smpsPSGAlterVol     $F5
00091510 9B07                       	dc.b	nD2, $07
00091512 EC0B                       	smpsPSGAlterVol     $0B
00091514 8006                       	dc.b	nRst, $06
00091516 E102                       	smpsAlterNote       $02
00091518 01                         	dc.b	$01
00091519 E106                       	smpsAlterNote       $06
0009151B 01                         	dc.b	$01
0009151C E105                       	smpsAlterNote       $05
0009151E 01                         	dc.b	$01
0009151F E1FF                       	smpsAlterNote       $FF
00091521 01                         	dc.b	$01
00091522 ECF5                       	smpsPSGAlterVol     $F5
00091524 9B07                       	dc.b	nD2, $07
00091526 EC0B                       	smpsPSGAlterVol     $0B
00091528 8004                       	dc.b	nRst, $04
0009152A ECF5                       	smpsPSGAlterVol     $F5
0009152C 9B06                       	dc.b	nD2, $06
0009152E EC0B                       	smpsPSGAlterVol     $0B
00091530 8007                       	dc.b	nRst, $07
00091532 E105                       	smpsAlterNote       $05
00091534 0101                       	dc.b	$01, $01
00091536 E102                       	smpsAlterNote       $02
00091538 01                         	dc.b	$01
00091539 E1FC                       	smpsAlterNote       $FC
0009153B 01                         	dc.b	$01
0009153C E1FF                       	smpsAlterNote       $FF
0009153E ECF5                       	smpsPSGAlterVol     $F5
00091540 9B06                       	dc.b	nD2, $06
00091542 EC04                       	smpsPSGAlterVol     $04
00091544 E701                       	dc.b	smpsNoAttack, $01
00091546 EC07                       	smpsPSGAlterVol     $07
00091548 8003                       	dc.b	nRst, $03
0009154A ECF5                       	smpsPSGAlterVol     $F5
0009154C 9B06                       	dc.b	nD2, $06
0009154E EC04                       	smpsPSGAlterVol     $04
00091550 E701                       	dc.b	smpsNoAttack, $01
00091552 EC07                       	smpsPSGAlterVol     $07
00091554 8006                       	dc.b	nRst, $06
00091556 E102                       	smpsAlterNote       $02
00091558 01                         	dc.b	$01
00091559 E106                       	smpsAlterNote       $06
0009155B 01                         	dc.b	$01
0009155C E102                       	smpsAlterNote       $02
0009155E 01                         	dc.b	$01
0009155F E1FF                       	smpsAlterNote       $FF
00091561 01                         	dc.b	$01
00091562 ECF5                       	smpsPSGAlterVol     $F5
00091564 9B06                       	dc.b	nD2, $06
00091566 EC04                       	smpsPSGAlterVol     $04
00091568 E701                       	dc.b	smpsNoAttack, $01
0009156A EC07                       	smpsPSGAlterVol     $07
0009156C 8003                       	dc.b	nRst, $03
0009156E ECF5                       	smpsPSGAlterVol     $F5
00091570 9B07                       	dc.b	nD2, $07
00091572 EC0B                       	smpsPSGAlterVol     $0B
00091574 8007                       	dc.b	nRst, $07
00091576 E105                       	smpsAlterNote       $05
00091578 0101                       	dc.b	$01, $01
0009157A E1FF                       	smpsAlterNote       $FF
0009157C 01                         	dc.b	$01
0009157D E1FC                       	smpsAlterNote       $FC
0009157F 01                         	dc.b	$01
00091580 E1FF                       	smpsAlterNote       $FF
00091582 ECF5                       	smpsPSGAlterVol     $F5
00091584 9B06                       	dc.b	nD2, $06
00091586 EC0B                       	smpsPSGAlterVol     $0B
00091588 8004                       	dc.b	nRst, $04
0009158A ECF5                       	smpsPSGAlterVol     $F5
0009158C 9B06                       	dc.b	nD2, $06
0009158E EC04                       	smpsPSGAlterVol     $04
00091590 E701                       	dc.b	smpsNoAttack, $01
00091592 EC07                       	smpsPSGAlterVol     $07
00091594 8006                       	dc.b	nRst, $06
00091596 E105                       	smpsAlterNote       $05
00091598 01                         	dc.b	$01
00091599 E106                       	smpsAlterNote       $06
0009159B 01                         	dc.b	$01
0009159C E102                       	smpsAlterNote       $02
0009159E 01                         	dc.b	$01
0009159F E1FC                       	smpsAlterNote       $FC
000915A1 01                         	dc.b	$01
000915A2 E1FF                       	smpsAlterNote       $FF
000915A4 ECF5                       	smpsPSGAlterVol     $F5
000915A6 9B06                       	dc.b	nD2, $06
000915A8 EC04                       	smpsPSGAlterVol     $04
000915AA E701                       	dc.b	smpsNoAttack, $01
000915AC EC07                       	smpsPSGAlterVol     $07
000915AE 8003                       	dc.b	nRst, $03
000915B0 ECF5                       	smpsPSGAlterVol     $F5
000915B2 9B06                       	dc.b	nD2, $06
000915B4 EC04                       	smpsPSGAlterVol     $04
000915B6 E701                       	dc.b	smpsNoAttack, $01
000915B8 EC07                       	smpsPSGAlterVol     $07
000915BA 8006                       	dc.b	nRst, $06
000915BC E102                       	smpsAlterNote       $02
000915BE 01                         	dc.b	$01
000915BF E106                       	smpsAlterNote       $06
000915C1 01                         	dc.b	$01
000915C2 E105                       	smpsAlterNote       $05
000915C4 01                         	dc.b	$01
000915C5 E1FF                       	smpsAlterNote       $FF
000915C7 01                         	dc.b	$01
000915C8 ECF5                       	smpsPSGAlterVol     $F5
000915CA 9B07                       	dc.b	nD2, $07
000915CC EC0B                       	smpsPSGAlterVol     $0B
000915CE 8004                       	dc.b	nRst, $04
000915D0 ECF5                       	smpsPSGAlterVol     $F5
000915D2 9B06                       	dc.b	nD2, $06
000915D4 EC0B                       	smpsPSGAlterVol     $0B
000915D6 8007                       	dc.b	nRst, $07
000915D8 E105                       	smpsAlterNote       $05
000915DA 0101                       	dc.b	$01, $01
000915DC E102                       	smpsAlterNote       $02
000915DE 01                         	dc.b	$01
000915DF E1FC                       	smpsAlterNote       $FC
000915E1 01                         	dc.b	$01
000915E2 E1FF                       	smpsAlterNote       $FF
000915E4 ECF5                       	smpsPSGAlterVol     $F5
000915E6 9B06                       	dc.b	nD2, $06
000915E8 EC04                       	smpsPSGAlterVol     $04
000915EA E701                       	dc.b	smpsNoAttack, $01
000915EC EC07                       	smpsPSGAlterVol     $07
000915EE 8003                       	dc.b	nRst, $03
000915F0 ECF5                       	smpsPSGAlterVol     $F5
000915F2 9B06                       	dc.b	nD2, $06
000915F4 EC04                       	smpsPSGAlterVol     $04
000915F6 E701                       	dc.b	smpsNoAttack, $01
000915F8 EC07                       	smpsPSGAlterVol     $07
000915FA 8006                       	dc.b	nRst, $06
000915FC E102                       	smpsAlterNote       $02
000915FE 01                         	dc.b	$01
000915FF E106                       	smpsAlterNote       $06
00091601 01                         	dc.b	$01
00091602 E102                       	smpsAlterNote       $02
00091604 01                         	dc.b	$01
00091605 E1FF                       	smpsAlterNote       $FF
00091607 01                         	dc.b	$01
00091608 ECF5                       	smpsPSGAlterVol     $F5
0009160A 9B06                       	dc.b	nD2, $06
0009160C EC04                       	smpsPSGAlterVol     $04
0009160E E701                       	dc.b	smpsNoAttack, $01
00091610 EC07                       	smpsPSGAlterVol     $07
00091612 8003                       	dc.b	nRst, $03
00091614 ECF5                       	smpsPSGAlterVol     $F5
00091616 9B07                       	dc.b	nD2, $07
00091618 E1FE                       	smpsAlterNote       $FE
0009161A 9706                       	dc.b	nBb1, $06
0009161C EC04                       	smpsPSGAlterVol     $04
0009161E E701                       	dc.b	smpsNoAttack, $01
00091620 ECFC                       	smpsPSGAlterVol     $FC
00091622 9703                       	dc.b	nBb1, $03
00091624 EC04                       	smpsPSGAlterVol     $04
00091626 E701                       	dc.b	smpsNoAttack, $01
00091628 ECFC                       	smpsPSGAlterVol     $FC
0009162A 9702                       	dc.b	nBb1, $02
0009162C EC04                       	smpsPSGAlterVol     $04
0009162E E701                       	dc.b	smpsNoAttack, $01
00091630 ECFC                       	smpsPSGAlterVol     $FC
00091632 9606                       	dc.b	nA1, $06
00091634 EC04                       	smpsPSGAlterVol     $04
00091636 E701                       	dc.b	smpsNoAttack, $01
00091638 EC07                       	smpsPSGAlterVol     $07
0009163A 8006                       	dc.b	nRst, $06
0009163C E101                       	smpsAlterNote       $01
0009163E 01                         	dc.b	$01
0009163F E107                       	smpsAlterNote       $07
00091641 01                         	dc.b	$01
00091642 E101                       	smpsAlterNote       $01
00091644 01                         	dc.b	$01
00091645 E1F8                       	smpsAlterNote       $F8
00091647 01                         	dc.b	$01
00091648 E1F7                       	smpsAlterNote       $F7
0009164A 01                         	dc.b	$01
0009164B E1FC                       	smpsAlterNote       $FC
0009164D 01                         	dc.b	$01
0009164E E106                       	smpsAlterNote       $06
00091650 01                         	dc.b	$01
00091651 E107                       	smpsAlterNote       $07
00091653 01                         	dc.b	$01
00091654 E101                       	smpsAlterNote       $01
00091656 01                         	dc.b	$01
00091657 E1F8                       	smpsAlterNote       $F8
00091659 0101                       	dc.b	$01, $01
0009165B E1FC                       	smpsAlterNote       $FC
0009165D ECF5                       	smpsPSGAlterVol     $F5
0009165F 8F06                       	dc.b	nD1, $06
00091661 EC04                       	smpsPSGAlterVol     $04
00091663 E701                       	dc.b	smpsNoAttack, $01
00091665 EC07                       	smpsPSGAlterVol     $07
00091667 8003                       	dc.b	nRst, $03
00091669 ECF5                       	smpsPSGAlterVol     $F5
0009166B 8F06                       	dc.b	nD1, $06
0009166D EC04                       	smpsPSGAlterVol     $04
0009166F E701                       	dc.b	smpsNoAttack, $01
00091671 EC07                       	smpsPSGAlterVol     $07
00091673 8006                       	dc.b	nRst, $06
00091675 E1FF                       	smpsAlterNote       $FF
00091677 01                         	dc.b	$01
00091678 E102                       	smpsAlterNote       $02
0009167A 01                         	dc.b	$01
0009167B E101                       	smpsAlterNote       $01
0009167D 01                         	dc.b	$01
0009167E E1FC                       	smpsAlterNote       $FC
00091680 01                         	dc.b	$01
00091681 ECF5                       	smpsPSGAlterVol     $F5
00091683 9007                       	dc.b	nEb1, $07
00091685 EC0B                       	smpsPSGAlterVol     $0B
00091687 8004                       	dc.b	nRst, $04
00091689 ECF5                       	smpsPSGAlterVol     $F5
0009168B 9006                       	dc.b	nEb1, $06
0009168D EC0B                       	smpsPSGAlterVol     $0B
0009168F 8007                       	dc.b	nRst, $07
00091691 E103                       	smpsAlterNote       $03
00091693 0101                       	dc.b	$01, $01
00091695 E1FC                       	smpsAlterNote       $FC
00091697 01                         	dc.b	$01
00091698 E1F9                       	smpsAlterNote       $F9
0009169A 01                         	dc.b	$01
0009169B E1FC                       	smpsAlterNote       $FC
0009169D ECF5                       	smpsPSGAlterVol     $F5
0009169F 8F06                       	dc.b	nD1, $06
000916A1 EC04                       	smpsPSGAlterVol     $04
000916A3 E701                       	dc.b	smpsNoAttack, $01
000916A5 EC07                       	smpsPSGAlterVol     $07
000916A7 8003                       	dc.b	nRst, $03
000916A9 ECF5                       	smpsPSGAlterVol     $F5
000916AB 8F06                       	dc.b	nD1, $06
000916AD EC04                       	smpsPSGAlterVol     $04
000916AF E701                       	dc.b	smpsNoAttack, $01
000916B1 EC07                       	smpsPSGAlterVol     $07
000916B3 8006                       	dc.b	nRst, $06
000916B5 E1FF                       	smpsAlterNote       $FF
000916B7 01                         	dc.b	$01
000916B8 E103                       	smpsAlterNote       $03
000916BA 01                         	dc.b	$01
000916BB E1FF                       	smpsAlterNote       $FF
000916BD 01                         	dc.b	$01
000916BE E1F9                       	smpsAlterNote       $F9
000916C0 01                         	dc.b	$01
000916C1 E1FC                       	smpsAlterNote       $FC
000916C3 ECF5                       	smpsPSGAlterVol     $F5
000916C5 8F06                       	dc.b	nD1, $06
000916C7 EC04                       	smpsPSGAlterVol     $04
000916C9 E701                       	dc.b	smpsNoAttack, $01
000916CB EC07                       	smpsPSGAlterVol     $07
000916CD 8003                       	dc.b	nRst, $03
000916CF ECF5                       	smpsPSGAlterVol     $F5
000916D1 8F07                       	dc.b	nD1, $07
000916D3 EC0B                       	smpsPSGAlterVol     $0B
000916D5 8006                       	dc.b	nRst, $06
000916D7 E1FF                       	smpsAlterNote       $FF
000916D9 01                         	dc.b	$01
000916DA E102                       	smpsAlterNote       $02
000916DC 0101                       	dc.b	$01, $01
000916DE E1FC                       	smpsAlterNote       $FC
000916E0 01                         	dc.b	$01
000916E1 ECF5                       	smpsPSGAlterVol     $F5
000916E3 8F07                       	dc.b	nD1, $07
000916E5 EC0B                       	smpsPSGAlterVol     $0B
000916E7 8004                       	dc.b	nRst, $04
000916E9 ECF5                       	smpsPSGAlterVol     $F5
000916EB 8F06                       	dc.b	nD1, $06
000916ED EC04                       	smpsPSGAlterVol     $04
000916EF E701                       	dc.b	smpsNoAttack, $01
000916F1 EC07                       	smpsPSGAlterVol     $07
000916F3 8006                       	dc.b	nRst, $06
000916F5 E101                       	smpsAlterNote       $01
000916F7 01                         	dc.b	$01
000916F8 E102                       	smpsAlterNote       $02
000916FA 01                         	dc.b	$01
000916FB E1FF                       	smpsAlterNote       $FF
000916FD 01                         	dc.b	$01
000916FE E1F9                       	smpsAlterNote       $F9
00091700 01                         	dc.b	$01
00091701 E1FC                       	smpsAlterNote       $FC
00091703 ECF5                       	smpsPSGAlterVol     $F5
00091705 9006                       	dc.b	nEb1, $06
00091707 EC04                       	smpsPSGAlterVol     $04
00091709 E701                       	dc.b	smpsNoAttack, $01
0009170B EC07                       	smpsPSGAlterVol     $07
0009170D 8003                       	dc.b	nRst, $03
0009170F ECF5                       	smpsPSGAlterVol     $F5
00091711 9006                       	dc.b	nEb1, $06
00091713 EC04                       	smpsPSGAlterVol     $04
00091715 E701                       	dc.b	smpsNoAttack, $01
00091717 EC07                       	smpsPSGAlterVol     $07
00091719 8006                       	dc.b	nRst, $06
0009171B E100                       	smpsAlterNote       $00
0009171D 01                         	dc.b	$01
0009171E E102                       	smpsAlterNote       $02
00091720 01                         	dc.b	$01
00091721 E100                       	smpsAlterNote       $00
00091723 01                         	dc.b	$01
00091724 E1FF                       	smpsAlterNote       $FF
00091726 01                         	dc.b	$01
00091727 ECF5                       	smpsPSGAlterVol     $F5
00091729 9B06                       	dc.b	nD2, $06
0009172B EC04                       	smpsPSGAlterVol     $04
0009172D E701                       	dc.b	smpsNoAttack, $01
0009172F EC07                       	smpsPSGAlterVol     $07
00091731 8003                       	dc.b	nRst, $03
00091733 ECF5                       	smpsPSGAlterVol     $F5
00091735 9B07                       	dc.b	nD2, $07
00091737 EC0B                       	smpsPSGAlterVol     $0B
00091739 8007                       	dc.b	nRst, $07
0009173B E105                       	smpsAlterNote       $05
0009173D 0101                       	dc.b	$01, $01
0009173F E1FF                       	smpsAlterNote       $FF
00091741 01                         	dc.b	$01
00091742 E1FC                       	smpsAlterNote       $FC
00091744 01                         	dc.b	$01
00091745 E1FF                       	smpsAlterNote       $FF
00091747 ECF5                       	smpsPSGAlterVol     $F5
00091749 9B06                       	dc.b	nD2, $06
0009174B EC0B                       	smpsPSGAlterVol     $0B
0009174D 8004                       	dc.b	nRst, $04
0009174F ECF5                       	smpsPSGAlterVol     $F5
00091751 9B06                       	dc.b	nD2, $06
00091753 EC04                       	smpsPSGAlterVol     $04
00091755 E701                       	dc.b	smpsNoAttack, $01
00091757 EC07                       	smpsPSGAlterVol     $07
00091759 8006                       	dc.b	nRst, $06
0009175B E102                       	smpsAlterNote       $02
0009175D 01                         	dc.b	$01
0009175E E106                       	smpsAlterNote       $06
00091760 01                         	dc.b	$01
00091761 E102                       	smpsAlterNote       $02
00091763 01                         	dc.b	$01
00091764 E1FC                       	smpsAlterNote       $FC
00091766 01                         	dc.b	$01
00091767 E1FF                       	smpsAlterNote       $FF
00091769 ECF5                       	smpsPSGAlterVol     $F5
0009176B 9B06                       	dc.b	nD2, $06
0009176D EC04                       	smpsPSGAlterVol     $04
0009176F E701                       	dc.b	smpsNoAttack, $01
00091771 EC07                       	smpsPSGAlterVol     $07
00091773 8003                       	dc.b	nRst, $03
00091775 ECF5                       	smpsPSGAlterVol     $F5
00091777 9B07                       	dc.b	nD2, $07
00091779 EC0B                       	smpsPSGAlterVol     $0B
0009177B 8006                       	dc.b	nRst, $06
0009177D E102                       	smpsAlterNote       $02
0009177F 01                         	dc.b	$01
00091780 E105                       	smpsAlterNote       $05
00091782 0101                       	dc.b	$01, $01
00091784 E1FF                       	smpsAlterNote       $FF
00091786 01                         	dc.b	$01
00091787 ECF5                       	smpsPSGAlterVol     $F5
00091789 9B07                       	dc.b	nD2, $07
0009178B EC0B                       	smpsPSGAlterVol     $0B
0009178D 8004                       	dc.b	nRst, $04
0009178F ECF5                       	smpsPSGAlterVol     $F5
00091791 9B06                       	dc.b	nD2, $06
00091793 EC0B                       	smpsPSGAlterVol     $0B
00091795 8007                       	dc.b	nRst, $07
00091797 E105                       	smpsAlterNote       $05
00091799 0101                       	dc.b	$01, $01
0009179B E102                       	smpsAlterNote       $02
0009179D 01                         	dc.b	$01
0009179E E1FC                       	smpsAlterNote       $FC
000917A0 01                         	dc.b	$01
000917A1 E1FF                       	smpsAlterNote       $FF
000917A3 ECF5                       	smpsPSGAlterVol     $F5
000917A5 9B06                       	dc.b	nD2, $06
000917A7 EC04                       	smpsPSGAlterVol     $04
000917A9 E701                       	dc.b	smpsNoAttack, $01
000917AB EC07                       	smpsPSGAlterVol     $07
000917AD 8003                       	dc.b	nRst, $03
000917AF ECF5                       	smpsPSGAlterVol     $F5
000917B1 9B06                       	dc.b	nD2, $06
000917B3 EC04                       	smpsPSGAlterVol     $04
000917B5 E701                       	dc.b	smpsNoAttack, $01
000917B7 EC07                       	smpsPSGAlterVol     $07
000917B9 8006                       	dc.b	nRst, $06
000917BB E102                       	smpsAlterNote       $02
000917BD 01                         	dc.b	$01
000917BE E106                       	smpsAlterNote       $06
000917C0 01                         	dc.b	$01
000917C1 E102                       	smpsAlterNote       $02
000917C3 01                         	dc.b	$01
000917C4 E1FF                       	smpsAlterNote       $FF
000917C6 01                         	dc.b	$01
000917C7 ECF5                       	smpsPSGAlterVol     $F5
000917C9 9B06                       	dc.b	nD2, $06
000917CB EC04                       	smpsPSGAlterVol     $04
000917CD E701                       	dc.b	smpsNoAttack, $01
000917CF EC07                       	smpsPSGAlterVol     $07
000917D1 8003                       	dc.b	nRst, $03
000917D3 ECF5                       	smpsPSGAlterVol     $F5
000917D5 9B07                       	dc.b	nD2, $07
000917D7 EC0B                       	smpsPSGAlterVol     $0B
000917D9 8007                       	dc.b	nRst, $07
000917DB E105                       	smpsAlterNote       $05
000917DD 0101                       	dc.b	$01, $01
000917DF E1FF                       	smpsAlterNote       $FF
000917E1 01                         	dc.b	$01
000917E2 E1FC                       	smpsAlterNote       $FC
000917E4 01                         	dc.b	$01
000917E5 E1FF                       	smpsAlterNote       $FF
000917E7 ECF5                       	smpsPSGAlterVol     $F5
000917E9 9B06                       	dc.b	nD2, $06
000917EB EC0B                       	smpsPSGAlterVol     $0B
000917ED 8004                       	dc.b	nRst, $04
000917EF ECF5                       	smpsPSGAlterVol     $F5
000917F1 9B06                       	dc.b	nD2, $06
000917F3 EC04                       	smpsPSGAlterVol     $04
000917F5 E701                       	dc.b	smpsNoAttack, $01
000917F7 EC07                       	smpsPSGAlterVol     $07
000917F9 8006                       	dc.b	nRst, $06
000917FB E102                       	smpsAlterNote       $02
000917FD 01                         	dc.b	$01
000917FE E106                       	smpsAlterNote       $06
00091800 01                         	dc.b	$01
00091801 E102                       	smpsAlterNote       $02
00091803 01                         	dc.b	$01
00091804 E1FC                       	smpsAlterNote       $FC
00091806 01                         	dc.b	$01
00091807 E1FF                       	smpsAlterNote       $FF
00091809 ECF5                       	smpsPSGAlterVol     $F5
0009180B 9B06                       	dc.b	nD2, $06
0009180D EC04                       	smpsPSGAlterVol     $04
0009180F E701                       	dc.b	smpsNoAttack, $01
00091811 EC07                       	smpsPSGAlterVol     $07
00091813 8003                       	dc.b	nRst, $03
00091815 ECF5                       	smpsPSGAlterVol     $F5
00091817 9B06                       	dc.b	nD2, $06
00091819 EC04                       	smpsPSGAlterVol     $04
0009181B E701                       	dc.b	smpsNoAttack, $01
0009181D EC07                       	smpsPSGAlterVol     $07
0009181F 8006                       	dc.b	nRst, $06
00091821 E102                       	smpsAlterNote       $02
00091823 01                         	dc.b	$01
00091824 E106                       	smpsAlterNote       $06
00091826 01                         	dc.b	$01
00091827 E105                       	smpsAlterNote       $05
00091829 01                         	dc.b	$01
0009182A E1FF                       	smpsAlterNote       $FF
0009182C 01                         	dc.b	$01
0009182D ECF5                       	smpsPSGAlterVol     $F5
0009182F 9B07                       	dc.b	nD2, $07
00091831 EC0B                       	smpsPSGAlterVol     $0B
00091833 8004                       	dc.b	nRst, $04
00091835 ECF5                       	smpsPSGAlterVol     $F5
00091837 9B06                       	dc.b	nD2, $06
00091839 EC0B                       	smpsPSGAlterVol     $0B
0009183B 8007                       	dc.b	nRst, $07
0009183D E105                       	smpsAlterNote       $05
0009183F 0101                       	dc.b	$01, $01
00091841 E101                       	smpsAlterNote       $01
00091843 01                         	dc.b	$01
00091844 E1FB                       	smpsAlterNote       $FB
00091846 01                         	dc.b	$01
00091847 E1FE                       	smpsAlterNote       $FE
00091849 ECF5                       	smpsPSGAlterVol     $F5
0009184B 9A06                       	dc.b	nCs2, $06
0009184D EC04                       	smpsPSGAlterVol     $04
0009184F E701                       	dc.b	smpsNoAttack, $01
00091851 EC07                       	smpsPSGAlterVol     $07
00091853 8003                       	dc.b	nRst, $03
00091855 ECF5                       	smpsPSGAlterVol     $F5
00091857 9A06                       	dc.b	nCs2, $06
00091859 EC04                       	smpsPSGAlterVol     $04
0009185B E701                       	dc.b	smpsNoAttack, $01
0009185D EC07                       	smpsPSGAlterVol     $07
0009185F 8003                       	dc.b	nRst, $03
00091861 E1FC                       	smpsAlterNote       $FC
00091863 ECF5                       	smpsPSGAlterVol     $F5
00091865 8F07                       	dc.b	nD1, $07
00091867 EC0B                       	smpsPSGAlterVol     $0B
00091869 8006                       	dc.b	nRst, $06
0009186B E1FF                       	smpsAlterNote       $FF
0009186D 01                         	dc.b	$01
0009186E E103                       	smpsAlterNote       $03
00091870 01                         	dc.b	$01
00091871 E102                       	smpsAlterNote       $02
00091873 01                         	dc.b	$01
00091874 E1FC                       	smpsAlterNote       $FC
00091876 01                         	dc.b	$01
00091877 E1F8                       	smpsAlterNote       $F8
00091879 01                         	dc.b	$01
0009187A E1FC                       	smpsAlterNote       $FC
0009187C 01                         	dc.b	$01
0009187D E1FF                       	smpsAlterNote       $FF
0009187F 01                         	dc.b	$01
00091880 E103                       	smpsAlterNote       $03
00091882 01                         	dc.b	$01
00091883 E1FC                       	smpsAlterNote       $FC
00091885 ECF5                       	smpsPSGAlterVol     $F5
00091887 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009188B EC04                       	smpsPSGAlterVol     $04
0009188D E701                       	dc.b	smpsNoAttack, $01
0009188F EC07                       	smpsPSGAlterVol     $07
00091891 8009                       	dc.b	nRst, $09
00091893 E1FF                       	smpsAlterNote       $FF
00091895 01                         	dc.b	$01
00091896 E103                       	smpsAlterNote       $03
00091898 01                         	dc.b	$01
00091899 E102                       	smpsAlterNote       $02
0009189B 01                         	dc.b	$01
0009189C E1FC                       	smpsAlterNote       $FC
0009189E 01                         	dc.b	$01
0009189F E1F8                       	smpsAlterNote       $F8
000918A1 01                         	dc.b	$01
000918A2 E1FC                       	smpsAlterNote       $FC
000918A4 01                         	dc.b	$01
000918A5 E1FF                       	smpsAlterNote       $FF
000918A7 01                         	dc.b	$01
000918A8 E103                       	smpsAlterNote       $03
000918AA 01                         	dc.b	$01
000918AB E1FF                       	smpsAlterNote       $FF
000918AD 01                         	dc.b	$01
000918AE E1F9                       	smpsAlterNote       $F9
000918B0 01                         	dc.b	$01
000918B1 E1F8                       	smpsAlterNote       $F8
000918B3 01                         	dc.b	$01
000918B4 E1FC                       	smpsAlterNote       $FC
000918B6 01                         	dc.b	$01
000918B7 E102                       	smpsAlterNote       $02
000918B9 0101                       	dc.b	$01, $01
000918BB E1FF                       	smpsAlterNote       $FF
000918BD 01                         	dc.b	$01
000918BE E1FC                       	smpsAlterNote       $FC
000918C0 ECF5                       	smpsPSGAlterVol     $F5
000918C2 8F02                       	dc.b	nD1, $02
000918C4 EC04                       	smpsPSGAlterVol     $04
000918C6 E701                       	dc.b	smpsNoAttack, $01
000918C8 ECFC                       	smpsPSGAlterVol     $FC
000918CA E1FB                       	smpsAlterNote       $FB
000918CC 8D06                       	dc.b	nC1, $06
000918CE EC04                       	smpsPSGAlterVol     $04
000918D0 E701                       	dc.b	smpsNoAttack, $01
000918D2 EC07                       	smpsPSGAlterVol     $07
000918D4 8006                       	dc.b	nRst, $06
000918D6 E1FE                       	smpsAlterNote       $FE
000918D8 01                         	dc.b	$01
000918D9 E102                       	smpsAlterNote       $02
000918DB 01                         	dc.b	$01
000918DC E1FE                       	smpsAlterNote       $FE
000918DE 01                         	dc.b	$01
000918DF E1FB                       	smpsAlterNote       $FB
000918E1 01                         	dc.b	$01
000918E2 E1F7                       	smpsAlterNote       $F7
000918E4 01                         	dc.b	$01
000918E5 E1FB                       	smpsAlterNote       $FB
000918E7 01                         	dc.b	$01
000918E8 E101                       	smpsAlterNote       $01
000918EA 01                         	dc.b	$01
000918EB E102                       	smpsAlterNote       $02
000918ED 01                         	dc.b	$01
000918EE E1FB                       	smpsAlterNote       $FB
000918F0 ECF5                       	smpsPSGAlterVol     $F5
000918F2 8D02                       	dc.b	nC1, $02
000918F4 EC04                       	smpsPSGAlterVol     $04
000918F6 E701                       	dc.b	smpsNoAttack, $01
000918F8 E1FC                       	smpsAlterNote       $FC
000918FA ECFC                       	smpsPSGAlterVol     $FC
000918FC 8F0D                       	dc.b	nD1, $0D
000918FE E1FF                       	smpsAlterNote       $FF
00091900 E701                       	dc.b	smpsNoAttack, $01
00091902 E103                       	smpsAlterNote       $03
00091904 E701                       	dc.b	smpsNoAttack, $01
00091906 E1FF                       	smpsAlterNote       $FF
00091908 E701                       	dc.b	smpsNoAttack, $01
0009190A E1FC                       	smpsAlterNote       $FC
0009190C E701                       	dc.b	smpsNoAttack, $01
0009190E E1F8                       	smpsAlterNote       $F8
00091910 E701                       	dc.b	smpsNoAttack, $01
00091912 E1FC                       	smpsAlterNote       $FC
00091914 E701                       	dc.b	smpsNoAttack, $01
00091916 E102                       	smpsAlterNote       $02
00091918 E701                       	dc.b	smpsNoAttack, $01
0009191A E103                       	smpsAlterNote       $03
0009191C E701                       	dc.b	smpsNoAttack, $01
0009191E E1FF                       	smpsAlterNote       $FF
00091920 E701                       	dc.b	smpsNoAttack, $01
00091922 E1F9                       	smpsAlterNote       $F9
00091924 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091928 E1FC                       	smpsAlterNote       $FC
0009192A E701                       	dc.b	smpsNoAttack, $01
0009192C E102                       	smpsAlterNote       $02
0009192E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091932 E1FC                       	smpsAlterNote       $FC
00091934 E701                       	dc.b	smpsNoAttack, $01
00091936 E1F9                       	smpsAlterNote       $F9
00091938 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009193C E1FF                       	smpsAlterNote       $FF
0009193E EC04                       	smpsPSGAlterVol     $04
00091940 E701                       	dc.b	smpsNoAttack, $01
00091942 EC07                       	smpsPSGAlterVol     $07
00091944 E103                       	smpsAlterNote       $03
00091946 8001                       	dc.b	nRst, $01
00091948 E102                       	smpsAlterNote       $02
0009194A 01                         	dc.b	$01
0009194B E1FB                       	smpsAlterNote       $FB
0009194D 01                         	dc.b	$01
0009194E E1F7                       	smpsAlterNote       $F7
00091950 01                         	dc.b	$01
00091951 E1FB                       	smpsAlterNote       $FB
00091953 01                         	dc.b	$01
00091954 E102                       	smpsAlterNote       $02
00091956 01                         	dc.b	$01
00091957 E103                       	smpsAlterNote       $03
00091959 01                         	dc.b	$01
0009195A E1FB                       	smpsAlterNote       $FB
0009195C ECF5                       	smpsPSGAlterVol     $F5
0009195E 8E06                       	dc.b	nCs1, $06
00091960 EC04                       	smpsPSGAlterVol     $04
00091962 E701                       	dc.b	smpsNoAttack, $01
00091964 EC07                       	smpsPSGAlterVol     $07
00091966 8003                       	dc.b	nRst, $03
00091968 ECF5                       	smpsPSGAlterVol     $F5
0009196A 8E06                       	dc.b	nCs1, $06
0009196C EC04                       	smpsPSGAlterVol     $04
0009196E E701                       	dc.b	smpsNoAttack, $01
00091970 EC07                       	smpsPSGAlterVol     $07
00091972 8006                       	dc.b	nRst, $06
00091974 E1FE                       	smpsAlterNote       $FE
00091976 01                         	dc.b	$01
00091977 E102                       	smpsAlterNote       $02
00091979 01                         	dc.b	$01
0009197A E1FE                       	smpsAlterNote       $FE
0009197C 01                         	dc.b	$01
0009197D E1F9                       	smpsAlterNote       $F9
0009197F 01                         	dc.b	$01
00091980 E1FC                       	smpsAlterNote       $FC
00091982 ECF5                       	smpsPSGAlterVol     $F5
00091984 8F06                       	dc.b	nD1, $06
00091986 EC04                       	smpsPSGAlterVol     $04
00091988 E701                       	dc.b	smpsNoAttack, $01
0009198A EC07                       	smpsPSGAlterVol     $07
0009198C 8003                       	dc.b	nRst, $03
0009198E ECF5                       	smpsPSGAlterVol     $F5
00091990 8F07                       	dc.b	nD1, $07
00091992 EC0B                       	smpsPSGAlterVol     $0B
00091994 8006                       	dc.b	nRst, $06
00091996 E1FF                       	smpsAlterNote       $FF
00091998 01                         	dc.b	$01
00091999 E102                       	smpsAlterNote       $02
0009199B 0101                       	dc.b	$01, $01
0009199D E1FB                       	smpsAlterNote       $FB
0009199F 01                         	dc.b	$01
000919A0 ECF5                       	smpsPSGAlterVol     $F5
000919A2 8E07                       	dc.b	nCs1, $07
000919A4 EC0B                       	smpsPSGAlterVol     $0B
000919A6 8004                       	dc.b	nRst, $04
000919A8 ECF5                       	smpsPSGAlterVol     $F5
000919AA 8E06                       	dc.b	nCs1, $06
000919AC EC04                       	smpsPSGAlterVol     $04
000919AE E701                       	dc.b	smpsNoAttack, $01
000919B0 EC07                       	smpsPSGAlterVol     $07
000919B2 8006                       	dc.b	nRst, $06
000919B4 E101                       	smpsAlterNote       $01
000919B6 01                         	dc.b	$01
000919B7 E102                       	smpsAlterNote       $02
000919B9 01                         	dc.b	$01
000919BA E1FE                       	smpsAlterNote       $FE
000919BC 01                         	dc.b	$01
000919BD E1F8                       	smpsAlterNote       $F8
000919BF 01                         	dc.b	$01
000919C0 E1FB                       	smpsAlterNote       $FB
000919C2 ECF5                       	smpsPSGAlterVol     $F5
000919C4 8E06                       	dc.b	nCs1, $06
000919C6 EC04                       	smpsPSGAlterVol     $04
000919C8 E701                       	dc.b	smpsNoAttack, $01
000919CA EC07                       	smpsPSGAlterVol     $07
000919CC 8003                       	dc.b	nRst, $03
000919CE ECF5                       	smpsPSGAlterVol     $F5
000919D0 8E06                       	dc.b	nCs1, $06
000919D2 EC04                       	smpsPSGAlterVol     $04
000919D4 E701                       	dc.b	smpsNoAttack, $01
000919D6 EC07                       	smpsPSGAlterVol     $07
000919D8 8004                       	dc.b	nRst, $04
000919DA E1FC                       	smpsAlterNote       $FC
000919DC ECF5                       	smpsPSGAlterVol     $F5
000919DE 8F06                       	dc.b	nD1, $06
000919E0 EC0B                       	smpsPSGAlterVol     $0B
000919E2 8006                       	dc.b	nRst, $06
000919E4 E1FF                       	smpsAlterNote       $FF
000919E6 01                         	dc.b	$01
000919E7 E102                       	smpsAlterNote       $02
000919E9 0101                       	dc.b	$01, $01
000919EB E1FC                       	smpsAlterNote       $FC
000919ED 01                         	dc.b	$01
000919EE E1F8                       	smpsAlterNote       $F8
000919F0 01                         	dc.b	$01
000919F1 E1F9                       	smpsAlterNote       $F9
000919F3 01                         	dc.b	$01
000919F4 E1FF                       	smpsAlterNote       $FF
000919F6 01                         	dc.b	$01
000919F7 E103                       	smpsAlterNote       $03
000919F9 01                         	dc.b	$01
000919FA E1FC                       	smpsAlterNote       $FC
000919FC ECF5                       	smpsPSGAlterVol     $F5
000919FE 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091A02 EC04                       	smpsPSGAlterVol     $04
00091A04 E701                       	dc.b	smpsNoAttack, $01
00091A06 EC07                       	smpsPSGAlterVol     $07
00091A08 8009                       	dc.b	nRst, $09
00091A0A E1FF                       	smpsAlterNote       $FF
00091A0C 01                         	dc.b	$01
00091A0D E102                       	smpsAlterNote       $02
00091A0F 0101                       	dc.b	$01, $01
00091A11 E1FC                       	smpsAlterNote       $FC
00091A13 01                         	dc.b	$01
00091A14 E1F8                       	smpsAlterNote       $F8
00091A16 01                         	dc.b	$01
00091A17 E1F9                       	smpsAlterNote       $F9
00091A19 01                         	dc.b	$01
00091A1A E1FF                       	smpsAlterNote       $FF
00091A1C 01                         	dc.b	$01
00091A1D E103                       	smpsAlterNote       $03
00091A1F 01                         	dc.b	$01
00091A20 E1FF                       	smpsAlterNote       $FF
00091A22 01                         	dc.b	$01
00091A23 E1FC                       	smpsAlterNote       $FC
00091A25 01                         	dc.b	$01
00091A26 E1F8                       	smpsAlterNote       $F8
00091A28 01                         	dc.b	$01
00091A29 E1FC                       	smpsAlterNote       $FC
00091A2B 01                         	dc.b	$01
00091A2C E102                       	smpsAlterNote       $02
00091A2E 01                         	dc.b	$01
00091A2F E103                       	smpsAlterNote       $03
00091A31 01                         	dc.b	$01
00091A32 E1FF                       	smpsAlterNote       $FF
00091A34 01                         	dc.b	$01
00091A35 E1FC                       	smpsAlterNote       $FC
00091A37 ECF5                       	smpsPSGAlterVol     $F5
00091A39 8F03                       	dc.b	nD1, $03
00091A3B E1FB                       	smpsAlterNote       $FB
00091A3D 8D06                       	dc.b	nC1, $06
00091A3F EC04                       	smpsPSGAlterVol     $04
00091A41 E701                       	dc.b	smpsNoAttack, $01
00091A43 EC07                       	smpsPSGAlterVol     $07
00091A45 8006                       	dc.b	nRst, $06
00091A47 E1FE                       	smpsAlterNote       $FE
00091A49 01                         	dc.b	$01
00091A4A E102                       	smpsAlterNote       $02
00091A4C 01                         	dc.b	$01
00091A4D E101                       	smpsAlterNote       $01
00091A4F 01                         	dc.b	$01
00091A50 E1FB                       	smpsAlterNote       $FB
00091A52 01                         	dc.b	$01
00091A53 E1F7                       	smpsAlterNote       $F7
00091A55 01                         	dc.b	$01
00091A56 E1FB                       	smpsAlterNote       $FB
00091A58 01                         	dc.b	$01
00091A59 E1FE                       	smpsAlterNote       $FE
00091A5B 01                         	dc.b	$01
00091A5C E102                       	smpsAlterNote       $02
00091A5E 01                         	dc.b	$01
00091A5F E1FB                       	smpsAlterNote       $FB
00091A61 ECF5                       	smpsPSGAlterVol     $F5
00091A63 8D03                       	dc.b	nC1, $03
00091A65 E1FC                       	smpsAlterNote       $FC
00091A67 8F0D                       	dc.b	nD1, $0D
00091A69 E1FF                       	smpsAlterNote       $FF
00091A6B E701                       	dc.b	smpsNoAttack, $01
00091A6D E103                       	smpsAlterNote       $03
00091A6F E701                       	dc.b	smpsNoAttack, $01
00091A71 E1FF                       	smpsAlterNote       $FF
00091A73 E701                       	dc.b	smpsNoAttack, $01
00091A75 E1FC                       	smpsAlterNote       $FC
00091A77 E701                       	dc.b	smpsNoAttack, $01
00091A79 E1F8                       	smpsAlterNote       $F8
00091A7B E701                       	dc.b	smpsNoAttack, $01
00091A7D E1FC                       	smpsAlterNote       $FC
00091A7F E701                       	dc.b	smpsNoAttack, $01
00091A81 E102                       	smpsAlterNote       $02
00091A83 E701                       	dc.b	smpsNoAttack, $01
00091A85 E103                       	smpsAlterNote       $03
00091A87 E701                       	dc.b	smpsNoAttack, $01
00091A89 E1FF                       	smpsAlterNote       $FF
00091A8B E701                       	dc.b	smpsNoAttack, $01
00091A8D E1F9                       	smpsAlterNote       $F9
00091A8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091A93 E1FC                       	smpsAlterNote       $FC
00091A95 E701                       	dc.b	smpsNoAttack, $01
00091A97 E102                       	smpsAlterNote       $02
00091A99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091A9D E1FF                       	smpsAlterNote       $FF
00091A9F E701                       	dc.b	smpsNoAttack, $01
00091AA1 E1F9                       	smpsAlterNote       $F9
00091AA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091AA7 E1FF                       	smpsAlterNote       $FF
00091AA9 EC04                       	smpsPSGAlterVol     $04
00091AAB E701                       	dc.b	smpsNoAttack, $01
00091AAD EC07                       	smpsPSGAlterVol     $07
00091AAF E103                       	smpsAlterNote       $03
00091AB1 8001                       	dc.b	nRst, $01
00091AB3 E102                       	smpsAlterNote       $02
00091AB5 01                         	dc.b	$01
00091AB6 E1FB                       	smpsAlterNote       $FB
00091AB8 01                         	dc.b	$01
00091AB9 E1F7                       	smpsAlterNote       $F7
00091ABB 01                         	dc.b	$01
00091ABC E1FB                       	smpsAlterNote       $FB
00091ABE 01                         	dc.b	$01
00091ABF E1FF                       	smpsAlterNote       $FF
00091AC1 01                         	dc.b	$01
00091AC2 E103                       	smpsAlterNote       $03
00091AC4 01                         	dc.b	$01
00091AC5 E1FB                       	smpsAlterNote       $FB
00091AC7 ECF5                       	smpsPSGAlterVol     $F5
00091AC9 8E06                       	dc.b	nCs1, $06
00091ACB EC04                       	smpsPSGAlterVol     $04
00091ACD E701                       	dc.b	smpsNoAttack, $01
00091ACF EC07                       	smpsPSGAlterVol     $07
00091AD1 8003                       	dc.b	nRst, $03
00091AD3 ECF5                       	smpsPSGAlterVol     $F5
00091AD5 8E06                       	dc.b	nCs1, $06
00091AD7 EC04                       	smpsPSGAlterVol     $04
00091AD9 E701                       	dc.b	smpsNoAttack, $01
00091ADB EC07                       	smpsPSGAlterVol     $07
00091ADD 8006                       	dc.b	nRst, $06
00091ADF E1FE                       	smpsAlterNote       $FE
00091AE1 01                         	dc.b	$01
00091AE2 E102                       	smpsAlterNote       $02
00091AE4 01                         	dc.b	$01
00091AE5 E1FE                       	smpsAlterNote       $FE
00091AE7 01                         	dc.b	$01
00091AE8 E1FC                       	smpsAlterNote       $FC
00091AEA 01                         	dc.b	$01
00091AEB ECF5                       	smpsPSGAlterVol     $F5
00091AED 8F06                       	dc.b	nD1, $06
00091AEF EC04                       	smpsPSGAlterVol     $04
00091AF1 E701                       	dc.b	smpsNoAttack, $01
00091AF3 EC07                       	smpsPSGAlterVol     $07
00091AF5 8003                       	dc.b	nRst, $03
00091AF7 ECF5                       	smpsPSGAlterVol     $F5
00091AF9 8F07                       	dc.b	nD1, $07
00091AFB EC0B                       	smpsPSGAlterVol     $0B
00091AFD 8007                       	dc.b	nRst, $07
00091AFF E102                       	smpsAlterNote       $02
00091B01 0101                       	dc.b	$01, $01
00091B03 E1FB                       	smpsAlterNote       $FB
00091B05 01                         	dc.b	$01
00091B06 E1F8                       	smpsAlterNote       $F8
00091B08 01                         	dc.b	$01
00091B09 E1FB                       	smpsAlterNote       $FB
00091B0B ECF5                       	smpsPSGAlterVol     $F5
00091B0D 8E06                       	dc.b	nCs1, $06
00091B0F EC0B                       	smpsPSGAlterVol     $0B
00091B11 8004                       	dc.b	nRst, $04
00091B13 ECF5                       	smpsPSGAlterVol     $F5
00091B15 8E06                       	dc.b	nCs1, $06
00091B17 EC04                       	smpsPSGAlterVol     $04
00091B19 E701                       	dc.b	smpsNoAttack, $01
00091B1B EC07                       	smpsPSGAlterVol     $07
00091B1D 8006                       	dc.b	nRst, $06
00091B1F E1FE                       	smpsAlterNote       $FE
00091B21 01                         	dc.b	$01
00091B22 E102                       	smpsAlterNote       $02
00091B24 01                         	dc.b	$01
00091B25 E1FE                       	smpsAlterNote       $FE
00091B27 01                         	dc.b	$01
00091B28 E1F9                       	smpsAlterNote       $F9
00091B2A 01                         	dc.b	$01
00091B2B E1FC                       	smpsAlterNote       $FC
00091B2D ECF5                       	smpsPSGAlterVol     $F5
00091B2F 8F06                       	dc.b	nD1, $06
00091B31 EC04                       	smpsPSGAlterVol     $04
00091B33 E701                       	dc.b	smpsNoAttack, $01
00091B35 EC07                       	smpsPSGAlterVol     $07
00091B37 8003                       	dc.b	nRst, $03
00091B39 ECF5                       	smpsPSGAlterVol     $F5
00091B3B 8F06                       	dc.b	nD1, $06
00091B3D EC04                       	smpsPSGAlterVol     $04
00091B3F E701                       	dc.b	smpsNoAttack, $01
00091B41 EC07                       	smpsPSGAlterVol     $07
00091B43 8006                       	dc.b	nRst, $06
00091B45 E1FF                       	smpsAlterNote       $FF
00091B47 01                         	dc.b	$01
00091B48 E103                       	smpsAlterNote       $03
00091B4A 01                         	dc.b	$01
00091B4B E102                       	smpsAlterNote       $02
00091B4D 01                         	dc.b	$01
00091B4E E1FB                       	smpsAlterNote       $FB
00091B50 01                         	dc.b	$01
00091B51 ECF5                       	smpsPSGAlterVol     $F5
00091B53 8E07                       	dc.b	nCs1, $07
00091B55 EC0B                       	smpsPSGAlterVol     $0B
00091B57 8004                       	dc.b	nRst, $04
00091B59 ECF5                       	smpsPSGAlterVol     $F5
00091B5B 8E06                       	dc.b	nCs1, $06
00091B5D EC0B                       	smpsPSGAlterVol     $0B
00091B5F 8007                       	dc.b	nRst, $07
00091B61 E101                       	smpsAlterNote       $01
00091B63 0101                       	dc.b	$01, $01
00091B65 E1FE                       	smpsAlterNote       $FE
00091B67 01                         	dc.b	$01
00091B68 E1F9                       	smpsAlterNote       $F9
00091B6A 01                         	dc.b	$01
00091B6B E1FC                       	smpsAlterNote       $FC
00091B6D ECF5                       	smpsPSGAlterVol     $F5
00091B6F 8F06                       	dc.b	nD1, $06
00091B71 EC04                       	smpsPSGAlterVol     $04
00091B73 E701                       	dc.b	smpsNoAttack, $01
00091B75 EC07                       	smpsPSGAlterVol     $07
00091B77 8003                       	dc.b	nRst, $03
00091B79 ECF5                       	smpsPSGAlterVol     $F5
00091B7B 8F06                       	dc.b	nD1, $06
00091B7D EC04                       	smpsPSGAlterVol     $04
00091B7F E701                       	dc.b	smpsNoAttack, $01
00091B81 EC07                       	smpsPSGAlterVol     $07
00091B83 8006                       	dc.b	nRst, $06
00091B85 E1FF                       	smpsAlterNote       $FF
00091B87 01                         	dc.b	$01
00091B88 E103                       	smpsAlterNote       $03
00091B8A 01                         	dc.b	$01
00091B8B E1FF                       	smpsAlterNote       $FF
00091B8D 01                         	dc.b	$01
00091B8E E1FB                       	smpsAlterNote       $FB
00091B90 01                         	dc.b	$01
00091B91 ECF5                       	smpsPSGAlterVol     $F5
00091B93 8E06                       	dc.b	nCs1, $06
00091B95 EC04                       	smpsPSGAlterVol     $04
00091B97 E701                       	dc.b	smpsNoAttack, $01
00091B99 EC07                       	smpsPSGAlterVol     $07
00091B9B 8003                       	dc.b	nRst, $03
00091B9D ECF5                       	smpsPSGAlterVol     $F5
00091B9F 8E07                       	dc.b	nCs1, $07
00091BA1 E1FF                       	smpsAlterNote       $FF
00091BA3 9B06                       	dc.b	nD2, $06
00091BA5 EC04                       	smpsPSGAlterVol     $04
00091BA7 E701                       	dc.b	smpsNoAttack, $01
00091BA9 ECFC                       	smpsPSGAlterVol     $FC
00091BAB 9B03                       	dc.b	nD2, $03
00091BAD EC04                       	smpsPSGAlterVol     $04
00091BAF E701                       	dc.b	smpsNoAttack, $01
00091BB1 ECFC                       	smpsPSGAlterVol     $FC
00091BB3 9B02                       	dc.b	nD2, $02
00091BB5 EC04                       	smpsPSGAlterVol     $04
00091BB7 E701                       	dc.b	smpsNoAttack, $01
00091BB9 ECFC                       	smpsPSGAlterVol     $FC
00091BBB E1FE                       	smpsAlterNote       $FE
00091BBD 9A03                       	dc.b	nCs2, $03
00091BBF EC0B                       	smpsPSGAlterVol     $0B
00091BC1 800A                       	dc.b	nRst, $0A
00091BC3 E102                       	smpsAlterNote       $02
00091BC5 01                         	dc.b	$01
00091BC6 E10A                       	smpsAlterNote       $0A
00091BC8 01                         	dc.b	$01
00091BC9 E102                       	smpsAlterNote       $02
00091BCB 01                         	dc.b	$01
00091BCC E1F7                       	smpsAlterNote       $F7
00091BCE 01                         	dc.b	$01
00091BCF E10A                       	smpsAlterNote       $0A
00091BD1 01                         	dc.b	$01
00091BD2 E1FC                       	smpsAlterNote       $FC
00091BD4 01                         	dc.b	$01
00091BD5 E108                       	smpsAlterNote       $08
00091BD7 0101                       	dc.b	$01, $01
00091BD9 E102                       	smpsAlterNote       $02
00091BDB 01                         	dc.b	$01
00091BDC E1F7                       	smpsAlterNote       $F7
00091BDE 0101                       	dc.b	$01, $01
00091BE0 E1FC                       	smpsAlterNote       $FC
00091BE2 ECF5                       	smpsPSGAlterVol     $F5
00091BE4 8F06                       	dc.b	nD1, $06
00091BE6 EC04                       	smpsPSGAlterVol     $04
00091BE8 E701                       	dc.b	smpsNoAttack, $01
00091BEA EC07                       	smpsPSGAlterVol     $07
00091BEC 8003                       	dc.b	nRst, $03
00091BEE ECF5                       	smpsPSGAlterVol     $F5
00091BF0 8F06                       	dc.b	nD1, $06
00091BF2 EC04                       	smpsPSGAlterVol     $04
00091BF4 E701                       	dc.b	smpsNoAttack, $01
00091BF6 EC07                       	smpsPSGAlterVol     $07
00091BF8 8006                       	dc.b	nRst, $06
00091BFA E1FF                       	smpsAlterNote       $FF
00091BFC 01                         	dc.b	$01
00091BFD E102                       	smpsAlterNote       $02
00091BFF 01                         	dc.b	$01
00091C00 E101                       	smpsAlterNote       $01
00091C02 01                         	dc.b	$01
00091C03 E1FC                       	smpsAlterNote       $FC
00091C05 01                         	dc.b	$01
00091C06 ECF5                       	smpsPSGAlterVol     $F5
00091C08 9007                       	dc.b	nEb1, $07
00091C0A EC0B                       	smpsPSGAlterVol     $0B
00091C0C 8004                       	dc.b	nRst, $04
00091C0E ECF5                       	smpsPSGAlterVol     $F5
00091C10 9006                       	dc.b	nEb1, $06
00091C12 EC0B                       	smpsPSGAlterVol     $0B
00091C14 8007                       	dc.b	nRst, $07
00091C16 E103                       	smpsAlterNote       $03
00091C18 0101                       	dc.b	$01, $01
00091C1A E1FF                       	smpsAlterNote       $FF
00091C1C 01                         	dc.b	$01
00091C1D E1F9                       	smpsAlterNote       $F9
00091C1F 01                         	dc.b	$01
00091C20 E1FC                       	smpsAlterNote       $FC
00091C22 ECF5                       	smpsPSGAlterVol     $F5
00091C24 8F06                       	dc.b	nD1, $06
00091C26 EC04                       	smpsPSGAlterVol     $04
00091C28 E701                       	dc.b	smpsNoAttack, $01
00091C2A EC07                       	smpsPSGAlterVol     $07
00091C2C 8003                       	dc.b	nRst, $03
00091C2E ECF5                       	smpsPSGAlterVol     $F5
00091C30 8F06                       	dc.b	nD1, $06
00091C32 EC04                       	smpsPSGAlterVol     $04
00091C34 E701                       	dc.b	smpsNoAttack, $01
00091C36 EC07                       	smpsPSGAlterVol     $07
00091C38 8006                       	dc.b	nRst, $06
00091C3A E1FF                       	smpsAlterNote       $FF
00091C3C 01                         	dc.b	$01
00091C3D E103                       	smpsAlterNote       $03
00091C3F 01                         	dc.b	$01
00091C40 E1FF                       	smpsAlterNote       $FF
00091C42 01                         	dc.b	$01
00091C43 E1F9                       	smpsAlterNote       $F9
00091C45 01                         	dc.b	$01
00091C46 E1FC                       	smpsAlterNote       $FC
00091C48 ECF5                       	smpsPSGAlterVol     $F5
00091C4A 8F06                       	dc.b	nD1, $06
00091C4C EC04                       	smpsPSGAlterVol     $04
00091C4E E701                       	dc.b	smpsNoAttack, $01
00091C50 EC07                       	smpsPSGAlterVol     $07
00091C52 8003                       	dc.b	nRst, $03
00091C54 ECF5                       	smpsPSGAlterVol     $F5
00091C56 8F07                       	dc.b	nD1, $07
00091C58 EC0B                       	smpsPSGAlterVol     $0B
00091C5A 8006                       	dc.b	nRst, $06
00091C5C E1FF                       	smpsAlterNote       $FF
00091C5E 01                         	dc.b	$01
00091C5F E102                       	smpsAlterNote       $02
00091C61 0101                       	dc.b	$01, $01
00091C63 E1FC                       	smpsAlterNote       $FC
00091C65 01                         	dc.b	$01
00091C66 ECF5                       	smpsPSGAlterVol     $F5
00091C68 8F07                       	dc.b	nD1, $07
00091C6A EC0B                       	smpsPSGAlterVol     $0B
00091C6C 8004                       	dc.b	nRst, $04
00091C6E ECF5                       	smpsPSGAlterVol     $F5
00091C70 8F06                       	dc.b	nD1, $06
00091C72 EC04                       	smpsPSGAlterVol     $04
00091C74 E701                       	dc.b	smpsNoAttack, $01
00091C76 EC07                       	smpsPSGAlterVol     $07
00091C78 8006                       	dc.b	nRst, $06
00091C7A E101                       	smpsAlterNote       $01
00091C7C 01                         	dc.b	$01
00091C7D E102                       	smpsAlterNote       $02
00091C7F 01                         	dc.b	$01
00091C80 E1FF                       	smpsAlterNote       $FF
00091C82 01                         	dc.b	$01
00091C83 E1F9                       	smpsAlterNote       $F9
00091C85 01                         	dc.b	$01
00091C86 E1FC                       	smpsAlterNote       $FC
00091C88 ECF5                       	smpsPSGAlterVol     $F5
00091C8A 9006                       	dc.b	nEb1, $06
00091C8C EC04                       	smpsPSGAlterVol     $04
00091C8E E701                       	dc.b	smpsNoAttack, $01
00091C90 EC07                       	smpsPSGAlterVol     $07
00091C92 8003                       	dc.b	nRst, $03
00091C94 ECF5                       	smpsPSGAlterVol     $F5
00091C96 9006                       	dc.b	nEb1, $06
00091C98 EC04                       	smpsPSGAlterVol     $04
00091C9A E701                       	dc.b	smpsNoAttack, $01
00091C9C EC07                       	smpsPSGAlterVol     $07
00091C9E 8006                       	dc.b	nRst, $06
00091CA0 E100                       	smpsAlterNote       $00
00091CA2 01                         	dc.b	$01
00091CA3 E102                       	smpsAlterNote       $02
00091CA5 01                         	dc.b	$01
00091CA6 E100                       	smpsAlterNote       $00
00091CA8 01                         	dc.b	$01
00091CA9 E1FF                       	smpsAlterNote       $FF
00091CAB 01                         	dc.b	$01
00091CAC ECF5                       	smpsPSGAlterVol     $F5
00091CAE 9B06                       	dc.b	nD2, $06
00091CB0 EC04                       	smpsPSGAlterVol     $04
00091CB2 E701                       	dc.b	smpsNoAttack, $01
00091CB4 EC07                       	smpsPSGAlterVol     $07
00091CB6 8003                       	dc.b	nRst, $03
00091CB8 ECF5                       	smpsPSGAlterVol     $F5
00091CBA 9B07                       	dc.b	nD2, $07
00091CBC EC0B                       	smpsPSGAlterVol     $0B
00091CBE 8007                       	dc.b	nRst, $07
00091CC0 E105                       	smpsAlterNote       $05
00091CC2 0101                       	dc.b	$01, $01
00091CC4 E1FF                       	smpsAlterNote       $FF
00091CC6 01                         	dc.b	$01
00091CC7 E1FC                       	smpsAlterNote       $FC
00091CC9 01                         	dc.b	$01
00091CCA E1FF                       	smpsAlterNote       $FF
00091CCC ECF5                       	smpsPSGAlterVol     $F5
00091CCE 9B06                       	dc.b	nD2, $06
00091CD0 EC0B                       	smpsPSGAlterVol     $0B
00091CD2 8004                       	dc.b	nRst, $04
00091CD4 ECF5                       	smpsPSGAlterVol     $F5
00091CD6 9B06                       	dc.b	nD2, $06
00091CD8 EC04                       	smpsPSGAlterVol     $04
00091CDA E701                       	dc.b	smpsNoAttack, $01
00091CDC EC07                       	smpsPSGAlterVol     $07
00091CDE 8006                       	dc.b	nRst, $06
00091CE0 E102                       	smpsAlterNote       $02
00091CE2 01                         	dc.b	$01
00091CE3 E106                       	smpsAlterNote       $06
00091CE5 01                         	dc.b	$01
00091CE6 E102                       	smpsAlterNote       $02
00091CE8 01                         	dc.b	$01
00091CE9 E1FC                       	smpsAlterNote       $FC
00091CEB 01                         	dc.b	$01
00091CEC E1FF                       	smpsAlterNote       $FF
00091CEE ECF5                       	smpsPSGAlterVol     $F5
00091CF0 9B06                       	dc.b	nD2, $06
00091CF2 EC04                       	smpsPSGAlterVol     $04
00091CF4 E701                       	dc.b	smpsNoAttack, $01
00091CF6 EC07                       	smpsPSGAlterVol     $07
00091CF8 8003                       	dc.b	nRst, $03
00091CFA ECF5                       	smpsPSGAlterVol     $F5
00091CFC 9B07                       	dc.b	nD2, $07
00091CFE EC0B                       	smpsPSGAlterVol     $0B
00091D00 8006                       	dc.b	nRst, $06
00091D02 E102                       	smpsAlterNote       $02
00091D04 01                         	dc.b	$01
00091D05 E105                       	smpsAlterNote       $05
00091D07 0101                       	dc.b	$01, $01
00091D09 E1FF                       	smpsAlterNote       $FF
00091D0B 01                         	dc.b	$01
00091D0C ECF5                       	smpsPSGAlterVol     $F5
00091D0E 9B07                       	dc.b	nD2, $07
00091D10 EC0B                       	smpsPSGAlterVol     $0B
00091D12 8004                       	dc.b	nRst, $04
00091D14 ECF5                       	smpsPSGAlterVol     $F5
00091D16 9B06                       	dc.b	nD2, $06
00091D18 EC04                       	smpsPSGAlterVol     $04
00091D1A E701                       	dc.b	smpsNoAttack, $01
00091D1C EC07                       	smpsPSGAlterVol     $07
00091D1E 8006                       	dc.b	nRst, $06
00091D20 E105                       	smpsAlterNote       $05
00091D22 0101                       	dc.b	$01, $01
00091D24 E102                       	smpsAlterNote       $02
00091D26 01                         	dc.b	$01
00091D27 E1FC                       	smpsAlterNote       $FC
00091D29 01                         	dc.b	$01
00091D2A E1FF                       	smpsAlterNote       $FF
00091D2C ECF5                       	smpsPSGAlterVol     $F5
00091D2E 9B06                       	dc.b	nD2, $06
00091D30 EC04                       	smpsPSGAlterVol     $04
00091D32 E701                       	dc.b	smpsNoAttack, $01
00091D34 EC07                       	smpsPSGAlterVol     $07
00091D36 8003                       	dc.b	nRst, $03
00091D38 ECF5                       	smpsPSGAlterVol     $F5
00091D3A 9B06                       	dc.b	nD2, $06
00091D3C EC04                       	smpsPSGAlterVol     $04
00091D3E E701                       	dc.b	smpsNoAttack, $01
00091D40 EC07                       	smpsPSGAlterVol     $07
00091D42 8006                       	dc.b	nRst, $06
00091D44 E102                       	smpsAlterNote       $02
00091D46 01                         	dc.b	$01
00091D47 E106                       	smpsAlterNote       $06
00091D49 01                         	dc.b	$01
00091D4A E102                       	smpsAlterNote       $02
00091D4C 01                         	dc.b	$01
00091D4D E1FF                       	smpsAlterNote       $FF
00091D4F 01                         	dc.b	$01
00091D50 ECF5                       	smpsPSGAlterVol     $F5
00091D52 9B06                       	dc.b	nD2, $06
00091D54 EC04                       	smpsPSGAlterVol     $04
00091D56 E701                       	dc.b	smpsNoAttack, $01
00091D58 EC07                       	smpsPSGAlterVol     $07
00091D5A 8003                       	dc.b	nRst, $03
00091D5C ECF5                       	smpsPSGAlterVol     $F5
00091D5E 9B07                       	dc.b	nD2, $07
00091D60 EC0B                       	smpsPSGAlterVol     $0B
00091D62 8007                       	dc.b	nRst, $07
00091D64 E107                       	smpsAlterNote       $07
00091D66 0101                       	dc.b	$01, $01
00091D68 E1FE                       	smpsAlterNote       $FE
00091D6A 01                         	dc.b	$01
00091D6B E1FA                       	smpsAlterNote       $FA
00091D6D 0101                       	dc.b	$01, $01
00091D6F E103                       	smpsAlterNote       $03
00091D71 01                         	dc.b	$01
00091D72 E109                       	smpsAlterNote       $09
00091D74 01                         	dc.b	$01
00091D75 E107                       	smpsAlterNote       $07
00091D77 01                         	dc.b	$01
00091D78 E1FE                       	smpsAlterNote       $FE
00091D7A 01                         	dc.b	$01
00091D7B E108                       	smpsAlterNote       $08
00091D7D 01                         	dc.b	$01
00091D7E E1FD                       	smpsAlterNote       $FD
00091D80 ECF5                       	smpsPSGAlterVol     $F5
00091D82 940E                       	dc.b	nG1, $0E
00091D84 E103                       	smpsAlterNote       $03
00091D86 EC0B                       	smpsPSGAlterVol     $0B
00091D88 8001 01                    	dc.b	nRst, $01, $01
00091D8B E1FD                       	smpsAlterNote       $FD
00091D8D 01                         	dc.b	$01
00091D8E E1FB                       	smpsAlterNote       $FB
00091D90 0101                       	dc.b	$01, $01
00091D92 E100                       	smpsAlterNote       $00
00091D94 01                         	dc.b	$01
00091D95 E103                       	smpsAlterNote       $03
00091D97 01                         	dc.b	$01
00091D98 E100                       	smpsAlterNote       $00
00091D9A 01                         	dc.b	$01
00091D9B E1FD                       	smpsAlterNote       $FD
00091D9D 01                         	dc.b	$01
00091D9E E1FA                       	smpsAlterNote       $FA
00091DA0 01                         	dc.b	$01
00091DA1 E1FD                       	smpsAlterNote       $FD
00091DA3 01                         	dc.b	$01
00091DA4 E103                       	smpsAlterNote       $03
00091DA6 0101                       	dc.b	$01, $01
00091DA8 E100                       	smpsAlterNote       $00
00091DAA 01                         	dc.b	$01
00091DAB E1FE                       	smpsAlterNote       $FE
00091DAD ECF5                       	smpsPSGAlterVol     $F5
00091DAF 960D                       	dc.b	nA1, $0D
00091DB1 E104                       	smpsAlterNote       $04
00091DB3 EC0B                       	smpsPSGAlterVol     $0B
00091DB5 8001 01                    	dc.b	nRst, $01, $01
00091DB8 E101                       	smpsAlterNote       $01
00091DBA 01                         	dc.b	$01
00091DBB E1FB                       	smpsAlterNote       $FB
00091DBD 0101                       	dc.b	$01, $01
00091DBF E1FE                       	smpsAlterNote       $FE
00091DC1 01                         	dc.b	$01
00091DC2 E104                       	smpsAlterNote       $04
00091DC4 0101                       	dc.b	$01, $01
00091DC6 E1FE                       	smpsAlterNote       $FE
00091DC8 01                         	dc.b	$01
00091DC9 E1FB                       	smpsAlterNote       $FB
00091DCB 0101                       	dc.b	$01, $01
00091DCD E101                       	smpsAlterNote       $01
00091DCF 01                         	dc.b	$01
00091DD0 E104                       	smpsAlterNote       $04
00091DD2 0101                       	dc.b	$01, $01
00091DD4 E1FE                       	smpsAlterNote       $FE
00091DD6 ECF5                       	smpsPSGAlterVol     $F5
00091DD8 970D                       	dc.b	nBb1, $0D
00091DDA E101                       	smpsAlterNote       $01
00091DDC EC04                       	smpsPSGAlterVol     $04
00091DDE E701                       	dc.b	smpsNoAttack, $01
00091DE0 EC07                       	smpsPSGAlterVol     $07
00091DE2 E104                       	smpsAlterNote       $04
00091DE4 8001                       	dc.b	nRst, $01
00091DE6 E103                       	smpsAlterNote       $03
00091DE8 01                         	dc.b	$01
00091DE9 E1FE                       	smpsAlterNote       $FE
00091DEB 01                         	dc.b	$01
00091DEC E1FA                       	smpsAlterNote       $FA
00091DEE 01                         	dc.b	$01
00091DEF E1FE                       	smpsAlterNote       $FE
00091DF1 01                         	dc.b	$01
00091DF2 E101                       	smpsAlterNote       $01
00091DF4 01                         	dc.b	$01
00091DF5 E104                       	smpsAlterNote       $04
00091DF7 01                         	dc.b	$01
00091DF8 E101                       	smpsAlterNote       $01
00091DFA 01                         	dc.b	$01
00091DFB E1FB                       	smpsAlterNote       $FB
00091DFD 01                         	dc.b	$01
00091DFE E1FA                       	smpsAlterNote       $FA
00091E00 01                         	dc.b	$01
00091E01 E1FE                       	smpsAlterNote       $FE
00091E03 01                         	dc.b	$01
00091E04 E103                       	smpsAlterNote       $03
00091E06 0101                       	dc.b	$01, $01
00091E08 E101                       	smpsAlterNote       $01
00091E0A 01                         	dc.b	$01
00091E0B E1FE                       	smpsAlterNote       $FE
00091E0D ECF5                       	smpsPSGAlterVol     $F5
00091E0F 990D                       	dc.b	nC2, $0D
00091E11 E104                       	smpsAlterNote       $04
00091E13 EC0B                       	smpsPSGAlterVol     $0B
00091E15 8001 01                    	dc.b	nRst, $01, $01
00091E18 E102                       	smpsAlterNote       $02
00091E1A 01                         	dc.b	$01
00091E1B E1FC                       	smpsAlterNote       $FC
00091E1D 0101                       	dc.b	$01, $01
00091E1F E102                       	smpsAlterNote       $02
00091E21 01                         	dc.b	$01
00091E22 E104                       	smpsAlterNote       $04
00091E24 01                         	dc.b	$01
00091E25 E1FF                       	smpsAlterNote       $FF
00091E27 ECF5                       	smpsPSGAlterVol     $F5
00091E29 9B06                       	dc.b	nD2, $06
00091E2B EC04                       	smpsPSGAlterVol     $04
00091E2D E701                       	dc.b	smpsNoAttack, $01
00091E2F EC07                       	smpsPSGAlterVol     $07
00091E31 8003                       	dc.b	nRst, $03
00091E33 ECF5                       	smpsPSGAlterVol     $F5
00091E35 9B07                       	dc.b	nD2, $07
00091E37 EC0B                       	smpsPSGAlterVol     $0B
00091E39 8006                       	dc.b	nRst, $06
00091E3B E101                       	smpsAlterNote       $01
00091E3D 01                         	dc.b	$01
00091E3E E104                       	smpsAlterNote       $04
00091E40 0101                       	dc.b	$01, $01
00091E42 E1FE                       	smpsAlterNote       $FE
00091E44 01                         	dc.b	$01
00091E45 E1FC                       	smpsAlterNote       $FC
00091E47 01                         	dc.b	$01
00091E48 E1FE                       	smpsAlterNote       $FE
00091E4A ECF5                       	smpsPSGAlterVol     $F5
00091E4C 9C06                       	dc.b	nEb2, $06
00091E4E EC0B                       	smpsPSGAlterVol     $0B
00091E50 8004                       	dc.b	nRst, $04
00091E52 ECF5                       	smpsPSGAlterVol     $F5
00091E54 9C06                       	dc.b	nEb2, $06
00091E56 EC04                       	smpsPSGAlterVol     $04
00091E58 E701                       	dc.b	smpsNoAttack, $01
00091E5A EC07                       	smpsPSGAlterVol     $07
00091E5C 8006                       	dc.b	nRst, $06
00091E5E E105                       	smpsAlterNote       $05
00091E60 01                         	dc.b	$01
00091E61 E106                       	smpsAlterNote       $06
00091E63 01                         	dc.b	$01
00091E64 E102                       	smpsAlterNote       $02
00091E66 01                         	dc.b	$01
00091E67 E1FB                       	smpsAlterNote       $FB
00091E69 01                         	dc.b	$01
00091E6A E1FF                       	smpsAlterNote       $FF
00091E6C ECF5                       	smpsPSGAlterVol     $F5
00091E6E 9B06                       	dc.b	nD2, $06
00091E70 EC04                       	smpsPSGAlterVol     $04
00091E72 E701                       	dc.b	smpsNoAttack, $01
00091E74 EC07                       	smpsPSGAlterVol     $07
00091E76 8003                       	dc.b	nRst, $03
00091E78 ECF5                       	smpsPSGAlterVol     $F5
00091E7A 9B06                       	dc.b	nD2, $06
00091E7C EC04                       	smpsPSGAlterVol     $04
00091E7E E701                       	dc.b	smpsNoAttack, $01
00091E80 EC07                       	smpsPSGAlterVol     $07
00091E82 8006                       	dc.b	nRst, $06
00091E84 E101                       	smpsAlterNote       $01
00091E86 01                         	dc.b	$01
00091E87 E105                       	smpsAlterNote       $05
00091E89 01                         	dc.b	$01
00091E8A E104                       	smpsAlterNote       $04
00091E8C 01                         	dc.b	$01
00091E8D E1FE                       	smpsAlterNote       $FE
00091E8F 01                         	dc.b	$01
00091E90 ECF5                       	smpsPSGAlterVol     $F5
00091E92 9C07                       	dc.b	nEb2, $07
00091E94 EC0B                       	smpsPSGAlterVol     $0B
00091E96 8004                       	dc.b	nRst, $04
00091E98 ECF5                       	smpsPSGAlterVol     $F5
00091E9A 9C06                       	dc.b	nEb2, $06
00091E9C EC0B                       	smpsPSGAlterVol     $0B
00091E9E 8007                       	dc.b	nRst, $07
00091EA0 E105                       	smpsAlterNote       $05
00091EA2 0101                       	dc.b	$01, $01
00091EA4 E102                       	smpsAlterNote       $02
00091EA6 01                         	dc.b	$01
00091EA7 E1FB                       	smpsAlterNote       $FB
00091EA9 01                         	dc.b	$01
00091EAA E1FF                       	smpsAlterNote       $FF
00091EAC ECF5                       	smpsPSGAlterVol     $F5
00091EAE 9B06                       	dc.b	nD2, $06
00091EB0 EC04                       	smpsPSGAlterVol     $04
00091EB2 E701                       	dc.b	smpsNoAttack, $01
00091EB4 EC07                       	smpsPSGAlterVol     $07
00091EB6 8003                       	dc.b	nRst, $03
00091EB8 ECF5                       	smpsPSGAlterVol     $F5
00091EBA 9B06                       	dc.b	nD2, $06
00091EBC EC04                       	smpsPSGAlterVol     $04
00091EBE E701                       	dc.b	smpsNoAttack, $01
00091EC0 EC07                       	smpsPSGAlterVol     $07
00091EC2 8006                       	dc.b	nRst, $06
00091EC4 E101                       	smpsAlterNote       $01
00091EC6 01                         	dc.b	$01
00091EC7 E105                       	smpsAlterNote       $05
00091EC9 01                         	dc.b	$01
00091ECA E101                       	smpsAlterNote       $01
00091ECC 01                         	dc.b	$01
00091ECD E1FC                       	smpsAlterNote       $FC
00091ECF 01                         	dc.b	$01
00091ED0 E1FE                       	smpsAlterNote       $FE
00091ED2 ECF5                       	smpsPSGAlterVol     $F5
00091ED4 9C06                       	dc.b	nEb2, $06
00091ED6 EC04                       	smpsPSGAlterVol     $04
00091ED8 E701                       	dc.b	smpsNoAttack, $01
00091EDA EC07                       	smpsPSGAlterVol     $07
00091EDC 8003                       	dc.b	nRst, $03
00091EDE ECF5                       	smpsPSGAlterVol     $F5
00091EE0 9C07                       	dc.b	nEb2, $07
00091EE2 EC0B                       	smpsPSGAlterVol     $0B
00091EE4 8006                       	dc.b	nRst, $06
00091EE6 E102                       	smpsAlterNote       $02
00091EE8 01                         	dc.b	$01
00091EE9 E105                       	smpsAlterNote       $05
00091EEB 0101                       	dc.b	$01, $01
00091EED E1FF                       	smpsAlterNote       $FF
00091EEF 01                         	dc.b	$01
00091EF0 ECF5                       	smpsPSGAlterVol     $F5
00091EF2 9B07                       	dc.b	nD2, $07
00091EF4 EC0B                       	smpsPSGAlterVol     $0B
00091EF6 8004                       	dc.b	nRst, $04
00091EF8 ECF5                       	smpsPSGAlterVol     $F5
00091EFA 9B06                       	dc.b	nD2, $06
00091EFC EC04                       	smpsPSGAlterVol     $04
00091EFE E701                       	dc.b	smpsNoAttack, $01
00091F00 EC07                       	smpsPSGAlterVol     $07
00091F02 8002                       	dc.b	nRst, $02
00091F04 E1FC                       	smpsAlterNote       $FC
00091F06 ECF5                       	smpsPSGAlterVol     $F5
00091F08 9006                       	dc.b	nEb1, $06
00091F0A EC04                       	smpsPSGAlterVol     $04
00091F0C E701                       	dc.b	smpsNoAttack, $01
00091F0E ECFC                       	smpsPSGAlterVol     $FC
00091F10 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091F14 EC04                       	smpsPSGAlterVol     $04
00091F16 E701                       	dc.b	smpsNoAttack, $01
00091F18 E1FD                       	smpsAlterNote       $FD
00091F1A ECFC                       	smpsPSGAlterVol     $FC
00091F1C 9402                       	dc.b	nG1, $02
00091F1E EC04                       	smpsPSGAlterVol     $04
00091F20 E701                       	dc.b	smpsNoAttack, $01
00091F22 E1FE                       	smpsAlterNote       $FE
00091F24 ECFC                       	smpsPSGAlterVol     $FC
00091F26 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091F2A EC04                       	smpsPSGAlterVol     $04
00091F2C E701                       	dc.b	smpsNoAttack, $01
00091F2E EC07                       	smpsPSGAlterVol     $07
00091F30 8008                       	dc.b	nRst, $08
00091F32 F6F4 F3                    	smpsJump            music84_Jump06
00091F35                            
00091F35                            ; PSG3 Data
00091F35                            music84_PSG3:
00091F35 F500                       	smpsPSGvoice        $00
00091F37 E1FF                       	smpsAlterNote       $FF
00091F39 EC0F                       	smpsPSGAlterVol     $0F
00091F3B 803A                       	dc.b	nRst, $3A
00091F3D                            
00091F3D                            music84_Jump05:
00091F3D 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00091F49 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00091F53 F6FF E8                    	smpsJump            music84_Jump05
00091F56                            
00091F56                            ; DAC Data
00091F56                            music84_DAC:
00091F56 E0C0                       	smpsPan             panCenter, $00
00091F58 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00091F64 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00091F70 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00091F7C 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091F88 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091F94 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00091FA0 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091FAC 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00091FB8 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091FC4 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00091FD0 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091FDC 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00091FE8 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091FF4 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00092000 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0009200C 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00092018 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00092024 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00092030 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0009203C 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00092048 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00092054 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00092060 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0009206C 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00092078 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00092084 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00092090 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0009209C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000920A8 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000920B4 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000920C0 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000920CC 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000920D8 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000920E4 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000920F0 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000920FC 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00092108 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00092114 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00092120 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0009212C 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00092138 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00092144 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00092150 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0009215C 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00092168 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00092174 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00092180 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0009218C 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00092198 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
000921A4 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000921B0 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000921BC 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000921C8 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000921D4 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000921E0 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000921EC 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000921F8 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00092204 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00092210 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0009221C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00092228 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00092234 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00092240 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0009224C 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00092258 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00092264 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00092270 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0009227C 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00092288 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00092294 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000922A0 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
000922AC 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000922B8 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000922C4 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000922D0 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000922DC E0C0                       	smpsPan             panCenter, $00
000922DE F2                         	smpsStop
000922DF                            
000922DF                            music84_Voices:
000922DF                            ;	Voice $00
000922DF                            ;	$3D
000922DF                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000922DF                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000922DF                            	smpsVcAlgorithm     $05
000922DF                            	smpsVcFeedback      $07
000922DF                            	smpsVcUnusedBits    $00
000922DF                            	smpsVcDetune        $05, $04, $03, $04
000922DF                            	smpsVcCoarseFreq    $01, $01, $01, $01
000922DF                            	smpsVcRateScale     $00, $00, $00, $00
000922DF                            	smpsVcAttackRate    $11, $11, $11, $11
000922DF                            	smpsVcAmpMod        $00, $00, $00, $00
000922DF                            	smpsVcDecayRate1    $00, $00, $00, $0A
000922DF                            	smpsVcDecayRate2    $00, $00, $00, $0B
000922DF                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000922DF                            	smpsVcReleaseRate   $08, $08, $08, $07
000922DF 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000922F8                            
000922F8                            ;	Voice $01
000922F8                            ;	$04
000922F8                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000922F8                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000922F8                            	smpsVcAlgorithm     $04
000922F8                            	smpsVcFeedback      $00
000922F8                            	smpsVcUnusedBits    $00
000922F8                            	smpsVcDetune        $04, $03, $04, $05
000922F8                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000922F8                            	smpsVcRateScale     $00, $01, $00, $01
000922F8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000922F8                            	smpsVcAmpMod        $00, $00, $00, $00
000922F8                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000922F8                            	smpsVcDecayRate2    $05, $00, $05, $00
000922F8                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000922F8                            	smpsVcReleaseRate   $06, $06, $06, $06
000922F8 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00092311                            
00092311                            ;	Voice $02
00092311                            ;	$30
00092311                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00092311                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00092311                            	smpsVcAlgorithm     $00
00092311                            	smpsVcFeedback      $06
00092311                            	smpsVcUnusedBits    $00
00092311                            	smpsVcDetune        $04, $02, $00, $06
00092311                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00092311                            	smpsVcRateScale     $00, $00, $00, $00
00092311                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00092311                            	smpsVcAmpMod        $00, $00, $00, $00
00092311                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00092311                            	smpsVcDecayRate2    $01, $01, $01, $01
00092311                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00092311                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00092311 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009232A                            
0009232A                            ;	Voice $03
0009232A                            ;	$3A
0009232A                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009232A                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009232A                            	smpsVcAlgorithm     $02
0009232A                            	smpsVcFeedback      $07
0009232A                            	smpsVcUnusedBits    $00
0009232A                            	smpsVcDetune        $04, $06, $02, $00
0009232A                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009232A                            	smpsVcRateScale     $00, $00, $00, $00
0009232A                            	smpsVcAttackRate    $18, $19, $14, $14
0009232A                            	smpsVcAmpMod        $00, $00, $00, $00
0009232A                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009232A                            	smpsVcDecayRate2    $00, $00, $00, $00
0009232A                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009232A                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009232A 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00092343                            
00092343                            ;	Voice $04
00092343                            ;	$3C
00092343                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00092343                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00092343                            	smpsVcAlgorithm     $04
00092343                            	smpsVcFeedback      $07
00092343                            	smpsVcUnusedBits    $00
00092343                            	smpsVcDetune        $07, $00, $00, $03
00092343                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00092343                            	smpsVcRateScale     $00, $00, $00, $00
00092343                            	smpsVcAttackRate    $10, $1F, $10, $1F
00092343                            	smpsVcAmpMod        $00, $00, $00, $00
00092343                            	smpsVcDecayRate1    $00, $00, $00, $00
00092343                            	smpsVcDecayRate2    $00, $00, $00, $00
00092343                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00092343                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00092343 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0009235C                            
0009235C                            ;	Voice $05
0009235C                            ;	$38
0009235C                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0009235C                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0009235C                            	smpsVcAlgorithm     $00
0009235C                            	smpsVcFeedback      $07
0009235C                            	smpsVcUnusedBits    $00
0009235C                            	smpsVcDetune        $04, $06, $02, $00
0009235C                            	smpsVcCoarseFreq    $01, $01, $01, $00
0009235C                            	smpsVcRateScale     $00, $00, $00, $00
0009235C                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0009235C                            	smpsVcAmpMod        $00, $00, $00, $00
0009235C                            	smpsVcDecayRate1    $00, $03, $00, $17
0009235C                            	smpsVcDecayRate2    $00, $08, $08, $0B
0009235C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0009235C                            	smpsVcReleaseRate   $08, $05, $05, $05
0009235C 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00092375                            
00092375                            
00092376 00                         		even
00092376                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00096586                            		even
00096586                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
0009A0DE 00                         		even
0009A0DE                            Music87:	include	sound\music87.asm; Invincibility
0009A0DE                            triple_Header:
0009A0DE =00000001                  smpsHeaderStartSong = 1
0009A0DE 0000                       	smpsHeaderVoice     triple_Voices
0009A0E0 0501                       	smpsHeaderChan      $05, $01
0009A0E2 0200                       	smpsHeaderTempo     $02, $00
0009A0E4                            
0009A0E8 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
0009A0EC 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
0009A0F0 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0009A0F4 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0009A0F8 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
0009A0FE                            
0009A0FE                            ; DAC Data
0009A0FE                            triple_DAC:
0009A0FE E0C0                       	smpsPan             panCenter, $00
0009A100 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0009A106                            
0009A106                            triple_Loop01:
0009A106 8282 82                    	dc.b	dSnare, dSnare, dSnare
0009A109                            
0009A109                            triple_Loop00:
0009A109 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0009A115 06                         	dc.b	$06
0009A116 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
0009A11B 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0009A127 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
0009A12E F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0009A133 0303 1B                    	dc.b	$03, $03, $1B
0009A136 E0C0                       	smpsPan             panCenter, $00
0009A138 F6FF C4                    	smpsJump triple_DAC
0009A13B                            
0009A13B                            ; FM1 Data
0009A13B                            triple_FM1:
0009A13B E0C0                       	smpsPan             panCenter, $00
0009A13F 8018                       	dc.b	nRst, $18
0009A141                            
0009A141                            triple_Loop0B:
0009A141 AC06 B8                    	dc.b	nG3, $06, nG4
0009A144 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
0009A149                            
0009A149                            triple_Loop0C:
0009A149 A7B3                       	dc.b	nD3, nD4
0009A14B F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
0009A150                            
0009A150                            triple_Loop0D:
0009A150 A9B5                       	dc.b	nE3, nE4
0009A152 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0009A157 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
0009A15F F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0009A164 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
0009A170 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
0009A17C AD                         	dc.b	nAb3
0009A17D F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0009A182 8018                       	dc.b	nRst, $18
0009A184 E0C0                       	smpsPan             panCenter, $00
0009A188 F6FF B1                    	smpsJump triple_FM1
0009A18B                            
0009A18B                            ; FM2 Data
0009A18B                            triple_FM2:
0009A18B E0C0                       	smpsPan             panCenter, $00
0009A18F 8018                       	dc.b	nRst, $18
0009A191                            
0009A191                            triple_Loop07:
0009A191 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A19D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A1A9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
0009A1AE 8003                       	dc.b	nRst, $03
0009A1B0                            
0009A1B0                            triple_Loop08:
0009A1B0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A1B6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0009A1BB B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009A1C1                            
0009A1C1                            triple_Loop09:
0009A1C1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A1CD C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A1D9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
0009A1DE 8003                       	dc.b	nRst, $03
0009A1E0                            
0009A1E0                            triple_Loop0A:
0009A1E0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A1E6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0009A1EB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009A1F1 E0C0                       	smpsPan             panCenter, $00
0009A1F5 F6FF 94                    	smpsJump triple_FM2
0009A1F8                            
0009A1F8                            ; FM3 Data
0009A1F8                            triple_FM3:
0009A1F8 E0C0                       	smpsPan             panCenter, $00
0009A1FC 8018                       	dc.b	nRst, $18
0009A1FE                            
0009A1FE                            triple_Loop06:
0009A1FE B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0009A205 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
0009A20A 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0009A216 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0009A222 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0009A225 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
0009A22A 8018                       	dc.b	nRst, $18
0009A22C E0C0                       	smpsPan             panCenter, $00
0009A230 F6FF C6                    	smpsJump triple_FM3
0009A233                            
0009A233                            ; FM4 Data
0009A233                            triple_FM4:
0009A233 E103                       	smpsAlterNote       $03
0009A237 E0C0                       	smpsPan             panCenter, $00
0009A239 8018                       	dc.b	nRst, $18
0009A23B                            
0009A23B                            triple_Loop02:
0009A23B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A247 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A253 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009A258 8003                       	dc.b	nRst, $03
0009A25A                            
0009A25A                            triple_Loop03:
0009A25A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A260 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0009A265 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009A26B                            
0009A26B                            triple_Loop04:
0009A26B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009A277 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009A283 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0009A288 8003                       	dc.b	nRst, $03
0009A28A                            
0009A28A                            triple_Loop05:
0009A28A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A290 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0009A295 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009A29B E0C0                       	smpsPan             panCenter, $00
0009A29D F6FF 94                    	smpsJump triple_FM4
0009A2A0                            
0009A2A0                            ; PSG1 Data
0009A2A0                            triple_PSG1:
0009A2A0 8018                       	dc.b	nRst, $18
0009A2A2                            
0009A2A2                            triple_Loop0E:
0009A2A2 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A2AE 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A2BA 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A2C6 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A2CA F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0009A2CF A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A2DB 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A2E7 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A2F3 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A2F7                            
0009A2F7                            triple_Loop0F:
0009A2F7 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A2FD F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0009A302 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009A308                            
0009A308                            triple_Loop10:
0009A308 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A314 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A320 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A32C 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A330 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009A335 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A341 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A34D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A359 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A35D                            
0009A35D                            triple_Loop11:
0009A35D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A363 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009A368 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0009A36E F500                       	smpsPSGvoice        $00
0009A370 F6FF 2E                    	smpsJump triple_PSG1
0009A373                            
0009A373                            triple_Voices:
0009A373                            ;	Voice $00
0009A373                            ;	$3A
0009A373                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009A373                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009A373                            	smpsVcAlgorithm     $02
0009A373                            	smpsVcFeedback      $07
0009A373                            	smpsVcUnusedBits    $00
0009A373                            	smpsVcDetune        $00, $00, $00, $00
0009A373                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009A373                            	smpsVcRateScale     $01, $02, $02, $02
0009A373                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009A373                            	smpsVcAmpMod        $00, $00, $00, $00
0009A373                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009A373                            	smpsVcDecayRate2    $00, $00, $00, $00
0009A373                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009A373                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A373 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009A38C                            
0009A38C                            ;	Voice $01
0009A38C                            ;	$20
0009A38C                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009A38C                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009A38C                            	smpsVcAlgorithm     $00
0009A38C                            	smpsVcFeedback      $04
0009A38C                            	smpsVcUnusedBits    $00
0009A38C                            	smpsVcDetune        $00, $00, $03, $07
0009A38C                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009A38C                            	smpsVcRateScale     $03, $03, $03, $02
0009A38C                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009A38C                            	smpsVcAmpMod        $00, $00, $00, $00
0009A38C                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009A38C                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009A38C                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009A38C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A38C 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A38C 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A3A6 00                         		even
0009A3A6                            Music88:	incbin	sound\music88.bin; Extra Life
0009A494                            		even
0009A494                            Music89:	incbin	sound\music89.bin; Special Stage
0009E35C 00                         		even
0009E35C                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009E526                            		even
0009E526                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E7C0                            		even
0009E7C0                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009EA5E                            		even
0009EA5E                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009EC7A                            		even
0009EC7A                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009F0E8 00                         		even
0009F0E8                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009F728 00                         		even
0009F728                            Music90:	incbin	sound\music90.bin ; Continue
0009FAC2 00                         		even
0009FAC2                            Music91:	incbin	sound\music91.bin ; Credits
000A0D90                            		even
000A0D90                            Music92:	incbin	sound\music92.bin ; Drowning
000A10D2 00                         		even
000A10D2                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A11A2                            		even
000A11A2                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A1E78 00                         		even
000A1E78                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A1FC8 00                         		even
000A1FC8                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A2002 00                         		even
000A2002                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A203C 00                         		even
000A203C                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A2076 00                         		even
000A2076                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A20B0 00                         		even
000A20B0                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A20EA 00                         		even
000A20EA                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A2124 00                         		even
000A2124                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A215E 00                         		even
000A215E                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A2198 00                         		even
000A2198                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A2688                            		even
000A2688                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A2688                            GentleBreeze_Header:
000A2688 =00000001                  smpsHeaderStartSong = 1
000A2688 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A268A 0603                       	smpsHeaderChan      $06, $03
000A268C 0100                       	smpsHeaderTempo     $01, $00
000A268E                            
000A2692 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A2696 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A269A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A269E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A26A2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A26A6 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A26AC 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A26B2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A26B8                            
000A26B8                            ; PSG3 Data
000A26B8                            GentleBreeze_PSG3:
000A26B8 F2                         	smpsStop
000A26B9                            
000A26B9                            ; FM1 Data
000A26B9                            GentleBreeze_FM1:
000A26BB E0C0                       	smpsPan             panCenter, $00
000A26BD E1FF                       	smpsAlterNote       $FF
000A26BF C410                       	dc.b	nG5, $10
000A26C1 E60F                       	smpsAlterVol        $0F
000A26C3 C4                         	dc.b	nG5
000A26C4 E6F1                       	smpsAlterVol        $F1
000A26C6 E100                       	smpsAlterNote       $00
000A26C8 C2                         	dc.b	nF5
000A26C9 E60F                       	smpsAlterVol        $0F
000A26CB 08                         	dc.b	$08
000A26CC E6F1                       	smpsAlterVol        $F1
000A26CE C010                       	dc.b	nEb5, $10
000A26D0 E60F                       	smpsAlterVol        $0F
000A26D2 C0                         	dc.b	nEb5
000A26D3 E6F1                       	smpsAlterVol        $F1
000A26D5 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A26DB E60F                       	smpsAlterVol        $0F
000A26DD C9                         	dc.b	nC6
000A26DE E6F1                       	smpsAlterVol        $F1
000A26E0 C5                         	dc.b	nAb5
000A26E1 E60F                       	smpsAlterVol        $0F
000A26E3 08                         	dc.b	$08
000A26E4 E6F1                       	smpsAlterVol        $F1
000A26E6 C010                       	dc.b	nEb5, $10
000A26E8 E60F                       	smpsAlterVol        $0F
000A26EA C0                         	dc.b	nEb5
000A26EB E6F1                       	smpsAlterVol        $F1
000A26ED C208                       	dc.b	nF5, $08
000A26EF E1FF                       	smpsAlterNote       $FF
000A26F1 C410                       	dc.b	nG5, $10
000A26F3 E100                       	smpsAlterNote       $00
000A26F5 C5C7                       	dc.b	nAb5, nBb5
000A26F7 E60F                       	smpsAlterVol        $0F
000A26F9 C7                         	dc.b	nBb5
000A26FA E6F1                       	smpsAlterVol        $F1
000A26FC C5                         	dc.b	nAb5
000A26FD E60F                       	smpsAlterVol        $0F
000A26FF 08                         	dc.b	$08
000A2700 E6F1                       	smpsAlterVol        $F1
000A2702 E1FF                       	smpsAlterNote       $FF
000A2704 C410                       	dc.b	nG5, $10
000A2706 E60F                       	smpsAlterVol        $0F
000A2708 C4                         	dc.b	nG5
000A2709 E6F1                       	smpsAlterVol        $F1
000A270B C4                         	dc.b	nG5
000A270C E100                       	smpsAlterNote       $00
000A270E C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2713 E60F                       	smpsAlterVol        $0F
000A2715 C2                         	dc.b	nF5
000A2716 E6F1                       	smpsAlterVol        $F1
000A2718 E1FF                       	smpsAlterNote       $FF
000A271A C4                         	dc.b	nG5
000A271B E60F                       	smpsAlterVol        $0F
000A271D 08                         	dc.b	$08
000A271E E6F1                       	smpsAlterVol        $F1
000A2720 10                         	dc.b	$10
000A2721 E60F                       	smpsAlterVol        $0F
000A2723 38                         	dc.b	$38
000A2724 E6F1                       	smpsAlterVol        $F1
000A2726 10                         	dc.b	$10
000A2727 E60F                       	smpsAlterVol        $0F
000A2729 C4                         	dc.b	nG5
000A272A E6F1                       	smpsAlterVol        $F1
000A272C E100                       	smpsAlterNote       $00
000A272E C2                         	dc.b	nF5
000A272F E60F                       	smpsAlterVol        $0F
000A2731 08                         	dc.b	$08
000A2732 E6F1                       	smpsAlterVol        $F1
000A2734 C010                       	dc.b	nEb5, $10
000A2736 E60F                       	smpsAlterVol        $0F
000A2738 C0                         	dc.b	nEb5
000A2739 E6F1                       	smpsAlterVol        $F1
000A273B BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2741 E60F                       	smpsAlterVol        $0F
000A2743 C9                         	dc.b	nC6
000A2744 E6F1                       	smpsAlterVol        $F1
000A2746 C5                         	dc.b	nAb5
000A2747 E60F                       	smpsAlterVol        $0F
000A2749 08                         	dc.b	$08
000A274A E6F1                       	smpsAlterVol        $F1
000A274C C010                       	dc.b	nEb5, $10
000A274E E60F                       	smpsAlterVol        $0F
000A2750 C0                         	dc.b	nEb5
000A2751 E6F1                       	smpsAlterVol        $F1
000A2753 C208                       	dc.b	nF5, $08
000A2755 E1FF                       	smpsAlterNote       $FF
000A2757 C410                       	dc.b	nG5, $10
000A2759 E100                       	smpsAlterNote       $00
000A275B C5C7                       	dc.b	nAb5, nBb5
000A275D E60F                       	smpsAlterVol        $0F
000A275F C7                         	dc.b	nBb5
000A2760 E6F1                       	smpsAlterVol        $F1
000A2762 C5                         	dc.b	nAb5
000A2763 E60F                       	smpsAlterVol        $0F
000A2765 08                         	dc.b	$08
000A2766 E6F1                       	smpsAlterVol        $F1
000A2768 E1FF                       	smpsAlterNote       $FF
000A276A C410                       	dc.b	nG5, $10
000A276C E60F                       	smpsAlterVol        $0F
000A276E C4                         	dc.b	nG5
000A276F E6F1                       	smpsAlterVol        $F1
000A2771 C4                         	dc.b	nG5
000A2772 E100                       	smpsAlterNote       $00
000A2774 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2779 E60F                       	smpsAlterVol        $0F
000A277B 28                         	dc.b	$28
000A277C E6F1                       	smpsAlterVol        $F1
000A277E C008 10                    	dc.b	nEb5, $08, $10
000A2781 E60F                       	smpsAlterVol        $0F
000A2783 21                         	dc.b	$21
000A2784                            
000A2784                            GentleBreeze_Loop12:
000A2784 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A2787 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A278C E717                       	dc.b	smpsNoAttack, $17
000A278E E6F1                       	smpsAlterVol        $F1
000A2790 E1FF                       	smpsAlterNote       $FF
000A2792 C410                       	dc.b	nG5, $10
000A2794 E60F                       	smpsAlterVol        $0F
000A2796 C4                         	dc.b	nG5
000A2797 E6F1                       	smpsAlterVol        $F1
000A2799 E100                       	smpsAlterNote       $00
000A279B C2                         	dc.b	nF5
000A279C E60F                       	smpsAlterVol        $0F
000A279E 08                         	dc.b	$08
000A279F E6F1                       	smpsAlterVol        $F1
000A27A1 C010                       	dc.b	nEb5, $10
000A27A3 E60F                       	smpsAlterVol        $0F
000A27A5 C0                         	dc.b	nEb5
000A27A6 E6F1                       	smpsAlterVol        $F1
000A27A8 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A27AE E60F                       	smpsAlterVol        $0F
000A27B0 C9                         	dc.b	nC6
000A27B1 E6F1                       	smpsAlterVol        $F1
000A27B3 C5                         	dc.b	nAb5
000A27B4 E60F                       	smpsAlterVol        $0F
000A27B6 08                         	dc.b	$08
000A27B7 E6F1                       	smpsAlterVol        $F1
000A27B9 C010                       	dc.b	nEb5, $10
000A27BB E60F                       	smpsAlterVol        $0F
000A27BD C0                         	dc.b	nEb5
000A27BE E6F1                       	smpsAlterVol        $F1
000A27C0 C208                       	dc.b	nF5, $08
000A27C2 E1FF                       	smpsAlterNote       $FF
000A27C4 C410                       	dc.b	nG5, $10
000A27C6 E100                       	smpsAlterNote       $00
000A27C8 C5C7                       	dc.b	nAb5, nBb5
000A27CA E60F                       	smpsAlterVol        $0F
000A27CC C7                         	dc.b	nBb5
000A27CD E6F1                       	smpsAlterVol        $F1
000A27CF C5                         	dc.b	nAb5
000A27D0 E60F                       	smpsAlterVol        $0F
000A27D2 08                         	dc.b	$08
000A27D3 E6F1                       	smpsAlterVol        $F1
000A27D5 E1FF                       	smpsAlterNote       $FF
000A27D7 C410                       	dc.b	nG5, $10
000A27D9 E60F                       	smpsAlterVol        $0F
000A27DB C4                         	dc.b	nG5
000A27DC E6F1                       	smpsAlterVol        $F1
000A27DE C4                         	dc.b	nG5
000A27DF E100                       	smpsAlterNote       $00
000A27E1 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A27E6 E60F                       	smpsAlterVol        $0F
000A27E8 C2                         	dc.b	nF5
000A27E9 E6F1                       	smpsAlterVol        $F1
000A27EB E1FF                       	smpsAlterNote       $FF
000A27ED C4                         	dc.b	nG5
000A27EE E60F                       	smpsAlterVol        $0F
000A27F0 08                         	dc.b	$08
000A27F1 E6F1                       	smpsAlterVol        $F1
000A27F3 10                         	dc.b	$10
000A27F4 E60F                       	smpsAlterVol        $0F
000A27F6 38                         	dc.b	$38
000A27F7 E6F1                       	smpsAlterVol        $F1
000A27F9 10                         	dc.b	$10
000A27FA E60F                       	smpsAlterVol        $0F
000A27FC C4                         	dc.b	nG5
000A27FD E6F1                       	smpsAlterVol        $F1
000A27FF E100                       	smpsAlterNote       $00
000A2801 C2                         	dc.b	nF5
000A2802 E60F                       	smpsAlterVol        $0F
000A2804 08                         	dc.b	$08
000A2805 E6F1                       	smpsAlterVol        $F1
000A2807 C010                       	dc.b	nEb5, $10
000A2809 E60F                       	smpsAlterVol        $0F
000A280B C0                         	dc.b	nEb5
000A280C E6F1                       	smpsAlterVol        $F1
000A280E BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2814 E60F                       	smpsAlterVol        $0F
000A2816 C9                         	dc.b	nC6
000A2817 E6F1                       	smpsAlterVol        $F1
000A2819 C5                         	dc.b	nAb5
000A281A E60F                       	smpsAlterVol        $0F
000A281C 08                         	dc.b	$08
000A281D E6F1                       	smpsAlterVol        $F1
000A281F C010                       	dc.b	nEb5, $10
000A2821 E60F                       	smpsAlterVol        $0F
000A2823 C0                         	dc.b	nEb5
000A2824 E6F1                       	smpsAlterVol        $F1
000A2826 C208                       	dc.b	nF5, $08
000A2828 E1FF                       	smpsAlterNote       $FF
000A282A C410                       	dc.b	nG5, $10
000A282C E100                       	smpsAlterNote       $00
000A282E C5C7                       	dc.b	nAb5, nBb5
000A2830 E60F                       	smpsAlterVol        $0F
000A2832 C7                         	dc.b	nBb5
000A2833 E6F1                       	smpsAlterVol        $F1
000A2835 C5                         	dc.b	nAb5
000A2836 E60F                       	smpsAlterVol        $0F
000A2838 08                         	dc.b	$08
000A2839 E6F1                       	smpsAlterVol        $F1
000A283B E1FF                       	smpsAlterNote       $FF
000A283D C410                       	dc.b	nG5, $10
000A283F E60F                       	smpsAlterVol        $0F
000A2841 C4                         	dc.b	nG5
000A2842 E6F1                       	smpsAlterVol        $F1
000A2844 C4                         	dc.b	nG5
000A2845 E100                       	smpsAlterNote       $00
000A2847 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A284C E60F                       	smpsAlterVol        $0F
000A284E 28                         	dc.b	$28
000A284F E6F1                       	smpsAlterVol        $F1
000A2851 C008 10                    	dc.b	nEb5, $08, $10
000A2854 E60F                       	smpsAlterVol        $0F
000A2856 21                         	dc.b	$21
000A2857 E0C0                       	smpsPan             panCenter, $00
000A2859 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A285C                            
000A285C                            ; FM2 Data
000A285C                            GentleBreeze_FM2:
000A285E E60C                       	smpsAlterVol        $0C
000A2860 E0C0                       	smpsPan             panCenter, $00
000A2862 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A286E A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A287A 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A2886 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2892 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A289E A039                       	dc.b	nG2, $39
000A28A0                            
000A28A0                            GentleBreeze_Jump04:
000A28A0 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A28A3                            
000A28A3                            GentleBreeze_Loop11:
000A28A3 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A28AF A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A28BB 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A28C7 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A28D3 A3                         	dc.b	nBb2
000A28D4 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A28D9 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A28E5 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A28F1 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A28FD 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2909 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A2915 A039                       	dc.b	nG2, $39
000A2917 E0C0                       	smpsPan             panCenter, $00
000A2919 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A291C                            
000A291C                            ; FM3 Data
000A291C                            GentleBreeze_FM3:
000A291E E0C0                       	smpsPan             panCenter, $00
000A2920 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A2928 E616                       	smpsAlterVol        $16
000A292A F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A292F                            
000A292F                            GentleBreeze_Loop0F:
000A292F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A2933 E1FF                       	smpsAlterNote       $FF
000A2935 C4                         	dc.b	nG5
000A2936 E100                       	smpsAlterNote       $00
000A2938 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A293D E608                       	smpsAlterVol        $08
000A293F C080 08                    	dc.b	nEb5, nRst, $08
000A2942 E6F8                       	smpsAlterVol        $F8
000A2944 C7                         	dc.b	nBb5
000A2945 E1FF                       	smpsAlterNote       $FF
000A2947 C4                         	dc.b	nG5
000A2948 E100                       	smpsAlterNote       $00
000A294A C0BB                       	dc.b	nEb5, nBb4
000A294C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A2951 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2954 E1FF                       	smpsAlterNote       $FF
000A2956 C4                         	dc.b	nG5
000A2957 E100                       	smpsAlterNote       $00
000A2959 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A295E E608                       	smpsAlterVol        $08
000A2960 C080 08                    	dc.b	nEb5, nRst, $08
000A2963 E6F8                       	smpsAlterVol        $F8
000A2965 E1FF                       	smpsAlterNote       $FF
000A2967 C4                         	dc.b	nG5
000A2968 E100                       	smpsAlterNote       $00
000A296A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A2971 E1FF                       	smpsAlterNote       $FF
000A2973 C4                         	dc.b	nG5
000A2974 E100                       	smpsAlterNote       $00
000A2976 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A297B E1FF                       	smpsAlterNote       $FF
000A297D C4                         	dc.b	nG5
000A297E E100                       	smpsAlterNote       $00
000A2980 C7                         	dc.b	nBb5
000A2981 E1FF                       	smpsAlterNote       $FF
000A2983 C4                         	dc.b	nG5
000A2984 E100                       	smpsAlterNote       $00
000A2986 C2C0 01                    	dc.b	nF5, nEb5, $01
000A2989                            
000A2989                            GentleBreeze_Jump03:
000A2989 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A2990 E6FA                       	smpsAlterVol        $FA
000A2992 F4                         	smpsModOff
000A2993 E1FF                       	smpsAlterNote       $FF
000A2995 B850                       	dc.b	nG4, $50
000A2997 E100                       	smpsAlterNote       $00
000A2999 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A29A5 E1FF                       	smpsAlterNote       $FF
000A29A7 B810                       	dc.b	nG4, $10
000A29A9 E100                       	smpsAlterNote       $00
000A29AB BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A29B0 E1FF                       	smpsAlterNote       $FF
000A29B2 B8                         	dc.b	nG4
000A29B3 E100                       	smpsAlterNote       $00
000A29B5 B610                       	dc.b	nF4, $10
000A29B7 E1FF                       	smpsAlterNote       $FF
000A29B9 B850                       	dc.b	nG4, $50
000A29BB E100                       	smpsAlterNote       $00
000A29BD B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A29C5 E1FF                       	smpsAlterNote       $FF
000A29C7 AC08                       	dc.b	nG3, $08
000A29C9 E100                       	smpsAlterNote       $00
000A29CB AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A29D0 E1FF                       	smpsAlterNote       $FF
000A29D2 B850                       	dc.b	nG4, $50
000A29D4 E100                       	smpsAlterNote       $00
000A29D6 BB08                       	dc.b	nBb4, $08
000A29D8 E1FF                       	smpsAlterNote       $FF
000A29DA B8                         	dc.b	nG4
000A29DB E100                       	smpsAlterNote       $00
000A29DD BDBB B6                    	dc.b	nC5, nBb4, nF4
000A29E0 E1FF                       	smpsAlterNote       $FF
000A29E2 B810 08                    	dc.b	nG4, $10, $08
000A29E5 E100                       	smpsAlterNote       $00
000A29E7 B6                         	dc.b	nF4
000A29E8 E1FF                       	smpsAlterNote       $FF
000A29EA B880                       	dc.b	nG4, nRst
000A29EC E100                       	smpsAlterNote       $00
000A29EE BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A29F1 E1FF                       	smpsAlterNote       $FF
000A29F3 B810                       	dc.b	nG4, $10
000A29F5 E100                       	smpsAlterNote       $00
000A29F7 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A29FE E1FF                       	smpsAlterNote       $FF
000A2A00 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A2A0E E606                       	smpsAlterVol        $06
000A2A10 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2A15 E100                       	smpsAlterNote       $00
000A2A17                            
000A2A17                            GentleBreeze_Loop10:
000A2A17 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A2A1B E1FF                       	smpsAlterNote       $FF
000A2A1D C4                         	dc.b	nG5
000A2A1E E100                       	smpsAlterNote       $00
000A2A20 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2A25 E608                       	smpsAlterVol        $08
000A2A27 C080 08                    	dc.b	nEb5, nRst, $08
000A2A2A E6F8                       	smpsAlterVol        $F8
000A2A2C C7                         	dc.b	nBb5
000A2A2D E1FF                       	smpsAlterNote       $FF
000A2A2F C4                         	dc.b	nG5
000A2A30 E100                       	smpsAlterNote       $00
000A2A32 C0BB                       	dc.b	nEb5, nBb4
000A2A34 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A2A39 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A2A3C E1FF                       	smpsAlterNote       $FF
000A2A3E C4                         	dc.b	nG5
000A2A3F E100                       	smpsAlterNote       $00
000A2A41 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2A46 E608                       	smpsAlterVol        $08
000A2A48 C080 08                    	dc.b	nEb5, nRst, $08
000A2A4B E6F8                       	smpsAlterVol        $F8
000A2A4D E1FF                       	smpsAlterNote       $FF
000A2A4F C4                         	dc.b	nG5
000A2A50 E100                       	smpsAlterNote       $00
000A2A52 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A2A59 E1FF                       	smpsAlterNote       $FF
000A2A5B C4                         	dc.b	nG5
000A2A5C E100                       	smpsAlterNote       $00
000A2A5E C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A2A63 E1FF                       	smpsAlterNote       $FF
000A2A65 C4                         	dc.b	nG5
000A2A66 E100                       	smpsAlterNote       $00
000A2A68 C7                         	dc.b	nBb5
000A2A69 E1FF                       	smpsAlterNote       $FF
000A2A6B C4                         	dc.b	nG5
000A2A6C E100                       	smpsAlterNote       $00
000A2A6E C2C0 01                    	dc.b	nF5, nEb5, $01
000A2A71 E0C0                       	smpsPan             panCenter, $00
000A2A73 F1                         	smpsModOn
000A2A74 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A2A77                            
000A2A77                            ; FM4 Data
000A2A77                            GentleBreeze_FM4:
000A2A79 E0C0                       	smpsPan             panCenter, $00
000A2A7B 80                         	dc.b	nRst
000A2A7C                            
000A2A7C                            GentleBreeze_Loop0D:
000A2A7C 7F                         	dc.b	$7F
000A2A7D F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A2A82 77                         	dc.b	$77
000A2A85 E609                       	smpsAlterVol        $09
000A2A87 C001                       	dc.b	nEb5, $01
000A2A89                            
000A2A89                            GentleBreeze_Jump02:
000A2A89 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A2A8E E607                       	smpsAlterVol        $07
000A2A90 E1FF                       	smpsAlterNote       $FF
000A2A92 C450                       	dc.b	nG5, $50
000A2A94 E100                       	smpsAlterNote       $00
000A2A96 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A2AA2 E1FF                       	smpsAlterNote       $FF
000A2AA4 C410                       	dc.b	nG5, $10
000A2AA6 E100                       	smpsAlterNote       $00
000A2AA8 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A2AAD E1FF                       	smpsAlterNote       $FF
000A2AAF C4                         	dc.b	nG5
000A2AB0 E100                       	smpsAlterNote       $00
000A2AB2 C210                       	dc.b	nF5, $10
000A2AB4 E1FF                       	smpsAlterNote       $FF
000A2AB6 C450                       	dc.b	nG5, $50
000A2AB8 E100                       	smpsAlterNote       $00
000A2ABA C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A2AC2 E1FF                       	smpsAlterNote       $FF
000A2AC4 B808                       	dc.b	nG4, $08
000A2AC6 E100                       	smpsAlterNote       $00
000A2AC8 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A2ACD E1FF                       	smpsAlterNote       $FF
000A2ACF C450                       	dc.b	nG5, $50
000A2AD1 E100                       	smpsAlterNote       $00
000A2AD3 C708                       	dc.b	nBb5, $08
000A2AD5 E1FF                       	smpsAlterNote       $FF
000A2AD7 C4                         	dc.b	nG5
000A2AD8 E100                       	smpsAlterNote       $00
000A2ADA C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A2ADD E1FF                       	smpsAlterNote       $FF
000A2ADF C410 08                    	dc.b	nG5, $10, $08
000A2AE2 E100                       	smpsAlterNote       $00
000A2AE4 C2                         	dc.b	nF5
000A2AE5 E1FF                       	smpsAlterNote       $FF
000A2AE7 C480                       	dc.b	nG5, nRst
000A2AE9 E100                       	smpsAlterNote       $00
000A2AEB C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A2AEE E1FF                       	smpsAlterNote       $FF
000A2AF0 C410                       	dc.b	nG5, $10
000A2AF2 E100                       	smpsAlterNote       $00
000A2AF4 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A2AFB E1FF                       	smpsAlterNote       $FF
000A2AFD C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A2B05                            
000A2B05                            GentleBreeze_Loop0E:
000A2B05 7F                         	dc.b	$7F
000A2B06 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A2B0B 77                         	dc.b	$77
000A2B0C E100                       	smpsAlterNote       $00
000A2B0E C001                       	dc.b	nEb5, $01
000A2B10 E6F9                       	smpsAlterVol        $F9
000A2B12 E0C0                       	smpsPan             panCenter, $00
000A2B14 E100                       	smpsAlterNote       $00
000A2B16 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A2B19                            
000A2B19                            ; FM5 Data
000A2B19                            GentleBreeze_FM5:
000A2B1B E0C0                       	smpsPan             panCenter, $00
000A2B1D A5                         	dc.b	nC3
000A2B1E                            
000A2B1E                            GentleBreeze_Loop06:
000A2B1E 10                         	dc.b	$10
000A2B1F E607                       	smpsAlterVol        $07
000A2B21 A5                         	dc.b	nC3
000A2B22 E6F9                       	smpsAlterVol        $F9
000A2B24 08                         	dc.b	$08
000A2B25 E607                       	smpsAlterVol        $07
000A2B27 A5                         	dc.b	nC3
000A2B28 E608                       	smpsAlterVol        $08
000A2B2A A5                         	dc.b	nC3
000A2B2B E6F1                       	smpsAlterVol        $F1
000A2B2D 18                         	dc.b	$18
000A2B2E E607                       	smpsAlterVol        $07
000A2B30 10                         	dc.b	$10
000A2B31 E608                       	smpsAlterVol        $08
000A2B33 A5                         	dc.b	nC3
000A2B34 E6F1                       	smpsAlterVol        $F1
000A2B36 A5                         	dc.b	nC3
000A2B37 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A2B3C A5                         	dc.b	nC3
000A2B3D                            
000A2B3D                            GentleBreeze_Loop07:
000A2B3D E607                       	smpsAlterVol        $07
000A2B3F A5                         	dc.b	nC3
000A2B40 E6F9                       	smpsAlterVol        $F9
000A2B42 08                         	dc.b	$08
000A2B43 E607                       	smpsAlterVol        $07
000A2B45 A5                         	dc.b	nC3
000A2B46 E608                       	smpsAlterVol        $08
000A2B48 A5                         	dc.b	nC3
000A2B49 E6F1                       	smpsAlterVol        $F1
000A2B4B 10                         	dc.b	$10
000A2B4C F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A2B51                            
000A2B51                            GentleBreeze_Loop08:
000A2B51 A5                         	dc.b	nC3
000A2B52 E607                       	smpsAlterVol        $07
000A2B54 A5                         	dc.b	nC3
000A2B55 E6F9                       	smpsAlterVol        $F9
000A2B57 08                         	dc.b	$08
000A2B58 E607                       	smpsAlterVol        $07
000A2B5A A5                         	dc.b	nC3
000A2B5B E608                       	smpsAlterVol        $08
000A2B5D A5                         	dc.b	nC3
000A2B5E E6F1                       	smpsAlterVol        $F1
000A2B60 18                         	dc.b	$18
000A2B61 E607                       	smpsAlterVol        $07
000A2B63 10                         	dc.b	$10
000A2B64 E608                       	smpsAlterVol        $08
000A2B66 A5                         	dc.b	nC3
000A2B67 E6F1                       	smpsAlterVol        $F1
000A2B69 A5                         	dc.b	nC3
000A2B6A F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A2B6F A5                         	dc.b	nC3
000A2B70 E607                       	smpsAlterVol        $07
000A2B72 A5                         	dc.b	nC3
000A2B73 E6F9                       	smpsAlterVol        $F9
000A2B75 08                         	dc.b	$08
000A2B76 E607                       	smpsAlterVol        $07
000A2B78 A5                         	dc.b	nC3
000A2B79 E608                       	smpsAlterVol        $08
000A2B7B A5                         	dc.b	nC3
000A2B7C E6F1                       	smpsAlterVol        $F1
000A2B7E 10                         	dc.b	$10
000A2B7F E607                       	smpsAlterVol        $07
000A2B81 A5                         	dc.b	nC3
000A2B82 E6F9                       	smpsAlterVol        $F9
000A2B84 08                         	dc.b	$08
000A2B85 E607                       	smpsAlterVol        $07
000A2B87 A5                         	dc.b	nC3
000A2B88 E608                       	smpsAlterVol        $08
000A2B8A A5                         	dc.b	nC3
000A2B8B E6F1                       	smpsAlterVol        $F1
000A2B8D 01                         	dc.b	$01
000A2B8E                            
000A2B8E                            GentleBreeze_Jump01:
000A2B8E E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A2B91 E607                       	smpsAlterVol        $07
000A2B93                            
000A2B93                            GentleBreeze_Loop09:
000A2B93 10                         	dc.b	$10
000A2B94 E608                       	smpsAlterVol        $08
000A2B96 A5                         	dc.b	nC3
000A2B97 E6F1                       	smpsAlterVol        $F1
000A2B99 08                         	dc.b	$08
000A2B9A E60F                       	smpsAlterVol        $0F
000A2B9C 18                         	dc.b	$18
000A2B9D E6F8                       	smpsAlterVol        $F8
000A2B9F F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A2BA4 10                         	dc.b	$10
000A2BA5 E608                       	smpsAlterVol        $08
000A2BA7 A5                         	dc.b	nC3
000A2BA8 E6F1                       	smpsAlterVol        $F1
000A2BAA 08                         	dc.b	$08
000A2BAB E60F                       	smpsAlterVol        $0F
000A2BAD 18                         	dc.b	$18
000A2BAE E6F1                       	smpsAlterVol        $F1
000A2BB0                            
000A2BB0                            GentleBreeze_Loop0A:
000A2BB0 10                         	dc.b	$10
000A2BB1 E607                       	smpsAlterVol        $07
000A2BB3 A5                         	dc.b	nC3
000A2BB4 E6F9                       	smpsAlterVol        $F9
000A2BB6 08                         	dc.b	$08
000A2BB7 E607                       	smpsAlterVol        $07
000A2BB9 A5                         	dc.b	nC3
000A2BBA E608                       	smpsAlterVol        $08
000A2BBC A5                         	dc.b	nC3
000A2BBD E6F1                       	smpsAlterVol        $F1
000A2BBF 18                         	dc.b	$18
000A2BC0 E607                       	smpsAlterVol        $07
000A2BC2 10                         	dc.b	$10
000A2BC3 E608                       	smpsAlterVol        $08
000A2BC5 A5                         	dc.b	nC3
000A2BC6 E6F1                       	smpsAlterVol        $F1
000A2BC8 A5                         	dc.b	nC3
000A2BC9 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A2BCE A5                         	dc.b	nC3
000A2BCF                            
000A2BCF                            GentleBreeze_Loop0B:
000A2BCF E607                       	smpsAlterVol        $07
000A2BD1 A5                         	dc.b	nC3
000A2BD2 E6F9                       	smpsAlterVol        $F9
000A2BD4 08                         	dc.b	$08
000A2BD5 E607                       	smpsAlterVol        $07
000A2BD7 A5                         	dc.b	nC3
000A2BD8 E608                       	smpsAlterVol        $08
000A2BDA A5                         	dc.b	nC3
000A2BDB E6F1                       	smpsAlterVol        $F1
000A2BDD 10                         	dc.b	$10
000A2BDE F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A2BE3                            
000A2BE3                            GentleBreeze_Loop0C:
000A2BE3 A5                         	dc.b	nC3
000A2BE4 E607                       	smpsAlterVol        $07
000A2BE6 A5                         	dc.b	nC3
000A2BE7 E6F9                       	smpsAlterVol        $F9
000A2BE9 08                         	dc.b	$08
000A2BEA E607                       	smpsAlterVol        $07
000A2BEC A5                         	dc.b	nC3
000A2BED E608                       	smpsAlterVol        $08
000A2BEF A5                         	dc.b	nC3
000A2BF0 E6F1                       	smpsAlterVol        $F1
000A2BF2 18                         	dc.b	$18
000A2BF3 E607                       	smpsAlterVol        $07
000A2BF5 10                         	dc.b	$10
000A2BF6 E608                       	smpsAlterVol        $08
000A2BF8 A5                         	dc.b	nC3
000A2BF9 E6F1                       	smpsAlterVol        $F1
000A2BFB A5                         	dc.b	nC3
000A2BFC F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A2C01 A5                         	dc.b	nC3
000A2C02 E607                       	smpsAlterVol        $07
000A2C04 A5                         	dc.b	nC3
000A2C05 E6F9                       	smpsAlterVol        $F9
000A2C07 08                         	dc.b	$08
000A2C08 E607                       	smpsAlterVol        $07
000A2C0A A5                         	dc.b	nC3
000A2C0B E608                       	smpsAlterVol        $08
000A2C0D A5                         	dc.b	nC3
000A2C0E E6F1                       	smpsAlterVol        $F1
000A2C10 10                         	dc.b	$10
000A2C11 E607                       	smpsAlterVol        $07
000A2C13 A5                         	dc.b	nC3
000A2C14 E6F9                       	smpsAlterVol        $F9
000A2C16 08                         	dc.b	$08
000A2C17 E607                       	smpsAlterVol        $07
000A2C19 A5                         	dc.b	nC3
000A2C1A E608                       	smpsAlterVol        $08
000A2C1C A5                         	dc.b	nC3
000A2C1D E6F1                       	smpsAlterVol        $F1
000A2C1F 01                         	dc.b	$01
000A2C20 E0C0                       	smpsPan             panCenter, $00
000A2C22 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A2C25                            
000A2C25                            ; DAC Data
000A2C25                            GentleBreeze_DAC:
000A2C25 81                         	dc.b	dKick
000A2C26                            
000A2C26                            GentleBreeze_Loop00:
000A2C26 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2C2C F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A2C31 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2C3C                            
000A2C3C                            GentleBreeze_Loop01:
000A2C3C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2C42 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A2C47 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2C51                            
000A2C51                            GentleBreeze_Jump00:
000A2C51 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A2C55                            
000A2C55                            GentleBreeze_Loop02:
000A2C55 81                         	dc.b	dKick
000A2C56                            
000A2C56                            GentleBreeze_Loop03:
000A2C56 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A2C62 088A                       	dc.b	$08, dLowTimpani
000A2C64 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A2C69 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A2C75 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A2C7A F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A2C7F                            
000A2C7F                            GentleBreeze_Loop04:
000A2C7F 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2C85 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A2C8A 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2C95                            
000A2C95                            GentleBreeze_Loop05:
000A2C95 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2C9B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A2CA0 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2CAA F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A2CAD                            
000A2CAD                            ; PSG 1 Data
000A2CAD                            GentleBreeze_PSG1:
000A2CAD 80                         	dc.b	nRst
000A2CAE                            
000A2CAE                            GentleBreeze_LoopPSG02:
000A2CAE 7F                         	dc.b	$7F
000A2CAF F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A2CB4 08                         	dc.b	$08
000A2CB5 EC04                       	smpsPSGAlterVol     $04
000A2CB7                            
000A2CB7                            GentleBreeze_JumpPSG01:
000A2CB7 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A2CC3 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A2CCB                            
000A2CCB                            GentleBreeze_LoopPSG03:
000A2CCB 7F                         	dc.b	$7F
000A2CCC F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A2CD1 08A3 01                    	dc.b	$08, nBb2, $01
000A2CD4 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A2CD7                            
000A2CD7                            ; PSG2 Data
000A2CD7                            GentleBreeze_PSG2:
000A2CD7 80                         	dc.b	nRst
000A2CD8                            
000A2CD8                            GentleBreeze_LoopPSG00:
000A2CD8 7F                         	dc.b	$7F
000A2CD9 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A2CDE 08                         	dc.b	$08
000A2CDF EC04                       	smpsPSGAlterVol     $04
000A2CE1                            
000A2CE1                            GentleBreeze_JumpPSG00:
000A2CE1 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A2CED A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A2CF5                            
000A2CF5                            GentleBreeze_LoopPSG01:
000A2CF5 7F                         	dc.b	$7F
000A2CF6 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A2CFB 08A8 01                    	dc.b	$08, nEb3, $01
000A2CFE F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A2D01                            
000A2D01                            GentleBreeze_Voices:
000A2D01                            ;	Voice $00
000A2D01                            ;	$0C
000A2D01                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A2D01                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A2D01                            	smpsVcAlgorithm     $04
000A2D01                            	smpsVcFeedback      $01
000A2D01                            	smpsVcUnusedBits    $00
000A2D01                            	smpsVcDetune        $07, $02, $07, $02
000A2D01                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A2D01                            	smpsVcRateScale     $00, $00, $00, $00
000A2D01                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2D01                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D01                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A2D01                            	smpsVcDecayRate2    $01, $00, $00, $00
000A2D01                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A2D01                            	smpsVcReleaseRate   $09, $01, $04, $03
000A2D01 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A2D1A                            
000A2D1A                            ;	Voice $01
000A2D1A                            ;	$38
000A2D1A                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A2D1A                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A2D1A                            	smpsVcAlgorithm     $00
000A2D1A                            	smpsVcFeedback      $07
000A2D1A                            	smpsVcUnusedBits    $00
000A2D1A                            	smpsVcDetune        $03, $07, $01, $05
000A2D1A                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A2D1A                            	smpsVcRateScale     $00, $02, $00, $02
000A2D1A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2D1A                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D1A                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A2D1A                            	smpsVcDecayRate2    $00, $00, $10, $00
000A2D1A                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2D1A                            	smpsVcReleaseRate   $08, $05, $05, $05
000A2D1A 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A2D33                            
000A2D33                            ;	Voice $02
000A2D33                            ;	$00
000A2D33                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2D33                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2D33                            	smpsVcAlgorithm     $00
000A2D33                            	smpsVcFeedback      $00
000A2D33                            	smpsVcUnusedBits    $00
000A2D33                            	smpsVcDetune        $00, $00, $00, $00
000A2D33                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2D33                            	smpsVcRateScale     $00, $00, $00, $00
000A2D33                            	smpsVcAttackRate    $00, $00, $00, $00
000A2D33                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D33                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2D33                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2D33                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2D33                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2D33 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2D4C                            
000A2D4C                            ;	Voice $03
000A2D4C                            ;	$36
000A2D4C                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A2D4C                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A2D4C                            	smpsVcAlgorithm     $06
000A2D4C                            	smpsVcFeedback      $06
000A2D4C                            	smpsVcUnusedBits    $00
000A2D4C                            	smpsVcDetune        $00, $00, $00, $00
000A2D4C                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A2D4C                            	smpsVcRateScale     $00, $00, $00, $00
000A2D4C                            	smpsVcAttackRate    $1F, $00, $18, $16
000A2D4C                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D4C                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A2D4C                            	smpsVcDecayRate2    $00, $00, $12, $00
000A2D4C                            	smpsVcDecayLevel    $04, $04, $02, $00
000A2D4C                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A2D4C 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A2D65                            
000A2D65                            ;	Voice $04
000A2D65                            ;	$07
000A2D65                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A2D65                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A2D65                            	smpsVcAlgorithm     $07
000A2D65                            	smpsVcFeedback      $00
000A2D65                            	smpsVcUnusedBits    $00
000A2D65                            	smpsVcDetune        $07, $06, $05, $00
000A2D65                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A2D65                            	smpsVcRateScale     $00, $01, $01, $01
000A2D65                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A2D65                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D65                            	smpsVcDecayRate1    $17, $17, $17, $17
000A2D65                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2D65                            	smpsVcDecayLevel    $02, $02, $02, $02
000A2D65                            	smpsVcReleaseRate   $06, $06, $06, $06
000A2D65 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2D7E                            
000A2D7E                            ;	Voice $05
000A2D7E                            ;	$3C
000A2D7E                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A2D7E                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A2D7E                            	smpsVcAlgorithm     $04
000A2D7E                            	smpsVcFeedback      $07
000A2D7E                            	smpsVcUnusedBits    $00
000A2D7E                            	smpsVcDetune        $06, $06, $02, $02
000A2D7E                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A2D7E                            	smpsVcRateScale     $00, $00, $00, $00
000A2D7E                            	smpsVcAttackRate    $0E, $14, $10, $13
000A2D7E                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D7E                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A2D7E                            	smpsVcDecayRate2    $04, $04, $04, $04
000A2D7E                            	smpsVcDecayLevel    $02, $01, $01, $01
000A2D7E                            	smpsVcReleaseRate   $07, $07, $07, $07
000A2D7E 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A2D97                            
000A2D97                            
000A2D98 00                         		even
000A2D98                            ; ---------------------------------------------------------------------------
000A2D98                            ; Sound	effect pointers
000A2D98                            ; ---------------------------------------------------------------------------
000A2D98 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A2DA4 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A2DB0 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A2DBC 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A2DC8 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A2DD4 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A2DE0 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A2DEC 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A2DF8 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A2E04 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A2E10 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A2E1C 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A2E28 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A2E34 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A2E40 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A2E4C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A2E58 0000 0000                  SoundD0Index:	dc.l SoundD0
000A2E5C                            SoundA0:	include	sound\jump.asm
000A2E5C                            jump_Header:
000A2E5C =00000001                  smpsHeaderStartSong = 1
000A2E5C 0000                       	smpsHeaderVoice     jump_Voices
000A2E5E 01                         	smpsHeaderTempoSFX  $01
000A2E5F 01                         	smpsHeaderChanSFX   $01
000A2E60                            
000A2E6C                            
000A2E6C                            ; FM4 Data
000A2E6C                            jump_FM4:
000A2E6E E000                       	smpsPan             panNone, $00
000A2E70 E607                       	smpsAlterVol        $07
000A2E72 E0C0                       	smpsPan             panCenter, $00
000A2E74 9903 B1                    	dc.b	nC2, $03, nC4
000A2E77 E607                       	smpsAlterVol        $07
000A2E79 E040                       	smpsPan             panRight, $00
000A2E7B 99B1                       	dc.b	nC2, nC4
000A2E7D E60A                       	smpsAlterVol        $0A
000A2E7F E080                       	smpsPan             panLeft, $00
000A2E81 99B1                       	dc.b	nC2, nC4
000A2E83 E603                       	smpsAlterVol        $03
000A2E85 E0C0                       	smpsPan             panCenter, $00
000A2E87 99B1                       	dc.b	nC2, nC4
000A2E89 E000                       	smpsPan             panNone, $00
000A2E8B 803D                       	dc.b	nRst, $3D
000A2E8D F2                         	smpsStop
000A2E8E                            
000A2E8E                            ; PSG3 Data
000A2E8E                            jump_PSG3:
000A2E8E F3E7                       	smpsPSGform         $E7
000A2E90 8056                       	dc.b	nRst, $56
000A2E92 F2                         	smpsStop
000A2E93                            
000A2E93                            jump_Voices:
000A2E93                            ;	Voice $00
000A2E93                            ;	$3C
000A2E93                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A2E93                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A2E93                            	smpsVcAlgorithm     $04
000A2E93                            	smpsVcFeedback      $07
000A2E93                            	smpsVcUnusedBits    $00
000A2E93                            	smpsVcDetune        $00, $00, $00, $00
000A2E93                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A2E93                            	smpsVcRateScale     $00, $00, $00, $00
000A2E93                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2E93                            	smpsVcAmpMod        $00, $00, $00, $00
000A2E93                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A2E93                            	smpsVcDecayRate2    $11, $00, $11, $00
000A2E93                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A2E93                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2E93 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2EAC                            
000A2EAC                            
000A2EAC                            		even
000A2EAC                            SoundA1:	incbin	sound\soundA1.bin
000A2ED6                            		even
000A2ED6                            SoundA2:	incbin	sound\soundA2.bin
000A2EF6                            		even
000A2EF6                            SoundA3:	incbin	sound\soundA3.bin
000A2F28                            		even
000A2F28                            SoundA4:	incbin	sound\soundA4.bin
000A2F5E                            		even
000A2F5E                            SoundA5:	include	sound\fart.asm
000A2F5E                            Fart_Header:
000A2F5E =00000001                  smpsHeaderStartSong = 1
000A2F5E 0000                       	smpsHeaderVoice     Fart_Voices
000A2F60 01                         	smpsHeaderTempoSFX  $01
000A2F61 04                         	smpsHeaderChanSFX   $04
000A2F62                            
000A2F7A                            
000A2F7A                            Fart_FM3:
000A2F7C E607                       	smpsAlterVol        $07
000A2F7E E0C0                       	smpsPan             panCenter, $00
000A2F80 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2F85 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A2F88 E1FE                       	smpsAlterNote       $FE
000A2F8A A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A2F8D E100                       	smpsAlterNote       $00
000A2F8F A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A2F94 F2                         	smpsStop
000A2F95                            
000A2F95                            ; FM4 Data
000A2F95                            Fart_FM4:
000A2F97 E0C0                       	smpsPan             panCenter, $00
000A2F99 8006                       	dc.b	nRst, $06
000A2F9D E616                       	smpsAlterVol        $16
000A2F9F E080                       	smpsPan             panLeft, $00
000A2FA1 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2FA6 A212                       	dc.b	nA2, $12
000A2FA8 E60A                       	smpsAlterVol        $0A
000A2FAA E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2FAD E603                       	smpsAlterVol        $03
000A2FAF E7A2                       	dc.b	smpsNoAttack, nA2
000A2FB1 E603                       	smpsAlterVol        $03
000A2FB3 E7A2                       	dc.b	smpsNoAttack, nA2
000A2FB5 E604                       	smpsAlterVol        $04
000A2FB7 E7A2                       	dc.b	smpsNoAttack, nA2
000A2FB9 E606                       	smpsAlterVol        $06
000A2FBB E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A2FBE E610                       	smpsAlterVol        $10
000A2FC0 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2FC3 E610                       	smpsAlterVol        $10
000A2FC5 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A2FCA F2                         	smpsStop
000A2FCB                            
000A2FCB                            ; FM5 Data
000A2FCB                            Fart_FM5:
000A2FCD E0C0                       	smpsPan             panCenter, $00
000A2FCF 8009                       	dc.b	nRst, $09
000A2FD3 E616                       	smpsAlterVol        $16
000A2FD5 E040                       	smpsPan             panRight, $00
000A2FD7 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2FDC A215                       	dc.b	nA2, $15
000A2FDE E60A                       	smpsAlterVol        $0A
000A2FE0 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2FE3 E603                       	smpsAlterVol        $03
000A2FE5 E7A2                       	dc.b	smpsNoAttack, nA2
000A2FE7 E603                       	smpsAlterVol        $03
000A2FE9 E7A2                       	dc.b	smpsNoAttack, nA2
000A2FEB E604                       	smpsAlterVol        $04
000A2FED E7A2                       	dc.b	smpsNoAttack, nA2
000A2FEF E606                       	smpsAlterVol        $06
000A2FF1 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A2FF4 E610                       	smpsAlterVol        $10
000A2FF6 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2FF9 E610                       	smpsAlterVol        $10
000A2FFB E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A3000 F2                         	smpsStop
000A3001                            
000A3001                            ; PSG3 Data
000A3001                            Fart_PSG3:
000A3001 F2                         	smpsStop
000A3002                            
000A3002                            ; FM Voices
000A3002                            Fart_Voices:
000A3002                            ;	Voice $00
000A3002                            ;	$39
000A3002                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A3002                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A3002                            	smpsVcAlgorithm     $01
000A3002                            	smpsVcFeedback      $07
000A3002                            	smpsVcUnusedBits    $00
000A3002                            	smpsVcDetune        $00, $07, $03, $07
000A3002                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A3002                            	smpsVcRateScale     $00, $03, $03, $03
000A3002                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A3002                            	smpsVcAmpMod        $00, $00, $00, $00
000A3002                            	smpsVcDecayRate1    $00, $00, $00, $04
000A3002                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A3002                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A3002                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A3002 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A301B                            
000A301B                            ;	Voice $01
000A301B                            ;	$00
000A301B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A301B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A301B                            	smpsVcAlgorithm     $00
000A301B                            	smpsVcFeedback      $00
000A301B                            	smpsVcUnusedBits    $00
000A301B                            	smpsVcDetune        $00, $00, $00, $00
000A301B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A301B                            	smpsVcRateScale     $00, $00, $00, $00
000A301B                            	smpsVcAttackRate    $00, $00, $00, $00
000A301B                            	smpsVcAmpMod        $00, $00, $00, $00
000A301B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A301B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A301B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A301B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A301B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A301B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A3034                            		even
000A3034                            SoundA6:	incbin	sound\soundA6.bin
000A3064                            		even
000A3064                            SoundA7:	incbin	sound\soundA7.bin
000A3094                            		even
000A3094                            SoundA8:	incbin	sound\soundA8.bin
000A30C8                            		even
000A30C8                            SoundA9:	incbin	sound\soundA9.bin
000A30DA                            		even
000A30DA                            SoundAA:	incbin	sound\soundAA.bin
000A311C                            		even
000A311C                            SoundAB:	incbin	sound\soundAB.bin
000A313C                            		even
000A313C                            SoundAC:	incbin	sound\soundAC.bin
000A3170                            		even
000A3170                            SoundAD:	incbin	sound\soundAD.bin
000A31A6                            		even
000A31A6                            SoundAE:	incbin	sound\soundAE.bin
000A31F0                            		even
000A31F0                            SoundAF:	incbin	sound\soundAF.bin
000A321E                            		even
000A321E                            SoundB0:	incbin	sound\soundB0.bin
000A3250                            		even
000A3250                            SoundB1:	incbin	sound\soundB1.bin
000A327C                            		even
000A327C                            SoundB2:	incbin	sound\soundB2.bin
000A32CC                            		even
000A32CC                            SoundB3:	incbin	sound\soundB3.bin
000A3316                            		even
000A3316                            SoundB4:	include	sound\soundB4.asm
000A3316                            SndB4_Bumper_Header:
000A3316 =00000001                  smpsHeaderStartSong = 1
000A3316 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A3318 01                         	smpsHeaderTempoSFX  $01
000A3319 03                         	smpsHeaderChanSFX   $03
000A331A                            
000A332C                            
000A332C                            ; FM5 Data
000A332C                            SndB4_Bumper_FM5:
000A332E F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A3331                            
000A3331                            ; FM4 Data
000A3331                            SndB4_Bumper_FM4:
000A3331 F2                         	smpsStop
000A3332                            
000A3332                            SndB4_Bumper_Jump00:
000A3332 A020                       	dc.b	nG2, $20
000A3334 F2                         	smpsStop
000A3335                            
000A3335                            ; FM3 Data
000A3335                            SndB4_Bumper_FM3:
000A3335 F2                         	smpsStop
000A3336                            
000A3336                            SndB4_Bumper_Voices:
000A3336                            ;	Voice $00
000A3336                            ;	$32
000A3336                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A3336                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A3336                            	smpsVcAlgorithm     $02
000A3336                            	smpsVcFeedback      $06
000A3336                            	smpsVcUnusedBits    $00
000A3336                            	smpsVcDetune        $07, $07, $02, $00
000A3336                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A3336                            	smpsVcRateScale     $00, $00, $00, $00
000A3336                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A3336                            	smpsVcAmpMod        $00, $00, $00, $00
000A3336                            	smpsVcDecayRate1    $08, $00, $00, $09
000A3336                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A3336                            	smpsVcDecayLevel    $00, $00, $00, $00
000A3336                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A3336 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A3336 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A3350 00                         		even
000A3350                            SoundB5:	incbin	sound\soundB5.bin
000A336E 00                         		even
000A336E                            SoundB6:	incbin	sound\soundB6.bin
000A338C                            		even
000A338C                            SoundB7:	incbin	sound\soundB7.bin
000A33C8                            		even
000A33C8                            SoundB8:	incbin	sound\soundB8.bin
000A33E6                            		even
000A33E6                            SoundB9:	incbin	sound\soundB9.bin
000A344A                            		even
000A344A                            SoundBA:	incbin	sound\soundBA.bin
000A3472                            		even
000A3472                            SoundBB:	incbin	sound\soundBB.bin
000A349E                            		even
000A349E                            SoundBC:	incbin	sound\soundBC.bin
000A34E0                            		even
000A34E0                            SoundBD:	incbin	sound\soundBD.bin
000A3534                            		even
000A3534                            SoundBE:	incbin	sound\soundBE.bin
000A356E                            		even
000A356E                            SoundBF:	incbin	sound\soundBF.bin
000A35E0                            		even
000A35E0                            SoundC0:	incbin	sound\soundC0.bin
000A360E                            		even
000A360E                            SoundC1:	incbin	sound\soundC1.bin
000A3668                            		even
000A3668                            SoundC2:	incbin	sound\soundC2.bin
000A3692                            		even
000A3692                            SoundC3:	incbin	sound\soundC3.bin
000A370C                            		even
000A370C                            SoundC4:	incbin	sound\soundC4.bin
000A380A                            		even
000A380A                            SoundC5:	incbin	sound\soundC5.bin
000A3872                            		even
000A3872                            SoundC6:	incbin	sound\soundC6.bin
000A38B4                            		even
000A38B4                            SoundC7:	incbin	sound\soundC7.bin
000A38E2                            		even
000A38E2                            SoundC8:	incbin	sound\soundC8.bin
000A38F4                            		even
000A38F4                            SoundC9:	incbin	sound\soundC9.bin
000A3922                            		even
000A3922                            SoundCA:	incbin	sound\soundCA.bin
000A3950                            		even
000A3950                            SoundCB:	incbin	sound\soundCB.bin
000A399C                            		even
000A399C                            SoundCC:	incbin	sound\C9.ssf
000A39CA                            		even
000A39CA                            SoundCD:	incbin	sound\soundCD.bin
000A39F6                            		even
000A39F6                            SoundCE:	incbin	sound\soundCE.bin
000A3A14 00                         		even
000A3A14                            SoundCF:	incbin	sound\soundCF.bin
000A3A4C                            		even
000A3A4C                            SoundD0:	incbin	sound\soundD0.bin
000A3A86                            		even
000A3A86                            SegaPCM:	incbin	sound\segapcm.bin
000BDBDC                            SegaPCM_end:	even
000BDBDC                            
000BDBDC                            IdiotPCM:	incbin	sound\youare.bin
000C7CAE 00                         IdiotPCM_end:	even
000C7CAE                            
000C7CAE                            Minecraft:	include	minecraft\code\main.asm
000C7CAE                            ; Minecraft: Very Legacy Console Edition
000C7CAE                            ; Main file
000C7CAE                            
000C7CAE                            ;	align	$20000
000C7CAE                            	opt	l.
000C7CAE                            	include	"minecraft\code\variables.asm"
000C7CAE                            ; Minecraft: Very Legacy Console Edition
000C7CAE                            ; Variable Definitions
000C7CAE                            
000C7CAE =00000040                  MAP_HEIGHT	equ	64
000C7CAE =00000100                  MAP_WIDTH	equ	256
000C7CAE                            
000C7CAE                            		rsset	$FF0000
000C7CAE =00FF0000                  mcRAM		rs.b	0
000C7CAE =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C7CAE =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C7CAE                            
000C7CAE                            		rsset	$FFFF8000
000C7CAE =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C7CAE =FFFF8E80                  planeBuffer_End	rs.b	0
000C7CAE =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000C7CAE                            
000C7CAE =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C7CAE =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C7CAE =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C7CAE =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C7CAE                            
000C7CAE                            		rsset	__rs&$FFFFFF
000C7CAE =00FF8E88                  mcRAM_End	rs.b	0
000C7CAE =00FF8E88                  mcRAM_End	rs.b	0
000C7CAE                            	include	"minecraft\code\macros.asm"
000C7CAE                            ; =========================================================================================================================================================
000C7CAE                            ; MegaDrive macros
000C7CAE                            ; =========================================================================================================================================================
000C7CAE                            clrRAM		macro	starta, enda
000C7CAE                            		local	endaddr
000C7CAE                            		if narg<2
000C7CAE                            endaddr			EQUS	"\starta\_End"
000C7CAE                            		else
000C7CAE                            endaddr			EQUS	"\enda"
000C7CAE                            		endif
000C7CAE                            
000C7CAE                            		moveq	#0,d0
000C7CAE                            
000C7CAE                            		if ((\starta)&$8000)=0
000C7CAE                            			lea	\starta,a1
000C7CAE                            		else
000C7CAE                            			lea	(\starta).w,a1
000C7CAE                            		endif
000C7CAE                            		if (\starta)&1
000C7CAE                            			move.b	d0,(a1)+
000C7CAE                            		endif
000C7CAE                            
000C7CAE                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000C7CAE                            .Clear\@:	move.l	d0,(a1)+
000C7CAE                            		dbf	d1,.Clear\@
000C7CAE                            
000C7CAE                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000C7CAE                            			move.w	d0,(a1)+
000C7CAE                            		endif
000C7CAE                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000C7CAE                            			move.b	d0,(a1)+
000C7CAE                            		endif
000C7CAE                            		endm
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; Disable interrupts
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; ARGUMENTS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; RETURNS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            intsOff		macros
000C7CAE                            		ori	#$700,sr
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; Enable interrupts
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; ARGUMENTS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; RETURNS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            intsOn		macros
000C7CAE                            		andi	#$F8FF,sr
000C7CAE                            
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; VDP command instruction
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; ARGUMENTS:
000C7CAE                            ;	addr	- Address in VDP memory
000C7CAE                            ;	type	- Type of VDP memory
000C7CAE                            ;	rwd	- VDP command
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; RETURNS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE =00000021                  VRAM		EQU	%100001		; VRAM
000C7CAE =0000002B                  CRAM		EQU	%101011		; CRAM
000C7CAE =00000025                  VSRAM		EQU	%100101		; VSRAM
000C7CAE =0000000C                  READ		EQU	%001100		; VDP read
000C7CAE =00000007                  WRITE		EQU	%000111		; VDP write
000C7CAE =00000027                  DMA		EQU	%100111		; VDP DMA
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000C7CAE                            		if narg=5
000C7CAE                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000C7CAE                            		elseif narg>=6
000C7CAE                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000C7CAE                            		else
000C7CAE                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000C7CAE                            		endif
000C7CAE                            		endm
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; VDP DMA from 68000 memory to VDP memory
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; ARGUMENTS:
000C7CAE                            ;	src	- Source address in 68000 memory
000C7CAE                            ;	dest	- Destination address in VDP memory
000C7CAE                            ;	len	- Length of data in bytes
000C7CAE                            ;	type	- Type of VDP memory
000C7CAE                            ;	a6.l	- VDP control port
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; RETURNS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            dma68k		macro	src, dest, len, type
000C7CAE                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000C7CAE                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000C7CAE                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000C7CAE                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000C7CAE                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000C7CAE                            		move.w	(sp)+,(a6)
000C7CAE                            		endm
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; Fill VRAM with byte
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; ARGUMENTS:
000C7CAE                            ;	byte	- Byte to fill VRAM with
000C7CAE                            ;	addr	- Address in VRAM
000C7CAE                            ;	len	- Length of fill in bytes
000C7CAE                            ;	a6.l	- VDP control port
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; RETURNS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            dmaFill		macro	byte, addr, len
000C7CAE                            		move.w	#$8F01,(a6)
000C7CAE                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000C7CAE                            		move.w	#$9780,(a6)
000C7CAE                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000C7CAE                            		move.w	#(\byte)<<8,-4(a6)
000C7CAE                            		waitDMA	(a6)
000C7CAE                            		move.w	#$8F02,(a6)
000C7CAE                            		endm
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; Copy a region of VRAM to a location in VRAM
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; ARGUMENTS:
000C7CAE                            ;	src	- Source address in VRAM
000C7CAE                            ;	dest	- Destination address in VRAM
000C7CAE                            ;	len	- Length of copy in bytes
000C7CAE                            ;	a6.l	- VDP control port
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            ; RETURNS:
000C7CAE                            ;	Nothing
000C7CAE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7CAE                            dmaCopy		macro	src, dest, len
000C7CAE                            		move.w	#$8F01,(a6)
000C7CAE                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000C7CAE                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000C7CAE                            		move.w	#$97C0,(a6)
000C7CAE                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000C7CAE                            		waitDMA	(a6)
000C7CAE                            		move.w	#$8F02,(a6)
000C7CAE                            		endm
000C7CAE                            		endm
000C7CAE                            
000C7CAE                            MC_Init:
000C7CAE 007C 0700                  		intsOff						; disable CPU interrupts
000C7CB2 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000C7CBA                            
000C7CBA 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000C7CC0 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000C7CC4                            
000C7CC4 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000C7CC8 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000C7CCC 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000C7CD0 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000C7CD4                            		
000C7CD4 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000C7CD8 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000C7CDC 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000C7CE0 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000C7CE4 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000C7CE8                            
000C7CFA 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000C7CFE                            
000C7CFE                            .waitVBlank:	
000C7CFE 44D6                       		move.w	(a6),ccr				; is v-blank active?
000C7D00 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000C7D02                            
000C7D36                            
000C7D36 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000C7D3A 027C F8FF                  		intsOn						; enable CPU interrupts
000C7D3E                            
000C7D3E 41FA 0000                  		lea	MC_BlockRender(pc),a0
000C7D42 43F8 8000                  		lea	(planeBuffer).w,a1
000C7D46 7E2E                       		moveq	#$2F-1,d7
000C7D48                            
000C7D48                            .loopLo:
000C7D48 32D8                       		move.w	(a0)+,(a1)+
000C7D4A 51CF FFFC                  		dbf	d7,.loopLo
000C7D4E                            
000C7D4E 41FA 0000                  		lea	MC_BlockRender(pc),a0
000C7D52 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000C7D56 7E2E                       		moveq	#$2F-1,d7
000C7D58                            
000C7D58                            .loopHi:
000C7D58 303C 8000                  		move.w	#$8000,d0
000C7D5C 8058                       		or.w	(a0)+,d0
000C7D5E 32C0                       		move.w	d0,(a1)+
000C7D60 51CF FFF6                  		dbf	d7,.loopHi
000C7D64                            
000C7D64 6000 FFFE                  		bra.w	*					; spin infinitely
000C7D68                            
000C7D68                            ; ===========================================================================
000C7D68                            ; ---------------------------------------------------------------------------
000C7D68                            ; Clear The Screen
000C7D68                            ; ---------------------------------------------------------------------------
000C7D68                            MC_ClearScreen:
000C7D68 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000C7D6C                            
000C7D6C 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000C7D72 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7D76 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000C7D7C 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7D82                            
000C7D82 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7D84 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000C7D86                            
000C7D86 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000C7D8C 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7D90 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000C7D96 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7D9C                            
000C7D9C 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7D9E 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000C7DA0                            
000C7DA0 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000C7DA6 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7DAA 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000C7DB0 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7DB6                            
000C7DB6 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7DB8 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000C7DBA                            
000C7DBA 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000C7DBE 4E75                       		rts						; return
000C7DC0                            ; ---------------------------------------------------------------------------
000C7DC0                            
000C7DC0                            ; ===========================================================================
000C7DC0                            ; ---------------------------------------------------------------------------
000C7DC0                            ; VBlank Interrupt
000C7DC0                            ; ---------------------------------------------------------------------------
000C7DC0                            MC_VInt:
000C7DDA                            
000C7DDA 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000C7DE4 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000C7DEA                            
000C7DEA                            
000C7DEA 4E73                       		rte						; return
000C7DEC                            ; ---------------------------------------------------------------------------
000C7DEC                            
000C7DEC                            block_entry	macro	tileID, palLine, priority
000C7DEC                            	if (narg<3)
000C7DEC                            		dc.w	(palLine<<13)|tileID
000C7DEC                            	else
000C7DEC                            		dc.w	$8000|(palLine<<13)|tileID
000C7DEC                            	endif
000C7DEC                            		endm
000C7DEC                            
000C7DEC                            MC_BlockRender:
000C7E2C                            
000C7E4A                            
000C7E4A                            ; ---------------------------------------------------------------------------
000C7E4A                            MC_Palette:
000C7E4A 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000C7E6A 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000C7E8A 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000C7EAA 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7ECA                            ; ---------------------------------------------------------------------------
000C7ECA                            MC_Terrain:
000C7ECA                            	incbin	"minecraft\assets\bin\terrain.bin"
000C834A                            MC_Terrain_End:
000C834A                            ; ---------------------------------------------------------------------------
000C834A                            ; ---------------------------------------------------------------------------
000C834A                            ; end of 'ROM'
000C834A                            EndOfRom:
000C834A                            
000C834A                            
